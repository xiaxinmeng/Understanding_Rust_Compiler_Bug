{"sha": "7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZTBkNGY5YzI0OWRhODBjZWI5MmM1ODc4YmQwMGY4NzY0YmE5MjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-12T08:55:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-04-12T08:55:34Z"}, "message": "Dogfood tests", "tree": {"sha": "676f3276ddd75a80cc862a9450022303c0bf9584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/676f3276ddd75a80cc862a9450022303c0bf9584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "html_url": "https://github.com/rust-lang/rust/commit/7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee0d4f9c249da80ceb92c5878bd00f8764ba921/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3534149035ea6608bf7f8f60c8ca4dce41934611", "url": "https://api.github.com/repos/rust-lang/rust/commits/3534149035ea6608bf7f8f60c8ca4dce41934611", "html_url": "https://github.com/rust-lang/rust/commit/3534149035ea6608bf7f8f60c8ca4dce41934611"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "9b248b894a05b49b0c9a1215bc3b2ca3f052fa87", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0d4f9c249da80ceb92c5878bd00f8764ba921/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0d4f9c249da80ceb92c5878bd00f8764ba921/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "patch": "@@ -225,6 +225,7 @@ fn with_if_expr<F>(stmt: &ast::Stmt, mut func: F)\n }\n \n /// A type to distinguish between the two distinct cases this lint handles.\n+#[derive(Copy, Clone, Debug)]\n enum LintType {\n     ContinueInsideElseBlock,\n     ContinueInsideThenBlock,\n@@ -361,17 +362,18 @@ fn check_and_warn<'a>(ctx: &EarlyContext, expr: &'a ast::Expr) {\n /// continues eating till a non-whitespace character is found.\n /// e.g., the string\n ///\n-///     \"\n+/// ```\n ///     {\n ///         let x = 5;\n ///     }\n-///     \"\n+/// ```\n ///\n /// is transformed to\n ///\n-///     \"\n+/// ```\n ///     {\n ///         let x = 5;\"\n+/// ```\n ///\n /// NOTE: when there is no closing brace in `s`, `s` is _not_ preserved, i.e.,\n /// an empty string will be returned in that case.\n@@ -391,19 +393,21 @@ pub fn erode_from_back(s: &str) -> String {\n /// any number of opening braces are eaten, followed by any number of newlines.\n /// e.g.,  the string\n ///\n-///     \"\n+/// ```\n ///         {\n ///             something();\n ///             inside_a_block();\n ///         }\n-///     \"\n+/// ```\n ///\n /// is transformed to\n ///\n-///     \"        something();\n+/// ```\n+///             something();\n ///             inside_a_block();\n ///         }\n-///     \"\n+///     \n+/// ```\n ///\n pub fn erode_from_front(s: &str) -> String {\n     s.chars()"}, {"sha": "5782d3ef3a8a5216c00e6881cf773a64adee24e5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0d4f9c249da80ceb92c5878bd00f8764ba921/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0d4f9c249da80ceb92c5878bd00f8764ba921/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=7ee0d4f9c249da80ceb92c5878bd00f8764ba921", "patch": "@@ -1093,6 +1093,7 @@ pub fn align_two_snippets(s: &str, t: &str) -> String {\n ///\n /// For example, consider\n ///\n+/// ```\n ///         let s1 = \"\\\n ///     if (condition()) {\n ///         do_something()\";\n@@ -1103,18 +1104,19 @@ pub fn align_two_snippets(s: &str, t: &str) -> String {\n ///         let s3 = \"\\\n ///     another_piece_of_code();\n ///         indented_here();\";\n-///\n+/// ```\n ///\n ///\n ///\n /// Now calling `align_snippets(&[s1, s2, s3])` will yield the following:\n ///\n-///     \"\\\n+/// ```\n ///     if (condition()) {\n ///         do_something();\n ///         code_from_somewhere_else();\n ///         another_piece_of_code();\n-///             indented_here();\"\n+///             indented_here();\n+/// ```\n pub fn align_snippets(xs: &[&str]) -> String {\n     if xs.is_empty() {\n         String::from(\"\")"}]}