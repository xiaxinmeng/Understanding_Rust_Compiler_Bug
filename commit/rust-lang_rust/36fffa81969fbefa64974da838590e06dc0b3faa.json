{"sha": "36fffa81969fbefa64974da838590e06dc0b3faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZmZmYTgxOTY5ZmJlZmE2NDk3NGRhODM4NTkwZTA2ZGMwYjNmYWE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-15T11:14:36Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-20T10:00:43Z"}, "message": "hir: remove parent_node from NodeCollector", "tree": {"sha": "db9ad57b0149802aeba96289f23208ec7657fb5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db9ad57b0149802aeba96289f23208ec7657fb5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36fffa81969fbefa64974da838590e06dc0b3faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36fffa81969fbefa64974da838590e06dc0b3faa", "html_url": "https://github.com/rust-lang/rust/commit/36fffa81969fbefa64974da838590e06dc0b3faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36fffa81969fbefa64974da838590e06dc0b3faa/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56bf2c63167bf462e7a514a4f222305e04a72a0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/56bf2c63167bf462e7a514a4f222305e04a72a0a", "html_url": "https://github.com/rust-lang/rust/commit/56bf2c63167bf462e7a514a4f222305e04a72a0a"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "5b3e9873353d1934bc50ddc5244235779b2c634e", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/36fffa81969fbefa64974da838590e06dc0b3faa/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36fffa81969fbefa64974da838590e06dc0b3faa/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=36fffa81969fbefa64974da838590e06dc0b3faa", "patch": "@@ -27,8 +27,6 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     /// The node map\n     map: Vec<Option<Entry<'hir>>>,\n     /// The parent of this node\n-    parent_node: NodeId,\n-\n     parent_hir: hir::HirId,\n \n     // These fields keep track of the currently relevant DepNodes during\n@@ -149,7 +147,6 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             krate,\n             source_map: sess.source_map(),\n             map: repeat(None).take(sess.current_node_id_count()).collect(),\n-            parent_node: CRATE_NODE_ID,\n             parent_hir: hir::CRATE_HIR_ID,\n             current_signature_dep_index: root_mod_sig_dep_index,\n             current_full_dep_index: root_mod_full_dep_index,\n@@ -233,7 +230,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn insert(&mut self, span: Span, hir_id: HirId, node: Node<'hir>) {\n         let entry = Entry {\n-            parent: self.parent_node,\n+            parent: self.hir_to_node_id[&self.parent_hir],\n             parent_hir: self.parent_hir,\n             dep_node: if self.currently_in_body {\n                 self.current_full_dep_index\n@@ -286,17 +283,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn with_parent<F: FnOnce(&mut Self)>(\n         &mut self,\n-        parent_node_id: NodeId,\n         parent_hir_id: HirId,\n         f: F,\n     ) {\n-        let parent_node = self.parent_node;\n-        self.parent_node = parent_node_id;\n         let parent_hir = self.parent_hir;\n         self.parent_hir = parent_hir_id;\n         f(self);\n         self.parent_hir = parent_hir;\n-        self.parent_node = parent_node;\n     }\n \n     fn with_dep_node_owner<T: for<'b> HashStable<StableHashingContext<'b>>,\n@@ -366,7 +359,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n                          self.definitions.opt_def_index(i.id).unwrap());\n         self.with_dep_node_owner(i.hir_id.owner, i, |this| {\n             this.insert(i.span, i.hir_id, Node::Item(i));\n-            this.with_parent(i.id, i.hir_id, |this| {\n+            this.with_parent(i.hir_id, |this| {\n                 if let ItemKind::Struct(ref struct_def, _) = i.node {\n                     // If this is a tuple-like struct, register the constructor.\n                     if !struct_def.is_struct() {\n@@ -381,7 +374,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem) {\n         self.insert(foreign_item.span, foreign_item.hir_id, Node::ForeignItem(foreign_item));\n \n-        self.with_parent(foreign_item.id, foreign_item.hir_id, |this| {\n+        self.with_parent(foreign_item.hir_id, |this| {\n             intravisit::walk_foreign_item(this, foreign_item);\n         });\n     }\n@@ -397,7 +390,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.with_dep_node_owner(ti.hir_id.owner, ti, |this| {\n             this.insert(ti.span, ti.hir_id, Node::TraitItem(ti));\n \n-            this.with_parent(ti.id, ti.hir_id, |this| {\n+            this.with_parent(ti.hir_id, |this| {\n                 intravisit::walk_trait_item(this, ti);\n             });\n         });\n@@ -409,7 +402,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.with_dep_node_owner(ii.hir_id.owner, ii, |this| {\n             this.insert(ii.span, ii.hir_id, Node::ImplItem(ii));\n \n-            this.with_parent(ii.id, ii.hir_id, |this| {\n+            this.with_parent(ii.hir_id, |this| {\n                 intravisit::walk_impl_item(this, ii);\n             });\n         });\n@@ -423,31 +416,31 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         };\n         self.insert(pat.span, pat.hir_id, node);\n \n-        self.with_parent(pat.id, pat.hir_id, |this| {\n+        self.with_parent(pat.hir_id, |this| {\n             intravisit::walk_pat(this, pat);\n         });\n     }\n \n     fn visit_anon_const(&mut self, constant: &'hir AnonConst) {\n         self.insert(DUMMY_SP, constant.hir_id, Node::AnonConst(constant));\n \n-        self.with_parent(constant.id, constant.hir_id, |this| {\n+        self.with_parent(constant.hir_id, |this| {\n             intravisit::walk_anon_const(this, constant);\n         });\n     }\n \n     fn visit_expr(&mut self, expr: &'hir Expr) {\n         self.insert(expr.span, expr.hir_id, Node::Expr(expr));\n \n-        self.with_parent(expr.id, expr.hir_id, |this| {\n+        self.with_parent(expr.hir_id, |this| {\n             intravisit::walk_expr(this, expr);\n         });\n     }\n \n     fn visit_stmt(&mut self, stmt: &'hir Stmt) {\n         self.insert(stmt.span, stmt.hir_id, Node::Stmt(stmt));\n \n-        self.with_parent(stmt.id, stmt.hir_id, |this| {\n+        self.with_parent(stmt.hir_id, |this| {\n             intravisit::walk_stmt(this, stmt);\n         });\n     }\n@@ -463,15 +456,15 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_ty(&mut self, ty: &'hir Ty) {\n         self.insert(ty.span, ty.hir_id, Node::Ty(ty));\n \n-        self.with_parent(ty.id, ty.hir_id, |this| {\n+        self.with_parent(ty.hir_id, |this| {\n             intravisit::walk_ty(this, ty);\n         });\n     }\n \n     fn visit_trait_ref(&mut self, tr: &'hir TraitRef) {\n         self.insert(tr.path.span, tr.hir_ref_id, Node::TraitRef(tr));\n \n-        self.with_parent(tr.ref_id, tr.hir_ref_id, |this| {\n+        self.with_parent(tr.hir_ref_id, |this| {\n             intravisit::walk_trait_ref(this, tr);\n         });\n     }\n@@ -484,14 +477,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_block(&mut self, block: &'hir Block) {\n         self.insert(block.span, block.hir_id, Node::Block(block));\n-        self.with_parent(block.id, block.hir_id, |this| {\n+        self.with_parent(block.hir_id, |this| {\n             intravisit::walk_block(this, block);\n         });\n     }\n \n     fn visit_local(&mut self, l: &'hir Local) {\n         self.insert(l.span, l.hir_id, Node::Local(l));\n-        self.with_parent(l.id, l.hir_id, |this| {\n+        self.with_parent(l.hir_id, |this| {\n             intravisit::walk_local(this, l)\n         })\n     }\n@@ -505,9 +498,9 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n             VisibilityKind::Public |\n             VisibilityKind::Crate(_) |\n             VisibilityKind::Inherited => {}\n-            VisibilityKind::Restricted { id, hir_id, .. } => {\n+            VisibilityKind::Restricted { hir_id, .. } => {\n                 self.insert(visibility.span, hir_id, Node::Visibility(visibility));\n-                self.with_parent(id, hir_id, |this| {\n+                self.with_parent(hir_id, |this| {\n                     intravisit::walk_vis(this, visibility);\n                 });\n             }\n@@ -524,14 +517,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_variant(&mut self, v: &'hir Variant, g: &'hir Generics, item_id: HirId) {\n         self.insert(v.span, v.node.data.hir_id(), Node::Variant(v));\n-        self.with_parent(v.node.data.id(), v.node.data.hir_id(), |this| {\n+        self.with_parent(v.node.data.hir_id(), |this| {\n             intravisit::walk_variant(this, v, g, item_id);\n         });\n     }\n \n     fn visit_struct_field(&mut self, field: &'hir StructField) {\n         self.insert(field.span, field.hir_id, Node::Field(field));\n-        self.with_parent(field.id, field.hir_id, |this| {\n+        self.with_parent(field.hir_id, |this| {\n             intravisit::walk_struct_field(this, field);\n         });\n     }"}]}