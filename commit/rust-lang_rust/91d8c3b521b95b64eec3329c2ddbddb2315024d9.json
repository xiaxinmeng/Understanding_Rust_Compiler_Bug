{"sha": "91d8c3b521b95b64eec3329c2ddbddb2315024d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZDhjM2I1MjFiOTViNjRlZWMzMzI5YzJkZGJkZGIyMzE1MDI0ZDk=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jeremy@goop.org", "date": "2021-02-07T04:29:04Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jeremy@goop.org", "date": "2021-02-07T22:54:22Z"}, "message": "Make sure all fields are accounted for in `encode_fields!`\n\nThis will make sure the encoder will get updated if any new fields are\nadded to Diagnostic.", "tree": {"sha": "76e9a003f0954641ce8317955602e6bd818e1842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76e9a003f0954641ce8317955602e6bd818e1842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d8c3b521b95b64eec3329c2ddbddb2315024d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d8c3b521b95b64eec3329c2ddbddb2315024d9", "html_url": "https://github.com/rust-lang/rust/commit/91d8c3b521b95b64eec3329c2ddbddb2315024d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d8c3b521b95b64eec3329c2ddbddb2315024d9/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50572d66295840ba13aee0cd500c20b9513e77f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/50572d66295840ba13aee0cd500c20b9513e77f7", "html_url": "https://github.com/rust-lang/rust/commit/50572d66295840ba13aee0cd500c20b9513e77f7"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "c27b39a9d62ffbe2df1d4cb04492cc4e65d0c12e", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/91d8c3b521b95b64eec3329c2ddbddb2315024d9/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d8c3b521b95b64eec3329c2ddbddb2315024d9/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=91d8c3b521b95b64eec3329c2ddbddb2315024d9", "patch": "@@ -188,11 +188,24 @@ struct Diagnostic {\n }\n \n macro_rules! encode_fields {\n-    ($enc:expr, $s:expr, $idx:expr, [ $($name:ident),+$(,)? ]) => {\n+    (\n+        $enc:expr,                  // encoder\n+        $idx:expr,                  // starting field index\n+        $struct:expr,               // struct we're serializing\n+        $struct_name:ident,         // struct name\n+        [ $($name:ident),+$(,)? ],  // fields to encode\n+        [ $($ignore:ident),+$(,)? ] // fields we're skipping\n+    ) => {\n         {\n+            // Pattern match to make sure all fields are accounted for\n+            let $struct_name { $($name,)+ $($ignore: _,)+ } = $struct;\n             let mut idx = $idx;\n             $(\n-                $enc.emit_struct_field(stringify!($name), idx, |enc| $s.$name.encode(enc))?;\n+                $enc.emit_struct_field(\n+                    stringify!($name),\n+                    idx,\n+                    |enc| $name.encode(enc),\n+                )?;\n                 idx += 1;\n             )+\n             idx\n@@ -206,9 +219,23 @@ impl<E: Encoder> Encodable<E> for Diagnostic {\n         s.emit_struct(\"diagnostic\", 7, |s| {\n             let mut idx = 0;\n \n-            idx = encode_fields!(s, self, idx, [message, code, level, spans, children, rendered]);\n+            idx = encode_fields!(\n+                s,\n+                idx,\n+                self,\n+                Self,\n+                [message, code, level, spans, children, rendered],\n+                [tool_metadata]\n+            );\n             if self.tool_metadata.is_set() {\n-                idx = encode_fields!(s, self, idx, [tool_metadata]);\n+                idx = encode_fields!(\n+                    s,\n+                    idx,\n+                    self,\n+                    Self,\n+                    [tool_metadata],\n+                    [message, code, level, spans, children, rendered]\n+                );\n             }\n \n             let _ = idx;"}]}