{"sha": "a2037e3012ed6c59e91fadb693b35fd503cba117", "node_id": "C_kwDOAAsO6NoAKGEyMDM3ZTMwMTJlZDZjNTllOTFmYWRiNjkzYjM1ZmQ1MDNjYmExMTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-01T01:34:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-01T01:46:26Z"}, "message": "Check for substs compatibility for RPITITs", "tree": {"sha": "3ecb3e50f7804f5ad2b00146d39da88898f0b7fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ecb3e50f7804f5ad2b00146d39da88898f0b7fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2037e3012ed6c59e91fadb693b35fd503cba117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2037e3012ed6c59e91fadb693b35fd503cba117", "html_url": "https://github.com/rust-lang/rust/commit/a2037e3012ed6c59e91fadb693b35fd503cba117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2037e3012ed6c59e91fadb693b35fd503cba117/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a3a7277b44bbd2dd3485703d9a05f64652b60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a3a7277b44bbd2dd3485703d9a05f64652b60e", "html_url": "https://github.com/rust-lang/rust/commit/95a3a7277b44bbd2dd3485703d9a05f64652b60e"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "ad216e5502d824de55d92fbb84c19844f3ad82e3", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2037e3012ed6c59e91fadb693b35fd503cba117/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2037e3012ed6c59e91fadb693b35fd503cba117/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a2037e3012ed6c59e91fadb693b35fd503cba117", "patch": "@@ -2192,7 +2192,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n // Verify that the trait item and its implementation have compatible substs lists\n fn check_substs_compatible<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    assoc_ty: &ty::AssocItem,\n+    assoc_item: &ty::AssocItem,\n     substs: ty::SubstsRef<'tcx>,\n ) -> bool {\n     fn check_substs_compatible_inner<'tcx>(\n@@ -2224,7 +2224,10 @@ fn check_substs_compatible<'tcx>(\n         true\n     }\n \n-    check_substs_compatible_inner(tcx, tcx.generics_of(assoc_ty.def_id), substs.as_slice())\n+    let generics = tcx.generics_of(assoc_item.def_id);\n+    // Chop off any additional substs (RPITIT) substs\n+    let substs = &substs[0..generics.count().min(substs.len())];\n+    check_substs_compatible_inner(tcx, generics, substs)\n }\n \n fn confirm_impl_trait_in_trait_candidate<'tcx>(\n@@ -2253,12 +2256,21 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         };\n     }\n \n-    let impl_fn_def_id = leaf_def.item.def_id;\n     // Rebase from {trait}::{fn}::{opaque} to {impl}::{fn}::{opaque},\n     // since `data.substs` are the impl substs.\n     let impl_fn_substs =\n         obligation.predicate.substs.rebase_onto(tcx, tcx.parent(trait_fn_def_id), data.substs);\n \n+    if !check_substs_compatible(tcx, &leaf_def.item, impl_fn_substs) {\n+        let err = tcx.ty_error_with_message(\n+            obligation.cause.span,\n+            \"impl method and trait method have different parameters\",\n+        );\n+        return Progress { term: err.into(), obligations };\n+    }\n+\n+    let impl_fn_def_id = leaf_def.item.def_id;\n+\n     let cause = ObligationCause::new(\n         obligation.cause.span,\n         obligation.cause.body_id,"}, {"sha": "cc0fc720ebbfd99e0fb87e74b1ca053239148d57", "filename": "src/test/ui/impl-trait/in-trait/generics-mismatch.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a2037e3012ed6c59e91fadb693b35fd503cba117/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2037e3012ed6c59e91fadb693b35fd503cba117/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs?ref=a2037e3012ed6c59e91fadb693b35fd503cba117", "patch": "@@ -0,0 +1,17 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+struct U;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Sized;\n+}\n+\n+impl Foo for U {\n+    fn bar<T>(&self) {}\n+    //~^ ERROR method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+}\n+\n+fn main() {\n+    U.bar();\n+}"}, {"sha": "cd42683e0224d3f50e5881d212ac922dc3e3b140", "filename": "src/test/ui/impl-trait/in-trait/generics-mismatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2037e3012ed6c59e91fadb693b35fd503cba117/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2037e3012ed6c59e91fadb693b35fd503cba117/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.stderr?ref=a2037e3012ed6c59e91fadb693b35fd503cba117", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/generics-mismatch.rs:11:12\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |           - expected 0 type parameters\n+...\n+LL |     fn bar<T>(&self) {}\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}]}