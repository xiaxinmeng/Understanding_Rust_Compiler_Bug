{"sha": "0a4634397ccf6a67196a567144bd107ca93b1267", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDYzNDM5N2NjZjZhNjcxOTZhNTY3MTQ0YmQxMDdjYTkzYjEyNjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-27T13:37:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-27T13:37:53Z"}, "message": "Merge pull request #2403 from mikerite/fix_compile_2\n\nFix compilation", "tree": {"sha": "edca0d640b7ee67d337f7d5fc4c7898e9ac24ced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edca0d640b7ee67d337f7d5fc4c7898e9ac24ced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4634397ccf6a67196a567144bd107ca93b1267", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJabICxCRBK7hj4Ov3rIwAAdHIIAFLdqveRbkofZlHafAW+U/5R\nfQh5xAMxzjgQWosf0wS3WmQN4V8nPqbtTXqfex9/AljCzRsRyKz3lcrp4K2poVHx\nJlhHLRQMwP54Ffcxsidvg7huJyqwTpnhwI4nhtXNejK/tM+r+jKpKob5n3r4J/3/\n5XEzEQIsPCxV9zpzNJyLi6ZAm/ntIaJhleTNFr7nABw59j0QVf1LF71DX+fS+8hK\n88okZeqoWuZw5+sb3Tzbe15wFJGtJHcRMZgcVondJpK6gEBE58h2uL1AqIWGTgzB\nvPzFrSPOawxiH/xVI4gGodn85xbtaoLyFDcbkuo+WvAdxnCzrp+dslisrQezwQ8=\n=/Liw\n-----END PGP SIGNATURE-----\n", "payload": "tree edca0d640b7ee67d337f7d5fc4c7898e9ac24ced\nparent c2511207567fa5075748d7572b5828d17184a428\nparent daa39b3be1a67dfa3124551c2792a028b9a34cad\nauthor Manish Goregaokar <manishsmail@gmail.com> 1517060273 +0530\ncommitter GitHub <noreply@github.com> 1517060273 +0530\n\nMerge pull request #2403 from mikerite/fix_compile_2\n\nFix compilation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4634397ccf6a67196a567144bd107ca93b1267", "html_url": "https://github.com/rust-lang/rust/commit/0a4634397ccf6a67196a567144bd107ca93b1267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4634397ccf6a67196a567144bd107ca93b1267/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2511207567fa5075748d7572b5828d17184a428", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2511207567fa5075748d7572b5828d17184a428", "html_url": "https://github.com/rust-lang/rust/commit/c2511207567fa5075748d7572b5828d17184a428"}, {"sha": "daa39b3be1a67dfa3124551c2792a028b9a34cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa39b3be1a67dfa3124551c2792a028b9a34cad", "html_url": "https://github.com/rust-lang/rust/commit/daa39b3be1a67dfa3124551c2792a028b9a34cad"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "ca1d987dbf29b08e6fcdfcd4534ffdb50cc705d8", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4634397ccf6a67196a567144bd107ca93b1267/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4634397ccf6a67196a567144bd107ca93b1267/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=0a4634397ccf6a67196a567144bd107ca93b1267", "patch": "@@ -1808,7 +1808,7 @@ fn extract_first_expr(block: &Block) -> Option<&Expr> {\n /// passed expression. The expression may be within a block.\n fn is_simple_break_expr(expr: &Expr) -> bool {\n     match expr.node {\n-        ExprBreak(dest, ref passed_expr) if dest.ident.is_none() && passed_expr.is_none() => true,\n+        ExprBreak(dest, ref passed_expr) if dest.label.is_none() && passed_expr.is_none() => true,\n         ExprBlock(ref b) => match extract_first_expr(b) {\n             Some(subexpr) => is_simple_break_expr(subexpr),\n             None => false,"}, {"sha": "37e7c5e3bd4e4183d3aed39c0fb5e28bbac2c5c0", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a4634397ccf6a67196a567144bd107ca93b1267/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4634397ccf6a67196a567144bd107ca93b1267/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=0a4634397ccf6a67196a567144bd107ca93b1267", "patch": "@@ -69,11 +69,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n impl<'a, 'tcx: 'a> Visitor<'tcx> for UnusedLabelVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         match expr.node {\n-            hir::ExprBreak(destination, _) | hir::ExprAgain(destination) => if let Some(label) = destination.ident {\n-                self.labels.remove(&label.node.name.as_str());\n+            hir::ExprBreak(destination, _) | hir::ExprAgain(destination) => if let Some(label) = destination.label {\n+                self.labels.remove(&label.name.as_str());\n             },\n             hir::ExprLoop(_, Some(label), _) | hir::ExprWhile(_, _, Some(label)) => {\n-                self.labels.insert(label.node.as_str(), expr.span);\n+                self.labels.insert(label.name.as_str(), expr.span);\n             },\n             _ => (),\n         }"}, {"sha": "5932c41dc138c71c35baa42da41204d12a9fb9b2", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a4634397ccf6a67196a567144bd107ca93b1267/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4634397ccf6a67196a567144bd107ca93b1267/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=0a4634397ccf6a67196a567144bd107ca93b1267", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         match (&left.node, &right.node) {\n             (&ExprAddrOf(l_mut, ref le), &ExprAddrOf(r_mut, ref re)) => l_mut == r_mut && self.eq_expr(le, re),\n             (&ExprAgain(li), &ExprAgain(ri)) => {\n-                both(&li.ident, &ri.ident, |l, r| l.node.name.as_str() == r.node.name.as_str())\n+                both(&li.label, &ri.label, |l, r| l.name.as_str() == r.name.as_str())\n             },\n             (&ExprAssign(ref ll, ref lr), &ExprAssign(ref rl, ref rr)) => self.eq_expr(ll, rl) && self.eq_expr(lr, rr),\n             (&ExprAssignOp(ref lo, ref ll, ref lr), &ExprAssignOp(ref ro, ref rl, ref rr)) => {\n@@ -87,7 +87,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                     })\n             },\n             (&ExprBreak(li, ref le), &ExprBreak(ri, ref re)) => {\n-                both(&li.ident, &ri.ident, |l, r| l.node.name.as_str() == r.node.name.as_str())\n+                both(&li.label, &ri.label, |l, r| l.name.as_str() == r.name.as_str())\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprBox(ref l), &ExprBox(ref r)) => self.eq_expr(l, r),\n@@ -105,7 +105,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprLit(ref l), &ExprLit(ref r)) => l.node == r.node,\n             (&ExprLoop(ref lb, ref ll, ref lls), &ExprLoop(ref rb, ref rl, ref rls)) => {\n-                lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.node.as_str() == r.node.as_str())\n+                lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.name.as_str() == r.name.as_str())\n             },\n             (&ExprMatch(ref le, ref la, ref ls), &ExprMatch(ref re, ref ra, ref rs)) => {\n                 ls == rs && self.eq_expr(le, re) && over(la, ra, |l, r| {\n@@ -131,7 +131,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprUnary(l_op, ref le), &ExprUnary(r_op, ref re)) => l_op == r_op && self.eq_expr(le, re),\n             (&ExprArray(ref l), &ExprArray(ref r)) => self.eq_exprs(l, r),\n             (&ExprWhile(ref lc, ref lb, ref ll), &ExprWhile(ref rc, ref rb, ref rl)) => {\n-                self.eq_expr(lc, rc) && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.node.as_str() == r.node.as_str())\n+                self.eq_expr(lc, rc) && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.name.as_str() == r.name.as_str())\n             },\n             _ => false,\n         }\n@@ -327,8 +327,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n             ExprAgain(i) => {\n                 let c: fn(_) -> _ = ExprAgain;\n                 c.hash(&mut self.s);\n-                if let Some(i) = i.ident {\n-                    self.hash_name(&i.node.name);\n+                if let Some(i) = i.label {\n+                    self.hash_name(&i.name);\n                 }\n             },\n             ExprYield(ref e) => {\n@@ -364,8 +364,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n             ExprBreak(i, ref j) => {\n                 let c: fn(_, _) -> _ = ExprBreak;\n                 c.hash(&mut self.s);\n-                if let Some(i) = i.ident {\n-                    self.hash_name(&i.node.name);\n+                if let Some(i) = i.label {\n+                    self.hash_name(&i.name);\n                 }\n                 if let Some(ref j) = *j {\n                     self.hash_expr(&*j);\n@@ -429,7 +429,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 c.hash(&mut self.s);\n                 self.hash_block(b);\n                 if let Some(i) = *i {\n-                    self.hash_name(&i.node);\n+                    self.hash_name(&i.name);\n                 }\n             },\n             ExprMatch(ref e, ref arms, ref s) => {\n@@ -524,7 +524,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(cond);\n                 self.hash_block(b);\n                 if let Some(l) = l {\n-                    self.hash_name(&l.node);\n+                    self.hash_name(&l.name);\n                 }\n             },\n         }"}]}