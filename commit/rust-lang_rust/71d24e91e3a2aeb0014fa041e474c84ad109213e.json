{"sha": "71d24e91e3a2aeb0014fa041e474c84ad109213e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZDI0ZTkxZTNhMmFlYjAwMTRmYTA0MWU0NzRjODRhZDEwOTIxM2U=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-08-31T19:22:46Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-08-31T19:22:46Z"}, "message": "Merge pull request #232 from marcusklaas/boxes\n\nFix bad offset, underflow issues", "tree": {"sha": "4f06d3ab305c24a8e685a108350c1db0050b1b56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f06d3ab305c24a8e685a108350c1db0050b1b56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d24e91e3a2aeb0014fa041e474c84ad109213e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d24e91e3a2aeb0014fa041e474c84ad109213e", "html_url": "https://github.com/rust-lang/rust/commit/71d24e91e3a2aeb0014fa041e474c84ad109213e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d24e91e3a2aeb0014fa041e474c84ad109213e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf4d74832395506445aa356ed7ed5e2678658f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf4d74832395506445aa356ed7ed5e2678658f4", "html_url": "https://github.com/rust-lang/rust/commit/2bf4d74832395506445aa356ed7ed5e2678658f4"}, {"sha": "0f4bf9b3ba81fd7324907ec29400fb210c92b9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4bf9b3ba81fd7324907ec29400fb210c92b9d0", "html_url": "https://github.com/rust-lang/rust/commit/0f4bf9b3ba81fd7324907ec29400fb210c92b9d0"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "28ed927b05e202c0ab6183a8a9fdbcb82efaf1a4", "filename": "src/expr.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/71d24e91e3a2aeb0014fa041e474c84ad109213e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d24e91e3a2aeb0014fa041e474c84ad109213e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=71d24e91e3a2aeb0014fa041e474c84ad109213e", "patch": "@@ -219,7 +219,8 @@ fn rewrite_closure(capture: ast::CaptureClause,\n \n         // 1 = the separating space between arguments and the body.\n         let extra_offset = extra_offset(&prefix, offset) + 1;\n-        let rewrite = inner_expr.rewrite(context, width - extra_offset, offset + extra_offset);\n+        let budget = try_opt!(width.checked_sub(extra_offset));\n+        let rewrite = inner_expr.rewrite(context, budget, offset + extra_offset);\n \n         // Checks if rewrite succeeded and fits on a single line.\n         let accept_rewrite = rewrite.as_ref().map(|result| !result.contains('\\n')).unwrap_or(false);\n@@ -263,7 +264,8 @@ impl Rewrite for ast::Block {\n \n                 if !trimmed.is_empty() {\n                     // 9 = \"unsafe  {\".len(), 7 = \"unsafe \".len()\n-                    format!(\"unsafe {} \", rewrite_comment(trimmed, true, width - 9, offset + 7))\n+                    let budget = try_opt!(width.checked_sub(9));\n+                    format!(\"unsafe {} \", rewrite_comment(trimmed, true, budget, offset + 7))\n                 } else {\n                     \"unsafe \".to_owned()\n                 }\n@@ -357,7 +359,7 @@ impl<'a> Rewrite for Loop<'a> {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n         let label_string = rewrite_label(self.label);\n         // 2 = \" {\".len()\n-        let inner_width = width - self.keyword.len() - 2 - label_string.len();\n+        let inner_width = try_opt!(width.checked_sub(self.keyword.len() + 2 + label_string.len()));\n         let inner_offset = offset + self.keyword.len() + label_string.len();\n \n         let pat_expr_string = match self.cond {\n@@ -393,14 +395,17 @@ fn rewrite_range(context: &RewriteContext,\n                  offset: usize)\n                  -> Option<String> {\n     let left_string = match left {\n-        Some(expr) => try_opt!(expr.rewrite(context, width - 2, offset)),\n+        Some(expr) => {\n+            // 2 = ..\n+            let max_width = try_opt!(width.checked_sub(2));\n+            try_opt!(expr.rewrite(context, max_width, offset))\n+        }\n         None => String::new(),\n     };\n \n     let right_string = match right {\n         Some(expr) => {\n-            // 2 = ..\n-            let max_width = (width - 2).checked_sub(left_string.len()).unwrap_or(0);\n+            let max_width = try_opt!(width.checked_sub(left_string.len() + 2));\n             try_opt!(expr.rewrite(context, max_width, offset + 2 + left_string.len()))\n         }\n         None => String::new(),\n@@ -532,7 +537,8 @@ fn rewrite_match(context: &RewriteContext,\n     }\n \n     // `match `cond` {`\n-    let cond_str = try_opt!(cond.rewrite(context, width - 8, offset + 6));\n+    let cond_budget = try_opt!(width.checked_sub(8));\n+    let cond_str = try_opt!(cond.rewrite(context, cond_budget, offset + 6));\n     let mut result = format!(\"match {} {{\", cond_str);\n \n     let block_indent = context.block_indent;\n@@ -632,17 +638,20 @@ impl Rewrite for ast::Arm {\n         };\n \n         // Patterns\n-        let pat_strs = try_opt!(pats.iter().map(|p| p.rewrite(context,\n-                                                     // 5 = ` => {`\n-                                                     width - 5,\n-                                                     offset + context.config.tab_spaces))\n+        // 5 = ` => {`\n+        let pat_budget = try_opt!(width.checked_sub(5));\n+        let pat_strs = try_opt!(pats.iter().map(|p| {\n+                                               p.rewrite(context,\n+                                                         pat_budget,\n+                                                         offset + context.config.tab_spaces)\n+                                           })\n                                            .collect::<Option<Vec<_>>>());\n \n         let mut total_width = pat_strs.iter().fold(0, |a, p| a + p.len());\n         // Add ` | `.len().\n         total_width += (pat_strs.len() - 1) * 3;\n \n-        let mut vertical = total_width > width - 5 || pat_strs.iter().any(|p| p.contains('\\n'));\n+        let mut vertical = total_width > pat_budget || pat_strs.iter().any(|p| p.contains('\\n'));\n         if !vertical {\n             // If the patterns were previously stacked, keep them stacked.\n             // FIXME should be an option.\n@@ -710,9 +719,8 @@ impl Rewrite for ast::Arm {\n             return None;\n         }\n \n-        let body_str = try_opt!(body.rewrite(context,\n-                                             width - context.config.tab_spaces,\n-                                             nested_indent));\n+        let body_budget = try_opt!(width.checked_sub(context.config.tab_spaces));\n+        let body_str = try_opt!(body.rewrite(context, body_budget, nested_indent));\n         Some(format!(\"{}{} =>\\n{}{},\",\n                      attr_str.trim_left(),\n                      pats_str,\n@@ -775,9 +783,8 @@ fn rewrite_pat_expr(context: &RewriteContext,\n     let pat_offset = offset + matcher.len();\n     let mut result = match pat {\n         Some(pat) => {\n-            let pat_string = try_opt!(pat.rewrite(context,\n-                                                  width - connector.len() - matcher.len(),\n-                                                  pat_offset));\n+            let pat_budget = try_opt!(width.checked_sub(connector.len() + matcher.len()));\n+            let pat_string = try_opt!(pat.rewrite(context, pat_budget, pat_offset));\n             format!(\"{}{}{}\", matcher, pat_string, connector)\n         }\n         None => String::new(),\n@@ -930,7 +937,8 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     }\n \n     // 2 = \" {\".len()\n-    let path_str = try_opt!(path.rewrite(context, width - 2, offset));\n+    let path_budget = try_opt!(width.checked_sub(2));\n+    let path_str = try_opt!(path.rewrite(context, path_budget, offset));\n \n     // Foo { a: Foo } - indent is +3, width is -5.\n     let h_budget = try_opt!(width.checked_sub(path_str.len() + 5));\n@@ -1041,7 +1049,8 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n     // In case of length 1, need a trailing comma\n     if items.len() == 1 {\n         // 3 = \"(\" + \",)\"\n-        return items[0].rewrite(context, width - 3, indent).map(|s| format!(\"({},)\", s));\n+        let budget = try_opt!(width.checked_sub(3));\n+        return items[0].rewrite(context, budget, indent).map(|s| format!(\"({},)\", s));\n     }\n \n     let items = itemize_list(context.codemap,\n@@ -1057,7 +1066,8 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n                              span.lo + BytePos(1), // Remove parens\n                              span.hi - BytePos(1));\n \n-    let fmt = ListFormatting::for_fn(width - 2, indent);\n+    let budget = try_opt!(width.checked_sub(2));\n+    let fmt = ListFormatting::for_fn(budget, indent);\n \n     Some(format!(\"({})\", write_list(&items.collect::<Vec<_>>(), &fmt)))\n }\n@@ -1134,11 +1144,10 @@ fn rewrite_unary_op(context: &RewriteContext,\n         ast::UnOp::UnNot => \"!\",\n         ast::UnOp::UnNeg => \"-\",\n     };\n+    let operator_len = operator_str.len();\n \n-    let subexpr =\n-        try_opt!(expr.rewrite(context, try_opt!(width.checked_sub(operator_str.len())), offset));\n-\n-    Some(format!(\"{}{}\", operator_str, subexpr))\n+    expr.rewrite(context, try_opt!(width.checked_sub(operator_len)), offset + operator_len)\n+        .map(|r| format!(\"{}{}\", operator_str, r))\n }\n \n fn rewrite_assignment(context: &RewriteContext,"}, {"sha": "d5e98f959d129e4ccd689ed7d5b5cda97eafb35e", "filename": "tests/source/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71d24e91e3a2aeb0014fa041e474c84ad109213e/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d24e91e3a2aeb0014fa041e474c84ad109213e/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=71d24e91e3a2aeb0014fa041e474c84ad109213e", "patch": "@@ -105,3 +105,9 @@ fn qux() {\n         // A block with a comment.\n     }\n }\n+\n+fn issue227() {\n+    {\n+        let handler = box DocumentProgressHandler::new(addr, DocumentProgressTask::DOMContentLoaded);\n+    }\n+}"}, {"sha": "afc152ac828a81303d04ddb287645680437e8ceb", "filename": "tests/target/expr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71d24e91e3a2aeb0014fa041e474c84ad109213e/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d24e91e3a2aeb0014fa041e474c84ad109213e/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=71d24e91e3a2aeb0014fa041e474c84ad109213e", "patch": "@@ -139,3 +139,10 @@ fn qux() {\n         // A block with a comment.\n     }\n }\n+\n+fn issue227() {\n+    {\n+        let handler = box DocumentProgressHandler::new(addr,\n+                                                       DocumentProgressTask::DOMContentLoaded);\n+    }\n+}"}]}