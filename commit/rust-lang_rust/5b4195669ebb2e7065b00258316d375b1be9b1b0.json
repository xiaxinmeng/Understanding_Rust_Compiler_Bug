{"sha": "5b4195669ebb2e7065b00258316d375b1be9b1b0", "node_id": "C_kwDOAAsO6NoAKDViNDE5NTY2OWViYjJlNzA2NWIwMDI1ODMxNmQzNzViMWJlOWIxYjA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T16:11:12Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-23T16:32:38Z"}, "message": "Add some self profiler calls", "tree": {"sha": "a2eff785eb14330097c8af75aa7ba66384cc1be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2eff785eb14330097c8af75aa7ba66384cc1be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4195669ebb2e7065b00258316d375b1be9b1b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4195669ebb2e7065b00258316d375b1be9b1b0", "html_url": "https://github.com/rust-lang/rust/commit/5b4195669ebb2e7065b00258316d375b1be9b1b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4195669ebb2e7065b00258316d375b1be9b1b0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d081c20273cfafab0c896f66485495fa906a1f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/d081c20273cfafab0c896f66485495fa906a1f84", "html_url": "https://github.com/rust-lang/rust/commit/d081c20273cfafab0c896f66485495fa906a1f84"}], "stats": {"total": 95, "additions": 55, "deletions": 40}, "files": [{"sha": "67ac52f2d030c1a4dc75b9eefe6923afcb78a657", "filename": "src/driver/aot.rs", "status": "modified", "additions": 55, "deletions": 40, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5b4195669ebb2e7065b00258316d375b1be9b1b0/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4195669ebb2e7065b00258316d375b1be9b1b0/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=5b4195669ebb2e7065b00258316d375b1be9b1b0", "patch": "@@ -258,53 +258,68 @@ fn module_codegen(\n         ConcurrencyLimiterToken,\n     ),\n ) -> OngoingModuleCodegen {\n-    let cgu = tcx.codegen_unit(cgu_name);\n-    let mono_items = cgu.items_in_deterministic_order(tcx);\n-\n-    let mut module = make_module(tcx.sess, &backend_config, cgu_name.as_str().to_string());\n-\n-    let mut cx = crate::CodegenCx::new(\n-        tcx,\n-        backend_config.clone(),\n-        module.isa(),\n-        tcx.sess.opts.debuginfo != DebugInfo::None,\n-        cgu_name,\n-    );\n-    super::predefine_mono_items(tcx, &mut module, &mono_items);\n-    let mut codegened_functions = vec![];\n-    for (mono_item, _) in mono_items {\n-        match mono_item {\n-            MonoItem::Fn(inst) => {\n-                tcx.sess.time(\"codegen fn\", || {\n-                    let codegened_function =\n-                        crate::base::codegen_fn(tcx, &mut cx, Function::new(), &mut module, inst);\n-                    codegened_functions.push(codegened_function);\n-                });\n-            }\n-            MonoItem::Static(def_id) => crate::constant::codegen_static(tcx, &mut module, def_id),\n-            MonoItem::GlobalAsm(item_id) => {\n-                crate::global_asm::codegen_global_asm_item(tcx, &mut cx.global_asm, item_id);\n+    let (cgu_name, mut cx, mut module, codegened_functions) = tcx.sess.time(\"codegen cgu\", || {\n+        let cgu = tcx.codegen_unit(cgu_name);\n+        let mono_items = cgu.items_in_deterministic_order(tcx);\n+\n+        let mut module = make_module(tcx.sess, &backend_config, cgu_name.as_str().to_string());\n+\n+        let mut cx = crate::CodegenCx::new(\n+            tcx,\n+            backend_config.clone(),\n+            module.isa(),\n+            tcx.sess.opts.debuginfo != DebugInfo::None,\n+            cgu_name,\n+        );\n+        super::predefine_mono_items(tcx, &mut module, &mono_items);\n+        let mut codegened_functions = vec![];\n+        for (mono_item, _) in mono_items {\n+            match mono_item {\n+                MonoItem::Fn(inst) => {\n+                    tcx.sess.time(\"codegen fn\", || {\n+                        let codegened_function = crate::base::codegen_fn(\n+                            tcx,\n+                            &mut cx,\n+                            Function::new(),\n+                            &mut module,\n+                            inst,\n+                        );\n+                        codegened_functions.push(codegened_function);\n+                    });\n+                }\n+                MonoItem::Static(def_id) => {\n+                    crate::constant::codegen_static(tcx, &mut module, def_id)\n+                }\n+                MonoItem::GlobalAsm(item_id) => {\n+                    crate::global_asm::codegen_global_asm_item(tcx, &mut cx.global_asm, item_id);\n+                }\n             }\n         }\n-    }\n-    crate::main_shim::maybe_create_entry_wrapper(\n-        tcx,\n-        &mut module,\n-        &mut cx.unwind_context,\n-        false,\n-        cgu.is_primary(),\n-    );\n+        crate::main_shim::maybe_create_entry_wrapper(\n+            tcx,\n+            &mut module,\n+            &mut cx.unwind_context,\n+            false,\n+            cgu.is_primary(),\n+        );\n \n-    let cgu_name = cgu.name().as_str().to_owned();\n+        let cgu_name = cgu.name().as_str().to_owned();\n+\n+        (cgu_name, cx, module, codegened_functions)\n+    });\n \n     OngoingModuleCodegen::Async(std::thread::spawn(move || {\n-        let mut cached_context = Context::new();\n-        for codegened_func in codegened_functions {\n-            crate::base::compile_fn(&mut cx, &mut cached_context, &mut module, codegened_func);\n-        }\n+        cx.profiler.clone().verbose_generic_activity(\"compile functions\").run(|| {\n+            let mut cached_context = Context::new();\n+            for codegened_func in codegened_functions {\n+                crate::base::compile_fn(&mut cx, &mut cached_context, &mut module, codegened_func);\n+            }\n+        });\n \n         let global_asm_object_file =\n-            crate::global_asm::compile_global_asm(&global_asm_config, &cgu_name, &cx.global_asm)?;\n+            cx.profiler.verbose_generic_activity(\"compile assembly\").run(|| {\n+                crate::global_asm::compile_global_asm(&global_asm_config, &cgu_name, &cx.global_asm)\n+            })?;\n \n         let codegen_result = cx.profiler.verbose_generic_activity(\"write object file\").run(|| {\n             emit_cgu("}]}