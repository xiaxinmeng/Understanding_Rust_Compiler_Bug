{"sha": "1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMjRmNTdlZjg0MjBlOTI0ZTkwNGVjNDgxZTdjNjQ3MWYzZGRjYzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-20T15:09:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T15:09:51Z"}, "message": "Merge #6295\n\n6295: More type safety around names r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c7f1ebcc5979838d1747cf19dd562004916a7274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f1ebcc5979838d1747cf19dd562004916a7274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjv2/CRBK7hj4Ov3rIwAAdHIIAHHDWuu7uZEKXHqA2OnjDjrW\n4sIops3hRPdMklCA9bF2T1ErdbKPqZBfTquSOnWBUN2/JLiOEy+J8tMOKtAv2oxz\nAJQ22lL7frprD6S3oAfqF2LWD9fTETTphuHrszDIiVNU/YHK33UmY1EBj1y2cM99\nCoK3naq/VSpDdkAwfI/DGHhWoP9hN51w8Ws6QwxgS0wuEuzHFAtTLYwaPbbfTDQ8\ngKxNJ4jWoxmr6XlIHtj7eu57rnBqB4l7y+WOnlrtSPiQBhCNfzBewPnIz9ESnxPc\nW0qnjIsSciayD09tXzjCcLX/UksDRt5KdsoD2ELbhFCHdlzuOYt1pldk9GRDnlE=\n=uA1W\n-----END PGP SIGNATURE-----\n", "payload": "tree c7f1ebcc5979838d1747cf19dd562004916a7274\nparent be762ccccd5a86632e60351518528d078785a3e2\nparent 3b1a648539487c08bc613b6fd6e573b0e0e38948\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603206591 +0000\ncommitter GitHub <noreply@github.com> 1603206591 +0000\n\nMerge #6295\n\n6295: More type safety around names r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "html_url": "https://github.com/rust-lang/rust/commit/1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be762ccccd5a86632e60351518528d078785a3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/be762ccccd5a86632e60351518528d078785a3e2", "html_url": "https://github.com/rust-lang/rust/commit/be762ccccd5a86632e60351518528d078785a3e2"}, {"sha": "3b1a648539487c08bc613b6fd6e573b0e0e38948", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1a648539487c08bc613b6fd6e573b0e0e38948", "html_url": "https://github.com/rust-lang/rust/commit/3b1a648539487c08bc613b6fd6e573b0e0e38948"}], "stats": {"total": 123, "additions": 76, "deletions": 47}, "files": [{"sha": "4e89a7aedb2bc15b4ee094de4f6b58d75c26abab", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -406,7 +406,7 @@ pub use prelude::*;\n         let std_crate = path.next()?;\n         let std_crate = if self\n             .1\n-            .declaration_name(db)\n+            .display_name(db)\n             .map(|name| name.to_string() == std_crate)\n             .unwrap_or(false)\n         {"}, {"sha": "66e6443cb1a02133d00a9e2db5f92fb8b98602b0", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -158,7 +158,7 @@ impl ChangeFixture {\n                 let crate_id = crate_graph.add_crate_root(\n                     file_id,\n                     meta.edition,\n-                    Some(crate_name.clone()),\n+                    Some(crate_name.clone().into()),\n                     meta.cfg,\n                     meta.env,\n                     Default::default(),\n@@ -187,7 +187,7 @@ impl ChangeFixture {\n             crate_graph.add_crate_root(\n                 crate_root,\n                 Edition::Edition2018,\n-                Some(CrateName::new(\"test\").unwrap()),\n+                Some(CrateName::new(\"test\").unwrap().into()),\n                 default_cfg,\n                 Env::default(),\n                 Default::default(),"}, {"sha": "87f0a0ce5a43be376e10f88eb2a0f98384beb706", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -102,11 +102,46 @@ impl fmt::Display for CrateName {\n \n impl ops::Deref for CrateName {\n     type Target = str;\n-    fn deref(&self) -> &Self::Target {\n+    fn deref(&self) -> &str {\n         &*self.0\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct CrateDisplayName {\n+    // The name we use to display various paths (with `_`).\n+    crate_name: CrateName,\n+    // The name as specified in Cargo.toml (with `-`).\n+    canonical_name: String,\n+}\n+\n+impl From<CrateName> for CrateDisplayName {\n+    fn from(crate_name: CrateName) -> CrateDisplayName {\n+        let canonical_name = crate_name.to_string();\n+        CrateDisplayName { crate_name, canonical_name }\n+    }\n+}\n+\n+impl fmt::Display for CrateDisplayName {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.crate_name)\n+    }\n+}\n+\n+impl ops::Deref for CrateDisplayName {\n+    type Target = str;\n+    fn deref(&self) -> &str {\n+        &*self.crate_name\n+    }\n+}\n+\n+impl CrateDisplayName {\n+    pub fn from_canonical_name(canonical_name: String) -> CrateDisplayName {\n+        let crate_name = CrateName::normalize_dashes(&canonical_name);\n+        CrateDisplayName { crate_name, canonical_name }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct ProcMacroId(pub u32);\n \n@@ -127,11 +162,13 @@ impl PartialEq for ProcMacro {\n pub struct CrateData {\n     pub root_file_id: FileId,\n     pub edition: Edition,\n-    /// A name used in the package's project declaration: for Cargo projects, it's [package].name,\n-    /// can be different for other project types or even absent (a dummy crate for the code snippet, for example).\n-    /// NOTE: The crate can be referenced as a dependency under a different name,\n-    /// this one should be used when working with crate hierarchies.\n-    pub declaration_name: Option<CrateName>,\n+    /// A name used in the package's project declaration: for Cargo projects,\n+    /// it's [package].name, can be different for other project types or even\n+    /// absent (a dummy crate for the code snippet, for example).\n+    ///\n+    /// For purposes of analysis, crates are anonymous (only names in\n+    /// `Dependency` matters), this name should only be used for UI.\n+    pub display_name: Option<CrateDisplayName>,\n     pub cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n@@ -160,7 +197,7 @@ impl CrateGraph {\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n-        declaration_name: Option<CrateName>,\n+        display_name: Option<CrateDisplayName>,\n         cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<(SmolStr, Arc<dyn tt::TokenExpander>)>,\n@@ -171,7 +208,7 @@ impl CrateGraph {\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n-            declaration_name,\n+            display_name,\n             cfg_options,\n             env,\n             proc_macro,\n@@ -310,8 +347,8 @@ impl CrateGraph {\n         }\n     }\n \n-    fn hacky_find_crate(&self, declaration_name: &str) -> Option<CrateId> {\n-        self.iter().find(|it| self[*it].declaration_name.as_deref() == Some(declaration_name))\n+    fn hacky_find_crate(&self, display_name: &str) -> Option<CrateId> {\n+        self.iter().find(|it| self[*it].display_name.as_deref() == Some(display_name))\n     }\n }\n "}, {"sha": "0804202d644214ce3462e46f5d8788ea7f316494", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -13,8 +13,8 @@ pub use crate::{\n     cancellation::Canceled,\n     change::Change,\n     input::{\n-        CrateData, CrateGraph, CrateId, CrateName, Dependency, Edition, Env, FileId, ProcMacroId,\n-        SourceRoot, SourceRootId,\n+        CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env,\n+        FileId, ProcMacroId, SourceRoot, SourceRootId,\n     },\n };\n pub use salsa;"}, {"sha": "7f169ccd2f0ce94bc54e6d3dea14ad7560cdf16f", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -2,7 +2,7 @@\n use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n-use base_db::{CrateId, CrateName, Edition, FileId};\n+use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n use either::Either;\n use hir_def::find_path::PrefixKind;\n use hir_def::{\n@@ -103,8 +103,8 @@ impl Crate {\n         db.crate_graph()[self.id].edition\n     }\n \n-    pub fn declaration_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n-        db.crate_graph()[self.id].declaration_name.clone()\n+    pub fn display_name(self, db: &dyn HirDatabase) -> Option<CrateDisplayName> {\n+        db.crate_graph()[self.id].display_name.clone()\n     }\n \n     pub fn query_external_importables("}, {"sha": "1e24f29a81f4a400b36e69f9343ab7edd1761776", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -356,7 +356,7 @@ mod tests {\n         let krate = crate_graph\n             .iter()\n             .find(|krate| {\n-                crate_graph[*krate].declaration_name.as_ref().map(|n| n.to_string())\n+                crate_graph[*krate].display_name.as_ref().map(|n| n.to_string())\n                     == Some(crate_name.to_string())\n             })\n             .unwrap();\n@@ -375,7 +375,7 @@ mod tests {\n                     let path = map.path_of(item).unwrap();\n                     format!(\n                         \"{}::{} ({})\\n\",\n-                        crate_graph[krate].declaration_name.as_ref().unwrap(),\n+                        crate_graph[krate].display_name.as_ref().unwrap(),\n                         path,\n                         mark\n                     )\n@@ -416,7 +416,7 @@ mod tests {\n             .iter()\n             .filter_map(|krate| {\n                 let cdata = &crate_graph[krate];\n-                let name = cdata.declaration_name.as_ref()?;\n+                let name = cdata.display_name.as_ref()?;\n \n                 let map = db.import_map(krate);\n "}, {"sha": "3d04f81c64383d5cccee9a71269c701e14df042a", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -172,11 +172,7 @@ pub struct ModuleData {\n impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n         let _p = profile::span(\"crate_def_map_query\").detail(|| {\n-            db.crate_graph()[krate]\n-                .declaration_name\n-                .as_ref()\n-                .map(ToString::to_string)\n-                .unwrap_or_default()\n+            db.crate_graph()[krate].display_name.as_deref().unwrap_or_default().to_string()\n         });\n         let def_map = {\n             let edition = db.crate_graph()[krate].edition;"}, {"sha": "b9d8b8a2b5b9f189e98cc8b07bd4b15aebeb5096", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -130,7 +130,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n     let module = definition.module(db)?;\n     let krate = module.krate();\n     let import_map = db.import_map(krate.into());\n-    let base = once(krate.declaration_name(db)?.to_string())\n+    let base = once(krate.display_name(db)?.to_string())\n         .chain(import_map.path_of(ns)?.segments.iter().map(|name| name.to_string()))\n         .join(\"/\");\n \n@@ -188,7 +188,7 @@ fn rewrite_intra_doc_link(\n     let krate = resolved.module(db)?.krate();\n     let canonical_path = resolved.canonical_path(db)?;\n     let new_target = get_doc_url(db, &krate)?\n-        .join(&format!(\"{}/\", krate.declaration_name(db)?))\n+        .join(&format!(\"{}/\", krate.display_name(db)?))\n         .ok()?\n         .join(&canonical_path.replace(\"::\", \"/\"))\n         .ok()?\n@@ -208,7 +208,7 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n     let module = def.module(db)?;\n     let krate = module.krate();\n     let canonical_path = def.canonical_path(db)?;\n-    let base = format!(\"{}/{}\", krate.declaration_name(db)?, canonical_path.replace(\"::\", \"/\"));\n+    let base = format!(\"{}/{}\", krate.display_name(db)?, canonical_path.replace(\"::\", \"/\"));\n \n     get_doc_url(db, &krate)\n         .and_then(|url| url.join(&base).ok())\n@@ -357,7 +357,7 @@ fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n             //\n             // FIXME: clicking on the link should just open the file in the editor,\n             // instead of falling back to external urls.\n-            Some(format!(\"https://docs.rs/{}/*/\", krate.declaration_name(db)?))\n+            Some(format!(\"https://docs.rs/{}/*/\", krate.display_name(db)?))\n         })\n         .and_then(|s| Url::parse(&s).ok())\n }"}, {"sha": "6466422c5ee61985236abcc9c401778747b63a47", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -300,7 +300,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n \n fn render_path(db: &RootDatabase, module: Module, item_name: Option<String>) -> String {\n     let crate_name =\n-        db.crate_graph()[module.krate().into()].declaration_name.as_ref().map(ToString::to_string);\n+        db.crate_graph()[module.krate().into()].display_name.as_ref().map(|it| it.to_string());\n     let module_path = module\n         .path_to_root(db)\n         .into_iter()"}, {"sha": "56b985e80f00d25f363f6fee160588deebe7560a", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -1,15 +1,14 @@\n use assists::utils::FamousDefs;\n+use either::Either;\n use hir::{known, HirDisplay, Semantics};\n use ide_db::RootDatabase;\n use stdx::to_lower_snake_case;\n use syntax::{\n-    ast::{self, ArgListOwner, AstNode},\n+    ast::{self, ArgListOwner, AstNode, NameOwner},\n     match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange, T,\n };\n \n use crate::FileId;\n-use ast::NameOwner;\n-use either::Either;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n@@ -215,7 +214,7 @@ fn hint_iterator(\n         .last()\n         .and_then(|strukt| strukt.as_adt())?;\n     let krate = strukt.krate(db)?;\n-    if krate.declaration_name(db).as_deref() != Some(\"core\") {\n+    if krate.display_name(db).as_deref() != Some(\"core\") {\n         return None;\n     }\n     let iter_trait = FamousDefs(sema, krate).core_iter_Iterator()?;"}, {"sha": "6944dbcd2a761b2e9bf3df7a1ba0b624773d0647", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -32,8 +32,7 @@ pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress)\n     // Unfortunately rayon prevents panics from propagation out of a `scope`, which breaks\n     // cancellation, so we cannot use rayon.\n     for (i, krate) in topo.iter().enumerate() {\n-        let crate_name =\n-            graph[*krate].declaration_name.as_ref().map(ToString::to_string).unwrap_or_default();\n+        let crate_name = graph[*krate].display_name.as_deref().unwrap_or_default().to_string();\n \n         cb(PrimeCachesProgress::StartedOnCrate {\n             on_crate: crate_name,"}, {"sha": "0af84daa0a7daf5011ebe5ce6c97a5dc82a0dfbf", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n         match krate {\n             Some(krate) => {\n                 let crate_graph = db.crate_graph();\n-                let display_crate = |krate: CrateId| match &crate_graph[krate].declaration_name {\n+                let display_crate = |krate: CrateId| match &crate_graph[krate].display_name {\n                     Some(it) => format!(\"{}({:?})\", it, krate),\n                     None => format!(\"{:?}\", krate),\n                 };"}, {"sha": "5db41bc16053c1d0c2dd3e3807e4b44328b2a0db", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -13,7 +13,7 @@ use std::{\n };\n \n use anyhow::{bail, Context, Result};\n-use base_db::{CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n+use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n use cfg::CfgOptions;\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -408,10 +408,12 @@ impl ProjectWorkspace {\n                                 .map(|it| proc_macro_client.by_dylib_path(&it))\n                                 .unwrap_or_default();\n \n+                            let display_name =\n+                                CrateDisplayName::from_canonical_name(cargo[pkg].name.clone());\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n-                                Some(CrateName::normalize_dashes(&cargo[pkg].name)),\n+                                Some(display_name),\n                                 cfg_options,\n                                 env,\n                                 proc_macro.clone(),\n@@ -556,7 +558,7 @@ fn sysroot_to_crate_graph(\n             let crate_id = crate_graph.add_crate_root(\n                 file_id,\n                 Edition::Edition2018,\n-                Some(name),\n+                Some(name.into()),\n                 cfg_options.clone(),\n                 env,\n                 proc_macro,"}, {"sha": "a89993a2b2f0973734f97134f0a0c5156c37b2a6", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c24f57ef8420e924e904ec481e7c6471f3ddcc8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=1c24f57ef8420e924e904ec481e7c6471f3ddcc8", "patch": "@@ -36,12 +36,8 @@ pub fn diagnostics(path: &Path, load_output_dirs: bool, with_proc_macro: bool) -\n     for module in work {\n         let file_id = module.definition_source(db).file_id.original_file(db);\n         if !visited_files.contains(&file_id) {\n-            let crate_name = module\n-                .krate()\n-                .declaration_name(db)\n-                .as_ref()\n-                .map(ToString::to_string)\n-                .unwrap_or_else(|| \"unknown\".to_string());\n+            let crate_name =\n+                module.krate().display_name(db).as_deref().unwrap_or(\"unknown\").to_string();\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n             for diagnostic in analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n             {"}]}