{"sha": "ea447924cef96746d27c396d395cc5cfea738928", "node_id": "C_kwDOAAsO6NoAKGVhNDQ3OTI0Y2VmOTY3NDZkMjdjMzk2ZDM5NWNjNWNmZWE3Mzg5Mjg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-22T18:52:07Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-27T07:19:30Z"}, "message": "micro doc fixes", "tree": {"sha": "1d243a22ad5cf7378a077b81c40b00466ccca23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d243a22ad5cf7378a077b81c40b00466ccca23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea447924cef96746d27c396d395cc5cfea738928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea447924cef96746d27c396d395cc5cfea738928", "html_url": "https://github.com/rust-lang/rust/commit/ea447924cef96746d27c396d395cc5cfea738928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea447924cef96746d27c396d395cc5cfea738928/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa89f533524ba41589b211845f19a75811330efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa89f533524ba41589b211845f19a75811330efc", "html_url": "https://github.com/rust-lang/rust/commit/fa89f533524ba41589b211845f19a75811330efc"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "286946d1d1f27c89e8202b4d5a991d39449276a4", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea447924cef96746d27c396d395cc5cfea738928/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea447924cef96746d27c396d395cc5cfea738928/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=ea447924cef96746d27c396d395cc5cfea738928", "patch": "@@ -100,19 +100,9 @@ impl<'tcx> ClosureKind {\n         self <= other\n     }\n \n-    /// Returns the representative scalar type for this closure kind.\n-    /// See `Ty::to_opt_closure_kind` for more details.\n-    pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        match self {\n-            ClosureKind::Fn => tcx.types.i8,\n-            ClosureKind::FnMut => tcx.types.i16,\n-            ClosureKind::FnOnce => tcx.types.i32,\n-        }\n-    }\n-\n     /// Converts `self` to a [`DefId`] of the corresponding trait.\n     ///\n-    /// Note: the inverse of this function is [`TyCtxt::fn_trait_kind_from_def_id`]\n+    /// Note: the inverse of this function is [`TyCtxt::fn_trait_kind_from_def_id`].\n     pub fn to_def_id(&self, tcx: TyCtxt<'_>) -> DefId {\n         tcx.require_lang_item(\n             match self {\n@@ -123,6 +113,16 @@ impl<'tcx> ClosureKind {\n             None,\n         )\n     }\n+\n+    /// Returns the representative scalar type for this closure kind.\n+    /// See `Ty::to_opt_closure_kind` for more details.\n+    pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+        match self {\n+            ClosureKind::Fn => tcx.types.i8,\n+            ClosureKind::FnMut => tcx.types.i16,\n+            ClosureKind::FnOnce => tcx.types.i32,\n+        }\n+    }\n }\n \n /// A composite describing a `Place` that is captured by a closure."}, {"sha": "4fc97c0baaf53a1ee2ca2e47d03dcea76de58dd5", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea447924cef96746d27c396d395cc5cfea738928/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea447924cef96746d27c396d395cc5cfea738928/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ea447924cef96746d27c396d395cc5cfea738928", "patch": "@@ -2114,8 +2114,7 @@ impl<'tcx> Ty<'tcx> {\n     /// parameter. This is kind of a phantom type, except that the\n     /// most convenient thing for us to are the integral types. This\n     /// function converts such a special type into the closure\n-    /// kind. To go the other way, use\n-    /// `tcx.closure_kind_ty(closure_kind)`.\n+    /// kind. To go the other way, use `closure_kind.to_ty(tcx)`.\n     ///\n     /// Note that during type checking, we use an inference variable\n     /// to represent the closure kind, because it has not yet been"}]}