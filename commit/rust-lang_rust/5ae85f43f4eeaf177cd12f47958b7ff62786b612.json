{"sha": "5ae85f43f4eeaf177cd12f47958b7ff62786b612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZTg1ZjQzZjRlZWFmMTc3Y2QxMmY0Nzk1OGI3ZmY2Mjc4NmI2MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-22T11:57:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-22T11:57:58Z"}, "message": "Auto merge of #68820 - WaffleLapkin:remove_finished_from_map_while, r=LukasKalbertodt\n\nRemove `finished` flag from `MapWhile`\n\nThis PR removes  `finished` flag from `MapWhile` as been proposed in https://github.com/rust-lang/rust/pull/66577#discussion_r370958025.\n\nThis also resolves open questions of the tracking issue (#68537):\n- `MapWhile` can't implement both\n  + `DoubleEndedIterator` (discussed in https://github.com/rust-lang/rust/pull/66577#discussion_r370947990 and following comments)\n  + `FusedIterator` (this pr removes `finished` flag, so `MapWhile` isn't fused anymore)\n- Debug output (this pr removes `finished` flag, so there is no question in including it in debug output)\n\nr? @Mark-Simulacrum", "tree": {"sha": "6e91c9881063d776b52e05bada95e8acb4139db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e91c9881063d776b52e05bada95e8acb4139db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ae85f43f4eeaf177cd12f47958b7ff62786b612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae85f43f4eeaf177cd12f47958b7ff62786b612", "html_url": "https://github.com/rust-lang/rust/commit/5ae85f43f4eeaf177cd12f47958b7ff62786b612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ae85f43f4eeaf177cd12f47958b7ff62786b612/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d43d656665e59abc10c7c22a3194685e7cc605", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d43d656665e59abc10c7c22a3194685e7cc605", "html_url": "https://github.com/rust-lang/rust/commit/94d43d656665e59abc10c7c22a3194685e7cc605"}, {"sha": "e964d7180ca4164dfa3d6c6dee6026889c604812", "url": "https://api.github.com/repos/rust-lang/rust/commits/e964d7180ca4164dfa3d6c6dee6026889c604812", "html_url": "https://github.com/rust-lang/rust/commit/e964d7180ca4164dfa3d6c6dee6026889c604812"}], "stats": {"total": 89, "additions": 32, "deletions": 57}, "files": [{"sha": "6759a6b2d73495dcffa30084057b9c8fb973da21", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 21, "deletions": 47, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=5ae85f43f4eeaf177cd12f47958b7ff62786b612", "patch": "@@ -1768,6 +1768,14 @@ where\n     }\n }\n \n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+impl<I, P> FusedIterator for TakeWhile<I, P>\n+where\n+    I: FusedIterator,\n+    P: FnMut(&I::Item) -> bool,\n+{\n+}\n+\n /// An iterator that only accepts elements while `predicate` returns `Some(_)`.\n ///\n /// This `struct` is created by the [`map_while`] method on [`Iterator`]. See its\n@@ -1780,20 +1788,19 @@ where\n #[derive(Clone)]\n pub struct MapWhile<I, P> {\n     iter: I,\n-    finished: bool,\n     predicate: P,\n }\n \n impl<I, P> MapWhile<I, P> {\n     pub(super) fn new(iter: I, predicate: P) -> MapWhile<I, P> {\n-        MapWhile { iter, finished: false, predicate }\n+        MapWhile { iter, predicate }\n     }\n }\n \n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n impl<I: fmt::Debug, P> fmt::Debug for MapWhile<I, P> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"MapWhile\").field(\"iter\", &self.iter).field(\"flag\", &self.finished).finish()\n+        f.debug_struct(\"MapWhile\").field(\"iter\", &self.iter).finish()\n     }\n }\n \n@@ -1806,65 +1813,32 @@ where\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        if self.finished {\n-            None\n-        } else {\n-            let x = self.iter.next()?;\n-            let ret = (self.predicate)(x);\n-            self.finished = ret.is_none();\n-            ret\n-        }\n+        let x = self.iter.next()?;\n+        (self.predicate)(x)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        if self.finished {\n-            (0, Some(0))\n-        } else {\n-            let (_, upper) = self.iter.size_hint();\n-            (0, upper) // can't know a lower bound, due to the predicate\n-        }\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper) // can't know a lower bound, due to the predicate\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        fn check<'a, B, T, Acc, R: Try<Ok = Acc>>(\n-            flag: &'a mut bool,\n-            p: &'a mut impl FnMut(T) -> Option<B>,\n-            mut fold: impl FnMut(Acc, B) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> LoopState<Acc, R> + 'a {\n-            move |acc, x| match p(x) {\n-                Some(item) => LoopState::from_try(fold(acc, item)),\n-                None => {\n-                    *flag = true;\n-                    LoopState::Break(Try::from_ok(acc))\n-                }\n-            }\n-        }\n-\n-        if self.finished {\n-            Try::from_ok(init)\n-        } else {\n-            let flag = &mut self.finished;\n-            let p = &mut self.predicate;\n-            self.iter.try_fold(init, check(flag, p, fold)).into_try()\n-        }\n+        let Self { iter, predicate } = self;\n+        iter.try_fold(init, |acc, x| match predicate(x) {\n+            Some(item) => LoopState::from_try(fold(acc, item)),\n+            None => LoopState::Break(Try::from_ok(acc)),\n+        })\n+        .into_try()\n     }\n }\n \n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I, P> FusedIterator for TakeWhile<I, P>\n-where\n-    I: FusedIterator,\n-    P: FnMut(&I::Item) -> bool,\n-{\n-}\n-\n /// An iterator that skips over `n` elements of `iter`.\n ///\n /// This `struct` is created by the [`skip`] method on [`Iterator`]. See its"}, {"sha": "39bd270da868044913c0123b1611c9b056bd41d0", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae85f43f4eeaf177cd12f47958b7ff62786b612/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=5ae85f43f4eeaf177cd12f47958b7ff62786b612", "patch": "@@ -1037,9 +1037,6 @@ pub trait Iterator {\n     /// closure on each element of the iterator, and yield elements\n     /// while it returns [`Some(_)`][`Some`].\n     ///\n-    /// After [`None`] is returned, `map_while()`'s job is over, and the\n-    /// rest of the elements are ignored.\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1079,15 +1076,14 @@ pub trait Iterator {\n     /// #![feature(iter_map_while)]\n     /// use std::convert::TryFrom;\n     ///\n-    /// let a = [0, -1, 1, -2];\n-    ///\n-    /// let mut iter = a.iter().map_while(|x| u32::try_from(*x).ok());\n+    /// let a = [0, 1, 2, -3, 4, 5, -6];\n     ///\n-    /// assert_eq!(iter.next(), Some(0u32));\n+    /// let iter = a.iter().map_while(|x| u32::try_from(*x).ok());\n+    /// let vec = iter.collect::<Vec<_>>();\n     ///\n-    /// // We have more elements that are fit in u32, but since we already\n-    /// // got a None, map_while() isn't used any more\n-    /// assert_eq!(iter.next(), None);\n+    /// // We have more elements which could fit in u32 (4, 5), but `map_while` returned `None` for `-3`\n+    /// // (as the `predicate` returned `None`) and `collect` stops at the first `None` entcountered.\n+    /// assert_eq!(vec, vec![0, 1, 2]);\n     /// ```\n     ///\n     /// Because `map_while()` needs to look at the value in order to see if it\n@@ -1115,8 +1111,13 @@ pub trait Iterator {\n     /// The `-3` is no longer there, because it was consumed in order to see if\n     /// the iteration should stop, but wasn't placed back into the iterator.\n     ///\n+    /// Note that unlike [`take_while`] this iterator is **not** fused.\n+    /// It is also not specified what this iterator returns after the first` None` is returned.\n+    /// If you need fused iterator, use [`fuse`].\n+    ///\n     /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`fuse`]: #method.fuse\n     #[inline]\n     #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n     fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>"}]}