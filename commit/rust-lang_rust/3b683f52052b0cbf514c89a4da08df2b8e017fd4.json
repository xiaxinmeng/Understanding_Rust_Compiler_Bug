{"sha": "3b683f52052b0cbf514c89a4da08df2b8e017fd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjgzZjUyMDUyYjBjYmY1MTRjODlhNGRhMDhkZjJiOGUwMTdmZDQ=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-14T13:06:39Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-16T15:45:07Z"}, "message": "rustc: Use link_name attribute for native function\n\nFixes issue #906", "tree": {"sha": "4c3452ea78ec5e4003743d87d8d2eb6835fd976e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c3452ea78ec5e4003743d87d8d2eb6835fd976e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b683f52052b0cbf514c89a4da08df2b8e017fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b683f52052b0cbf514c89a4da08df2b8e017fd4", "html_url": "https://github.com/rust-lang/rust/commit/3b683f52052b0cbf514c89a4da08df2b8e017fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b683f52052b0cbf514c89a4da08df2b8e017fd4/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73cd032df5d41a48ecae080950f4b3c10ef432f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/73cd032df5d41a48ecae080950f4b3c10ef432f9", "html_url": "https://github.com/rust-lang/rust/commit/73cd032df5d41a48ecae080950f4b3c10ef432f9"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "ff1633212f7634d87ddb9e50a0d1036b4ff3fe38", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -17,6 +17,7 @@ export require_unique_names;\n export get_attr_name;\n export get_meta_item_name;\n export get_meta_item_value_str;\n+export get_meta_item_value_str_by_name;\n export get_meta_item_list;\n export mk_name_value_item_str;\n export mk_name_value_item;\n@@ -85,6 +86,15 @@ fn get_meta_item_value_str(meta: @ast::meta_item) -> option::t<str> {\n     }\n }\n \n+fn get_meta_item_value_str_by_name(attrs: [ast::attribute], name: ast::ident)\n+    -> option::t<str> {\n+    let mattrs = find_attrs_by_name(attrs, name);\n+    if vec::len(mattrs) > 0u {\n+        ret get_meta_item_value_str(attr_meta(mattrs[0]));\n+    }\n+    ret option::none;\n+}\n+\n fn get_meta_item_list(meta: @ast::meta_item) -> option::t<[@ast::meta_item]> {\n     alt meta.node {\n       ast::meta_list(_, l) { option::some(l) }"}, {"sha": "73da789b50559a6cb8ce501b0e34980e889b58a9", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -348,7 +348,7 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         encode_type(ecx, ebml_w,\n                     ty::mk_native(ecx.ccx.tcx, local_def(nitem.id)));\n       }\n-      native_item_fn(_, fn_decl, tps) {\n+      native_item_fn(fn_decl, tps) {\n         let letter =\n             alt fn_decl.purity {\n               unsafe_fn. { 'U' }"}, {"sha": "ff9ee2a504f4827c142b13e5776e349ec9fde574", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -656,7 +656,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n           }\n           scope_native_item(it) {\n             alt it.node {\n-              ast::native_item_fn(_, decl, ty_params) {\n+              ast::native_item_fn(decl, ty_params) {\n                 ret lookup_in_fn(name, decl, ty_params, ns);\n               }\n             }\n@@ -1077,7 +1077,7 @@ fn lookup_in_mie(e: env, mie: mod_index_entry, ns: namespace) ->\n                 ret some(ast::def_native_ty(local_def(native_item.id)));\n             }\n           }\n-          ast::native_item_fn(_, decl, _) {\n+          ast::native_item_fn(decl, _) {\n             if ns == ns_value {\n                 ret some(ast::def_native_fn(\n                     local_def(native_item.id),"}, {"sha": "823d9306ce2357aab9fdbd5353c9a2feaf3c514c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -17,6 +17,7 @@ import std::map::hashmap;\n import std::map::{new_int_hash, new_str_hash};\n import std::option::{some, none};\n import driver::session;\n+import front::attr;\n import middle::{ty, gc};\n import middle::freevars::*;\n import back::{link, abi, upcall};\n@@ -5585,7 +5586,7 @@ fn native_fn_ty_param_count(cx: @crate_ctxt, id: ast::node_id) -> uint {\n         cx.sess.bug(\"register_native_fn(): native fn isn't \\\n                         actually a fn\");\n       }\n-      ast::native_item_fn(_, _, tps) {\n+      ast::native_item_fn(_, tps) {\n         count = std::vec::len::<ast::ty_param>(tps);\n       }\n     }\n@@ -5805,14 +5806,13 @@ fn item_path(item: @ast::item) -> [str] { ret [item.ident]; }\n fn collect_native_item(ccx: @crate_ctxt, i: @ast::native_item, &&pt: [str],\n                        _v: vt<[str]>) {\n     alt i.node {\n-      ast::native_item_fn(link_name, _, _) {\n+      ast::native_item_fn(_, _) {\n         if !ccx.obj_methods.contains_key(i.id) {\n-            let name =\n-              if option::is_some(link_name) {\n-                option::get(link_name)\n-              } else {\n-                i.ident\n-              };\n+            let name = i.ident;\n+            alt attr::get_meta_item_value_str_by_name(i.attrs, \"link_name\") {\n+              none. { }\n+              option::some(ln) { name = ln; }\n+            }\n             register_native_fn(ccx, i.span, pt, name, i.id);\n         }\n       }"}, {"sha": "8436d761882e7f4b957b8ccbb660d99f59be22b2", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -668,7 +668,7 @@ mod collect {\n                          abi: ast::native_abi) -> ty::ty_param_kinds_and_ty {\n         let no_kinds: [ast::kind] = [];\n         alt it.node {\n-          ast::native_item_fn(_, fn_decl, params) {\n+          ast::native_item_fn(fn_decl, params) {\n             let get = bind getter(cx, _);\n             let convert = bind ast_ty_to_ty(cx.tcx, get, _);\n             let f = bind ty_of_arg(cx, _);\n@@ -819,7 +819,7 @@ mod collect {\n           ast::native_item_ty. {\n             // FIXME: Native types have no annotation. Should they? --pcw\n           }\n-          ast::native_item_fn(_, _, _) {\n+          ast::native_item_fn(_, _) {\n             write::ty_only(cx.tcx, i.id, tpt.ty);\n           }\n         }"}, {"sha": "16d0d0d53c890fc8d2e9caf2478cc5a3727248ff", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -501,7 +501,7 @@ type native_item =\n \n tag native_item_ {\n     native_item_ty;\n-    native_item_fn(option::t<str>, fn_decl, [ty_param]);\n+    native_item_fn(fn_decl, [ty_param]);\n }\n \n //"}, {"sha": "56e6aecbab1fa2759a57f368400565f70f1af2a3", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -187,9 +187,8 @@ fn noop_fold_native_item(&&ni: @native_item, fld: ast_fold) -> @native_item {\n           node:\n               alt ni.node {\n                 native_item_ty. { native_item_ty }\n-                native_item_fn(st, fdec, typms) {\n-                  native_item_fn(st,\n-                                 {inputs: vec::map(fold_arg, fdec.inputs),\n+                native_item_fn(fdec, typms) {\n+                  native_item_fn({inputs: vec::map(fold_arg, fdec.inputs),\n                                   output: fld.fold_ty(fdec.output),\n                                   purity: fdec.purity,\n                                   il: fdec.il,"}, {"sha": "bb5bf4f7faa9dc26baefd36f3bb45e3e6565a6ca", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -1956,13 +1956,11 @@ fn parse_item_native_fn(p: parser, attrs: [ast::attribute],\n     let lo = p.get_last_lo_pos();\n     let t = parse_fn_header(p);\n     let decl = parse_fn_decl(p, purity, ast::il_normal);\n-    let link_name = none;\n-    if p.peek() == token::EQ { p.bump(); link_name = some(parse_str(p)); }\n     let hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n     ret @{ident: t.ident,\n           attrs: attrs,\n-          node: ast::native_item_fn(link_name, decl, t.tps),\n+          node: ast::native_item_fn(decl, t.tps),\n           id: p.get_id(),\n           span: ast_util::mk_sp(lo, hi)};\n }"}, {"sha": "21cfaa9e072f89cce2a4d497f89325242cfe93fb", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -350,13 +350,9 @@ fn print_native_item(s: ps, item: @ast::native_item) {\n \n \n \n-      ast::native_item_fn(lname, decl, typarams) {\n+      ast::native_item_fn(decl, typarams) {\n         print_fn(s, decl, ast::proto_bare, item.ident, typarams,\n                  decl.constraints);\n-        alt lname {\n-          none. { }\n-          some(ss) { space(s.s); word_space(s, \"=\"); print_string(s, ss); }\n-        }\n         end(s); // end head-ibox\n         word(s.s, \";\");\n         end(s); // end the outer fn box"}, {"sha": "0ad6ea2fca28f62f1435870608890a2056e7dbb5", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -179,7 +179,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n \n fn visit_native_item<E>(ni: @native_item, e: E, v: vt<E>) {\n     alt ni.node {\n-      native_item_fn(_, fd, _) { visit_fn_decl(fd, e, v); }\n+      native_item_fn(fd, _) { visit_fn_decl(fd, e, v); }\n       native_item_ty. { }\n     }\n }"}, {"sha": "006dd17fa23e42e8e418b6408491cc9bfd9112e5", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -4,8 +4,10 @@ native \"cdecl\" mod libc = \"\" {\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n     fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n     fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn open(s: str::sbuf, flags: int, mode: uint) -> int = \"_open\";\n-    fn close(fd: int) -> int = \"_close\";\n+    #[link_name = \"_open\"]\n+    fn open(s: str::sbuf, flags: int, mode: uint) -> int;\n+    #[link_name = \"_close\"]\n+    fn close(fd: int) -> int;\n     type FILE;\n     fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n     fn _fdopen(fd: int, mode: str::sbuf) -> FILE;"}, {"sha": "5dc6faac8980f74ea2700e7a765033410ec10d27", "filename": "src/test/run-pass/native-fn-linkname.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Ftest%2Frun-pass%2Fnative-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b683f52052b0cbf514c89a4da08df2b8e017fd4/src%2Ftest%2Frun-pass%2Fnative-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-fn-linkname.rs?ref=3b683f52052b0cbf514c89a4da08df2b8e017fd4", "patch": "@@ -4,7 +4,8 @@ import std::vec;\n import std::str;\n \n native \"cdecl\" mod libc = \"\" {\n-    fn my_strlen(str: *u8) -> uint = \"strlen\";\n+    #[link_name = \"strlen\"]\n+    fn my_strlen(str: *u8) -> uint;\n }\n \n fn strlen(str: str) -> uint unsafe {"}]}