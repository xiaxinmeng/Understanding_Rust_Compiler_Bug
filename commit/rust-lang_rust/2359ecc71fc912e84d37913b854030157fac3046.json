{"sha": "2359ecc71fc912e84d37913b854030157fac3046", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNTllY2M3MWZjOTEyZTg0ZDM3OTEzYjg1NDAzMDE1N2ZhYzMwNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T04:22:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-09T04:22:18Z"}, "message": "Auto merge of #77578 - euclio:max-suggestion, r=davidtwco\n\nsuggest `MAX` constant if -1 is assigned to unsigned type\n\nFixes #76413.\nFixes #77416.", "tree": {"sha": "41eeba2a3bbca17a15ca867c4764f00438fb47fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41eeba2a3bbca17a15ca867c4764f00438fb47fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2359ecc71fc912e84d37913b854030157fac3046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2359ecc71fc912e84d37913b854030157fac3046", "html_url": "https://github.com/rust-lang/rust/commit/2359ecc71fc912e84d37913b854030157fac3046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2359ecc71fc912e84d37913b854030157fac3046/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba1d21868968e1a4cbbe953371afbd43ad07c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba1d21868968e1a4cbbe953371afbd43ad07c72", "html_url": "https://github.com/rust-lang/rust/commit/9ba1d21868968e1a4cbbe953371afbd43ad07c72"}, {"sha": "ced11a83cb6cae998df514eb08d1f3dc4bd990c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced11a83cb6cae998df514eb08d1f3dc4bd990c8", "html_url": "https://github.com/rust-lang/rust/commit/ced11a83cb6cae998df514eb08d1f3dc4bd990c8"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "2f3fb49717b9c0e6b79cae9921c8b86c68f9475f", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2359ecc71fc912e84d37913b854030157fac3046/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2359ecc71fc912e84d37913b854030157fac3046/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=2359ecc71fc912e84d37913b854030157fac3046", "patch": "@@ -2,6 +2,7 @@\n \n use super::method::MethodCallee;\n use super::FnCtxt;\n+use rustc_ast as ast;\n use rustc_errors::{self, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -13,6 +14,7 @@ use rustc_middle::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple,\n use rustc_middle::ty::{\n     self, suggest_constraining_type_param, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n };\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -673,6 +675,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     match actual.kind() {\n                         Uint(_) if op == hir::UnOp::UnNeg => {\n                             err.note(\"unsigned values cannot be negated\");\n+\n+                            if let hir::ExprKind::Unary(\n+                                _,\n+                                hir::Expr {\n+                                    kind:\n+                                        hir::ExprKind::Lit(Spanned {\n+                                            node: ast::LitKind::Int(1, _),\n+                                            ..\n+                                        }),\n+                                    ..\n+                                },\n+                            ) = ex.kind\n+                            {\n+                                err.span_suggestion(\n+                                    ex.span,\n+                                    &format!(\n+                                        \"you may have meant the maximum value of `{}`\",\n+                                        actual\n+                                    ),\n+                                    format!(\"{}::MAX\", actual),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n                         }\n                         Str | Never | Char | Tuple(_) | Array(_, _) => {}\n                         Ref(_, ref lty, _) if *lty.kind() == Str => {}"}, {"sha": "d1f4ed5cb04b82b0c4bbb9633fc8be7790bceecc", "filename": "src/test/ui/feature-gates/feature-gate-negate-unsigned.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2359ecc71fc912e84d37913b854030157fac3046/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-negate-unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2359ecc71fc912e84d37913b854030157fac3046/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-negate-unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-negate-unsigned.stderr?ref=2359ecc71fc912e84d37913b854030157fac3046", "patch": "@@ -2,7 +2,10 @@ error[E0600]: cannot apply unary operator `-` to type `usize`\n   --> $DIR/feature-gate-negate-unsigned.rs:10:23\n    |\n LL |     let _max: usize = -1;\n-   |                       ^^ cannot apply unary operator `-`\n+   |                       ^^\n+   |                       |\n+   |                       cannot apply unary operator `-`\n+   |                       help: you may have meant the maximum value of `usize`: `usize::MAX`\n    |\n    = note: unsigned values cannot be negated\n "}, {"sha": "943c7f79742ab42cce16ea54215fe0e99f75bcbc", "filename": "src/test/ui/unsigned-literal-negation.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2359ecc71fc912e84d37913b854030157fac3046/src%2Ftest%2Fui%2Funsigned-literal-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2359ecc71fc912e84d37913b854030157fac3046/src%2Ftest%2Fui%2Funsigned-literal-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsigned-literal-negation.rs?ref=2359ecc71fc912e84d37913b854030157fac3046", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = -1 as usize; //~ ERROR: cannot apply unary operator `-`\n+    let x = (-1) as usize; //~ ERROR: cannot apply unary operator `-`\n+    let x: u32 = -1; //~ ERROR: cannot apply unary operator `-`\n+}"}, {"sha": "0aaa8c3b72f9d7180daffd0d2534ea74cb4b10db", "filename": "src/test/ui/unsigned-literal-negation.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2359ecc71fc912e84d37913b854030157fac3046/src%2Ftest%2Fui%2Funsigned-literal-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2359ecc71fc912e84d37913b854030157fac3046/src%2Ftest%2Fui%2Funsigned-literal-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsigned-literal-negation.stderr?ref=2359ecc71fc912e84d37913b854030157fac3046", "patch": "@@ -0,0 +1,36 @@\n+error[E0600]: cannot apply unary operator `-` to type `usize`\n+  --> $DIR/unsigned-literal-negation.rs:2:13\n+   |\n+LL |     let x = -1 as usize;\n+   |             ^^\n+   |             |\n+   |             cannot apply unary operator `-`\n+   |             help: you may have meant the maximum value of `usize`: `usize::MAX`\n+   |\n+   = note: unsigned values cannot be negated\n+\n+error[E0600]: cannot apply unary operator `-` to type `usize`\n+  --> $DIR/unsigned-literal-negation.rs:3:13\n+   |\n+LL |     let x = (-1) as usize;\n+   |             ^^^^\n+   |             |\n+   |             cannot apply unary operator `-`\n+   |             help: you may have meant the maximum value of `usize`: `usize::MAX`\n+   |\n+   = note: unsigned values cannot be negated\n+\n+error[E0600]: cannot apply unary operator `-` to type `u32`\n+  --> $DIR/unsigned-literal-negation.rs:4:18\n+   |\n+LL |     let x: u32 = -1;\n+   |                  ^^\n+   |                  |\n+   |                  cannot apply unary operator `-`\n+   |                  help: you may have meant the maximum value of `u32`: `u32::MAX`\n+   |\n+   = note: unsigned values cannot be negated\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0600`."}]}