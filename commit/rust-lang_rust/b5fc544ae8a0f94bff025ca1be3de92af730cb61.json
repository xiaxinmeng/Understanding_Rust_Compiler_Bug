{"sha": "b5fc544ae8a0f94bff025ca1be3de92af730cb61", "node_id": "C_kwDOAAsO6NoAKGI1ZmM1NDRhZThhMGY5NGJmZjAyNWNhMWJlM2RlOTJhZjczMGNiNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T05:59:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-22T05:59:39Z"}, "message": "Auto merge of #2140 - V0ldek:page_size, r=RalfJung\n\nUpdate GetSystemInfo to work with `page_size` (#2136)\n\n- Change logic in GetSystemInfo shim to take into account the two possible layouts of `SYSTEM_INFO`, the first-field-is-union used by [winapi::um::sysinfoapi::SYSTEM_INFO](https://docs.rs/winapi/latest/winapi/um/sysinfoapi/struct.SYSTEM_INFO.html), and first-two-fields-are-inlined-union used by [num_cpus](https://github.com/seanmonstar/num_cpus/blob/5f1b03332000b4c4274b5bd35fac516049ff1c6b/src/lib.rs#L206).\n- Fill out the `dwPageSize` field with the `PAGE_SIZE` constant of `4096`.\n\nCloses #2136", "tree": {"sha": "525c52a9a1983996fbd78c8d13039e9d470617d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/525c52a9a1983996fbd78c8d13039e9d470617d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fc544ae8a0f94bff025ca1be3de92af730cb61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fc544ae8a0f94bff025ca1be3de92af730cb61", "html_url": "https://github.com/rust-lang/rust/commit/b5fc544ae8a0f94bff025ca1be3de92af730cb61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fc544ae8a0f94bff025ca1be3de92af730cb61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38111b3916987c3b2a779626002830c94882b0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/38111b3916987c3b2a779626002830c94882b0a4", "html_url": "https://github.com/rust-lang/rust/commit/38111b3916987c3b2a779626002830c94882b0a4"}, {"sha": "9a5c9a54817804e2cd9ca49a83be8dad85111412", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5c9a54817804e2cd9ca49a83be8dad85111412", "html_url": "https://github.com/rust-lang/rust/commit/9a5c9a54817804e2cd9ca49a83be8dad85111412"}], "stats": {"total": 133, "additions": 116, "deletions": 17}, "files": [{"sha": "9e95c632c7f4170e49bd7ca2583a06a4804e1981", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -178,9 +178,11 @@ pub struct AllocExtra {\n pub struct PrimitiveLayouts<'tcx> {\n     pub unit: TyAndLayout<'tcx>,\n     pub i8: TyAndLayout<'tcx>,\n+    pub i16: TyAndLayout<'tcx>,\n     pub i32: TyAndLayout<'tcx>,\n     pub isize: TyAndLayout<'tcx>,\n     pub u8: TyAndLayout<'tcx>,\n+    pub u16: TyAndLayout<'tcx>,\n     pub u32: TyAndLayout<'tcx>,\n     pub usize: TyAndLayout<'tcx>,\n     pub bool: TyAndLayout<'tcx>,\n@@ -194,9 +196,11 @@ impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n         Ok(Self {\n             unit: layout_cx.layout_of(tcx.mk_unit())?,\n             i8: layout_cx.layout_of(tcx.types.i8)?,\n+            i16: layout_cx.layout_of(tcx.types.i16)?,\n             i32: layout_cx.layout_of(tcx.types.i32)?,\n             isize: layout_cx.layout_of(tcx.types.isize)?,\n             u8: layout_cx.layout_of(tcx.types.u8)?,\n+            u16: layout_cx.layout_of(tcx.types.u16)?,\n             u32: layout_cx.layout_of(tcx.types.u32)?,\n             usize: layout_cx.layout_of(tcx.types.usize)?,\n             bool: layout_cx.layout_of(tcx.types.bool)?,"}, {"sha": "1a9b2300f723cddf5ad0ef8d11fc1f42fe4df0a7", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -8,6 +8,7 @@ use rustc_target::spec::abi::Abi;\n use crate::*;\n use shims::foreign_items::EmulateByNameResult;\n use shims::windows::sync::EvalContextExt as _;\n+use smallvec::SmallVec;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -119,10 +120,56 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     system_info.ptr,\n                     iter::repeat(0u8).take(system_info.layout.size.bytes() as usize),\n                 )?;\n+                // Set selected fields.\n+                let word_layout = this.machine.layouts.u16;\n+                let dword_layout = this.machine.layouts.u32;\n+                let usize_layout = this.machine.layouts.usize;\n+\n+                // Using `mplace_field` is error-prone, see: https://github.com/rust-lang/miri/issues/2136.\n+                // Pointer fields have different sizes on different targets.\n+                // To avoid all these issue we calculate the offsets ourselves.\n+                let field_sizes = [\n+                    word_layout.size,  // 0,  wProcessorArchitecture      : WORD\n+                    word_layout.size,  // 1,  wReserved                   : WORD\n+                    dword_layout.size, // 2,  dwPageSize                  : DWORD\n+                    usize_layout.size, // 3,  lpMinimumApplicationAddress : LPVOID\n+                    usize_layout.size, // 4,  lpMaximumApplicationAddress : LPVOID\n+                    usize_layout.size, // 5,  dwActiveProcessorMask       : DWORD_PTR\n+                    dword_layout.size, // 6,  dwNumberOfProcessors        : DWORD\n+                    dword_layout.size, // 7,  dwProcessorType             : DWORD\n+                    dword_layout.size, // 8,  dwAllocationGranularity     : DWORD\n+                    word_layout.size,  // 9,  wProcessorLevel             : WORD\n+                    word_layout.size,  // 10, wProcessorRevision          : WORD\n+                ];\n+                let field_offsets: SmallVec<[Size; 11]> = field_sizes\n+                    .iter()\n+                    .copied()\n+                    .scan(Size::ZERO, |a, x| {\n+                        let res = Some(*a);\n+                        *a += x;\n+                        res\n+                    })\n+                    .collect();\n+\n+                // Set page size.\n+                let page_size = system_info.offset(\n+                    field_offsets[2],\n+                    MemPlaceMeta::None,\n+                    dword_layout,\n+                    &this.tcx,\n+                )?;\n+                this.write_scalar(\n+                    Scalar::from_int(PAGE_SIZE, dword_layout.size),\n+                    &page_size.into(),\n+                )?;\n                 // Set number of processors.\n-                let dword_size = Size::from_bytes(4);\n-                let num_cpus = this.mplace_field(&system_info, 6)?;\n-                this.write_scalar(Scalar::from_int(NUM_CPUS, dword_size), &num_cpus.into())?;\n+                let num_cpus = system_info.offset(\n+                    field_offsets[6],\n+                    MemPlaceMeta::None,\n+                    dword_layout,\n+                    &this.tcx,\n+                )?;\n+                this.write_scalar(Scalar::from_int(NUM_CPUS, dword_layout.size), &num_cpus.into())?;\n             }\n \n             // Thread-local storage"}, {"sha": "4bece389dc87f227cf5d10009f7b956b965d0c92", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -22,6 +22,7 @@ dependencies = [\n  \"issue_1705\",\n  \"issue_1760\",\n  \"issue_rust_86261\",\n+ \"page_size\",\n  \"rand\",\n  \"serde_derive\",\n ]\n@@ -123,6 +124,16 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"page_size\"\n+version = \"0.4.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eebde548fbbf1ea81a99b128872779c437752fb99f217c45245e1a61dcd9edcd\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.10\"\n@@ -233,3 +244,25 @@ name = \"wasi\"\n version = \"0.10.2+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n+]\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\""}, {"sha": "2193d354d5d21ca9b4ce867c4ef1c52d861f4b29", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -22,6 +22,7 @@ rand = { version = \"0.8\", features = [\"small_rng\"] }\n getrandom_1 = { package = \"getrandom\", version = \"0.1\" }\n getrandom_2 = { package = \"getrandom\", version = \"0.2\" }\n serde_derive = \"1.0\" # not actually used, but exercises some unique code path (`--extern` .so file)\n+page_size = \"0.4.1\"\n \n [lib]\n test = false # test that this is respected (will show in the output)"}, {"sha": "3673e5549d8c28532d746f8c5fe1350242242e49", "filename": "test-cargo-miri/test.cross-target.stdout.ref", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.cross-target.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.cross-target.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.cross-target.stdout.ref?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -5,7 +5,7 @@ test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n \n imported main\n \n-running 7 tests\n-..i....\n-test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n+running 8 tests\n+..i.....\n+test result: ok. 7 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n "}, {"sha": "a59108efb3323c0e5dbd4a03d94863e2c3076230", "filename": "test-cargo-miri/test.default.stdout.ref", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.default.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.default.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.default.stdout.ref?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -5,9 +5,9 @@ test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n \n imported main\n \n-running 7 tests\n-..i....\n-test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n+running 8 tests\n+..i.....\n+test result: ok. 7 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n \n \n running 4 tests"}, {"sha": "9fb7670d06495634039f78c0b0e07af187bc6398", "filename": "test-cargo-miri/test.filter.cross-target.stdout.ref", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.filter.cross-target.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.filter.cross-target.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.filter.cross-target.stdout.ref?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -8,5 +8,5 @@ imported main\n running 1 test\n test simple1 ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 6 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 7 filtered out\n "}, {"sha": "4b598960a0963ba657721746a1ce57b96976f4b3", "filename": "test-cargo-miri/test.filter.stdout.ref", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.filter.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.filter.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.filter.stdout.ref?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -8,7 +8,7 @@ imported main\n running 1 test\n test simple1 ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 6 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 7 filtered out\n \n \n running 0 tests"}, {"sha": "ca069b702eba44c4d501e6aa40813b4b38062e62", "filename": "test-cargo-miri/test.test-target.stdout.ref", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.test-target.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftest.test-target.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.test-target.stdout.ref?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -1,12 +1,13 @@\n \n-running 7 tests\n+running 8 tests\n test cargo_env ... ok\n test do_panic - should panic ... ok\n test does_not_work_on_miri ... ignored\n test entropy_rng ... ok\n test fail_index_check - should panic ... ok\n+test page_size ... ok\n test simple1 ... ok\n test simple2 ... ok\n \n-test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n+test result: ok. 7 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n "}, {"sha": "1a8b3c72565d31b65ad42f7977bb788bca2b3167", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fc544ae8a0f94bff025ca1be3de92af730cb61/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=b5fc544ae8a0f94bff025ca1be3de92af730cb61", "patch": "@@ -1,4 +1,4 @@\n-use rand::{SeedableRng, Rng, rngs::SmallRng};\n+use rand::{rngs::SmallRng, Rng, SeedableRng};\n \n // Having more than 1 test does seem to make a difference\n // (i.e., this calls ptr::swap which having just one test does not).\n@@ -49,14 +49,27 @@ fn cargo_env() {\n }\n \n #[test]\n-#[should_panic(expected=\"Explicit panic\")]\n-fn do_panic() { // In large, friendly letters :)\n+#[should_panic(expected = \"Explicit panic\")]\n+fn do_panic() // In large, friendly letters :)\n+{\n     panic!(\"Explicit panic from test!\");\n }\n \n #[test]\n #[allow(unconditional_panic)]\n-#[should_panic(expected=\"the len is 0 but the index is 42\")]\n+#[should_panic(expected = \"the len is 0 but the index is 42\")]\n fn fail_index_check() {\n     [][42]\n }\n+\n+#[test]\n+fn page_size() {\n+    let page_size = page_size::get();\n+\n+    // In particular, this checks that it is not 0.\n+    assert!(\n+        page_size.next_power_of_two() == page_size,\n+        \"page size not a power of two: {}\",\n+        page_size\n+    );\n+}"}]}