{"sha": "ce9b174f8ac08dde64ca295de761ad7a2c605094", "node_id": "C_kwDOAAsO6NoAKGNlOWIxNzRmOGFjMDhkZGU2NGNhMjk1ZGU3NjFhZDdhMmM2MDUwOTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T18:12:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T18:12:53Z"}, "message": "Auto merge of #12276 - jonas-schievink:improve-generate-deref-impl, r=jonas-schievink\n\nfeat: Improve \"Generate `Deref` impl\" assist\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12265\nFixes https://github.com/rust-lang/rust-analyzer/issues/12266\n\nThe assist will now generate a `DerefMut` impl if a `Deref` impl is already present.", "tree": {"sha": "e603ca018c4f8367274ecdeed9e02ea934fc4969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e603ca018c4f8367274ecdeed9e02ea934fc4969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce9b174f8ac08dde64ca295de761ad7a2c605094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9b174f8ac08dde64ca295de761ad7a2c605094", "html_url": "https://github.com/rust-lang/rust/commit/ce9b174f8ac08dde64ca295de761ad7a2c605094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce9b174f8ac08dde64ca295de761ad7a2c605094/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc6a8fe6d5ac9edaa9e953ba654d5800cc55993", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc6a8fe6d5ac9edaa9e953ba654d5800cc55993", "html_url": "https://github.com/rust-lang/rust/commit/8bc6a8fe6d5ac9edaa9e953ba654d5800cc55993"}, {"sha": "1df6560fd829df72783002545902163d3ca278ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1df6560fd829df72783002545902163d3ca278ec", "html_url": "https://github.com/rust-lang/rust/commit/1df6560fd829df72783002545902163d3ca278ec"}], "stats": {"total": 219, "additions": 171, "deletions": 48}, "files": [{"sha": "c102eb1ab3e6fe3ac9b2669c752647b7683b40ec", "filename": "crates/ide-assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 165, "deletions": 46, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=ce9b174f8ac08dde64ca295de761ad7a2c605094", "patch": "@@ -1,5 +1,6 @@\n use std::fmt::Display;\n \n+use hir::{ModPath, ModuleDef};\n use ide_db::{famous_defs::FamousDefs, RootDatabase};\n use syntax::{\n     ast::{self, HasName},\n@@ -17,6 +18,7 @@ use crate::{\n // Generate `Deref` impl using the given struct field.\n //\n // ```\n+// # //- minicore: deref, deref_mut\n // struct A;\n // struct B {\n //    $0a: A\n@@ -29,7 +31,7 @@ use crate::{\n //    a: A\n // }\n //\n-// impl std::ops::Deref for B {\n+// impl core::ops::Deref for B {\n //     type Target = A;\n //\n //     fn deref(&self) -> &Self::Target {\n@@ -45,19 +47,36 @@ fn generate_record_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n \n-    if existing_deref_impl(&ctx.sema, &strukt).is_some() {\n-        cov_mark::hit!(test_add_record_deref_impl_already_exists);\n-        return None;\n-    }\n+    let deref_type_to_generate = match existing_deref_impl(&ctx.sema, &strukt) {\n+        None => DerefType::Deref,\n+        Some(DerefType::Deref) => DerefType::DerefMut,\n+        Some(DerefType::DerefMut) => {\n+            cov_mark::hit!(test_add_record_deref_impl_already_exists);\n+            return None;\n+        }\n+    };\n+\n+    let module = ctx.sema.to_def(&strukt)?.module(ctx.db());\n+    let trait_ = deref_type_to_generate.to_trait(&ctx.sema, module.krate())?;\n+    let trait_path = module.find_use_path(ctx.db(), ModuleDef::Trait(trait_))?;\n \n     let field_type = field.ty()?;\n     let field_name = field.name()?;\n     let target = field.syntax().text_range();\n     acc.add(\n         AssistId(\"generate_deref\", AssistKind::Generate),\n-        format!(\"Generate `Deref` impl using `{}`\", field_name),\n+        format!(\"Generate `{:?}` impl using `{}`\", deref_type_to_generate, field_name),\n         target,\n-        |edit| generate_edit(edit, strukt, field_type.syntax(), field_name.syntax()),\n+        |edit| {\n+            generate_edit(\n+                edit,\n+                strukt,\n+                field_type.syntax(),\n+                field_name.syntax(),\n+                deref_type_to_generate,\n+                trait_path,\n+            )\n+        },\n     )\n }\n \n@@ -68,18 +87,35 @@ fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let field_list_index =\n         field_list.syntax().children().into_iter().position(|s| &s == field.syntax())?;\n \n-    if existing_deref_impl(&ctx.sema, &strukt).is_some() {\n-        cov_mark::hit!(test_add_field_deref_impl_already_exists);\n-        return None;\n-    }\n+    let deref_type_to_generate = match existing_deref_impl(&ctx.sema, &strukt) {\n+        None => DerefType::Deref,\n+        Some(DerefType::Deref) => DerefType::DerefMut,\n+        Some(DerefType::DerefMut) => {\n+            cov_mark::hit!(test_add_field_deref_impl_already_exists);\n+            return None;\n+        }\n+    };\n+\n+    let module = ctx.sema.to_def(&strukt)?.module(ctx.db());\n+    let trait_ = deref_type_to_generate.to_trait(&ctx.sema, module.krate())?;\n+    let trait_path = module.find_use_path(ctx.db(), ModuleDef::Trait(trait_))?;\n \n     let field_type = field.ty()?;\n     let target = field.syntax().text_range();\n     acc.add(\n         AssistId(\"generate_deref\", AssistKind::Generate),\n-        format!(\"Generate `Deref` impl using `{}`\", field.syntax()),\n+        format!(\"Generate `{:?}` impl using `{}`\", deref_type_to_generate, field.syntax()),\n         target,\n-        |edit| generate_edit(edit, strukt, field_type.syntax(), field_list_index),\n+        |edit| {\n+            generate_edit(\n+                edit,\n+                strukt,\n+                field_type.syntax(),\n+                field_list_index,\n+                deref_type_to_generate,\n+                trait_path,\n+            )\n+        },\n     )\n }\n \n@@ -88,38 +124,72 @@ fn generate_edit(\n     strukt: ast::Struct,\n     field_type_syntax: &SyntaxNode,\n     field_name: impl Display,\n+    deref_type: DerefType,\n+    trait_path: ModPath,\n ) {\n     let start_offset = strukt.syntax().text_range().end();\n-    let impl_code = format!(\n-        r#\"    type Target = {0};\n+    let impl_code = match deref_type {\n+        DerefType::Deref => format!(\n+            r#\"    type Target = {0};\n \n     fn deref(&self) -> &Self::Target {{\n         &self.{1}\n     }}\"#,\n-        field_type_syntax, field_name\n-    );\n+            field_type_syntax, field_name\n+        ),\n+        DerefType::DerefMut => format!(\n+            r#\"    fn deref_mut(&mut self) -> &mut Self::Target {{\n+        &mut self.{}\n+    }}\"#,\n+            field_name\n+        ),\n+    };\n     let strukt_adt = ast::Adt::Struct(strukt);\n-    let deref_impl = generate_trait_impl_text(&strukt_adt, \"std::ops::Deref\", &impl_code);\n+    let deref_impl = generate_trait_impl_text(&strukt_adt, &trait_path.to_string(), &impl_code);\n     edit.insert(start_offset, deref_impl);\n }\n \n fn existing_deref_impl(\n-    sema: &'_ hir::Semantics<'_, RootDatabase>,\n+    sema: &hir::Semantics<'_, RootDatabase>,\n     strukt: &ast::Struct,\n-) -> Option<()> {\n+) -> Option<DerefType> {\n     let strukt = sema.to_def(strukt)?;\n     let krate = strukt.module(sema.db).krate();\n \n     let deref_trait = FamousDefs(sema, krate).core_ops_Deref()?;\n+    let deref_mut_trait = FamousDefs(sema, krate).core_ops_DerefMut()?;\n     let strukt_type = strukt.ty(sema.db);\n \n     if strukt_type.impls_trait(sema.db, deref_trait, &[]) {\n-        Some(())\n+        if strukt_type.impls_trait(sema.db, deref_mut_trait, &[]) {\n+            Some(DerefType::DerefMut)\n+        } else {\n+            Some(DerefType::Deref)\n+        }\n     } else {\n         None\n     }\n }\n \n+#[derive(Debug)]\n+enum DerefType {\n+    Deref,\n+    DerefMut,\n+}\n+\n+impl DerefType {\n+    fn to_trait(\n+        &self,\n+        sema: &hir::Semantics<'_, RootDatabase>,\n+        krate: hir::Crate,\n+    ) -> Option<hir::Trait> {\n+        match self {\n+            DerefType::Deref => FamousDefs(sema, krate).core_ops_Deref(),\n+            DerefType::DerefMut => FamousDefs(sema, krate).core_ops_DerefMut(),\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -130,12 +200,39 @@ mod tests {\n     fn test_generate_record_deref() {\n         check_assist(\n             generate_deref,\n-            r#\"struct A { }\n+            r#\"\n+//- minicore: deref\n+struct A { }\n struct B { $0a: A }\"#,\n-            r#\"struct A { }\n+            r#\"\n+struct A { }\n struct B { a: A }\n \n-impl std::ops::Deref for B {\n+impl core::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.a\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_record_deref_short_path() {\n+        check_assist(\n+            generate_deref,\n+            r#\"\n+//- minicore: deref\n+use core::ops::Deref;\n+struct A { }\n+struct B { $0a: A }\"#,\n+            r#\"\n+use core::ops::Deref;\n+struct A { }\n+struct B { a: A }\n+\n+impl Deref for B {\n     type Target = A;\n \n     fn deref(&self) -> &Self::Target {\n@@ -149,12 +246,15 @@ impl std::ops::Deref for B {\n     fn test_generate_field_deref_idx_0() {\n         check_assist(\n             generate_deref,\n-            r#\"struct A { }\n+            r#\"\n+//- minicore: deref\n+struct A { }\n struct B($0A);\"#,\n-            r#\"struct A { }\n+            r#\"\n+struct A { }\n struct B(A);\n \n-impl std::ops::Deref for B {\n+impl core::ops::Deref for B {\n     type Target = A;\n \n     fn deref(&self) -> &Self::Target {\n@@ -167,12 +267,15 @@ impl std::ops::Deref for B {\n     fn test_generate_field_deref_idx_1() {\n         check_assist(\n             generate_deref,\n-            r#\"struct A { }\n+            r#\"\n+//- minicore: deref\n+struct A { }\n struct B(u8, $0A);\"#,\n-            r#\"struct A { }\n+            r#\"\n+struct A { }\n struct B(u8, A);\n \n-impl std::ops::Deref for B {\n+impl core::ops::Deref for B {\n     type Target = A;\n \n     fn deref(&self) -> &Self::Target {\n@@ -182,23 +285,43 @@ impl std::ops::Deref for B {\n         );\n     }\n \n+    #[test]\n+    fn test_generates_derefmut_when_deref_present() {\n+        check_assist(\n+            generate_deref,\n+            r#\"\n+//- minicore: deref, deref_mut\n+struct B { $0a: u8 }\n+\n+impl core::ops::Deref for B {}\n+\"#,\n+            r#\"\n+struct B { a: u8 }\n+\n+impl core::ops::DerefMut for B {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.a\n+    }\n+}\n+\n+impl core::ops::Deref for B {}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_generate_record_deref_not_applicable_if_already_impl() {\n         cov_mark::check!(test_add_record_deref_impl_already_exists);\n         check_assist_not_applicable(\n             generate_deref,\n             r#\"\n-//- minicore: deref\n+//- minicore: deref, deref_mut\n struct A { }\n struct B { $0a: A }\n \n-impl core::ops::Deref for B {\n-    type Target = A;\n-\n-    fn deref(&self) -> &Self::Target {\n-        &self.a\n-    }\n-}\"#,\n+impl core::ops::Deref for B {}\n+impl core::ops::DerefMut for B {}\n+\"#,\n         )\n     }\n \n@@ -208,17 +331,13 @@ impl core::ops::Deref for B {\n         check_assist_not_applicable(\n             generate_deref,\n             r#\"\n-//- minicore: deref\n+//- minicore: deref, deref_mut\n struct A { }\n struct B($0A)\n \n-impl core::ops::Deref for B {\n-    type Target = A;\n-\n-    fn deref(&self) -> &Self::Target {\n-        &self.0\n-    }\n-}\"#,\n+impl core::ops::Deref for B {}\n+impl core::ops::DerefMut for B {}\n+\"#,\n         )\n     }\n }"}, {"sha": "a8d5f85ba6630ca6cef491319b78b44f0744ec87", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=ce9b174f8ac08dde64ca295de761ad7a2c605094", "patch": "@@ -226,7 +226,6 @@ fn assist_order_field_struct() {\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate `Deref` impl using `bar`\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }\n "}, {"sha": "73da31f6f17716068889d998571773d1271930c7", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ce9b174f8ac08dde64ca295de761ad7a2c605094", "patch": "@@ -799,6 +799,7 @@ fn doctest_generate_deref() {\n     check_doc_test(\n         \"generate_deref\",\n         r#####\"\n+//- minicore: deref, deref_mut\n struct A;\n struct B {\n    $0a: A\n@@ -810,7 +811,7 @@ struct B {\n    a: A\n }\n \n-impl std::ops::Deref for B {\n+impl core::ops::Deref for B {\n     type Target = A;\n \n     fn deref(&self) -> &Self::Target {"}, {"sha": "c8341fed1c72c50e10ab6def2e90200a3cfc9a75", "filename": "crates/ide-db/src/famous_defs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-db%2Fsrc%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9b174f8ac08dde64ca295de761ad7a2c605094/crates%2Fide-db%2Fsrc%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ffamous_defs.rs?ref=ce9b174f8ac08dde64ca295de761ad7a2c605094", "patch": "@@ -82,6 +82,10 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:ops:Deref\")\n     }\n \n+    pub fn core_ops_DerefMut(&self) -> Option<Trait> {\n+        self.find_trait(\"core:ops:DerefMut\")\n+    }\n+\n     pub fn core_convert_AsRef(&self) -> Option<Trait> {\n         self.find_trait(\"core:convert:AsRef\")\n     }"}]}