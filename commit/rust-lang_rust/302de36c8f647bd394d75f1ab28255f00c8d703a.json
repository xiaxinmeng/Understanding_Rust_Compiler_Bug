{"sha": "302de36c8f647bd394d75f1ab28255f00c8d703a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMmRlMzZjOGY2NDdiZDM5NGQ3NWYxYWIyODI1NWYwMGM4ZDcwM2E=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-13T17:49:53Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-14T12:39:37Z"}, "message": "Properly link up iterator documentation\n\nDue to the way iterators work, the std::iter module is chock full of\nstructs that you, humble Rust programmer, will never actually use.\nHowever, they have URLs, and therefore get linked to, because they are\nreal structs that do exist.\n\nSo, rather than just have a tiny sentence about each one of them,\nthis patch adds links back to the functions and methods on Iterator\nwhich actually create the structs, where helpful documentation already\nexists.", "tree": {"sha": "8e24d8de4384c94fe6ceb1892a562a3ddf3154e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e24d8de4384c94fe6ceb1892a562a3ddf3154e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302de36c8f647bd394d75f1ab28255f00c8d703a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302de36c8f647bd394d75f1ab28255f00c8d703a", "html_url": "https://github.com/rust-lang/rust/commit/302de36c8f647bd394d75f1ab28255f00c8d703a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302de36c8f647bd394d75f1ab28255f00c8d703a/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4362da562a4b591a7d120c6677e14ea713481a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4362da562a4b591a7d120c6677e14ea713481a", "html_url": "https://github.com/rust-lang/rust/commit/ec4362da562a4b591a7d120c6677e14ea713481a"}], "stats": {"total": 157, "additions": 137, "deletions": 20}, "files": [{"sha": "d54817f5201e171a1f6ea05ec775117fb2084aab", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 137, "deletions": 20, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/302de36c8f647bd394d75f1ab28255f00c8d703a/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302de36c8f647bd394d75f1ab28255f00c8d703a/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=302de36c8f647bd394d75f1ab28255f00c8d703a", "patch": "@@ -1618,7 +1618,13 @@ impl<B, I: ExactSizeIterator, F> ExactSizeIterator for Map<I, F> where\n impl<A, B> ExactSizeIterator for Zip<A, B>\n     where A: ExactSizeIterator, B: ExactSizeIterator {}\n \n-/// An double-ended iterator with the direction inverted\n+/// An double-ended iterator with the direction inverted.\n+///\n+/// This `struct` is created by the [`rev()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`rev()`]: trait.Iterator.html#method.rev\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1642,7 +1648,13 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n }\n \n-/// An iterator that clones the elements of an underlying iterator\n+/// An iterator that clones the elements of an underlying iterator.\n+///\n+/// This `struct` is created by the [`cloned()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`cloned()`]: trait.Iterator.html#method.cloned\n+/// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[derive(Clone)]\n@@ -1679,7 +1691,13 @@ impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n     where I: ExactSizeIterator<Item=&'a T>, T: Clone\n {}\n \n-/// An iterator that repeats endlessly\n+/// An iterator that repeats endlessly.\n+///\n+/// This `struct` is created by the [`cycle()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`cycle()`]: trait.Iterator.html#method.cycle\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1711,7 +1729,13 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n     }\n }\n \n-/// An iterator that strings two iterators together\n+/// An iterator that strings two iterators together.\n+///\n+/// This `struct` is created by the [`chain()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`chain()`]: trait.Iterator.html#method.chain\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1849,7 +1873,13 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n     }\n }\n \n-/// An iterator that iterates two other iterators simultaneously\n+/// An iterator that iterates two other iterators simultaneously.\n+///\n+/// This `struct` is created by the [`zip()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`zip()`]: trait.Iterator.html#method.zip\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1915,7 +1945,13 @@ impl<A, B> DoubleEndedIterator for Zip<A, B> where\n     }\n }\n \n-/// An iterator that maps the values of `iter` with `f`\n+/// An iterator that maps the values of `iter` with `f`.\n+///\n+/// This `struct` is created by the [`map()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`map()`]: trait.Iterator.html#method.map\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -1949,7 +1985,13 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n     }\n }\n \n-/// An iterator that filters the elements of `iter` with `predicate`\n+/// An iterator that filters the elements of `iter` with `predicate`.\n+///\n+/// This `struct` is created by the [`filter()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`filter()`]: trait.Iterator.html#method.filter\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -1994,7 +2036,13 @@ impl<I: DoubleEndedIterator, P> DoubleEndedIterator for Filter<I, P>\n     }\n }\n \n-/// An iterator that uses `f` to both filter and map elements from `iter`\n+/// An iterator that uses `f` to both filter and map elements from `iter`.\n+///\n+/// This `struct` is created by the [`filter_map()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`filter_map()`]: trait.Iterator.html#method.filter_map\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2041,7 +2089,13 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n     }\n }\n \n-/// An iterator that yields the current count and the element during iteration\n+/// An iterator that yields the current count and the element during iteration.\n+///\n+/// This `struct` is created by the [`enumerate()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`enumerate()`]: trait.Iterator.html#method.enumerate\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2108,7 +2162,14 @@ impl<I> DoubleEndedIterator for Enumerate<I> where\n     }\n }\n \n-/// An iterator with a `peek()` that returns an optional reference to the next element.\n+/// An iterator with a `peek()` that returns an optional reference to the next\n+/// element.\n+///\n+/// This `struct` is created by the [`peekable()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`peekable()`]: trait.Iterator.html#method.peekable\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2190,7 +2251,13 @@ impl<I: Iterator> Peekable<I> {\n     }\n }\n \n-/// An iterator that rejects elements while `predicate` is true\n+/// An iterator that rejects elements while `predicate` is true.\n+///\n+/// This `struct` is created by the [`skip_while()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`skip_while()`]: trait.Iterator.html#method.skip_while\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2224,7 +2291,13 @@ impl<I: Iterator, P> Iterator for SkipWhile<I, P>\n     }\n }\n \n-/// An iterator that only accepts elements while `predicate` is true\n+/// An iterator that only accepts elements while `predicate` is true.\n+///\n+/// This `struct` is created by the [`take_while()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`take_while()`]: trait.Iterator.html#method.take_while\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2264,6 +2337,12 @@ impl<I: Iterator, P> Iterator for TakeWhile<I, P>\n }\n \n /// An iterator that skips over `n` elements of `iter`.\n+///\n+/// This `struct` is created by the [`skip()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`skip()`]: trait.Iterator.html#method.skip\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2338,6 +2417,12 @@ impl<I> Iterator for Skip<I> where I: Iterator {\n impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {}\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n+///\n+/// This `struct` is created by the [`take()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`take()`]: trait.Iterator.html#method.take\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2393,7 +2478,13 @@ impl<I> Iterator for Take<I> where I: Iterator{\n impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n \n \n-/// An iterator to maintain state while iterating another iterator\n+/// An iterator to maintain state while iterating another iterator.\n+///\n+/// This `struct` is created by the [`scan()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`scan()`]: trait.Iterator.html#method.scan\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2422,9 +2513,14 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n     }\n }\n \n-/// An iterator that maps each element to an iterator,\n-/// and yields the elements of the produced iterators\n+/// An iterator that maps each element to an iterator, and yields the elements\n+/// of the produced iterators.\n ///\n+/// This `struct` is created by the [`flat_map()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`flat_map()`]: trait.Iterator.html#method.flat_map\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -2493,8 +2589,11 @@ impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> wher\n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n ///\n-/// These can be created through\n-/// [`iter.fuse()`](trait.Iterator.html#method.fuse).\n+/// This `struct` is created by the [`fuse()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`fuse()`]: trait.Iterator.html#method.fuse\n+/// [`Iterator`]: trait.Iterator.html\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2574,8 +2673,14 @@ impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {}\n \n-/// An iterator that calls a function with a reference to each\n-/// element before yielding it.\n+/// An iterator that calls a function with a reference to each element before\n+/// yielding it.\n+///\n+/// This `struct` is created by the [`inspect()`] method on [`Iterator`]. See its\n+/// documentation for more.\n+///\n+/// [`inspect()`]: trait.Iterator.html#method.inspect\n+/// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n@@ -3009,7 +3114,11 @@ impl<A: Step + One> Iterator for ops::RangeFrom<A> where\n     }\n }\n \n-/// An iterator that repeats an element endlessly\n+/// An iterator that repeats an element endlessly.\n+///\n+/// This `struct` is created by the [`repeat()`] function. See its documentation for more.\n+///\n+/// [`repeat()`]: fn.repeat.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Repeat<A> {\n@@ -3040,6 +3149,10 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n }\n \n /// An iterator that yields nothing.\n+///\n+/// This `struct` is created by the [`empty()`] function. See its documentation for more.\n+///\n+/// [`empty()`]: fn.empty.html\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n \n@@ -3095,6 +3208,10 @@ pub fn empty<T>() -> Empty<T> {\n }\n \n /// An iterator that yields an element exactly once.\n+///\n+/// This `struct` is created by the [`once()`] function. See its documentation for more.\n+///\n+/// [`once()`]: fn.once.html\n #[derive(Clone)]\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub struct Once<T> {"}]}