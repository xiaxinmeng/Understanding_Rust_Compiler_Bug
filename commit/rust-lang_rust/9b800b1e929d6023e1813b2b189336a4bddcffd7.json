{"sha": "9b800b1e929d6023e1813b2b189336a4bddcffd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODAwYjFlOTI5ZDYwMjNlMTgxM2IyYjE4OTMzNmE0YmRkY2ZmZDc=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-16T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-16T21:30:33Z"}, "message": "Rename SpanlessEq::ignore_fn to deny_side_effects\n\nNo functional changes intended.", "tree": {"sha": "c8ef22fb4e96248641fff50ec6b601164e313922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8ef22fb4e96248641fff50ec6b601164e313922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b800b1e929d6023e1813b2b189336a4bddcffd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b800b1e929d6023e1813b2b189336a4bddcffd7", "html_url": "https://github.com/rust-lang/rust/commit/9b800b1e929d6023e1813b2b189336a4bddcffd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b800b1e929d6023e1813b2b189336a4bddcffd7/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afa4ef60f973218c901d0f802d586fe6c43017d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afa4ef60f973218c901d0f802d586fe6c43017d", "html_url": "https://github.com/rust-lang/rust/commit/6afa4ef60f973218c901d0f802d586fe6c43017d"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "1014546ff89e7b0643f4d1fae7a98a587d4e13a6", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b800b1e929d6023e1813b2b189336a4bddcffd7/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b800b1e929d6023e1813b2b189336a4bddcffd7/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=9b800b1e929d6023e1813b2b189336a4bddcffd7", "patch": "@@ -23,23 +23,22 @@ pub struct SpanlessEq<'a, 'tcx> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'tcx>,\n     maybe_typeck_results: Option<&'tcx TypeckResults<'tcx>>,\n-    /// If is true, never consider as equal expressions containing function\n-    /// calls.\n-    ignore_fn: bool,\n+    allow_side_effects: bool,\n }\n \n impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n             cx,\n             maybe_typeck_results: cx.maybe_typeck_results(),\n-            ignore_fn: false,\n+            allow_side_effects: true,\n         }\n     }\n \n-    pub fn ignore_fn(self) -> Self {\n+    /// Consider expressions containing potential side effects as not equal.\n+    pub fn deny_side_effects(self) -> Self {\n         Self {\n-            ignore_fn: true,\n+            allow_side_effects: false,\n             ..self\n         }\n     }\n@@ -67,7 +66,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n \n     #[allow(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n-        if self.ignore_fn && differing_macro_contexts(left.span, right.span) {\n+        if !self.allow_side_effects && differing_macro_contexts(left.span, right.span) {\n             return false;\n         }\n \n@@ -108,7 +107,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprKind::Box(ref l), &ExprKind::Box(ref r)) => self.eq_expr(l, r),\n             (&ExprKind::Call(l_fun, l_args), &ExprKind::Call(r_fun, r_args)) => {\n-                !self.ignore_fn && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n+                self.allow_side_effects && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             },\n             (&ExprKind::Cast(ref lx, ref lt), &ExprKind::Cast(ref rx, ref rt))\n             | (&ExprKind::Type(ref lx, ref lt), &ExprKind::Type(ref rx, ref rt)) => {\n@@ -134,7 +133,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                     })\n             },\n             (&ExprKind::MethodCall(l_path, _, l_args, _), &ExprKind::MethodCall(r_path, _, r_args, _)) => {\n-                !self.ignore_fn && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n+                self.allow_side_effects && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n             },\n             (&ExprKind::Repeat(ref le, ref ll_id), &ExprKind::Repeat(ref re, ref rl_id)) => {\n                 let mut celcx = constant_context(self.cx, self.cx.tcx.typeck_body(ll_id.body));\n@@ -342,7 +341,7 @@ pub fn over<X>(left: &[X], right: &[X], mut eq_fn: impl FnMut(&X, &X) -> bool) -\n \n /// Checks if two expressions evaluate to the same value, and don't contain any side effects.\n pub fn eq_expr_value(cx: &LateContext<'_>, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n-    SpanlessEq::new(cx).ignore_fn().eq_expr(left, right)\n+    SpanlessEq::new(cx).deny_side_effects().eq_expr(left, right)\n }\n \n /// Type used to hash an ast element. This is different from the `Hash` trait"}, {"sha": "8fa5d22210a3691f585b16256dc54e5464827d85", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b800b1e929d6023e1813b2b189336a4bddcffd7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b800b1e929d6023e1813b2b189336a4bddcffd7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=9b800b1e929d6023e1813b2b189336a4bddcffd7", "patch": "@@ -492,7 +492,7 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             if let StmtKind::Semi(only_expr) = &stmts[0].kind;\n             if let ExprKind::MethodCall(ref ps, _, ref span_call_args, _) = &only_expr.kind;\n             let and_then_snippets = get_and_then_snippets(cx, and_then_args);\n-            let mut sle = SpanlessEq::new(cx).ignore_fn();\n+            let mut sle = SpanlessEq::new(cx).deny_side_effects();\n             then {\n                 match &*ps.ident.as_str() {\n                     \"span_suggestion\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {"}]}