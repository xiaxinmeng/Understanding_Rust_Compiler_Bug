{"sha": "38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZWZiMmUxY2NmMjEwYjAxMDhkMmI4OGVlOWQ0ZGRjZDhlOTFhM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-01T05:24:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-01T05:24:11Z"}, "message": "Auto merge of #42348 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 9 pull requests\n\n- Successful merges: #42136, #42275, #42286, #42297, #42302, #42306, #42314, #42324, #42347\n- Failed merges:", "tree": {"sha": "fd62a4e7688baa1ef79d4d4ac559f487d64903e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd62a4e7688baa1ef79d4d4ac559f487d64903e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "html_url": "https://github.com/rust-lang/rust/commit/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cc22b4bae8007c59fbe58f2c104ecd743d746a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cc22b4bae8007c59fbe58f2c104ecd743d746a", "html_url": "https://github.com/rust-lang/rust/commit/e0cc22b4bae8007c59fbe58f2c104ecd743d746a"}, {"sha": "9bd6dc73fc7fd46bf83ff17bea13a410efb1fc96", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd6dc73fc7fd46bf83ff17bea13a410efb1fc96", "html_url": "https://github.com/rust-lang/rust/commit/9bd6dc73fc7fd46bf83ff17bea13a410efb1fc96"}], "stats": {"total": 1183, "additions": 660, "deletions": 523}, "files": [{"sha": "26d44ae7693ada735aa8de09dee88d112298959b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -914,6 +914,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         t!(fs::create_dir_all(pkg.join(\"cargo\")));\n         t!(fs::create_dir_all(pkg.join(\"rust-docs\")));\n         t!(fs::create_dir_all(pkg.join(\"rust-std\")));\n+        t!(fs::create_dir_all(pkg.join(\"rls\")));\n+        t!(fs::create_dir_all(pkg.join(\"rust-analysis\")));\n \n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target)),\n              &pkg.join(\"rustc\"));\n@@ -923,11 +925,17 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n              &pkg.join(\"rust-docs\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-std\"), target)),\n              &pkg.join(\"rust-std\"));\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rls\"), target)),\n+             &pkg.join(\"rls\"));\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-analysis\"), target)),\n+             &pkg.join(\"rust-analysis\"));\n \n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rustc\"), 0o755);\n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"cargo\"), 0o755);\n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rust-docs\"), 0o755);\n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rust-std\"), 0o755);\n+        install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rls\"), 0o755);\n+        install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rust-analysis\"), 0o755);\n \n         let pkgbuild = |component: &str| {\n             let mut cmd = Command::new(\"pkgbuild\");\n@@ -941,6 +949,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         pkgbuild(\"cargo\");\n         pkgbuild(\"rust-docs\");\n         pkgbuild(\"rust-std\");\n+        pkgbuild(\"rls\");\n+        pkgbuild(\"rust-analysis\");\n \n         // create an 'uninstall' package\n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"uninstall\"), 0o755);\n@@ -964,6 +974,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         let _ = fs::remove_dir_all(&exe);\n         t!(fs::create_dir_all(exe.join(\"rustc\")));\n         t!(fs::create_dir_all(exe.join(\"cargo\")));\n+        t!(fs::create_dir_all(exe.join(\"rls\")));\n+        t!(fs::create_dir_all(exe.join(\"rust-analysis\")));\n         t!(fs::create_dir_all(exe.join(\"rust-docs\")));\n         t!(fs::create_dir_all(exe.join(\"rust-std\")));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target))\n@@ -978,11 +990,19 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-std\"), target))\n                   .join(format!(\"rust-std-{}\", target)),\n              &exe.join(\"rust-std\"));\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rls\"), target))\n+                  .join(\"rls\"),\n+             &exe.join(\"rls\"));\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-analysis\"), target))\n+                  .join(format!(\"rust-analysis-{}\", target)),\n+             &exe.join(\"rust-analysis\"));\n \n         t!(fs::remove_file(exe.join(\"rustc/manifest.in\")));\n         t!(fs::remove_file(exe.join(\"cargo/manifest.in\")));\n         t!(fs::remove_file(exe.join(\"rust-docs/manifest.in\")));\n         t!(fs::remove_file(exe.join(\"rust-std/manifest.in\")));\n+        t!(fs::remove_file(exe.join(\"rls/manifest.in\")));\n+        t!(fs::remove_file(exe.join(\"rust-analysis/manifest.in\")));\n \n         if target.contains(\"windows-gnu\") {\n             t!(fs::create_dir_all(exe.join(\"rust-mingw\")));\n@@ -1056,6 +1076,26 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n                         .arg(\"-dr\").arg(\"Std\")\n                         .arg(\"-var\").arg(\"var.StdDir\")\n                         .arg(\"-out\").arg(exe.join(\"StdGroup.wxs\")));\n+        build.run(Command::new(&heat)\n+                        .current_dir(&exe)\n+                        .arg(\"dir\")\n+                        .arg(\"rls\")\n+                        .args(&heat_flags)\n+                        .arg(\"-cg\").arg(\"RlsGroup\")\n+                        .arg(\"-dr\").arg(\"Rls\")\n+                        .arg(\"-var\").arg(\"var.RlsDir\")\n+                        .arg(\"-out\").arg(exe.join(\"RlsGroup.wxs\"))\n+                        .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n+        build.run(Command::new(&heat)\n+                        .current_dir(&exe)\n+                        .arg(\"dir\")\n+                        .arg(\"rust-analysis\")\n+                        .args(&heat_flags)\n+                        .arg(\"-cg\").arg(\"AnalysisGroup\")\n+                        .arg(\"-dr\").arg(\"Analysis\")\n+                        .arg(\"-var\").arg(\"var.AnalysisDir\")\n+                        .arg(\"-out\").arg(exe.join(\"AnalysisGroup.wxs\"))\n+                        .arg(\"-t\").arg(etc.join(\"msi/remove-duplicates.xsl\")));\n         if target.contains(\"windows-gnu\") {\n             build.run(Command::new(&heat)\n                             .current_dir(&exe)\n@@ -1079,6 +1119,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n                .arg(\"-dDocsDir=rust-docs\")\n                .arg(\"-dCargoDir=cargo\")\n                .arg(\"-dStdDir=rust-std\")\n+               .arg(\"-dRlsDir=rls\")\n+               .arg(\"-dAnalysisDir=rust-analysis\")\n                .arg(\"-arch\").arg(&arch)\n                .arg(\"-out\").arg(&output)\n                .arg(&input);\n@@ -1096,6 +1138,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         candle(\"DocsGroup.wxs\".as_ref());\n         candle(\"CargoGroup.wxs\".as_ref());\n         candle(\"StdGroup.wxs\".as_ref());\n+        candle(\"RlsGroup.wxs\".as_ref());\n+        candle(\"AnalysisGroup.wxs\".as_ref());\n \n         if target.contains(\"windows-gnu\") {\n             candle(\"GccGroup.wxs\".as_ref());\n@@ -1118,6 +1162,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n            .arg(\"DocsGroup.wixobj\")\n            .arg(\"CargoGroup.wixobj\")\n            .arg(\"StdGroup.wixobj\")\n+           .arg(\"RlsGroup.wixobj\")\n+           .arg(\"AnalysisGroup.wixobj\")\n            .current_dir(&exe);\n \n         if target.contains(\"windows-gnu\") {"}, {"sha": "28bbcf734f8173de25288f84048483e1c41df57c", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -208,6 +208,7 @@\n     - [toowned_clone_into](library-features/toowned-clone-into.md)\n     - [trusted_len](library-features/trusted-len.md)\n     - [try_from](library-features/try-from.md)\n+    - [try_trait](library-features/try-trait.md)\n     - [unicode](library-features/unicode.md)\n     - [unique](library-features/unique.md)\n     - [unsize](library-features/unsize.md)"}, {"sha": "a5e6965faec42151041a8ad48f65dda7a6769fd2", "filename": "src/doc/unstable-book/src/library-features/question-mark-carrier.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fquestion-mark-carrier.md", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fquestion-mark-carrier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fquestion-mark-carrier.md?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -5,3 +5,9 @@ The tracking issue for this feature is: [#31436]\n [#31436]: https://github.com/rust-lang/rust/issues/31436\n \n ------------------------\n+\n+This feature has been superseded by [`try_trait`][try_trait].\n+\n+It exists only in stage0 for bootstrapping.\n+\n+[try_trait]: library-features/try-trait.html"}, {"sha": "0c07329025bca002306d20758de81db54344d881", "filename": "src/doc/unstable-book/src/library-features/try-trait.md", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -0,0 +1,50 @@\n+# `try_trait`\n+\n+The tracking issue for this feature is: [#42327]\n+\n+[#42327]: https://github.com/rust-lang/rust/issues/42327\n+\n+------------------------\n+\n+This introduces a new trait `Try` for extending the `?` operator to types\n+other than `Result` (a part of [RFC 1859]).  The trait provides the canonical\n+way to _view_ a type in terms of a success/failure dichotomy.  This will\n+allow `?` to supplant the `try_opt!` macro on `Option` and the `try_ready!`\n+macro on `Poll`, among other things.\n+\n+[RFC 1859]: https://github.com/rust-lang/rfcs/pull/1859\n+\n+Here's an example implementation of the trait:\n+\n+```rust,ignore\n+/// A distinct type to represent the `None` value of an `Option`.\n+///\n+/// This enables using the `?` operator on `Option`; it's rarely useful alone.\n+#[derive(Debug)]\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+pub struct None { _priv: () }\n+\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+impl<T> ops::Try for Option<T>  {\n+    type Ok = T;\n+    type Error = None;\n+\n+    fn into_result(self) -> Result<T, None> {\n+        self.ok_or(None { _priv: () })\n+    }\n+\n+    fn from_ok(v: T) -> Self {\n+        Some(v)\n+    }\n+\n+    fn from_error(_: None) -> Self {\n+        None\n+    }\n+}\n+```\n+\n+Note the `Error` associated type here is a new marker.  The `?` operator\n+allows interconversion between different `Try` implementers only when\n+the error type can be converted `Into` the error type of the enclosing\n+function (or catch block).  Having a distinct error type (as opposed to\n+just `()`, or similar) restricts this to where it's semantically meaningful."}, {"sha": "e7d4ec61946869369ef89227b34034d12bce616c", "filename": "src/etc/installer/exe/rust.iss", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fetc%2Finstaller%2Fexe%2Frust.iss", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fetc%2Finstaller%2Fexe%2Frust.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fexe%2Frust.iss?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -46,6 +46,7 @@ Name: gcc; Description: \"Linker and platform libraries\"; Types: full\n Name: docs; Description: \"HTML documentation\"; Types: full\n Name: cargo; Description: \"Cargo, the Rust package manager\"; Types: full\n Name: std; Description: \"The Rust Standard Library\"; Types: full\n+Name: rls; Description: \"RLS, the Rust Language Server\"\n \n [Files]\n Source: \"rustc/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: rust\n@@ -55,6 +56,8 @@ Source: \"rust-mingw/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs;\n Source: \"rust-docs/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: docs\n Source: \"cargo/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: cargo\n Source: \"rust-std/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: std\n+Source: \"rls/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: rls\n+Source: \"rust-analysis/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: rls\n \n [Code]\n const"}, {"sha": "258291cbb72e1e2d9ab4b8dabf78ee8e8d5698df", "filename": "src/etc/installer/msi/rust.wxs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -170,6 +170,8 @@\n                     <Directory Id=\"Docs\" Name=\".\" />\n                     <Directory Id=\"Cargo\" Name=\".\" />\n                     <Directory Id=\"Std\" Name=\".\" />\n+                    <Directory Id=\"Rls\" Name=\".\" />\n+                    <Directory Id=\"Analysis\" Name=\".\" />\n                 </Directory>\n             </Directory>\n \n@@ -273,6 +275,14 @@\n                  <ComponentRef Id=\"PathEnvPerMachine\" />\n                  <ComponentRef Id=\"PathEnvPerUser\" />\n         </Feature>\n+        <Feature Id=\"RLS\"\n+                 Title=\"RLS, the Rust Language Server\"\n+                 Display=\"7\"\n+                 Level=\"2\"\n+                 AllowAdvertise=\"no\">\n+                 <ComponentGroupRef Id=\"RlsGroup\" />\n+                 <ComponentGroupRef Id=\"AnalysisGroup\" />\n+        </Feature>\n \n         <UIRef Id=\"RustUI\" />\n     </Product>"}, {"sha": "f138a1a315489e905d8e14ee7b19f768703ee40f", "filename": "src/etc/installer/pkg/Distribution.xml", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fetc%2Finstaller%2Fpkg%2FDistribution.xml", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Fetc%2Finstaller%2Fpkg%2FDistribution.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fpkg%2FDistribution.xml?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -12,59 +12,70 @@\n     </volume-check>\n     <choices-outline>\n       <line choice=\"install\">\n-\t<line choice=\"rustc\"/>\n-    <line choice=\"rust-std\"/>\n-\t<line choice=\"cargo\"/>\n-\t<line choice=\"rust-docs\"/>\n+      <line choice=\"rustc\"/>\n+      <line choice=\"rust-std\"/>\n+      <line choice=\"cargo\"/>\n+      <line choice=\"rust-docs\"/>\n+      <line choice=\"rls\"/>\n       </line>\n       <line choice=\"uninstall\" />\n     </choices-outline>\n     <!--\n-\tThese 'selected' scripts ensure that install and uninstall can never be selected at\n-\tthe same time. Exectly how they work is pretty mysterious, tied to the unspecified algorithm\n-\tthe installer uses to traverse the options after one is toggled.\n+    These 'selected' scripts ensure that install and uninstall can never be selected at\n+    the same time. Exectly how they work is pretty mysterious, tied to the unspecified algorithm\n+    the installer uses to traverse the options after one is toggled.\n       -->\n     <choice id=\"install\" visible=\"true\"\n-\t    title=\"Install Rust\" description=\"Install the Rust compiler, package manager and documentation.\"\n-\t    customLocation=\"/usr/local\"\n-\t    selected=\"!choices.uninstall.selected\"\n-\t    />\n+        title=\"Install Rust\" description=\"Install the Rust compiler, package manager and documentation.\"\n+        customLocation=\"/usr/local\"\n+        selected=\"!choices.uninstall.selected\"\n+        />\n     <choice id=\"uninstall\" visible=\"true\"\n-\t    title=\"Uninstall Rust\" description=\"Select this option to uninstall an existing Rust installation.\"\n-\t    customLocation=\"/usr/local\"\n-\t    selected=\"!(choices.install.selected || choices.rustc.selected || choices.cargo.selected || choices['rust-docs'].selected)\"\n-\t    start_selected=\"false\"\n-\t    >\n-        <pkg-ref id=\"org.rust-lang.uninstall\" />\n+        title=\"Uninstall Rust\" description=\"Select this option to uninstall an existing Rust installation.\"\n+        customLocation=\"/usr/local\"\n+        selected=\"!(choices.install.selected || choices.rustc.selected || choices.cargo.selected || choices['rust-docs'].selected)\"\n+        start_selected=\"false\"\n+        >\n+        <pkg-ref id=\"org.rust-lang.uninstall\"/>\n     </choice>\n     <choice id=\"rustc\" visible=\"true\"\n-\t    title=\"Compiler\" description=\"rustc, the Rust compiler, and rustdoc, the API documentation tool.\"\n-\t    selected=\"(!choices.uninstall.selected &amp;&amp; choices.rustc.selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n-\t    >\n+        title=\"Compiler\" description=\"rustc, the Rust compiler, and rustdoc, the API documentation tool.\"\n+        selected=\"(!choices.uninstall.selected &amp;&amp; choices.rustc.selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n+        >\n         <pkg-ref id=\"org.rust-lang.rustc\"/>\n     </choice>\n     <choice id=\"cargo\" visible=\"true\"\n-\t    title=\"Cargo\" description=\"cargo, the Rust package manager.\"\n-\t    selected=\"(!choices.uninstall.selected &amp;&amp; choices.cargo.selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n-\t    >\n+        title=\"Cargo\" description=\"cargo, the Rust package manager.\"\n+        selected=\"(!choices.uninstall.selected &amp;&amp; choices.cargo.selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n+        >\n         <pkg-ref id=\"org.rust-lang.cargo\"/>\n     </choice>\n     <choice id=\"rust-std\" visible=\"true\"\n-\t    title=\"Standard Library\" description=\"The Rust standard library.\"\n-\t    selected=\"(!choices.uninstall.selected &amp;&amp; choices['rust-std'].selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n-\t    >\n+        title=\"Standard Library\" description=\"The Rust standard library.\"\n+        selected=\"(!choices.uninstall.selected &amp;&amp; choices['rust-std'].selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n+        >\n         <pkg-ref id=\"org.rust-lang.rust-std\"/>\n     </choice>\n     <choice id=\"rust-docs\" visible=\"true\"\n-\t    title=\"Documentation\" description=\"HTML documentation.\"\n-\t    selected=\"(!choices.uninstall.selected &amp;&amp; choices['rust-docs'].selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n-\t    >\n+        title=\"Documentation\" description=\"HTML documentation.\"\n+        selected=\"(!choices.uninstall.selected &amp;&amp; choices['rust-docs'].selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n+        >\n         <pkg-ref id=\"org.rust-lang.rust-docs\"/>\n     </choice>\n+    <choice id=\"rls\" visible=\"true\"\n+        title=\"RLS\" description=\"RLS, the Rust Language Server\"\n+        selected=\"(!choices.uninstall.selected &amp;&amp; choices['rls'].selected) || (choices.uninstall.selected &amp;&amp; choices.install.selected)\"\n+        start_selected=\"false\"\n+        >\n+        <pkg-ref id=\"org.rust-lang.rls\"/>\n+        <pkg-ref id=\"org.rust-lang.rust-analysis\"/>\n+    </choice>\n     <pkg-ref id=\"org.rust-lang.rustc\" version=\"0\" onConclusion=\"none\">rustc.pkg</pkg-ref>\n     <pkg-ref id=\"org.rust-lang.cargo\" version=\"0\" onConclusion=\"none\">cargo.pkg</pkg-ref>\n     <pkg-ref id=\"org.rust-lang.rust-docs\" version=\"0\" onConclusion=\"none\">rust-docs.pkg</pkg-ref>\n     <pkg-ref id=\"org.rust-lang.rust-std\" version=\"0\" onConclusion=\"none\">rust-std.pkg</pkg-ref>\n+    <pkg-ref id=\"org.rust-lang.rls\" version=\"0\" onConclusion=\"none\">rls.pkg</pkg-ref>\n+    <pkg-ref id=\"org.rust-lang.rust-analysis\" version=\"0\" onConclusion=\"none\">rust-analysis.pkg</pkg-ref>\n     <pkg-ref id=\"org.rust-lang.uninstall\" version=\"0\" onConclusion=\"none\">uninstall.pkg</pkg-ref>\n     <background file=\"rust-logo.png\" mime-type=\"image/png\"\n                 alignment=\"bottomleft\"/>"}, {"sha": "a1de8fe76e2580cb79d2fcf1b166ee8aff237935", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 48, "deletions": 17, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -2918,15 +2918,9 @@ pub trait BoxPlace<Data: ?Sized> : Place<Data> {\n     fn make_place() -> Self;\n }\n \n-/// A trait for types which have success and error states and are meant to work\n-/// with the question mark operator.\n-/// When the `?` operator is used with a value, whether the value is in the\n-/// success or error state is determined by calling `translate`.\n-///\n-/// This trait is **very** experimental, it will probably be iterated on heavily\n-/// before it is stabilised. Implementors should expect change. Users of `?`\n-/// should not rely on any implementations of `Carrier` other than `Result`,\n-/// i.e., you should not expect `?` to continue to work with `Option`, etc.\n+/// This trait has been superseded by the `Try` trait, but must remain\n+/// here as `?` is still lowered to it in stage0 .\n+#[cfg(stage0)]\n #[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n pub trait Carrier {\n     /// The type of the value when computation succeeds.\n@@ -2945,6 +2939,7 @@ pub trait Carrier {\n     fn translate<T>(self) -> T where T: Carrier<Success=Self::Success, Error=Self::Error>;\n }\n \n+#[cfg(stage0)]\n #[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n impl<U, V> Carrier for Result<U, V> {\n     type Success = U;\n@@ -2970,21 +2965,57 @@ impl<U, V> Carrier for Result<U, V> {\n \n struct _DummyErrorType;\n \n-impl Carrier for _DummyErrorType {\n-    type Success = ();\n+impl Try for _DummyErrorType {\n+    type Ok = ();\n     type Error = ();\n \n-    fn from_success(_: ()) -> _DummyErrorType {\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        Ok(())\n+    }\n+\n+    fn from_ok(_: ()) -> _DummyErrorType {\n         _DummyErrorType\n     }\n \n     fn from_error(_: ()) -> _DummyErrorType {\n         _DummyErrorType\n     }\n+}\n \n-    fn translate<T>(self) -> T\n-        where T: Carrier<Success=(), Error=()>\n-    {\n-        T::from_success(())\n-    }\n+/// A trait for customizing the behaviour of the `?` operator.\n+///\n+/// A type implementing `Try` is one that has a canonical way to view it\n+/// in terms of a success/failure dichotomy.  This trait allows both\n+/// extracting those success or failure values from an existing instance and\n+/// creating a new instance from a success or failure value.\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+pub trait Try {\n+    /// The type of this value when viewed as successful.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    type Ok;\n+    /// The type of this value when viewed as failed.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    type Error;\n+\n+    /// Applies the \"?\" operator. A return of `Ok(t)` means that the\n+    /// execution should continue normally, and the result of `?` is the\n+    /// value `t`. A return of `Err(e)` means that execution should branch\n+    /// to the innermost enclosing `catch`, or return from the function.\n+    ///\n+    /// If an `Err(e)` result is returned, the value `e` will be \"wrapped\"\n+    /// in the return type of the enclosing scope (which must itself implement\n+    /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n+    /// is returned, where `X` is the return type of the enclosing function.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error>;\n+\n+    /// Wrap an error value to construct the composite result. For example,\n+    /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn from_error(v: Self::Error) -> Self;\n+\n+    /// Wrap an OK value to construct the composite result. For example,\n+    /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn from_ok(v: Self::Ok) -> Self;\n }"}, {"sha": "df7fff0df927078140f9950e049cadd1265e6297", "filename": "src/libcore/result.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -242,6 +242,7 @@\n \n use fmt;\n use iter::{FromIterator, FusedIterator, TrustedLen};\n+use ops;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n@@ -1108,3 +1109,21 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n         }\n     }\n }\n+\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+impl<T,E> ops::Try for Result<T, E> {\n+    type Ok = T;\n+    type Error = E;\n+\n+    fn into_result(self) -> Self {\n+        self\n+    }\n+\n+    fn from_ok(v: T) -> Self {\n+        Ok(v)\n+    }\n+\n+    fn from_error(v: E) -> Self {\n+        Err(v)\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "2beb40d6b2f1ab34598a52849779be57a9ca4f72", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1871,7 +1871,9 @@ makes a difference in practice.)\n \n E0593: r##\"\n You tried to supply an `Fn`-based type with an incorrect number of arguments\n-than what was expected. Erroneous code example:\n+than what was expected.\n+\n+Erroneous code example:\n \n ```compile_fail,E0593\n fn foo<F: Fn()>(x: F) { }\n@@ -1883,6 +1885,21 @@ fn main() {\n ```\n \"##,\n \n+E0601: r##\"\n+No `main` function was found in a binary crate. To fix this error, just add a\n+`main` function. For example:\n+\n+```\n+fn main() {\n+    // Your program will start here.\n+    println!(\"Hello world!\");\n+}\n+```\n+\n+If you don't know the basics of Rust, you can go look to the Rust Book to get\n+started: https://doc.rust-lang.org/book/\n+\"##,\n+\n }\n \n "}, {"sha": "df82fee80f23c4cb437a82dc6a3ab31b2010a1fb", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -2265,23 +2265,23 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Try(ref sub_expr) => {\n                 // to:\n                 //\n-                // match Carrier::translate(<expr>) {\n+                // match Try::into_result(<expr>) {\n                 //     Ok(val) => #[allow(unreachable_code)] val,\n                 //     Err(err) => #[allow(unreachable_code)]\n                 //                 // If there is an enclosing `catch {...}`\n-                //                 break 'catch_target Carrier::from_error(From::from(err)),\n+                //                 break 'catch_target Try::from_error(From::from(err)),\n                 //                 // Otherwise\n-                //                 return Carrier::from_error(From::from(err)),\n+                //                 return Try::from_error(From::from(err)),\n                 // }\n \n                 let unstable_span = self.allow_internal_unstable(\"?\", e.span);\n \n-                // Carrier::translate(<expr>)\n+                // Try::into_result(<expr>)\n                 let discr = {\n                     // expand <expr>\n                     let sub_expr = self.lower_expr(sub_expr);\n \n-                    let path = &[\"ops\", \"Carrier\", \"translate\"];\n+                    let path = &[\"ops\", \"Try\", \"into_result\"];\n                     let path = P(self.expr_std_path(unstable_span, path, ThinVec::new()));\n                     P(self.expr_call(e.span, path, hir_vec![sub_expr]))\n                 };\n@@ -2327,7 +2327,7 @@ impl<'a> LoweringContext<'a> {\n                         self.expr_call(e.span, from, hir_vec![err_expr])\n                     };\n                     let from_err_expr = {\n-                        let path = &[\"ops\", \"Carrier\", \"from_error\"];\n+                        let path = &[\"ops\", \"Try\", \"from_error\"];\n                         let from_err = P(self.expr_std_path(unstable_span, path,\n                                                             ThinVec::new()));\n                         P(self.expr_call(e.span, from_err, hir_vec![from_expr]))"}, {"sha": "b43c516f317f2e746889631ceae4516bd4eb5760", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx, A, B> HashStable<StableHashingContext<'a, 'tcx>> for ty::Outlives\n }\n \n impl_stable_hash_for!(struct ty::ProjectionPredicate<'tcx> { projection_ty, ty });\n-impl_stable_hash_for!(struct ty::ProjectionTy<'tcx> { trait_ref, item_name });\n+impl_stable_hash_for!(struct ty::ProjectionTy<'tcx> { trait_ref, item_def_id });\n \n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::Predicate<'tcx> {"}, {"sha": "acc1a397b456041a6523ad5360f9b64b16f3a8ef", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1542,7 +1542,8 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n     pub fn to_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n-            GenericKind::Projection(ref p) => tcx.mk_projection(p.trait_ref.clone(), p.item_name),\n+            GenericKind::Projection(ref p) => tcx.mk_projection(\n+                p.trait_ref.clone(), p.item_name(tcx)),\n         }\n     }\n }"}, {"sha": "736c3b289e198dcf5d626b4876437ff53680a31e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -130,68 +130,18 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n \n-declare_lint! {\n-    pub INACCESSIBLE_EXTERN_CRATE,\n-    Deny,\n-    \"use of inaccessible extern crate erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub INVALID_TYPE_PARAM_DEFAULT,\n     Deny,\n     \"type parameter default erroneously allowed in invalid location\"\n }\n \n-declare_lint! {\n-    pub ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n-    Deny,\n-    \"floating-point constants cannot be used in patterns\"\n-}\n-\n-declare_lint! {\n-    pub ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n-    Deny,\n-    \"constants of struct or enum type can only be used in a pattern if \\\n-     the struct or enum has `#[derive(PartialEq, Eq)]`\"\n-}\n-\n-declare_lint! {\n-    pub RAW_POINTER_DERIVE,\n-    Warn,\n-    \"uses of #[derive] with raw pointers are rarely correct\"\n-}\n-\n-declare_lint! {\n-    pub HR_LIFETIME_IN_ASSOC_TYPE,\n-    Deny,\n-    \"binding for associated type references higher-ranked lifetime \\\n-     that does not appear in the trait input types\"\n-}\n-\n-declare_lint! {\n-    pub OVERLAPPING_INHERENT_IMPLS,\n-    Deny,\n-    \"two overlapping inherent impls define an item with the same name were erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub RENAMED_AND_REMOVED_LINTS,\n     Warn,\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    pub SUPER_OR_SELF_IN_GLOBAL_PATH,\n-    Deny,\n-    \"detects super or self keywords at the beginning of global path\"\n-}\n-\n-declare_lint! {\n-    pub LIFETIME_UNDERSCORE,\n-    Deny,\n-    \"lifetimes or labels named `'_` were erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n     Warn,\n@@ -280,17 +230,9 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_CASTS,\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n-            INACCESSIBLE_EXTERN_CRATE,\n             INVALID_TYPE_PARAM_DEFAULT,\n-            ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n-            ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n             CONST_ERR,\n-            RAW_POINTER_DERIVE,\n-            OVERLAPPING_INHERENT_IMPLS,\n             RENAMED_AND_REMOVED_LINTS,\n-            SUPER_OR_SELF_IN_GLOBAL_PATH,\n-            HR_LIFETIME_IN_ASSOC_TYPE,\n-            LIFETIME_UNDERSCORE,\n             RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,"}, {"sha": "b26cccf5f161746a3883fa84ba8ddd240de192ef", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -162,7 +162,7 @@ fn configure_main(this: &mut EntryContext) {\n         this.session.entry_type.set(Some(config::EntryMain));\n     } else {\n         // No main function\n-        let mut err = this.session.struct_err(\"main function not found\");\n+        let mut err = struct_err!(this.session, E0601, \"main function not found\");\n         if !this.non_main_fns.is_empty() {\n             // There were some functions named 'main' though. Try to give the user a hint.\n             err.note(\"the main function must be defined at the crate level \\"}, {"sha": "827fa72f034045e90701bc34d8679a4745c7c35c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -158,14 +158,14 @@ impl Session {\n     pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,\n                                                     sp: S,\n                                                     msg: &str)\n-                                                    -> DiagnosticBuilder<'a>  {\n+                                                    -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                               sp: S,\n                                                               msg: &str,\n                                                               code: &str)\n-                                                              -> DiagnosticBuilder<'a>  {\n+                                                              -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  {\n@@ -174,30 +174,34 @@ impl Session {\n     pub fn struct_span_err<'a, S: Into<MultiSpan>>(&'a self,\n                                                    sp: S,\n                                                    msg: &str)\n-                                                   -> DiagnosticBuilder<'a>  {\n+                                                   -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                              sp: S,\n                                                              msg: &str,\n                                                              code: &str)\n-                                                             -> DiagnosticBuilder<'a>  {\n+                                                             -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n-    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  {\n+    // FIXME: This method should be removed (every error should have an associated error code).\n+    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_err(msg)\n     }\n+    pub fn struct_err_with_code<'a>(&'a self, msg: &str, code: &str) -> DiagnosticBuilder<'a> {\n+        self.diagnostic().struct_err_with_code(msg, code)\n+    }\n     pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n                                                      sp: S,\n                                                      msg: &str)\n-                                                     -> DiagnosticBuilder<'a>  {\n+                                                     -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                                sp: S,\n                                                                msg: &str,\n                                                                code: &str)\n-                                                               -> DiagnosticBuilder<'a>  {\n+                                                               -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n     pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  {"}, {"sha": "f5672ffbdc53498dc5eec9c959db753569d254ce", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -355,7 +355,7 @@ pub fn normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n \n             let tcx = selcx.infcx().tcx;\n             let def_id = tcx.associated_items(projection_ty.trait_ref.def_id).find(|i|\n-                i.name == projection_ty.item_name && i.kind == ty::AssociatedKind::Type\n+                i.name == projection_ty.item_name(tcx) && i.kind == ty::AssociatedKind::Type\n             ).map(|i| i.def_id).unwrap();\n             let ty_var = selcx.infcx().next_ty_var(\n                 TypeVariableOrigin::NormalizeProjectionType(tcx.def_span(def_id)));\n@@ -436,7 +436,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n             //\n             // ```\n             // let ty = selcx.tcx().mk_projection(projection_ty.trait_ref,\n-            //                                    projection_ty.item_name);\n+            //                                    projection_ty.item_name(tcx);\n             // return Some(NormalizedTy { value: v, obligations: vec![] });\n             // ```\n \n@@ -574,7 +574,7 @@ fn normalize_to_error<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tc\n                                         predicate: trait_ref.to_predicate() };\n     let tcx = selcx.infcx().tcx;\n     let def_id = tcx.associated_items(projection_ty.trait_ref.def_id).find(|i|\n-        i.name == projection_ty.item_name && i.kind == ty::AssociatedKind::Type\n+        i.name == projection_ty.item_name(tcx) && i.kind == ty::AssociatedKind::Type\n     ).map(|i| i.def_id).unwrap();\n     let new_value = selcx.infcx().next_ty_var(\n         TypeVariableOrigin::NormalizeProjectionType(tcx.def_span(def_id)));\n@@ -729,7 +729,7 @@ fn project_type<'cx, 'gcx, 'tcx>(\n             Ok(ProjectedTy::NoProgress(\n                 selcx.tcx().mk_projection(\n                     obligation.predicate.trait_ref.clone(),\n-                    obligation.predicate.item_name)))\n+                    obligation.predicate.item_name(selcx.tcx()))))\n         }\n     }\n }\n@@ -815,7 +815,8 @@ fn assemble_candidates_from_predicates<'cx, 'gcx, 'tcx, I>(\n                predicate);\n         match predicate {\n             ty::Predicate::Projection(ref data) => {\n-                let same_name = data.item_name() == obligation.predicate.item_name;\n+                let tcx = selcx.tcx();\n+                let same_name = data.item_name(tcx) == obligation.predicate.item_name(tcx);\n \n                 let is_match = same_name && infcx.probe(|_| {\n                     let data_poly_trait_ref =\n@@ -902,7 +903,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                 // type.\n                 let node_item = assoc_ty_def(selcx,\n                                              impl_data.impl_def_id,\n-                                             obligation.predicate.item_name);\n+                                             obligation.predicate.item_name(selcx.tcx()));\n \n                 let is_default = if node_item.node.is_from_trait() {\n                     // If true, the impl inherited a `type Foo = Bar`\n@@ -1075,9 +1076,10 @@ fn confirm_object_candidate<'cx, 'gcx, 'tcx>(\n \n         // select only those projections that are actually projecting an\n         // item with the correct name\n+        let tcx = selcx.tcx();\n         let env_predicates = env_predicates.filter_map(|p| match p {\n             ty::Predicate::Projection(data) =>\n-                if data.item_name() == obligation.predicate.item_name {\n+                if data.item_name(tcx) == obligation.predicate.item_name(tcx) {\n                     Some(data)\n                 } else {\n                     None\n@@ -1180,10 +1182,11 @@ fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n                                               flag);\n \n     let predicate = ty::Binder(ty::ProjectionPredicate { // (1) recreate binder here\n-        projection_ty: ty::ProjectionTy {\n-            trait_ref: trait_ref,\n-            item_name: Symbol::intern(FN_OUTPUT_NAME),\n-        },\n+        projection_ty: ty::ProjectionTy::from_ref_and_name(\n+            tcx,\n+            trait_ref,\n+            Symbol::intern(FN_OUTPUT_NAME),\n+        ),\n         ty: ret_type\n     });\n \n@@ -1228,7 +1231,7 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n     let VtableImplData { substs, nested, impl_def_id } = impl_vtable;\n \n     let tcx = selcx.tcx();\n-    let assoc_ty = assoc_ty_def(selcx, impl_def_id, obligation.predicate.item_name);\n+    let assoc_ty = assoc_ty_def(selcx, impl_def_id, obligation.predicate.item_name(tcx));\n \n     let ty = if !assoc_ty.item.defaultness.has_value() {\n         // This means that the impl is missing a definition for the"}, {"sha": "8c801c6fa2b977b31f17f2357f66be8418914141", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1323,7 +1323,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                          item_name: Name)\n         -> Ty<'tcx> {\n             // take a copy of substs so that we own the vectors inside\n-            let inner = ProjectionTy { trait_ref: trait_ref, item_name: item_name };\n+            let inner = ProjectionTy::from_ref_and_name(self, trait_ref, item_name);\n             self.mk_ty(TyProjection(inner))\n         }\n "}, {"sha": "22fcc61953b2b4a838e66c0bec702ef743a7b3f2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1051,8 +1051,8 @@ pub struct ProjectionPredicate<'tcx> {\n pub type PolyProjectionPredicate<'tcx> = Binder<ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {\n-    pub fn item_name(&self) -> Name {\n-        self.0.projection_ty.item_name // safe to skip the binder to access a name\n+    pub fn item_name(&self, tcx: TyCtxt) -> Name {\n+        self.0.projection_ty.item_name(tcx) // safe to skip the binder to access a name\n     }\n }\n "}, {"sha": "d4f06a902eeaa46221b45ead63abfcb74ea69cb0", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -225,12 +225,13 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {\n                            -> RelateResult<'tcx, ty::ProjectionTy<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n-        if a.item_name != b.item_name {\n+        let tcx = relation.tcx();\n+        if a.item_name(tcx) != b.item_name(tcx) {\n             Err(TypeError::ProjectionNameMismatched(\n-                expected_found(relation, &a.item_name, &b.item_name)))\n+                expected_found(relation, &a.item_name(tcx), &b.item_name(tcx))))\n         } else {\n             let trait_ref = relation.relate(&a.trait_ref, &b.trait_ref)?;\n-            Ok(ty::ProjectionTy { trait_ref: trait_ref, item_name: a.item_name })\n+            Ok(ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, a.item_name(tcx)))\n         }\n     }\n }\n@@ -457,7 +458,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         (&ty::TyProjection(ref a_data), &ty::TyProjection(ref b_data)) =>\n         {\n             let projection_ty = relation.relate(a_data, b_data)?;\n-            Ok(tcx.mk_projection(projection_ty.trait_ref, projection_ty.item_name))\n+            Ok(tcx.mk_projection(projection_ty.trait_ref, projection_ty.item_name(tcx)))\n         }\n \n         (&ty::TyAnon(a_def_id, a_substs), &ty::TyAnon(b_def_id, b_substs))"}, {"sha": "c3ca679153759c2a23f4d63b267c8f94e9ee2bd0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -135,10 +135,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n                              -> Option<ty::ProjectionTy<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| {\n-            ty::ProjectionTy {\n-                trait_ref: trait_ref,\n-                item_name: self.item_name\n-            }\n+            ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, self.item_name(tcx))\n         })\n     }\n }\n@@ -771,7 +768,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ProjectionTy {\n             trait_ref: self.trait_ref.fold_with(folder),\n-            item_name: self.item_name,\n+            item_def_id: self.item_def_id,\n         }\n     }\n "}, {"sha": "bbb399434d6ae219c5aa25e068c6e52015110752", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -556,9 +556,34 @@ pub struct ProjectionTy<'tcx> {\n     /// The trait reference `T as Trait<..>`.\n     pub trait_ref: ty::TraitRef<'tcx>,\n \n-    /// The name `N` of the associated type.\n-    pub item_name: Name,\n+    /// The DefId of the TraitItem for the associated type N.\n+    ///\n+    /// Note that this is not the DefId of the TraitRef containing this\n+    /// associated type, which is in tcx.associated_item(item_def_id).container.\n+    pub item_def_id: DefId,\n }\n+\n+impl<'a, 'tcx> ProjectionTy<'tcx> {\n+    /// Construct a ProjectionTy by searching the trait from trait_ref for the\n+    /// associated item named item_name.\n+    pub fn from_ref_and_name(\n+        tcx: TyCtxt, trait_ref: ty::TraitRef<'tcx>, item_name: Name\n+    ) -> ProjectionTy<'tcx> {\n+        let item_def_id = tcx.associated_items(trait_ref.def_id).find(\n+            |item| item.name == item_name).unwrap().def_id;\n+\n+        ProjectionTy {\n+            trait_ref: trait_ref,\n+            item_def_id: item_def_id,\n+        }\n+    }\n+\n+    pub fn item_name(self, tcx: TyCtxt) -> Name {\n+        tcx.associated_item(self.item_def_id).name\n+    }\n+}\n+\n+\n /// Signature of a function type, which I have arbitrarily\n /// decided to use to refer to the input/output types.\n ///\n@@ -871,10 +896,10 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         assert!(!self_ty.has_escaping_regions());\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::ProjectionTy {\n-                trait_ref: self.trait_ref.with_self_ty(tcx, self_ty),\n-                item_name: self.item_name,\n-            },\n+            projection_ty: ty::ProjectionTy::from_ref_and_name(\n+                tcx,\n+                self.trait_ref.with_self_ty(tcx, self_ty),\n+                self.item_name),\n             ty: self.ty,\n         }\n     }"}, {"sha": "ce0f1ed5bb86c884c6dc33cc9efc768eb7bc9ae1", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -691,8 +691,7 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n                 self.hash(p.name.as_str());\n             }\n             TyProjection(ref data) => {\n-                self.def_id(data.trait_ref.def_id);\n-                self.hash(data.item_name.as_str());\n+                self.def_id(data.item_def_id);\n             }\n             TyNever |\n             TyBool |"}, {"sha": "5a1b7393db312562395f68c1ae1d793950c8b4af", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -216,9 +216,11 @@ pub fn parameterized(f: &mut fmt::Formatter,\n \n     for projection in projections {\n         start_or_continue(f, \"<\", \", \")?;\n-        write!(f, \"{}={}\",\n-               projection.projection_ty.item_name,\n-               projection.ty)?;\n+        ty::tls::with(|tcx|\n+            write!(f, \"{}={}\",\n+            projection.projection_ty.item_name(tcx),\n+            projection.ty)\n+        )?;\n     }\n \n     start_or_continue(f, \"\", \">\")?;\n@@ -929,9 +931,10 @@ impl<'tcx> fmt::Display for ty::ProjectionPredicate<'tcx> {\n \n impl<'tcx> fmt::Display for ty::ProjectionTy<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let item_name = ty::tls::with(|tcx| self.item_name(tcx));\n         write!(f, \"{:?}::{}\",\n                self.trait_ref,\n-               self.item_name)\n+               item_name)\n     }\n }\n "}, {"sha": "ef00c9a3278b925d07190053dc7c5fb34b97ee3d", "filename": "src/librustc_back/target/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv5te_unknown_linux_gnueabi.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -25,7 +25,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n-            features: \"+soft-float\".to_string(),\n+            features: \"+soft-float,+strict-align\".to_string(),\n             // No atomic instructions on ARMv5\n             max_atomic_width: Some(0),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "a2e0bb80d23ddf40b78d24ab9eb12b6ed18ae715", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -10,7 +10,6 @@\n \n use eval;\n \n-use rustc::lint;\n use rustc::middle::const_val::{ConstEvalErr, ConstVal};\n use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, TypeVariants, Region};\n@@ -644,27 +643,19 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n         debug!(\"expr={:?} pat_ty={:?} pat_id={}\", expr, pat_ty, pat_id);\n         match pat_ty.sty {\n             ty::TyFloat(_) => {\n-                self.tcx.sess.add_lint(\n-                    lint::builtin::ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n-                    pat_id,\n-                    span,\n-                    format!(\"floating point constants cannot be used in patterns\"));\n+                self.tcx.sess.span_err(span, \"floating point constants cannot be used in patterns\");\n             }\n             ty::TyAdt(adt_def, _) if adt_def.is_union() => {\n                 // Matching on union fields is unsafe, we can't hide it in constants\n                 self.tcx.sess.span_err(span, \"cannot use unions in constant patterns\");\n             }\n             ty::TyAdt(adt_def, _) => {\n                 if !self.tcx.has_attr(adt_def.did, \"structural_match\") {\n-                    self.tcx.sess.add_lint(\n-                        lint::builtin::ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n-                        pat_id,\n-                        span,\n-                        format!(\"to use a constant of type `{}` \\\n-                                 in a pattern, \\\n-                                 `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                self.tcx.item_path_str(adt_def.did),\n-                                self.tcx.item_path_str(adt_def.did)));\n+                    let msg = format!(\"to use a constant of type `{}` in a pattern, \\\n+                                       `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                                      self.tcx.item_path_str(adt_def.did),\n+                                      self.tcx.item_path_str(adt_def.did));\n+                    self.tcx.sess.span_err(span, &msg);\n                 }\n             }\n             _ => { }"}, {"sha": "d1aaaf4ba7b378c7e8dd0f2f9e78cf5b15a525b8", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -345,9 +345,15 @@ impl Handler {\n         result.code(code.to_owned());\n         result\n     }\n+    // FIXME: This method should be removed (every error should have an associated error code).\n     pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new(self, Level::Error, msg)\n     }\n+    pub fn struct_err_with_code<'a>(&'a self, msg: &str, code: &str) -> DiagnosticBuilder<'a> {\n+        let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n+        result.code(code.to_owned());\n+        result\n+    }\n     pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n                                                      sp: S,\n                                                      msg: &str)"}, {"sha": "9870842a28e383b7cf81154869dbbc1e3705a81a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 30, "deletions": 41, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -179,7 +179,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     // - Create a lint defaulting to warn as normal, with ideally the same error\n     //   message you would normally give\n     // - Add a suitable reference, typically an RFC or tracking issue. Go ahead\n-    //   and include the full URL.\n+    //   and include the full URL, sort items in ascending order of issue numbers.\n     // - Later, change lint to error\n     // - Eventually, remove lint\n     store.register_future_incompatible(sess,\n@@ -189,48 +189,16 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(INACCESSIBLE_EXTERN_CRATE),\n-            reference: \"issue #36886 <https://github.com/rust-lang/rust/issues/36886>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n-            reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(SUPER_OR_SELF_IN_GLOBAL_PATH),\n-            reference: \"issue #36888 <https://github.com/rust-lang/rust/issues/36888>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN),\n-            reference: \"issue #36890 <https://github.com/rust-lang/rust/issues/36890>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n-            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n-            reference: \"issue #36891 <https://github.com/rust-lang/rust/issues/36891>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(HR_LIFETIME_IN_ASSOC_TYPE),\n-            reference: \"issue #33685 <https://github.com/rust-lang/rust/issues/33685>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(LIFETIME_UNDERSCORE),\n-            reference: \"issue #36892 <https://github.com/rust-lang/rust/issues/36892>\",\n-        },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n-            reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n+            id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n+            reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n-            reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/35112>\",\n+            reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n-            reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n+            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n+            reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(EXTRA_REQUIREMENT_IN_IMPL),\n@@ -248,18 +216,26 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n+            reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n-            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n+            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n+            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+        }\n         ]);\n \n     // Register renamed and removed lints\n@@ -275,5 +251,18 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"drop_with_repr_extern\", \"drop flags have been removed\");\n     store.register_removed(\"transmute_from_fn_item_types\",\n         \"always cast functions before transmuting them\");\n-    store.register_removed(\"overlapping_inherent_impls\", \"converted into hard error, see #36889\");\n+    store.register_removed(\"hr_lifetime_in_assoc_type\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/33685\");\n+    store.register_removed(\"inaccessible_extern_crate\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36886\");\n+    store.register_removed(\"super_or_self_in_global_path\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36888\");\n+    store.register_removed(\"overlapping_inherent_impls\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36889\");\n+    store.register_removed(\"illegal_floating_point_constant_pattern\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36890\");\n+    store.register_removed(\"illegal_struct_or_enum_constant_pattern\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36891\");\n+    store.register_removed(\"lifetime_underscore\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36892\");\n }"}, {"sha": "7c443a4ac7520d0701df6d7a29f61de18074204a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -36,16 +36,10 @@ impl<'a> AstValidator<'a> {\n         &self.session.parse_sess.span_diagnostic\n     }\n \n-    fn check_label(&self, label: Ident, span: Span, id: NodeId) {\n-        if label.name == keywords::StaticLifetime.name() {\n+    fn check_label(&self, label: Ident, span: Span) {\n+        if label.name == keywords::StaticLifetime.name() || label.name == \"'_\" {\n             self.err_handler().span_err(span, &format!(\"invalid label name `{}`\", label.name));\n         }\n-        if label.name == \"'_\" {\n-            self.session.add_lint(lint::builtin::LIFETIME_UNDERSCORE,\n-                                  id,\n-                                  span,\n-                                  format!(\"invalid label name `{}`\", label.name));\n-        }\n     }\n \n     fn invalid_visibility(&self, vis: &Visibility, span: Span, note: Option<&str>) {\n@@ -104,10 +98,7 @@ impl<'a> AstValidator<'a> {\n impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_lifetime(&mut self, lt: &'a Lifetime) {\n         if lt.ident.name == \"'_\" {\n-            self.session.add_lint(lint::builtin::LIFETIME_UNDERSCORE,\n-                                  lt.id,\n-                                  lt.span,\n-                                  format!(\"invalid lifetime name `{}`\", lt.ident));\n+            self.err_handler().span_err(lt.span, &format!(\"invalid lifetime name `{}`\", lt.ident));\n         }\n \n         visit::walk_lifetime(self, lt)\n@@ -121,7 +112,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ExprKind::ForLoop(.., Some(ident)) |\n             ExprKind::Break(Some(ident), _) |\n             ExprKind::Continue(Some(ident)) => {\n-                self.check_label(ident.node, ident.span, expr.id);\n+                self.check_label(ident.node, ident.span);\n             }\n             _ => {}\n         }\n@@ -169,14 +160,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_ty(self, ty)\n     }\n \n-    fn visit_path(&mut self, path: &'a Path, id: NodeId) {\n+    fn visit_path(&mut self, path: &'a Path, _: NodeId) {\n         if path.segments.len() >= 2 && path.is_global() {\n             let ident = path.segments[1].identifier;\n             if token::Ident(ident).is_path_segment_keyword() {\n-                self.session.add_lint(lint::builtin::SUPER_OR_SELF_IN_GLOBAL_PATH,\n-                                      id,\n-                                      path.span,\n-                                      format!(\"global paths cannot start with `{}`\", ident));\n+                self.err_handler()\n+                    .span_err(path.span, &format!(\"global paths cannot start with `{}`\", ident));\n             }\n         }\n "}, {"sha": "a40c191f7bd29f72aa25b8f77445440062ebc53d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1069,6 +1069,10 @@ impl<'a> NameBinding<'a> {\n             _ => false,\n         }\n     }\n+\n+    fn descr(&self) -> &'static str {\n+        if self.is_extern_crate() { \"extern crate\" } else { self.def().kind_name() }\n+    }\n }\n \n /// Interns the names of the primitive types.\n@@ -3424,18 +3428,7 @@ impl<'a> Resolver<'a> {\n \n         for &PrivacyError(span, name, binding) in &self.privacy_errors {\n             if !reported_spans.insert(span) { continue }\n-            if binding.is_extern_crate() {\n-                // Warn when using an inaccessible extern crate.\n-                let node_id = match binding.kind {\n-                    NameBindingKind::Import { directive, .. } => directive.id,\n-                    _ => unreachable!(),\n-                };\n-                let msg = format!(\"extern crate `{}` is private\", name);\n-                self.session.add_lint(lint::builtin::INACCESSIBLE_EXTERN_CRATE, node_id, span, msg);\n-            } else {\n-                let def = binding.def();\n-                self.session.span_err(span, &format!(\"{} `{}` is private\", def.kind_name(), name));\n-            }\n+            self.session.span_err(span, &format!(\"{} `{}` is private\", binding.descr(), name));\n         }\n     }\n "}, {"sha": "a892f9df6a646dfd6023bd66045de3ac655f65b4", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -723,7 +723,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             let (ns, binding) = reexport_error.unwrap();\n             if ns == TypeNS && binding.is_extern_crate() {\n                 let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n-                                   (error E0364), consider declaring with `pub`\",\n+                                   (error E0365), consider declaring with `pub`\",\n                                    ident);\n                 self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, directive.span, msg);\n             } else if ns == TypeNS {\n@@ -792,8 +792,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.record_def(directive.id, PathResolution::new(module.def().unwrap()));\n     }\n \n-    // Miscellaneous post-processing, including recording reexports, reporting conflicts,\n-    // reporting the PRIVATE_IN_PUBLIC lint, and reporting unresolved imports.\n+    // Miscellaneous post-processing, including recording reexports,\n+    // reporting conflicts, and reporting unresolved imports.\n     fn finalize_resolutions_in(&mut self, module: Module<'b>) {\n         // Since import resolution is finished, globs will not define any more names.\n         *module.globs.borrow_mut() = Vec::new();\n@@ -838,13 +838,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n \n             match binding.kind {\n-                NameBindingKind::Import { binding: orig_binding, directive, .. } => {\n+                NameBindingKind::Import { binding: orig_binding, .. } => {\n                     if ns == TypeNS && orig_binding.is_variant() &&\n                        !orig_binding.vis.is_at_least(binding.vis, &*self) {\n-                        let msg = format!(\"variant `{}` is private, and cannot be reexported \\\n-                                           (error E0364), consider declaring its enum as `pub`\",\n-                                          ident);\n-                        self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, binding.span, msg);\n+                        let msg = format!(\"variant `{}` is private, and cannot be reexported, \\\n+                                           consider declaring its enum as `pub`\", ident);\n+                        self.session.span_err(binding.span, &msg);\n                     }\n                 }\n                 NameBindingKind::Ambiguity { b1, b2, .. }"}, {"sha": "fa74e4d6ffcccfae3d5539c3363a37b4d2e82d77", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -618,7 +618,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             if let ty::TyProjection(proj) = ty.sty {\n                                 for item in self.tcx.associated_items(proj.trait_ref.def_id) {\n                                     if item.kind == ty::AssociatedKind::Type {\n-                                        if item.name == proj.item_name {\n+                                        if item.name == proj.item_name(self.tcx) {\n                                             return Def::AssociatedTy(item.def_id);\n                                         }\n                                     }"}, {"sha": "212461a6d70e20145ecf7a8b91802d907465399d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -553,10 +553,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n             return Ok(trait_ref.map_bound(|trait_ref| {\n                 ty::ProjectionPredicate {\n-                    projection_ty: ty::ProjectionTy {\n-                        trait_ref: trait_ref,\n-                        item_name: binding.item_name,\n-                    },\n+                    projection_ty: ty::ProjectionTy::from_ref_and_name(\n+                        tcx,\n+                        trait_ref,\n+                        binding.item_name,\n+                    ),\n                     ty: binding.ty,\n                 }\n             }));\n@@ -575,10 +576,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {\n-                projection_ty: ty::ProjectionTy {\n-                    trait_ref: trait_ref,\n-                    item_name: binding.item_name,\n-                },\n+                projection_ty: ty::ProjectionTy::from_ref_and_name(\n+                    tcx,\n+                    trait_ref,\n+                    binding.item_name,\n+                ),\n                 ty: binding.ty,\n             }\n         }))\n@@ -652,7 +654,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let p = b.projection_ty;\n                 ty::ExistentialProjection {\n                     trait_ref: self.trait_ref_to_existential(p.trait_ref),\n-                    item_name: p.item_name,\n+                    item_name: p.item_name(tcx),\n                     ty: b.ty\n                 }\n             })\n@@ -679,7 +681,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         for projection_bound in &projection_bounds {\n             let pair = (projection_bound.0.projection_ty.trait_ref.def_id,\n-                        projection_bound.0.projection_ty.item_name);\n+                        projection_bound.0.projection_ty.item_name(tcx));\n             associated_types.remove(&pair);\n         }\n "}, {"sha": "7d3a63263edbf9aad7d6f652a47b246fd4330b7d", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -124,10 +124,11 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n         }\n \n         let normalized = traits::normalize_projection_type(&mut selcx,\n-                                                           ty::ProjectionTy {\n-                                                               trait_ref: trait_ref,\n-                                                               item_name: Symbol::intern(\"Target\"),\n-                                                           },\n+                                                           ty::ProjectionTy::from_ref_and_name(\n+                                                               tcx,\n+                                                               trait_ref,\n+                                                               Symbol::intern(\"Target\"),\n+                                                           ),\n                                                            cause,\n                                                            0);\n "}, {"sha": "3121f4948504eb71dffda0b45a99680996788d11", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -787,6 +787,14 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             diag.emit();\n         }\n \n-        // FIXME(#41323) Check the obligations in the fulfillment context.\n+        // Check that all obligations are satisfied by the implementation's\n+        // version.\n+        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n+            infcx.report_fulfillment_errors(errors);\n+            return;\n+        }\n+\n+        let fcx = FnCtxt::new(&inh, impl_c_node_id);\n+        fcx.regionck_item(impl_c_node_id, impl_c_span, &[]);\n     });\n }"}, {"sha": "fd26ff65661ca366c51a9ff77c4bb7db61c21c9f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1651,8 +1651,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                declared_bounds, projection_ty);\n \n         // see the extensive comment in projection_must_outlive\n-\n-        let ty = self.tcx.mk_projection(projection_ty.trait_ref, projection_ty.item_name);\n+        let item_name = projection_ty.item_name(self.tcx);\n+        let ty = self.tcx.mk_projection(projection_ty.trait_ref, item_name);\n         let recursive_bound = self.recursive_type_bound(span, ty);\n \n         VerifyBound::AnyRegion(declared_bounds).or(recursive_bound)\n@@ -1718,9 +1718,9 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"projection_bounds(projection_ty={:?})\",\n                projection_ty);\n-\n+        let item_name = projection_ty.item_name(self.tcx);\n         let ty = self.tcx.mk_projection(projection_ty.trait_ref.clone(),\n-                                        projection_ty.item_name);\n+                                        item_name);\n \n         // Say we have a projection `<T as SomeTrait<'a>>::SomeType`. We are interested\n         // in looking for a trait definition like:\n@@ -1758,7 +1758,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                     let (outlives, _) =\n                         self.replace_late_bound_regions_with_fresh_var(\n                             span,\n-                            infer::AssocTypeProjection(projection_ty.item_name),\n+                            infer::AssocTypeProjection(projection_ty.item_name(self.tcx)),\n                             &outlives);\n \n                     debug!(\"projection_bounds: outlives={:?} (3)\","}, {"sha": "9464ac83870d92ba946be207c0970467281ebc7d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -955,7 +955,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n             }\n         };\n         Type::QPath {\n-            name: self.item_name.clean(cx),\n+            name: self.item_name(cx.tcx).clean(cx),\n             self_type: box self.trait_ref.self_ty().clean(cx),\n             trait_: box trait_\n         }\n@@ -1487,7 +1487,7 @@ pub struct PolyTrait {\n /// A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\n /// type out of the AST/TyCtxt given one of these, if more information is needed. Most importantly\n /// it does not preserve mutability or boxes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum Type {\n     /// structs/enums/traits (most that'd be an hir::TyPath)\n     ResolvedPath {"}, {"sha": "6111ea073dd1906b92e102615026e5210cda3a9c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 53, "deletions": 153, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -106,16 +106,6 @@ impl<'a, T: fmt::Display> fmt::Display for CommaSep<'a, T> {\n     }\n }\n \n-impl<'a, T: fmt::Debug> fmt::Debug for CommaSep<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        for (i, item) in self.0.iter().enumerate() {\n-            if i != 0 { write!(f, \", \")?; }\n-            fmt::Debug::fmt(item, f)?;\n-        }\n-        Ok(())\n-    }\n-}\n-\n impl<'a> fmt::Display for TyParamBounds<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let &TyParamBounds(bounds) = self;\n@@ -469,8 +459,7 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n /// Used when rendering a `ResolvedPath` structure. This invokes the `path`\n /// rendering function with the necessary arguments for linking to a local path.\n fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n-                 print_all: bool, use_absolute: bool, is_not_debug: bool,\n-                 need_paren: bool) -> fmt::Result {\n+                 print_all: bool, use_absolute: bool) -> fmt::Result {\n     let empty = clean::PathSegment {\n                     name: String::new(),\n                     params: clean::PathParameters::Parenthesized {\n@@ -499,13 +488,9 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n                     } else {\n                         root.push_str(&seg.name);\n                         root.push_str(\"/\");\n-                        if is_not_debug {\n-                            write!(w, \"<a class=\\\"mod\\\" href=\\\"{}index.html\\\">{}</a>::\",\n-                                   root,\n-                                   seg.name)?;\n-                        } else {\n-                            write!(w, \"{}::\", seg.name)?;\n-                        }\n+                        write!(w, \"<a class=\\\"mod\\\" href=\\\"{}index.html\\\">{}</a>::\",\n+                               root,\n+                               seg.name)?;\n                     }\n                 }\n             }\n@@ -517,39 +502,21 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n         }\n     }\n     if w.alternate() {\n-        if is_not_debug {\n-            write!(w, \"{:#}{:#}\", HRef::new(did, &last.name), last.params)?;\n-        } else {\n-            write!(w, \"{:?}{}\", HRef::new(did, &last.name), last.params)?;\n-        }\n+        write!(w, \"{:#}{:#}\", HRef::new(did, &last.name), last.params)?;\n     } else {\n-        if is_not_debug {\n-            let path = if use_absolute {\n-                match href(did) {\n-                    Some((_, _, fqp)) => format!(\"{}::{}\",\n-                                                 fqp[..fqp.len()-1].join(\"::\"),\n-                                                 HRef::new(did, fqp.last()\n-                                                                   .unwrap_or(&String::new()))),\n-                    None => format!(\"{}\", HRef::new(did, &last.name)),\n+        let path = if use_absolute {\n+            match href(did) {\n+                Some((_, _, fqp)) => {\n+                    format!(\"{}::{}\",\n+                            fqp[..fqp.len() - 1].join(\"::\"),\n+                            HRef::new(did, fqp.last().unwrap_or(&String::new())))\n                 }\n-            } else {\n-                format!(\"{}\", HRef::new(did, &last.name))\n-            };\n-            write!(w, \"{}{}{}\", if need_paren { \"(\" } else { \"\" }, path, last.params)?;\n+                None => format!(\"{}\", HRef::new(did, &last.name)),\n+            }\n         } else {\n-            let path = if use_absolute {\n-                match href(did) {\n-                    Some((_, _, fqp)) => format!(\"{:?}::{:?}\",\n-                                                 fqp[..fqp.len()-1].join(\"::\"),\n-                                                 HRef::new(did, fqp.last()\n-                                                                   .unwrap_or(&String::new()))),\n-                    None => format!(\"{:?}\", HRef::new(did, &last.name)),\n-                }\n-            } else {\n-                format!(\"{:?}\", HRef::new(did, &last.name))\n-            };\n-            write!(w, \"{}{}{}\", if need_paren { \"(\" } else { \"\" }, path, last.params)?;\n-        }\n+            format!(\"{}\", HRef::new(did, &last.name))\n+        };\n+        write!(w, \"{}{}\", path, last.params)?;\n     }\n     Ok(())\n }\n@@ -600,17 +567,13 @@ fn primitive_link(f: &mut fmt::Formatter,\n \n /// Helper to render type parameters\n fn tybounds(w: &mut fmt::Formatter,\n-            typarams: &Option<Vec<clean::TyParamBound>>,\n-            need_paren: bool) -> fmt::Result {\n+            typarams: &Option<Vec<clean::TyParamBound>>) -> fmt::Result {\n     match *typarams {\n         Some(ref params) => {\n             for param in params {\n                 write!(w, \" + \")?;\n                 fmt::Display::fmt(param, w)?;\n             }\n-            if need_paren {\n-                write!(w, \")\")?;\n-            }\n             Ok(())\n         }\n         None => Ok(())\n@@ -637,30 +600,18 @@ impl<'a> fmt::Display for HRef<'a> {\n     }\n }\n \n-impl<'a> fmt::Debug for HRef<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.text)\n-    }\n-}\n-\n-fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n-            is_not_debug: bool, is_ref: bool) -> fmt::Result {\n+fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt::Result {\n     match *t {\n         clean::Generic(ref name) => {\n             f.write_str(name)\n         }\n         clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n             // Paths like T::Output and Self::Output should be rendered with all segments\n-            let need_paren = match *typarams {\n-                Some(ref v) => !v.is_empty(),\n-                _ => false,\n-            } && is_ref;\n-            resolved_path(f, did, path, is_generic, use_absolute, is_not_debug, need_paren)?;\n-            tybounds(f, typarams, need_paren)\n+            resolved_path(f, did, path, is_generic, use_absolute)?;\n+            tybounds(f, typarams)\n         }\n         clean::Infer => write!(f, \"_\"),\n-        clean::Primitive(prim) if is_not_debug => primitive_link(f, prim, prim.as_str()),\n-        clean::Primitive(prim) => write!(f, \"{}\", prim.as_str()),\n+        clean::Primitive(prim) => primitive_link(f, prim, prim.as_str()),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n                 write!(f, \"{}{}fn{:#}{:#}\",\n@@ -678,30 +629,26 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n         }\n         clean::Tuple(ref typs) => {\n             match &typs[..] {\n-                &[] if is_not_debug => primitive_link(f, PrimitiveType::Tuple, \"()\"),\n-                &[] => write!(f, \"()\"),\n-                &[ref one] if is_not_debug => {\n+                &[] => primitive_link(f, PrimitiveType::Tuple, \"()\"),\n+                &[ref one] => {\n                     primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                     //carry f.alternate() into this display w/o branching manually\n                     fmt::Display::fmt(one, f)?;\n                     primitive_link(f, PrimitiveType::Tuple, \",)\")\n                 }\n-                &[ref one] => write!(f, \"({:?},)\", one),\n-                many if is_not_debug => {\n+                many => {\n                     primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                     fmt::Display::fmt(&CommaSep(&many), f)?;\n                     primitive_link(f, PrimitiveType::Tuple, \")\")\n                 }\n-                many => write!(f, \"({:?})\", &CommaSep(&many)),\n             }\n         }\n-        clean::Vector(ref t) if is_not_debug => {\n+        clean::Vector(ref t) => {\n             primitive_link(f, PrimitiveType::Slice, \"[\")?;\n             fmt::Display::fmt(t, f)?;\n             primitive_link(f, PrimitiveType::Slice, \"]\")\n         }\n-        clean::Vector(ref t) => write!(f, \"[{:?}]\", t),\n-        clean::FixedVector(ref t, ref s) if is_not_debug => {\n+        clean::FixedVector(ref t, ref s) => {\n             primitive_link(f, PrimitiveType::Array, \"[\")?;\n             fmt::Display::fmt(t, f)?;\n             if f.alternate() {\n@@ -712,17 +659,10 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                                &format!(\"; {}]\", Escape(s)))\n             }\n         }\n-        clean::FixedVector(ref t, ref s) => {\n-            if f.alternate() {\n-                write!(f, \"[{:?}; {}]\", t, s)\n-            } else {\n-                write!(f, \"[{:?}; {}]\", t, Escape(s))\n-            }\n-        }\n         clean::Never => f.write_str(\"!\"),\n         clean::RawPointer(m, ref t) => {\n             match **t {\n-                clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} if is_not_debug => {\n+                clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n                     if f.alternate() {\n                         primitive_link(f, clean::PrimitiveType::RawPointer,\n                                        &format!(\"*{}{:#}\", RawMutableSpace(m), t))\n@@ -731,21 +671,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                                        &format!(\"*{}{}\", RawMutableSpace(m), t))\n                     }\n                 }\n-                clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n-                    if f.alternate() {\n-                        write!(f, \"*{}{:#?}\", RawMutableSpace(m), t)\n-                    } else {\n-                        write!(f, \"*{}{:?}\", RawMutableSpace(m), t)\n-                    }\n-                }\n-                _ if is_not_debug => {\n+                _ => {\n                     primitive_link(f, clean::PrimitiveType::RawPointer,\n                                    &format!(\"*{}\", RawMutableSpace(m)))?;\n                     fmt::Display::fmt(t, f)\n                 }\n-                _ => {\n-                    write!(f, \"*{}{:?}\", RawMutableSpace(m), t)\n-                }\n             }\n         }\n         clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n@@ -757,7 +687,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n             match **ty {\n                 clean::Vector(ref bt) => { // BorrowedRef{ ... Vector(T) } is &[T]\n                     match **bt {\n-                        clean::Generic(_) if is_not_debug => {\n+                        clean::Generic(_) => {\n                             if f.alternate() {\n                                 primitive_link(f, PrimitiveType::Slice,\n                                     &format!(\"&{}{}[{:#}]\", lt, m, **bt))\n@@ -766,14 +696,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                                     &format!(\"&amp;{}{}[{}]\", lt, m, **bt))\n                             }\n                         }\n-                        clean::Generic(_) => {\n-                            if f.alternate() {\n-                                write!(f, \"&{}{}[{:#?}]\", lt, m, **bt)\n-                            } else {\n-                                write!(f, \"&{}{}[{:?}]\", lt, m, **bt)\n-                            }\n-                        }\n-                        _ if is_not_debug => {\n+                        _ => {\n                             if f.alternate() {\n                                 primitive_link(f, PrimitiveType::Slice,\n                                                &format!(\"&{}{}[\", lt, m))?;\n@@ -785,26 +708,25 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                             }\n                             primitive_link(f, PrimitiveType::Slice, \"]\")\n                         }\n-                        _ => {\n-                            if f.alternate() {\n-                                write!(f, \"&{}{}[{:#?}]\", lt, m, **bt)\n-                            } else {\n-                                write!(f, \"&{}{}[{:?}]\", lt, m, **bt)\n-                            }\n-                        }\n                     }\n                 }\n+                clean::ResolvedPath { typarams: Some(ref v), .. } if !v.is_empty() => {\n+                    if f.alternate() {\n+                        write!(f, \"&{}{}\", lt, m)?;\n+                    } else {\n+                        write!(f, \"&amp;{}{}\", lt, m)?;\n+                    }\n+                    write!(f, \"(\")?;\n+                    fmt_type(&ty, f, use_absolute)?;\n+                    write!(f, \")\")\n+                }\n                 _ => {\n                     if f.alternate() {\n                         write!(f, \"&{}{}\", lt, m)?;\n-                        fmt_type(&ty, f, use_absolute, is_not_debug, true)\n+                        fmt_type(&ty, f, use_absolute)\n                     } else {\n-                        if is_not_debug {\n-                            write!(f, \"&amp;{}{}\", lt, m)?;\n-                        } else {\n-                            write!(f, \"&{}{}\", lt, m)?;\n-                        }\n-                        fmt_type(&ty, f, use_absolute, is_not_debug, true)\n+                        write!(f, \"&amp;{}{}\", lt, m)?;\n+                        fmt_type(&ty, f, use_absolute)\n                     }\n                 }\n             }\n@@ -833,32 +755,16 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                 _ => true,\n             };\n             if f.alternate() {\n-                if is_not_debug {\n-                    if should_show_cast {\n-                        write!(f, \"<{:#} as {:#}>::\", self_type, trait_)?\n-                    } else {\n-                        write!(f, \"{:#}::\", self_type)?\n-                    }\n+                if should_show_cast {\n+                    write!(f, \"<{:#} as {:#}>::\", self_type, trait_)?\n                 } else {\n-                    if should_show_cast {\n-                        write!(f, \"<{:#?} as {:#?}>::\", self_type, trait_)?\n-                    } else {\n-                        write!(f, \"{:#?}::\", self_type)?\n-                    }\n+                    write!(f, \"{:#}::\", self_type)?\n                 }\n             } else {\n-                if is_not_debug {\n-                    if should_show_cast {\n-                        write!(f, \"&lt;{} as {}&gt;::\", self_type, trait_)?\n-                    } else {\n-                        write!(f, \"{}::\", self_type)?\n-                    }\n+                if should_show_cast {\n+                    write!(f, \"&lt;{} as {}&gt;::\", self_type, trait_)?\n                 } else {\n-                    if should_show_cast {\n-                        write!(f, \"<{:?} as {:?}>::\", self_type, trait_)?\n-                    } else {\n-                        write!(f, \"{:?}::\", self_type)?\n-                    }\n+                    write!(f, \"{}::\", self_type)?\n                 }\n             };\n             match *trait_ {\n@@ -874,7 +780,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                 //        look at).\n                 box clean::ResolvedPath { did, ref typarams, .. } => {\n                     let path = clean::Path::singleton(name.clone());\n-                    resolved_path(f, did, &path, true, use_absolute, is_not_debug, false)?;\n+                    resolved_path(f, did, &path, true, use_absolute)?;\n \n                     // FIXME: `typarams` are not rendered, and this seems bad?\n                     drop(typarams);\n@@ -893,13 +799,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n \n impl fmt::Display for clean::Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt_type(self, f, false, true, false)\n-    }\n-}\n-\n-impl fmt::Debug for clean::Type {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt_type(self, f, false, false, false)\n+        fmt_type(self, f, false)\n     }\n }\n \n@@ -933,7 +833,7 @@ fn fmt_impl(i: &clean::Impl,\n         write!(f, \" for \")?;\n     }\n \n-    fmt_type(&i.for_, f, use_absolute, true, false)?;\n+    fmt_type(&i.for_, f, use_absolute)?;\n \n     fmt::Display::fmt(&WhereClause { gens: &i.generics, indent: 0, end_newline: true }, f)?;\n     Ok(())\n@@ -1139,7 +1039,7 @@ impl fmt::Display for clean::Import {\n impl fmt::Display for clean::ImportSource {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.did {\n-            Some(did) => resolved_path(f, did, &self.path, true, false, true, false),\n+            Some(did) => resolved_path(f, did, &self.path, true, false),\n             _ => {\n                 for (i, seg) in self.path.segments.iter().enumerate() {\n                     if i > 0 {"}, {"sha": "a588460d467d2cc6597acfc5214b90e0eea6708c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1662,9 +1662,9 @@ fn md_render_assoc_item(item: &clean::Item) -> String {\n     match item.inner {\n         clean::AssociatedConstItem(ref ty, ref default) => {\n             if let Some(default) = default.as_ref() {\n-                format!(\"```\\n{}: {:?} = {}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty, default)\n+                format!(\"```\\n{}: {:#} = {}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty, default)\n             } else {\n-                format!(\"```\\n{}: {:?}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty)\n+                format!(\"```\\n{}: {:#}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty)\n             }\n         }\n         _ => String::new(),"}, {"sha": "744868e2e23966025da9e1eb94dd5f9a92b106a1", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1252,14 +1252,43 @@ impl<T> Receiver<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Successfully receiving value before encountering timeout:\n+    ///\n+    /// ```no_run\n+    /// use std::thread;\n+    /// use std::time::Duration;\n+    /// use std::sync::mpsc;\n+    ///\n+    /// let (send, recv) = mpsc::channel();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     send.send('a').unwrap();\n+    /// });\n+    ///\n+    /// assert_eq!(\n+    ///     recv.recv_timeout(Duration::from_millis(400)),\n+    ///     Ok('a')\n+    /// );\n+    /// ```\n+    ///\n+    /// Receiving an error upon reaching timeout:\n+    ///\n     /// ```no_run\n-    /// use std::sync::mpsc::{self, RecvTimeoutError};\n+    /// use std::thread;\n     /// use std::time::Duration;\n+    /// use std::sync::mpsc;\n+    ///\n+    /// let (send, recv) = mpsc::channel();\n     ///\n-    /// let (send, recv) = mpsc::channel::<()>();\n+    /// thread::spawn(move || {\n+    ///     thread::sleep(Duration::from_millis(800));\n+    ///     send.send('a').unwrap();\n+    /// });\n     ///\n-    /// let timeout = Duration::from_millis(100);\n-    /// assert_eq!(Err(RecvTimeoutError::Timeout), recv.recv_timeout(timeout));\n+    /// assert_eq!(\n+    ///     recv.recv_timeout(Duration::from_millis(400)),\n+    ///     Err(mpsc::RecvTimeoutError::Timeout)\n+    /// );\n     /// ```\n     #[stable(feature = \"mpsc_recv_timeout\", since = \"1.12.0\")]\n     pub fn recv_timeout(&self, timeout: Duration) -> Result<T, RecvTimeoutError> {"}, {"sha": "13016d72127eabd3ad511892e22c54ef72c66aa4", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -38,6 +38,14 @@ macro_rules! span_warn {\n     })\n }\n \n+#[macro_export]\n+macro_rules! struct_err {\n+    ($session:expr, $code:ident, $($message:tt)*) => ({\n+        __diagnostic_used!($code);\n+        $session.struct_err_with_code(&format!($($message)*), stringify!($code))\n+    })\n+}\n+\n #[macro_export]\n macro_rules! span_err_or_warn {\n     ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({"}, {"sha": "a0d1785c6ff14a45f5d0d7e479200f63740a5259", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -231,20 +231,12 @@ fn mk_reexport_mod(cx: &mut TestCtxt,\n                    -> (P<ast::Item>, Ident) {\n     let super_ = Ident::from_str(\"super\");\n \n-    // Generate imports with `#[allow(private_in_public)]` to work around issue #36768.\n-    let allow_private_in_public = cx.ext_cx.attribute(DUMMY_SP, cx.ext_cx.meta_list(\n-        DUMMY_SP,\n-        Symbol::intern(\"allow\"),\n-        vec![cx.ext_cx.meta_list_item_word(DUMMY_SP, Symbol::intern(\"private_in_public\"))],\n-    ));\n     let items = tests.into_iter().map(|r| {\n         cx.ext_cx.item_use_simple(DUMMY_SP, ast::Visibility::Public,\n                                   cx.ext_cx.path(DUMMY_SP, vec![super_, r]))\n-            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     }).chain(tested_submods.into_iter().map(|(r, sym)| {\n         let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n         cx.ext_cx.item_use_simple_(DUMMY_SP, ast::Visibility::Public, r, path)\n-            .map_attrs(|_| vec![allow_private_in_public.clone()])\n     })).collect();\n \n     let reexport_mod = ast::Mod {"}, {"sha": "90afe8d7336a7e41e0e2141488a59b3b8a0d82ea", "filename": "src/test/compile-fail/associated-const-generic-obligations.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-const-generic-obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-const-generic-obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-generic-obligations.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    type Out: Sized;\n+}\n+\n+impl Foo for String {\n+    type Out = String;\n+}\n+\n+trait Bar: Foo {\n+    const FROM: Self::Out;\n+}\n+\n+impl<T: Foo> Bar for T {\n+    const FROM: &'static str = \"foo\";\n+    //~^ ERROR the trait bound `T: Foo` is not satisfied [E0277]\n+}\n+\n+fn main() {}"}, {"sha": "834f346069418a76f3a08fa919ffa04b8d5b49e7", "filename": "src/test/compile-fail/associated-const-impl-wrong-lifetime.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-lifetime.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+trait Foo {\n+    const NAME: &'static str;\n+}\n+\n+\n+impl<'a> Foo for &'a () {\n+//~^ NOTE the lifetime 'a as defined\n+    const NAME: &'a str = \"unit\";\n+    //~^ ERROR mismatched types [E0308]\n+    //~| NOTE lifetime mismatch\n+    //~| NOTE expected type `&'static str`\n+    //~| NOTE ...does not necessarily outlive the static lifetime\n+}\n+\n+fn main() {}"}, {"sha": "9ba5045f2a0539ac72879d757b40d6cb3e9e2a9f", "filename": "src/test/compile-fail/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n-#![allow(hr_lifetime_in_assoc_type)]\n \n trait Foo<'a> {\n     type Item;"}, {"sha": "b9b1317cef50f8707aeb14385e4147a4a62f281e", "filename": "src/test/compile-fail/associated-types/bound-lifetime-in-return-only.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-in-return-only.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -13,7 +13,6 @@\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n-#![deny(hr_lifetime_in_assoc_type)]\n \n trait Foo {\n     type Item;"}, {"sha": "6bb88e409105a4e8ddbe7d402b43e0e70d7b2250", "filename": "src/test/compile-fail/extern-crate-visibility.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -8,21 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused)]\n-\n mod foo {\n     extern crate core;\n }\n \n // Check that private crates can be used from outside their modules, albeit with warnings\n-use foo::core; //~ WARN extern crate `core` is private\n-//~^ WARN this was previously accepted by the compiler but is being phased out\n use foo::core::cell; //~ ERROR extern crate `core` is private\n-//~^ WARN this was previously accepted by the compiler but is being phased out\n \n fn f() {\n     foo::core::cell::Cell::new(0); //~ ERROR extern crate `core` is private\n-    //~^ WARN this was previously accepted by the compiler but is being phased out\n \n     use foo::*;\n     mod core {} // Check that private crates are not glob imported"}, {"sha": "e6a39f95e660da73d058e05d3b3211aee7ce0e7d", "filename": "src/test/compile-fail/future-incompatible-lint-group.rs", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Ffuture-incompatible-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Ffuture-incompatible-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffuture-incompatible-lint-group.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,18 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(private_in_public)]\n+#![deny(future_incompatible)]\n \n-mod foo {\n-    pub mod bar {\n-        extern crate core;\n-    }\n+trait Tr {\n+    fn f(u8) {} //~ ERROR use of deprecated anonymous parameter\n+                //~^ WARN this was previously accepted\n }\n \n-mod baz {\n-    pub use foo::bar::core;\n-}\n-\n-fn main() {\n-    baz::core::cell::Cell::new(0u32);\n-}\n+fn main() {}", "previous_filename": "src/test/run-pass/issue-37020.rs"}, {"sha": "3f5f7bb3a53ea95ce5235b865235b7e066b4982e", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -13,7 +13,7 @@ use std::marker;\n struct Foo<A, B, C = (A, B)>(\n     marker::PhantomData<(A,B,C)>);\n \n-impl<A, B, C = (A, B)> Foo<A, B, C> {\n+impl<A, B, C> Foo<A, B, C> {\n     fn new() -> Foo<A, B, C> {Foo(marker::PhantomData)}\n }\n "}, {"sha": "31411992089655f71bf3997107272ca283663ba2", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -15,7 +15,7 @@ struct Heap;\n struct Vec<T, A = Heap>(\n     marker::PhantomData<(T,A)>);\n \n-impl<T, A = Heap> Vec<T, A> {\n+impl<T, A> Vec<T, A> {\n     fn new() -> Vec<T, A> {Vec(marker::PhantomData)}\n }\n "}, {"sha": "f829d4645a0896d4bd9ad321d77e273c51a82332", "filename": "src/test/compile-fail/issue-1920-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -11,7 +11,7 @@\n //! Test that absolute path names are correct when a crate is not linked into the root namespace\n \n mod foo {\n-    extern crate core;\n+    pub extern crate core;\n }\n \n fn assert_clone<T>() where T : Clone { }"}, {"sha": "2f5da907b95f6712e1991852e3c3b19742e5f108", "filename": "src/test/compile-fail/issue-1920-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -11,7 +11,7 @@\n //! Test that when a crate is linked multiple times that the shortest absolute path name is used\n \n mod foo {\n-    extern crate core;\n+    pub extern crate core;\n }\n \n extern crate core;"}, {"sha": "2a97945f266487aac47eec09ce0dbaa9c7e41936", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -19,13 +19,11 @@ fn main() {\n     let x = NAN;\n     match x {\n         NAN => {}, //~ ERROR floating point constants cannot be used\n-                   //~| WARNING hard error\n         _ => {},\n     };\n \n     match [x, 1.0] {\n         [NAN, _] => {}, //~ ERROR floating point constants cannot be used\n-                        //~| WARNING hard error\n         _ => {},\n     };\n }"}, {"sha": "5b518a4931da8131626ed3e221c4c6309a740488", "filename": "src/test/compile-fail/lifetime-underscore.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -9,17 +9,13 @@\n // except according to those terms.\n \n fn _f<'_>() //~ ERROR invalid lifetime name `'_`\n-//~^ WARN this was previously accepted\n     -> &'_ u8 //~ ERROR invalid lifetime name `'_`\n-    //~^ WARN this was previously accepted\n {\n     panic!();\n }\n \n fn main() {\n     '_: loop { //~ ERROR invalid label name `'_`\n-    //~^ WARN this was previously accepted\n         break '_ //~ ERROR invalid label name `'_`\n-        //~^ WARN this was previously accepted\n     }\n }"}, {"sha": "70e148627c47e673610448a712822b268521b95a", "filename": "src/test/compile-fail/match-argm-statics-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-argm-statics-2.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -10,8 +10,10 @@\n \n use self::Direction::{North, East, South, West};\n \n+#[derive(PartialEq, Eq)]\n struct NewBool(bool);\n \n+#[derive(PartialEq, Eq)]\n enum Direction {\n     North,\n     East,"}, {"sha": "21d90dfea4b6c722772c59b8332da1ec4b3703b8", "filename": "src/test/compile-fail/privacy/restricted/struct-literal-field.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(private_in_public)]\n #![allow(warnings)]\n \n mod foo {"}, {"sha": "2e065ac051b20a81dce6f2f475a508959ae9a38a", "filename": "src/test/compile-fail/privacy/restricted/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:pub_restricted.rs\n \n-#![deny(private_in_public)]\n #![allow(warnings)]\n extern crate pub_restricted;\n "}, {"sha": "fd92300cd1526e7b0440776d2de117792acf5c0f", "filename": "src/test/compile-fail/private-in-public-lint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -18,8 +18,6 @@ mod m1 {\n }\n \n mod m2 {\n-    #![deny(future_incompatible)]\n-\n     pub struct Pub;\n     struct Priv;\n "}, {"sha": "c77a7532e34a281ac418c6a2e1464cc551900b2b", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "renamed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -8,31 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(private_in_public)]\n-#![allow(dead_code)]\n-\n-extern crate core;\n-pub use core as reexported_core; //~ ERROR extern crate `core` is private, and cannot be reexported\n-//~^ WARNING hard error\n-\n mod m1 {\n     pub use ::E::V; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n mod m2 {\n     pub use ::E::{V}; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n mod m3 {\n     pub use ::E::V::{self}; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n mod m4 {\n     pub use ::E::*; //~ ERROR variant `V` is private, and cannot be reexported\n-    //~^ WARNING hard error\n }\n \n enum E { V }", "previous_filename": "src/test/compile-fail/private-variant-and-crate-reexport.rs"}, {"sha": "185da379694bcf48fc386bb343515d8594f1cabf", "filename": "src/test/compile-fail/pub-reexport-priv-extern-crate.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-reexport-priv-extern-crate.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+#![deny(private_in_public)]\n+\n+extern crate core;\n+pub use core as reexported_core; //~ ERROR `core` is private, and cannot be reexported\n+                                 //~^ WARN this was previously accepted\n+\n+mod foo1 {\n+    extern crate core;\n+}\n+\n+mod foo2 {\n+    use foo1::core; //~ ERROR `core` is private, and cannot be reexported\n+                    //~^ WARN this was previously accepted\n+    pub mod bar {\n+        extern crate core;\n+    }\n+}\n+\n+mod baz {\n+    pub use foo2::bar::core; //~ ERROR `core` is private, and cannot be reexported\n+                             //~^ WARN this was previously accepted\n+}\n+\n+fn main() {}"}, {"sha": "55ae37404a9fa11d6b1bba7a43ed6cd052109fe8", "filename": "src/test/compile-fail/resolve-self-in-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -17,7 +17,6 @@ trait Tr<T = u8> {\n \n impl Tr<Self> for S {} // OK\n impl<T: Tr<Self>> Tr<T> for S {} // OK\n-impl<T = Self> Tr<T> for S {} // OK\n impl Tr for S where Self: Copy {} // OK\n impl Tr for S where S<Self>: Copy {} // OK\n impl Tr for S where Self::A: Copy {} // OK"}, {"sha": "f729220eabbc36c9a9ff172ffaa62ef568524c19", "filename": "src/test/compile-fail/rfc1445/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1445%2Ffeature-gate.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -16,8 +16,7 @@\n \n // gate-test-structural_match\n \n-#![allow(dead_code)]\n-#![deny(future_incompatible)]\n+#![allow(unused)]\n #![feature(rustc_attrs)]\n #![cfg_attr(with_gate, feature(structural_match))]\n "}, {"sha": "679be9ce219fe548a9954e9beacf51d58fda3984", "filename": "src/test/compile-fail/rfc1445/match-forbidden-without-eq.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-forbidden-without-eq.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-#![deny(future_incompatible)]\n-\n use std::f32;\n \n #[derive(PartialEq)]\n@@ -25,15 +22,13 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARNING will become a hard error\n         _ => { }\n     }\n \n     let x = 0.0;\n     match x {\n         f32::INFINITY => { }\n         //~^ ERROR floating point constants cannot be used in patterns\n-        //~| WARNING will become a hard error\n         _ => { }\n     }\n }"}, {"sha": "e02f9153e7eadc673d2d10edf78724e7ba5eab12", "filename": "src/test/compile-fail/rfc1445/match-requires-both-partialeq-and-eq.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-#![deny(future_incompatible)]\n-\n #[derive(Eq)]\n struct Foo {\n     x: u32\n@@ -29,7 +26,6 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| WARNING will become a hard error\n         _ => { }\n     }\n }"}, {"sha": "c7a1197372dee50eb5645c02590933768594d8d3", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -10,16 +10,16 @@\n \n // gate-test-default_type_parameter_fallback\n \n-#![deny(future_incompatible)]\n-#![allow(dead_code)]\n+#![deny(invalid_type_param_default)]\n+#![allow(unused)]\n \n fn avg<T=i32>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| WARNING hard error\n+//~| WARN this was previously accepted\n \n struct S<T>(T);\n impl<T=i32> S<T> {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| WARNING hard error\n+//~| WARN this was previously accepted\n \n fn main() {}"}, {"sha": "4162e037cf32e4ae543620581e65d03c8f26011e", "filename": "src/test/compile-fail/use-super-global-path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -15,11 +15,9 @@ struct Z;\n \n mod foo {\n     use ::super::{S, Z}; //~ ERROR global paths cannot start with `super`\n-    //~^ WARN this was previously accepted by the compiler but is being phased out\n \n     pub fn g() {\n         use ::super::main; //~ ERROR global paths cannot start with `super`\n-        //~^ WARN this was previously accepted by the compiler but is being phased out\n         main();\n     }\n }"}, {"sha": "82ba70c9459448832e45bdf8b1bd23df02edb958", "filename": "src/test/run-pass/try-operator-custom.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Frun-pass%2Ftry-operator-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Frun-pass%2Ftry-operator-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-operator-custom.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -8,33 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(question_mark, question_mark_carrier)]\n+#![feature(try_trait)]\n \n-use std::ops::Carrier;\n+use std::ops::Try;\n \n enum MyResult<T, U> {\n     Awesome(T),\n     Terrible(U)\n }\n \n-impl<U, V> Carrier for MyResult<U, V> {\n-    type Success = U;\n+impl<U, V> Try for MyResult<U, V> {\n+    type Ok = U;\n     type Error = V;\n \n-    fn from_success(u: U) -> MyResult<U, V> {\n+    fn from_ok(u: U) -> MyResult<U, V> {\n         MyResult::Awesome(u)\n     }\n \n     fn from_error(e: V) -> MyResult<U, V> {\n         MyResult::Terrible(e)\n     }\n \n-    fn translate<T>(self) -> T\n-        where T: Carrier<Success=U, Error=V>\n-    {\n+    fn into_result(self) -> Result<U, V> {\n         match self {\n-            MyResult::Awesome(u) => T::from_success(u),\n-            MyResult::Terrible(e) => T::from_error(e),\n+            MyResult::Awesome(u) => Ok(u),\n+            MyResult::Terrible(e) => Err(e),\n         }\n     }\n }"}, {"sha": "04709407e58a89cbf2b93d1c80ff741be15cd24e", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -26,3 +26,21 @@ impl Bar {\n     // @has - '//*[@class=\"docblock\"]' 'BAR: usize = 3'\n     pub const BAR: usize = 3;\n }\n+\n+pub struct Baz<'a, U: 'a, T>(T, &'a [U]);\n+\n+impl Bar {\n+    // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.BAZ\"]' \\\n+    //      \"const BAZ: Baz<'static, u8, u32>\"\n+    // @has - '//*[@class=\"docblock\"]' \"BAZ: Baz<'static, u8, u32> = Baz(321, &[1, 2, 3])\"\n+    pub const BAZ: Baz<'static, u8, u32> = Baz(321, &[1, 2, 3]);\n+}\n+\n+pub fn f(_: &(ToString + 'static)) {}\n+\n+impl Bar {\n+    // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.F\"]' \\\n+    //      \"const F: fn(_: &(ToString + 'static))\"\n+    // @has - '//*[@class=\"docblock\"]' \"F: fn(_: &(ToString + 'static)) = f\"\n+    pub const F: fn(_: &(ToString + 'static)) = f;\n+}"}, {"sha": "2d699c66359d82edf2165b32632776fb229fa207", "filename": "src/test/ui/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -1,4 +1,4 @@\n-error: main function not found\n+error[E0601]: main function not found\n \n error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`\n   --> $DIR/m2.rs:20:1"}, {"sha": "009d969fc285d703b6ae838023045ca81ae5c294", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -142,7 +142,7 @@ error[E0425]: cannot find value `bah` in this scope\n 133 |         bah;\n     |         ^^^ did you mean `Self::bah`?\n \n-error: main function not found\n+error[E0601]: main function not found\n \n error: aborting due to previous error(s)\n "}, {"sha": "b35f1bd26706ccfc5bafcf5b03018d13ac9159a8", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -7,7 +7,7 @@ error[E0405]: cannot find trait `T` in this scope\n help: possible candidate is found in another module, you can import it into scope\n    | use foo::bar::T;\n \n-error: main function not found\n+error[E0601]: main function not found\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "a34c27a47da8288892b482a4f6043f34cf56b902", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -72,7 +72,7 @@ error[E0423]: expected function, found module `a::b`\n    |        |\n    |        did you mean `I`?\n \n-error: main function not found\n+error[E0601]: main function not found\n \n error: aborting due to previous error(s)\n "}, {"sha": "a2597aba0bd295af2c3efe6c5821cb24027572ba", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -7,7 +7,7 @@ error[E0404]: expected trait, found type parameter `Add`\n help: possible better candidate is found in another module, you can import it into scope\n    | use std::ops::Add;\n \n-error: main function not found\n+error[E0601]: main function not found\n \n error: cannot continue compilation due to previous error\n "}, {"sha": "4b0b05ca65adc89eee6a6baf957dc68bcc75ef57", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -22,7 +22,7 @@ error: expected expression, found `)`\n 19 | } //~ ERROR: incorrect close delimiter\n    | ^\n \n-error: main function not found\n+error[E0601]: main function not found\n \n error: aborting due to previous error(s)\n "}, {"sha": "56f71a2995382759495c4daf6e8dfaa1160e19ff", "filename": "src/test/ui/token/issue-41155.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr?ref=38efb2e1ccf210b0108d2b88ee9d4ddcd8e91a3a", "patch": "@@ -12,7 +12,7 @@ error[E0412]: cannot find type `S` in this scope\n 11 | impl S {\n    |      ^ not found in this scope\n \n-error: main function not found\n+error[E0601]: main function not found\n \n error: aborting due to previous error(s)\n "}]}