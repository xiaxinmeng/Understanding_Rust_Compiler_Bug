{"sha": "2fd8a312d9883b322981be03bd1c17308354634d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZDhhMzEyZDk4ODNiMzIyOTgxYmUwM2JkMWMxNzMwODM1NDYzNGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T10:48:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T10:48:32Z"}, "message": "extract out query boilerplate and use for `Eq`", "tree": {"sha": "516732c7359907525e360281b56e125c3431a825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516732c7359907525e360281b56e125c3431a825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fd8a312d9883b322981be03bd1c17308354634d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd8a312d9883b322981be03bd1c17308354634d", "html_url": "https://github.com/rust-lang/rust/commit/2fd8a312d9883b322981be03bd1c17308354634d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fd8a312d9883b322981be03bd1c17308354634d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188ad384a33c35cf6e2328a0424c59928ea1b64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/188ad384a33c35cf6e2328a0424c59928ea1b64c", "html_url": "https://github.com/rust-lang/rust/commit/188ad384a33c35cf6e2328a0424c59928ea1b64c"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "9615ee2d3b1980b1ee6e224858abf9df7fc1ecf2", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2fd8a312d9883b322981be03bd1c17308354634d/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd8a312d9883b322981be03bd1c17308354634d/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=2fd8a312d9883b322981be03bd1c17308354634d", "patch": "@@ -18,24 +18,54 @@\n //! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::canonical::substitute::substitute_value;\n-use infer::canonical::{\n-    Canonical, CanonicalVarKind, CanonicalVarValues, CanonicalizedQueryResult, Certainty,\n-    QueryRegionConstraint, QueryResult,\n-};\n+use infer::canonical::{Canonical, CanonicalVarKind, CanonicalVarValues, CanonicalizedQueryResult,\n+                       Certainty, QueryRegionConstraint, QueryResult};\n use infer::region_constraints::{Constraint, RegionConstraintData};\n+use infer::InferCtxtBuilder;\n use infer::{InferCtxt, InferOk, InferResult, RegionObligation};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n use std::fmt::Debug;\n use syntax::ast;\n-use traits::query::NoSolution;\n+use syntax_pos::DUMMY_SP;\n+use traits::query::{Fallible, NoSolution};\n use traits::{FulfillmentContext, TraitEngine};\n use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::fold::TypeFoldable;\n use ty::subst::{Kind, UnpackedKind};\n use ty::{self, CanonicalVar, Lift, TyCtxt};\n \n+impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n+    /// The \"main method\" for a canonicalized trait query. Given the\n+    /// canonical key `canonical_key`, this method will create a new\n+    /// inference context, instantiate the key, and run your operation\n+    /// `op`. The operation should yield up a result (of type `R`) as\n+    /// well as a set of trait obligations that must be fully\n+    /// satisfied. These obligations will be processed and the\n+    /// canonical result created.\n+    ///\n+    /// Returns `NoSolution` in the event of any error.\n+    pub fn enter_canonical_trait_query<K, R>(\n+        &'tcx mut self,\n+        canonical_key: &Canonical<'tcx, K>,\n+        op: impl FnOnce(&InferCtxt<'_, 'gcx, 'tcx>, K) -> Fallible<InferOk<'tcx, R>>,\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, R>>\n+    where\n+        K: TypeFoldable<'tcx>,\n+        R: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n+    {\n+        self.enter(|ref infcx| {\n+            let (key, canonical_inference_vars) =\n+                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_key);\n+            let InferOk { value, obligations } = op(infcx, key)?;\n+            let fulfill_cx = &mut FulfillmentContext::new();\n+            fulfill_cx.register_predicate_obligations(infcx, obligations);\n+            infcx.make_canonicalized_query_result(canonical_inference_vars, value, fulfill_cx)\n+        })\n+    }\n+}\n+\n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// This method is meant to be invoked as the final step of a canonical query\n     /// implementation. It is given:\n@@ -61,7 +91,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n         fulfill_cx: &mut FulfillmentContext<'tcx>,\n-    ) -> Result<CanonicalizedQueryResult<'gcx, T>, NoSolution>\n+    ) -> Fallible<CanonicalizedQueryResult<'gcx, T>>\n     where\n         T: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n     {\n@@ -293,14 +323,13 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         let result_subst =\n             self.query_result_substitution_guess(cause, original_values, query_result);\n \n-        let obligations = self\n-            .unify_query_result_substitution_guess(\n-                cause,\n-                param_env,\n-                original_values,\n-                &result_subst,\n-                query_result,\n-            )?\n+        let obligations = self.unify_query_result_substitution_guess(\n+            cause,\n+            param_env,\n+            original_values,\n+            &result_subst,\n+            query_result,\n+        )?\n             .into_obligations();\n \n         Ok(InferOk {"}, {"sha": "511203bf2fc9d46e102d25368e9fb37eaeed7ab6", "filename": "src/librustc_traits/type_op_eq.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fd8a312d9883b322981be03bd1c17308354634d/src%2Flibrustc_traits%2Ftype_op_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fd8a312d9883b322981be03bd1c17308354634d/src%2Flibrustc_traits%2Ftype_op_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op_eq.rs?ref=2fd8a312d9883b322981be03bd1c17308354634d", "patch": "@@ -11,25 +11,16 @@\n use rustc::infer::canonical::{Canonical, QueryResult};\n use rustc::traits::query::type_op::eq::Eq;\n use rustc::traits::query::NoSolution;\n-use rustc::traits::{FulfillmentContext, ObligationCause};\n+use rustc::traits::ObligationCause;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::sync::Lrc;\n-use syntax::codemap::DUMMY_SP;\n \n crate fn type_op_eq<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Eq<'tcx>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n-    let tcx = tcx.global_tcx();\n-    tcx.infer_ctxt().enter(|ref infcx| {\n-        let (Eq { param_env, a, b }, canonical_inference_vars) =\n-            infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonicalized);\n-        let fulfill_cx = &mut FulfillmentContext::new();\n-        let obligations = match infcx.at(&ObligationCause::dummy(), param_env).eq(a, b) {\n-            Ok(v) => v.into_obligations(),\n-            Err(_) => return Err(NoSolution),\n-        };\n-        fulfill_cx.register_predicate_obligations(infcx, obligations);\n-        infcx.make_canonicalized_query_result(canonical_inference_vars, (), fulfill_cx)\n-    })\n+    tcx.infer_ctxt()\n+        .enter_canonical_trait_query(&canonicalized, |infcx, Eq { param_env, a, b }| {\n+            Ok(infcx.at(&ObligationCause::dummy(), param_env).eq(a, b)?)\n+        })\n }"}]}