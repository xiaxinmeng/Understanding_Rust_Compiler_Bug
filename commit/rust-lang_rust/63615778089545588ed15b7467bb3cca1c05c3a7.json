{"sha": "63615778089545588ed15b7467bb3cca1c05c3a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjE1Nzc4MDg5NTQ1NTg4ZWQxNWI3NDY3YmIzY2NhMWMwNWMzYTc=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-27T03:18:56Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-27T03:18:56Z"}, "message": "Implement PartialOrd for RingBuf", "tree": {"sha": "de83a5d7904b199aa6abeb655927c5c156b9eb18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de83a5d7904b199aa6abeb655927c5c156b9eb18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63615778089545588ed15b7467bb3cca1c05c3a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63615778089545588ed15b7467bb3cca1c05c3a7", "html_url": "https://github.com/rust-lang/rust/commit/63615778089545588ed15b7467bb3cca1c05c3a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63615778089545588ed15b7467bb3cca1c05c3a7/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cfa6569f9078090ac317af432adf712407bd4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfa6569f9078090ac317af432adf712407bd4f7", "html_url": "https://github.com/rust-lang/rust/commit/1cfa6569f9078090ac317af432adf712407bd4f7"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "6b1670fbe855eeabce7a87486d257ee372ea005e", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63615778089545588ed15b7467bb3cca1c05c3a7/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63615778089545588ed15b7467bb3cca1c05c3a7/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=63615778089545588ed15b7467bb3cca1c05c3a7", "patch": "@@ -19,6 +19,7 @@ use core::cmp;\n use core::default::Default;\n use core::fmt;\n use core::iter::RandomAccessIterator;\n+use core::iter;\n use std::hash::{Writer, Hash};\n \n use {Deque, Collection, Mutable, MutableSeq};\n@@ -451,6 +452,12 @@ impl<A: PartialEq> PartialEq for RingBuf<A> {\n     }\n }\n \n+impl<A: PartialOrd> PartialOrd for RingBuf<A> {\n+    fn partial_cmp(&self, other: &RingBuf<A>) -> Option<Ordering> {\n+        iter::order::partial_cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n     fn hash(&self, state: &mut S) {\n         for elt in self.iter() {\n@@ -940,6 +947,19 @@ mod tests {\n       assert!(hash::hash(&x) == hash::hash(&y));\n     }\n \n+    #[test]\n+    fn test_ord() {\n+        let x = RingBuf::new();\n+        let mut y = RingBuf::new();\n+        y.push(1i);\n+        y.push(2);\n+        y.push(3);\n+        assert!(x < y);\n+        assert!(y > x);\n+        assert!(x <= x);\n+        assert!(x >= x);\n+    }\n+\n     #[test]\n     fn test_show() {\n         let ringbuf: RingBuf<int> = range(0i, 10).collect();"}]}