{"sha": "c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNmVlOWY3YTdmZTFhZDMxMWM5ZmQwZWI1N2UwMDY0NjI5N2NkYmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-24T22:11:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-24T22:11:36Z"}, "message": "Merge remote-tracking branch 'cmr/various-cleanup' into incoming", "tree": {"sha": "057ba89ccf6682dac64ae9ba9e1ed4e3e95aa577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057ba89ccf6682dac64ae9ba9e1ed4e3e95aa577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "html_url": "https://github.com/rust-lang/rust/commit/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f48068657a26fbe781007f6f40abaa80f6e5dbc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48068657a26fbe781007f6f40abaa80f6e5dbc3", "html_url": "https://github.com/rust-lang/rust/commit/f48068657a26fbe781007f6f40abaa80f6e5dbc3"}, {"sha": "116897fa6cba39ba43180debf0f9136be6a44205", "url": "https://api.github.com/repos/rust-lang/rust/commits/116897fa6cba39ba43180debf0f9136be6a44205", "html_url": "https://github.com/rust-lang/rust/commit/116897fa6cba39ba43180debf0f9136be6a44205"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "2604028ecdb2ec811c0899a3e362ad4e2bc2b738", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -100,10 +100,8 @@ enum Family {\n     Const,                 // c\n     Fn,                    // f\n     UnsafeFn,              // u\n-    PureFn,                // p\n     StaticMethod,          // F\n     UnsafeStaticMethod,    // U\n-    PureStaticMethod,      // P\n     ForeignFn,             // e\n     Type,                  // y\n     ForeignType,           // T\n@@ -125,10 +123,8 @@ fn item_family(item: ebml::Doc) -> Family {\n       'c' => Const,\n       'f' => Fn,\n       'u' => UnsafeFn,\n-      'p' => PureFn,\n       'F' => StaticMethod,\n       'U' => UnsafeStaticMethod,\n-      'P' => PureStaticMethod,\n       'e' => ForeignFn,\n       'y' => Type,\n       'T' => ForeignType,\n@@ -325,7 +321,6 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n         Struct    => dl_def(ast::def_struct(did)),\n         UnsafeFn  => dl_def(ast::def_fn(did, ast::unsafe_fn)),\n         Fn        => dl_def(ast::def_fn(did, ast::impure_fn)),\n-        PureFn    => dl_def(ast::def_fn(did, ast::pure_fn)),\n         ForeignFn => dl_def(ast::def_fn(did, ast::extern_fn)),\n         UnsafeStaticMethod => {\n             let trait_did_opt = translated_parent_item_opt(cnum, item);\n@@ -335,10 +330,6 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n             let trait_did_opt = translated_parent_item_opt(cnum, item);\n             dl_def(ast::def_static_method(did, trait_did_opt, ast::impure_fn))\n         }\n-        PureStaticMethod => {\n-            let trait_did_opt = translated_parent_item_opt(cnum, item);\n-            dl_def(ast::def_static_method(did, trait_did_opt, ast::pure_fn))\n-        }\n         Type | ForeignType => dl_def(ast::def_ty(did)),\n         Mod => dl_def(ast::def_mod(did)),\n         ForeignMod => dl_def(ast::def_foreign_mod(did)),\n@@ -822,12 +813,11 @@ pub fn get_static_methods_if_impl(intr: @ident_interner,\n         let impl_method_doc = lookup_item(impl_method_id.node, cdata.data);\n         let family = item_family(impl_method_doc);\n         match family {\n-            StaticMethod | UnsafeStaticMethod | PureStaticMethod => {\n+            StaticMethod | UnsafeStaticMethod => {\n                 let purity;\n                 match item_family(impl_method_doc) {\n                     StaticMethod => purity = ast::impure_fn,\n                     UnsafeStaticMethod => purity = ast::unsafe_fn,\n-                    PureStaticMethod => purity = ast::pure_fn,\n                     _ => fail!()\n                 }\n \n@@ -934,10 +924,8 @@ fn item_family_to_str(fam: Family) -> ~str {\n       Const => ~\"const\",\n       Fn => ~\"fn\",\n       UnsafeFn => ~\"unsafe fn\",\n-      PureFn => ~\"pure fn\",\n       StaticMethod => ~\"static method\",\n       UnsafeStaticMethod => ~\"unsafe static method\",\n-      PureStaticMethod => ~\"pure static method\",\n       ForeignFn => ~\"foreign fn\",\n       Type => ~\"type\",\n       ForeignType => ~\"foreign type\","}, {"sha": "9480a509b90b29efa5ca5932819cfb343b54ea7a", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -753,7 +753,6 @@ fn encode_info_for_method(ecx: &EncodeContext,\n fn purity_fn_family(p: purity) -> char {\n     match p {\n       unsafe_fn => 'u',\n-      pure_fn => 'p',\n       impure_fn => 'f',\n       extern_fn => 'e'\n     }\n@@ -762,7 +761,6 @@ fn purity_fn_family(p: purity) -> char {\n fn purity_static_method_family(p: purity) -> char {\n     match p {\n       unsafe_fn => 'U',\n-      pure_fn => 'P',\n       impure_fn => 'F',\n       _ => fail!(\"extern fn can't be static\")\n     }"}, {"sha": "c3840c9c87fb2789f68b6e5b99261b6caaf634d7", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -440,10 +440,9 @@ fn parse_hex(st: &mut PState) -> uint {\n fn parse_purity(c: char) -> purity {\n     match c {\n       'u' => unsafe_fn,\n-      'p' => pure_fn,\n       'i' => impure_fn,\n       'c' => extern_fn,\n-      _ => fail!(\"parse_purity: bad purity\")\n+      _ => fail!(\"parse_purity: bad purity %c\", c)\n     }\n }\n "}, {"sha": "37fedc16122e59fcac8518b7171ef26763637b76", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -350,7 +350,6 @@ fn enc_sigil(w: @io::Writer, sigil: Sigil) {\n \n fn enc_purity(w: @io::Writer, p: purity) {\n     match p {\n-      pure_fn => w.write_char('p'),\n       impure_fn => w.write_char('i'),\n       unsafe_fn => w.write_char('u'),\n       extern_fn => w.write_char('c')"}, {"sha": "a2c945a13f3ca8b8ffe3e4c456c4326edca8d5f2", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -400,7 +400,6 @@ pub fn ast_sigil_constant(sigil: ast::Sigil) -> uint {\n \n pub fn ast_purity_constant(purity: ast::purity) -> uint {\n     match purity {\n-        ast::pure_fn => 0u,\n         ast::unsafe_fn => 1u,\n         ast::impure_fn => 2u,\n         ast::extern_fn => 3u"}, {"sha": "4303ff63015f8ca9e6d64858a839cd76d378e098", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -1254,7 +1254,7 @@ pub fn mk_ctor_fn(cx: ctxt, input_tys: &[ty::t], output: ty::t) -> t {\n     let input_args = input_tys.map(|t| *t);\n     mk_bare_fn(cx,\n                BareFnTy {\n-                   purity: ast::pure_fn,\n+                   purity: ast::impure_fn,\n                    abis: AbiSet::Rust(),\n                    sig: FnSig {\n                     bound_lifetime_names: opt_vec::Empty,"}, {"sha": "23eb8d52e6c8a51fb87554207a10fa3cbda5d529", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -275,7 +275,7 @@ pub fn blank_fn_ctxt(ccx: @mut CrateCtxt,\n         err_count_on_creation: ccx.tcx.sess.err_count(),\n         ret_ty: rty,\n         indirect_ret_ty: None,\n-        ps: PurityState::function(ast::pure_fn, 0),\n+        ps: PurityState::function(ast::impure_fn, 0),\n         region_lb: region_bnd,\n         in_scope_regions: @Nil,\n         fn_kind: Vanilla,"}, {"sha": "47fb28f84845adbc09a9747ac9e2e73539f789b1", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -23,7 +23,7 @@ use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::isr_alist;\n use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, impure_fn, m_const, m_imm, m_mutbl};\n-use syntax::ast::{pure_fn, unsafe_fn};\n+use syntax::ast::{unsafe_fn};\n use syntax::ast::{Onceness, purity};\n use syntax::abi::AbiSet;\n use syntax::codemap::span;\n@@ -103,7 +103,6 @@ impl Combine for Glb {\n \n     fn purities(&self, a: purity, b: purity) -> cres<purity> {\n         match (a, b) {\n-          (pure_fn, _) | (_, pure_fn) => Ok(pure_fn),\n           (extern_fn, _) | (_, extern_fn) => Ok(extern_fn),\n           (impure_fn, _) | (_, impure_fn) => Ok(impure_fn),\n           (unsafe_fn, unsafe_fn) => Ok(unsafe_fn)"}, {"sha": "c77bef835e4f8b91851956bddf4147b7415afdaa", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -28,7 +28,7 @@ use extra::list;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn};\n-use syntax::ast::{pure_fn, unsafe_fn};\n+use syntax::ast::{unsafe_fn};\n use syntax::ast::{Onceness, purity};\n use syntax::codemap::span;\n \n@@ -92,8 +92,7 @@ impl Combine for Lub {\n         match (a, b) {\n           (unsafe_fn, _) | (_, unsafe_fn) => Ok(unsafe_fn),\n           (impure_fn, _) | (_, impure_fn) => Ok(impure_fn),\n-          (extern_fn, _) | (_, extern_fn) => Ok(extern_fn),\n-          (pure_fn, pure_fn) => Ok(pure_fn)\n+          (extern_fn, extern_fn) => Ok(extern_fn),\n         }\n     }\n "}, {"sha": "b1fbfa0d91a5c1ddf7ce63741acfa9d5ba53b376", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -845,7 +845,6 @@ pub struct fn_decl {\n \n #[deriving(Eq, Encodable, Decodable)]\n pub enum purity {\n-    pure_fn, // declared with \"pure fn\"\n     unsafe_fn, // declared with \"unsafe fn\"\n     impure_fn, // declared with \"fn\"\n     extern_fn, // declared with \"extern fn\"\n@@ -856,7 +855,6 @@ impl ToStr for purity {\n         match *self {\n             impure_fn => ~\"impure\",\n             unsafe_fn => ~\"unsafe\",\n-            pure_fn => ~\"pure\",\n             extern_fn => ~\"extern\"\n         }\n     }"}, {"sha": "853e917a6f182404bd12ca2fd3a4b1358e66abc4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c06ee9f7a7fe1ad311c9fd0eb57e00646297cdbd", "patch": "@@ -2201,26 +2201,29 @@ pub fn print_fn_header_info(s: @ps,\n     print_opt_sigil(s, opt_sigil);\n }\n \n-pub fn opt_sigil_to_str(opt_p: Option<ast::Sigil>) -> ~str {\n+pub fn opt_sigil_to_str(opt_p: Option<ast::Sigil>) -> &'static str {\n     match opt_p {\n-      None => ~\"fn\",\n-      Some(p) => fmt!(\"fn%s\", p.to_str())\n+      None => \"fn\",\n+      Some(p) => match p {\n+          ast::BorrowedSigil => \"fn&\",\n+          ast::OwnedSigil => \"fn~\",\n+          ast::ManagedSigil => \"fn@\"\n+      }\n     }\n }\n \n-pub fn purity_to_str(p: ast::purity) -> ~str {\n+pub fn purity_to_str(p: ast::purity) -> &'static str {\n     match p {\n-      ast::impure_fn => ~\"impure\",\n-      ast::unsafe_fn => ~\"unsafe\",\n-      ast::pure_fn => ~\"pure\",\n-      ast::extern_fn => ~\"extern\"\n+      ast::impure_fn => \"impure\",\n+      ast::unsafe_fn => \"unsafe\",\n+      ast::extern_fn => \"extern\"\n     }\n }\n \n-pub fn onceness_to_str(o: ast::Onceness) -> ~str {\n+pub fn onceness_to_str(o: ast::Onceness) -> &'static str {\n     match o {\n-        ast::Once => ~\"once\",\n-        ast::Many => ~\"many\"\n+        ast::Once => \"once\",\n+        ast::Many => \"many\"\n     }\n }\n "}]}