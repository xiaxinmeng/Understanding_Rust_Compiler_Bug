{"sha": "be02ac981de88869a9d6069b675a78a2e9e31f99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDJhYzk4MWRlODg4NjlhOWQ2MDY5YjY3NWE3OGEyZTllMzFmOTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-08T06:03:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-08T06:03:54Z"}, "message": "Merge #7205\n\n7205: Fix bug for $crate in LHS of mbe r=edwin0cheng a=edwin0cheng\n\nWe treated `$crate` as meta variable in LHS of mbe, which should be an `ident`. \r\n\r\nFixes #7204\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "cfdfe11e7d4d6b50350679ab6cff67bd64dd90a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfdfe11e7d4d6b50350679ab6cff67bd64dd90a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be02ac981de88869a9d6069b675a78a2e9e31f99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf9/XKCRBK7hj4Ov3rIwAAdHIIAKxD7ugrZ0OhPohkjznduNpj\nwr8R6db20FA3BcXEE5wup/dR5Rul4U3y+77+7fXxWYJOTADBbaCRfZEPquLApJ5H\nCus2hDhc5E1rgXor+4M6RtoonL4t1a+C9JVk7zz4dpU+h825t5XuKO6ie6TvsVJG\nrKRTSWjQ+teMq539WaUrUCqxsVc8lut0vPuy32HC4yaIIoK1ykZ6ST3KZASsjnpX\nDxe77swUqjqHmvMW6wPz/b0VofqEpzB9Lt7ItXnJvJpynHk63ykmjXiiWRWlKKne\nqbFypgvOWwwlLuaoZ1HwGlTmyxczY6LLQRLUCJAI+4LKzsHQqC0HhyE23A7zghI=\n=QGsU\n-----END PGP SIGNATURE-----\n", "payload": "tree cfdfe11e7d4d6b50350679ab6cff67bd64dd90a4\nparent 1a29934c37cf4ffa2b269c39a25245e58d3916d5\nparent bced02c5dc636c7b88aeadf9eefa66f8cf06103e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610085834 +0000\ncommitter GitHub <noreply@github.com> 1610085834 +0000\n\nMerge #7205\n\n7205: Fix bug for $crate in LHS of mbe r=edwin0cheng a=edwin0cheng\n\nWe treated `$crate` as meta variable in LHS of mbe, which should be an `ident`. \r\n\r\nFixes #7204\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be02ac981de88869a9d6069b675a78a2e9e31f99", "html_url": "https://github.com/rust-lang/rust/commit/be02ac981de88869a9d6069b675a78a2e9e31f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be02ac981de88869a9d6069b675a78a2e9e31f99/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a29934c37cf4ffa2b269c39a25245e58d3916d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a29934c37cf4ffa2b269c39a25245e58d3916d5", "html_url": "https://github.com/rust-lang/rust/commit/1a29934c37cf4ffa2b269c39a25245e58d3916d5"}, {"sha": "bced02c5dc636c7b88aeadf9eefa66f8cf06103e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bced02c5dc636c7b88aeadf9eefa66f8cf06103e", "html_url": "https://github.com/rust-lang/rust/commit/bced02c5dc636c7b88aeadf9eefa66f8cf06103e"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "27b2ac777aefb79c4df6b3504a95d55ab05ceacc", "filename": "crates/mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be02ac981de88869a9d6069b675a78a2e9e31f99/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be02ac981de88869a9d6069b675a78a2e9e31f99/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=be02ac981de88869a9d6069b675a78a2e9e31f99", "patch": "@@ -119,11 +119,10 @@ fn expand_subtree(\n }\n \n fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr, id: tt::TokenId) -> ExpandResult<Fragment> {\n-    if v == \"crate\" {\n-        // We simply produce identifier `$crate` here. And it will be resolved when lowering ast to Path.\n-        let tt = tt::Leaf::from(tt::Ident { text: \"$crate\".into(), id }).into();\n-        ExpandResult::ok(Fragment::Tokens(tt))\n-    } else if !ctx.bindings.contains(v) {\n+    // We already handle $crate case in mbe parser\n+    debug_assert!(v != \"crate\");\n+\n+    if !ctx.bindings.contains(v) {\n         // Note that it is possible to have a `$var` inside a macro which is not bound.\n         // For example:\n         // ```"}, {"sha": "f3047972dd2dfddab938839431fb932076138b33", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be02ac981de88869a9d6069b675a78a2e9e31f99/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be02ac981de88869a9d6069b675a78a2e9e31f99/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=be02ac981de88869a9d6069b675a78a2e9e31f99", "patch": "@@ -109,6 +109,10 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n                         let id = punct.id;\n                         Op::Var { name, kind, id }\n                     }\n+                    tt::Leaf::Ident(ident) if ident.text == \"crate\" => {\n+                        // We simply produce identifier `$crate` here. And it will be resolved when lowering ast to Path.\n+                        Op::Leaf(tt::Leaf::from(tt::Ident { text: \"$crate\".into(), id: ident.id }))\n+                    }\n                     tt::Leaf::Ident(ident) => {\n                         let name = ident.text.clone();\n                         let kind = eat_fragment_kind(src, mode)?;"}, {"sha": "d854985c5b0e9c046838dd1c3ad904fcfca74ccc", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be02ac981de88869a9d6069b675a78a2e9e31f99/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be02ac981de88869a9d6069b675a78a2e9e31f99/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=be02ac981de88869a9d6069b675a78a2e9e31f99", "patch": "@@ -1079,6 +1079,19 @@ fn test_vertical_bar_with_pat() {\n     .assert_expand_items(r#\"foo! { | x | }\"#, r#\"0\"#);\n }\n \n+#[test]\n+fn test_dollar_crate_lhs_is_not_meta() {\n+    parse_macro(\n+        r#\"\n+macro_rules! foo {\n+    ($crate) => {};\n+    () => {0};\n+}\n+    \"#,\n+    )\n+    .assert_expand_items(r#\"foo!{}\"#, r#\"0\"#);\n+}\n+\n #[test]\n fn test_lifetime() {\n     parse_macro("}]}