{"sha": "9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzFkNzZlOTdjNjExNmJhMjQ4MGFhMjNhNDhmM2U3YmQyNWE3Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-03T22:04:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-03T22:04:41Z"}, "message": "Auto merge of #36821 - pweaver:master, r=michaelwoerister\n\n #36821\n\nI am just starting to learn rust. Feedback would be appreciated.", "tree": {"sha": "191493ccd4b22531907b3f65aae4432519c7b8b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191493ccd4b22531907b3f65aae4432519c7b8b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb", "html_url": "https://github.com/rust-lang/rust/commit/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a26aeca77bcf334747eddb630e3b9475149b7f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a26aeca77bcf334747eddb630e3b9475149b7f5", "html_url": "https://github.com/rust-lang/rust/commit/7a26aeca77bcf334747eddb630e3b9475149b7f5"}, {"sha": "7cf90d0a1d133b41b06c09272b6f645c142e7ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf90d0a1d133b41b06c09272b6f645c142e7ade", "html_url": "https://github.com/rust-lang/rust/commit/7cf90d0a1d133b41b06c09272b6f645c142e7ade"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "ff7c3d0512e4f18c30c6e82686d6e0c8bdb539d7", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=9c31d76e97c6116ba2480aa23a48f3e7bd25a7cb", "patch": "@@ -234,10 +234,21 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n         let print_file_copy_stats = tcx.sess.opts.debugging_opts.incremental_info;\n \n         // Try copying over all files from the source directory\n-        if copy_files(&session_dir, &source_directory, print_file_copy_stats).is_ok() {\n+        if let Ok(allows_links) = copy_files(&session_dir, &source_directory,\n+                                             print_file_copy_stats) {\n             debug!(\"successfully copied data from: {}\",\n                    source_directory.display());\n \n+            if !allows_links {\n+                tcx.sess.warn(&format!(\"Hard linking files in the incremental \\\n+                                        compilation cache failed. Copying files \\\n+                                        instead. Consider moving the cache \\\n+                                        directory to a file system which supports \\\n+                                        hard linking in session dir `{}`\",\n+                                        session_dir.display())\n+                    );\n+            }\n+\n             tcx.sess.init_incr_comp_session(session_dir, directory_lock);\n             return Ok(true)\n         } else {\n@@ -357,7 +368,7 @@ pub fn delete_all_session_dir_contents(sess: &Session) -> io::Result<()> {\n fn copy_files(target_dir: &Path,\n               source_dir: &Path,\n               print_stats_on_success: bool)\n-              -> Result<(), ()> {\n+              -> Result<bool, ()> {\n     // We acquire a shared lock on the lock file of the directory, so that\n     // nobody deletes it out from under us while we are reading from it.\n     let lock_file_path = lock_file_path(source_dir);\n@@ -409,7 +420,7 @@ fn copy_files(target_dir: &Path,\n         println!(\"incr. comp. session directory: {} files copied\", files_copied);\n     }\n \n-    Ok(())\n+    Ok(files_linked > 0 || files_copied == 0)\n }\n \n /// Generate unique directory path of the form:"}]}