{"sha": "30ea64ea77dd33d0af9271b032644120b4f5166a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZWE2NGVhNzdkZDMzZDBhZjkyNzFiMDMyNjQ0MTIwYjRmNTE2NmE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T02:31:49Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcore: fix fallout in doctests", "tree": {"sha": "5129eac634ba17bb55fae68d05db5061cfdf60ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5129eac634ba17bb55fae68d05db5061cfdf60ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30ea64ea77dd33d0af9271b032644120b4f5166a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30ea64ea77dd33d0af9271b032644120b4f5166a", "html_url": "https://github.com/rust-lang/rust/commit/30ea64ea77dd33d0af9271b032644120b4f5166a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30ea64ea77dd33d0af9271b032644120b4f5166a/comments", "author": null, "committer": null, "parents": [{"sha": "47acce498a9413f3d4b24993e231393cbbcb6346", "url": "https://api.github.com/repos/rust-lang/rust/commits/47acce498a9413f3d4b24993e231393cbbcb6346", "html_url": "https://github.com/rust-lang/rust/commit/47acce498a9413f3d4b24993e231393cbbcb6346"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "92f82bd97711489367ac099f4203e65765a070b0", "filename": "src/libcore/str.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/30ea64ea77dd33d0af9271b032644120b4f5166a/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ea64ea77dd33d0af9271b032644120b4f5166a/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=30ea64ea77dd33d0af9271b032644120b4f5166a", "patch": "@@ -1352,17 +1352,21 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n     /// assert_eq!(v, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".split(|&: c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"abc\", \"def\", \"ghi\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\n     /// assert_eq!(v, vec![\"lion\", \"\", \"tiger\", \"leopard\"]);\n     ///\n     /// let v: Vec<&str> = \"\".split('X').collect();\n     /// assert_eq!(v, vec![\"\"]);\n+    /// # }\n     /// ```\n     fn split<'a, Sep: CharEq>(&'a self, sep: Sep) -> CharSplits<'a, Sep>;\n \n@@ -1373,10 +1377,13 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// let v: Vec<&str> = \"Mary had a little lambda\".splitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"Mary\", \"had\", \"a little lambda\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(1, |c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(1, |&: c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"abc\", \"def2ghi\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".splitn(2, 'X').collect();\n@@ -1387,6 +1394,7 @@ pub trait StrPrelude for Sized? {\n     ///\n     /// let v: Vec<&str> = \"\".splitn(1, 'X').collect();\n     /// assert_eq!(v, vec![\"\"]);\n+    /// # }\n     /// ```\n     fn splitn<'a, Sep: CharEq>(&'a self, count: uint, sep: Sep) -> CharSplitsN<'a, Sep>;\n \n@@ -1399,6 +1407,9 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// let v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\n     /// assert_eq!(v, vec![\"A\", \"B\"]);\n     ///\n@@ -1408,11 +1419,12 @@ pub trait StrPrelude for Sized? {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').rev().collect();\n     /// assert_eq!(v, vec![\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).rev().collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".split(|&: c: char| c.is_numeric()).rev().collect();\n     /// assert_eq!(v, vec![\"ghi\", \"def\", \"abc\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".split('X').rev().collect();\n     /// assert_eq!(v, vec![\"leopard\", \"tiger\", \"\", \"lion\"]);\n+    /// # }\n     /// ```\n     fn split_terminator<'a, Sep: CharEq>(&'a self, sep: Sep) -> CharSplits<'a, Sep>;\n \n@@ -1423,14 +1435,18 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".rsplitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"lamb\", \"little\", \"Mary had a\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(1, |c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(1, |&: c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"ghi\", \"abc1def\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(2, 'X').collect();\n     /// assert_eq!(v, vec![\"leopard\", \"tiger\", \"lionX\"]);\n+    /// # }\n     /// ```\n     fn rsplitn<'a, Sep: CharEq>(&'a self, count: uint, sep: Sep) -> CharSplitsN<'a, Sep>;\n \n@@ -1641,10 +1657,14 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// assert_eq!(\"11foo1bar11\".trim_chars('1'), \"foo1bar\")\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_chars(x), \"foo1bar\")\n-    /// assert_eq!(\"123foo1bar123\".trim_chars(|c: char| c.is_numeric()), \"foo1bar\")\n+    /// assert_eq!(\"123foo1bar123\".trim_chars(|&: c: char| c.is_numeric()), \"foo1bar\")\n+    /// # }\n     /// ```\n     fn trim_chars<'a, C: CharEq>(&'a self, to_trim: C) -> &'a str;\n \n@@ -1657,10 +1677,14 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// assert_eq!(\"11foo1bar11\".trim_left_chars('1'), \"foo1bar11\")\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_left_chars(x), \"foo1bar12\")\n-    /// assert_eq!(\"123foo1bar123\".trim_left_chars(|c: char| c.is_numeric()), \"foo1bar123\")\n+    /// assert_eq!(\"123foo1bar123\".trim_left_chars(|&: c: char| c.is_numeric()), \"foo1bar123\")\n+    /// # }\n     /// ```\n     fn trim_left_chars<'a, C: CharEq>(&'a self, to_trim: C) -> &'a str;\n \n@@ -1673,10 +1697,14 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// assert_eq!(\"11foo1bar11\".trim_right_chars('1'), \"11foo1bar\")\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_right_chars(x), \"12foo1bar\")\n-    /// assert_eq!(\"123foo1bar123\".trim_right_chars(|c: char| c.is_numeric()), \"123foo1bar\")\n+    /// assert_eq!(\"123foo1bar123\".trim_right_chars(|&: c: char| c.is_numeric()), \"123foo1bar\")\n+    /// # }\n     /// ```\n     fn trim_right_chars<'a, C: CharEq>(&'a self, to_trim: C) -> &'a str;\n \n@@ -1817,17 +1845,21 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.find('L'), Some(0));\n     /// assert_eq!(s.find('\u00e9'), Some(14));\n     ///\n     /// // the first space\n-    /// assert_eq!(s.find(|c: char| c.is_whitespace()), Some(5));\n+    /// assert_eq!(s.find(|&: c: char| c.is_whitespace()), Some(5));\n     ///\n     /// // neither are found\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(s.find(x), None);\n+    /// # }\n     /// ```\n     fn find<C: CharEq>(&self, search: C) -> Option<uint>;\n \n@@ -1842,17 +1874,21 @@ pub trait StrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(unboxed_closures)]\n+    ///\n+    /// # fn main() {\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.rfind('L'), Some(13));\n     /// assert_eq!(s.rfind('\u00e9'), Some(14));\n     ///\n     /// // the second space\n-    /// assert_eq!(s.rfind(|c: char| c.is_whitespace()), Some(12));\n+    /// assert_eq!(s.rfind(|&: c: char| c.is_whitespace()), Some(12));\n     ///\n     /// // searches for an occurrence of either `1` or `2`, but neither are found\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(s.rfind(x), None);\n+    /// # }\n     /// ```\n     fn rfind<C: CharEq>(&self, search: C) -> Option<uint>;\n "}]}