{"sha": "761705ebe5093be5bcc8f431c56ed6a330ad34e7", "node_id": "C_kwDOAAsO6NoAKDc2MTcwNWViZTUwOTNiZTViY2M4ZjQzMWM1NmVkNmEzMzBhZDM0ZTc", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-02-03T13:20:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-03T13:20:25Z"}, "message": "Rollup merge of #93515 - dtolnay:convenience, r=davidtwco\n\nFactor convenience functions out of main printer implementation\n\nThe pretty printer in rustc_ast_pretty has a section of methods commented \"Convenience functions to talk to the printer\". This PR pulls those out to a separate module. This leaves pp.rs with only the minimal API that is core to the pretty printing algorithm.\n\nI found this separation to be helpful in https://github.com/dtolnay/prettyplease because it makes clear when changes are adding some fundamental new capability to the pretty printer algorithm vs just making it more convenient to call some already existing functionality.", "tree": {"sha": "2e7109824683caac391ad377ff889f555758773e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7109824683caac391ad377ff889f555758773e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/761705ebe5093be5bcc8f431c56ed6a330ad34e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+9aZCRBK7hj4Ov3rIwAAjIMIAJ7cLY3oC/LGcVnOs+pGxwjM\nbDh9U6vXI9v2B3DJZ6XDjcdGkiz4KU3PPdm/3ALALQmWFOjPMVFYv7aFhU6dlAIf\n0UuLCxuK/GR3YDW2MNrpdNy80jQCB4MffopvXfAq2D6Si/d1I4dKw4zzcqVLGx/A\n2gZhZUWkIDjQXhCGVzUylehDO3E1EvPwVX6zkk+edoAoiogCDhLxaz6iNNBz9z7Q\nPD9LLY8JRNkP3r+NsVMVRQ++nKu6ves2wdHpHcaweQXYQyW0gjdvscRJHFmGDUDS\nkMT9wQCYrgSS98CtT/ehmm1KxmmshUZPA3jyGpRxZI1ENS1wQR+mAdCzpEYG5/c=\n=sHaU\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e7109824683caac391ad377ff889f555758773e\nparent 2fe9f763d08cf493896262da0533fd1a3c8ae3dd\nparent 2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac\nauthor Yuki Okushi <jtitor@2k36.org> 1643894425 +0900\ncommitter GitHub <noreply@github.com> 1643894425 +0900\n\nRollup merge of #93515 - dtolnay:convenience, r=davidtwco\n\nFactor convenience functions out of main printer implementation\n\nThe pretty printer in rustc_ast_pretty has a section of methods commented \"Convenience functions to talk to the printer\". This PR pulls those out to a separate module. This leaves pp.rs with only the minimal API that is core to the pretty printing algorithm.\n\nI found this separation to be helpful in https://github.com/dtolnay/prettyplease because it makes clear when changes are adding some fundamental new capability to the pretty printer algorithm vs just making it more convenient to call some already existing functionality.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/761705ebe5093be5bcc8f431c56ed6a330ad34e7", "html_url": "https://github.com/rust-lang/rust/commit/761705ebe5093be5bcc8f431c56ed6a330ad34e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/761705ebe5093be5bcc8f431c56ed6a330ad34e7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "html_url": "https://github.com/rust-lang/rust/commit/2fe9f763d08cf493896262da0533fd1a3c8ae3dd"}, {"sha": "2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac", "html_url": "https://github.com/rust-lang/rust/commit/2d7ffbbc40cb8ddd85ed29ad88d217e10a17f8ac"}], "stats": {"total": 153, "additions": 78, "deletions": 75}, "files": [{"sha": "d567c8dae43a4269d8fc22eb51c9d6dc1d0e0e69", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 1, "deletions": 75, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/761705ebe5093be5bcc8f431c56ed6a330ad34e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761705ebe5093be5bcc8f431c56ed6a330ad34e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=761705ebe5093be5bcc8f431c56ed6a330ad34e7", "patch": "@@ -132,6 +132,7 @@\n //! methods called `Printer::scan_*`, and the 'PRINT' process is the\n //! method called `Printer::print`.\n \n+mod convenience;\n mod ring;\n \n use ring::RingBuffer;\n@@ -186,12 +187,6 @@ pub enum Token {\n     End,\n }\n \n-impl Token {\n-    pub fn is_hardbreak_tok(&self) -> bool {\n-        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n-    }\n-}\n-\n #[derive(Copy, Clone)]\n enum PrintFrame {\n     Fits,\n@@ -441,73 +436,4 @@ impl Printer {\n         self.out.push_str(string);\n         self.space -= string.len() as isize;\n     }\n-\n-    // Convenience functions to talk to the printer.\n-\n-    /// \"raw box\"\n-    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n-        self.scan_begin(BeginToken {\n-            indent: IndentStyle::Block { offset: indent as isize },\n-            breaks,\n-        })\n-    }\n-\n-    /// Inconsistent breaking box\n-    pub fn ibox(&mut self, indent: usize) {\n-        self.rbox(indent, Breaks::Inconsistent)\n-    }\n-\n-    /// Consistent breaking box\n-    pub fn cbox(&mut self, indent: usize) {\n-        self.rbox(indent, Breaks::Consistent)\n-    }\n-\n-    pub fn visual_align(&mut self) {\n-        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n-    }\n-\n-    pub fn break_offset(&mut self, n: usize, off: isize) {\n-        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n-    }\n-\n-    pub fn end(&mut self) {\n-        self.scan_end()\n-    }\n-\n-    pub fn eof(mut self) -> String {\n-        self.scan_eof();\n-        self.out\n-    }\n-\n-    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n-        let string = wrd.into();\n-        self.scan_string(string)\n-    }\n-\n-    fn spaces(&mut self, n: usize) {\n-        self.break_offset(n, 0)\n-    }\n-\n-    pub fn zerobreak(&mut self) {\n-        self.spaces(0)\n-    }\n-\n-    pub fn space(&mut self) {\n-        self.spaces(1)\n-    }\n-\n-    pub fn hardbreak(&mut self) {\n-        self.spaces(SIZE_INFINITY as usize)\n-    }\n-\n-    pub fn is_beginning_of_line(&self) -> bool {\n-        match self.last_token() {\n-            Some(last_token) => last_token.is_hardbreak_tok(),\n-            None => true,\n-        }\n-    }\n-\n-    pub fn hardbreak_tok_offset(off: isize) -> Token {\n-        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n-    }\n }"}, {"sha": "1b9ac705883afd571f5dbf5dcdf95a40c32c2828", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/761705ebe5093be5bcc8f431c56ed6a330ad34e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/761705ebe5093be5bcc8f431c56ed6a330ad34e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=761705ebe5093be5bcc8f431c56ed6a330ad34e7", "patch": "@@ -0,0 +1,77 @@\n+use crate::pp::{BeginToken, BreakToken, Breaks, IndentStyle, Printer, Token, SIZE_INFINITY};\n+use std::borrow::Cow;\n+\n+impl Printer {\n+    /// \"raw box\"\n+    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n+        self.scan_begin(BeginToken {\n+            indent: IndentStyle::Block { offset: indent as isize },\n+            breaks,\n+        })\n+    }\n+\n+    /// Inconsistent breaking box\n+    pub fn ibox(&mut self, indent: usize) {\n+        self.rbox(indent, Breaks::Inconsistent)\n+    }\n+\n+    /// Consistent breaking box\n+    pub fn cbox(&mut self, indent: usize) {\n+        self.rbox(indent, Breaks::Consistent)\n+    }\n+\n+    pub fn visual_align(&mut self) {\n+        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n+    }\n+\n+    pub fn break_offset(&mut self, n: usize, off: isize) {\n+        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n+    }\n+\n+    pub fn end(&mut self) {\n+        self.scan_end()\n+    }\n+\n+    pub fn eof(mut self) -> String {\n+        self.scan_eof();\n+        self.out\n+    }\n+\n+    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {\n+        let string = wrd.into();\n+        self.scan_string(string)\n+    }\n+\n+    fn spaces(&mut self, n: usize) {\n+        self.break_offset(n, 0)\n+    }\n+\n+    pub fn zerobreak(&mut self) {\n+        self.spaces(0)\n+    }\n+\n+    pub fn space(&mut self) {\n+        self.spaces(1)\n+    }\n+\n+    pub fn hardbreak(&mut self) {\n+        self.spaces(SIZE_INFINITY as usize)\n+    }\n+\n+    pub fn is_beginning_of_line(&self) -> bool {\n+        match self.last_token() {\n+            Some(last_token) => last_token.is_hardbreak_tok(),\n+            None => true,\n+        }\n+    }\n+\n+    pub fn hardbreak_tok_offset(off: isize) -> Token {\n+        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n+    }\n+}\n+\n+impl Token {\n+    pub fn is_hardbreak_tok(&self) -> bool {\n+        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n+    }\n+}"}]}