{"sha": "fd0e2987eda697cfa1ec754021477f54a46645aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMGUyOTg3ZWRhNjk3Y2ZhMWVjNzU0MDIxNDc3ZjU0YTQ2NjQ1YWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-11T13:38:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-13T15:37:51Z"}, "message": "rustc_target: Inherit `windows_uwp_msvc_base` from `windows_msvc_base`", "tree": {"sha": "b7ca072e7d1c3d3055393c7578bf0db9bfd4eaf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ca072e7d1c3d3055393c7578bf0db9bfd4eaf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd0e2987eda697cfa1ec754021477f54a46645aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0e2987eda697cfa1ec754021477f54a46645aa", "html_url": "https://github.com/rust-lang/rust/commit/fd0e2987eda697cfa1ec754021477f54a46645aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd0e2987eda697cfa1ec754021477f54a46645aa/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9db3ab4b5fcb3349ec744c4f168dd3e753d57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9db3ab4b5fcb3349ec744c4f168dd3e753d57b", "html_url": "https://github.com/rust-lang/rust/commit/9c9db3ab4b5fcb3349ec744c4f168dd3e753d57b"}], "stats": {"total": 50, "additions": 9, "deletions": 41}, "files": [{"sha": "04ffa1a0addbeb4b38727a23670c88c4e938145b", "filename": "src/librustc_target/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd0e2987eda697cfa1ec754021477f54a46645aa/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0e2987eda697cfa1ec754021477f54a46645aa/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=fd0e2987eda697cfa1ec754021477f54a46645aa", "patch": "@@ -1,46 +1,14 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let pre_link_args_msvc = vec![\n-        \"/NOLOGO\".to_string(),\n-        \"/NXCOMPAT\".to_string(),\n-        \"/APPCONTAINER\".to_string(),\n-        \"mincore.lib\".to_string(),\n-    ];\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n-    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n+    let mut opts = super::windows_msvc_base::opts();\n \n-    TargetOptions {\n-        function_sections: true,\n-        dynamic_linking: true,\n-        executables: true,\n-        dll_prefix: String::new(),\n-        dll_suffix: \".dll\".to_string(),\n-        exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: String::new(),\n-        staticlib_suffix: \".lib\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n-        is_like_windows: true,\n-        is_like_msvc: true,\n-        pre_link_args,\n-        crt_static_allows_dylibs: true,\n-        crt_static_respected: true,\n-        abi_return_struct_as_int: true,\n-        emit_debug_gdb_scripts: false,\n-        requires_uwtable: true,\n-        lld_flavor: LldFlavor::Link,\n-        // Currently we don't pass the /NODEFAULTLIB flag to the linker on MSVC\n-        // as there's been trouble in the past of linking the C++ standard\n-        // library required by LLVM. This likely needs to happen one day, but\n-        // in general Windows is also a more controlled environment than\n-        // Unix, so it's not necessarily as critical that this be implemented.\n-        //\n-        // Note that there are also some licensing worries about statically\n-        // linking some libraries which require a specific agreement, so it may\n-        // not ever be possible for us to pass this flag.\n-        no_default_libraries: false,\n+    let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n+    opts.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n+    opts.pre_link_args\n+        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n+        .unwrap()\n+        .extend(pre_link_args_msvc);\n \n-        ..Default::default()\n-    }\n+    opts\n }"}]}