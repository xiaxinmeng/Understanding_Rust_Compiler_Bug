{"sha": "dec24471bee1e791938b6307770d33554bea2c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzI0NDcxYmVlMWU3OTE5MzhiNjMwNzc3MGQzMzU1NGJlYTJjMzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-19T16:48:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-19T16:48:02Z"}, "message": "add Miri error variant for process exit", "tree": {"sha": "0ca8f05e7730f00e465499eeede07f268723d39e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ca8f05e7730f00e465499eeede07f268723d39e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec24471bee1e791938b6307770d33554bea2c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec24471bee1e791938b6307770d33554bea2c30", "html_url": "https://github.com/rust-lang/rust/commit/dec24471bee1e791938b6307770d33554bea2c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec24471bee1e791938b6307770d33554bea2c30/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2bbf7debaab60be33bd8008a71bca69576945a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bbf7debaab60be33bd8008a71bca69576945a0", "html_url": "https://github.com/rust-lang/rust/commit/a2bbf7debaab60be33bd8008a71bca69576945a0"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "cfc91a98e44f5522650cb2c9c9848c7426895ae4", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec24471bee1e791938b6307770d33554bea2c30/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec24471bee1e791938b6307770d33554bea2c30/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=dec24471bee1e791938b6307770d33554bea2c30", "patch": "@@ -229,6 +229,10 @@ pub enum InterpError<'tcx, O> {\n     /// match an existing variant.\n     MachineError(String),\n \n+    /// Not actually an interprer error -- used to signal that execution has exited\n+    /// with the given status code.\n+    Exit(i32),\n+\n     FunctionAbiMismatch(Abi, Abi),\n     FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n     FunctionRetMismatch(Ty<'tcx>, Ty<'tcx>),\n@@ -317,6 +321,8 @@ impl<'tcx, O> InterpError<'tcx, O> {\n         use self::InterpError::*;\n         match *self {\n             MachineError(ref inner) => inner,\n+            Exit(..) =>\n+                \"exited\",\n             FunctionAbiMismatch(..) | FunctionArgMismatch(..) | FunctionRetMismatch(..)\n             | FunctionArgCountMismatch =>\n                 \"tried to call a function through a function pointer of incompatible type\",\n@@ -515,6 +521,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n             InvalidDiscriminant(val) =>\n                 write!(f, \"encountered invalid enum discriminant {}\", val),\n+            Exit(code) =>\n+                write!(f, \"exited with status code {}\", code),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "b5bdc9e1c8c6e61f9ce0e8736c145e483fa7fde5", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dec24471bee1e791938b6307770d33554bea2c30/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec24471bee1e791938b6307770d33554bea2c30/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=dec24471bee1e791938b6307770d33554bea2c30", "patch": "@@ -148,6 +148,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 match diagnostic.error {\n                     // don't report these, they make no sense in a const prop context\n                     | MachineError(_)\n+                    | Exit(_)\n                     // at runtime these transformations might make sense\n                     // FIXME: figure out the rules and start linting\n                     | FunctionAbiMismatch(..)"}]}