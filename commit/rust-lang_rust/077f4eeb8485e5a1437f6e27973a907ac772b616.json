{"sha": "077f4eeb8485e5a1437f6e27973a907ac772b616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3N2Y0ZWViODQ4NWU1YTE0MzdmNmUyNzk3M2E5MDdhYzc3MmI2MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T23:30:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-16T23:30:30Z"}, "message": "Auto merge of #30567 - steffengy:master, r=alexcrichton\n\nAdd support to use functions exported using vectorcall.\nThis essentially only allows to pass a new LLVM calling convention\nfrom rust to LLVM.\n\n```rust\nextern \"vectorcall\" fn abc(param: c_void);\n```\n\nreferences\n----\nhttp://llvm.org/docs/doxygen/html/CallingConv_8h_source.html\nhttps://msdn.microsoft.com/en-us/library/dn375768.aspx", "tree": {"sha": "0a0fee02e688335a7c92c581415b4b9e2aad39e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0fee02e688335a7c92c581415b4b9e2aad39e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077f4eeb8485e5a1437f6e27973a907ac772b616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077f4eeb8485e5a1437f6e27973a907ac772b616", "html_url": "https://github.com/rust-lang/rust/commit/077f4eeb8485e5a1437f6e27973a907ac772b616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077f4eeb8485e5a1437f6e27973a907ac772b616/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f516dc7c1e48ff05c3c0649aa8f77d29a25e0b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f516dc7c1e48ff05c3c0649aa8f77d29a25e0b7", "html_url": "https://github.com/rust-lang/rust/commit/1f516dc7c1e48ff05c3c0649aa8f77d29a25e0b7"}, {"sha": "4396a2d6810e7ccc41fb618cec61b7318bf2e9e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4396a2d6810e7ccc41fb618cec61b7318bf2e9e1", "html_url": "https://github.com/rust-lang/rust/commit/4396a2d6810e7ccc41fb618cec61b7318bf2e9e1"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "6aec8d2a048aa8e95bdbcb84d91f6b3f4ef57209", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -478,6 +478,8 @@ are:\n * `aapcs`\n * `cdecl`\n * `fastcall`\n+* `vectorcall`\n+This is currently hidden behind the `abi_vectorcall` gate and is subject to change.\n * `Rust`\n * `rust-intrinsic`\n * `system`"}, {"sha": "f0fdae27ac7fb33ccd4728db2f1277ba0290dad5", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -2390,6 +2390,9 @@ The currently implemented features of the reference compiler are:\n \n * - `type_ascription` - Allows type ascription expressions `expr: Type`.\n \n+* - `abi_vectorcall` - Allows the usage of the vectorcall calling convention\n+                             (e.g. `extern \"vectorcall\" func fn_();`)\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about `#![feature]` directives which enabled\n the new feature (because the directive is no longer necessary). However, if a"}, {"sha": "fc7fa299fb8fae9546f9d8b499cb0417fa23ba4c", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -85,6 +85,7 @@ pub enum CallConv {\n     X86StdcallCallConv = 64,\n     X86FastcallCallConv = 65,\n     X86_64_Win64 = 79,\n+    X86_VectorCall = 80\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "b1f62477bb7672ef059e655f98ba78eaf1c9bfa4", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -35,7 +35,8 @@ use std::cmp;\n use std::iter::once;\n use libc::c_uint;\n use syntax::abi::{Cdecl, Aapcs, C, Win64, Abi};\n-use syntax::abi::{PlatformIntrinsic, RustIntrinsic, Rust, RustCall, Stdcall, Fastcall, System};\n+use syntax::abi::{PlatformIntrinsic, RustIntrinsic, Rust, RustCall, Stdcall};\n+use syntax::abi::{Fastcall, Vectorcall, System};\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::parse::token::{InternedString, special_idents};\n@@ -104,6 +105,7 @@ pub fn llvm_calling_convention(ccx: &CrateContext,\n \n         Stdcall => llvm::X86StdcallCallConv,\n         Fastcall => llvm::X86FastcallCallConv,\n+        Vectorcall => llvm::X86_VectorCall,\n         C => llvm::CCallConv,\n         Win64 => llvm::X86_64_Win64,\n "}, {"sha": "a16f232f4a1c10dd89e8963cb813fb398e11e0a3", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -39,6 +39,7 @@ pub enum Abi {\n     Cdecl,\n     Stdcall,\n     Fastcall,\n+    Vectorcall,\n     Aapcs,\n     Win64,\n \n@@ -85,6 +86,7 @@ const AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: Cdecl, name: \"cdecl\" },\n     AbiData {abi: Stdcall, name: \"stdcall\" },\n     AbiData {abi: Fastcall, name: \"fastcall\" },\n+    AbiData {abi: Vectorcall, name: \"vectorcall\"},\n     AbiData {abi: Aapcs, name: \"aapcs\" },\n     AbiData {abi: Win64, name: \"win64\" },\n "}, {"sha": "55087c257033756c01e2707ec32d69f066a8c5b3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -239,6 +239,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n \n     // Allows cfg(target_thread_local)\n     (\"cfg_target_thread_local\", \"1.7.0\", Some(29594), Active),\n+\n+    // rustc internal\n+    (\"abi_vectorcall\", \"1.7.0\", None, Active)\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -872,6 +875,11 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                     Abi::PlatformIntrinsic => {\n                         Some((\"platform_intrinsics\",\n                               \"platform intrinsics are experimental and possibly buggy\"))\n+                    },\n+                    Abi::Vectorcall => {\n+                        Some((\"abi_vectorcall\",\n+                            \"vectorcall is experimental and subject to change\"\n+                        ))\n                     }\n                     _ => None\n                 };\n@@ -1045,11 +1053,17 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"intrinsics are subject to change\")\n             }\n             FnKind::ItemFn(_, _, _, _, abi, _) |\n-            FnKind::Method(_, &ast::MethodSig { abi, .. }, _) if abi == Abi::RustCall => {\n-                self.gate_feature(\"unboxed_closures\",\n-                                  span,\n-                                  \"rust-call ABI is subject to change\")\n-            }\n+            FnKind::Method(_, &ast::MethodSig { abi, .. }, _) => match abi {\n+                Abi::RustCall => {\n+                    self.gate_feature(\"unboxed_closures\", span,\n+                        \"rust-call ABI is subject to change\");\n+                },\n+                Abi::Vectorcall => {\n+                    self.gate_feature(\"abi_vectorcall\", span,\n+                        \"vectorcall is experimental and subject to change\");\n+                },\n+                _ => {}\n+            },\n             _ => {}\n         }\n         visit::walk_fn(self, fn_kind, fn_decl, block, span);"}, {"sha": "79f3c8dc7762589a5d440a1011720b641f1da6f8", "filename": "src/test/compile-fail/feature-gate-abi-vectorcall.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-vectorcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-vectorcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-vectorcall.rs?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern \"vectorcall\" {   //~ ERROR vectorcall is experimental and subject to change\n+    fn bar();\n+}\n+\n+extern \"vectorcall\" fn baz() {  //~ ERROR vectorcall is experimental and subject to change\n+}\n+\n+fn main() {\n+}"}, {"sha": "e8a9f92a93d4aca505a34a75f3942cb6b5e734c3", "filename": "src/test/run-pass/extern-vectorcall.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Ftest%2Frun-pass%2Fextern-vectorcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077f4eeb8485e5a1437f6e27973a907ac772b616/src%2Ftest%2Frun-pass%2Fextern-vectorcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-vectorcall.rs?ref=077f4eeb8485e5a1437f6e27973a907ac772b616", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(abi_vectorcall)]\n+\n+trait A {\n+    extern \"vectorcall\" fn test1(i: i32);\n+}\n+\n+struct S;\n+\n+impl A for S {\n+    extern \"vectorcall\" fn test1(i: i32) {\n+        assert_eq!(i, 1);\n+    }\n+}\n+\n+extern \"vectorcall\" fn test2(i: i32) {\n+    assert_eq!(i, 2);\n+}\n+\n+fn main() {\n+    <S as A>::test1(1);\n+    test2(2);\n+}"}]}