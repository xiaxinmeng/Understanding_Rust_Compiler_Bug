{"sha": "4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTI3OWQwYjE2MGQ5OGMxNDI5Y2ExYTUyYjM3YWE3YTBhZjU3NzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-09T16:29:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-09T17:25:39Z"}, "message": "Infra for \"unit\" benchmarking", "tree": {"sha": "8b71d80a070120904b76fca78d8db45b3000e9b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b71d80a070120904b76fca78d8db45b3000e9b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "html_url": "https://github.com/rust-lang/rust/commit/4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c", "html_url": "https://github.com/rust-lang/rust/commit/9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c"}], "stats": {"total": 4103, "additions": 102, "deletions": 4001}, "files": [{"sha": "25f312fafb4af45b155c0950fba0d4fe47bcf254", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "patch": "@@ -1640,6 +1640,7 @@ name = \"test_utils\"\n version = \"0.0.0\"\n dependencies = [\n  \"dissimilar\",\n+ \"profile\",\n  \"rustc-hash\",\n  \"serde_json\",\n  \"stdx\","}, {"sha": "fb3afaedc3b69eb108fdf7ec1cdd4c562845bd82", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "patch": "@@ -1,7 +1,5 @@\n-use std::fs;\n-\n use expect_test::expect;\n-use test_utils::project_dir;\n+use test_utils::{bench, bench_fixture, skip_slow_tests};\n \n use super::{check_infer, check_types};\n \n@@ -617,12 +615,11 @@ hello\n }\n \n #[test]\n-#[ignore]\n-fn include_accidentally_quadratic() {\n-    let file = project_dir().join(\"crates/syntax/test_data/accidentally_quadratic\");\n-    let big_file = fs::read_to_string(file).unwrap();\n-    let big_file = vec![big_file; 10].join(\"\\n\");\n-\n+fn benchmark_include_macro() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+    let data = bench_fixture::big_struct();\n     let fixture = r#\"\n //- /main.rs\n #[rustc_builtin_macro]\n@@ -635,8 +632,12 @@ fn main() {\n                   //^ RegisterBlock\n }\n     \"#;\n-    let fixture = format!(\"{}\\n//- /foo.rs\\n{}\", fixture, big_file);\n-    check_types(&fixture);\n+    let fixture = format!(\"{}\\n//- /foo.rs\\n{}\", fixture, data);\n+\n+    {\n+        let _b = bench(\"include macro\");\n+        check_types(&fixture);\n+    }\n }\n \n #[test]"}, {"sha": "4a1229a31d0a0b46ad5f01d76a70ba6ef6737fce", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "patch": "@@ -1,7 +1,5 @@\n-use std::fs;\n-\n use expect_test::{expect_file, ExpectFile};\n-use test_utils::project_dir;\n+use test_utils::{bench, bench_fixture, skip_slow_tests};\n \n use crate::{fixture, FileRange, TextRange};\n \n@@ -228,15 +226,19 @@ fn bar() {\n }\n \n #[test]\n-fn accidentally_quadratic() {\n-    let file = project_dir().join(\"crates/syntax/test_data/accidentally_quadratic\");\n-    let src = fs::read_to_string(file).unwrap();\n+fn benchmark_syntax_highlighting() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n \n-    let (analysis, file_id) = fixture::file(&src);\n+    let fixture = bench_fixture::big_struct();\n+    let (analysis, file_id) = fixture::file(&fixture);\n \n-    // let t = std::time::Instant::now();\n-    let _ = analysis.highlight(file_id).unwrap();\n-    // eprintln!(\"elapsed: {:?}\", t.elapsed());\n+    let hash = {\n+        let _pt = bench(\"syntax highlighting\");\n+        analysis.highlight(file_id).unwrap().len()\n+    };\n+    assert_eq!(hash, 32009);\n }\n \n #[test]"}, {"sha": "428f83a627b2e597ffefe9f77e02abbe675f847b", "filename": "crates/syntax/test_data/accidentally_quadratic", "status": "removed", "additions": 0, "deletions": 3980, "changes": 3980, "blob_url": "https://github.com/rust-lang/rust/blob/9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c/crates%2Fsyntax%2Ftest_data%2Faccidentally_quadratic", "raw_url": "https://github.com/rust-lang/rust/raw/9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c/crates%2Fsyntax%2Ftest_data%2Faccidentally_quadratic", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Faccidentally_quadratic?ref=9ea2c96ddd0ad8c8898f1c65667a57a78ba2218c"}, {"sha": "2a65000b85db9b43ac1e53ef904dc175b65b2f94", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "patch": "@@ -17,3 +17,4 @@ serde_json = \"1.0.48\"\n rustc-hash = \"1.1.0\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }"}, {"sha": "41fcca635239b9d64f3eebc1c29b4fba2f559002", "filename": "crates/test_utils/src/bench_fixture.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fbench_fixture.rs?ref=4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "patch": "@@ -0,0 +1,28 @@\n+//! Generates large snippets of Rust code for usage in the benchmarks.\n+\n+use stdx::format_to;\n+\n+pub fn big_struct() -> String {\n+    let n = 1_000;\n+\n+    let mut buf = \"pub struct RegisterBlock {\".to_string();\n+    for i in 0..n {\n+        format_to!(buf, \"  /// Doc comment for {}.\\n\", i);\n+        format_to!(buf, \"  pub s{}: S{},\\n\", i, i);\n+    }\n+    buf.push_str(\"}\\n\\n\");\n+    for i in 0..n {\n+        format_to!(\n+            buf,\n+            \"\n+\n+#[repr(transparent)]\n+struct S{} {{\n+    field: u32,\n+}}\",\n+            i\n+        );\n+    }\n+\n+    buf\n+}"}, {"sha": "5be4a64fcec88e9f49c41ae99e61e449aa31fa38", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "patch": "@@ -8,6 +8,7 @@\n \n #[macro_use]\n pub mod mark;\n+pub mod bench_fixture;\n mod fixture;\n \n use std::{\n@@ -16,6 +17,7 @@ use std::{\n     path::PathBuf,\n };\n \n+use profile::StopWatch;\n use serde_json::Value;\n use stdx::lines_with_ends;\n use text_size::{TextRange, TextSize};\n@@ -406,3 +408,44 @@ pub fn format_diff(chunks: Vec<dissimilar::Chunk>) -> String {\n     }\n     buf\n }\n+\n+/// Utility for writing benchmark tests.\n+///\n+/// A benchmark test looks like this:\n+///\n+/// ```\n+/// #[test]\n+/// fn benchmark_foo() {\n+///     if skip_slow_tests() { return; }\n+///\n+///     let data = bench_fixture::some_fixture();\n+///     let analysis = some_setup();\n+///\n+///     let hash = {\n+///         let _b = bench(\"foo\");\n+///         actual_work(analysis)\n+///     };\n+///     assert_eq!(hash, 92);\n+/// }\n+/// ```\n+///\n+/// * We skip benchmarks by default, to save time.\n+///   Ideal benchmark time is 800 -- 1500 ms in debug.\n+/// * We don't count preparation as part of the benchmark\n+/// * The benchmark itself returns some kind of numeric hash.\n+///   The hash is used as a sanity check that some code is actually run.\n+///   Otherwise, it's too easy to win the benchmark by just doing nothing.\n+pub fn bench(label: &'static str) -> impl Drop {\n+    struct Bencher {\n+        sw: StopWatch,\n+        label: &'static str,\n+    }\n+\n+    impl Drop for Bencher {\n+        fn drop(&mut self) {\n+            eprintln!(\"{}: {}\", self.label, self.sw.elapsed())\n+        }\n+    }\n+\n+    Bencher { sw: StopWatch::start(), label }\n+}"}, {"sha": "01063824f362195e935d101fa93529e25ed2a8c1", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b1279d0b160d98c1429ca1a52b37aa7a0af5775/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=4b1279d0b160d98c1429ca1a52b37aa7a0af5775", "patch": "@@ -397,6 +397,11 @@ There's no additional checks in CI, formatting and tidy tests are run with `carg\n \n **Architecture Invariant:** tests do not depend on any kind of external resources, they are perfectly reproducible.\n \n+\n+### Performance Testing\n+\n+TBA, take a look at the `metrics` xtask and `#[test] fn benchmark_xxx()` functions.\n+\n ### Error Handling\n \n **Architecture Invariant:** core parts of rust-analyzer (`ide`/`hir`) don't interact with the outside world and thus can't fail."}]}