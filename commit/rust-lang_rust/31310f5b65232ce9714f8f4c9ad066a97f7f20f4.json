{"sha": "31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzEwZjViNjUyMzJjZTk3MTRmOGY0YzlhZDA2NmE5N2Y3ZjIwZjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-04T23:37:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-08T01:01:42Z"}, "message": "Allow tracking issues for lang features.\n\nThis is similar to the libs version, which allow an `issue` field in the\n`#[unstable]` attribute.\n\ncc #28244", "tree": {"sha": "7c8a780df6226d9845d3d53c2b23a3a59a0ab0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8a780df6226d9845d3d53c2b23a3a59a0ab0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "html_url": "https://github.com/rust-lang/rust/commit/31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c45f4f25129af3708b7f5509d4503f5cce5b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c45f4f25129af3708b7f5509d4503f5cce5b64", "html_url": "https://github.com/rust-lang/rust/commit/62c45f4f25129af3708b7f5509d4503f5cce5b64"}], "stats": {"total": 255, "additions": 145, "deletions": 110}, "files": [{"sha": "c6f3bcdf9ec0b991a82d4889ba45c2c814ac237c", "filename": "src/etc/featureck.py", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Fetc%2Ffeatureck.py", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Fetc%2Ffeatureck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ffeatureck.py?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -47,20 +47,24 @@\n                 is_feature_line = True\n \n         if is_feature_line:\n-            line = line.replace(\"(\", \"\").replace(\"),\", \"\").replace(\")\", \"\")\n+            # turn `    (\"foo\", \"1.0.0\", Some(10), Active)` into\n+            # `\"foo\", \"1.0.0\", Some(10), Active`\n+            line = line.strip(' ,()')\n             parts = line.split(\",\")\n-            if len(parts) != 3:\n+            if len(parts) != 4:\n                 print(\"error: unexpected number of components in line: \" + original_line)\n                 sys.exit(1)\n             feature_name = parts[0].strip().replace('\"', \"\")\n             since = parts[1].strip().replace('\"', \"\")\n-            status = parts[2].strip()\n+            issue = parts[2].strip()\n+            status = parts[3].strip()\n             assert len(feature_name) > 0\n             assert len(since) > 0\n+            assert len(issue) > 0\n             assert len(status) > 0\n \n             language_feature_names += [feature_name]\n-            language_features += [(feature_name, since, status)]\n+            language_features += [(feature_name, since, issue, status)]\n \n assert len(language_features) > 0\n \n@@ -158,7 +162,7 @@\n     status = \"unstable\"\n     stable_since = None\n \n-    if f[2] == \"Accepted\":\n+    if f[3] == \"Accepted\":\n         status = \"stable\"\n     if status == \"stable\":\n         stable_since = f[1]"}, {"sha": "942d8313ec24ee566e289e853802ea97cd4f3823", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -18,7 +18,7 @@ use util::nodemap::NodeMap;\n \n use syntax::{ast};\n use syntax::codemap::Span;\n-use syntax::feature_gate::emit_feature_err;\n+use syntax::feature_gate::{GateIssue, emit_feature_err};\n use rustc_front::visit::Visitor;\n use rustc_front::visit;\n use rustc_front::hir;\n@@ -143,7 +143,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n                 if !self.sess.features.borrow().static_recursion {\n                     emit_feature_err(&self.sess.parse_sess.span_diagnostic,\n                                      \"static_recursion\",\n-                                     *self.root_span, \"recursive static\");\n+                                     *self.root_span, GateIssue::Language, \"recursive static\");\n                 }\n             } else {\n                 span_err!(self.sess, *self.root_span, E0265, \"recursive constant\");"}, {"sha": "9c4697404201eac242c08128b6f458ce7aff2142", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -22,7 +22,7 @@ use syntax::parse::token::InternedString;\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::NodeId;\n-use syntax::feature_gate::emit_feature_err;\n+use syntax::feature_gate::{GateIssue, emit_feature_err};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n use rustc_front::hir;\n@@ -294,18 +294,14 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 self.used_features.insert(feature.clone(), attr::Unstable);\n \n                 if !self.active_features.contains(feature) {\n-                    let mut msg = match *reason {\n+                    let msg = match *reason {\n                         Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n                                                &feature, &r),\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n-                    if let Some(n) = issue {\n-                        use std::fmt::Write;\n-                        write!(&mut msg, \" (see issue #{})\", n).unwrap();\n-                    }\n \n                     emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n-                                      &feature, span, &msg);\n+                                      &feature, span, GateIssue::Library(issue), &msg);\n                 }\n             }\n             Some(&Stability { level, ref feature, .. }) => {"}, {"sha": "6f2d8345142be18291878d469a96ad2e7a56f493", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -70,7 +70,7 @@ use util::nodemap::FnvHashSet;\n use std::slice;\n use syntax::{abi, ast};\n use syntax::codemap::{Span, Pos};\n-use syntax::feature_gate::emit_feature_err;\n+use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token;\n \n use rustc_front::print::pprust;\n@@ -797,7 +797,7 @@ fn create_substs_for_ast_trait_ref<'a,'tcx>(this: &AstConv<'tcx>,\n             // only with `Fn()` etc.\n             if !this.tcx().sess.features.borrow().unboxed_closures && trait_def.paren_sugar {\n                 emit_feature_err(&this.tcx().sess.parse_sess.span_diagnostic,\n-                                 \"unboxed_closures\", span,\n+                                 \"unboxed_closures\", span, GateIssue::Language,\n                                  \"\\\n                     the precise format of `Fn`-family traits' type parameters is \\\n                     subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\");\n@@ -810,7 +810,7 @@ fn create_substs_for_ast_trait_ref<'a,'tcx>(this: &AstConv<'tcx>,\n             // only with `Fn()` etc.\n             if !this.tcx().sess.features.borrow().unboxed_closures && !trait_def.paren_sugar {\n                 emit_feature_err(&this.tcx().sess.parse_sess.span_diagnostic,\n-                                 \"unboxed_closures\", span,\n+                                 \"unboxed_closures\", span, GateIssue::Language,\n                                  \"\\\n                     parenthetical notation is only stable when used with `Fn`-family traits\");\n             }"}, {"sha": "f1aa8139ec1df3a8b0abfde52cdc0450297298ae", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -51,7 +51,9 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                        -> Box<base::MacResult+'cx> {\n     if !cx.ecfg.enable_asm() {\n         feature_gate::emit_feature_err(\n-            &cx.parse_sess.span_diagnostic, \"asm\", sp, feature_gate::EXPLAIN_ASM);\n+            &cx.parse_sess.span_diagnostic, \"asm\", sp,\n+            feature_gate::GateIssue::Language,\n+            feature_gate::EXPLAIN_ASM);\n         return DummyResult::expr(sp);\n     }\n "}, {"sha": "c31a767300cf4949b052e3c3a4e0050fff4242ec", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -23,6 +23,7 @@ pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]\n         feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n                                        \"concat_idents\",\n                                        sp,\n+                                       feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_CONCAT_IDENTS);\n         return base::DummyResult::expr(sp);\n     }"}, {"sha": "c7f582854aeef0dd034fc1be93741fdec39e1967", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -105,6 +105,7 @@ fn expand_derive(cx: &mut ExtCtxt,\n                     feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n                                                    \"custom_derive\",\n                                                    titem.span,\n+                                                   feature_gate::GateIssue::Language,\n                                                    feature_gate::EXPLAIN_CUSTOM_DERIVE);\n                     continue;\n                 }"}, {"sha": "1991124ae2671bfc72a48be42c2788cbb6afa742", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -778,6 +778,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                             &fld.cx.parse_sess.span_diagnostic,\n                             \"allow_internal_unstable\",\n                             it.span,\n+                            feature_gate::GateIssue::Language,\n                             feature_gate::EXPLAIN_ALLOW_INTERNAL_UNSTABLE)\n                     }\n \n@@ -1469,7 +1470,8 @@ pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n                     &fld.cx.parse_sess.span_diagnostic,\n                     \"type_macros\",\n                     t.span,\n-                    \"type macros are experimental (see issue: #27336)\");\n+                    feature_gate::GateIssue::Language,\n+                    \"type macros are experimental\");\n \n                 DummyResult::raw_ty(t.span)\n             }"}, {"sha": "5f7ce8d994172e0903295a21a5bfdd287f4c09ba", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -22,6 +22,7 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n         feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n                                        \"log_syntax\",\n                                        sp,\n+                                       feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_LOG_SYNTAX);\n         return base::DummyResult::any(sp);\n     }"}, {"sha": "ab34f41d932d5027a70cc1ed2839f6d62a206feb", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -24,6 +24,7 @@ pub fn expand_trace_macros(cx: &mut ExtCtxt,\n         feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n                                        \"trace_macros\",\n                                        sp,\n+                                       feature_gate::GateIssue::Language,\n                                        feature_gate::EXPLAIN_TRACE_MACROS);\n         return base::DummyResult::any(sp);\n     }"}, {"sha": "b3004d65f02971e6a6fecd3e60c9dc0a915d79b7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 117, "deletions": 90, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -47,147 +47,147 @@ use std::cmp;\n // stable (active).\n // NB: The featureck.py script parses this information directly out of the source\n // so take care when modifying it.\n-const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n-    (\"globs\", \"1.0.0\", Accepted),\n-    (\"macro_rules\", \"1.0.0\", Accepted),\n-    (\"struct_variant\", \"1.0.0\", Accepted),\n-    (\"asm\", \"1.0.0\", Active),\n-    (\"managed_boxes\", \"1.0.0\", Removed),\n-    (\"non_ascii_idents\", \"1.0.0\", Active),\n-    (\"thread_local\", \"1.0.0\", Active),\n-    (\"link_args\", \"1.0.0\", Active),\n-    (\"plugin_registrar\", \"1.0.0\", Active),\n-    (\"log_syntax\", \"1.0.0\", Active),\n-    (\"trace_macros\", \"1.0.0\", Active),\n-    (\"concat_idents\", \"1.0.0\", Active),\n-    (\"intrinsics\", \"1.0.0\", Active),\n-    (\"lang_items\", \"1.0.0\", Active),\n-\n-    (\"simd\", \"1.0.0\", Active),\n-    (\"default_type_params\", \"1.0.0\", Accepted),\n-    (\"quote\", \"1.0.0\", Active),\n-    (\"link_llvm_intrinsics\", \"1.0.0\", Active),\n-    (\"linkage\", \"1.0.0\", Active),\n-    (\"struct_inherit\", \"1.0.0\", Removed),\n-\n-    (\"quad_precision_float\", \"1.0.0\", Removed),\n-\n-    (\"rustc_diagnostic_macros\", \"1.0.0\", Active),\n-    (\"unboxed_closures\", \"1.0.0\", Active),\n-    (\"reflect\", \"1.0.0\", Active),\n-    (\"import_shadowing\", \"1.0.0\", Removed),\n-    (\"advanced_slice_patterns\", \"1.0.0\", Active),\n-    (\"tuple_indexing\", \"1.0.0\", Accepted),\n-    (\"associated_types\", \"1.0.0\", Accepted),\n-    (\"visible_private_types\", \"1.0.0\", Active),\n-    (\"slicing_syntax\", \"1.0.0\", Accepted),\n-    (\"box_syntax\", \"1.0.0\", Active),\n-    (\"placement_in_syntax\", \"1.0.0\", Active),\n-    (\"pushpop_unsafe\", \"1.2.0\", Active),\n-    (\"on_unimplemented\", \"1.0.0\", Active),\n-    (\"simd_ffi\", \"1.0.0\", Active),\n-    (\"allocator\", \"1.0.0\", Active),\n-    (\"needs_allocator\", \"1.4.0\", Active),\n-    (\"linked_from\", \"1.3.0\", Active),\n-\n-    (\"if_let\", \"1.0.0\", Accepted),\n-    (\"while_let\", \"1.0.0\", Accepted),\n-\n-    (\"plugin\", \"1.0.0\", Active),\n-    (\"start\", \"1.0.0\", Active),\n-    (\"main\", \"1.0.0\", Active),\n-\n-    (\"fundamental\", \"1.0.0\", Active),\n+const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status)] = &[\n+    (\"globs\", \"1.0.0\", None, Accepted),\n+    (\"macro_rules\", \"1.0.0\", None, Accepted),\n+    (\"struct_variant\", \"1.0.0\", None, Accepted),\n+    (\"asm\", \"1.0.0\", None, Active),\n+    (\"managed_boxes\", \"1.0.0\", None, Removed),\n+    (\"non_ascii_idents\", \"1.0.0\", None, Active),\n+    (\"thread_local\", \"1.0.0\", None, Active),\n+    (\"link_args\", \"1.0.0\", None, Active),\n+    (\"plugin_registrar\", \"1.0.0\", None, Active),\n+    (\"log_syntax\", \"1.0.0\", None, Active),\n+    (\"trace_macros\", \"1.0.0\", None, Active),\n+    (\"concat_idents\", \"1.0.0\", None, Active),\n+    (\"intrinsics\", \"1.0.0\", None, Active),\n+    (\"lang_items\", \"1.0.0\", None, Active),\n+\n+    (\"simd\", \"1.0.0\", Some(27731), Active),\n+    (\"default_type_params\", \"1.0.0\", None, Accepted),\n+    (\"quote\", \"1.0.0\", None, Active),\n+    (\"link_llvm_intrinsics\", \"1.0.0\", None, Active),\n+    (\"linkage\", \"1.0.0\", None, Active),\n+    (\"struct_inherit\", \"1.0.0\", None, Removed),\n+\n+    (\"quad_precision_float\", \"1.0.0\", None, Removed),\n+\n+    (\"rustc_diagnostic_macros\", \"1.0.0\", None, Active),\n+    (\"unboxed_closures\", \"1.0.0\", None, Active),\n+    (\"reflect\", \"1.0.0\", None, Active),\n+    (\"import_shadowing\", \"1.0.0\", None, Removed),\n+    (\"advanced_slice_patterns\", \"1.0.0\", None, Active),\n+    (\"tuple_indexing\", \"1.0.0\", None, Accepted),\n+    (\"associated_types\", \"1.0.0\", None, Accepted),\n+    (\"visible_private_types\", \"1.0.0\", None, Active),\n+    (\"slicing_syntax\", \"1.0.0\", None, Accepted),\n+    (\"box_syntax\", \"1.0.0\", None, Active),\n+    (\"placement_in_syntax\", \"1.0.0\", None, Active),\n+    (\"pushpop_unsafe\", \"1.2.0\", None, Active),\n+    (\"on_unimplemented\", \"1.0.0\", None, Active),\n+    (\"simd_ffi\", \"1.0.0\", None, Active),\n+    (\"allocator\", \"1.0.0\", None, Active),\n+    (\"needs_allocator\", \"1.4.0\", None, Active),\n+    (\"linked_from\", \"1.3.0\", None, Active),\n+\n+    (\"if_let\", \"1.0.0\", None, Accepted),\n+    (\"while_let\", \"1.0.0\", None, Accepted),\n+\n+    (\"plugin\", \"1.0.0\", None, Active),\n+    (\"start\", \"1.0.0\", None, Active),\n+    (\"main\", \"1.0.0\", None, Active),\n+\n+    (\"fundamental\", \"1.0.0\", None, Active),\n \n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n-    (\"issue_5723_bootstrap\", \"1.0.0\", Accepted),\n+    (\"issue_5723_bootstrap\", \"1.0.0\", None, Accepted),\n \n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (\"opt_out_copy\", \"1.0.0\", Removed),\n+    (\"opt_out_copy\", \"1.0.0\", None, Removed),\n \n     // OIBIT specific features\n-    (\"optin_builtin_traits\", \"1.0.0\", Active),\n+    (\"optin_builtin_traits\", \"1.0.0\", None, Active),\n \n     // macro reexport needs more discussion and stabilization\n-    (\"macro_reexport\", \"1.0.0\", Active),\n+    (\"macro_reexport\", \"1.0.0\", None, Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n-    (\"test_accepted_feature\", \"1.0.0\", Accepted),\n-    (\"test_removed_feature\", \"1.0.0\", Removed),\n+    (\"test_accepted_feature\", \"1.0.0\", None, Accepted),\n+    (\"test_removed_feature\", \"1.0.0\", None, Removed),\n \n     // Allows use of #[staged_api]\n-    (\"staged_api\", \"1.0.0\", Active),\n+    (\"staged_api\", \"1.0.0\", None, Active),\n \n     // Allows using items which are missing stability attributes\n-    (\"unmarked_api\", \"1.0.0\", Active),\n+    (\"unmarked_api\", \"1.0.0\", None, Active),\n \n     // Allows using #![no_std]\n-    (\"no_std\", \"1.0.0\", Active),\n+    (\"no_std\", \"1.0.0\", None, Active),\n \n     // Allows using #![no_core]\n-    (\"no_core\", \"1.3.0\", Active),\n+    (\"no_core\", \"1.3.0\", None, Active),\n \n     // Allows using `box` in patterns; RFC 469\n-    (\"box_patterns\", \"1.0.0\", Active),\n+    (\"box_patterns\", \"1.0.0\", None, Active),\n \n     // Allows using the unsafe_no_drop_flag attribute (unlikely to\n     // switch to Accepted; see RFC 320)\n-    (\"unsafe_no_drop_flag\", \"1.0.0\", Active),\n+    (\"unsafe_no_drop_flag\", \"1.0.0\", None, Active),\n \n     // Allows the use of custom attributes; RFC 572\n-    (\"custom_attribute\", \"1.0.0\", Active),\n+    (\"custom_attribute\", \"1.0.0\", None, Active),\n \n     // Allows the use of #[derive(Anything)] as sugar for\n     // #[derive_Anything].\n-    (\"custom_derive\", \"1.0.0\", Active),\n+    (\"custom_derive\", \"1.0.0\", None, Active),\n \n     // Allows the use of rustc_* attributes; RFC 572\n-    (\"rustc_attrs\", \"1.0.0\", Active),\n+    (\"rustc_attrs\", \"1.0.0\", None, Active),\n \n     // Allows the use of #[allow_internal_unstable]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n-    (\"allow_internal_unstable\", \"1.0.0\", Active),\n+    (\"allow_internal_unstable\", \"1.0.0\", None, Active),\n \n     // #23121. Array patterns have some hazards yet.\n-    (\"slice_patterns\", \"1.0.0\", Active),\n+    (\"slice_patterns\", \"1.0.0\", None, Active),\n \n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (\"negate_unsigned\", \"1.0.0\", Active),\n+    (\"negate_unsigned\", \"1.0.0\", None, Active),\n \n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n-    (\"associated_consts\", \"1.0.0\", Active),\n+    (\"associated_consts\", \"1.0.0\", None, Active),\n \n     // Allows the definition of `const fn` functions.\n-    (\"const_fn\", \"1.2.0\", Active),\n+    (\"const_fn\", \"1.2.0\", None, Active),\n \n     // Allows using #[prelude_import] on glob `use` items.\n-    (\"prelude_import\", \"1.2.0\", Active),\n+    (\"prelude_import\", \"1.2.0\", None, Active),\n \n     // Allows the definition recursive static items.\n-    (\"static_recursion\", \"1.3.0\", Active),\n+    (\"static_recursion\", \"1.3.0\", None, Active),\n \n     // Allows default type parameters to influence type inference.\n-    (\"default_type_parameter_fallback\", \"1.3.0\", Active),\n+    (\"default_type_parameter_fallback\", \"1.3.0\", None, Active),\n \n     // Allows associated type defaults\n-    (\"associated_type_defaults\", \"1.2.0\", Active),\n+    (\"associated_type_defaults\", \"1.2.0\", None, Active),\n     // Allows macros to appear in the type position.\n \n-    (\"type_macros\", \"1.3.0\", Active),\n+    (\"type_macros\", \"1.3.0\", Some(27336), Active),\n \n     // allow `repr(simd)`, and importing the various simd intrinsics\n-    (\"repr_simd\", \"1.4.0\", Active),\n+    (\"repr_simd\", \"1.4.0\", Some(27731), Active),\n \n     // Allows cfg(target_feature = \"...\").\n-    (\"cfg_target_feature\", \"1.4.0\", Active),\n+    (\"cfg_target_feature\", \"1.4.0\", None, Active),\n \n     // allow `extern \"platform-intrinsic\" { ... }`\n-    (\"platform_intrinsics\", \"1.4.0\", Active),\n+    (\"platform_intrinsics\", \"1.4.0\", Some(27731), Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -386,7 +386,7 @@ impl GatedCfg {\n         let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n         if !has_feature(features) {\n             let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n-            emit_feature_err(diagnostic, feature, self.span, &explain);\n+            emit_feature_err(diagnostic, feature, self.span, GateIssue::Language, &explain);\n         }\n     }\n }\n@@ -488,21 +488,21 @@ pub fn check_for_box_syntax(f: Option<&Features>, diag: &SpanHandler, span: Span\n     if let Some(&Features { allow_box: true, .. }) = f {\n         return;\n     }\n-    emit_feature_err(diag, \"box_syntax\", span, EXPLAIN_BOX_SYNTAX);\n+    emit_feature_err(diag, \"box_syntax\", span, GateIssue::Language, EXPLAIN_BOX_SYNTAX);\n }\n \n pub fn check_for_placement_in(f: Option<&Features>, diag: &SpanHandler, span: Span) {\n     if let Some(&Features { allow_placement_in: true, .. }) = f {\n         return;\n     }\n-    emit_feature_err(diag, \"placement_in_syntax\", span, EXPLAIN_PLACEMENT_IN);\n+    emit_feature_err(diag, \"placement_in_syntax\", span, GateIssue::Language, EXPLAIN_PLACEMENT_IN);\n }\n \n pub fn check_for_pushpop_syntax(f: Option<&Features>, diag: &SpanHandler, span: Span) {\n     if let Some(&Features { allow_pushpop_unsafe: true, .. }) = f {\n         return;\n     }\n-    emit_feature_err(diag, \"pushpop_unsafe\", span, EXPLAIN_PUSHPOP_UNSAFE);\n+    emit_feature_err(diag, \"pushpop_unsafe\", span, GateIssue::Language, EXPLAIN_PUSHPOP_UNSAFE);\n }\n \n struct Context<'a> {\n@@ -522,7 +522,7 @@ impl<'a> Context<'a> {\n         let has_feature = self.has_feature(feature);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", feature, span, has_feature);\n         if !has_feature {\n-            emit_feature_err(self.span_handler, feature, span, explain);\n+            emit_feature_err(self.span_handler, feature, span, GateIssue::Language, explain);\n         }\n     }\n     fn has_feature(&self, feature: &str) -> bool {\n@@ -576,8 +576,35 @@ impl<'a> Context<'a> {\n     }\n }\n \n-pub fn emit_feature_err(diag: &SpanHandler, feature: &str, span: Span, explain: &str) {\n-    diag.span_err(span, explain);\n+fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n+    let info = KNOWN_FEATURES.iter()\n+                              .find(|t| t.0 == feature)\n+                              .unwrap();\n+    let issue = info.2;\n+    if let Active = info.3 {\n+        // FIXME (#28244): enforce that active features have issue numbers\n+        // assert!(issue.is_some())\n+    }\n+    issue\n+}\n+\n+pub enum GateIssue {\n+    Language,\n+    Library(Option<u32>)\n+}\n+\n+pub fn emit_feature_err(diag: &SpanHandler, feature: &str, span: Span, issue: GateIssue,\n+                        explain: &str) {\n+    let issue = match issue {\n+        GateIssue::Language => find_lang_feature_issue(feature),\n+        GateIssue::Library(lib) => lib,\n+    };\n+\n+    if let Some(n) = issue {\n+        diag.span_err(span, &format!(\"{} (see issue #{})\", explain, n));\n+    } else {\n+        diag.span_err(span, explain);\n+    }\n \n     // #23973: do not suggest `#![feature(...)]` if we are in beta/stable\n     if option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some() { return; }\n@@ -948,14 +975,14 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n                         }\n                     };\n                     match KNOWN_FEATURES.iter()\n-                                        .find(|& &(n, _, _)| name == n) {\n-                        Some(&(name, _, Active)) => {\n+                                        .find(|& &(n, _, _, _)| name == n) {\n+                        Some(&(name, _, _, Active)) => {\n                             cx.enable_feature(name);\n                         }\n-                        Some(&(_, _, Removed)) => {\n+                        Some(&(_, _, _, Removed)) => {\n                             span_handler.span_err(mi.span, \"feature has been removed\");\n                         }\n-                        Some(&(_, _, Accepted)) => {\n+                        Some(&(_, _, _, Accepted)) => {\n                             accepted_features.push(mi.span);\n                         }\n                         None => {"}, {"sha": "d51176a925d07de6fa96e52543a88263c91aa659", "filename": "src/test/compile-fail/type-macros-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31310f5b65232ce9714f8f4c9ad066a97f7f20f4/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs?ref=31310f5b65232ce9714f8f4c9ad066a97f7f20f4", "patch": "@@ -14,7 +14,7 @@ macro_rules! Id {\n \n struct Foo<T> {\n     x: Id!(T)\n-    //~^ ERROR: type macros are experimental (see issue: #27336)\n+    //~^ ERROR: type macros are experimental (see issue #27336)\n }\n \n fn main() {"}]}