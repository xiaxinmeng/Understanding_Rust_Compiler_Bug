{"sha": "0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmZmNDMyZGM4M2U1Njc1MTYzYjFjMjljZTczZGJjNWUxOGJhMjQ=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-08-25T02:08:48Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-30T16:54:02Z"}, "message": "Desugar 'if let' into the appropriate 'match'", "tree": {"sha": "032c5323eb135364686c52ab01695e397f4a7c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032c5323eb135364686c52ab01695e397f4a7c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "html_url": "https://github.com/rust-lang/rust/commit/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d8cfd53b513d999ffff22f17e3066a30a8ed949", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8cfd53b513d999ffff22f17e3066a30a8ed949", "html_url": "https://github.com/rust-lang/rust/commit/5d8cfd53b513d999ffff22f17e3066a30a8ed949"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "1f0171de351ee6ebd2dc1de8b249605bec814dab", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -222,6 +222,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_node(expr.id, [then_exit, else_exit])           // 4, 5\n             }\n \n+            ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+\n             ast::ExprWhile(ref cond, ref body, _) => {\n                 //\n                 //         [pred]"}, {"sha": "875416feb2e4e19c446281bcaee08c48375d3721", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -374,6 +374,8 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,TYPER> {\n                 }\n             }\n \n+            ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+\n             ast::ExprMatch(ref discr, ref arms) => {\n                 let discr_cmt = return_if_err!(self.mc.cat_expr(&**discr));\n                 self.borrow_expr(&**discr, ty::ReEmpty, ty::ImmBorrow, MatchDiscriminant);"}, {"sha": "061f110afa906b04adf8d5bac0292e1713f54921", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -481,6 +481,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         visit::walk_expr(ir, expr);\n       }\n+      ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n       ExprForLoop(ref pat, _, _, _) => {\n         pat_util::pat_bindings(&ir.tcx.def_map, &**pat, |bm, p_id, sp, path1| {\n             debug!(\"adding local variable {} from for loop with bm {:?}\",\n@@ -1011,6 +1012,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_expr(&**cond, ln)\n           }\n \n+          ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+\n           ExprWhile(ref cond, ref blk, _) => {\n             self.propagate_through_loop(expr, WhileLoop(&**cond), &**blk, succ)\n           }\n@@ -1470,6 +1473,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ExprPath(..) | ExprBox(..) => {\n         visit::walk_expr(this, expr);\n       }\n+      ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\")\n     }\n }\n "}, {"sha": "d5ada0c5411a33fc932f041da2f18f16035ec492", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -505,6 +505,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           ast::ExprForLoop(..) => {\n             Ok(self.cat_rvalue_node(expr.id(), expr.span(), expr_ty))\n           }\n+\n+          ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\")\n         }\n     }\n "}, {"sha": "5221faa598c66f4ddddc36bc348fd2b6939db943", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -3576,6 +3576,11 @@ fn populate_scope_map(cx: &CrateContext,\n                 }\n             }\n \n+            ast::ExprIfLet(..) => {\n+                cx.sess().span_bug(exp.span, \"debuginfo::populate_scope_map() - \\\n+                                              Found unexpanded if-let.\");\n+            }\n+\n             ast::ExprWhile(ref cond_exp, ref loop_body, _) => {\n                 walk_expr(cx, &**cond_exp, scope_stack, scope_map);\n "}, {"sha": "b55c3039ac8e38ce2e74e41d6d73c57ea22f73ea", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -3634,6 +3634,7 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         ast::ExprLit(ref lit) if lit_is_str(&**lit) => {\n             RvalueDpsExpr\n         }\n+        ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n \n         ast::ExprCast(..) => {\n             match tcx.node_types.borrow().find(&(expr.id as uint)) {"}, {"sha": "566203834080bb16d57c44e52ab2d018ce9486be", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -4106,6 +4106,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         check_then_else(fcx, &**cond, &**then_blk, opt_else_expr.as_ref().map(|e| &**e),\n                         id, expr.span, expected);\n       }\n+      ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n       ast::ExprWhile(ref cond, ref body, _) => {\n         check_expr_has_type(fcx, &**cond, ty::mk_bool());\n         check_block_no_value(fcx, &**body);"}, {"sha": "394833372a62a71e29443b9bf5c05045ae4617be", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -293,6 +293,7 @@ mod svh_visitor {\n             ExprForLoop(..)          => SawExprForLoop,\n \n             // just syntactic artifacts, expanded away by time of SVH.\n+            ExprIfLet(..)            => unreachable!(),\n             ExprMac(..)              => unreachable!(),\n         }\n     }"}, {"sha": "341be15b739fab3cadb46e82448e95cc713575e4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6ff432dc83e5675163b1c29ce73dbc5e18ba24/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0e6ff432dc83e5675163b1c29ce73dbc5e18ba24", "patch": "@@ -39,7 +39,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n     e.and_then(|ast::Expr {id, node, span}| match node {\n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n-        ExprMac(mac) => {\n+        ast::ExprMac(mac) => {\n             let expanded_expr = match expand_mac_invoc(mac, span,\n                                                        |r| r.make_expr(),\n                                                        mark_expr, fld) {\n@@ -67,6 +67,95 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             fld.cx.expr(span, ast::ExprWhile(cond, body, opt_ident))\n         }\n \n+        // Desugar ExprIfLet\n+        // From: `if let <pat> = <expr> <body> [<elseopt>]`\n+        ast::ExprIfLet(pat, expr, body, mut elseopt) => {\n+            let span = e.span;\n+\n+            // to:\n+            //\n+            //   match <expr> {\n+            //     <pat> => <body>,\n+            //     [_ if <elseopt_if_cond> => <elseopt_if_body>,]\n+            //     _ => [<elseopt> | ()]\n+            //   }\n+\n+            // `<pat> => <body>`\n+            let pat_arm = {\n+                let body_expr = fld.cx.expr_block(body);\n+                fld.cx.arm(pat.span, vec![pat], body_expr)\n+            };\n+\n+            // `[_ if <elseopt_if_cond> => <elseopt_if_body>,]`\n+            let else_if_arms = {\n+                let mut arms = vec![];\n+                loop {\n+                    // NOTE: replace with 'if let' after snapshot\n+                    match elseopt {\n+                        Some(els) => match els.node {\n+                            // else if\n+                            ast::ExprIf(cond, then, elseopt_) => {\n+                                let pat_under = fld.cx.pat_wild(span);\n+                                elseopt = elseopt_;\n+                                arms.push(ast::Arm {\n+                                    attrs: vec![],\n+                                    pats: vec![pat_under],\n+                                    guard: Some(cond),\n+                                    body: fld.cx.expr_block(then)\n+                                });\n+                            }\n+                            _ => break\n+                        },\n+                        None => break\n+                    }\n+                }\n+                arms\n+            };\n+\n+            // `_ => [<elseopt> | ()]`\n+            let else_arm = {\n+                let pat_under = fld.cx.pat_wild(span);\n+                let else_expr = match elseopt {\n+                    Some(els) => els,\n+                    None => fld.cx.expr_lit(span, ast::LitNil)\n+                };\n+                fld.cx.arm(span, vec![pat_under], else_expr)\n+            };\n+\n+            let mut arms = Vec::with_capacity(else_if_arms.len() + 2);\n+            arms.push(pat_arm);\n+            arms.push_all_move(else_if_arms);\n+            arms.push(else_arm);\n+\n+            let match_expr = fld.cx.expr_match(span, expr, arms);\n+            fld.fold_expr(match_expr)\n+        }\n+\n+        // Desugar support for ExprIfLet in the ExprIf else position\n+        ast::ExprIf(cond, blk, mut elseopt) => {\n+            // NOTE: replace with 'if let' after snapshot\n+            match elseopt {\n+                Some(els) => match els.node {\n+                    ast::ExprIfLet(..) => {\n+                        // wrap the if-let expr in a block\n+                        let blk = P(ast::Block {\n+                            view_items: vec![],\n+                            stmts: vec![],\n+                            expr: Some(els),\n+                            id: ast::DUMMY_NODE_ID,\n+                            rules: ast::DefaultBlock,\n+                            span: els.span\n+                        });\n+                        elseopt = Some(fld.cx.expr_block(blk));\n+                    }\n+                    _ => ()\n+                },\n+                None => ()\n+            };\n+            let if_expr = fld.cx.expr(e.span, ast::ExprIf(cond, blk, elseopt));\n+            noop_fold_expr(if_expr, fld)\n+        }\n+\n         ast::ExprLoop(loop_block, opt_ident) => {\n             let (loop_block, opt_ident) = expand_loop_block(loop_block, opt_ident, fld);\n             fld.cx.expr(span, ast::ExprLoop(loop_block, opt_ident))"}]}