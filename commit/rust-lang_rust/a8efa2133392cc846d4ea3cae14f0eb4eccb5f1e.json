{"sha": "a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZWZhMjEzMzM5MmNjODQ2ZDRlYTNjYWUxNGYwZWI0ZWNjYjVmMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T14:18:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-19T14:18:42Z"}, "message": "auto merge of #5014 : Kimundi/rust/incoming, r=graydon\n\nThis implements a rust tool similar to go's go tool. It acts as a central hub for the tools rustc, rustdoc, rustpkg, rusti, and also provides shortcuts for directly compiling and running a source file either as a normal or a test executable. Default usage message:\r\n\r\n```\r\nThe rust tool is a convenience for managing rust source code.\r\nIt acts as a shortcut for programs of the rust tool chain.\r\n\r\nUsage:\trust <command> [arguments]\r\n\r\nThe commands are:\r\n\r\n    build   compile rust source files\r\n    run     build a executable, and run it\r\n    test    build a test executable, and run it\r\n    doc     generate documentation from doc comments\r\n    pkg     download, build, install rust packages\r\n    sketch  run a rust interpreter\r\n    help    show detailed usage of a command\r\n\r\nUse \"rust help <command>\" for more information about a command.\r\n```", "tree": {"sha": "a369332e05c39c4e6df45c778eac017f0e0d7102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a369332e05c39c4e6df45c778eac017f0e0d7102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "html_url": "https://github.com/rust-lang/rust/commit/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ee95e943163d8d3dad439bfb0ce94e3e9c9aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ee95e943163d8d3dad439bfb0ce94e3e9c9aa4", "html_url": "https://github.com/rust-lang/rust/commit/67ee95e943163d8d3dad439bfb0ce94e3e9c9aa4"}, {"sha": "702a6f7a189a3b7921c622b0ea2e0aa5111c94c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/702a6f7a189a3b7921c622b0ea2e0aa5111c94c8", "html_url": "https://github.com/rust-lang/rust/commit/702a6f7a189a3b7921c622b0ea2e0aa5111c94c8"}], "stats": {"total": 313, "additions": 306, "deletions": 7}, "files": [{"sha": "30aefd02cd2da14fc67ff8f670c53c7d36719961", "filename": "Makefile.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -134,6 +134,7 @@ CFG_LIBFUZZER :=$(call CFG_LIB_NAME,fuzzer)\n CFG_LIBRUSTPKG :=$(call CFG_LIB_NAME,rustpkg)\n CFG_LIBRUSTDOC :=$(call CFG_LIB_NAME,rustdoc)\n CFG_LIBRUSTI :=$(call CFG_LIB_NAME,rusti)\n+CFG_LIBRUST :=$(call CFG_LIB_NAME,rust)\n \n STDLIB_GLOB :=$(call CFG_LIB_GLOB,std)\n CORELIB_GLOB :=$(call CFG_LIB_GLOB,core)\n@@ -143,6 +144,7 @@ LIBFUZZER_GLOB :=$(call CFG_LIB_GLOB,fuzzer)\n LIBRUSTPKG_GLOB :=$(call CFG_LIB_GLOB,rustpkg)\n LIBRUSTDOC_GLOB :=$(call CFG_LIB_GLOB,rustdoc)\n LIBRUSTI_GLOB :=$(call CFG_LIB_GLOB,rusti)\n+LIBRUST_GLOB :=$(call CFG_LIB_GLOB,rust)\n STDLIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,std)\n CORELIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,core)\n LIBRUSTC_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustc)\n@@ -151,6 +153,7 @@ LIBFUZZER_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,fuzzer)\n LIBRUSTPKG_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustpkg)\n LIBRUSTDOC_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustdoc)\n LIBRUSTI_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rusti)\n+LIBRUST_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rust)\n \n # version-string calculation\n CFG_GIT_DIR := $(CFG_SRC_DIR).git\n@@ -374,18 +377,21 @@ CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustpkg$$(X) \\\n \t$$(HBIN$(1)_H_$(3))/rustdoc$$(X) \\\n \t$$(HBIN$(1)_H_$(3))/rusti$$(X) \\\n+\t$$(HBIN$(1)_H_$(3))/rust$$(X) \\\n \t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBFUZZER) \\\n \t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTPKG) \\\n \t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTDOC) \\\n \t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTI) \\\n+\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUST) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)  \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX)  \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBFUZZER) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTPKG) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTDOC) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTI)\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTI) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUST)\n \n ifeq ($(1),0)\n # Don't run the the stage0 compiler under valgrind - that ship has sailed"}, {"sha": "f02e2427a0c96b766785eadf9cc82418bbacde42", "filename": "mk/clean.mk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -68,6 +68,7 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/serializer$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustdoc$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rusti$(X)\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rust$(X)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBFUZZER)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTPKG)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTDOC)\n@@ -77,6 +78,7 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTI)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUST)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CORELIB_GLOB)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB)\n@@ -85,6 +87,7 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTI_GLOB)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUST_GLOB)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/libstd.rlib\n "}, {"sha": "3684b9c45441fcd56d057fdf21c61a3843c6dc43", "filename": "mk/dist.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -27,6 +27,7 @@ PKG_FILES := \\\n       driver                                   \\\n       librustpkg                               \\\n       librusti                                 \\\n+      librust                                  \\\n       librustc                                 \\\n       compiletest                              \\\n       etc                                      \\"}, {"sha": "ebbe5f007f1571c4b5a8782512f550c2c89737c7", "filename": "mk/install.mk", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -60,6 +60,8 @@ install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTDOC_GLOB))\n \t$$(Q)$$(call INSTALL_LIB, \\\n \t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTI_GLOB))\n+\t$$(Q)$$(call INSTALL_LIB, \\\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUST_GLOB))\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),libmorestack.a)\n \n endef\n@@ -90,15 +92,18 @@ install-host: $(CSREQ$(ISTAGE)_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X))\n \t$(Q)$(call INSTALL,$(HB2),$(PHB),rusti$(X))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rust$(X))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTC))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTPKG))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTDOC))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTI))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUST))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(CORELIB_GLOB))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(STDLIB_GLOB))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTC_GLOB))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBSYNTAX_GLOB))\n \t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTI_GLOB))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUST_GLOB))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM))\n \t$(Q)$(call INSTALL,$(S)/man, \\\n@@ -114,12 +119,14 @@ uninstall:\n \t$(Q)rm -f $(PHB)/rustc$(X)\n \t$(Q)rm -f $(PHB)/rustpkg$(X)\n \t$(Q)rm -f $(PHB)/rusti$(X)\n+\t$(Q)rm -f $(PHB)/rust$(X)\n \t$(Q)rm -f $(PHB)/rustdoc$(X)\n \t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM)\n \t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTPKG)\n \t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTC)\n \t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTDOC)\n \t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTI)\n+\t$(Q)rm -f $(PHL)/$(CFG_LIBRUST)\n \t$(Q)rm -f $(PHL)/$(CFG_RUNTIME)\n \t$(Q)for i in \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(CORELIB_GLOB)) \\\n@@ -129,6 +136,7 @@ uninstall:\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB)) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTDOC_GLOB)) \\\n           $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTI_GLOB)) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUST_GLOB)) \\\n         ; \\\n         do rm -f $$i ; \\\n         done"}, {"sha": "653cabfce5f8808154dc268857b6405fde0ec819", "filename": "mk/pp.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -19,7 +19,8 @@ else\n                          $(S)src/test/*/*/*.rs) \\\n               $(wildcard $(S)src/fuzzer/*.rs)   \\\n               $(wildcard $(S)src/rustpkg/*.rs) \\\n-              $(wildcard $(S)src/rusti/*.rs)\n+              $(wildcard $(S)src/rusti/*.rs) \\\n+              $(wildcard $(S)src/rust/*.rs)\n \n   PP_INPUTS_FILTERED = $(shell echo $(PP_INPUTS) | xargs grep -L \\\n                        \"no-reformat\\|xfail-pretty\\|xfail-test\")"}, {"sha": "116f6ffe56804c154ca763a3881373f242b98ee5", "filename": "mk/tests.mk", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -14,7 +14,7 @@\n ######################################################################\n \n # The names of crates that must be tested\n-TEST_CRATES = core std syntax rustc rustdoc rusti rustpkg\n+TEST_CRATES = core std syntax rustc rustdoc rusti rust rustpkg\n \n # Markdown files under doc/ that should have their code extracted and run\n DOC_TEST_NAMES = tutorial tutorial-ffi tutorial-macros tutorial-borrowed-ptr tutorial-tasks rust\n@@ -241,6 +241,12 @@ $(3)/test/rustitest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n+$(3)/test/rusttest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+\t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n+\n $(3)/test/rustdoctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n@@ -464,20 +470,20 @@ $(foreach host,$(CFG_TARGET_TRIPLES), \\\n \n define DEF_RUN_DOC_TEST\n \n-DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-$(4) := \\\n+DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-doc-$(4) := \\\n         $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3))\t\\\n         --src-base $(3)/test/doc-$(4)/\t\\\n         --build-base $(3)/test/doc-$(4)/\t\\\n         --mode run-pass\n \n-check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n+check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4))\n \n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): \\\n \t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n                 doc-$(4)-extract$(3)\n \t@$$(call E, run doc-$(4): $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n-                $$(DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n+                $$(DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-doc-$(4)) \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),doc-$(4)) \\\n                 && touch $$@\n "}, {"sha": "22f109be47febcba8c07959ce361c2c46ef46f46", "filename": "mk/tools.mk", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -30,6 +30,10 @@ RUSTDOC_INPUTS := $(wildcard $(S)src/librustdoc/*.rs)\n RUSTI_LIB := $(S)src/librusti/rusti.rc\n RUSTI_INPUTS := $(wildcard $(S)src/librusti/*.rs)\n \n+# Rust, the convenience tool\n+RUST_LIB := $(S)src/librust/rust.rc\n+RUST_INPUTS := $(wildcard $(S)src/librust/*.rs)\n+\n # FIXME: These are only built for the host arch. Eventually we'll\n # have tools that need to built for other targets.\n define TOOLS_STAGE_N_TARGET\n@@ -102,6 +106,21 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X):\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rusti -o $$@ $$<\n \n+$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST):\t\t\\\n+\t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\t\\\n+\t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n+\n+$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X):\t\t\t\\\n+\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST)\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rust -o $$@ $$<\n+\n endef\n \n define TOOLS_STAGE_N_HOST\n@@ -185,6 +204,23 @@ $$(HBIN$(2)_H_$(4))/rusti$$(X):\t\t\t\t\\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUST):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+\t\t$$(HSREQ$(2)_H_$(4))\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_GLOB) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_DSYM_GLOB)) \\\n+\t        $$(HLIB$(2)_H_$(4))\n+\n+$$(HBIN$(2)_H_$(4))/rust$$(X):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUST)\t\\\n+\t\t$$(HSREQ$(2)_H_$(4))\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n endef\n \n $(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\\"}, {"sha": "2fc50eb6e757994afec4939f9d667e6169046be0", "filename": "src/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -23,6 +23,9 @@ extern mod this(name = \"rustdoc\", vers = \"0.6\");\n #[cfg(rusti)]\n extern mod this(name = \"rusti\", vers = \"0.6\");\n \n+#[cfg(rust)]\n+extern mod this(name = \"rust\", vers = \"0.6\");\n+\n #[cfg(rustc)]\n extern mod this(name = \"rustc\", vers = \"0.6\");\n "}, {"sha": "950623b8760423ab43c0779af0ce72c79f2d6990", "filename": "src/librust/rust.rc", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=a8efa2133392cc846d4ea3cae14f0eb4eccb5f1e", "patch": "@@ -0,0 +1,235 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rust - central access to other rust tools\n+// XXX: Make commands run and test emit proper file endings on winds\n+// XXX: Make run only accept source that emits an executable\n+\n+#[link(name = \"rust\",\n+       vers = \"0.6\",\n+       uuid = \"4a24da33-5cc8-4037-9352-2cbe9bd9d27c\",\n+       url = \"https://github.com/mozilla/rust/tree/master/src/rust\")];\n+\n+#[crate_type = \"lib\"];\n+\n+extern mod core(vers = \"0.6\");\n+\n+use core::run;\n+\n+enum ValidUsage {\n+    Valid, Invalid\n+}\n+\n+impl ValidUsage {\n+    fn is_valid(&self) -> bool { match *self {\n+        Valid   => true,\n+        Invalid => false\n+    }}\n+}\n+\n+enum Action {\n+    Exec(&str),\n+    Call(&fn(args: &[~str]) -> ValidUsage)\n+}\n+\n+enum UsageSource {\n+    UsgExec(&str),\n+    UsgStr(&str)\n+}\n+\n+struct Command {\n+    cmd: &str,\n+    action: Action,\n+    usage_line: &str,\n+    usage_full: UsageSource\n+}\n+\n+const commands: &[Command] = &[\n+    Command{\n+        cmd: \"build\",\n+        action: Exec(\"rustc\"),\n+        usage_line: \"compile rust source files\",\n+        usage_full: UsgExec(\"rustc --help\")\n+    },\n+    Command{\n+        cmd: \"run\",\n+        action: Call(cmd_run),\n+        usage_line: \"build a executable, and run it\",\n+        usage_full: UsgStr(\n+            \"The run command is an shortcut for the command line \\n\\\n+             \\\"rustc <filename> -o <filestem>~ && ./<filestem>~\\\".\\\n+            \\n\\nUsage:\\trust run <filename>\"\n+        )\n+    },\n+    Command{\n+        cmd: \"test\",\n+        action: Call(cmd_test),\n+        usage_line: \"build a test executable, and run it\",\n+        usage_full: UsgStr(\n+            \"The test command is an shortcut for the command line \\n\\\n+            \\\"rustc --test <filename> -o <filestem>test~ && \\\n+            ./<filestem>test~\\\"\\n\\nUsage:\\trust test <filename>\"\n+        )\n+    },\n+    Command{\n+        cmd: \"doc\",\n+        action: Exec(\"rustdoc\"),\n+        usage_line: \"generate documentation from doc comments\",\n+        usage_full: UsgExec(\"rustdoc --help\")\n+    },\n+    Command{\n+        cmd: \"pkg\",\n+        action: Exec(\"rustpkg\"),\n+        usage_line: \"download, build, install rust packages\",\n+        usage_full: UsgExec(\"rustpkg --help\")\n+    },\n+    Command{\n+        cmd: \"sketch\",\n+        action: Exec(\"rusti\"),\n+        usage_line: \"run a rust interpreter\",\n+        usage_full: UsgStr(\"\\nUsage:\\trusti\")\n+    },\n+    Command{\n+        cmd: \"help\",\n+        action: Call(cmd_help),\n+        usage_line: \"show detailed usage of a command\",\n+        usage_full: UsgStr(\n+            \"The help command displays the usage text of another command.\\n\\\n+            The text is either build in, or provided by the corresponding \\\n+            program.\\n\\nUsage:\\trust help <command>\"\n+        )\n+    }\n+];\n+\n+fn find_cmd(command_string: &str) -> Option<Command> {\n+    do commands.find |command| {\n+        command.cmd == command_string\n+    }\n+}\n+\n+fn cmd_help(args: &[~str]) -> ValidUsage {\n+    fn print_usage(command_string: ~str) -> ValidUsage {\n+        match find_cmd(command_string) {\n+            Some(command) => {\n+                match command.action {\n+                    Exec(s) => io::println(fmt!(\n+                        \"The %s command is an alias for the %s program.\",\n+                        command.cmd, s)),\n+                    _       => ()\n+                }\n+                match command.usage_full {\n+                    UsgStr(msg)          => io::println(fmt!(\"%s\\n\", msg)),\n+                    UsgExec(commandline) => {\n+                        let words = str::words(commandline);\n+                        let (prog, args) = (words.head(), words.tail());\n+                        run::run_program(prog, args);\n+                    }\n+                }\n+                Valid\n+            },\n+            None => Invalid\n+        }\n+    }\n+\n+    match args {\n+        [command_string] => print_usage(command_string),\n+        _                => Invalid\n+    }\n+}\n+\n+fn cmd_test(args: &[~str]) -> ValidUsage {\n+    match args {\n+        [filename] => {\n+            let test_exec = Path(filename).filestem().unwrap() + \"test~\";\n+            if run::run_program(\"rustc\", [\n+                ~\"--test\",\n+                filename.to_owned(),\n+                ~\"-o\",\n+                test_exec.to_owned()\n+            ]) == 0 {\n+                run::run_program(~\"./\" + test_exec, []);\n+            }\n+            Valid\n+        }\n+        _          => Invalid\n+    }\n+}\n+\n+fn cmd_run(args: &[~str]) -> ValidUsage {\n+    match args {\n+        [filename] => {\n+            let exec = Path(filename).filestem().unwrap() + \"~\";\n+            if run::run_program(\"rustc\", [\n+                filename.to_owned(),\n+                ~\"-o\",\n+                exec.to_owned()\n+            ]) == 0 {\n+                run::run_program(~\"./\"+exec, []);\n+            }\n+            Valid\n+        }\n+        _          => Invalid\n+    }\n+}\n+\n+fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n+    match command.action {\n+        Call(f) => f(args),\n+        Exec(commandline) => {\n+            let words = str::words(commandline);\n+            let (prog, prog_args) = (words.head(), words.tail());\n+            let exitstatus = run::run_program(prog, prog_args + args);\n+            os::set_exit_status(exitstatus);\n+            Valid\n+        }\n+    }\n+}\n+\n+fn usage() {\n+    const indent: uint = 8;\n+\n+    io::print(\n+        \"The rust tool is a convenience for managing rust source code.\\n\\\n+        It acts as a shortcut for programs of the rust tool chain.\\n\\\n+        \\n\\\n+        Usage:\\trust <command> [arguments]\\n\\\n+        \\n\\\n+        The commands are:\\n\\\n+        \\n\"\n+    );\n+\n+    for commands.each |command| {\n+        let padding = str::repeat(\" \", indent - command.cmd.len());\n+        io::println(fmt!(\"    %s%s%s\",\n+                         command.cmd, padding, command.usage_line));\n+    }\n+\n+    io::print(\n+        \"\\n\\\n+        Use \\\"rust help <command>\\\" for more information about a command.\\n\\\n+        \\n\"\n+    );\n+\n+}\n+\n+fn main() {\n+    let args = os::args().tail();\n+\n+    if !args.is_empty() {\n+        for commands.each |command| {\n+            if command.cmd == args.head() {\n+                let result = do_command(command, args.tail());\n+                if result.is_valid() { return; }\n+            }\n+        }\n+    }\n+\n+    usage();\n+}"}]}