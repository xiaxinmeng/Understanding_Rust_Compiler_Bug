{"sha": "c274d16b7fdac7a1006dd43a1e27c54c46285540", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNzRkMTZiN2ZkYWM3YTEwMDZkZDQzYTFlMjdjNTRjNDYyODU1NDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-23T04:21:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-23T04:33:52Z"}, "message": "Eliminate unused variable warnings in stdtest", "tree": {"sha": "078b17e44d33e4f296f7e4873a2aafa7a7ac7691", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078b17e44d33e4f296f7e4873a2aafa7a7ac7691"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c274d16b7fdac7a1006dd43a1e27c54c46285540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c274d16b7fdac7a1006dd43a1e27c54c46285540", "html_url": "https://github.com/rust-lang/rust/commit/c274d16b7fdac7a1006dd43a1e27c54c46285540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c274d16b7fdac7a1006dd43a1e27c54c46285540/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b614f54ae7fa9f598917b9b220c2f10b0b37b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b614f54ae7fa9f598917b9b220c2f10b0b37b8", "html_url": "https://github.com/rust-lang/rust/commit/45b614f54ae7fa9f598917b9b220c2f10b0b37b8"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "744b6f2d29302cb2bddfc6179cd02dc226405749", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=c274d16b7fdac7a1006dd43a1e27c54c46285540", "patch": "@@ -4,7 +4,7 @@ import std::comm;\n #[test]\n fn create_port_and_chan() {\n     let p = comm::mk_port::<int>();\n-    let c = p.mk_chan();\n+    p.mk_chan();\n }\n \n #[test]\n@@ -39,5 +39,5 @@ fn chan_chan() {\n     let p = comm::port(), p2 = comm::port::<int>();\n     let c = comm::chan(p);\n     comm::send(c, comm::chan(p2));\n-    let c2 = comm::recv(p);\n+    comm::recv(p);\n }"}, {"sha": "5b3a3959cb3d7ae9ea946729b3da3916b055b58a", "filename": "src/test/stdtest/either.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Feither.rs?ref=c274d16b7fdac7a1006dd43a1e27c54c46285540", "patch": "@@ -6,14 +6,14 @@ import std::vec::len;\n fn test_either_left() {\n     let val = left(10);\n     fn f_left(x: &int) -> bool { x == 10 }\n-    fn f_right(x: &uint) -> bool { false }\n+    fn f_right(_x: &uint) -> bool { false }\n     assert (either(f_left, f_right, val));\n }\n \n #[test]\n fn test_either_right() {\n     let val = right(10u);\n-    fn f_left(x: &int) -> bool { false }\n+    fn f_left(_x: &int) -> bool { false }\n     fn f_right(x: &uint) -> bool { x == 10u }\n     assert (either(f_left, f_right, val));\n }"}, {"sha": "3880ee8d6133b8c952f8a1a89cd46255d8fec64b", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=c274d16b7fdac7a1006dd43a1e27c54c46285540", "patch": "@@ -35,7 +35,7 @@ fn test_find_success() {\n #[test]\n fn test_find_fail() {\n     let l = from_vec([0, 1, 2]);\n-    fn match(i: &int) -> option::t<int> { ret option::none::<int>; }\n+    fn match(_i: &int) -> option::t<int> { ret option::none::<int>; }\n     let rs = list::find(l, match);\n     assert (rs == option::none::<int>);\n }"}, {"sha": "0cca3a65a4f3cbae5f542666400d76b101ad8d2b", "filename": "src/test/stdtest/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Foption.rs?ref=c274d16b7fdac7a1006dd43a1e27c54c46285540", "patch": "@@ -2,4 +2,4 @@\n use std;\n \n #[test]\n-fn test() { let x = std::option::some::<int>(10); }\n+fn test() { let _x = std::option::some::<int>(10); }"}, {"sha": "a57056c552d4f5224c4a02e1f69f0e102c58b05c", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c274d16b7fdac7a1006dd43a1e27c54c46285540/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=c274d16b7fdac7a1006dd43a1e27c54c46285540", "patch": "@@ -359,6 +359,7 @@ fn reverse_and_reversed() {\n     // Make sure they work with 0-length vectors too.\n \n     let v4 = vec::reversed::<int>([]);\n+    assert v4 == [];\n     let v3: [mutable int] = [mutable];\n     vec::reverse::<int>(v3);\n }"}]}