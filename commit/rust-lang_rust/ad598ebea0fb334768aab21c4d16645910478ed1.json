{"sha": "ad598ebea0fb334768aab21c4d16645910478ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNTk4ZWJlYTBmYjMzNDc2OGFhYjIxYzRkMTY2NDU5MTA0NzhlZDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T22:33:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T22:34:54Z"}, "message": "Use the new task join methods in the test runner. Closes #826\n\nIt should report failures properly again", "tree": {"sha": "a78a6da661681324a833cf284d227a063a326bf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78a6da661681324a833cf284d227a063a326bf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad598ebea0fb334768aab21c4d16645910478ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad598ebea0fb334768aab21c4d16645910478ed1", "html_url": "https://github.com/rust-lang/rust/commit/ad598ebea0fb334768aab21c4d16645910478ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad598ebea0fb334768aab21c4d16645910478ed1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f9f1a1f1fb37f77fee99e53e754ad5b06bc854", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f9f1a1f1fb37f77fee99e53e754ad5b06bc854", "html_url": "https://github.com/rust-lang/rust/commit/15f9f1a1f1fb37f77fee99e53e754ad5b06bc854"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "d5986bf010761eaa07a121beb47a5393eff50184", "filename": "src/lib/test.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad598ebea0fb334768aab21c4d16645910478ed1/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad598ebea0fb334768aab21c4d16645910478ed1/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=ad598ebea0fb334768aab21c4d16645910478ed1", "patch": "@@ -24,6 +24,7 @@ export parse_opts;\n export test_to_task;\n export default_test_to_task;\n export configure_test_task;\n+export joinable;\n \n native \"rust\" mod rustrt {\n     fn hack_allow_leaks();\n@@ -90,11 +91,13 @@ fn parse_opts(args: &[str]) : vec::is_not_empty(args) -> opt_res {\n \n tag test_result { tr_ok; tr_failed; tr_ignored; }\n \n+type joinable = (task_id, comm::port<task::task_notification>);\n+\n // To get isolation and concurrency tests have to be run in their own tasks.\n // In cases where test functions and closures it is not ok to just dump them\n // into a task and run them, so this transformation gives the caller a chance\n // to create the test task.\n-type test_to_task = fn(&fn()) -> task_id ;\n+type test_to_task = fn(&fn()) -> joinable;\n \n // A simple console test runner\n fn run_tests_console(opts: &test_opts, tests: &[test_desc]) -> bool {\n@@ -312,8 +315,8 @@ fn run_test(test: &test_desc, to_task: &test_to_task) -> test_future {\n         let test_task = to_task(test.fn);\n         ret {test: test,\n              wait:\n-             bind fn (test_task: task_id) -> test_result {\n-                 alt task::join_id(test_task) {\n+             bind fn (test_task: joinable)-> test_result {\n+                 alt task::join(test_task) {\n                    task::tr_success. { tr_ok }\n                    task::tr_failure. { tr_failed }\n                  }\n@@ -326,12 +329,12 @@ fn run_test(test: &test_desc, to_task: &test_to_task) -> test_future {\n \n // We need to run our tests in another task in order to trap test failures.\n // This function only works with functions that don't contain closures.\n-fn default_test_to_task(f: &fn()) -> task_id {\n+fn default_test_to_task(f: &fn()) -> joinable {\n     fn run_task(f: fn()) {\n         configure_test_task();\n         f();\n     }\n-    ret task::spawn(bind run_task(f));\n+    ret task::spawn_joinable(bind run_task(f));\n }\n \n // Call from within a test task to make sure it's set up correctly"}, {"sha": "9bbc30de51908773f439af66cc1863bd9e870687", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ad598ebea0fb334768aab21c4d16645910478ed1/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad598ebea0fb334768aab21c4d16645910478ed1/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=ad598ebea0fb334768aab21c4d16645910478ed1", "patch": "@@ -121,7 +121,7 @@ fn test_opts(config: &config) -> test::test_opts {\n }\n \n type tests_and_conv_fn =\n-    {tests: [test::test_desc], to_task: fn(&fn() ) -> task_id };\n+    {tests: [test::test_desc], to_task: fn(&fn() ) -> test::joinable };\n \n fn make_tests(cx: &cx) -> tests_and_conv_fn {\n     log #fmt(\"making tests from %s\", cx.config.src_base);\n@@ -207,18 +207,26 @@ break up the config record and pass everything individually to the spawned\n function.\n */\n \n-fn closure_to_task(cx: cx, configport: _port<[u8]>, testfn: &fn() ) -> task_id\n+fn closure_to_task(cx: cx, configport: _port<[u8]>, testfn: &fn() )\n+    -> test::joinable\n {\n     testfn();\n     let testfile = configport.recv();\n-    ret task::_spawn(bind run_test_task(cx.config.compile_lib_path,\n-                            cx.config.run_lib_path, cx.config.rustc_path,\n-                            cx.config.src_base, cx.config.build_base,\n-                            cx.config.stage_id, mode_str(cx.config.mode),\n-                            cx.config.run_ignored, opt_str(cx.config.filter),\n-                            opt_str(cx.config.runtool),\n-                            opt_str(cx.config.rustcflags), cx.config.verbose,\n-                            cx.procsrv.chan, testfile));\n+    let testthunk = bind run_test_task(cx.config.compile_lib_path,\n+                                       cx.config.run_lib_path,\n+                                       cx.config.rustc_path,\n+                                       cx.config.src_base,\n+                                       cx.config.build_base,\n+                                       cx.config.stage_id,\n+                                       mode_str(cx.config.mode),\n+                                       cx.config.run_ignored,\n+                                       opt_str(cx.config.filter),\n+                                       opt_str(cx.config.runtool),\n+                                       opt_str(cx.config.rustcflags),\n+                                       cx.config.verbose,\n+                                       cx.procsrv.chan,\n+                                       testfile);\n+    ret task::spawn_joinable(testthunk);\n }\n \n fn run_test_task(compile_lib_path: str, run_lib_path: str, rustc_path: str,"}]}