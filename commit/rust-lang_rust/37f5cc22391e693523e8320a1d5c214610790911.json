{"sha": "37f5cc22391e693523e8320a1d5c214610790911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjVjYzIyMzkxZTY5MzUyM2U4MzIwYTFkNWMyMTQ2MTA3OTA5MTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T01:03:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T01:03:54Z"}, "message": "Do not complain about unconstrained params when Self is Ty Error", "tree": {"sha": "36a4487a7402ab48ab6e2537bd3dd63386a10f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36a4487a7402ab48ab6e2537bd3dd63386a10f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f5cc22391e693523e8320a1d5c214610790911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f5cc22391e693523e8320a1d5c214610790911", "html_url": "https://github.com/rust-lang/rust/commit/37f5cc22391e693523e8320a1d5c214610790911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f5cc22391e693523e8320a1d5c214610790911/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8", "html_url": "https://github.com/rust-lang/rust/commit/dfd43f0fdd4e6969c7d82c0670d70bf305fbccf8"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "c95f81506cd59471917dcb16aec23b8359c18eb9", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37f5cc22391e693523e8320a1d5c214610790911/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f5cc22391e693523e8320a1d5c214610790911/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=37f5cc22391e693523e8320a1d5c214610790911", "patch": "@@ -20,10 +20,10 @@ impl From<ty::ParamConst> for Parameter {\n }\n \n /// Returns the set of parameters constrained by the impl header.\n-pub fn parameters_for_impl<'tcx>(impl_self_ty: Ty<'tcx>,\n-                                 impl_trait_ref: Option<ty::TraitRef<'tcx>>)\n-                                 -> FxHashSet<Parameter>\n-{\n+pub fn parameters_for_impl<'tcx>(\n+    impl_self_ty: Ty<'tcx>,\n+    impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n+) -> FxHashSet<Parameter> {\n     let vec = match impl_trait_ref {\n         Some(tr) => parameters_for(&tr, false),\n         None => parameters_for(&impl_self_ty, false),\n@@ -36,12 +36,10 @@ pub fn parameters_for_impl<'tcx>(impl_self_ty: Ty<'tcx>,\n /// uniquely determined by `t` (see RFC 447). If it is true, return the list\n /// of parameters whose values are needed in order to constrain `ty` - these\n /// differ, with the latter being a superset, in the presence of projections.\n-pub fn parameters_for<'tcx, T>(t: &T,\n-                               include_nonconstraining: bool)\n-                               -> Vec<Parameter>\n-    where T: TypeFoldable<'tcx>\n-{\n-\n+pub fn parameters_for<'tcx, T: TypeFoldable<'tcx>>(\n+    t: &T,\n+    include_nonconstraining: bool,\n+) -> Vec<Parameter> {\n     let mut collector = ParameterCollector {\n         parameters: vec![],\n         include_nonconstraining,"}, {"sha": "8e69fbd9a79eff8f7d1f7766ad7b7e838c4eaf0c", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f5cc22391e693523e8320a1d5c214610790911/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f5cc22391e693523e8320a1d5c214610790911/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=37f5cc22391e693523e8320a1d5c214610790911", "patch": "@@ -99,6 +99,10 @@ fn enforce_impl_params_are_constrained(\n ) {\n     // Every lifetime used in an associated type must be constrained.\n     let impl_self_ty = tcx.type_of(impl_def_id);\n+    if impl_self_ty.sty == ty::Error {\n+        // Don't complain about unconstrained type params when self ty doesn't exist. (#36836)\n+        return;\n+    }\n     let impl_generics = tcx.generics_of(impl_def_id);\n     let impl_predicates = tcx.predicates_of(impl_def_id);\n     let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);"}, {"sha": "56d5a7cca4566287a8c9010bfadbabf2a068b452", "filename": "src/test/ui/issues/issue-36836.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37f5cc22391e693523e8320a1d5c214610790911/src%2Ftest%2Fui%2Fissues%2Fissue-36836.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f5cc22391e693523e8320a1d5c214610790911/src%2Ftest%2Fui%2Fissues%2Fissue-36836.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36836.rs?ref=37f5cc22391e693523e8320a1d5c214610790911", "patch": "@@ -0,0 +1,5 @@\n+trait Foo {}\n+\n+impl<T> Foo for Bar<T> {} //~ ERROR cannot find type `Bar` in this scope\n+\n+fn main() {}"}, {"sha": "bfda9b0bbdd7e56ad7519bbe535c7bf968c6502f", "filename": "src/test/ui/issues/issue-36836.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37f5cc22391e693523e8320a1d5c214610790911/src%2Ftest%2Fui%2Fissues%2Fissue-36836.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f5cc22391e693523e8320a1d5c214610790911/src%2Ftest%2Fui%2Fissues%2Fissue-36836.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36836.stderr?ref=37f5cc22391e693523e8320a1d5c214610790911", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `Bar` in this scope\n+  --> $DIR/issue-36836.rs:3:17\n+   |\n+LL | impl<T> Foo for Bar<T> {}\n+   |                 ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}