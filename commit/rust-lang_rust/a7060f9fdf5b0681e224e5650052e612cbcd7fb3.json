{"sha": "a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MDYwZjlmZGY1YjA2ODFlMjI0ZTU2NTAwNTJlNjEyY2JjZDdmYjM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-10T14:39:09Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-10T14:39:09Z"}, "message": "Remove excessive block() and block_only()\n\nSince we now use the same indent style for every expressions, these safe guards\ncan be removed.", "tree": {"sha": "51a5bdede4a80b5aa3eb2a8679a00be3ef9ed223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51a5bdede4a80b5aa3eb2a8679a00be3ef9ed223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "html_url": "https://github.com/rust-lang/rust/commit/a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7060f9fdf5b0681e224e5650052e612cbcd7fb3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b749aa0699c77890d21cc6f1e81520977537e2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b749aa0699c77890d21cc6f1e81520977537e2a0", "html_url": "https://github.com/rust-lang/rust/commit/b749aa0699c77890d21cc6f1e81520977537e2a0"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "b346b9a38a25ca12d0fc633ee3b0e1d1b6620650", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7060f9fdf5b0681e224e5650052e612cbcd7fb3/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7060f9fdf5b0681e224e5650052e612cbcd7fb3/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "patch": "@@ -129,7 +129,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         let offset = trimmed_last_line_width(&parent_rewrite) + prefix_try_num;\n         match context.config.indent_style() {\n             IndentStyle::Visual => parent_shape.offset_left(overhead)?,\n-            IndentStyle::Block => parent_shape.block().offset_left(offset)?,\n+            IndentStyle::Block => parent_shape.offset_left(offset)?,\n         }\n     } else {\n         other_child_shape"}, {"sha": "f8f39f4f27bd854d24d259a95ea7de622bd80d0b", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7060f9fdf5b0681e224e5650052e612cbcd7fb3/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7060f9fdf5b0681e224e5650052e612cbcd7fb3/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "patch": "@@ -162,9 +162,7 @@ fn rewrite_closure_block(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let block_shape = shape.block();\n-    let block_str = block.rewrite(context, block_shape)?;\n-    Some(format!(\"{} {}\", prefix, block_str))\n+    Some(format!(\"{} {}\", prefix, block.rewrite(context, shape)?))\n }\n \n // Return type is (prefix, extra_offset)"}, {"sha": "e406792332d89b934d095cd5187ce138a6fdd10b", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7060f9fdf5b0681e224e5650052e612cbcd7fb3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7060f9fdf5b0681e224e5650052e612cbcd7fb3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a7060f9fdf5b0681e224e5650052e612cbcd7fb3", "patch": "@@ -1061,8 +1061,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         debug!(\"ControlFlow::rewrite {:?} {:?}\", self, shape);\n \n-        let alt_block_sep =\n-            String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+        let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n         let (cond_str, used_width) = self.rewrite_cond(context, shape, &alt_block_sep)?;\n         // If `used_width` is 0, it indicates that whole control flow is written in a single line.\n         if used_width == 0 {\n@@ -1268,7 +1267,7 @@ fn rewrite_match(\n         IndentStyle::Block => cond_shape.offset_left(6)?,\n     };\n     let cond_str = cond.rewrite(context, cond_shape)?;\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+    let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n     let block_sep = match context.config.control_brace_style() {\n         ControlBraceStyle::AlwaysNextLine => &alt_block_sep,\n         _ if last_line_extendable(&cond_str) => \" \",\n@@ -1547,7 +1546,7 @@ fn rewrite_match_body(\n     };\n \n     let comma = arm_comma(context.config, body, is_last);\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+    let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n     let alt_block_sep = alt_block_sep.as_str();\n \n     let combine_orig_body = |body_str: &str| {\n@@ -2785,10 +2784,9 @@ pub fn choose_rhs<R: Rewrite>(\n         _ => {\n             // Expression did not fit on the same line as the identifier.\n             // Try splitting the line and see if that works better.\n-            let new_shape = Shape::indented(\n-                shape.block().indent.block_indent(context.config),\n-                context.config,\n-            ).sub_width(shape.rhs_overhead(context.config))?;\n+            let new_shape =\n+                Shape::indented(shape.indent.block_indent(context.config), context.config)\n+                    .sub_width(shape.rhs_overhead(context.config))?;\n             let new_rhs = expr.rewrite(context, new_shape);\n             let new_indent_str = &new_shape.indent.to_string(context.config);\n "}]}