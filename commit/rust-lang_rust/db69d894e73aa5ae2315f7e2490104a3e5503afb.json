{"sha": "db69d894e73aa5ae2315f7e2490104a3e5503afb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNjlkODk0ZTczYWE1YWUyMzE1ZjdlMjQ5MDEwNGEzZTU1MDNhZmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-05-17T16:15:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-05-17T16:15:44Z"}, "message": "Reset submodule management to what master does\n\nBasically just translate what's done on master in Rust to Python here.", "tree": {"sha": "6b1056425b20dffba3b6c7281ad35c8215ca81d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1056425b20dffba3b6c7281ad35c8215ca81d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db69d894e73aa5ae2315f7e2490104a3e5503afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db69d894e73aa5ae2315f7e2490104a3e5503afb", "html_url": "https://github.com/rust-lang/rust/commit/db69d894e73aa5ae2315f7e2490104a3e5503afb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db69d894e73aa5ae2315f7e2490104a3e5503afb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "182a4ff037ef7605d7e0bd0ac900dd4846d5a31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/182a4ff037ef7605d7e0bd0ac900dd4846d5a31a", "html_url": "https://github.com/rust-lang/rust/commit/182a4ff037ef7605d7e0bd0ac900dd4846d5a31a"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "e15304a7e6e67b318ce93837d32769082b774c54", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 50, "deletions": 19, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/db69d894e73aa5ae2315f7e2490104a3e5503afb/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/db69d894e73aa5ae2315f7e2490104a3e5503afb/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=db69d894e73aa5ae2315f7e2490104a3e5503afb", "patch": "@@ -127,13 +127,13 @@ def unpack(tarball, dst, verbose=False, match=None):\n             shutil.move(tp, fp)\n     shutil.rmtree(os.path.join(dst, fname))\n \n-def run(args, verbose=False, exception=False):\n+def run(args, verbose=False, exception=False, cwd=None):\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n     sys.stdout.flush()\n     # Use Popen here instead of call() as it apparently allows powershell on\n     # Windows to not lock up waiting for input presumably.\n-    ret = subprocess.Popen(args)\n+    ret = subprocess.Popen(args, cwd=cwd)\n     code = ret.wait()\n     if code != 0:\n         err = \"failed to run: \" + ' '.join(args)\n@@ -391,12 +391,21 @@ def build_bootstrap(self):\n             args.append(\"--frozen\")\n         self.run(args, env)\n \n-    def run(self, args, env=None):\n-        proc = subprocess.Popen(args, env=env)\n+    def run(self, args, env=None, cwd=None):\n+        proc = subprocess.Popen(args, env=env, cwd=cwd)\n         ret = proc.wait()\n         if ret != 0:\n             sys.exit(ret)\n \n+    def output(self, args, env=None, cwd=None):\n+        proc = subprocess.Popen(args, stdout=subprocess.PIPE, env=env, cwd=cwd)\n+        (out, err) = proc.communicate()\n+        ret = proc.wait()\n+        if ret != 0:\n+            print(out)\n+            sys.exit(ret)\n+        return out\n+\n     def build_triple(self):\n         default_encoding = sys.getdefaultencoding()\n         config = self.get_toml('build')\n@@ -541,25 +550,47 @@ def update_submodules(self):\n             return\n \n         print('Updating submodules')\n-        self.run([\"git\", \"-C\", self.rust_root, \"submodule\", \"-q\", \"sync\"])\n-        # FIXME: nobody does, but this won't work well with whitespace in\n-        # submodule path\n-        submodules = [s.split()[1] for s in subprocess.check_output(\n-            [\"git\", \"config\", \"--file\", os.path.join(\n-                self.rust_root, \".gitmodules\"), \"--get-regexp\", \"path\"]).splitlines()]\n-        for module in submodules:\n-            if module.endswith(b\"llvm\") and \\\n+        output = self.output([\"git\", \"submodule\", \"status\"], cwd=self.rust_root)\n+        submodules = []\n+        for line in output.splitlines():\n+            # NOTE `git submodule status` output looks like this:\n+            #\n+            # -5066b7dcab7e700844b0e2ba71b8af9dc627a59b src/liblibc\n+            # +b37ef24aa82d2be3a3cc0fe89bf82292f4ca181c src/compiler-rt (remotes/origin/..)\n+            #  e058ca661692a8d01f8cf9d35939dfe3105ce968 src/jemalloc (3.6.0-533-ge058ca6)\n+            #\n+            # The first character can be '-', '+' or ' ' and denotes the\n+            # `State` of the submodule Right next to this character is the\n+            # SHA-1 of the submodule HEAD And after that comes the path to the\n+            # submodule\n+            path = line[1:].split(' ')[1]\n+            submodules.append([path, line[0]])\n+\n+        self.run([\"git\", \"submodule\", \"sync\"], cwd=self.rust_root)\n+\n+        for submod in submodules:\n+            path, status = submod\n+            if path.endswith(b\"llvm\") and \\\n                 (self.get_toml('llvm-config') or self.get_mk('CFG_LLVM_ROOT')):\n                 continue\n-            if module.endswith(b\"jemalloc\") and \\\n+            if path.endswith(b\"jemalloc\") and \\\n                 (self.get_toml('jemalloc') or self.get_mk('CFG_JEMALLOC_ROOT')):\n                 continue\n-            self.run([\"git\", \"-C\", self.rust_root,\n-                      \"submodule\", \"update\", \"--init\", module])\n-        self.run([\"git\", \"-C\", self.rust_root, \"submodule\", \"-q\",\n-                  \"foreach\", \"git\", \"reset\", \"-q\", \"--hard\"])\n-        self.run([\"git\", \"-C\", self.rust_root, \"submodule\",\n-                  \"-q\", \"foreach\", \"git\", \"clean\", \"-qdfx\"])\n+            submod_path = os.path.join(self.rust_root, path)\n+\n+            if status == ' ':\n+                self.run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n+                self.run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n+            elif status == '+':\n+                self.run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n+                self.run([\"git\", \"reset\", \"--hard\"], cwd=submod_path)\n+                self.run([\"git\", \"clean\", \"-fdx\"], cwd=submod_path)\n+            elif status == '-':\n+                self.run([\"git\", \"submodule\", \"init\", path], cwd=self.rust_root)\n+                self.run([\"git\", \"submodule\", \"update\", path], cwd=self.rust_root)\n+            else:\n+                raise ValueError('unknown submodule status: ' + status)\n+\n def bootstrap():\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')"}, {"sha": "ba02ee0c6d73b7a39cfa9caf95695cec951b10f2", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db69d894e73aa5ae2315f7e2490104a3e5503afb/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db69d894e73aa5ae2315f7e2490104a3e5503afb/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=db69d894e73aa5ae2315f7e2490104a3e5503afb", "patch": "@@ -32,7 +32,7 @@ static EXCEPTIONS: &'static [&'static str] = &[\n     \"openssl\", // BSD+advertising clause, cargo, mdbook\n     \"pest\", // MPL2, mdbook via handlebars\n     \"thread-id\", // Apache-2.0, mdbook\n-    \"strings\", // not in published manifest\n+    \"strings\", // this is actually MIT/Apache-2.0 but it's not in the manifest yet\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {"}]}