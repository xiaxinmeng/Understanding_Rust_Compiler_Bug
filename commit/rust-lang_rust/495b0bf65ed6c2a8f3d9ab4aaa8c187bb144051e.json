{"sha": "495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NWIwYmY2NWVkNmMyYThmM2Q5YWI0YWFhOGMxODdiYjE0NDA1MWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T05:54:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:14:06Z"}, "message": "Remove std::term", "tree": {"sha": "bd1f059b4972b61e08bb6993614b5be71291e5a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd1f059b4972b61e08bb6993614b5be71291e5a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e", "html_url": "https://github.com/rust-lang/rust/commit/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7625ed52eee77078747f9e9639b89166681abef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7625ed52eee77078747f9e9639b89166681abef8", "html_url": "https://github.com/rust-lang/rust/commit/7625ed52eee77078747f9e9639b89166681abef8"}], "stats": {"total": 96, "additions": 7, "deletions": 89}, "files": [{"sha": "847ca6e6b6d2ebd84dd7ae4dfd3fedf9c544e269", "filename": "src/lib/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e", "patch": "@@ -87,7 +87,6 @@ mod ufindivec;\n mod extfmt;\n mod box;\n mod getopts;\n-mod term;\n mod time;\n mod smallintmap;\n mod ptr;"}, {"sha": "f61611a9a15bf61fc75d9c014e6ca3a9fbdf72eb", "filename": "src/lib/term.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7625ed52eee77078747f9e9639b89166681abef8/src%2Flib%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7625ed52eee77078747f9e9639b89166681abef8/src%2Flib%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fterm.rs?ref=7625ed52eee77078747f9e9639b89166681abef8", "patch": "@@ -1,81 +0,0 @@\n-\n-\n-\n-// Simple ANSI color library.\n-//\n-// TODO: Windows support.\n-const color_black: u8 = 0u8;\n-\n-const color_red: u8 = 1u8;\n-\n-const color_green: u8 = 2u8;\n-\n-const color_yellow: u8 = 3u8;\n-\n-const color_blue: u8 = 4u8;\n-\n-const color_magenta: u8 = 5u8;\n-\n-const color_cyan: u8 = 6u8;\n-\n-const color_light_gray: u8 = 7u8;\n-\n-const color_light_grey: u8 = 7u8;\n-\n-const color_dark_gray: u8 = 8u8;\n-\n-const color_dark_grey: u8 = 8u8;\n-\n-const color_bright_red: u8 = 9u8;\n-\n-const color_bright_green: u8 = 10u8;\n-\n-const color_bright_yellow: u8 = 11u8;\n-\n-const color_bright_blue: u8 = 12u8;\n-\n-const color_bright_magenta: u8 = 13u8;\n-\n-const color_bright_cyan: u8 = 14u8;\n-\n-const color_bright_white: u8 = 15u8;\n-\n-fn esc(writer: io::buf_writer) { writer.write(~[0x1bu8, '[' as u8]); }\n-\n-fn reset(writer: io::buf_writer) {\n-    esc(writer);\n-    writer.write(~['0' as u8, 'm' as u8]);\n-}\n-\n-fn color_supported() -> bool {\n-    let supported_terms = [\"xterm-color\", \"xterm\", \"screen-bce\"];\n-    ret alt generic_os::getenv(\"TERM\") {\n-          option::some(env) { vec::member(env, supported_terms) }\n-          option::none. { false }\n-        };\n-}\n-\n-fn set_color(writer: io::buf_writer, first_char: u8, color: u8) {\n-    assert (color < 16u8);\n-    esc(writer);\n-    if color >= 8u8 { writer.write(~['1' as u8, ';' as u8]); color -= 8u8; }\n-    writer.write(~[first_char, ('0' as u8) + color, 'm' as u8]);\n-}\n-\n-fn fg(writer: io::buf_writer, color: u8) {\n-    ret set_color(writer, '3' as u8, color);\n-}\n-\n-fn bg(writer: io::buf_writer, color: u8) {\n-    ret set_color(writer, '4' as u8, color);\n-}\n-// export fg;\n-// export bg;\n-\n-// Local Variables:\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:"}, {"sha": "eeaf472c86537061801396caabd6ebca44f38c5d", "filename": "src/lib/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=495b0bf65ed6c2a8f3d9ab4aaa8c187bb144051e", "patch": "@@ -181,25 +181,25 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n     ret success;\n \n     fn write_ok(out: &io::writer, use_color: bool) {\n-        write_pretty(out, \"ok\", term::color_green, use_color);\n+        write_pretty(out, \"ok\", termivec::color_green, use_color);\n     }\n \n     fn write_failed(out: &io::writer, use_color: bool) {\n-        write_pretty(out, \"FAILED\", term::color_red, use_color);\n+        write_pretty(out, \"FAILED\", termivec::color_red, use_color);\n     }\n \n     fn write_ignored(out: &io::writer, use_color: bool) {\n-        write_pretty(out, \"ignored\", term::color_yellow, use_color);\n+        write_pretty(out, \"ignored\", termivec::color_yellow, use_color);\n     }\n \n     fn write_pretty(out: &io::writer, word: &str, color: u8,\n                     use_color: bool) {\n-        if use_color && term::color_supported() {\n-            term::fg(out.get_buf_writer(), color);\n+        if use_color && termivec::color_supported() {\n+            termivec::fg(out.get_buf_writer(), color);\n         }\n         out.write_str(word);\n-        if use_color && term::color_supported() {\n-            term::reset(out.get_buf_writer());\n+        if use_color && termivec::color_supported() {\n+            termivec::reset(out.get_buf_writer());\n         }\n     }\n }"}]}