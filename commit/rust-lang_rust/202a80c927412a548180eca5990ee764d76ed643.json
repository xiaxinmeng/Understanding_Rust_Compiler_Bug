{"sha": "202a80c927412a548180eca5990ee764d76ed643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMmE4MGM5Mjc0MTJhNTQ4MTgwZWNhNTk5MGVlNzY0ZDc2ZWQ2NDM=", "commit": {"author": {"name": "Ricky", "email": "Ricky@Hosfelt.io", "date": "2020-09-01T20:59:37Z"}, "committer": {"name": "Ricky", "email": "Ricky@Hosfelt.io", "date": "2020-09-01T20:59:37Z"}, "message": "Added tests for map_err, ignored map_err lint on drop_ref tests", "tree": {"sha": "590e4e5290719fa0e47b97e7a81fc53c6cdd9a1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590e4e5290719fa0e47b97e7a81fc53c6cdd9a1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202a80c927412a548180eca5990ee764d76ed643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202a80c927412a548180eca5990ee764d76ed643", "html_url": "https://github.com/rust-lang/rust/commit/202a80c927412a548180eca5990ee764d76ed643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202a80c927412a548180eca5990ee764d76ed643/comments", "author": null, "committer": null, "parents": [{"sha": "e49a29933be3bd988ccb75b053f480d9c99a7ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e49a29933be3bd988ccb75b053f480d9c99a7ff5", "html_url": "https://github.com/rust-lang/rust/commit/e49a29933be3bd988ccb75b053f480d9c99a7ff5"}], "stats": {"total": 120, "additions": 82, "deletions": 38}, "files": [{"sha": "43bfcf0b8f147b47c48324ad96e7a004c1d037ae", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/202a80c927412a548180eca5990ee764d76ed643/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202a80c927412a548180eca5990ee764d76ed643/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=202a80c927412a548180eca5990ee764d76ed643", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::span_lint_and_sugg;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, CaptureBy, PatKind, QPath};\n+use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -18,7 +18,7 @@ declare_clippy_lint! {\n     ///    Ignore\n     ///}\n     ///fn main() -> Result<(), Errors> {\n-    ///    \n+    ///\n     ///    let x = u32::try_from(-123_i32);\n     ///\n     ///    println!(\"{:?}\", x.map_err(|_| Errors::Ignore));\n@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     ///    WithContext(TryFromIntError)\n     ///}\n     ///fn main() -> Result<(), Errors> {\n-    ///    \n+    ///\n     ///    let x = u32::try_from(-123_i32);\n     ///\n     ///    println!(\"{:?}\", x.map_err(|e| Errors::WithContext(e)));\n@@ -48,34 +48,42 @@ declare_clippy_lint! {\n declare_lint_pass!(MapErrIgnore => [MAP_ERR_IGNORE]);\n \n impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n-    // do not try to lint if this is from a macro or desugaring \n+    // do not try to lint if this is from a macro or desugaring\n     fn check_expr(&mut self, cx: &LateContext<'_>, e: &Expr<'_>) {\n         if e.span.from_expansion() {\n             return;\n         }\n \n         // check if this is a method call (e.g. x.foo())\n         if let ExprKind::MethodCall(ref method, _t_span, ref args, _) = e.kind {\n-            // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1] Enum::Variant[2]))\n+            // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n+            // Enum::Variant[2]))\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n                 // make sure the first argument is a closure, and grab the CaptureRef, body_id, and body_span fields\n-                if let ExprKind::Closure(capture, _, body_id, body_span, _) = args[1].kind {  \n+                if let ExprKind::Closure(capture, _, body_id, body_span, _) = args[1].kind {\n                     // check if this is by Reference (meaning there's no move statement)\n-                    if capture == CaptureBy::Ref { \n-                        // Get the closure body to check the parameters and values \n+                    if capture == CaptureBy::Ref {\n+                        // Get the closure body to check the parameters and values\n                         let closure_body = cx.tcx.hir().body(body_id);\n                         // make sure there's only one parameter (`|_|`)\n-                        if closure_body.params.len() == 1 {          \n-                            // make sure that parameter is the wild token (`_`)                  \n+                        if closure_body.params.len() == 1 {\n+                            // make sure that parameter is the wild token (`_`)\n                             if let PatKind::Wild = closure_body.params[0].pat.kind {\n-                                // Check the value of the closure to see if we can build the enum we are throwing away the error for\n-                                // make sure this is a Path\n+                                // Check the value of the closure to see if we can build the enum we are throwing away\n+                                // the error for make sure this is a Path\n                                 if let ExprKind::Path(q_path) = &closure_body.value.kind {\n                                     // this should be a resolved path, only keep the path field\n                                     if let QPath::Resolved(_, path) = q_path {\n-                                        // finally get the idents for each path segment collect them as a string and join them with the path separator (\"::\"\")\n-                                        let closure_fold: String = path.segments.iter().map(|x| x.ident.as_str().to_string()).collect::<Vec<String>>().join(\"::\");\n-                                        //Span the body of the closure (the |...| bit) and suggest the fix by taking the error and encapsulating it in the enum \n+                                        // finally get the idents for each path segment collect them as a string and\n+                                        // join them with the path separator (\"::\"\")\n+                                        let closure_fold: String = path\n+                                            .segments\n+                                            .iter()\n+                                            .map(|x| x.ident.as_str().to_string())\n+                                            .collect::<Vec<String>>()\n+                                            .join(\"::\");\n+                                        //Span the body of the closure (the |...| bit) and suggest the fix by taking\n+                                        // the error and encapsulating it in the enum\n                                         span_lint_and_sugg(\n                                             cx,\n                                             MAP_ERR_IGNORE,\n@@ -84,10 +92,11 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                                             \"Allow the error enum to encapsulate the original error\",\n                                             format!(\"|e| {}(e)\", closure_fold),\n                                             Applicability::HasPlaceholders,\n-                                        ); \n+                                        );\n                                     }\n                                 } else {\n-                                    //If we cannot build the enum in a human readable way just suggest not throwing way the error\n+                                    //If we cannot build the enum in a human readable way just suggest not throwing way\n+                                    // the error\n                                     span_lint_and_sugg(\n                                         cx,\n                                         MAP_ERR_IGNORE,\n@@ -96,13 +105,13 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                                         \"Allow the error enum to encapsulate the original error\",\n                                         \"|e|\".to_string(),\n                                         Applicability::HasPlaceholders,\n-                                    ); \n+                                    );\n                                 }\n                             }\n                         }\n-                    }  \n+                    }\n                 }\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6b5bcdaa78e2762cd82fc68130cdb4405d217e03", "filename": "tests/ui/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=202a80c927412a548180eca5990ee764d76ed643", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::drop_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n+#![allow(clippy::map_err_ignore)]\n \n use std::mem::drop;\n "}, {"sha": "7974bf56d44cf582e1b80e98ecf4c31c4aeb226e", "filename": "tests/ui/drop_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=202a80c927412a548180eca5990ee764d76ed643", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:9:5\n+  --> $DIR/drop_ref.rs:10:5\n    |\n LL |     drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::drop-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:9:10\n+  --> $DIR/drop_ref.rs:10:10\n    |\n LL |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:12:5\n+  --> $DIR/drop_ref.rs:13:5\n    |\n LL |     drop(&owned1);\n    |     ^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:12:10\n+  --> $DIR/drop_ref.rs:13:10\n    |\n LL |     drop(&owned1);\n    |          ^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:13:5\n+  --> $DIR/drop_ref.rs:14:5\n    |\n LL |     drop(&&owned1);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:13:10\n+  --> $DIR/drop_ref.rs:14:10\n    |\n LL |     drop(&&owned1);\n    |          ^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:14:5\n+  --> $DIR/drop_ref.rs:15:5\n    |\n LL |     drop(&mut owned1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n+  --> $DIR/drop_ref.rs:15:10\n    |\n LL |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:18:5\n+  --> $DIR/drop_ref.rs:19:5\n    |\n LL |     drop(reference1);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:18:10\n+  --> $DIR/drop_ref.rs:19:10\n    |\n LL |     drop(reference1);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:21:5\n+  --> $DIR/drop_ref.rs:22:5\n    |\n LL |     drop(reference2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:21:10\n+  --> $DIR/drop_ref.rs:22:10\n    |\n LL |     drop(reference2);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:24:5\n+  --> $DIR/drop_ref.rs:25:5\n    |\n LL |     drop(reference3);\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:24:10\n+  --> $DIR/drop_ref.rs:25:10\n    |\n LL |     drop(reference3);\n    |          ^^^^^^^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:29:5\n+  --> $DIR/drop_ref.rs:30:5\n    |\n LL |     drop(&val);\n    |     ^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:29:10\n+  --> $DIR/drop_ref.rs:30:10\n    |\n LL |     drop(&val);\n    |          ^^^^\n \n error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_ref.rs:37:5\n+  --> $DIR/drop_ref.rs:38:5\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:37:20\n+  --> $DIR/drop_ref.rs:38:20\n    |\n LL |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^"}, {"sha": "f3a74ad95cd297b815ee7ebd3775e1d70205fd33", "filename": "tests/ui/map_err.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fmap_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fmap_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.rs?ref=202a80c927412a548180eca5990ee764d76ed643", "patch": "@@ -0,0 +1,24 @@\n+use std::convert::TryFrom;\n+use std::error::Error;\n+use std::fmt;\n+\n+#[derive(Debug)]\n+enum Errors {\n+    Ignored,\n+}\n+\n+impl Error for Errors {}\n+\n+impl fmt::Display for Errors {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Error\")\n+    }\n+}\n+\n+fn main() -> Result<(), Errors> {\n+    let x = u32::try_from(-123_i32);\n+\n+    println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n+\n+    Ok(())\n+}"}, {"sha": "8cd37d8c025261009365263d1c1f74e2fd89f3f8", "filename": "tests/ui/map_err.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202a80c927412a548180eca5990ee764d76ed643/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=202a80c927412a548180eca5990ee764d76ed643", "patch": "@@ -0,0 +1,10 @@\n+error: `map_err` has thrown away the original error\n+  --> $DIR/map_err.rs:21:32\n+   |\n+LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n+   |                                ^^^ help: Allow the error enum to encapsulate the original error: `|e| Errors::Ignored(e)`\n+   |\n+   = note: `-D clippy::map-err-ignore` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}