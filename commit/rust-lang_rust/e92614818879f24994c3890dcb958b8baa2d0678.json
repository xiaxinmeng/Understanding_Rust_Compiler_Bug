{"sha": "e92614818879f24994c3890dcb958b8baa2d0678", "node_id": "C_kwDOAAsO6NoAKGU5MjYxNDgxODg3OWYyNDk5NGMzODkwZGNiOTU4YjhiYWEyZDA2Nzg", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2023-05-22T08:07:17Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2023-05-22T08:07:17Z"}, "message": "Fix unsafe blocks", "tree": {"sha": "f80037a9a44f7256144b357c063026b2d401ecfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f80037a9a44f7256144b357c063026b2d401ecfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e92614818879f24994c3890dcb958b8baa2d0678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e92614818879f24994c3890dcb958b8baa2d0678", "html_url": "https://github.com/rust-lang/rust/commit/e92614818879f24994c3890dcb958b8baa2d0678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e92614818879f24994c3890dcb958b8baa2d0678/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c277d1be896ad5499a464d92a3d427488df470e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c277d1be896ad5499a464d92a3d427488df470e", "html_url": "https://github.com/rust-lang/rust/commit/1c277d1be896ad5499a464d92a3d427488df470e"}], "stats": {"total": 158, "additions": 152, "deletions": 6}, "files": [{"sha": "61e249b995e6b7a93f7f94c911dc98bf5ab88137", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e92614818879f24994c3890dcb958b8baa2d0678/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e92614818879f24994c3890dcb958b8baa2d0678/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=e92614818879f24994c3890dcb958b8baa2d0678", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{BlockCheckMode, Expr, ExprKind, UnsafeSource};\n use rustc_lint::{LateContext, LintContext};\n use rustc_session::Session;\n use rustc_span::source_map::{original_sp, SourceMap};\n@@ -71,11 +71,17 @@ pub fn expr_block<T: LintContext>(\n     app: &mut Applicability,\n ) -> String {\n     let (code, from_macro) = snippet_block_with_context(cx, expr.span, outer, default, indent_relative_to, app);\n-    if from_macro {\n-        format!(\"{{ {code} }}\")\n-    } else if let ExprKind::Block(_, _) = expr.kind {\n+    if !from_macro &&\n+        let ExprKind::Block(block, _) = expr.kind &&\n+        // TODO: Is this enough UnsafeSource::UserProvided, or should CompilerGenerated be also included?\n+        block.rules != BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n+    {\n         format!(\"{code}\")\n     } else {\n+        // FIXME: add extra indent for the unsafe blocks:\n+        //     original code:   unsafe { ... }\n+        //     result code:     { unsafe { ... } }\n+        //     desired code:    {\\n  unsafe { ... }\\n}\n         format!(\"{{ {code} }}\")\n     }\n }"}, {"sha": "810f153fe621c09303ec71e45ac028ce3ffa998f", "filename": "tests/ui/single_match.stderr", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e92614818879f24994c3890dcb958b8baa2d0678/tests%2Fui%2Fsingle_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e92614818879f24994c3890dcb958b8baa2d0678/tests%2Fui%2Fsingle_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.stderr?ref=e92614818879f24994c3890dcb958b8baa2d0678", "patch": "@@ -155,5 +155,48 @@ LL | |         (..) => {},\n LL | |     }\n    | |_____^ help: try this: `if let (.., Some(E::V), _) = (Some(42), Some(E::V), Some(42)) {}`\n \n-error: aborting due to 16 previous errors\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:249:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => unsafe {\n+LL | |             let r = &v as *const i32;\n+LL | |             println!(\"{}\", *r);\n+LL | |         },\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar { unsafe {\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:257:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => {\n+LL | |             // this comment prevents rustfmt from collapsing the block\n+LL | |             unsafe {\n+...  |\n+LL | |         _ => {},\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar {\n+LL +         // this comment prevents rustfmt from collapsing the block\n+LL +         unsafe {\n+LL +             let r = &v as *const i32;\n+LL +             println!(\"{}\", *r);\n+LL +         }\n+LL +     }\n+   |\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "6537156d515850b882ceef5ac8abbbb26e7d054f", "filename": "tests/ui/single_match_else.stderr", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/e92614818879f24994c3890dcb958b8baa2d0678/tests%2Fui%2Fsingle_match_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e92614818879f24994c3890dcb958b8baa2d0678/tests%2Fui%2Fsingle_match_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.stderr?ref=e92614818879f24994c3890dcb958b8baa2d0678", "patch": "@@ -100,5 +100,102 @@ LL +         return;\n LL +     }\n    |\n \n-error: aborting due to 5 previous errors\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:120:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => unsafe {\n+LL | |             let r = &v as *const i32;\n+LL | |             println!(\"{}\", *r);\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar { unsafe {\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } } else {\n+LL +         println!(\"None1\");\n+LL +         println!(\"None2\");\n+LL +     }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:131:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => {\n+LL | |             println!(\"Some\");\n+LL | |             println!(\"{v}\");\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar {\n+LL +         println!(\"Some\");\n+LL +         println!(\"{v}\");\n+LL +     } else { unsafe {\n+LL +         let v = 0;\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:143:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => unsafe {\n+LL | |             let r = &v as *const i32;\n+LL | |             println!(\"{}\", *r);\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar { unsafe {\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } } else { unsafe {\n+LL +         let v = 0;\n+LL +         let r = &v as *const i32;\n+LL +         println!(\"{}\", *r);\n+LL +     } }\n+   |\n+\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match_else.rs:155:5\n+   |\n+LL | /     match bar {\n+LL | |         Some(v) => {\n+LL | |             // this comment prevents rustfmt from collapsing the block\n+LL | |             unsafe {\n+...  |\n+LL | |         },\n+LL | |     }\n+   | |_____^\n+   |\n+help: try this\n+   |\n+LL ~     if let Some(v) = bar {\n+LL +         // this comment prevents rustfmt from collapsing the block\n+LL +         unsafe {\n+LL +             let r = &v as *const i32;\n+LL +             println!(\"{}\", *r);\n+LL +         }\n+LL +     } else {\n+LL +         println!(\"None\");\n+LL +         println!(\"None\");\n+LL +     }\n+   |\n+\n+error: aborting due to 9 previous errors\n "}]}