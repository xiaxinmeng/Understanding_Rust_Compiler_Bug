{"sha": "279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "node_id": "C_kwDOAAsO6NoAKDI3OWM5ZDNkOWY0YWE4MGE0ZTdlZmFjOGRiYTczMWRiY2U4NzBkZjM", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T17:51:31Z"}, "message": "Remove no longer used `MutateMode` enum", "tree": {"sha": "e2192f4207bcf90a90a8fc81dfc879b43f76de09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2192f4207bcf90a90a8fc81dfc879b43f76de09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "html_url": "https://github.com/rust-lang/rust/commit/279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279c9d3d9f4aa80a4e7efac8dba731dbce870df3/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000b36c505a8865322c376486791cdee8f38d0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/000b36c505a8865322c376486791cdee8f38d0c5", "html_url": "https://github.com/rust-lang/rust/commit/000b36c505a8865322c376486791cdee8f38d0c5"}], "stats": {"total": 72, "additions": 18, "deletions": 54}, "files": [{"sha": "73ced63e4d75075ce517f7387f5ecaf22249d0eb", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/279c9d3d9f4aa80a4e7efac8dba731dbce870df3/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c9d3d9f4aa80a4e7efac8dba731dbce870df3/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "patch": "@@ -8,8 +8,8 @@ use rustc_middle::ty::TyCtxt;\n \n use crate::{\n     borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, path_utils::*, AccessDepth,\n-    Activation, ArtificialField, BorrowIndex, Deep, JustWrite, LocalMutationIsAllowed, MutateMode,\n-    Read, ReadKind, ReadOrWrite, Reservation, Shallow, Write, WriteKind,\n+    Activation, ArtificialField, BorrowIndex, Deep, LocalMutationIsAllowed, Read, ReadKind,\n+    ReadOrWrite, Reservation, Shallow, Write, WriteKind,\n };\n \n pub(super) fn generate_invalidates<'tcx>(\n@@ -58,13 +58,13 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::Assign(box (lhs, rhs)) => {\n                 self.consume_rvalue(location, rhs);\n \n-                self.mutate_place(location, *lhs, Shallow(None), JustWrite);\n+                self.mutate_place(location, *lhs, Shallow(None));\n             }\n             StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, **place, Shallow(None), JustWrite);\n+                self.mutate_place(location, **place, Shallow(None));\n             }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ref src,\n@@ -117,7 +117,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 target: _,\n                 unwind: _,\n             } => {\n-                self.mutate_place(location, *drop_place, Deep, JustWrite);\n+                self.mutate_place(location, *drop_place, Deep);\n                 self.consume_operand(location, new_value);\n             }\n             TerminatorKind::Call {\n@@ -133,7 +133,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     self.consume_operand(location, arg);\n                 }\n                 if let Some((dest, _ /*bb*/)) = destination {\n-                    self.mutate_place(location, *dest, Deep, JustWrite);\n+                    self.mutate_place(location, *dest, Deep);\n                 }\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n@@ -156,7 +156,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     }\n                 }\n \n-                self.mutate_place(location, *resume_arg, Deep, JustWrite);\n+                self.mutate_place(location, *resume_arg, Deep);\n             }\n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n                 // Invalidate all borrows of local places\n@@ -183,13 +183,13 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n                             if let Some(place) = place {\n-                                self.mutate_place(location, place, Shallow(None), JustWrite);\n+                                self.mutate_place(location, place, Shallow(None));\n                             }\n                         }\n                         InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n                             self.consume_operand(location, in_value);\n                             if let Some(out_place) = out_place {\n-                                self.mutate_place(location, out_place, Shallow(None), JustWrite);\n+                                self.mutate_place(location, out_place, Shallow(None));\n                             }\n                         }\n                         InlineAsmOperand::Const { value: _ }\n@@ -213,13 +213,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n \n impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n     /// Simulates mutation of a place.\n-    fn mutate_place(\n-        &mut self,\n-        location: Location,\n-        place: Place<'tcx>,\n-        kind: AccessDepth,\n-        _mode: MutateMode,\n-    ) {\n+    fn mutate_place(&mut self, location: Location, place: Place<'tcx>, kind: AccessDepth) {\n         self.access_place(\n             location,\n             place,"}, {"sha": "89ee17bf51286e946966d326d1eb94b70a3741a7", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/279c9d3d9f4aa80a4e7efac8dba731dbce870df3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279c9d3d9f4aa80a4e7efac8dba731dbce870df3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=279c9d3d9f4aa80a4e7efac8dba731dbce870df3", "patch": "@@ -54,7 +54,6 @@ use rustc_mir_dataflow::MoveDataParamEnv;\n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n-use self::MutateMode::JustWrite;\n use facts::AllFacts;\n \n use self::path_utils::*;\n@@ -629,7 +628,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             StatementKind::Assign(box (lhs, ref rhs)) => {\n                 self.consume_rvalue(location, (rhs, span), flow_state);\n \n-                self.mutate_place(location, (*lhs, span), Shallow(None), JustWrite, flow_state);\n+                self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);\n             }\n             StatementKind::FakeRead(box (_, ref place)) => {\n                 // Read for match doesn't access any memory and is used to\n@@ -650,7 +649,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 );\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, (**place, span), Shallow(None), JustWrite, flow_state);\n+                self.mutate_place(location, (**place, span), Shallow(None), flow_state);\n             }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ..\n@@ -716,7 +715,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 target: _,\n                 unwind: _,\n             } => {\n-                self.mutate_place(loc, (drop_place, span), Deep, JustWrite, flow_state);\n+                self.mutate_place(loc, (drop_place, span), Deep, flow_state);\n                 self.consume_operand(loc, (new_value, span), flow_state);\n             }\n             TerminatorKind::Call {\n@@ -732,7 +731,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     self.consume_operand(loc, (arg, span), flow_state);\n                 }\n                 if let Some((dest, _ /*bb*/)) = *destination {\n-                    self.mutate_place(loc, (dest, span), Deep, JustWrite, flow_state);\n+                    self.mutate_place(loc, (dest, span), Deep, flow_state);\n                 }\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n@@ -746,7 +745,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n \n             TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {\n                 self.consume_operand(loc, (value, span), flow_state);\n-                self.mutate_place(loc, (resume_arg, span), Deep, JustWrite, flow_state);\n+                self.mutate_place(loc, (resume_arg, span), Deep, flow_state);\n             }\n \n             TerminatorKind::InlineAsm {\n@@ -764,13 +763,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n                             if let Some(place) = place {\n-                                self.mutate_place(\n-                                    loc,\n-                                    (place, span),\n-                                    Shallow(None),\n-                                    JustWrite,\n-                                    flow_state,\n-                                );\n+                                self.mutate_place(loc, (place, span), Shallow(None), flow_state);\n                             }\n                         }\n                         InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n@@ -780,7 +773,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                                     loc,\n                                     (out_place, span),\n                                     Shallow(None),\n-                                    JustWrite,\n                                     flow_state,\n                                 );\n                             }\n@@ -852,12 +844,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-enum MutateMode {\n-    JustWrite,\n-    WriteAndRead,\n-}\n-\n use self::AccessDepth::{Deep, Shallow};\n use self::ReadOrWrite::{Activation, Read, Reservation, Write};\n \n@@ -943,7 +929,6 @@ enum LocalMutationIsAllowed {\n \n #[derive(Copy, Clone, Debug)]\n enum InitializationRequiringAction {\n-    Update,\n     Borrow,\n     MatchOn,\n     Use,\n@@ -960,7 +945,6 @@ struct RootPlace<'tcx> {\n impl InitializationRequiringAction {\n     fn as_noun(self) -> &'static str {\n         match self {\n-            InitializationRequiringAction::Update => \"update\",\n             InitializationRequiringAction::Borrow => \"borrow\",\n             InitializationRequiringAction::MatchOn => \"use\", // no good noun\n             InitializationRequiringAction::Use => \"use\",\n@@ -971,7 +955,6 @@ impl InitializationRequiringAction {\n \n     fn as_verb_in_past_tense(self) -> &'static str {\n         match self {\n-            InitializationRequiringAction::Update => \"updated\",\n             InitializationRequiringAction::Borrow => \"borrowed\",\n             InitializationRequiringAction::MatchOn => \"matched on\",\n             InitializationRequiringAction::Use => \"used\",\n@@ -1208,23 +1191,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         place_span: (Place<'tcx>, Span),\n         kind: AccessDepth,\n-        mode: MutateMode,\n         flow_state: &Flows<'cx, 'tcx>,\n     ) {\n-        // Write of P[i] or *P, or WriteAndRead of any P, requires P init'd.\n-        match mode {\n-            MutateMode::WriteAndRead => {\n-                self.check_if_path_or_subpath_is_moved(\n-                    location,\n-                    InitializationRequiringAction::Update,\n-                    (place_span.0.as_ref(), place_span.1),\n-                    flow_state,\n-                );\n-            }\n-            MutateMode::JustWrite => {\n-                self.check_if_assigned_path_is_moved(location, place_span, flow_state);\n-            }\n-        }\n+        // Write of P[i] or *P requires P init'd.\n+        self.check_if_assigned_path_is_moved(location, place_span, flow_state);\n \n         // Special case: you can assign an immutable local variable\n         // (e.g., `x = ...`) so long as it has never been initialized"}]}