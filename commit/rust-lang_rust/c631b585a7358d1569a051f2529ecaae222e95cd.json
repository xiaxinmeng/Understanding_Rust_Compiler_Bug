{"sha": "c631b585a7358d1569a051f2529ecaae222e95cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MzFiNTg1YTczNThkMTU2OWEwNTFmMjUyOWVjYWFlMjIyZTk1Y2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T21:23:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-15T21:23:22Z"}, "message": "matching brace", "tree": {"sha": "2e8332d166900c29cf485297b8510451b97accd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8332d166900c29cf485297b8510451b97accd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c631b585a7358d1569a051f2529ecaae222e95cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c631b585a7358d1569a051f2529ecaae222e95cd", "html_url": "https://github.com/rust-lang/rust/commit/c631b585a7358d1569a051f2529ecaae222e95cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c631b585a7358d1569a051f2529ecaae222e95cd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa0d344581dcfd7f18c595688a4b2709b0f2421e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0d344581dcfd7f18c595688a4b2709b0f2421e", "html_url": "https://github.com/rust-lang/rust/commit/aa0d344581dcfd7f18c595688a4b2709b0f2421e"}], "stats": {"total": 149, "additions": 135, "deletions": 14}, "files": [{"sha": "5cfc064b51ff157ed11fa35358f39ad43cc9abff", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -1,3 +1,5 @@\n [workspace]\n members = [ \"crates/*\" ]\n-exclude = [ \"crates/indxr\" ]\n+\n+[profile.release]\n+debug = true"}, {"sha": "fd3b8e4232bff3d3fb417f6f4df98bcc36209c1e", "filename": "code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/code%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/code%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage.json?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -36,6 +36,11 @@\n       {\n         \"command\": \"libsyntax-rust.extendSelection\",\n         \"title\": \"Rust Extend Selection\"\n+      },\n+      {\n+        \"command\": \"libsyntax-rust.matchingBrace\",\n+        \"key\": \"ctrl+shift+m\",\n+        \"title\": \"Rust Matching Brace\"\n       }\n     ],\n     \"keybindings\": ["}, {"sha": "afcbccf63c2947b3fc1ab2878cc1e4b89243e419", "filename": "code/src/extension.ts", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/code%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/code%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fextension.ts?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -35,6 +35,22 @@ export function activate(context: vscode.ExtensionContext) {\n             return new vscode.Selection(r.start, r.end)\n         })\n     })\n+    registerCommand('libsyntax-rust.matchingBrace', async () => {\n+        let editor = vscode.window.activeTextEditor\n+        if (editor == null || editor.document.languageId != \"rust\") return\n+        let request: FindMatchingBraceParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            offsets: editor.selections.map((s) => {\n+                return client.code2ProtocolConverter.asPosition(s.active)\n+             })\n+        }\n+        let response = await client.sendRequest<lc.Position[]>(\"m/findMatchingBrace\", request)\n+        editor.selections = editor.selections.map((sel, idx) => {\n+            let active = client.protocol2CodeConverter.asPosition(response[idx])\n+            let anchor = sel.isEmpty ? active : sel.anchor\n+            return new vscode.Selection(anchor, active)\n+        })\n+    })\n \n     dispose(vscode.workspace.registerTextDocumentContentProvider(\n         'libsyntax-rust',\n@@ -184,6 +200,11 @@ interface ExtendSelectionResult {\n     selections: lc.Range[];\n }\n \n+interface FindMatchingBraceParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    offsets: lc.Position[];\n+}\n+\n interface PublishDecorationsParams {\n     uri: string,\n     decorations: Decoration[],"}, {"sha": "28da457d1af88093c72b01be33f0130b0cc4e06c", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -12,8 +12,8 @@ mod code_actions;\n use libsyntax2::{\n     ast::{self, NameOwner},\n     AstNode,\n-    algo::walk,\n-    SyntaxKind::*,\n+    algo::{walk, find_leaf_at_offset},\n+    SyntaxKind::{self, *},\n };\n pub use libsyntax2::{File, TextRange, TextUnit};\n pub use self::{\n@@ -52,6 +52,28 @@ pub fn parse(text: &str) -> ast::File {\n     ast::File::parse(text)\n }\n \n+pub fn matching_brace(file: &ast::File, offset: TextUnit) -> Option<TextUnit> {\n+    const BRACES: &[SyntaxKind] = &[\n+        L_CURLY, R_CURLY,\n+        L_BRACK, R_BRACK,\n+        L_PAREN, R_PAREN,\n+        L_ANGLE, R_ANGLE,\n+    ];\n+    let syntax = file.syntax();\n+    let syntax = syntax.as_ref();\n+    let (brace_node, brace_idx) = find_leaf_at_offset(syntax, offset)\n+        .filter_map(|node| {\n+            let idx = BRACES.iter().position(|&brace| brace == node.kind())?;\n+            Some((node, idx))\n+        })\n+        .next()?;\n+    let parent = brace_node.parent()?;\n+    let matching_kind = BRACES[brace_idx ^ 1];\n+    let matching_node = parent.children()\n+        .find(|node| node.kind() == matching_kind)?;\n+    Some(matching_node.range().start())\n+}\n+\n pub fn highlight(file: &ast::File) -> Vec<HighlightedRange> {\n     let syntax = file.syntax();\n     let mut res = Vec::new();"}, {"sha": "d5df9d0cc2892916633b730f05b74fb358df60b9", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -9,7 +9,7 @@ use itertools::Itertools;\n use libeditor::{\n     File, TextUnit, TextRange, ActionResult, CursorPosition,\n     highlight, runnables, extend_selection, file_structure,\n-    flip_comma, add_derive,\n+    flip_comma, add_derive, matching_brace,\n };\n \n #[test]\n@@ -119,6 +119,25 @@ fn test_add_derive() {\n     )\n }\n \n+#[test]\n+fn test_matching_brace() {\n+    fn do_check(before: &str, after: &str) {\n+        let (pos, before) = extract_cursor(before);\n+        let file = file(&before);\n+        let new_pos = match matching_brace(&file, pos) {\n+            None => pos,\n+            Some(pos) => pos,\n+        };\n+        let actual = add_cursor(&before, new_pos);\n+        assert_eq_text!(after, &actual);\n+    }\n+\n+    do_check(\n+        \"struct Foo { a: i32, }<|>\",\n+        \"struct Foo <|>{ a: i32, }\",\n+    );\n+}\n+\n fn file(text: &str) -> File {\n     File::parse(text)\n }\n@@ -138,16 +157,12 @@ fn check_action<F: Fn(&File, TextUnit) -> Option<ActionResult>>(\n     let file = file(&before);\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n     let actual = result.edit.apply(&before);\n-    let actual_cursor_pos: u32 = match result.cursor_position {\n+    let actual_cursor_pos = match result.cursor_position {\n         CursorPosition::Same => result.edit.apply_to_offset(before_cursor_pos).unwrap(),\n         CursorPosition::Offset(off) => off,\n-    }.into();\n-    let actual_cursor_pos = actual_cursor_pos as usize;\n-    let mut actual_with_cursor = String::new();\n-    actual_with_cursor.push_str(&actual[..actual_cursor_pos]);\n-    actual_with_cursor.push_str(\"<|>\");\n-    actual_with_cursor.push_str(&actual[actual_cursor_pos..]);\n-    assert_eq_text!(after, &actual_with_cursor);\n+    };\n+    let actual = add_cursor(&actual, actual_cursor_pos);\n+    assert_eq_text!(after, &actual);\n }\n \n fn extract_cursor(text: &str) -> (TextUnit, String) {\n@@ -162,3 +177,13 @@ fn extract_cursor(text: &str) -> (TextUnit, String) {\n     let cursor_pos = TextUnit::from(cursor_pos as u32);\n     (cursor_pos, new_text)\n }\n+\n+fn add_cursor(text: &str, offset: TextUnit) -> String {\n+    let offset: u32 = offset.into();\n+    let offset: usize = offset as usize;\n+    let mut res = String::new();\n+    res.push_str(&text[..offset]);\n+    res.push_str(\"<|>\");\n+    res.push_str(&text[offset..]);\n+    res\n+}"}, {"sha": "b3709ccafceae07e82d24376357567307c271be4", "filename": "crates/server/src/conv.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fconv.rs?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -117,6 +117,14 @@ impl ConvWith for AtomEdit {\n     }\n }\n \n+impl<T: ConvWith> ConvWith for Option<T> {\n+    type Ctx = <T as ConvWith>::Ctx;\n+    type Output = Option<<T as ConvWith>::Output>;\n+    fn conv_with(self, ctx: &Self::Ctx) -> Self::Output {\n+        self.map(|x| ConvWith::conv_with(x, ctx))\n+    }\n+}\n+\n impl<'a> TryConvWith for &'a Url {\n     type Ctx = PathMap;\n     type Output = FileId;"}, {"sha": "d7b78b4fa99a05e8a306374bd5abde10dc9f56f7", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -3,7 +3,7 @@ use std::collections::HashMap;\n use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n     Command, TextDocumentIdentifier, WorkspaceEdit,\n-    SymbolInformation,\n+    SymbolInformation, Position,\n };\n use libanalysis::{World, Query};\n use libeditor;\n@@ -42,6 +42,25 @@ pub fn handle_extend_selection(\n     Ok(req::ExtendSelectionResult { selections })\n }\n \n+pub fn handle_find_matching_brace(\n+    world: World,\n+    path_map: PathMap,\n+    params: req::FindMatchingBraceParams,\n+) -> Result<Vec<Position>> {\n+    let file_id = params.text_document.try_conv_with(&path_map)?;\n+    let file = world.file_syntax(file_id)?;\n+    let line_index = world.file_line_index(file_id)?;\n+    let res = params.offsets\n+        .into_iter()\n+        .map_conv_with(&line_index)\n+        .map(|offset| {\n+            libeditor::matching_brace(&file, offset).unwrap_or(offset)\n+        })\n+        .map_conv_with(&line_index)\n+        .collect();\n+    Ok(res)\n+}\n+\n pub fn handle_document_symbol(\n     world: World,\n     path_map: PathMap,"}, {"sha": "4d5dfb437f63bc503a7b6fd0386d767b580d75d1", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -26,6 +26,7 @@ use {\n         handle_execute_command,\n         handle_workspace_symbol,\n         handle_goto_definition,\n+        handle_find_matching_brace,\n     },\n };\n \n@@ -148,6 +149,9 @@ fn on_request(\n     handle_request_on_threadpool::<req::ExtendSelection>(\n         &mut req, pool, path_map, world, sender, handle_extend_selection,\n     )?;\n+    handle_request_on_threadpool::<req::FindMatchingBrace>(\n+        &mut req, pool, path_map, world, sender, handle_find_matching_brace,\n+    )?;\n     handle_request_on_threadpool::<req::DocumentSymbolRequest>(\n         &mut req, pool, path_map, world, sender, handle_document_symbol,\n     )?;"}, {"sha": "c3efc74893d1c0dbaa30c79c9a0cf7e60138dfdf", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c631b585a7358d1569a051f2529ecaae222e95cd/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=c631b585a7358d1569a051f2529ecaae222e95cd", "patch": "@@ -1,5 +1,5 @@\n use serde::{ser::Serialize, de::DeserializeOwned};\n-use languageserver_types::{TextDocumentIdentifier, Range, Url};\n+use languageserver_types::{TextDocumentIdentifier, Range, Url, Position};\n use url_serde;\n \n pub use languageserver_types::{\n@@ -65,6 +65,21 @@ pub struct ExtendSelectionResult {\n     pub selections: Vec<Range>,\n }\n \n+pub enum FindMatchingBrace {}\n+\n+impl Request for FindMatchingBrace {\n+    type Params = FindMatchingBraceParams;\n+    type Result = Vec<Position>;\n+    const METHOD: &'static str = \"m/findMatchingBrace\";\n+}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct FindMatchingBraceParams {\n+    pub text_document: TextDocumentIdentifier,\n+    pub offsets: Vec<Position>,\n+}\n+\n pub enum PublishDecorations {}\n \n impl Notification for PublishDecorations {"}]}