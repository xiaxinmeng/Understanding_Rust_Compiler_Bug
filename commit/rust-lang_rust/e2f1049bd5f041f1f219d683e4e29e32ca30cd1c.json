{"sha": "e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZjEwNDliZDVmMDQxZjFmMjE5ZDY4M2U0ZTI5ZTMyY2EzMGNkMWM=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-22T19:36:00Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-23T11:02:00Z"}, "message": "Remove unused TyDesc parameter from the glue functions\n\nTo remove the environment pointer, support for function pointers without\nan environment argument is needed (i.e. a fixed version of #6661).", "tree": {"sha": "509134d12c4aa0c9bdaee4fecebe95a39036fdb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/509134d12c4aa0c9bdaee4fecebe95a39036fdb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "html_url": "https://github.com/rust-lang/rust/commit/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b76bac41de9f52295a99db21abdd1ad5b0fc231", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b76bac41de9f52295a99db21abdd1ad5b0fc231", "html_url": "https://github.com/rust-lang/rust/commit/1b76bac41de9f52295a99db21abdd1ad5b0fc231"}], "stats": {"total": 103, "additions": 66, "deletions": 37}, "files": [{"sha": "cec3a2c1e952c7007502c6d220f0058777a492fb", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -115,6 +115,19 @@ fn round_up_to(base: uint, align: uint) -> uint {\n     (base + (align - 1)) & !(align - 1)\n }\n \n+#[inline]\n+#[cfg(not(stage0))]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    // This function should be inlined when stage0 is gone\n+    ((*tydesc).drop_glue)(data);\n+}\n+\n+#[inline]\n+#[cfg(stage0)]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    ((*tydesc).drop_glue)(0 as **TyDesc, data);\n+}\n+\n // Walk down a chunk, running the destructors for any objects stored\n // in it.\n unsafe fn destroy_chunk(chunk: &Chunk) {\n@@ -134,8 +147,7 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n         //debug!(\"freeing object: idx = %u, size = %u, align = %u, done = %b\",\n         //       start, size, align, is_done);\n         if is_done {\n-            ((*tydesc).drop_glue)(&tydesc as **TyDesc,\n-                                  ptr::offset(buf, start) as *i8);\n+            call_drop_glue(tydesc, ptr::offset(buf, start) as *i8);\n         }\n \n         // Find where the next tydesc lives"}, {"sha": "05b6e90c682f0f6030588c444c9df4e5e59a9c8f", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n pub static rc_base_field_refcnt: uint = 0u;\n \n pub static task_field_refcnt: uint = 0u;\n@@ -69,14 +66,4 @@ pub static vec_elt_elems: uint = 2u;\n pub static slice_elt_base: uint = 0u;\n pub static slice_elt_len: uint = 1u;\n \n-pub static worst_case_glue_call_args: uint = 7u;\n-\n pub static abi_version: uint = 1u;\n-\n-pub fn memcpy_glue_name() -> ~str { return ~\"rust_memcpy_glue\"; }\n-\n-pub fn bzero_glue_name() -> ~str { return ~\"rust_bzero_glue\"; }\n-\n-pub fn yield_glue_name() -> ~str { return ~\"rust_yield_glue\"; }\n-\n-pub fn no_op_type_glue_name() -> ~str { return ~\"rust_no_op_type_glue\"; }"}, {"sha": "75a1221cca5254ba26a7e2086073b4755ce55f8a", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -232,7 +232,7 @@ pub fn lazily_emit_tydesc_glue(ccx: @mut CrateContext,\n                                field: uint,\n                                ti: @mut tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_tydesc_glue\");\n-    let llfnty = type_of_glue_fn(ccx);\n+    let llfnty = Type::glue_fn();\n \n     if lazily_emit_simplified_tydesc_glue(ccx, field, ti) {\n         return;\n@@ -338,9 +338,7 @@ pub fn call_tydesc_glue_full(bcx: block,\n         }\n     };\n \n-    Call(bcx, llfn, [C_null(Type::nil().ptr_to()),\n-                        C_null(bcx.ccx().tydesc_type.ptr_to().ptr_to()),\n-                        llrawptr]);\n+    Call(bcx, llfn, [C_null(Type::nil().ptr_to()), llrawptr]);\n }\n \n // See [Note-arg-mode]\n@@ -680,7 +678,7 @@ pub fn make_generic_glue_inner(ccx: @mut CrateContext,\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n-    let rawptr0_arg = fcx.arg_pos(1u);\n+    let rawptr0_arg = fcx.arg_pos(0u);\n     let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, rawptr0_arg as c_uint) };\n     let llty = type_of(ccx, t);\n     let llrawptr0 = PointerCast(bcx, llrawptr0, llty.ptr_to());\n@@ -715,7 +713,7 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n     let _icx = push_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n     ccx.finished_tydescs = true;\n-    let glue_fn_ty = Type::generic_glue_fn(ccx);\n+    let glue_fn_ty = Type::generic_glue_fn(ccx).ptr_to();\n     let tyds = &mut ccx.tydescs;\n     for tyds.each_value |&val| {\n         let ti = val;\n@@ -782,7 +780,3 @@ pub fn emit_tydescs(ccx: &mut CrateContext) {\n         }\n     };\n }\n-\n-pub fn type_of_glue_fn(ccx: &CrateContext) -> Type {\n-    Type::glue_fn(ccx.tydesc_type)\n-}"}, {"sha": "64688ac4134243d0933906145c0ffc8dc9f83d4d", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -20,7 +20,6 @@ use middle::trans::base;\n \n use syntax::ast;\n use syntax::abi::{Architecture, X86, X86_64, Arm, Mips};\n-use back::abi;\n \n use core::vec;\n use core::cast;\n@@ -189,22 +188,20 @@ impl Type {\n             None => ()\n         }\n \n-        let ty = Type::glue_fn(cx.tydesc_type).ptr_to();\n+        let ty = Type::glue_fn();\n         cx.tn.associate_type(\"glue_fn\", &ty);\n \n         return ty;\n     }\n \n-    pub fn glue_fn(tydesc: Type) -> Type {\n-        let tydescpp = tydesc.ptr_to().ptr_to();\n-        Type::func([ Type::nil().ptr_to(), tydescpp, Type::i8p() ],\n+    pub fn glue_fn() -> Type {\n+        Type::func([ Type::nil().ptr_to(), Type::i8p() ],\n             &Type::void())\n     }\n \n     pub fn tydesc(arch: Architecture) -> Type {\n         let mut tydesc = Type::named_struct(\"tydesc\");\n-        let pvoid = Type::i8p();\n-        let glue_fn_ty = Type::glue_fn(tydesc).ptr_to();\n+        let glue_fn_ty = Type::glue_fn().ptr_to();\n \n         let int_ty = Type::int(arch);\n "}, {"sha": "ee9fdd3c6200575b0abe53078aef89ab8e12ff45", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -11,9 +11,10 @@\n #[doc(hidden)];\n \n use libc::{c_char, intptr_t, uintptr_t};\n-use ptr::{mut_null, to_unsafe_ptr};\n+use ptr::{mut_null};\n use repr::BoxRepr;\n use cast::transmute;\n+use unstable::intrinsics::TyDesc;\n #[cfg(not(test))] use unstable::lang::clear_task_borrow_list;\n \n /**\n@@ -158,6 +159,19 @@ fn debug_mem() -> bool {\n     false\n }\n \n+#[inline]\n+#[cfg(not(stage0))]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    // This function should be inlined when stage0 is gone\n+    ((*tydesc).drop_glue)(data);\n+}\n+\n+#[inline]\n+#[cfg(stage0)]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    ((*tydesc).drop_glue)(0 as **TyDesc, data);\n+}\n+\n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n #[cfg(not(test))]\n #[lang=\"annihilate\"]\n@@ -201,7 +215,7 @@ pub unsafe fn annihilate() {\n         if !uniq {\n             let tydesc = (*box).header.type_desc;\n             let data = transmute(&(*box).data);\n-            ((*tydesc).drop_glue)(to_unsafe_ptr(&tydesc), data);\n+            call_drop_glue(tydesc, data);\n         }\n     }\n "}, {"sha": "c9e33219fa5033d3917c4af2a4b62e13c6652b3c", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -316,6 +316,19 @@ fn expect_sentinel() -> bool { true }\n #[cfg(nogc)]\n fn expect_sentinel() -> bool { false }\n \n+#[inline]\n+#[cfg(not(stage0))]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    // This function should be inlined when stage0 is gone\n+    ((*tydesc).drop_glue)(data);\n+}\n+\n+#[inline]\n+#[cfg(stage0)]\n+unsafe fn call_drop_glue(tydesc: *TyDesc, data: *i8) {\n+    ((*tydesc).drop_glue)(0 as **TyDesc, data);\n+}\n+\n // Entry point for GC-based cleanup. Walks stack looking for exchange\n // heap and stack allocations requiring drop, and runs all\n // destructors.\n@@ -359,7 +372,7 @@ pub fn cleanup_stack_for_failure() {\n                 // FIXME #4420: Destroy this box\n                 // FIXME #4330: Destroy this box\n             } else {\n-                ((*tydesc).drop_glue)(&tydesc as **TyDesc, *root as *i8);\n+                call_drop_glue(tydesc, *root as *i8);\n             }\n         }\n     }"}, {"sha": "bd34574c3b7a4cb31c78ed8337518102b7be8401", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -36,6 +36,10 @@ A quick refresher on memory ordering:\n #[cfg(test)]\n pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor};\n \n+#[cfg(not(stage0))]\n+pub type GlueFn = extern \"Rust\" fn(*i8);\n+\n+#[cfg(stage0)]\n pub type GlueFn = extern \"Rust\" fn(**TyDesc, *i8);\n \n // NB: this has to be kept in sync with the Rust ABI."}, {"sha": "81ae991623f8c7f06d8a5b3a9f4961d65ab086aa", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -183,7 +183,11 @@ void task_start_wrapper(spawn_args *a)\n     if(env) {\n         // free the environment (which should be a unique closure).\n         const type_desc *td = env->td;\n-        td->drop_glue(NULL, NULL, box_body(env));\n+        td->drop_glue(NULL,\n+#ifdef _RUST_STAGE0\n+                      NULL,\n+#endif\n+                      box_body(env));\n         task->kernel->region()->free(env);\n     }\n "}, {"sha": "30ff5f1fa54e2d399c6f8de792f2e90ae1c8bfe6", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1049bd5f041f1f219d683e4e29e32ca30cd1c/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=e2f1049bd5f041f1f219d683e4e29e32ca30cd1c", "patch": "@@ -25,7 +25,11 @@ typedef void (*CDECL spawn_fn)(rust_opaque_box*, void *);\n \n struct type_desc;\n \n-typedef void CDECL (glue_fn)(void *, const type_desc **, void *);\n+typedef void CDECL (glue_fn)(void *,\n+#ifdef _RUST_STAGE0\n+                             const type_desc **,\n+#endif\n+                             void *);\n \n // Corresponds to the boxed data in the @ region.  The body follows the\n // header; you can obtain a ptr via box_body() below."}]}