{"sha": "f1c30519f30e4c245e2b319fbb257ba2c59e8092", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYzMwNTE5ZjMwZTRjMjQ1ZTJiMzE5ZmJiMjU3YmEyYzU5ZTgwOTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-23T17:48:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-23T17:50:24Z"}, "message": "libcore: more compact way to adjust test sizes for Miri", "tree": {"sha": "59de5bff85c6e1e9a70229045bb34f722384cdaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59de5bff85c6e1e9a70229045bb34f722384cdaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1c30519f30e4c245e2b319fbb257ba2c59e8092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c30519f30e4c245e2b319fbb257ba2c59e8092", "html_url": "https://github.com/rust-lang/rust/commit/f1c30519f30e4c245e2b319fbb257ba2c59e8092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1c30519f30e4c245e2b319fbb257ba2c59e8092/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66f7a5d92f5adb9053bf66e0bf8f6d31d404870d", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f7a5d92f5adb9053bf66e0bf8f6d31d404870d", "html_url": "https://github.com/rust-lang/rust/commit/66f7a5d92f5adb9053bf66e0bf8f6d31d404870d"}], "stats": {"total": 46, "additions": 16, "deletions": 30}, "files": [{"sha": "da203b5f3620ef7606115ebf7bfe1a3a6bba02b4", "filename": "src/libcore/tests/num/flt2dec/estimator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1c30519f30e4c245e2b319fbb257ba2c59e8092/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c30519f30e4c245e2b319fbb257ba2c59e8092/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs?ref=f1c30519f30e4c245e2b319fbb257ba2c59e8092", "patch": "@@ -52,12 +52,10 @@ fn test_estimate_scaling_factor() {\n     assert_almost_eq!(estimate_scaling_factor(1, -1074), -323);\n     assert_almost_eq!(estimate_scaling_factor(0x1fffffffffffff, 971), 309);\n \n-    #[cfg(not(miri))] // Miri is too slow\n-    let iter = -1074..972;\n-    #[cfg(miri)]\n-    let iter = (-1074..972).step_by(37);\n+    // Miri is too slow\n+    let step = if cfg!(miri) { 37 } else { 1 };\n \n-    for i in iter {\n+    for i in (-1074..972).step_by(step) {\n         let expected = super::ldexp_f64(1.0, i).log10().ceil();\n         assert_almost_eq!(estimate_scaling_factor(1, i as i16), expected as i16);\n     }"}, {"sha": "0ebc0881f5223870ec8b546c302adb0aa9c9c30c", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f1c30519f30e4c245e2b319fbb257ba2c59e8092/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c30519f30e4c245e2b319fbb257ba2c59e8092/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=f1c30519f30e4c245e2b319fbb257ba2c59e8092", "patch": "@@ -138,13 +138,11 @@ where\n #[test]\n fn shortest_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_shortest as fallback;\n-    #[cfg(not(miri))] // Miri is too slow\n-    const N: usize = 10_000;\n-    #[cfg(miri)]\n-    const N: usize = 10;\n+    // Miri is too slow\n+    let n = if cfg!(miri) { 10 } else { 10_000 };\n \n-    f64_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, N);\n-    f32_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, N);\n+    f64_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, n);\n+    f32_random_equivalence_test(format_shortest_opt, fallback, MAX_SIG_DIGITS, n);\n }\n \n #[test]\n@@ -173,35 +171,31 @@ fn shortest_f64_hard_random_equivalence_test() {\n #[test]\n fn exact_f32_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_exact as fallback;\n-    #[cfg(not(miri))] // Miri is too slow\n-    const N: usize = 1_000;\n-    #[cfg(miri)]\n-    const N: usize = 3;\n+    // Miri is too slow\n+    let n = if cfg!(miri) { 3 } else { 1_000 };\n \n     for k in 1..21 {\n         f32_random_equivalence_test(\n             |d, buf| format_exact_opt(d, buf, i16::MIN),\n             |d, buf| fallback(d, buf, i16::MIN),\n             k,\n-            N,\n+            n,\n         );\n     }\n }\n \n #[test]\n fn exact_f64_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_exact as fallback;\n-    #[cfg(not(miri))] // Miri is too slow\n-    const N: usize = 1_000;\n-    #[cfg(miri)]\n-    const N: usize = 3;\n+    // Miri is too slow\n+    let n = if cfg!(miri) { 3 } else { 1_000 };\n \n     for k in 1..21 {\n         f64_random_equivalence_test(\n             |d, buf| format_exact_opt(d, buf, i16::MIN),\n             |d, buf| fallback(d, buf, i16::MIN),\n             k,\n-            N,\n+            n,\n         );\n     }\n }"}, {"sha": "54a585415bce2b512a93a3d52ff85052d242b816", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1c30519f30e4c245e2b319fbb257ba2c59e8092/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c30519f30e4c245e2b319fbb257ba2c59e8092/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=f1c30519f30e4c245e2b319fbb257ba2c59e8092", "patch": "@@ -1227,15 +1227,9 @@ fn sort_unstable() {\n     use core::slice::heapsort;\n     use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n \n-    #[cfg(not(miri))] // Miri is too slow\n-    let large_range = 500..510;\n-    #[cfg(not(miri))] // Miri is too slow\n-    let rounds = 100;\n-\n-    #[cfg(miri)]\n-    let large_range = 0..0; // empty range\n-    #[cfg(miri)]\n-    let rounds = 1;\n+    // Miri is too slow\n+    let large_range = if cfg!(miri) { 0..0 } else { 500..510 };\n+    let rounds = if cfg!(miri) { 1 } else { 100 };\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];"}]}