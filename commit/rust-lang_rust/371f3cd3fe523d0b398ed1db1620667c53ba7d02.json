{"sha": "371f3cd3fe523d0b398ed1db1620667c53ba7d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWYzY2QzZmU1MjNkMGIzOThlZDFkYjE2MjA2NjdjNTNiYTdkMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-02T21:26:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-02T21:26:59Z"}, "message": "Auto merge of #85868 - Aaron1011:projection-cache, r=jackh726\n\nPreserve most sub-obligations in the projection cache\n\nFixes https://github.com/rust-lang/rust/issues/85360\n\nWhen we evaluate a projection predicate, we may produce sub-obligations. During trait evaluation, evaluating these sub-obligations might cause us to produce `EvaluatedToOkModuloRegions`.\n\nWhen we cache the result of projection in our projection cache, we try to throw away some of the sub-obligations, so that we don't need to re-evaluate/process them the next time we need to perform this particular projection. However, we may end up throwing away predicates that will (recursively) evaluate to `EvaluatedToOkModuloRegions`. If we do, then the result of evaluating a predicate will depend on the state of the predicate cache - this is global untracked state, which interacts badly with incremental compilation.\n\nTo fix this, we now only discard global predicates that evaluate to `EvaluatedToOk`. This ensures that any predicates that (may) evaluate to `EvaluatedToOkModuloRegions` are kept in the cache, and influence the results of any queries which perform this projection.", "tree": {"sha": "c3b9bfb650f0c790ac65aa9832ea738ab235f5c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b9bfb650f0c790ac65aa9832ea738ab235f5c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371f3cd3fe523d0b398ed1db1620667c53ba7d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371f3cd3fe523d0b398ed1db1620667c53ba7d02", "html_url": "https://github.com/rust-lang/rust/commit/371f3cd3fe523d0b398ed1db1620667c53ba7d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371f3cd3fe523d0b398ed1db1620667c53ba7d02/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b834c4c1bad7521af47f38f44a4048be0a1fe2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b834c4c1bad7521af47f38f44a4048be0a1fe2ee", "html_url": "https://github.com/rust-lang/rust/commit/b834c4c1bad7521af47f38f44a4048be0a1fe2ee"}, {"sha": "611191f54c563587a9130b8cb4afba1856aebebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/611191f54c563587a9130b8cb4afba1856aebebc", "html_url": "https://github.com/rust-lang/rust/commit/611191f54c563587a9130b8cb4afba1856aebebc"}], "stats": {"total": 144, "additions": 62, "deletions": 82}, "files": [{"sha": "254ada7cf1ffb01478c0f3dbffa8f0bba96f576f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -224,7 +224,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         debug!(\"report_overflow_error_cycle: cycle={:?}\", cycle);\n \n-        self.report_overflow_error(&cycle[0], false);\n+        // The 'deepest' obligation is most likely to have a useful\n+        // cause 'backtrace'\n+        self.report_overflow_error(cycle.iter().max_by_key(|p| p.recursion_depth).unwrap(), false);\n     }\n \n     fn report_selection_error("}, {"sha": "7038f16a2c9c4032652964b9c2590f284706f675", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 24, "deletions": 47, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -10,6 +10,7 @@ use super::PredicateObligation;\n use super::Selection;\n use super::SelectionContext;\n use super::SelectionError;\n+use super::TraitQueryMode;\n use super::{\n     ImplSourceClosureData, ImplSourceDiscriminantKindData, ImplSourceFnPointerData,\n     ImplSourceGeneratorData, ImplSourcePointeeData, ImplSourceUserDefinedData,\n@@ -18,7 +19,7 @@ use super::{Normalized, NormalizedTy, ProjectionCacheEntry, ProjectionCacheKey};\n \n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n-use crate::traits::error_reporting::InferCtxtExt;\n+use crate::traits::error_reporting::InferCtxtExt as _;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n@@ -912,6 +913,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n     }\n \n     let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);\n+\n     match project_type(selcx, &obligation) {\n         Ok(ProjectedTy::Progress(Progress {\n             ty: projected_ty,\n@@ -925,7 +927,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);\n             debug!(?projected_ty, ?depth, ?projected_obligations);\n \n-            let result = if projected_ty.has_projections() {\n+            let mut result = if projected_ty.has_projections() {\n                 let mut normalizer = AssocTypeNormalizer::new(\n                     selcx,\n                     param_env,\n@@ -942,8 +944,26 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n                 Normalized { value: projected_ty, obligations: projected_obligations }\n             };\n \n-            let cache_value = prune_cache_value_obligations(infcx, &result);\n-            infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, cache_value);\n+            let mut canonical =\n+                SelectionContext::with_query_mode(selcx.infcx(), TraitQueryMode::Canonical);\n+            result.obligations.drain_filter(|projected_obligation| {\n+                // If any global obligations always apply, considering regions, then we don't\n+                // need to include them. The `is_global` check rules out inference variables,\n+                // so there's no need for the caller of `opt_normalize_projection_type`\n+                // to evaluate them.\n+                // Note that we do *not* discard obligations that evaluate to\n+                // `EvaluatedtoOkModuloRegions`. Evaluating these obligations\n+                // inside of a query (e.g. `evaluate_obligation`) can change\n+                // the result to `EvaluatedToOkModuloRegions`, while an\n+                // `EvaluatedToOk` obligation will never change the result.\n+                // See #85360 for more details\n+                projected_obligation.is_global(canonical.tcx())\n+                    && canonical\n+                        .evaluate_root_obligation(projected_obligation)\n+                        .map_or(false, |res| res.must_apply_considering_regions())\n+            });\n+\n+            infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());\n             obligations.extend(result.obligations);\n             Ok(Some(result.value))\n         }\n@@ -974,49 +994,6 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n     }\n }\n \n-/// If there are unresolved type variables, then we need to include\n-/// any subobligations that bind them, at least until those type\n-/// variables are fully resolved.\n-fn prune_cache_value_obligations<'a, 'tcx>(\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n-    result: &NormalizedTy<'tcx>,\n-) -> NormalizedTy<'tcx> {\n-    if infcx.unresolved_type_vars(&result.value).is_none() {\n-        return NormalizedTy { value: result.value, obligations: vec![] };\n-    }\n-\n-    let mut obligations: Vec<_> = result\n-        .obligations\n-        .iter()\n-        .filter(|obligation| {\n-            let bound_predicate = obligation.predicate.kind();\n-            match bound_predicate.skip_binder() {\n-                // We found a `T: Foo<X = U>` predicate, let's check\n-                // if `U` references any unresolved type\n-                // variables. In principle, we only care if this\n-                // projection can help resolve any of the type\n-                // variables found in `result.value` -- but we just\n-                // check for any type variables here, for fear of\n-                // indirect obligations (e.g., we project to `?0`,\n-                // but we have `T: Foo<X = ?1>` and `?1: Bar<X =\n-                // ?0>`).\n-                ty::PredicateKind::Projection(data) => {\n-                    infcx.unresolved_type_vars(&bound_predicate.rebind(data.ty)).is_some()\n-                }\n-\n-                // We are only interested in `T: Foo<X = U>` predicates, whre\n-                // `U` references one of `unresolved_type_vars`. =)\n-                _ => false,\n-            }\n-        })\n-        .cloned()\n-        .collect();\n-\n-    obligations.shrink_to_fit();\n-\n-    NormalizedTy { value: result.value, obligations }\n-}\n-\n /// If we are projecting `<T as Trait>::Item`, but `T: Trait` does not\n /// hold. In various error cases, we cannot generate a valid\n /// normalized projection. Therefore, we create an inference variable"}, {"sha": "032d402fec0459a6462054fab649ac0ec72be20f", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -71,7 +71,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         // Run canonical query. If overflow occurs, rerun from scratch but this time\n         // in standard trait query mode so that overflow is handled appropriately\n         // within `SelectionContext`.\n-        self.tcx.evaluate_obligation(c_pred)\n+        self.tcx.at(obligation.cause.span(self.tcx)).evaluate_obligation(c_pred)\n     }\n \n     // Helper function that canonicalizes and runs the query. If an"}, {"sha": "22013fb79cf797d3f68dd9d49a02331ee5e8b331", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -682,7 +682,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         });\n \n-        debug!(?result);\n+        debug!(\"finished: {:?} from {:?}\", result, obligation);\n \n         result\n     }"}, {"sha": "5ff7b19d8945e635434250ddce7012c63f42e947", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -9,7 +9,8 @@ where\n     use std::convert::TryFrom;\n     <[T; N.get()]>::try_from(())\n     //~^ error: the trait bound\n-    //~^^ error: mismatched types\n+    //~| error: the trait bound\n+    //~| error: mismatched types\n }\n \n fn main() {}"}, {"sha": "a31c104d8f58bb4db302e43f000cbf9aa19b7126", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -30,10 +30,10 @@ note: ...which requires building MIR for `cycle1`...\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n+  --> $DIR/auto-trait-leak.rs:14:5\n    |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     send(cycle2().clone());\n+   |     ^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires computing type of `cycle2::{opaque#0}`...\n   --> $DIR/auto-trait-leak.rs:19:16\n@@ -66,10 +66,10 @@ note: ...which requires building MIR for `cycle2`...\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:19:1\n+  --> $DIR/auto-trait-leak.rs:20:5\n    |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     send(cycle1().clone());\n+   |     ^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n    = note: ...which again requires computing type of `cycle1::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module"}, {"sha": "94e718317e7c8c79c79ad2df655d3b9f3c4c475f", "filename": "src/test/ui/traits/cycle-cache-err-60010.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -25,6 +25,7 @@ struct Runtime<DB: Database> {\n }\n struct SalsaStorage {\n     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n+    //~^ ERROR overflow\n }\n \n impl Database for RootDatabase {\n@@ -67,7 +68,6 @@ pub(crate) fn goto_implementation(db: &RootDatabase) -> u32 {\n     // we used to fail to report an error here because we got the\n     // caching wrong.\n     SourceDatabase::parse(db);\n-    //~^ ERROR overflow\n     22\n }\n "}, {"sha": "9452e11e302e318eca4fc884087be42ec4837f0d", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `SalsaStorage: RefUnwindSafe`\n-  --> $DIR/cycle-cache-err-60010.rs:69:5\n+  --> $DIR/cycle-cache-err-60010.rs:27:13\n    |\n-LL |     SourceDatabase::parse(db);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: required because it appears within the type `*const SalsaStorage`\n    = note: required because it appears within the type `Unique<SalsaStorage>`\n@@ -18,15 +18,15 @@ note: required because it appears within the type `RootDatabase`\n LL | struct RootDatabase {\n    |        ^^^^^^^^^^^^\n note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n-  --> $DIR/cycle-cache-err-60010.rs:43:9\n+  --> $DIR/cycle-cache-err-60010.rs:44:9\n    |\n LL | impl<T> SourceDatabase for T\n    |         ^^^^^^^^^^^^^^     ^\n-note: required by `SourceDatabase::parse`\n-  --> $DIR/cycle-cache-err-60010.rs:14:5\n+note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n+  --> $DIR/cycle-cache-err-60010.rs:37:10\n    |\n-LL |     fn parse(&self) {\n-   |     ^^^^^^^^^^^^^^^\n+LL | impl<DB> Query<DB> for ParseQuery\n+   |          ^^^^^^^^^     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8be42fc4ad07fb277537d32476d40bf29618789e", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -15,8 +15,8 @@ impl<'a> Y for C<'a> {\n struct C<'a>(&'a ());\n struct X<T: Y>(T::P);\n \n-impl<T: NotAuto> NotAuto for Box<T> {}\n-impl<T: Y> NotAuto for X<T> where T::P: NotAuto {} //~ NOTE: required\n+impl<T: NotAuto> NotAuto for Box<T> {} //~ NOTE: required\n+impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n impl<'a> NotAuto for C<'a> {}\n \n fn is_send<S: NotAuto>() {}\n@@ -26,6 +26,6 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n-    //~| 2 redundant requirements hidden\n+    //~| 3 redundant requirements hidden\n     //~| required because of\n }"}, {"sha": "2ffcdb0e1c6dec5826e5313a229b2f3f8daabb69", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -1,15 +1,15 @@\n-error[E0275]: overflow evaluating the requirement `Box<X<C<'_>>>: NotAuto`\n+error[E0275]: overflow evaluating the requirement `X<C<'_>>: NotAuto`\n   --> $DIR/lifetime.rs:27:5\n    |\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `NotAuto` for `X<C<'_>>`\n-  --> $DIR/lifetime.rs:19:12\n+note: required because of the requirements on the impl of `NotAuto` for `Box<X<C<'_>>>`\n+  --> $DIR/lifetime.rs:18:18\n    |\n-LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n-   |            ^^^^^^^     ^^^^\n-   = note: 2 redundant requirements hidden\n+LL | impl<T: NotAuto> NotAuto for Box<T> {}\n+   |                  ^^^^^^^     ^^^^^^\n+   = note: 3 redundant requirements hidden\n    = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n note: required by a bound in `is_send`\n   --> $DIR/lifetime.rs:22:15"}, {"sha": "230c2638c50037458910032827ef8fbf18b64971", "filename": "src/test/ui/traits/inductive-overflow/simultaneous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `{integer}: Tweedledee`\n+error[E0275]: overflow evaluating the requirement `{integer}: Tweedledum`\n   --> $DIR/simultaneous.rs:18:5\n    |\n LL |     is_ee(4);"}, {"sha": "86b3f87d34d03c73eea9fd33e583e13da477c40d", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -5,10 +5,10 @@ LL |     type Foo = impl std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires type-checking `m::bar`...\n-  --> $DIR/auto-trait-leakage3.rs:14:5\n+  --> $DIR/auto-trait-leakage3.rs:15:9\n    |\n-LL |     pub fn bar() {\n-   |     ^^^^^^^^^^^^\n+LL |         is_send(foo());\n+   |         ^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::fmt::Debug: std::marker::Send`...\n    = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in module `m`"}, {"sha": "4c5921c7f660ba6d51d9943008ababc928b1da19", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/371f3cd3fe523d0b398ed1db1620667c53ba7d02/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr?ref=371f3cd3fe523d0b398ed1db1620667c53ba7d02", "patch": "@@ -5,10 +5,10 @@ LL |     type Foo = impl std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires type-checking `m::bar`...\n-  --> $DIR/inference-cycle.rs:14:5\n+  --> $DIR/inference-cycle.rs:15:9\n    |\n-LL |     pub fn bar() {\n-   |     ^^^^^^^^^^^^\n+LL |         is_send(foo()); // Today: error\n+   |         ^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::fmt::Debug: std::marker::Send`...\n    = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in module `m`"}]}