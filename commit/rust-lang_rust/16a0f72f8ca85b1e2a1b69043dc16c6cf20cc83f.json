{"sha": "16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YTBmNzJmOGNhODViMWUyYTFiNjkwNDNkYzE2YzZjZjIwY2M4M2Y=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T00:12:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T01:14:50Z"}, "message": "rustc: Throw out some more regions when normalizing types", "tree": {"sha": "30e780364ea589a4fd9bb9237d38abc6c8aed3cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e780364ea589a4fd9bb9237d38abc6c8aed3cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f", "html_url": "https://github.com/rust-lang/rust/commit/16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51b9674ed7af96f31aa164215722710f8d3d9384", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b9674ed7af96f31aa164215722710f8d3d9384", "html_url": "https://github.com/rust-lang/rust/commit/51b9674ed7af96f31aa164215722710f8d3d9384"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "0dc1b64524822da884fb304ba4e7d6e5e0228433", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=16a0f72f8ca85b1e2a1b69043dc16c6cf20cc83f", "patch": "@@ -3110,35 +3110,50 @@ fn ty_params_to_tys(tcx: ty::ctxt, tps: ~[ast::ty_param]) -> ~[t] {\n \n /// Returns an equivalent type with all the typedefs and self regions removed.\n fn normalize_ty(cx: ctxt, t: t) -> t {\n+    fn normalize_mt(cx: ctxt, mt: mt) -> mt {\n+        { ty: normalize_ty(cx, mt.ty), mutbl: mt.mutbl }\n+    }\n+    fn normalize_vstore(vstore: vstore) -> vstore {\n+        match vstore {\n+            vstore_fixed(*) | vstore_uniq | vstore_box => vstore,\n+            vstore_slice(_) => vstore_slice(re_static)\n+        }\n+    }\n+\n     alt cx.normalized_cache.find(t) {\n       some(t) { return t; }\n       none { }\n     }\n \n-    let t = alt get(t).struct {\n-        ty_rptr(region, mt) {\n+    let t = match get(t).struct {\n+        ty_evec(mt, vstore) =>\n+            // This type has a vstore. Get rid of it\n+            mk_evec(cx, normalize_mt(cx, mt), normalize_vstore(vstore)),\n+\n+        ty_rptr(region, mt) =>\n             // This type has a region. Get rid of it\n-            mk_rptr(cx, re_static, mt)\n-        }\n-        ty_enum(did, r) {\n-            alt r.self_r {\n-              some(_) {\n-                // This enum has a self region. Get rid of it\n-                mk_enum(cx, did, {self_r: none, self_ty: none, tps: r.tps})\n-              }\n-              none { t }\n-            }\n-        }\n-        ty_class(did, r) {\n-            alt r.self_r {\n-              some(_) {\n+            mk_rptr(cx, re_static, normalize_mt(cx, mt)),\n+\n+        ty_enum(did, r) =>\n+            match r.self_r {\n+                some(_) =>\n+                    // This enum has a self region. Get rid of it\n+                    mk_enum(cx, did, {self_r: none, self_ty: none, tps: r.tps}),\n+                none =>\n+                    t\n+            },\n+\n+        ty_class(did, r) =>\n+            match r.self_r {\n+              some(_) =>\n                 // Ditto.\n-                mk_class(cx, did, {self_r: none, self_ty: none, tps: r.tps})\n-              }\n-              none { t }\n-            }\n-        }\n-        _ { t }\n+                mk_class(cx, did, {self_r: none, self_ty: none, tps: r.tps}),\n+              none =>\n+                t\n+            },\n+\n+        _ =>\n+            t\n     };\n \n     // FIXME #2187: This also reduced int types to their compatible machine"}]}