{"sha": "632ce7402f01cad14d6039f3102134978ab25e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMmNlNzQwMmYwMWNhZDE0ZDYwMzlmMzEwMjEzNDk3OGFiMjVlMDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-26T16:56:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-26T16:56:43Z"}, "message": "Rollup merge of #62801 - bjorn3:remove_lower_128bit_ops, r=alexcrichton\n\nRemove support for -Zlower-128bit-ops\n\nIt is broken and unused\n\ncc https://github.com/rust-lang/rust/issues/58969\n\nblocked https://github.com/rust-lang-nursery/compiler-builtins/pull/302 (removes definitions of the lang items removed in this PR)\n\nr? @alexcrichton", "tree": {"sha": "6c7793907fa8a072827824107259a4827ed4dfd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7793907fa8a072827824107259a4827ed4dfd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632ce7402f01cad14d6039f3102134978ab25e01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOzDLCRBK7hj4Ov3rIwAAdHIIAHezmbPxA5D+xc4hjUNOfYBe\nD4RYFspQTUuYpHRi/Ar09MtTpxvezJ+L91QCBorRcNk0KfN5o9H8Vvf13XLQjrIb\n1UkaFxS1mEpXHI9hf1Nn3l7OYzXr4kjYiUx/Lpb7Gg08BK3oZ5N0f+S4UJ/jY+tH\nDBNFjxyWgfSJcpNmIYeXoJwQshIY9qQu326jSOM/QmKt1zH7SmDfmJrpVeMaYLN5\ngiXr0bcW9cakZ9cprSHVZ8F4YIgn14kSMIXZIwrB4bLjzJRIrG4AyH1GRcxrxGen\nZKwPhfAUg8ezkvEMEJMTIbzODBlo9p7ACAcTAa0ZWHqGi22StTBKfqcCsFhUb3A=\n=4Mzk\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c7793907fa8a072827824107259a4827ed4dfd8\nparent 9d122670fdac45bbc4c06c9df56f1a28541659c7\nparent 93de733f021598ff6d0fa25c7d6f9dbb7dd58da7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564160203 +0200\ncommitter GitHub <noreply@github.com> 1564160203 +0200\n\nRollup merge of #62801 - bjorn3:remove_lower_128bit_ops, r=alexcrichton\n\nRemove support for -Zlower-128bit-ops\n\nIt is broken and unused\n\ncc https://github.com/rust-lang/rust/issues/58969\n\nblocked https://github.com/rust-lang-nursery/compiler-builtins/pull/302 (removes definitions of the lang items removed in this PR)\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632ce7402f01cad14d6039f3102134978ab25e01", "html_url": "https://github.com/rust-lang/rust/commit/632ce7402f01cad14d6039f3102134978ab25e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632ce7402f01cad14d6039f3102134978ab25e01/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d122670fdac45bbc4c06c9df56f1a28541659c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d122670fdac45bbc4c06c9df56f1a28541659c7", "html_url": "https://github.com/rust-lang/rust/commit/9d122670fdac45bbc4c06c9df56f1a28541659c7"}, {"sha": "93de733f021598ff6d0fa25c7d6f9dbb7dd58da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/93de733f021598ff6d0fa25c7d6f9dbb7dd58da7", "html_url": "https://github.com/rust-lang/rust/commit/93de733f021598ff6d0fa25c7d6f9dbb7dd58da7"}], "stats": {"total": 741, "additions": 22, "deletions": 719}, "files": [{"sha": "7009e8c2877e9eec70d2b35519ecf37d1e75e8c5", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -17,7 +17,7 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -110,7 +110,7 @@ dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n@@ -122,7 +122,7 @@ version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -331,7 +331,7 @@ name = \"cfg-if\"\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -460,7 +460,7 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.17\"\n+version = \"0.1.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -791,7 +791,7 @@ name = \"dlmalloc\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -956,7 +956,7 @@ name = \"fortanix-sgx-abi\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -1133,7 +1133,7 @@ name = \"hashbrown\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-alloc 1.0.0\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -1951,7 +1951,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1962,7 +1962,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unwind 0.0.0\",\n@@ -2133,7 +2133,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2670,7 +2670,7 @@ name = \"rustc-demangle\"\n version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -2762,7 +2762,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2984,7 +2984,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3047,7 +3047,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3165,7 +3165,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3472,7 +3472,7 @@ dependencies = [\n  \"backtrace 0.3.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -4099,7 +4099,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -4313,7 +4313,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiler_builtins 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad9b4731b9e701aefe9e6bd1e9173f30526661508f9aaadaa5caec25ddf95585\"\n+\"checksum compiler_builtins 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef1c086a06d6f52f9c0d50cacdc021bfb6034ddeec9fb7e62f099f13f65472f4\"\n \"checksum compiletest_rs 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f40ecc9332b68270998995c00f8051ee856121764a0d3230e64c9efd059d27b6\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e2640d6d0bf22e82bed1b73c6aef8d5dd31e5abe6666c57e6d45e2649f4f887\""}, {"sha": "cc09a0b20cfd5deae1e01e11e17244538e86417f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -367,34 +367,6 @@ language_item_table! {\n \n     DebugTraitLangItem,          \"debug_trait\",        debug_trait,             Target::Trait;\n \n-    // A lang item for each of the 128-bit operators we can optionally lower.\n-    I128AddFnLangItem,           \"i128_add\",           i128_add_fn,             Target::Fn;\n-    U128AddFnLangItem,           \"u128_add\",           u128_add_fn,             Target::Fn;\n-    I128SubFnLangItem,           \"i128_sub\",           i128_sub_fn,             Target::Fn;\n-    U128SubFnLangItem,           \"u128_sub\",           u128_sub_fn,             Target::Fn;\n-    I128MulFnLangItem,           \"i128_mul\",           i128_mul_fn,             Target::Fn;\n-    U128MulFnLangItem,           \"u128_mul\",           u128_mul_fn,             Target::Fn;\n-    I128DivFnLangItem,           \"i128_div\",           i128_div_fn,             Target::Fn;\n-    U128DivFnLangItem,           \"u128_div\",           u128_div_fn,             Target::Fn;\n-    I128RemFnLangItem,           \"i128_rem\",           i128_rem_fn,             Target::Fn;\n-    U128RemFnLangItem,           \"u128_rem\",           u128_rem_fn,             Target::Fn;\n-    I128ShlFnLangItem,           \"i128_shl\",           i128_shl_fn,             Target::Fn;\n-    U128ShlFnLangItem,           \"u128_shl\",           u128_shl_fn,             Target::Fn;\n-    I128ShrFnLangItem,           \"i128_shr\",           i128_shr_fn,             Target::Fn;\n-    U128ShrFnLangItem,           \"u128_shr\",           u128_shr_fn,             Target::Fn;\n-    // And overflow versions for the operators that are checkable.\n-    // While MIR calls these Checked*, they return (T,bool), not Option<T>.\n-    I128AddoFnLangItem,          \"i128_addo\",          i128_addo_fn,            Target::Fn;\n-    U128AddoFnLangItem,          \"u128_addo\",          u128_addo_fn,            Target::Fn;\n-    I128SuboFnLangItem,          \"i128_subo\",          i128_subo_fn,            Target::Fn;\n-    U128SuboFnLangItem,          \"u128_subo\",          u128_subo_fn,            Target::Fn;\n-    I128MuloFnLangItem,          \"i128_mulo\",          i128_mulo_fn,            Target::Fn;\n-    U128MuloFnLangItem,          \"u128_mulo\",          u128_mulo_fn,            Target::Fn;\n-    I128ShloFnLangItem,          \"i128_shlo\",          i128_shlo_fn,            Target::Fn;\n-    U128ShloFnLangItem,          \"u128_shlo\",          u128_shlo_fn,            Target::Fn;\n-    I128ShroFnLangItem,          \"i128_shro\",          i128_shro_fn,            Target::Fn;\n-    U128ShroFnLangItem,          \"u128_shro\",          u128_shro_fn,            Target::Fn;\n-\n     // Align offset for stride != 1, must not panic.\n     AlignOffsetLangItem,         \"align_offset\",       align_offset_fn,         Target::Fn;\n "}, {"sha": "74653d4fbda73fd3f96dccf724ff644ced9ab051", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -1406,10 +1406,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),\n-    lower_128bit_ops: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"rewrite operators on i128 and u128 into lang item calls (typically provided \\\n-         by compiler-builtins) so codegen doesn't need to support them,\n-         overriding the default for the current target\"),\n     human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],\n         \"generate human-readable, predictable names for codegen units\"),\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],"}, {"sha": "46b8114030f2976397d60e29d27803f0e1efce66", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -21,7 +21,7 @@ use crate::middle::cstore::EncodedMetadata;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n-use crate::mir::{self, Body, interpret, ProjectionKind};\n+use crate::mir::{Body, interpret, ProjectionKind};\n use crate::mir::interpret::{ConstValue, Allocation, Scalar};\n use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n@@ -1297,40 +1297,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.get_lang_items(LOCAL_CRATE)\n     }\n \n-    /// Due to missing llvm support for lowering 128 bit math to software emulation\n-    /// (on some targets), the lowering can be done in MIR.\n-    ///\n-    /// This function only exists until said support is implemented.\n-    pub fn is_binop_lang_item(&self, def_id: DefId) -> Option<(mir::BinOp, bool)> {\n-        let items = self.lang_items();\n-        let def_id = Some(def_id);\n-        if items.i128_add_fn() == def_id { Some((mir::BinOp::Add, false)) }\n-        else if items.u128_add_fn() == def_id { Some((mir::BinOp::Add, false)) }\n-        else if items.i128_sub_fn() == def_id { Some((mir::BinOp::Sub, false)) }\n-        else if items.u128_sub_fn() == def_id { Some((mir::BinOp::Sub, false)) }\n-        else if items.i128_mul_fn() == def_id { Some((mir::BinOp::Mul, false)) }\n-        else if items.u128_mul_fn() == def_id { Some((mir::BinOp::Mul, false)) }\n-        else if items.i128_div_fn() == def_id { Some((mir::BinOp::Div, false)) }\n-        else if items.u128_div_fn() == def_id { Some((mir::BinOp::Div, false)) }\n-        else if items.i128_rem_fn() == def_id { Some((mir::BinOp::Rem, false)) }\n-        else if items.u128_rem_fn() == def_id { Some((mir::BinOp::Rem, false)) }\n-        else if items.i128_shl_fn() == def_id { Some((mir::BinOp::Shl, false)) }\n-        else if items.u128_shl_fn() == def_id { Some((mir::BinOp::Shl, false)) }\n-        else if items.i128_shr_fn() == def_id { Some((mir::BinOp::Shr, false)) }\n-        else if items.u128_shr_fn() == def_id { Some((mir::BinOp::Shr, false)) }\n-        else if items.i128_addo_fn() == def_id { Some((mir::BinOp::Add, true)) }\n-        else if items.u128_addo_fn() == def_id { Some((mir::BinOp::Add, true)) }\n-        else if items.i128_subo_fn() == def_id { Some((mir::BinOp::Sub, true)) }\n-        else if items.u128_subo_fn() == def_id { Some((mir::BinOp::Sub, true)) }\n-        else if items.i128_mulo_fn() == def_id { Some((mir::BinOp::Mul, true)) }\n-        else if items.u128_mulo_fn() == def_id { Some((mir::BinOp::Mul, true)) }\n-        else if items.i128_shlo_fn() == def_id { Some((mir::BinOp::Shl, true)) }\n-        else if items.u128_shlo_fn() == def_id { Some((mir::BinOp::Shl, true)) }\n-        else if items.i128_shro_fn() == def_id { Some((mir::BinOp::Shr, true)) }\n-        else if items.u128_shro_fn() == def_id { Some((mir::BinOp::Shr, true)) }\n-        else { None }\n-    }\n-\n     pub fn stability(self) -> &'tcx stability::Index<'tcx> {\n         self.stability_index(LOCAL_CRATE)\n     }"}, {"sha": "6a5b933e4a530fdb9cc276ccbb188d8a23624490", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -230,21 +230,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, M::PointerTag>],\n-        dest: Option<PlaceTy<'tcx, M::PointerTag>>,\n+        _dest: Option<PlaceTy<'tcx, M::PointerTag>>,\n     ) -> InterpResult<'tcx, bool> {\n         let def_id = instance.def_id();\n-        // Some fn calls are actually BinOp intrinsics\n-        if let Some((op, oflo)) = self.tcx.is_binop_lang_item(def_id) {\n-            let dest = dest.expect(\"128 lowerings can't diverge\");\n-            let l = self.read_immediate(args[0])?;\n-            let r = self.read_immediate(args[1])?;\n-            if oflo {\n-                self.binop_with_overflow(op, l, r, dest)?;\n-            } else {\n-                self.binop_ignore_overflow(op, l, r, dest)?;\n-            }\n-            return Ok(true);\n-        } else if Some(def_id) == self.tcx.lang_items().panic_fn() {\n+        if Some(def_id) == self.tcx.lang_items().panic_fn() {\n             assert!(args.len() == 1);\n             // &(&'static str, &'static str, u32, u32)\n             let place = self.deref_operand(args[0])?;"}, {"sha": "40cb1fbdc57fa9446f7e05549f723e4caecb3455", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -232,13 +232,6 @@ impl Inliner<'tcx> {\n             return false;\n         }\n \n-        // Do not inline {u,i}128 lang items, codegen const eval depends\n-        // on detecting calls to these lang items and intercepting them\n-        if tcx.is_binop_lang_item(callsite.callee).is_some() {\n-            debug!(\"    not inlining 128bit integer lang item\");\n-            return false;\n-        }\n-\n         let codegen_fn_attrs = tcx.codegen_fn_attrs(callsite.callee);\n \n         let hinted = match codegen_fn_attrs.inline {"}, {"sha": "f09a77d486c7e3ceccf2634c3cc42693ea44f856", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/9d122670fdac45bbc4c06c9df56f1a28541659c7/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d122670fdac45bbc4c06c9df56f1a28541659c7/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=9d122670fdac45bbc4c06c9df56f1a28541659c7", "patch": "@@ -1,230 +0,0 @@\n-//! Replaces 128-bit operators with lang item calls\n-\n-use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::LangItem;\n-use rustc::mir::*;\n-use rustc::ty::{self, List, Ty, TyCtxt};\n-use rustc_data_structures::indexed_vec::{Idx};\n-use crate::transform::{MirPass, MirSource};\n-\n-pub struct Lower128Bit;\n-\n-impl MirPass for Lower128Bit {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let debugging_override = tcx.sess.opts.debugging_opts.lower_128bit_ops;\n-        let target_default = tcx.sess.host.options.i128_lowering;\n-        if !debugging_override.unwrap_or(target_default) {\n-            return\n-        }\n-\n-        self.lower_128bit_ops(tcx, body);\n-}\n-}\n-\n-impl Lower128Bit {\n-    fn lower_128bit_ops<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let mut new_blocks = Vec::new();\n-        let cur_len = body.basic_blocks().len();\n-\n-        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n-        for block in basic_blocks.iter_mut() {\n-            for i in (0..block.statements.len()).rev() {\n-                let (lang_item, rhs_kind) =\n-                    if let Some((lang_item, rhs_kind)) =\n-                        lower_to(&block.statements[i], local_decls, tcx)\n-                    {\n-                        (lang_item, rhs_kind)\n-                    } else {\n-                        continue;\n-                    };\n-\n-                let rhs_override_ty = rhs_kind.ty(tcx);\n-                let cast_local =\n-                    match rhs_override_ty {\n-                        None => None,\n-                        Some(ty) => {\n-                            let local_decl = LocalDecl::new_internal(\n-                                ty, block.statements[i].source_info.span);\n-                            Some(local_decls.push(local_decl))\n-                        },\n-                    };\n-\n-                let storage_dead = cast_local.map(|local| {\n-                    Statement {\n-                        source_info: block.statements[i].source_info,\n-                        kind: StatementKind::StorageDead(local),\n-                    }\n-                });\n-                let after_call = BasicBlockData {\n-                    statements: storage_dead.into_iter()\n-                        .chain(block.statements.drain((i+1)..)).collect(),\n-                    is_cleanup: block.is_cleanup,\n-                    terminator: block.terminator.take(),\n-                };\n-\n-                let bin_statement = block.statements.pop().unwrap();\n-                let source_info = bin_statement.source_info;\n-                let (place, lhs, mut rhs) = match bin_statement.kind {\n-                    StatementKind::Assign(place, box rvalue) => {\n-                        match rvalue {\n-                            Rvalue::BinaryOp(_, lhs, rhs)\n-                            | Rvalue::CheckedBinaryOp(_, lhs, rhs) => (place, lhs, rhs),\n-                            _ => bug!(),\n-                        }\n-                    }\n-                    _ => bug!()\n-                };\n-\n-                if let Some(local) = cast_local {\n-                    block.statements.push(Statement {\n-                        source_info: source_info,\n-                        kind: StatementKind::StorageLive(local),\n-                    });\n-                    block.statements.push(Statement {\n-                        source_info: source_info,\n-                        kind: StatementKind::Assign(\n-                            Place::from(local),\n-                            box Rvalue::Cast(\n-                                CastKind::Misc,\n-                                rhs,\n-                                rhs_override_ty.unwrap())),\n-                    });\n-                    rhs = Operand::Move(Place::from(local));\n-                }\n-\n-                let call_did = check_lang_item_type(\n-                    lang_item, &place, &lhs, &rhs, local_decls, tcx);\n-\n-                let bb = BasicBlock::new(cur_len + new_blocks.len());\n-                new_blocks.push(after_call);\n-\n-                block.terminator =\n-                    Some(Terminator {\n-                        source_info,\n-                        kind: TerminatorKind::Call {\n-                            func: Operand::function_handle(tcx, call_did,\n-                                List::empty(), source_info.span),\n-                            args: vec![lhs, rhs],\n-                            destination: Some((place, bb)),\n-                            cleanup: None,\n-                            from_hir_call: false,\n-                        },\n-                    });\n-            }\n-        }\n-\n-        basic_blocks.extend(new_blocks);\n-    }\n-}\n-\n-fn check_lang_item_type<'tcx, D>(\n-    lang_item: LangItem,\n-    place: &Place<'tcx>,\n-    lhs: &Operand<'tcx>,\n-    rhs: &Operand<'tcx>,\n-    local_decls: &D,\n-    tcx: TyCtxt<'tcx>,\n-) -> DefId\n-where\n-    D: HasLocalDecls<'tcx>,\n-{\n-    let did = tcx.require_lang_item(lang_item);\n-    let poly_sig = tcx.fn_sig(did);\n-    let sig = poly_sig.no_bound_vars().unwrap();\n-    let lhs_ty = lhs.ty(local_decls, tcx);\n-    let rhs_ty = rhs.ty(local_decls, tcx);\n-    let place_ty = place.ty(local_decls, tcx).ty;\n-    let expected = [lhs_ty, rhs_ty, place_ty];\n-    assert_eq!(sig.inputs_and_output[..], expected,\n-        \"lang item `{}`\", tcx.def_path_str(did));\n-    did\n-}\n-\n-fn lower_to<'tcx, D>(\n-    statement: &Statement<'tcx>,\n-    local_decls: &D,\n-    tcx: TyCtxt<'tcx>,\n-) -> Option<(LangItem, RhsKind)>\n-where\n-    D: HasLocalDecls<'tcx>,\n-{\n-    match statement.kind {\n-        StatementKind::Assign(_, box Rvalue::BinaryOp(bin_op, ref lhs, _)) => {\n-            let ty = lhs.ty(local_decls, tcx);\n-            if let Some(is_signed) = sign_of_128bit(ty) {\n-                return item_for_op(bin_op, is_signed);\n-            }\n-        },\n-        StatementKind::Assign(_, box Rvalue::CheckedBinaryOp(bin_op, ref lhs, _)) => {\n-            let ty = lhs.ty(local_decls, tcx);\n-            if let Some(is_signed) = sign_of_128bit(ty) {\n-                return item_for_checked_op(bin_op, is_signed);\n-            }\n-        },\n-        _ => {},\n-    }\n-    None\n-}\n-\n-#[derive(Copy, Clone)]\n-enum RhsKind {\n-    Unchanged,\n-    ForceU128,\n-    ForceU32,\n-}\n-\n-impl RhsKind {\n-    fn ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<Ty<'tcx>> {\n-        match *self {\n-            RhsKind::Unchanged => None,\n-            RhsKind::ForceU128 => Some(tcx.types.u128),\n-            RhsKind::ForceU32 => Some(tcx.types.u32),\n-        }\n-    }\n-}\n-\n-fn sign_of_128bit(ty: Ty<'_>) -> Option<bool> {\n-    match ty.sty {\n-        ty::Int(syntax::ast::IntTy::I128) => Some(true),\n-        ty::Uint(syntax::ast::UintTy::U128) => Some(false),\n-        _ => None,\n-    }\n-}\n-\n-fn item_for_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n-    let i = match (bin_op, is_signed) {\n-        (BinOp::Add, true) => (LangItem::I128AddFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Add, false) => (LangItem::U128AddFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, true) => (LangItem::I128SubFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, false) => (LangItem::U128SubFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, true) => (LangItem::I128MulFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, false) => (LangItem::U128MulFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Div, true) => (LangItem::I128DivFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Div, false) => (LangItem::U128DivFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Rem, true) => (LangItem::I128RemFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Rem, false) => (LangItem::U128RemFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Shl, true) => (LangItem::I128ShlFnLangItem, RhsKind::ForceU32),\n-        (BinOp::Shl, false) => (LangItem::U128ShlFnLangItem, RhsKind::ForceU32),\n-        (BinOp::Shr, true) => (LangItem::I128ShrFnLangItem, RhsKind::ForceU32),\n-        (BinOp::Shr, false) => (LangItem::U128ShrFnLangItem, RhsKind::ForceU32),\n-        _ => return None,\n-    };\n-    Some(i)\n-}\n-\n-fn item_for_checked_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n-    let i = match (bin_op, is_signed) {\n-        (BinOp::Add, true) => (LangItem::I128AddoFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Add, false) => (LangItem::U128AddoFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, true) => (LangItem::I128SuboFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, false) => (LangItem::U128SuboFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, true) => (LangItem::I128MuloFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, false) => (LangItem::U128MuloFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Shl, true) => (LangItem::I128ShloFnLangItem, RhsKind::ForceU128),\n-        (BinOp::Shl, false) => (LangItem::U128ShloFnLangItem, RhsKind::ForceU128),\n-        (BinOp::Shr, true) => (LangItem::I128ShroFnLangItem, RhsKind::ForceU128),\n-        (BinOp::Shr, false) => (LangItem::U128ShroFnLangItem, RhsKind::ForceU128),\n-        _ => bug!(\"That should be all the checked ones?\"),\n-    };\n-    Some(i)\n-}"}, {"sha": "61d0b1f3485b6b741f2de4e2ee81a56d6fe50ce0", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -34,7 +34,6 @@ pub mod copy_prop;\n pub mod const_prop;\n pub mod generator;\n pub mod inline;\n-pub mod lower_128bit;\n pub mod uniform_array_move_out;\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n@@ -272,8 +271,6 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n         // From here on out, regions are gone.\n         &erase_regions::EraseRegions,\n \n-        &lower_128bit::Lower128Bit,\n-\n \n         // Optimizations begin.\n         &uniform_array_move_out::RestoreSubsliceArrayMoveOut,"}, {"sha": "54e3cad6a6149f8649fc7dce2a5df62d1d84b030", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632ce7402f01cad14d6039f3102134978ab25e01/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=632ce7402f01cad14d6039f3102134978ab25e01", "patch": "@@ -736,10 +736,6 @@ pub struct TargetOptions {\n     /// for this target unconditionally.\n     pub no_builtins: bool,\n \n-    /// Whether to lower 128-bit operations to compiler_builtins calls. Use if\n-    /// your backend only supports 64-bit and smaller math.\n-    pub i128_lowering: bool,\n-\n     /// The codegen backend to use for this target, typically \"llvm\"\n     pub codegen_backend: String,\n \n@@ -855,7 +851,6 @@ impl Default for TargetOptions {\n             requires_lto: false,\n             singlethread: false,\n             no_builtins: false,\n-            i128_lowering: false,\n             codegen_backend: \"llvm\".to_string(),\n             default_hidden_visibility: false,\n             embed_bitcode: false,"}, {"sha": "1d23bac4ee2068aacdb906da98c93c9be1122f7b", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/9d122670fdac45bbc4c06c9df56f1a28541659c7/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d122670fdac45bbc4c06c9df56f1a28541659c7/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=9d122670fdac45bbc4c06c9df56f1a28541659c7", "patch": "@@ -1,226 +0,0 @@\n-// asmjs can't even pass i128 as arguments or return values, so ignore it.\n-// this will hopefully be fixed by the LLVM 5 upgrade (#43370)\n-// ignore-asmjs\n-// ignore-emscripten\n-\n-// compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=yes\n-\n-static TEST_SIGNED: i128 = const_signed(-222);\n-static TEST_UNSIGNED: u128 = const_unsigned(200);\n-\n-const fn const_signed(mut x: i128) -> i128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-const fn const_unsigned(mut x: u128) -> u128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-fn test_signed(mut x: i128) -> i128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn test_unsigned(mut x: u128) -> u128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn check(x: i128, y: u128) {\n-    assert_eq!(test_signed(x), -1);\n-    assert_eq!(const_signed(x), -1);\n-    assert_eq!(TEST_SIGNED, -1);\n-    assert_eq!(test_unsigned(y), 2);\n-    assert_eq!(const_unsigned(y), 2);\n-    assert_eq!(TEST_UNSIGNED, 2);\n-}\n-\n-fn main() {\n-    check(-222, 200);\n-}\n-\n-// END RUST SOURCE\n-\n-// START rustc.const_signed.Lower128Bit.after.mir\n-//     _8 = _1;\n-//     _9 = const compiler_builtins::int::addsub::rust_i128_addo(move _8, const 1i128) -> bb10;\n-//     ...\n-//     _7 = move (_9.0: i128);\n-//     ...\n-//     _10 = const compiler_builtins::int::addsub::rust_i128_subo(move _7, const 2i128) -> bb11;\n-//     ...\n-//     _6 = move (_10.0: i128);\n-//     ...\n-//     _11 = const compiler_builtins::int::mul::rust_i128_mulo(move _6, const 3i128) -> bb12;\n-//     ...\n-//     _5 = move (_11.0: i128);\n-//     ...\n-//     _12 = Eq(const 4i128, const 0i128);\n-//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n-//     ...\n-//     _13 = Eq(const 4i128, const -1i128);\n-//     _14 = Eq(_5, const -170141183460469231731687303715884105728i128);\n-//     _15 = BitAnd(move _13, move _14);\n-//     assert(!move _15, \"attempt to divide with overflow\") -> bb5;\n-//     ...\n-//     _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb13;\n-//     ...\n-//     _17 = Eq(const 5i128, const -1i128);\n-//     _18 = Eq(_4, const -170141183460469231731687303715884105728i128);\n-//     _19 = BitAnd(move _17, move _18);\n-//     assert(!move _19, \"attempt to calculate the remainder with overflow\") -> bb7;\n-//     ...\n-//     _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb15;\n-//     ...\n-//     _2 = move (_20.0: i128);\n-//     ...\n-//     _23 = const 7i32 as u128 (Misc);\n-//     _21 = const compiler_builtins::int::shift::rust_i128_shro(move _2, move _23) -> bb16;\n-//     ...\n-//     _0 = move (_21.0: i128);\n-//     ...\n-//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     _16 = Eq(const 5i128, const 0i128);\n-//     assert(!move _16, \"attempt to calculate the remainder with a divisor of zero\") -> bb6;\n-//     ...\n-//     assert(!move (_20.1: bool), \"attempt to shift left with overflow\") -> bb8;\n-//     ...\n-//     _22 = const 6i32 as u128 (Misc);\n-//     _20 = const compiler_builtins::int::shift::rust_i128_shlo(move _3, move _22) -> bb14;\n-//     ...\n-//     assert(!move (_21.1: bool), \"attempt to shift right with overflow\") -> bb9;\n-// END rustc.const_signed.Lower128Bit.after.mir\n-\n-// START rustc.const_unsigned.Lower128Bit.after.mir\n-//     _8 = _1;\n-//     _9 = const compiler_builtins::int::addsub::rust_u128_addo(move _8, const 1u128) -> bb8;\n-//     ...\n-//     _7 = move (_9.0: u128);\n-//     ...\n-//     _10 = const compiler_builtins::int::addsub::rust_u128_subo(move _7, const 2u128) -> bb9;\n-//     ...\n-//     _6 = move (_10.0: u128);\n-//     ...\n-//     _11 = const compiler_builtins::int::mul::rust_u128_mulo(move _6, const 3u128) -> bb10;\n-//     ...\n-//     _5 = move (_11.0: u128);\n-//     ...\n-//     _12 = Eq(const 4u128, const 0u128);\n-//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n-//     ...\n-//     _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb11;\n-//     ...\n-//     _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb13;\n-//     ...\n-//     _2 = move (_14.0: u128);\n-//     ...\n-//     _17 = const 7i32 as u128 (Misc);\n-//     _15 = const compiler_builtins::int::shift::rust_u128_shro(move _2, move _17) -> bb14;\n-//     ...\n-//     _0 = move (_15.0: u128);\n-//     ...\n-//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     _13 = Eq(const 5u128, const 0u128);\n-//     assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb5;\n-//     ...\n-//     assert(!move (_14.1: bool), \"attempt to shift left with overflow\") -> bb6;\n-//     ...\n-//     _16 = const 6i32 as u128 (Misc);\n-//     _14 = const compiler_builtins::int::shift::rust_u128_shlo(move _3, move _16) -> bb12;\n-//     ...\n-//     assert(!move (_15.1: bool), \"attempt to shift right with overflow\") -> bb7;\n-// END rustc.const_unsigned.Lower128Bit.after.mir\n-\n-// START rustc.test_signed.Lower128Bit.after.mir\n-//     _2 = const compiler_builtins::int::addsub::rust_i128_addo(_1, const 1i128) -> bb10;\n-//     ...\n-//     _1 = move (_2.0: i128);\n-//     _3 = const compiler_builtins::int::addsub::rust_i128_subo(_1, const 2i128) -> bb11;\n-//     ...\n-//     _1 = move (_3.0: i128);\n-//     _4 = const compiler_builtins::int::mul::rust_i128_mulo(_1, const 3i128) -> bb12;\n-//     ...\n-//     _1 = move (_4.0: i128);\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_div(_1, const 4i128) -> bb13;\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_rem(_1, const 5i128) -> bb15;\n-//     ...\n-//     _1 = move (_13.0: i128);\n-//     ...\n-//     _16 = const 7i32 as u128 (Misc);\n-//     _14 = const compiler_builtins::int::shift::rust_i128_shro(_1, move _16) -> bb16;\n-//     ...\n-//     _1 = move (_14.0: i128);\n-//     ...\n-//     assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     assert(!move (_13.1: bool), \"attempt to shift left with overflow\") -> bb8;\n-//     ...\n-//     _15 = const 6i32 as u128 (Misc);\n-//     _13 = const compiler_builtins::int::shift::rust_i128_shlo(_1, move _15) -> bb14;\n-//     ...\n-//     assert(!move (_14.1: bool), \"attempt to shift right with overflow\") -> bb9;\n-// END rustc.test_signed.Lower128Bit.after.mir\n-\n-// START rustc.test_unsigned.Lower128Bit.after.mir\n-//     _2 = const compiler_builtins::int::addsub::rust_u128_addo(_1, const 1u128) -> bb8;\n-//     ...\n-//     _1 = move (_2.0: u128);\n-//     _3 = const compiler_builtins::int::addsub::rust_u128_subo(_1, const 2u128) -> bb9;\n-//     ...\n-//     _1 = move (_3.0: u128);\n-//     _4 = const compiler_builtins::int::mul::rust_u128_mulo(_1, const 3u128) -> bb10;\n-//     ...\n-//     _1 = move (_4.0: u128);\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_div(_1, const 4u128) -> bb11;\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_rem(_1, const 5u128) -> bb13;\n-//     ...\n-//     _1 = move (_7.0: u128);\n-//     ...\n-//     _10 = const 7i32 as u128 (Misc);\n-//     _8 = const compiler_builtins::int::shift::rust_u128_shro(_1, move _10) -> bb14;\n-//     ...\n-//     _1 = move (_8.0: u128);\n-//     ...\n-//     assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     assert(!move (_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n-//     ...\n-//     _9 = const 6i32 as u128 (Misc);\n-//     _7 = const compiler_builtins::int::shift::rust_u128_shlo(_1, move _9) -> bb12;\n-//     ...\n-//     assert(!move (_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n-// END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "7528330b030ce20b1ebf86631b5a6e7093b87594", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/9d122670fdac45bbc4c06c9df56f1a28541659c7/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d122670fdac45bbc4c06c9df56f1a28541659c7/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=9d122670fdac45bbc4c06c9df56f1a28541659c7", "patch": "@@ -1,149 +0,0 @@\n-// ignore-emscripten\n-\n-// compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no -O\n-\n-static TEST_SIGNED: i128 = const_signed(-222);\n-static TEST_UNSIGNED: u128 = const_unsigned(200);\n-\n-const fn const_signed(mut x: i128) -> i128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-const fn const_unsigned(mut x: u128) -> u128 {\n-    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n-}\n-\n-fn test_signed(mut x: i128) -> i128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn test_unsigned(mut x: u128) -> u128 {\n-    x += 1;\n-    x -= 2;\n-    x *= 3;\n-    x /= 4;\n-    x %= 5;\n-    x <<= 6;\n-    x >>= 7;\n-    x\n-}\n-\n-fn check(x: i128, y: u128) {\n-    assert_eq!(test_signed(x), -1);\n-    assert_eq!(const_signed(x), -1);\n-    assert_eq!(TEST_SIGNED, -1);\n-    assert_eq!(test_unsigned(y), 2);\n-    assert_eq!(const_unsigned(y), 2);\n-    assert_eq!(TEST_UNSIGNED, 2);\n-}\n-\n-fn main() {\n-    check(-222, 200);\n-}\n-\n-// END RUST SOURCE\n-\n-// START rustc.const_signed.Lower128Bit.after.mir\n-// _7 = const compiler_builtins::int::addsub::rust_i128_add(move _8, const 1i128) -> bb7;\n-// ...\n-// _10 = Eq(const 4i128, const -1i128);\n-// _11 = Eq(_5, const -170141183460469231731687303715884105728i128);\n-// _12 = BitAnd(move _10, move _11);\n-// assert(!move _12, \"attempt to divide with overflow\") -> bb2;\n-// ...\n-// _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb8;\n-// ...\n-// _14 = Eq(const 5i128, const -1i128);\n-// _15 = Eq(_4, const -170141183460469231731687303715884105728i128);\n-// _16 = BitAnd(move _14, move _15);\n-// assert(!move _16, \"attempt to calculate the remainder with overflow\") -> bb4;\n-// ...\n-// _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb11;\n-// ...\n-// _9 = Eq(const 4i128, const 0i128);\n-// assert(!move _9, \"attempt to divide by zero\") -> bb1;\n-// ...\n-// _5 = const compiler_builtins::int::mul::rust_i128_mul(move _6, const 3i128) -> bb5;\n-// ...\n-// _6 = const compiler_builtins::int::addsub::rust_i128_sub(move _7, const 2i128) -> bb6;\n-// ...\n-// _13 = Eq(const 5i128, const 0i128);\n-// assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb3;\n-// ...\n-// _17 = const 7i32 as u32 (Misc);\n-// _0 = const compiler_builtins::int::shift::rust_i128_shr(move _2, move _17) -> bb9;\n-// ...\n-// _18 = const 6i32 as u32 (Misc);\n-// _2 = const compiler_builtins::int::shift::rust_i128_shl(move _3, move _18) -> bb10;\n-// END rustc.const_signed.Lower128Bit.after.mir\n-\n-// START rustc.const_unsigned.Lower128Bit.after.mir\n-// _8 = _1;\n-// _7 = const compiler_builtins::int::addsub::rust_u128_add(move _8, const 1u128) -> bb5;\n-// ...\n-// _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb6;\n-// ...\n-// _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb9;\n-// ...\n-// _9 = Eq(const 4u128, const 0u128);\n-// assert(!move _9, \"attempt to divide by zero\") -> bb1;\n-// ...\n-// _5 = const compiler_builtins::int::mul::rust_u128_mul(move _6, const 3u128) -> bb3;\n-// ...\n-// _6 = const compiler_builtins::int::addsub::rust_u128_sub(move _7, const 2u128) -> bb4;\n-// ...\n-// _10 = Eq(const 5u128, const 0u128);\n-// assert(!move _10, \"attempt to calculate the remainder with a divisor of zero\") -> bb2;\n-// ...\n-// return;\n-// ...\n-// _11 = const 7i32 as u32 (Misc);\n-// _0 = const compiler_builtins::int::shift::rust_u128_shr(move _2, move _11) -> bb7;\n-// ...\n-// _12 = const 6i32 as u32 (Misc);\n-// _2 = const compiler_builtins::int::shift::rust_u128_shl(move _3, move _12) -> bb8;\n-\n-// END rustc.const_unsigned.Lower128Bit.after.mir\n-\n-// START rustc.test_signed.Lower128Bit.after.mir\n-//     _1 = const compiler_builtins::int::addsub::rust_i128_add(_1, const 1i128) -> bb7;\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_div(_1, const 4i128) -> bb8;\n-//     ...\n-//     _1 = const compiler_builtins::int::sdiv::rust_i128_rem(_1, const 5i128) -> bb11;\n-//     ...\n-//     _1 = const compiler_builtins::int::mul::rust_i128_mul(_1, const 3i128) -> bb5;\n-//     ...\n-//     _1 = const compiler_builtins::int::addsub::rust_i128_sub(_1, const 2i128) -> bb6;\n-//     ...\n-//     _10 = const 7i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_i128_shr(_1, move _10) -> bb9;\n-//     ...\n-//     _11 = const 6i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_i128_shl(_1, move _11) -> bb10;\n-// END rustc.test_signed.Lower128Bit.after.mir\n-\n-// START rustc.test_unsigned.Lower128Bit.after.mir\n-//     _1 = const compiler_builtins::int::addsub::rust_u128_add(_1, const 1u128) -> bb5;\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_div(_1, const 4u128) -> bb6;\n-//     ...\n-//     _1 = const compiler_builtins::int::udiv::rust_u128_rem(_1, const 5u128) -> bb9;\n-//     ...\n-//     _1 = const compiler_builtins::int::mul::rust_u128_mul(_1, const 3u128) -> bb3;\n-//     ...\n-//     _1 = const compiler_builtins::int::addsub::rust_u128_sub(_1, const 2u128) -> bb4;\n-//     ...\n-//     _4 = const 7i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_u128_shr(_1, move _4) -> bb7;\n-//     ...\n-//     _5 = const 6i32 as u32 (Misc);\n-//     _1 = const compiler_builtins::int::shift::rust_u128_shl(_1, move _5) -> bb8;\n-// END rustc.test_unsigned.Lower128Bit.after.mir"}]}