{"sha": "2f7658a52829b8208330401735c1b88638ed44c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNzY1OGE1MjgyOWI4MjA4MzMwNDAxNzM1YzFiODg2MzhlZDQ0YzA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-26T09:57:42Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T00:56:07Z"}, "message": "Refactored ty::ctxt so node_types mutations must go through ty methods.", "tree": {"sha": "0ddfb8828858d40d7ebbc5ecaddc6d44bd73a6e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ddfb8828858d40d7ebbc5ecaddc6d44bd73a6e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f7658a52829b8208330401735c1b88638ed44c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7658a52829b8208330401735c1b88638ed44c0", "html_url": "https://github.com/rust-lang/rust/commit/2f7658a52829b8208330401735c1b88638ed44c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f7658a52829b8208330401735c1b88638ed44c0/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60289ac7e704853049a441893f69a8eec5a00fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/60289ac7e704853049a441893f69a8eec5a00fa4", "html_url": "https://github.com/rust-lang/rust/commit/60289ac7e704853049a441893f69a8eec5a00fa4"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "b6061f39233d20b26d2f7a11535223310f67c192", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=2f7658a52829b8208330401735c1b88638ed44c0", "patch": "@@ -1197,7 +1197,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         })\n     }\n \n-    if let Some(ty) = tcx.node_types.borrow().get(&id) {\n+    if let Some(ty) = tcx.node_types().get(&id) {\n         rbml_w.tag(c::tag_table_node_type, |rbml_w| {\n             rbml_w.id(id);\n             rbml_w.emit_ty(ecx, *ty);\n@@ -1884,7 +1884,7 @@ fn decode_side_tables(dcx: &DecodeContext,\n                         let ty = val_dsr.read_ty(dcx);\n                         debug!(\"inserting ty for node {}: {}\",\n                                id, ty_to_string(dcx.tcx, ty));\n-                        dcx.tcx.node_types.borrow_mut().insert(id, ty);\n+                        dcx.tcx.node_type_insert(id, ty);\n                     }\n                     c::tag_table_item_subst => {\n                         let item_substs = ty::ItemSubsts {"}, {"sha": "2bfc9689ac2f65b5a6cfc5462c0783982a60ab01", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2f7658a52829b8208330401735c1b88638ed44c0", "patch": "@@ -68,7 +68,7 @@ use util::nodemap::FnvHashMap;\n \n use arena::TypedArena;\n use std::borrow::{Borrow, Cow};\n-use std::cell::{Cell, RefCell};\n+use std::cell::{Cell, RefCell, Ref};\n use std::cmp;\n use std::fmt;\n use std::hash::{Hash, SipHasher, Hasher};\n@@ -689,7 +689,7 @@ pub struct ctxt<'tcx> {\n     /// Stores the types for various nodes in the AST.  Note that this table\n     /// is not guaranteed to be populated until after typeck.  See\n     /// typeck::check::fn_ctxt for details.\n-    pub node_types: RefCell<NodeMap<Ty<'tcx>>>,\n+    node_types: RefCell<NodeMap<Ty<'tcx>>>,\n \n     /// Stores the type parameters which were substituted to obtain the type\n     /// of this node.  This only applies to nodes that refer to entities\n@@ -854,6 +854,13 @@ pub struct ctxt<'tcx> {\n     pub const_qualif_map: RefCell<NodeMap<check_const::ConstQualif>>,\n }\n \n+impl<'tcx> ctxt<'tcx> {\n+    pub fn node_types(&self) -> Ref<NodeMap<Ty<'tcx>>> { self.node_types.borrow() }\n+    pub fn node_type_insert(&self, id: NodeId, ty: Ty<'tcx>) {\n+        self.node_types.borrow_mut().insert(id, ty);\n+    }\n+}\n+\n // Flags that we track on types. These flags are propagated upwards\n // through the type during type construction, so that we can quickly\n // check whether the type has various kinds of types in it without"}, {"sha": "26fcf947e4f900e179c6365bbc0fb5ddaad20674", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=2f7658a52829b8208330401735c1b88638ed44c0", "patch": "@@ -272,7 +272,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 let typ =\n                     ppaux::ty_to_string(\n                         &self.analysis.ty_cx,\n-                        *self.analysis.ty_cx.node_types.borrow().get(&id).unwrap());\n+                        *self.analysis.ty_cx.node_types().get(&id).unwrap());\n                 // get the span only for the name of the variable (I hope the path is only ever a\n                 // variable name, but who knows?)\n                 self.fmt.formal_str(p.span,\n@@ -436,7 +436,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 let typ =\n                     ppaux::ty_to_string(\n                         &self.analysis.ty_cx,\n-                        *self.analysis.ty_cx.node_types.borrow().get(&field.node.id).unwrap());\n+                        *self.analysis.ty_cx.node_types().get(&field.node.id).unwrap());\n                 match self.span.sub_span_before_token(field.span, token::Colon) {\n                     Some(sub_span) => self.fmt.field_str(field.span,\n                                                          Some(sub_span),\n@@ -1471,7 +1471,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n \n         for &(id, ref p, ref immut, _) in &self.collected_paths {\n             let value = if *immut { value.to_string() } else { \"<mutable>\".to_string() };\n-            let types = self.analysis.ty_cx.node_types.borrow();\n+            let types = self.analysis.ty_cx.node_types();\n             let typ = ppaux::ty_to_string(&self.analysis.ty_cx, *types.get(&id).unwrap());\n             // Get the span only for the name of the variable (I hope the path\n             // is only ever a variable name, but who knows?)."}, {"sha": "8e9ae2eba0bcd688201775bdd050285ab1d7db22", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=2f7658a52829b8208330401735c1b88638ed44c0", "patch": "@@ -3207,7 +3207,7 @@ fn fn_should_be_ignored(fcx: &FunctionContext) -> bool {\n fn assert_type_for_node_id(cx: &CrateContext,\n                            node_id: ast::NodeId,\n                            error_reporting_span: Span) {\n-    if !cx.tcx().node_types.borrow().contains_key(&node_id) {\n+    if !cx.tcx().node_types().contains_key(&node_id) {\n         cx.sess().span_bug(error_reporting_span,\n                            \"debuginfo: Could not find type for node id!\");\n     }"}, {"sha": "9d6c04b1ad49d90957a2f373b6685f4a4ae15693", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7658a52829b8208330401735c1b88638ed44c0/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=2f7658a52829b8208330401735c1b88638ed44c0", "patch": "@@ -146,7 +146,7 @@ pub struct CrateCtxt<'a, 'tcx: 'a> {\n fn write_ty_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>, node_id: ast::NodeId, ty: Ty<'tcx>) {\n     debug!(\"write_ty_to_tcx({}, {})\", node_id, ppaux::ty_to_string(tcx, ty));\n     assert!(!ty::type_needs_infer(ty));\n-    tcx.node_types.borrow_mut().insert(node_id, ty);\n+    tcx.node_type_insert(node_id, ty);\n }\n \n fn write_substs_to_tcx<'tcx>(tcx: &ty::ctxt<'tcx>,"}]}