{"sha": "47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YThlYjdjNGUyNGI2MWE4YTlhYjRlYWZmNjBlZjY1MjkxYWFhNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-22T23:32:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-22T23:32:16Z"}, "message": "Auto merge of #47373 - wesleywiser:incr_cache_hashing, r=michaelwoerister\n\n[Incremental] Cache hashes for AdDef and ty::Slice<T>\n\nr? @michaelwoerister", "tree": {"sha": "01a2b05ca93b192f40ba062200494ee237ddf7ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01a2b05ca93b192f40ba062200494ee237ddf7ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56", "html_url": "https://github.com/rust-lang/rust/commit/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae920dcc98c9b18b38aac03367f7f1cd6dce7d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae920dcc98c9b18b38aac03367f7f1cd6dce7d2d", "html_url": "https://github.com/rust-lang/rust/commit/ae920dcc98c9b18b38aac03367f7f1cd6dce7d2d"}, {"sha": "45bd091e76db5a743a2f251612408e77a2610099", "url": "https://api.github.com/repos/rust-lang/rust/commits/45bd091e76db5a743a2f251612408e77a2610099", "html_url": "https://github.com/rust-lang/rust/commit/45bd091e76db5a743a2f251612408e77a2610099"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "4ae114c4e69da8cc6f871f7b17474c12ade335b8", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56", "patch": "@@ -11,9 +11,11 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::ty in no particular order.\n \n-use ich::{StableHashingContext, NodeIdHashingMode};\n+use ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n+use std::cell::RefCell;\n use std::hash as std_hash;\n use std::mem;\n use middle::region;\n@@ -26,7 +28,26 @@ for &'gcx ty::Slice<T>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        (&self[..]).hash_stable(hcx, hasher);\n+        thread_local! {\n+            static CACHE: RefCell<FxHashMap<(usize, usize), Fingerprint>> =\n+                RefCell::new(FxHashMap());\n+        }\n+\n+        let hash = CACHE.with(|cache| {\n+            let key = (self.as_ptr() as usize, self.len());\n+            if let Some(&hash) = cache.borrow().get(&key) {\n+                return hash;\n+            }\n+\n+            let mut hasher = StableHasher::new();\n+            (&self[..]).hash_stable(hcx, &mut hasher);\n+\n+            let hash: Fingerprint = hasher.finish();\n+            cache.borrow_mut().insert(key, hash);\n+            hash\n+        });\n+\n+        hash.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "123432074761ba15197aec10b7d6e6678a4e3cec", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=47a8eb7c4e24b61a8a9ab4eaff60ef65291aaa56", "patch": "@@ -20,6 +20,7 @@ use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n use hir::svh::Svh;\n+use ich::Fingerprint;\n use ich::StableHashingContext;\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n@@ -37,6 +38,7 @@ use util::common::ErrorReported;\n use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n+use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::cmp;\n use std::fmt;\n@@ -1476,17 +1478,32 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for AdtDef {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        let ty::AdtDef {\n-            did,\n-            ref variants,\n-            ref flags,\n-            ref repr,\n-        } = *self;\n-\n-        did.hash_stable(hcx, hasher);\n-        variants.hash_stable(hcx, hasher);\n-        flags.hash_stable(hcx, hasher);\n-        repr.hash_stable(hcx, hasher);\n+        thread_local! {\n+            static CACHE: RefCell<FxHashMap<usize, Fingerprint>> =\n+                RefCell::new(FxHashMap());\n+        }\n+\n+        let hash: Fingerprint = CACHE.with(|cache| {\n+            let addr = self as *const AdtDef as usize;\n+            *cache.borrow_mut().entry(addr).or_insert_with(|| {\n+                let ty::AdtDef {\n+                    did,\n+                    ref variants,\n+                    ref flags,\n+                    ref repr,\n+                } = *self;\n+\n+                let mut hasher = StableHasher::new();\n+                did.hash_stable(hcx, &mut hasher);\n+                variants.hash_stable(hcx, &mut hasher);\n+                flags.hash_stable(hcx, &mut hasher);\n+                repr.hash_stable(hcx, &mut hasher);\n+\n+                hasher.finish()\n+           })\n+        });\n+\n+        hash.hash_stable(hcx, hasher);\n     }\n }\n "}]}