{"sha": "46ca40ccfced6945e05a25979a2703ad967d2fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Y2E0MGNjZmNlZDY5NDVlMDVhMjU5NzlhMjcwM2FkOTY3ZDJmZTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-18T03:03:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-18T03:03:51Z"}, "message": "Merge #2575\n\n2575: [VS Code Extension] Remap error location if it extracted inside macros r=edwin0cheng a=edwin0cheng\n\nIt should fix for #2569\r\n\r\n\r\n\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "da8702614f55f0511f92c41b6bf50c506aaac3a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8702614f55f0511f92c41b6bf50c506aaac3a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ca40ccfced6945e05a25979a2703ad967d2fe0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+ZcXCRBK7hj4Ov3rIwAAdHIIAHvVTcKlHcrOOs1PyTGHCO7n\nNBiPrMFXAa6fa43hQ32pjut0fowTgMuT7aPrscLnZaOjnpuxWpT3yHDt4tQjbtC+\nu/NXFdmK6b9sS6GXW3yAsVnbAGOkjOJuYw43M7Ah5i8wHH0zKISGvwEDDKNMWlsE\nbRxcn1whetxyhfPURDGp70A+95P2D5ooODLo4bM71qXUvpRiolQjIMjgkwqHsU7A\nJ4gjn35G7wRwIQt6boyPL5Lx1lWPS2zhNY7Osmy+lLW4vRi8oYF3ttJMjcUuy40W\n8h+1f5z7072Idre9Vodw+1ZM/jS/x7xZ9r+RvH0X+G5t9GLDImgqcwny73bOSf8=\n=YZG6\n-----END PGP SIGNATURE-----\n", "payload": "tree da8702614f55f0511f92c41b6bf50c506aaac3a9\nparent ee93fac7767d36ee91d5a0029bb58023765c72d5\nparent bb9c60d90863b21a0e981f00e354d02b0e9fb584\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576638231 +0000\ncommitter GitHub <noreply@github.com> 1576638231 +0000\n\nMerge #2575\n\n2575: [VS Code Extension] Remap error location if it extracted inside macros r=edwin0cheng a=edwin0cheng\n\nIt should fix for #2569\r\n\r\n\r\n\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ca40ccfced6945e05a25979a2703ad967d2fe0", "html_url": "https://github.com/rust-lang/rust/commit/46ca40ccfced6945e05a25979a2703ad967d2fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ca40ccfced6945e05a25979a2703ad967d2fe0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee93fac7767d36ee91d5a0029bb58023765c72d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee93fac7767d36ee91d5a0029bb58023765c72d5", "html_url": "https://github.com/rust-lang/rust/commit/ee93fac7767d36ee91d5a0029bb58023765c72d5"}, {"sha": "bb9c60d90863b21a0e981f00e354d02b0e9fb584", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9c60d90863b21a0e981f00e354d02b0e9fb584", "html_url": "https://github.com/rust-lang/rust/commit/bb9c60d90863b21a0e981f00e354d02b0e9fb584"}], "stats": {"total": 333, "additions": 333, "deletions": 0}, "files": [{"sha": "bfef33c7de786dd8f8dfd2a5a415b96767ac62bf", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0277.json", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/46ca40ccfced6945e05a25979a2703ad967d2fe0/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json", "raw_url": "https://github.com/rust-lang/rust/raw/46ca40ccfced6945e05a25979a2703ad967d2fe0/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json?ref=46ca40ccfced6945e05a25979a2703ad967d2fe0", "patch": "@@ -0,0 +1,261 @@\n+{\n+    \"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n+    \"children\": [\n+        {\n+            \"children\": [],\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"message\": \"the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+            \"rendered\": null,\n+            \"spans\": []\n+        }\n+    ],\n+    \"code\": {\n+        \"code\": \"E0277\",\n+        \"explanation\": \"\\nYou tried to use a type which doesn't implement some trait in a place which\\nexpected that trait. Erroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function: Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function: It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"message\": \"can't compare `{integer}` with `&str`\",\n+    \"spans\": [\n+        {\n+            \"byte_end\": 155,\n+            \"byte_start\": 153,\n+            \"column_end\": 33,\n+            \"column_start\": 31,\n+            \"expansion\": {\n+                \"def_site_span\": {\n+                    \"byte_end\": 940,\n+                    \"byte_start\": 0,\n+                    \"column_end\": 6,\n+                    \"column_start\": 1,\n+                    \"expansion\": null,\n+                    \"file_name\": \"<::core::macros::assert_eq macros>\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 36,\n+                    \"line_start\": 1,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 35,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"($ left : expr, $ right : expr) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 3,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     match (& $ left, & $ right)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 34,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         (left_val, right_val) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 46,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             if ! (* left_val == * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 25,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 panic !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 57,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                        },\n+                        {\n+                            \"highlight_end\": 16,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"  left: `{:?}`,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 18,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" right: `{:?}`\\\"#,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 47,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  & * left_val, & * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 42,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" }) ; ($ left : expr, $ right : expr,) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 49,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({ $ crate :: assert_eq ! ($ left, $ right) }) ;\"\n+                        },\n+                        {\n+                            \"highlight_end\": 53,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 3,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({\"\n+                        },\n+                        {\n+                            \"highlight_end\": 37,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     match (& ($ left), & ($ right))\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 34,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         (left_val, right_val) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 46,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             if ! (* left_val == * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 25,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 panic !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 57,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                        },\n+                        {\n+                            \"highlight_end\": 16,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"  left: `{:?}`,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 22,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" right: `{:?}`: {}\\\"#,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 72,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  & * left_val, & * right_val, $ crate :: format_args !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  ($ ($ arg) +))\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 6,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" }) ;\"\n+                        }\n+                    ]\n+                },\n+                \"macro_decl_name\": \"assert_eq!\",\n+                \"span\": {\n+                    \"byte_end\": 38,\n+                    \"byte_start\": 16,\n+                    \"column_end\": 27,\n+                    \"column_start\": 5,\n+                    \"expansion\": null,\n+                    \"file_name\": \"src/main.rs\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 2,\n+                    \"line_start\": 2,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 27,\n+                            \"highlight_start\": 5,\n+                            \"text\": \"    assert_eq!(1, \\\"love\\\");\"\n+                        }\n+                    ]\n+                }\n+            },\n+            \"file_name\": \"<::core::macros::assert_eq macros>\",\n+            \"is_primary\": true,\n+            \"label\": \"no implementation for `{integer} == &str`\",\n+            \"line_end\": 7,\n+            \"line_start\": 7,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"text\": [\n+                {\n+                    \"highlight_end\": 33,\n+                    \"highlight_start\": 31,\n+                    \"text\": \"             if ! (* left_val == * right_val)\"\n+                }\n+            ]\n+        }\n+    ]\n+}"}, {"sha": "358325cc8dde6082cb0eda52f1fbdbe38483bf34", "filename": "editors/code/src/test/utils/diagnotics/rust.test.ts", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/46ca40ccfced6945e05a25979a2703ad967d2fe0/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46ca40ccfced6945e05a25979a2703ad967d2fe0/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts?ref=46ca40ccfced6945e05a25979a2703ad967d2fe0", "patch": "@@ -199,4 +199,38 @@ describe('mapRustDiagnosticToVsCode', () => {\n         // There are no suggested fixes\n         assert.strictEqual(suggestedFixes.length, 0);\n     });\n+\n+    it('should map a macro invocation location to normal file path', () => {\n+        const { location, diagnostic, suggestedFixes } = mapFixtureToVsCode(\n+            'error/E0277',\n+        );\n+\n+        assert.strictEqual(\n+            diagnostic.severity,\n+            vscode.DiagnosticSeverity.Error,\n+        );\n+        assert.strictEqual(\n+            diagnostic.message,\n+            [\n+                \"can't compare `{integer}` with `&str`\",\n+                'the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`',\n+            ].join('\\n'),\n+        );\n+        assert.strictEqual(diagnostic.code, 'E0277');\n+        assert.strictEqual(diagnostic.source, 'rustc');\n+        assert.deepStrictEqual(diagnostic.tags, []);\n+\n+        // No related information\n+        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n+\n+        // There are no suggested fixes\n+        assert.strictEqual(suggestedFixes.length, 0);\n+\n+        // The file url should be normal file\n+        // Ignore the first part because it depends on vs workspace location\n+        assert.strictEqual(\n+            location.uri.path.substr(-'src/main.rs'.length),\n+            'src/main.rs',\n+        );\n+    });\n });"}, {"sha": "1f0c0d3e4057a85d6dcca373474b421f177c53be", "filename": "editors/code/src/utils/diagnostics/rust.ts", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46ca40ccfced6945e05a25979a2703ad967d2fe0/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "raw_url": "https://github.com/rust-lang/rust/raw/46ca40ccfced6945e05a25979a2703ad967d2fe0/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts?ref=46ca40ccfced6945e05a25979a2703ad967d2fe0", "patch": "@@ -10,6 +10,12 @@ export enum SuggestionApplicability {\n     Unspecified = 'Unspecified',\n }\n \n+export interface RustDiagnosticSpanMacroExpansion {\n+    span: RustDiagnosticSpan;\n+    macro_decl_name: string;\n+    def_site_span?: RustDiagnosticSpan;\n+}\n+\n // Reference:\n // https://github.com/rust-lang/rust/blob/master/src/libsyntax/json.rs\n export interface RustDiagnosticSpan {\n@@ -20,6 +26,7 @@ export interface RustDiagnosticSpan {\n     is_primary: boolean;\n     file_name: string;\n     label?: string;\n+    expansion?: RustDiagnosticSpanMacroExpansion;\n     suggested_replacement?: string;\n     suggestion_applicability?: SuggestionApplicability;\n }\n@@ -60,10 +67,41 @@ function mapLevelToSeverity(s: string): vscode.DiagnosticSeverity {\n     return vscode.DiagnosticSeverity.Information;\n }\n \n+/**\n+ * Check whether a file name is from macro invocation\n+ */\n+function isFromMacro(fileName: string): boolean {\n+    return fileName.startsWith('<') && fileName.endsWith('>');\n+}\n+\n+/**\n+ * Converts a Rust macro span to a VsCode location recursively\n+ */\n+function mapMacroSpanToLocation(\n+    spanMacro: RustDiagnosticSpanMacroExpansion,\n+): vscode.Location | undefined {\n+    if (!isFromMacro(spanMacro.span.file_name)) {\n+        return mapSpanToLocation(spanMacro.span);\n+    }\n+\n+    if (spanMacro.span.expansion) {\n+        return mapMacroSpanToLocation(spanMacro.span.expansion);\n+    }\n+\n+    return;\n+}\n+\n /**\n  * Converts a Rust span to a VsCode location\n  */\n function mapSpanToLocation(span: RustDiagnosticSpan): vscode.Location {\n+    if (isFromMacro(span.file_name) && span.expansion) {\n+        const macroLoc = mapMacroSpanToLocation(span.expansion);\n+        if (macroLoc) {\n+            return macroLoc;\n+        }\n+    }\n+\n     const fileName = path.join(vscode.workspace.rootPath || '', span.file_name);\n     const fileUri = vscode.Uri.file(fileName);\n "}]}