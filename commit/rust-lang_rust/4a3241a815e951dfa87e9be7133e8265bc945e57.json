{"sha": "4a3241a815e951dfa87e9be7133e8265bc945e57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMzI0MWE4MTVlOTUxZGZhODdlOWJlNzEzM2U4MjY1YmM5NDVlNTc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T23:34:27Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T23:49:06Z"}, "message": "Benchmark more possibles impls of [u8]::make_ascii_uppercase", "tree": {"sha": "3e7e308920acb4b0bd7d55999902e052277b0970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e7e308920acb4b0bd7d55999902e052277b0970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a3241a815e951dfa87e9be7133e8265bc945e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3241a815e951dfa87e9be7133e8265bc945e57", "html_url": "https://github.com/rust-lang/rust/commit/4a3241a815e951dfa87e9be7133e8265bc945e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a3241a815e951dfa87e9be7133e8265bc945e57/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4faa9b45635ae5185d562701d7429e5fbb08c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4faa9b45635ae5185d562701d7429e5fbb08c8b", "html_url": "https://github.com/rust-lang/rust/commit/b4faa9b45635ae5185d562701d7429e5fbb08c8b"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "ce36027394a4897e0fbc46be1a0b426abe62b83f", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4a3241a815e951dfa87e9be7133e8265bc945e57/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3241a815e951dfa87e9be7133e8265bc945e57/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=4a3241a815e951dfa87e9be7133e8265bc945e57", "patch": "@@ -59,7 +59,7 @@ benches! {\n         }\n     }\n \n-    fn case02_lookup(bytes: &mut [u8]) {\n+    fn case02_lookup_table(bytes: &mut [u8]) {\n         for byte in bytes {\n             *byte = ASCII_UPPERCASE_MAP[*byte as usize]\n         }\n@@ -141,6 +141,55 @@ benches! {\n         }\n     }\n \n+    fn case09_mask_mult_bool_branchy_lookup_table(bytes: &mut [u8]) {\n+        fn is_ascii_lowercase(b: u8) -> bool {\n+            if b >= 0x80 { return false }\n+            match ASCII_CHARACTER_CLASS[b as usize] {\n+                L | Lx => true,\n+                _ => false,\n+            }\n+        }\n+        for byte in bytes {\n+            *byte &= !(0x20 * (is_ascii_lowercase(*byte) as u8))\n+        }\n+    }\n+\n+    fn case10_mask_mult_bool_lookup_table(bytes: &mut [u8]) {\n+        fn is_ascii_lowercase(b: u8) -> bool {\n+            match ASCII_CHARACTER_CLASS[b as usize] {\n+                L | Lx => true,\n+                _ => false\n+            }\n+        }\n+        for byte in bytes {\n+            *byte &= !(0x20 * (is_ascii_lowercase(*byte) as u8))\n+        }\n+    }\n+\n+    fn case11_mask_mult_bool_match_range(bytes: &mut [u8]) {\n+        fn is_ascii_lowercase(b: u8) -> bool {\n+            match b {\n+                b'a'...b'z' => true,\n+                _ => false\n+            }\n+        }\n+        for byte in bytes {\n+            *byte &= !(0x20 * (is_ascii_lowercase(*byte) as u8))\n+        }\n+    }\n+\n+    fn case12_mask_shifted_bool_match_range(bytes: &mut [u8]) {\n+        fn is_ascii_lowercase(b: u8) -> bool {\n+            match b {\n+                b'a'...b'z' => true,\n+                _ => false\n+            }\n+        }\n+        for byte in bytes {\n+            *byte &= !((is_ascii_lowercase(*byte) as u8) << 5)\n+        }\n+    }\n+\n     @iter\n \n     is_ascii,\n@@ -219,3 +268,36 @@ const ASCII_UPPERCASE_MAP: [u8; 256] = [\n     0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n ];\n \n+enum AsciiCharacterClass {\n+    C,  // control\n+    Cw, // control whitespace\n+    W,  // whitespace\n+    D,  // digit\n+    L,  // lowercase\n+    Lx, // lowercase hex digit\n+    U,  // uppercase\n+    Ux, // uppercase hex digit\n+    P,  // punctuation\n+    N,  // Non-ASCII\n+}\n+use self::AsciiCharacterClass::*;\n+\n+static ASCII_CHARACTER_CLASS: [AsciiCharacterClass; 256] = [\n+//  _0 _1 _2 _3 _4 _5 _6 _7 _8 _9 _a _b _c _d _e _f\n+    C, C, C, C, C, C, C, C, C, Cw,Cw,C, Cw,Cw,C, C, // 0_\n+    C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, // 1_\n+    W, P, P, P, P, P, P, P, P, P, P, P, P, P, P, P, // 2_\n+    D, D, D, D, D, D, D, D, D, D, P, P, P, P, P, P, // 3_\n+    P, Ux,Ux,Ux,Ux,Ux,Ux,U, U, U, U, U, U, U, U, U, // 4_\n+    U, U, U, U, U, U, U, U, U, U, U, P, P, P, P, P, // 5_\n+    P, Lx,Lx,Lx,Lx,Lx,Lx,L, L, L, L, L, L, L, L, L, // 6_\n+    L, L, L, L, L, L, L, L, L, L, L, P, P, P, P, C, // 7_\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+    N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n+];"}]}