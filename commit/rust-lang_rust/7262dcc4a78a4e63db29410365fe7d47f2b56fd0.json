{"sha": "7262dcc4a78a4e63db29410365fe7d47f2b56fd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjJkY2M0YTc4YTRlNjNkYjI5NDEwMzY1ZmU3ZDQ3ZjJiNTZmZDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T21:41:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:42:21Z"}, "message": "refactor loop parsing a bit", "tree": {"sha": "3d0508dec00f722ffe6cd01936992a8e5052d382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d0508dec00f722ffe6cd01936992a8e5052d382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7262dcc4a78a4e63db29410365fe7d47f2b56fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7262dcc4a78a4e63db29410365fe7d47f2b56fd0", "html_url": "https://github.com/rust-lang/rust/commit/7262dcc4a78a4e63db29410365fe7d47f2b56fd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7262dcc4a78a4e63db29410365fe7d47f2b56fd0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de2e443bc62a5e6ce003c850d8a2b5302950d6e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2e443bc62a5e6ce003c850d8a2b5302950d6e3", "html_url": "https://github.com/rust-lang/rust/commit/de2e443bc62a5e6ce003c850d8a2b5302950d6e3"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "17198040d25b55a76e2a6534f435f8e623a4a146", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7262dcc4a78a4e63db29410365fe7d47f2b56fd0/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7262dcc4a78a4e63db29410365fe7d47f2b56fd0/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=7262dcc4a78a4e63db29410365fe7d47f2b56fd0", "patch": "@@ -1472,15 +1472,13 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parses a `for ... in` expression (`for` token already eaten).\n+    /// Parses `for <src_pat> in <src_expr> <src_loop_block>` (`for` token already eaten).\n     fn parse_for_expr(\n         &mut self,\n         opt_label: Option<Label>,\n-        span_lo: Span,\n+        lo: Span,\n         mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n-        // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n-\n         // Record whether we are about to parse `for (`.\n         // This is used below for recovery in case of `for ( $stuff ) $block`\n         // in which case we will suggest `for $stuff $block`.\n@@ -1491,65 +1489,64 @@ impl<'a> Parser<'a> {\n \n         let pat = self.parse_top_pat(GateOr::Yes)?;\n         if !self.eat_keyword(kw::In) {\n-            let in_span = self.prev_span.between(self.token.span);\n-            self.struct_span_err(in_span, \"missing `in` in `for` loop\")\n-                .span_suggestion_short(\n-                    in_span,\n-                    \"try adding `in` here\",\n-                    \" in \".into(),\n-                    // has been misleading, at least in the past (closed Issue #48492)\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+            self.error_missing_in_for_loop();\n         }\n-        let in_span = self.prev_span;\n-        self.check_for_for_in_in_typo(in_span);\n+        self.check_for_for_in_in_typo(self.prev_span);\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n \n         let pat = self.recover_parens_around_for_head(pat, &expr, begin_paren);\n \n         let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n \n-        let hi = self.prev_span;\n-        Ok(self.mk_expr(span_lo.to(hi), ExprKind::ForLoop(pat, expr, loop_block, opt_label), attrs))\n+        let kind = ExprKind::ForLoop(pat, expr, loop_block, opt_label);\n+        Ok(self.mk_expr(lo.to(self.prev_span), kind, attrs))\n+    }\n+\n+    fn error_missing_in_for_loop(&self) {\n+        let in_span = self.prev_span.between(self.token.span);\n+        self.struct_span_err(in_span, \"missing `in` in `for` loop\")\n+            .span_suggestion_short(\n+                in_span,\n+                \"try adding `in` here\",\n+                \" in \".into(),\n+                // Has been misleading, at least in the past (closed Issue #48492).\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n     }\n \n     /// Parses a `while` or `while let` expression (`while` token already eaten).\n     fn parse_while_expr(\n         &mut self,\n         opt_label: Option<Label>,\n-        span_lo: Span,\n+        lo: Span,\n         mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n         let cond = self.parse_cond_expr()?;\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n-        let span = span_lo.to(body.span);\n-        Ok(self.mk_expr(span, ExprKind::While(cond, body, opt_label), attrs))\n+        Ok(self.mk_expr(lo.to(self.prev_span), ExprKind::While(cond, body, opt_label), attrs))\n     }\n \n     /// Parses `loop { ... }` (`loop` token already eaten).\n     fn parse_loop_expr(\n         &mut self,\n         opt_label: Option<Label>,\n-        span_lo: Span,\n+        lo: Span,\n         mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n-        let span = span_lo.to(body.span);\n-        Ok(self.mk_expr(span, ExprKind::Loop(body, opt_label), attrs))\n+        Ok(self.mk_expr(lo.to(self.prev_span), ExprKind::Loop(body, opt_label), attrs))\n     }\n \n     fn eat_label(&mut self) -> Option<Label> {\n-        if let Some(ident) = self.token.lifetime() {\n+        self.token.lifetime().map(|ident| {\n             let span = self.token.span;\n             self.bump();\n-            Some(Label { ident: Ident::new(ident.name, span) })\n-        } else {\n-            None\n-        }\n+            Label { ident: Ident::new(ident.name, span) }\n+        })\n     }\n \n     /// Parses a `match ... { ... }` expression (`match` token already eaten)."}, {"sha": "09f0d641de060ea5254b1905a845009b89d7e641", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7262dcc4a78a4e63db29410365fe7d47f2b56fd0/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7262dcc4a78a4e63db29410365fe7d47f2b56fd0/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=7262dcc4a78a4e63db29410365fe7d47f2b56fd0", "patch": "@@ -2,7 +2,7 @@ warning: irrefutable while-let pattern\n   --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n-   |               ^^^^^\n+   |               ^^^^^^^^^^^^^^^^^^^^\n ...\n LL | /     foo!(_a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n@@ -15,7 +15,7 @@ warning: irrefutable while-let pattern\n   --> $DIR/while-let.rs:7:13\n    |\n LL |               while let $p = $e $b\n-   |               ^^^^^\n+   |               ^^^^^^^^^^^^^^^^^^^^\n ...\n LL | /     bar!(_a, 1, {\n LL | |         println!(\"irrefutable pattern\");"}]}