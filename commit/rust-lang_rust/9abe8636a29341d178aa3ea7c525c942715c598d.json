{"sha": "9abe8636a29341d178aa3ea7c525c942715c598d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYmU4NjM2YTI5MzQxZDE3OGFhM2VhN2M1MjVjOTQyNzE1YzU5OGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-01T00:31:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-01T00:31:51Z"}, "message": "Merge pull request #1455 from topecongiro/unary-op\n\nAdd heuristic choosing block or visual indent for unary op based on span", "tree": {"sha": "26c9ebe6b4759315379bfbc12154b3260c7de818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c9ebe6b4759315379bfbc12154b3260c7de818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9abe8636a29341d178aa3ea7c525c942715c598d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9abe8636a29341d178aa3ea7c525c942715c598d", "html_url": "https://github.com/rust-lang/rust/commit/9abe8636a29341d178aa3ea7c525c942715c598d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9abe8636a29341d178aa3ea7c525c942715c598d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4833a8c581f92e87eeb0f5a6f11719f4eb94092", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4833a8c581f92e87eeb0f5a6f11719f4eb94092", "html_url": "https://github.com/rust-lang/rust/commit/b4833a8c581f92e87eeb0f5a6f11719f4eb94092"}, {"sha": "0614e94d0df2d50f7f16e93c469006a31294ec6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0614e94d0df2d50f7f16e93c469006a31294ec6d", "html_url": "https://github.com/rust-lang/rust/commit/0614e94d0df2d50f7f16e93c469006a31294ec6d"}], "stats": {"total": 83, "additions": 52, "deletions": 31}, "files": [{"sha": "7b4153083cb87f90df659d99d16a27ae12014d03", "filename": "src/expr.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=9abe8636a29341d178aa3ea7c525c942715c598d", "patch": "@@ -157,7 +157,11 @@ fn format_expr(expr: &ast::Expr,\n             };\n \n             if let Some(ref expr) = *opt_expr {\n-                rewrite_unary_prefix(context, &format!(\"break{} \", id_str), &**expr, shape)\n+                rewrite_unary_prefix(context,\n+                                     &format!(\"break{} \", id_str),\n+                                     &**expr,\n+                                     shape,\n+                                     expr.span)\n             } else {\n                 wrap_str(format!(\"break{}\", id_str), context.config.max_width, shape)\n             }\n@@ -178,9 +182,11 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Ret(None) => wrap_str(\"return\".to_owned(), context.config.max_width, shape),\n         ast::ExprKind::Ret(Some(ref expr)) => {\n-            rewrite_unary_prefix(context, \"return \", &**expr, shape)\n+            rewrite_unary_prefix(context, \"return \", &**expr, shape, expr.span)\n+        }\n+        ast::ExprKind::Box(ref expr) => {\n+            rewrite_unary_prefix(context, \"box \", &**expr, shape, expr.span)\n         }\n-        ast::ExprKind::Box(ref expr) => rewrite_unary_prefix(context, \"box \", &**expr, shape),\n         ast::ExprKind::AddrOf(mutability, ref expr) => {\n             rewrite_expr_addrof(context, mutability, expr, shape)\n         }\n@@ -222,7 +228,7 @@ fn format_expr(expr: &ast::Expr,\n                     } else {\n                         delim.into()\n                     };\n-                    rewrite_unary_prefix(context, &sp_delim, &**rhs, shape)\n+                    rewrite_unary_prefix(context, &sp_delim, &**rhs, shape, expr.span)\n                 }\n                 (Some(ref lhs), None) => {\n                     let sp_delim = if context.config.spaces_around_ranges {\n@@ -1224,10 +1230,10 @@ fn rewrite_match(context: &RewriteContext,\n \n fn arm_start_pos(arm: &ast::Arm) -> BytePos {\n     let &ast::Arm {\n-             ref attrs,\n-             ref pats,\n-             ..\n-         } = arm;\n+        ref attrs,\n+        ref pats,\n+        ..\n+    } = arm;\n     if !attrs.is_empty() {\n         return attrs[0].span.lo;\n     }\n@@ -1258,11 +1264,11 @@ impl Rewrite for ast::Arm {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         debug!(\"Arm::rewrite {:?} {:?}\", self, shape);\n         let &ast::Arm {\n-                 ref attrs,\n-                 ref pats,\n-                 ref guard,\n-                 ref body,\n-             } = self;\n+            ref attrs,\n+            ref pats,\n+            ref guard,\n+            ref body,\n+        } = self;\n \n         // FIXME this is all a bit grotty, would be nice to abstract out the\n         // treatment of attributes.\n@@ -1997,9 +2003,22 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n pub fn rewrite_unary_prefix<R: Rewrite>(context: &RewriteContext,\n                                         prefix: &str,\n                                         rewrite: &R,\n-                                        shape: Shape)\n+                                        mut shape: Shape,\n+                                        span: Span)\n                                         -> Option<String> {\n-    let shape = try_opt!(shape.shrink_left(prefix.len())).visual_indent(0);\n+    // Heuristic: if unary is `&` and `rewrite` contains `{`,\n+    // it is likely that block indent is preferred to visual indent.\n+    if prefix == \"&\" {\n+        let snippet = String::from(context.snippet(span).trim_left_matches('&'));\n+        let first_line = try_opt!(snippet.lines().nth(0));\n+        if first_line.contains(\"{\") {\n+            shape = try_opt!(shape.sub_width(prefix.len())).block_indent(0);\n+        } else {\n+            shape = try_opt!(shape.shrink_left(prefix.len())).visual_indent(0);\n+        }\n+    } else {\n+        shape = try_opt!(shape.shrink_left(prefix.len())).visual_indent(0);\n+    }\n     rewrite\n         .rewrite(context, shape)\n         .map(|r| format!(\"{}{}\", prefix, r))\n@@ -2031,7 +2050,7 @@ fn rewrite_unary_op(context: &RewriteContext,\n         ast::UnOp::Not => \"!\",\n         ast::UnOp::Neg => \"-\",\n     };\n-    rewrite_unary_prefix(context, operator_str, expr, shape)\n+    rewrite_unary_prefix(context, operator_str, expr, shape, expr.span)\n }\n \n fn rewrite_assignment(context: &RewriteContext,\n@@ -2126,5 +2145,5 @@ fn rewrite_expr_addrof(context: &RewriteContext,\n         ast::Mutability::Immutable => \"&\",\n         ast::Mutability::Mutable => \"&mut \",\n     };\n-    rewrite_unary_prefix(context, operator_str, expr, shape)\n+    rewrite_unary_prefix(context, operator_str, expr, shape, expr.span)\n }"}, {"sha": "99651159b2ad6ecd2c8c7551e557c753cbde50dd", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=9abe8636a29341d178aa3ea7c525c942715c598d", "patch": "@@ -133,9 +133,9 @@ fn rewrite_view_path_prefix(path: &ast::Path,\n     let path_str = if path.segments.last().unwrap().identifier.to_string() == \"self\" &&\n                       path.segments.len() > 1 {\n         let path = &ast::Path {\n-                        span: path.span.clone(),\n-                        segments: path.segments[..path.segments.len() - 1].to_owned(),\n-                    };\n+            span: path.span.clone(),\n+            segments: path.segments[..path.segments.len() - 1].to_owned(),\n+        };\n         try_opt!(rewrite_path(context, PathContext::Import, None, path, shape))\n     } else {\n         try_opt!(rewrite_path(context, PathContext::Import, None, path, shape))"}, {"sha": "1ed13ab70b6d3551be4ddd958e763bd63b22ee3f", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=9abe8636a29341d178aa3ea7c525c942715c598d", "patch": "@@ -27,7 +27,9 @@ use syntax::codemap::{self, BytePos, Span};\n impl Rewrite for Pat {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match self.node {\n-            PatKind::Box(ref pat) => rewrite_unary_prefix(context, \"box \", &**pat, shape),\n+            PatKind::Box(ref pat) => {\n+                rewrite_unary_prefix(context, \"box \", &**pat, shape, self.span)\n+            }\n             PatKind::Ident(binding_mode, ident, ref sub_pat) => {\n                 let (prefix, mutability) = match binding_mode {\n                     BindingMode::ByRef(mutability) => (\"ref \", mutability),\n@@ -71,7 +73,7 @@ impl Rewrite for Pat {\n             }\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n-                rewrite_unary_prefix(context, &prefix, &**pat, shape)\n+                rewrite_unary_prefix(context, &prefix, &**pat, shape, self.span)\n             }\n             PatKind::Tuple(ref items, dotdot_pos) => {\n                 rewrite_tuple_pat(items, dotdot_pos, None, self.span, context, shape)"}, {"sha": "b8038de709f5ede672bc8b007e1ea51ecaef7193", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abe8636a29341d178aa3ea7c525c942715c598d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9abe8636a29341d178aa3ea7c525c942715c598d", "patch": "@@ -580,7 +580,7 @@ impl Rewrite for ast::Ty {\n                     Mutability::Immutable => \"*const \",\n                 };\n \n-                rewrite_unary_prefix(context, prefix, &*mt.ty, shape)\n+                rewrite_unary_prefix(context, prefix, &*mt.ty, shape, self.span)\n             }\n             ast::TyKind::Rptr(ref lifetime, ref mt) => {\n                 let mut_str = format_mutability(mt.mutbl);"}, {"sha": "c9edec799e2fa5971a94f6682eac2cf0fa010ca4", "filename": "tests/target/closure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9abe8636a29341d178aa3ea7c525c942715c598d/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abe8636a29341d178aa3ea7c525c942715c598d/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=9abe8636a29341d178aa3ea7c525c942715c598d", "patch": "@@ -74,16 +74,16 @@ fn issue863() {\n \n fn issue934() {\n     let hash: &Fn(&&Block) -> u64 = &|block| -> u64 {\n-                                         let mut h = SpanlessHash::new(cx);\n-                                         h.hash_block(block);\n-                                         h.finish()\n-                                     };\n+        let mut h = SpanlessHash::new(cx);\n+        h.hash_block(block);\n+        h.finish()\n+    };\n \n     let hash: &Fn(&&Block) -> u64 = &|block| -> u64 {\n-                                         let mut h = SpanlessHash::new(cx);\n-                                         h.hash_block(block);\n-                                         h.finish();\n-                                     };\n+        let mut h = SpanlessHash::new(cx);\n+        h.hash_block(block);\n+        h.finish();\n+    };\n }\n \n impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {"}]}