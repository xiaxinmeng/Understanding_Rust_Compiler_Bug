{"sha": "8d651013e43aee25edb9ea82977756d9238a6fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNjUxMDEzZTQzYWVlMjVlZGI5ZWE4Mjk3Nzc1NmQ5MjM4YTZmZWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-11-02T07:59:11Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-11-02T07:59:11Z"}, "message": "Fix format", "tree": {"sha": "5571a6628f6777f0ddbb62537748db04d5e4f96d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5571a6628f6777f0ddbb62537748db04d5e4f96d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d651013e43aee25edb9ea82977756d9238a6fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d651013e43aee25edb9ea82977756d9238a6fee", "html_url": "https://github.com/rust-lang/rust/commit/8d651013e43aee25edb9ea82977756d9238a6fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d651013e43aee25edb9ea82977756d9238a6fee/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54d9ffc0b9c2e1057f63648d20f9f65e30e7d48f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d9ffc0b9c2e1057f63648d20f9f65e30e7d48f", "html_url": "https://github.com/rust-lang/rust/commit/54d9ffc0b9c2e1057f63648d20f9f65e30e7d48f"}], "stats": {"total": 185, "additions": 95, "deletions": 90}, "files": [{"sha": "1c6e661782f4b6f92464a2e9b47098abbc50584d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 95, "deletions": 90, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/8d651013e43aee25edb9ea82977756d9238a6fee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d651013e43aee25edb9ea82977756d9238a6fee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8d651013e43aee25edb9ea82977756d9238a6fee", "patch": "@@ -1570,78 +1570,107 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             format!(\"does not implement `{}`\", trait_ref.print_only_trait_path())\n         };\n \n-        let mut explain_yield = |interior_span: Span,\n-                                 yield_span: Span,\n-                                 scope_span: Option<Span>| {\n-            let mut span = MultiSpan::from_span(yield_span);\n-            if let Ok(snippet) = source_map.span_to_snippet(interior_span) {\n-                // #70935: If snippet contains newlines, display \"the value\" instead\n-                // so that we do not emit complex diagnostics.\n-                let snippet = &format!(\"`{}`\", snippet);\n-                let snippet = if snippet.contains('\\n') { \"the value\" } else { snippet };\n-                // The multispan can be complex here, like:\n-                // note: future is not `Send` as this value is used across an await\n-                //   --> $DIR/issue-70935-complex-spans.rs:13:9\n-                //    |\n-                // LL |            baz(|| async{\n-                //    |  __________^___-\n-                //    | | _________|\n-                //    | ||\n-                // LL | ||             foo(tx.clone());\n-                // LL | ||         }).await;\n-                //    | ||         -      ^- value is later dropped here\n-                //    | ||_________|______|\n-                //    | |__________|      await occurs here, with value maybe used later\n-                //    |            has type `closure` which is not `Send`\n-                //\n-                // So, detect it and separate into some notes, like:\n-                //\n-                // note: future is not `Send` as this value is used across an await\n-                //   --> $DIR/issue-70935-complex-spans.rs:13:9\n-                //    |\n-                // LL | /         baz(|| async{\n-                // LL | |             foo(tx.clone());\n-                // LL | |         }).await;\n-                //    | |________________^ first, await occurs here, with the value maybe used later...\n-                // note: the value is later dropped here\n-                //   --> $DIR/issue-70935-complex-spans.rs:15:17\n-                //    |\n-                // LL |         }).await;\n-                //    |                 ^\n-                //\n-                // If available, use the scope span to annotate the drop location.\n-                if let Some(scope_span) = scope_span {\n-                    let scope_span = source_map.end_point(scope_span);\n-                    let is_overlapped =\n-                        yield_span.overlaps(scope_span) || yield_span.overlaps(interior_span);\n-                    if is_overlapped {\n-                        span.push_span_label(\n-                            yield_span,\n-                            format!(\n-                                \"first, {} occurs here, with {} maybe used later...\",\n-                                await_or_yield, snippet\n-                            ),\n-                        );\n-                        err.span_note(\n-                            span,\n-                            &format!(\n-                                \"{} {} as this value is used across {}\",\n-                                future_or_generator, trait_explanation, an_await_or_yield\n-                            ),\n-                        );\n-                        if source_map.is_multiline(interior_span) {\n-                            err.span_note(scope_span, &format!(\"{} is later dropped here\", snippet));\n+        let mut explain_yield =\n+            |interior_span: Span, yield_span: Span, scope_span: Option<Span>| {\n+                let mut span = MultiSpan::from_span(yield_span);\n+                if let Ok(snippet) = source_map.span_to_snippet(interior_span) {\n+                    // #70935: If snippet contains newlines, display \"the value\" instead\n+                    // so that we do not emit complex diagnostics.\n+                    let snippet = &format!(\"`{}`\", snippet);\n+                    let snippet = if snippet.contains('\\n') { \"the value\" } else { snippet };\n+                    // The multispan can be complex here, like:\n+                    // note: future is not `Send` as this value is used across an await\n+                    //   --> $DIR/issue-70935-complex-spans.rs:13:9\n+                    //    |\n+                    // LL |            baz(|| async{\n+                    //    |  __________^___-\n+                    //    | | _________|\n+                    //    | ||\n+                    // LL | ||             foo(tx.clone());\n+                    // LL | ||         }).await;\n+                    //    | ||         -      ^- value is later dropped here\n+                    //    | ||_________|______|\n+                    //    | |__________|      await occurs here, with value maybe used later\n+                    //    |            has type `closure` which is not `Send`\n+                    //\n+                    // So, detect it and separate into some notes, like:\n+                    //\n+                    // note: future is not `Send` as this value is used across an await\n+                    //   --> $DIR/issue-70935-complex-spans.rs:13:9\n+                    //    |\n+                    // LL | /         baz(|| async{\n+                    // LL | |             foo(tx.clone());\n+                    // LL | |         }).await;\n+                    //    | |________________^ first, await occurs here, with the value maybe used later...\n+                    // note: the value is later dropped here\n+                    //   --> $DIR/issue-70935-complex-spans.rs:15:17\n+                    //    |\n+                    // LL |         }).await;\n+                    //    |                 ^\n+                    //\n+                    // If available, use the scope span to annotate the drop location.\n+                    if let Some(scope_span) = scope_span {\n+                        let scope_span = source_map.end_point(scope_span);\n+                        let is_overlapped =\n+                            yield_span.overlaps(scope_span) || yield_span.overlaps(interior_span);\n+                        if is_overlapped {\n+                            span.push_span_label(\n+                                yield_span,\n+                                format!(\n+                                    \"first, {} occurs here, with {} maybe used later...\",\n+                                    await_or_yield, snippet\n+                                ),\n+                            );\n                             err.span_note(\n-                                interior_span,\n-                                &format!(\"this has type `{}` which {}\", target_ty, trait_explanation),\n+                                span,\n+                                &format!(\n+                                    \"{} {} as this value is used across {}\",\n+                                    future_or_generator, trait_explanation, an_await_or_yield\n+                                ),\n                             );\n+                            if source_map.is_multiline(interior_span) {\n+                                err.span_note(\n+                                    scope_span,\n+                                    &format!(\"{} is later dropped here\", snippet),\n+                                );\n+                                err.span_note(\n+                                    interior_span,\n+                                    &format!(\n+                                        \"this has type `{}` which {}\",\n+                                        target_ty, trait_explanation\n+                                    ),\n+                                );\n+                            } else {\n+                                let mut span = MultiSpan::from_span(scope_span);\n+                                span.push_span_label(\n+                                    interior_span,\n+                                    format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n+                                );\n+                                err.span_note(span, &format!(\"{} is later dropped here\", snippet));\n+                            }\n                         } else {\n-                            let mut span = MultiSpan::from_span(scope_span);\n+                            span.push_span_label(\n+                                yield_span,\n+                                format!(\n+                                    \"{} occurs here, with {} maybe used later\",\n+                                    await_or_yield, snippet\n+                                ),\n+                            );\n+                            span.push_span_label(\n+                                scope_span,\n+                                format!(\"{} is later dropped here\", snippet),\n+                            );\n                             span.push_span_label(\n                                 interior_span,\n                                 format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n                             );\n-                            err.span_note(span, &format!(\"{} is later dropped here\", snippet));\n+                            err.span_note(\n+                                span,\n+                                &format!(\n+                                    \"{} {} as this value is used across {}\",\n+                                    future_or_generator, trait_explanation, an_await_or_yield\n+                                ),\n+                            );\n                         }\n                     } else {\n                         span.push_span_label(\n@@ -1651,10 +1680,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 await_or_yield, snippet\n                             ),\n                         );\n-                        span.push_span_label(\n-                            scope_span,\n-                            format!(\"{} is later dropped here\", snippet),\n-                        );\n                         span.push_span_label(\n                             interior_span,\n                             format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n@@ -1667,28 +1692,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             ),\n                         );\n                     }\n-                } else {\n-                    span.push_span_label(\n-                        yield_span,\n-                        format!(\n-                            \"{} occurs here, with {} maybe used later\",\n-                            await_or_yield, snippet\n-                        ),\n-                    );\n-                    span.push_span_label(\n-                        interior_span,\n-                        format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                    );\n-                    err.span_note(\n-                        span,\n-                        &format!(\n-                            \"{} {} as this value is used across {}\",\n-                            future_or_generator, trait_explanation, an_await_or_yield\n-                        ),\n-                    );\n                 }\n-            }\n-        };\n+            };\n         match interior_or_upvar_span {\n             GeneratorInteriorOrUpvar::Interior(interior_span) => {\n                 if let Some((scope_span, yield_span, expr, from_awaited_ty)) = interior_extra_info {"}]}