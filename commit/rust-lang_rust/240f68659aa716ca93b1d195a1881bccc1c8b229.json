{"sha": "240f68659aa716ca93b1d195a1881bccc1c8b229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MGY2ODY1OWFhNzE2Y2E5M2IxZDE5NWExODgxYmNjYzFjOGIyMjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-27T16:39:44Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-08T15:05:41Z"}, "message": "shorten common if let patterns to function calls", "tree": {"sha": "3ba89567dc17e43c4efe9952a30a6d03375ab23c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ba89567dc17e43c4efe9952a30a6d03375ab23c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240f68659aa716ca93b1d195a1881bccc1c8b229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240f68659aa716ca93b1d195a1881bccc1c8b229", "html_url": "https://github.com/rust-lang/rust/commit/240f68659aa716ca93b1d195a1881bccc1c8b229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240f68659aa716ca93b1d195a1881bccc1c8b229/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8864f2c83ac800881da34c3e835c931c081a8785", "url": "https://api.github.com/repos/rust-lang/rust/commits/8864f2c83ac800881da34c3e835c931c081a8785", "html_url": "https://github.com/rust-lang/rust/commit/8864f2c83ac800881da34c3e835c931c081a8785"}], "stats": {"total": 63, "additions": 23, "deletions": 40}, "files": [{"sha": "466f3a54083583aad6e1a65198970ef8df7b3845", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 23, "deletions": 40, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/240f68659aa716ca93b1d195a1881bccc1c8b229/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240f68659aa716ca93b1d195a1881bccc1c8b229/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=240f68659aa716ca93b1d195a1881bccc1c8b229", "patch": "@@ -515,6 +515,21 @@ pub enum EvalHint<'tcx> {\n     UncheckedExprNoHint,\n }\n \n+impl<'tcx> EvalHint<'tcx> {\n+    fn erase_hint(&self) -> EvalHint<'tcx> {\n+        match *self {\n+            ExprTypeChecked => ExprTypeChecked,\n+            UncheckedExprHint(_) | UncheckedExprNoHint => UncheckedExprNoHint,\n+        }\n+    }\n+    fn checked_or(&self, ty: Ty<'tcx>) -> EvalHint<'tcx> {\n+        match *self {\n+            ExprTypeChecked => ExprTypeChecked,\n+            _ => UncheckedExprHint(ty),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum IntTy { I8, I16, I32, I64 }\n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -846,13 +861,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       }\n       hir::ExprBinary(op, ref a, ref b) => {\n         let b_ty = match op.node {\n-            hir::BiShl | hir::BiShr => {\n-                if let ExprTypeChecked = ty_hint {\n-                    ExprTypeChecked\n-                } else {\n-                    UncheckedExprHint(tcx.types.usize)\n-                }\n-            }\n+            hir::BiShl | hir::BiShr => ty_hint.checked_or(tcx.types.usize),\n             _ => ty_hint\n         };\n         match (try!(eval_const_expr_partial(tcx, &**a, ty_hint, fn_args)),\n@@ -1072,11 +1081,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           try!(eval_const_expr_partial(tcx, const_expr, item_hint, fn_args))\n       }\n       hir::ExprCall(ref callee, ref args) => {\n-          let sub_ty_hint = if let ExprTypeChecked = ty_hint {\n-              ExprTypeChecked\n-          } else {\n-              UncheckedExprNoHint // we cannot reason about UncheckedExprHint here\n-          };\n+          let sub_ty_hint = ty_hint.erase_hint();\n           let callee_val = try!(eval_const_expr_partial(tcx, callee, sub_ty_hint, fn_args));\n           let (decl, block, constness) = try!(get_fn_def(tcx, e, callee_val));\n           match (ty_hint, constness) {\n@@ -1109,9 +1114,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           debug!(\"const call({:?})\", call_args);\n           try!(eval_const_expr_partial(tcx, &**result, ty_hint, Some(&call_args)))\n       },\n-      hir::ExprLit(ref lit) => {\n-          lit_to_const(&**lit, ety)\n-      }\n+      hir::ExprLit(ref lit) => lit_to_const(&**lit, ety),\n       hir::ExprBlock(ref block) => {\n         match block.expr {\n             Some(ref expr) => try!(eval_const_expr_partial(tcx, &**expr, ty_hint, fn_args)),\n@@ -1124,17 +1127,9 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n         if !tcx.sess.features.borrow().const_indexing {\n             signal!(e, IndexOpFeatureGated);\n         }\n-        let arr_hint = if let ExprTypeChecked = ty_hint {\n-            ExprTypeChecked\n-        } else {\n-            UncheckedExprNoHint\n-        };\n+        let arr_hint = ty_hint.erase_hint();\n         let arr = try!(eval_const_expr_partial(tcx, arr, arr_hint, fn_args));\n-        let idx_hint = if let ExprTypeChecked = ty_hint {\n-            ExprTypeChecked\n-        } else {\n-            UncheckedExprHint(tcx.types.usize)\n-        };\n+        let idx_hint = ty_hint.checked_or(tcx.types.usize);\n         let idx = match try!(eval_const_expr_partial(tcx, idx, idx_hint, fn_args)) {\n             Int(i) if i >= 0 => i as u64,\n             Int(_) => signal!(idx, IndexNegative),\n@@ -1169,11 +1164,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       }\n       hir::ExprVec(ref v) => Array(e.id, v.len() as u64),\n       hir::ExprRepeat(_, ref n) => {\n-          let len_hint = if let ExprTypeChecked = ty_hint {\n-              ExprTypeChecked\n-          } else {\n-              UncheckedExprHint(tcx.types.usize)\n-          };\n+          let len_hint = ty_hint.checked_or(tcx.types.usize);\n           Repeat(\n               e.id,\n               match try!(eval_const_expr_partial(tcx, &**n, len_hint, fn_args)) {\n@@ -1185,11 +1176,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           )\n       },\n       hir::ExprTupField(ref base, index) => {\n-        let base_hint = if let ExprTypeChecked = ty_hint {\n-            ExprTypeChecked\n-        } else {\n-            UncheckedExprNoHint\n-        };\n+        let base_hint = ty_hint.erase_hint();\n         if let Ok(c) = eval_const_expr_partial(tcx, base, base_hint, fn_args) {\n             if let Tuple(tup_id) = c {\n                 if let hir::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n@@ -1209,12 +1196,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n       }\n       hir::ExprField(ref base, field_name) => {\n+        let base_hint = ty_hint.erase_hint();\n         // Get the base expression if it is a struct and it is constant\n-        let base_hint = if let ExprTypeChecked = ty_hint {\n-            ExprTypeChecked\n-        } else {\n-            UncheckedExprNoHint\n-        };\n         if let Ok(c) = eval_const_expr_partial(tcx, base, base_hint, fn_args) {\n             if let Struct(struct_id) = c {\n                 if let hir::ExprStruct(_, ref fields, _) = tcx.map.expect_expr(struct_id).node {"}]}