{"sha": "66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZGM0ODk4Yzc4ZDE2N2RlMjBjMmU2ZDFkZjZhZTk4NzNjOWMwOWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-24T19:33:22Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-24T19:33:22Z"}, "message": "Merge pull request #4278 from cpeterso/incoming-pure-functions\n\nMark some more core and std functions as pure", "tree": {"sha": "77f4eaea0304b69a8ead00a82cdf242bb5b3616e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f4eaea0304b69a8ead00a82cdf242bb5b3616e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "html_url": "https://github.com/rust-lang/rust/commit/66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bb2536d41e1e2f226a05bcf71b1aaab6c4289cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb2536d41e1e2f226a05bcf71b1aaab6c4289cb", "html_url": "https://github.com/rust-lang/rust/commit/2bb2536d41e1e2f226a05bcf71b1aaab6c4289cb"}, {"sha": "ffaa47736866ca89b8d23cd3f14d54efefdb6243", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaa47736866ca89b8d23cd3f14d54efefdb6243", "html_url": "https://github.com/rust-lang/rust/commit/ffaa47736866ca89b8d23cd3f14d54efefdb6243"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "236d6bce9f033515f21e9fcac7b94682ea29ba1b", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -67,17 +67,17 @@ pub pure fn DVec<A>() -> DVec<A> {\n }\n \n /// Creates a new dvec with a single element\n-pub fn from_elem<A>(e: A) -> DVec<A> {\n+pub pure fn from_elem<A>(e: A) -> DVec<A> {\n     DVec {mut data: ~[move e]}\n }\n \n /// Creates a new dvec with the contents of a vector\n-pub fn from_vec<A>(v: ~[A]) -> DVec<A> {\n+pub pure fn from_vec<A>(v: ~[A]) -> DVec<A> {\n     DVec {mut data: move v}\n }\n \n /// Consumes the vector and returns its contents\n-pub fn unwrap<A>(d: DVec<A>) -> ~[A] {\n+pub pure fn unwrap<A>(d: DVec<A>) -> ~[A] {\n     let DVec {data: v} = move d;\n     move v\n }"}, {"sha": "d7d68582aefd0599afcb322fa7ed5a9d63da5cbb", "filename": "src/libcore/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -188,7 +188,7 @@ pub pure fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n  * * num - The float value\n  * * digits - The number of significant digits\n  */\n-pub fn to_str_exact(num: float, digits: uint) -> ~str {\n+pub pure fn to_str_exact(num: float, digits: uint) -> ~str {\n     to_str_common(num, digits, true)\n }\n \n@@ -238,7 +238,7 @@ pub pure fn to_str(num: float, digits: uint) -> ~str {\n  * `none` if the string did not represent a valid number.  Otherwise,\n  * `Some(n)` where `n` is the floating-point number represented by `[num]`.\n  */\n-pub fn from_str(num: &str) -> Option<float> {\n+pub pure fn from_str(num: &str) -> Option<float> {\n    if num == \"inf\" {\n        return Some(infinity as float);\n    } else if num == \"-inf\" {"}, {"sha": "61a7c3bd07ab33547a2980d16cbd181c2996abd6", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -17,12 +17,12 @@ mod inst {\n     pub const bits: uint = uint::bits;\n \n     /// Returns `base` raised to the power of `exponent`\n-    pub fn pow(base: int, exponent: uint) -> int {\n+    pub pure fn pow(base: int, exponent: uint) -> int {\n         if exponent == 0u {\n             //Not mathemtically true if ~[base == 0]\n             return 1;\n         }\n-        if base     == 0  { return 0; }\n+        if base == 0 { return 0; }\n         let mut my_pow  = exponent;\n         let mut acc     = 1;\n         let mut multiplier = base;"}, {"sha": "c838af700f65e5c319cb9d6c2644e531a7075ac7", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -170,13 +170,13 @@ pub pure fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n   (I couldn't think of a cutesy name for this one.)\n */\n #[inline(always)]\n-pub fn to_uint<T>(thing: &T) -> uint unsafe {\n+pub pure fn to_uint<T>(thing: &T) -> uint unsafe {\n     cast::reinterpret_cast(&thing)\n }\n \n /// Determine if two borrowed pointers point to the same thing.\n #[inline(always)]\n-pub fn ref_eq<T>(thing: &a/T, other: &b/T) -> bool {\n+pub pure fn ref_eq<T>(thing: &a/T, other: &b/T) -> bool {\n     to_uint(thing) == to_uint(other)\n }\n "}, {"sha": "8ee857ef927d19634a4e0e5cc35c3150f55d8c16", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -309,12 +309,12 @@ impl XorShiftState: Rng {\n     }\n }\n \n-pub fn xorshift() -> Rng {\n+pub pure fn xorshift() -> Rng {\n     // constants taken from http://en.wikipedia.org/wiki/Xorshift\n     seeded_xorshift(123456789u32, 362436069u32, 521288629u32, 88675123u32)\n }\n \n-pub fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> Rng {\n+pub pure fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> Rng {\n     {mut x: x, mut y: y, mut z: z, mut w: w} as Rng\n }\n "}, {"sha": "e68966945caad0b7acf435b91b1118febb3f8917", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -214,7 +214,7 @@ pub pure fn connect(v: &[~str], sep: &str) -> ~str {\n }\n \n /// Given a string, make a new string with repeated copies of it\n-pub fn repeat(ss: &str, nn: uint) -> ~str {\n+pub pure fn repeat(ss: &str, nn: uint) -> ~str {\n     let mut acc = ~\"\";\n     for nn.times { acc += ss; }\n     acc\n@@ -1684,9 +1684,7 @@ pub struct CharRange {\n  *\n  * This function can be used to iterate over a unicode string in reverse.\n  */\n-pure fn char_range_at_reverse(ss: &str, start: uint)\n-    -> CharRange {\n-\n+pure fn char_range_at_reverse(ss: &str, start: uint) -> CharRange {\n     let mut prev = start;\n \n     // while there is a previous byte == 10......"}, {"sha": "b2ae1aa921b7254a16d1e838223acb0371dcc447", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -104,7 +104,7 @@ mod inst {\n \n     /// Returns the smallest power of 2 greater than or equal to `n`\n     #[inline(always)]\n-    pub fn next_power_of_two(n: uint) -> uint {\n+    pub pure fn next_power_of_two(n: uint) -> uint {\n         let halfbits: uint = sys::size_of::<uint>() * 4u;\n         let mut tmp: uint = n - 1u;\n         let mut shift: uint = 1u;"}, {"sha": "9054f9355ad87950414baed577a4b81a6b1be532", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -95,7 +95,7 @@ pub fn Arena() -> Arena {\n }\n \n #[inline(always)]\n-fn round_up_to(base: uint, align: uint) -> uint {\n+pure fn round_up_to(base: uint, align: uint) -> uint {\n     (base + (align - 1)) & !(align - 1)\n }\n "}, {"sha": "cc8cadb709d940400e55dd9a42f9d0eca3c0471b", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -135,7 +135,7 @@ pub fn set<T: Copy>(t: CVec<T>, ofs: uint, v: T) {\n  */\n \n /// Returns the length of the vector\n-pub fn len<T>(t: CVec<T>) -> uint {\n+pub pure fn len<T>(t: CVec<T>) -> uint {\n     return (*t).len;\n }\n "}, {"sha": "e41aab8ec1ffb5d4a5e5e920b9cf255a6dc1a6e8", "filename": "src/libstd/list.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -22,8 +22,8 @@ pub enum List<T> {\n     Nil,\n }\n \n-/// Cregate a list from a vector\n-pub fn from_vec<T: Copy>(v: &[T]) -> @List<T> {\n+/// Create a list from a vector\n+pub pure fn from_vec<T: Copy>(v: &[T]) -> @List<T> {\n     vec::foldr(v, @Nil::<T>, |h, t| @Cons(*h, t))\n }\n \n@@ -53,7 +53,7 @@ pub fn foldl<T: Copy, U>(z: T, ls: @List<U>, f: fn(&T, &U) -> T) -> T {\n  * When function `f` returns true then an option containing the element\n  * is returned. If `f` matches no elements then none is returned.\n  */\n-pub fn find<T: Copy>(ls: @List<T>, f: fn(&T) -> bool) -> Option<T> {\n+pub pure fn find<T: Copy>(ls: @List<T>, f: fn(&T) -> bool) -> Option<T> {\n     let mut ls = ls;\n     loop {\n         ls = match *ls {\n@@ -88,7 +88,7 @@ pub pure fn is_not_empty<T: Copy>(ls: @List<T>) -> bool {\n }\n \n /// Returns the length of a list\n-pub fn len<T>(ls: @List<T>) -> uint {\n+pub pure fn len<T>(ls: @List<T>) -> uint {\n     let mut count = 0u;\n     iter(ls, |_e| count += 1u);\n     count\n@@ -131,7 +131,7 @@ pure fn push<T: Copy>(ll: &mut @list<T>, vv: T) {\n */\n \n /// Iterate over a list\n-pub fn iter<T>(l: @List<T>, f: fn(&T)) {\n+pub pure fn iter<T>(l: @List<T>, f: fn(&T)) {\n     let mut cur = l;\n     loop {\n         cur = match *cur {\n@@ -145,7 +145,7 @@ pub fn iter<T>(l: @List<T>, f: fn(&T)) {\n }\n \n /// Iterate over a list\n-pub fn each<T>(l: @List<T>, f: fn(&T) -> bool) {\n+pub pure fn each<T>(l: @List<T>, f: fn(&T) -> bool) {\n     let mut cur = l;\n     loop {\n         cur = match *cur {"}, {"sha": "aa78d22e4c8ddaaf816c5605143edd35391a404a", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66dc4898c78d167de20c2e6d1df6ae9873c9c09d/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=66dc4898c78d167de20c2e6d1df6ae9873c9c09d", "patch": "@@ -43,7 +43,7 @@ pub type Rope = node::Root;\n  */\n \n /// Create an empty rope\n-pub fn empty() -> Rope {\n+pub pure fn empty() -> Rope {\n    return node::Empty;\n }\n \n@@ -479,7 +479,7 @@ pub mod iterator {\n  *\n  * Constant time.\n  */\n-pub fn height(rope: Rope) -> uint {\n+pub pure fn height(rope: Rope) -> uint {\n    match (rope) {\n       node::Empty      => return 0u,\n       node::Content(x) => return node::height(x)\n@@ -1019,7 +1019,7 @@ mod node {\n                     })\n     }\n \n-    pub fn height(node: @Node) -> uint {\n+    pub pure fn height(node: @Node) -> uint {\n         match (*node) {\n           Leaf(_)   => return 0u,\n           Concat(ref x) => return x.height\n@@ -1100,7 +1100,7 @@ mod node {\n      * proportional to the height of the rope + the (bounded)\n      * length of the largest leaf.\n      */\n-    pub fn char_at(node: @Node, pos: uint) -> char {\n+    pub pure fn char_at(node: @Node, pos: uint) -> char {\n         let mut node    = node;\n         let mut pos     = pos;\n         loop {"}]}