{"sha": "d49a9dbc7ff342804112906760d87604f14f22c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OWE5ZGJjN2ZmMzQyODA0MTEyOTA2NzYwZDg3NjA0ZjE0ZjIyYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T05:52:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T05:52:22Z"}, "message": "auto merge of #6646 : dotdash/rust/method_lookup, r=brson", "tree": {"sha": "93ed266617d47e6d0ac495019d3983aff1ac79b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ed266617d47e6d0ac495019d3983aff1ac79b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49a9dbc7ff342804112906760d87604f14f22c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49a9dbc7ff342804112906760d87604f14f22c5", "html_url": "https://github.com/rust-lang/rust/commit/d49a9dbc7ff342804112906760d87604f14f22c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49a9dbc7ff342804112906760d87604f14f22c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7abcc142e5da1b87c59a1510fa87aefc4122bd6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7abcc142e5da1b87c59a1510fa87aefc4122bd6d", "html_url": "https://github.com/rust-lang/rust/commit/7abcc142e5da1b87c59a1510fa87aefc4122bd6d"}, {"sha": "19dc72809daa0f53120f88b155459f877e854945", "url": "https://api.github.com/repos/rust-lang/rust/commits/19dc72809daa0f53120f88b155459f877e854945", "html_url": "https://github.com/rust-lang/rust/commit/19dc72809daa0f53120f88b155459f877e854945"}], "stats": {"total": 191, "additions": 100, "deletions": 91}, "files": [{"sha": "e6ccb7a1d6b23c80d240453f4e2872062918eb75", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d49a9dbc7ff342804112906760d87604f14f22c5/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a9dbc7ff342804112906760d87604f14f22c5/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=d49a9dbc7ff342804112906760d87604f14f22c5", "patch": "@@ -303,9 +303,9 @@ impl<K:Hash + Eq,V> Map<K, V> for HashMap<K, V> {\n \n     /// Visit all key-value pairs\n     fn each<'a>(&'a self, blk: &fn(&K, &'a V) -> bool) -> bool {\n-        for uint::range(0, self.buckets.len()) |i| {\n-            for self.buckets[i].each |bucket| {\n-                if !blk(&bucket.key, &bucket.value) {\n+        for self.buckets.each |bucket| {\n+            for bucket.each |pair| {\n+                if !blk(&pair.key, &pair.value) {\n                     return false;\n                 }\n             }"}, {"sha": "db1f51c19ea676b980a0f8474760b62e590486f0", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 97, "deletions": 88, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/d49a9dbc7ff342804112906760d87604f14f22c5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49a9dbc7ff342804112906760d87604f14f22c5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d49a9dbc7ff342804112906760d87604f14f22c5", "patch": "@@ -734,7 +734,7 @@ pub fn Resolver(session: Session,\n \n         graph_root: graph_root,\n \n-        trait_info: HashMap::new(),\n+        method_map: @mut HashMap::new(),\n         structs: HashSet::new(),\n \n         unresolved_imports: 0,\n@@ -776,7 +776,7 @@ pub struct Resolver {\n \n     graph_root: @mut NameBindings,\n \n-    trait_info: HashMap<def_id, HashSet<ident>>,\n+    method_map: @mut HashMap<ident, HashSet<def_id>>,\n     structs: HashSet<def_id>,\n \n     // The number of imports that are currently unresolved.\n@@ -1292,7 +1292,15 @@ pub impl Resolver {\n                 }\n \n                 let def_id = local_def(item.id);\n-                self.trait_info.insert(def_id, method_names);\n+                for method_names.each |name| {\n+                    if !self.method_map.contains_key(name) {\n+                        self.method_map.insert(*name, HashSet::new());\n+                    }\n+                    match self.method_map.find_mut(name) {\n+                        Some(s) => { s.insert(def_id); },\n+                        _ => fail!(\"Can't happen\"),\n+                    }\n+                }\n \n                 name_bindings.define_type(privacy, def_trait(def_id), sp);\n                 visit_item(item, new_parent, visitor);\n@@ -1589,7 +1597,15 @@ pub impl Resolver {\n                       interned_method_names.insert(method_name);\n                   }\n               }\n-              self.trait_info.insert(def_id, interned_method_names);\n+              for interned_method_names.each |name| {\n+                  if !self.method_map.contains_key(name) {\n+                      self.method_map.insert(*name, HashSet::new());\n+                  }\n+                  match self.method_map.find_mut(name) {\n+                      Some(s) => { s.insert(def_id); },\n+                      _ => fail!(\"Can't happen\"),\n+                  }\n+              }\n \n               child_name_bindings.define_type(Public, def, dummy_sp());\n           }\n@@ -4935,118 +4951,111 @@ pub impl Resolver {\n         debug!(\"(searching for traits containing method) looking for '%s'\",\n                *self.session.str_of(name));\n \n+\n         let mut found_traits = ~[];\n         let mut search_module = self.current_module;\n-        loop {\n-            // Look for the current trait.\n-            match /*bad*/copy self.current_trait_refs {\n-                Some(trait_def_ids) => {\n-                    for trait_def_ids.each |trait_def_id| {\n-                        self.add_trait_info_if_containing_method(\n-                            &mut found_traits, *trait_def_id, name);\n-                    }\n-                }\n-                None => {\n-                    // Nothing to do.\n-                }\n-            }\n-\n-            // Look for trait children.\n-            for search_module.children.each_value |&child_name_bindings| {\n-                match child_name_bindings.def_for_namespace(TypeNS) {\n-                    Some(def) => {\n-                        match def {\n-                            def_trait(trait_def_id) => {\n-                                self.add_trait_info_if_containing_method(\n-                                    &mut found_traits, trait_def_id, name);\n-                            }\n-                            _ => {\n-                                // Continue.\n+        match self.method_map.find(&name) {\n+            Some(candidate_traits) => loop {\n+                // Look for the current trait.\n+                match /*bad*/copy self.current_trait_refs {\n+                    Some(trait_def_ids) => {\n+                        for trait_def_ids.each |trait_def_id| {\n+                            if candidate_traits.contains(trait_def_id) {\n+                                self.add_trait_info(\n+                                    &mut found_traits,\n+                                    *trait_def_id, name);\n                             }\n                         }\n                     }\n                     None => {\n-                        // Continue.\n+                        // Nothing to do.\n                     }\n                 }\n-            }\n \n-            // Look for imports.\n-            for search_module.import_resolutions.each_value\n-                    |&import_resolution| {\n-\n-                match import_resolution.target_for_namespace(TypeNS) {\n-                    None => {\n-                        // Continue.\n-                    }\n-                    Some(target) => {\n-                        match target.bindings.def_for_namespace(TypeNS) {\n-                            Some(def) => {\n-                                match def {\n-                                    def_trait(trait_def_id) => {\n-                                        let added = self.\n-                                        add_trait_info_if_containing_method(\n+                // Look for trait children.\n+                for search_module.children.each_value |&child_name_bindings| {\n+                    match child_name_bindings.def_for_namespace(TypeNS) {\n+                        Some(def) => {\n+                            match def {\n+                                def_trait(trait_def_id) => {\n+                                    if candidate_traits.contains(&trait_def_id) {\n+                                        self.add_trait_info(\n                                             &mut found_traits,\n                                             trait_def_id, name);\n-                                        if added {\n-                                            self.used_imports.insert(\n-                                                import_resolution.id);\n-                                        }\n-                                    }\n-                                    _ => {\n-                                        // Continue.\n                                     }\n                                 }\n-                            }\n-                            None => {\n-                                // Continue.\n+                                _ => {\n+                                    // Continue.\n+                                }\n                             }\n                         }\n+                        None => {\n+                            // Continue.\n+                        }\n                     }\n                 }\n-            }\n \n-            // Move to the next parent.\n-            match search_module.parent_link {\n-                NoParentLink => {\n-                    // Done.\n-                    break;\n+                // Look for imports.\n+                for search_module.import_resolutions.each_value\n+                        |&import_resolution| {\n+\n+                    match import_resolution.target_for_namespace(TypeNS) {\n+                        None => {\n+                            // Continue.\n+                        }\n+                        Some(target) => {\n+                            match target.bindings.def_for_namespace(TypeNS) {\n+                                Some(def) => {\n+                                    match def {\n+                                        def_trait(trait_def_id) => {\n+                                            if candidate_traits.contains(&trait_def_id) {\n+                                                self.add_trait_info(\n+                                                    &mut found_traits,\n+                                                    trait_def_id, name);\n+                                                self.used_imports.insert(\n+                                                    import_resolution.id);\n+                                            }\n+                                        }\n+                                        _ => {\n+                                            // Continue.\n+                                        }\n+                                    }\n+                                }\n+                                None => {\n+                                    // Continue.\n+                                }\n+                            }\n+                        }\n+                    }\n                 }\n-                ModuleParentLink(parent_module, _) |\n-                BlockParentLink(parent_module, _) => {\n-                    search_module = parent_module;\n+\n+                // Move to the next parent.\n+                match search_module.parent_link {\n+                    NoParentLink => {\n+                        // Done.\n+                        break;\n+                    }\n+                    ModuleParentLink(parent_module, _) |\n+                    BlockParentLink(parent_module, _) => {\n+                        search_module = parent_module;\n+                    }\n                 }\n-            }\n+            },\n+            _ => ()\n         }\n \n         return found_traits;\n     }\n \n-    fn add_trait_info_if_containing_method(&self,\n-                                           found_traits: &mut ~[def_id],\n-                                           trait_def_id: def_id,\n-                                           name: ident)\n-                                        -> bool {\n-        debug!(\"(adding trait info if containing method) trying trait %d:%d \\\n-                for method '%s'\",\n+    fn add_trait_info(&self,\n+                      found_traits: &mut ~[def_id],\n+                      trait_def_id: def_id,\n+                      name: ident) {\n+        debug!(\"(adding trait info) found trait %d:%d for method '%s'\",\n                trait_def_id.crate,\n                trait_def_id.node,\n                *self.session.str_of(name));\n-\n-        match self.trait_info.find(&trait_def_id) {\n-            Some(trait_info) if trait_info.contains(&name) => {\n-                debug!(\"(adding trait info if containing method) found trait \\\n-                        %d:%d for method '%s'\",\n-                       trait_def_id.crate,\n-                       trait_def_id.node,\n-                       *self.session.str_of(name));\n-                found_traits.push(trait_def_id);\n-                true\n-            }\n-            Some(_) | None => {\n-                false\n-            }\n-        }\n+        found_traits.push(trait_def_id);\n     }\n \n     fn add_fixed_trait_for_expr(@mut self,"}]}