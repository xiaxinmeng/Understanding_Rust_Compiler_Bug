{"sha": "9ed4674269f3d1ecedfd173e279087d256d66e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZDQ2NzQyNjlmM2QxZWNlZGZkMTczZTI3OTA4N2QyNTZkNjZlNzc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-09T19:54:28Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-10T15:58:47Z"}, "message": "typeck: Fix const generic in repeat param ICE.\n\nThis commit fixes an ICE that occured when a const generic was used in\na repeat expression. This was due to the code expecting the length of\nthe repeat expression to be const evaluatable to a constant, but a const\ngeneric parameter is not (however, it can be made into a constant).", "tree": {"sha": "984954ea572cafd3819077dfc1c08fd1b6e56357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/984954ea572cafd3819077dfc1c08fd1b6e56357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed4674269f3d1ecedfd173e279087d256d66e77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAlz+fjcACgkQJZLnbIc4\nH9neqQ//Z0XQ57CN4JNi/D3cwEYZh+7tZeTodwifQxkd6A6xUVNsfYBH3nsu5Jhd\n0ebYLC/0BU2APj8bV23Pxt+uMoFzAcP0IbWLqr9tlDmNDnfJKy+8zTFmaN4LiiKd\ns8Ep817vkkyCeFcx3owaZpIIcmWSQxKED8W5qURkL5TfXATjYzWgtIEkecmNrvOC\nm6mrbeahhgQeAYnlHlfq6sZCsX2TyAzzQUAr62wvy4JEtNzBipD6hnNye5LMMXKr\nkmh6af2R9TbZ4zCSJjHvdjOaoHN4vPUFusicAk0AYWuqbKQ46v/BALB/cwxMo7+7\n9eoh3CWSlGIosxxacg7ZThlVoruesVJQvU2G0fcMbWDelcKhxKbaq3nvoLNJdClw\nIDdgA9tB8ys3IMBMXVjAg/Zkt7llQTc9h1Q7Ilc4jn2hzY1Qp2vjx3YDZDuvcv8x\nkttaVpGUWGM41HW0h7SBbvsF/L7HwuVhYjxlV3wDl1i3dwthJmwX5gm3lL03IHp5\nCMtBtlz7qnJbRn6mqXXJi8ZUNLkUfxjDN1gbF+mLEryXS6okD17CoBI/HULZWqWS\nZpWzN9Hcq0cE3vo6pYPZrnj+JyANCvCKgYHyIMTdUueX4vtpfNLXuCA51LSJR6CU\nlSNwnXOf4MD6mOJVl6ICtBofoE0i3EVhdJGJQ6HK7eEMwkFhoc8=\n=LLAg\n-----END PGP SIGNATURE-----", "payload": "tree 984954ea572cafd3819077dfc1c08fd1b6e56357\nparent d132f544f9d74e3cc047ef211e57eae60b78e5c5\nauthor David Wood <david@davidtw.co> 1560110068 +0100\ncommitter David Wood <david@davidtw.co> 1560182327 +0100\n\ntypeck: Fix const generic in repeat param ICE.\n\nThis commit fixes an ICE that occured when a const generic was used in\na repeat expression. This was due to the code expecting the length of\nthe repeat expression to be const evaluatable to a constant, but a const\ngeneric parameter is not (however, it can be made into a constant).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed4674269f3d1ecedfd173e279087d256d66e77", "html_url": "https://github.com/rust-lang/rust/commit/9ed4674269f3d1ecedfd173e279087d256d66e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed4674269f3d1ecedfd173e279087d256d66e77/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d132f544f9d74e3cc047ef211e57eae60b78e5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d132f544f9d74e3cc047ef211e57eae60b78e5c5", "html_url": "https://github.com/rust-lang/rust/commit/d132f544f9d74e3cc047ef211e57eae60b78e5c5"}], "stats": {"total": 129, "additions": 104, "deletions": 25}, "files": [{"sha": "253866a688ac2981d59e7691ab9e46b8c1c4f332", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9ed4674269f3d1ecedfd173e279087d256d66e77", "patch": "@@ -2144,6 +2144,17 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         result_ty\n     }\n \n+    /// Returns the `DefId` of the constant parameter that the provided expression is a path to.\n+    pub fn const_param_def_id(&self, expr: &hir::Expr) -> Option<DefId> {\n+        match &expr.node {\n+            ExprKind::Path(hir::QPath::Resolved(_, path)) => match path.res {\n+                Res::Def(DefKind::ConstParam, did) => Some(did),\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     pub fn ast_const_to_const(\n         &self,\n         ast_const: &hir::AnonConst,\n@@ -2174,19 +2185,17 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             }\n         }\n \n-        if let ExprKind::Path(ref qpath) = expr.node {\n-            if let hir::QPath::Resolved(_, ref path) = qpath {\n-                if let Res::Def(DefKind::ConstParam, def_id) = path.res {\n-                    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-                    let item_id = tcx.hir().get_parent_node(node_id);\n-                    let item_def_id = tcx.hir().local_def_id(item_id);\n-                    let generics = tcx.generics_of(item_def_id);\n-                    let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(node_id)];\n-                    let name = tcx.hir().name(node_id).as_interned_str();\n-                    const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n-                }\n-            }\n-        };\n+        if let Some(def_id) = self.const_param_def_id(expr) {\n+            // Find the name and index of the const parameter by indexing the generics of the\n+            // parent item and construct a `ParamConst`.\n+            let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n+            let item_id = tcx.hir().get_parent_node(node_id);\n+            let item_def_id = tcx.hir().local_def_id(item_id);\n+            let generics = tcx.generics_of(item_def_id);\n+            let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(node_id)];\n+            let name = tcx.hir().name(node_id).as_interned_str();\n+            const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n+        }\n \n         tcx.mk_const(const_)\n     }"}, {"sha": "3e480b882d6452501b1156b373faaa8286359507", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9ed4674269f3d1ecedfd173e279087d256d66e77", "patch": "@@ -2439,6 +2439,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n+    /// Returns the `DefId` of the constant parameter that the provided expression is a path to.\n+    pub fn const_param_def_id(&self, hir_c: &hir::AnonConst) -> Option<DefId> {\n+        AstConv::const_param_def_id(self, &self.tcx.hir().body(hir_c.body).value)\n+    }\n+\n     pub fn to_const(&self, ast_c: &hir::AnonConst, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n         AstConv::ast_const_to_const(self, ast_c, ty)\n     }\n@@ -4414,19 +4419,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Repeat(ref element, ref count) => {\n                 let count_def_id = tcx.hir().local_def_id_from_hir_id(count.hir_id);\n-                let param_env = ty::ParamEnv::empty();\n-                let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), count_def_id);\n-                let instance = ty::Instance::resolve(\n-                    tcx.global_tcx(),\n-                    param_env,\n-                    count_def_id,\n-                    substs,\n-                ).unwrap();\n-                let global_id = GlobalId {\n-                    instance,\n-                    promoted: None\n+                let count = if self.const_param_def_id(count).is_some() {\n+                    Ok(self.to_const(count, self.tcx.type_of(count_def_id)))\n+                } else {\n+                    let param_env = ty::ParamEnv::empty();\n+                    let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), count_def_id);\n+                    let instance = ty::Instance::resolve(\n+                        tcx.global_tcx(),\n+                        param_env,\n+                        count_def_id,\n+                        substs,\n+                    ).unwrap();\n+                    let global_id = GlobalId {\n+                        instance,\n+                        promoted: None\n+                    };\n+\n+                    tcx.const_eval(param_env.and(global_id))\n                 };\n-                let count = tcx.const_eval(param_env.and(global_id));\n \n                 let uty = match expected {\n                     ExpectHasType(uty) => {"}, {"sha": "5b5e431bf2ff6d6824e010b8469010d88f753cad", "filename": "src/test/ui/const-generics/issue-61336-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.rs?ref=9ed4674269f3d1ecedfd173e279087d256d66e77", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n+    [x; N]\n+    //~^ ERROR array lengths can't depend on generic parameters\n+}\n+\n+fn main() {\n+    let x: [u32; 5] = f::<u32, 5>(3);\n+    assert_eq!(x, [3u32; 5]);\n+}"}, {"sha": "1a5bb9f763bcf73a4ab4a709254ecb02ab220217", "filename": "src/test/ui/const-generics/issue-61336-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr?ref=9ed4674269f3d1ecedfd173e279087d256d66e77", "patch": "@@ -0,0 +1,14 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336-1.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error: array lengths can't depend on generic parameters\n+  --> $DIR/issue-61336-1.rs:5:9\n+   |\n+LL |     [x; N]\n+   |         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "95930371d59744af11fc93105be874800ac1acc4", "filename": "src/test/ui/const-generics/issue-61336.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.rs?ref=9ed4674269f3d1ecedfd173e279087d256d66e77", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n+    [x; N]\n+}\n+\n+fn g<T, const N: usize>(x: T) -> [T; N] {\n+    [x; N]\n+    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n+}\n+\n+fn main() {\n+    let x: [u32; 5] = f::<u32, 5>(3);\n+    assert_eq!(x, [3u32; 5]);\n+}"}, {"sha": "9939a5998340f5efcb74a89590dae72b49f9df2c", "filename": "src/test/ui/const-generics/issue-61336.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ed4674269f3d1ecedfd173e279087d256d66e77/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr?ref=9ed4674269f3d1ecedfd173e279087d256d66e77", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-61336.rs:9:5\n+   |\n+LL |     [x; N]\n+   |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}