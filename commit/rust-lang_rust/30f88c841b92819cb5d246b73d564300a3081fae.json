{"sha": "30f88c841b92819cb5d246b73d564300a3081fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjg4Yzg0MWI5MjgxOWNiNWQyNDZiNzNkNTY0MzAwYTMwODFmYWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-05-09T15:53:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-05-09T15:54:53Z"}, "message": "Use of @pnkfelix code and fix typos", "tree": {"sha": "cf15b96740891d2bc1f702c72e4459d82260a828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf15b96740891d2bc1f702c72e4459d82260a828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f88c841b92819cb5d246b73d564300a3081fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f88c841b92819cb5d246b73d564300a3081fae", "html_url": "https://github.com/rust-lang/rust/commit/30f88c841b92819cb5d246b73d564300a3081fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f88c841b92819cb5d246b73d564300a3081fae/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7132092ce6e954eb58d490fa886d0865c5cfba38", "url": "https://api.github.com/repos/rust-lang/rust/commits/7132092ce6e954eb58d490fa886d0865c5cfba38", "html_url": "https://github.com/rust-lang/rust/commit/7132092ce6e954eb58d490fa886d0865c5cfba38"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "ad37cc254d1bc5c442560f793078d96699055e1a", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 136, "deletions": 1, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/30f88c841b92819cb5d246b73d564300a3081fae/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f88c841b92819cb5d246b73d564300a3081fae/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=30f88c841b92819cb5d246b73d564300a3081fae", "patch": "@@ -419,6 +419,142 @@ of a loop. Without a loop to break out of or continue in, no sensible action can\n be taken.\n \"##,\n \n+E0271: r##\"\n+This is because of a type mismatch between the associated type of some\n+trait (e.g. T::Bar, where T implements trait Quux { type Bar; })\n+and another type U that is required to be equal to T::Bar, but is not.\n+Examples follow.\n+\n+Here is a basic example:\n+\n+```\n+trait Trait { type AssociatedType; }\n+fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n+    println!(\"in foo\");\n+}\n+impl Trait for i8 { type AssociatedType = &'static str; }\n+foo(3_i8);\n+```\n+\n+Here is that same example again, with some explanatory comments:\n+\n+```\n+trait Trait { type AssociatedType; }\n+\n+fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n+//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n+//                        |            |\n+//         This says `foo` can         |\n+//           only be used with         |\n+//              some type that         |\n+//         implements `Trait`.         |\n+//                                     |\n+//                             This says not only must\n+//                             `T` be an impl of `Trait`\n+//                             but also that the impl\n+//                             must assign the type `u32`\n+//                             to the associated type.\n+    println!(\"in foo\");\n+}\n+\n+impl Trait for i8 { type AssociatedType = &'static str; }\n+~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+//      |                             |\n+// `i8` does have                     |\n+// implementation                     |\n+// of `Trait`...                      |\n+//                     ... but it is an implementation\n+//                     that assigns `&'static str` to\n+//                     the associated type.\n+\n+foo(3_i8);\n+// Here, we invoke `foo` with an `i8`, which does not satisfy\n+// the constraint `<i8 as Trait>::AssociatedType=32`, and\n+// therefore the type-checker complains with this error code.\n+```\n+\n+Here is a more subtle instance of the same problem, that can\n+arise with for-loops in Rust:\n+\n+```\n+let vs: Vec<i32> = vec![1, 2, 3, 4];\n+for v in &vs {\n+    match v {\n+        1 => {}\n+        _ => {}\n+    }\n+}\n+```\n+\n+The above fails because of an analogous type mismatch,\n+though may be harder to see. Again, here are some\n+explanatory comments for the same example:\n+\n+```\n+{\n+    let vs = vec![1, 2, 3, 4];\n+\n+    // `for`-loops use a protocol based on the `Iterator`\n+    // trait. Each item yielded in a `for` loop has the\n+    // type `Iterator::Item` -- that is,I `Item` is the\n+    // associated type of the concrete iterator impl.\n+    for v in &vs {\n+//      ~    ~~~\n+//      |     |\n+//      |    We borrow `vs`, iterating over a sequence of\n+//      |    *references* of type `&Elem` (where `Elem` is\n+//      |    vector's element type). Thus, the associated\n+//      |    type `Item` must be a reference `&`-type ...\n+//      |\n+//  ... and `v` has the type `Iterator::Item`, as dictated by\n+//  the `for`-loop protocol ...\n+\n+        match v {\n+            1 => {}\n+//          ~\n+//          |\n+// ... but *here*, `v` is forced to have some integral type;\n+// only types like `u8`,`i8`,`u16`,`i16`, et cetera can\n+// match the pattern `1` ...\n+\n+            _ => {}\n+        }\n+\n+// ... therefore, the compiler complains, because it sees\n+// an attempt to solve the equations\n+// `some integral-type` = type-of-`v`\n+//                      = `Iterator::Item`\n+//                      = `&Elem` (i.e. `some reference type`)\n+//\n+// which cannot possibly all be true.\n+\n+    }\n+}\n+```\n+\n+To avoid those issues, you have to make the types match correctly.\n+So we can fix the previous examples like this:\n+\n+```\n+// Basic Example:\n+trait Trait { type AssociatedType; }\n+fn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n+    println!(\"in foo\");\n+}\n+impl Trait for i8 { type AssociatedType = &'static str; }\n+foo(3_i8);\n+\n+// For-Loop Example:\n+let vs = vec![1, 2, 3, 4];\n+for v in &vs {\n+    match v {\n+        &1 => {}\n+        _ => {}\n+    }\n+}\n+```\n+\"##,\n+\n E0282: r##\"\n This error indicates that type inference did not result in one unique possible\n type, and extra information is required. In most cases this can be provided\n@@ -674,7 +810,6 @@ register_diagnostics! {\n     E0266, // expected item\n     E0269, // not all control paths return a value\n     E0270, // computation may converge in a function marked as diverging\n-    E0271, // type mismatch resolving\n     E0272, // rustc_on_unimplemented attribute refers to non-existent type parameter\n     E0273, // rustc_on_unimplemented must have named format arguments\n     E0274, // rustc_on_unimplemented must have a value"}]}