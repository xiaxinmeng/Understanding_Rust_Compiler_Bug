{"sha": "e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwODIyZWNkYmM0M2E2MTI4MTM2NjYxYmI3M2ZiNmYzYzNkYjJiNGE=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-06-27T20:44:42Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-08-30T16:02:18Z"}, "message": "rustdoc: do not use plain summary for trait impls\n\nFixes #38386.\nFixes #48332.\nFixes #49430.\nFixes #62741.\nFixes #73474.", "tree": {"sha": "b5ae198d329bf406efc08260053b081b0324b8a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ae198d329bf406efc08260053b081b0324b8a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl9LzYoWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdLu/CACE5t7i1s3jV3XfKlHP2lpt+q+0\nFV4SDuIanI4Cza3Cy5Cx8tmISs5goy4pOAdJmi056dnDj057uDS1haDvoob46TO8\nRWJZYP8GDn5xG5Us9EkEtiGbUPI/2G+o+zkU+B3Ro4lXH/1t14Qenx8gPIoXne5H\n9z/a51LLPURgIxALg7aRkw2g0bRBQlbSh8F3WKbKOEeh/jwjoeGAXsGjJ5IDU+tE\n8OgitAYFL7ZrEM/yV/3xZeH1J6q1T8G3Wera/c6oL8VXP5sAmFBGhxReu1ShdMQP\nN+P1Z2KBZ+HPEb01hqjqYUjNoh8Rp7ItZmgONa6xjz1VYEX90GlXVLaCsXwv\n=I5xh\n-----END PGP SIGNATURE-----", "payload": "tree b5ae198d329bf406efc08260053b081b0324b8a1\nparent db534b3ac286cf45688c3bbae6aa6e77439e52d2\nauthor Andy Russell <arussell123@gmail.com> 1593290682 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1598803338 -0400\n\nrustdoc: do not use plain summary for trait impls\n\nFixes #38386.\nFixes #48332.\nFixes #49430.\nFixes #62741.\nFixes #73474.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "html_url": "https://github.com/rust-lang/rust/commit/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db534b3ac286cf45688c3bbae6aa6e77439e52d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/db534b3ac286cf45688c3bbae6aa6e77439e52d2", "html_url": "https://github.com/rust-lang/rust/commit/db534b3ac286cf45688c3bbae6aa6e77439e52d2"}], "stats": {"total": 212, "additions": 142, "deletions": 70}, "files": [{"sha": "b99321e8484c97ca224fa036d25efdedc277d60a", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "patch": "@@ -16,7 +16,7 @@ use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n use crate::html::render::cache::{extern_location, get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n-use crate::html::render::{plain_summary_line, shorten};\n+use crate::html::render::{plain_text_summary, shorten};\n \n thread_local!(crate static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n \n@@ -313,7 +313,7 @@ impl DocFolder for Cache {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: shorten(plain_summary_line(item.doc_value())),\n+                            desc: shorten(plain_text_summary(item.doc_value())),\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),"}, {"sha": "894d868dcc63e5894a09f724bafe52db773ded4c", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "patch": "@@ -955,44 +955,33 @@ impl MarkdownSummaryLine<'_> {\n     }\n }\n \n-pub fn plain_summary_line(md: &str) -> String {\n-    struct ParserWrapper<'a> {\n-        inner: Parser<'a>,\n-        is_in: isize,\n-        is_first: bool,\n+/// Renders the first paragraph of the provided markdown as plain text.\n+///\n+/// - Headings, links, and formatting are stripped.\n+/// - Inline code is rendered as-is, surrounded by backticks.\n+/// - HTML and code blocks are ignored.\n+pub fn plain_text_summary(md: &str) -> String {\n+    if md.is_empty() {\n+        return String::new();\n     }\n \n-    impl<'a> Iterator for ParserWrapper<'a> {\n-        type Item = String;\n-\n-        fn next(&mut self) -> Option<String> {\n-            let next_event = self.inner.next()?;\n-            let (ret, is_in) = match next_event {\n-                Event::Start(Tag::Paragraph) => (None, 1),\n-                Event::Start(Tag::Heading(_)) => (None, 1),\n-                Event::Code(code) => (Some(format!(\"`{}`\", code)), 0),\n-                Event::Text(ref s) if self.is_in > 0 => (Some(s.as_ref().to_owned()), 0),\n-                Event::End(Tag::Paragraph | Tag::Heading(_)) => (None, -1),\n-                _ => (None, 0),\n-            };\n-            if is_in > 0 || (is_in < 0 && self.is_in > 0) {\n-                self.is_in += is_in;\n-            }\n-            if ret.is_some() {\n-                self.is_first = false;\n-                ret\n-            } else {\n-                Some(String::new())\n+    let mut s = String::with_capacity(md.len() * 3 / 2);\n+\n+    for event in Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH) {\n+        match &event {\n+            Event::Text(text) => s.push_str(text),\n+            Event::Code(code) => {\n+                s.push('`');\n+                s.push_str(code);\n+                s.push('`');\n             }\n+            Event::HardBreak | Event::SoftBreak => s.push(' '),\n+            Event::Start(Tag::CodeBlock(..)) => break,\n+            Event::End(Tag::Paragraph) => break,\n+            _ => (),\n         }\n     }\n-    let mut s = String::with_capacity(md.len() * 3 / 2);\n-    let p = ParserWrapper {\n-        inner: Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH),\n-        is_in: 0,\n-        is_first: true,\n-    };\n-    p.filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n+\n     s\n }\n "}, {"sha": "f071f3d5b4e73c6c4350d0fa8abbede2d7bfa20b", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "patch": "@@ -1,4 +1,4 @@\n-use super::plain_summary_line;\n+use super::plain_text_summary;\n use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use std::cell::RefCell;\n@@ -210,18 +210,25 @@ fn test_header_ids_multiple_blocks() {\n }\n \n #[test]\n-fn test_plain_summary_line() {\n+fn test_plain_text_summary() {\n     fn t(input: &str, expect: &str) {\n-        let output = plain_summary_line(input);\n+        let output = plain_text_summary(input);\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n     t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n+    t(\"**bold**\", \"bold\");\n+    t(\"Multi-line\\nsummary\", \"Multi-line summary\");\n+    t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n+    t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n     t(\"code `let x = i32;` ...\", \"code `let x = i32;` ...\");\n     t(\"type `Type<'static>` ...\", \"type `Type<'static>` ...\");\n     t(\"# top header\", \"top header\");\n     t(\"## header\", \"header\");\n+    t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n+    t(\"```\\nfn main() {}\\n```\", \"\");\n+    t(\"<div>hello</div>\", \"\");\n }\n \n #[test]"}, {"sha": "cf785d362cd11cf5a8123356b044c919170dc5df", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "patch": "@@ -9,7 +9,7 @@ use crate::clean::types::GetDefId;\n use crate::clean::{self, AttributesExt};\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n-use crate::html::render::{plain_summary_line, shorten};\n+use crate::html::render::{plain_text_summary, shorten};\n use crate::html::render::{Generic, IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n \n /// Indicates where an external crate can be found.\n@@ -78,7 +78,7 @@ pub fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 ty: item.type_(),\n                 name: item.name.clone().unwrap(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: shorten(plain_summary_line(item.doc_value())),\n+                desc: shorten(plain_text_summary(item.doc_value())),\n                 parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item),\n@@ -127,7 +127,7 @@ pub fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     let crate_doc = krate\n         .module\n         .as_ref()\n-        .map(|module| shorten(plain_summary_line(module.doc_value())))\n+        .map(|module| shorten(plain_text_summary(module.doc_value())))\n         .unwrap_or(String::new());\n \n     #[derive(Serialize)]"}, {"sha": "90206d27781cb3ed3777cefdd7e47bfbe0732928", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "patch": "@@ -1506,6 +1506,7 @@ impl Context {\n         }\n     }\n \n+    /// Construct a map of items shown in the sidebar to a plain-text summary of their docs.\n     fn build_sidebar_items(&self, m: &clean::Module) -> BTreeMap<String, Vec<NameDoc>> {\n         // BTreeMap instead of HashMap to get a sorted output\n         let mut map: BTreeMap<_, Vec<_>> = BTreeMap::new();\n@@ -1522,7 +1523,7 @@ impl Context {\n             let short = short.to_string();\n             map.entry(short)\n                 .or_default()\n-                .push((myname, Some(plain_summary_line(item.doc_value()))));\n+                .push((myname, Some(plain_text_summary(item.doc_value()))));\n         }\n \n         if self.shared.sort_modules_alphabetically {\n@@ -1728,22 +1729,15 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n+/// Renders the first paragraph of the given markdown as plain text, making it suitable for\n+/// contexts like alt-text or the search index.\n+///\n+/// If no markdown is supplied, the empty string is returned.\n+///\n+/// See [`markdown::plain_text_summary`] for further details.\n #[inline]\n-crate fn plain_summary_line(s: Option<&str>) -> String {\n-    let s = s.unwrap_or(\"\");\n-    // This essentially gets the first paragraph of text in one line.\n-    let mut line = s\n-        .lines()\n-        .skip_while(|line| line.chars().all(|c| c.is_whitespace()))\n-        .take_while(|line| line.chars().any(|c| !c.is_whitespace()))\n-        .fold(String::new(), |mut acc, line| {\n-            acc.push_str(line);\n-            acc.push(' ');\n-            acc\n-        });\n-    // remove final whitespace\n-    line.pop();\n-    markdown::plain_summary_line(&line[..])\n+crate fn plain_text_summary(s: Option<&str>) -> String {\n+    s.map(markdown::plain_text_summary).unwrap_or_default()\n }\n \n crate fn shorten(s: String) -> String {\n@@ -1800,25 +1794,35 @@ fn render_markdown(\n     )\n }\n \n+/// Writes a documentation block containing only the first paragraph of the documentation. If the\n+/// docs are longer, a \"Read more\" link is appended to the end.\n fn document_short(\n     w: &mut Buffer,\n-    cx: &Context,\n     item: &clean::Item,\n     link: AssocItemLink<'_>,\n     prefix: &str,\n     is_hidden: bool,\n ) {\n     if let Some(s) = item.doc_value() {\n-        let markdown = if s.contains('\\n') {\n-            format!(\n-                \"{} [Read more]({})\",\n-                &plain_summary_line(Some(s)),\n-                naive_assoc_href(item, link)\n-            )\n-        } else {\n-            plain_summary_line(Some(s))\n-        };\n-        render_markdown(w, cx, &markdown, item.links(), prefix, is_hidden);\n+        let mut summary_html = MarkdownSummaryLine(s, &item.links()).into_string();\n+\n+        if s.contains('\\n') {\n+            let link = format!(r#\" <a href=\"{}\">Read more</a>\"#, naive_assoc_href(item, link));\n+\n+            if let Some(idx) = summary_html.rfind(\"</p>\") {\n+                summary_html.insert_str(idx, &link);\n+            } else {\n+                summary_html.push_str(&link);\n+            }\n+        }\n+\n+        write!(\n+            w,\n+            \"<div class='docblock{}'>{}{}</div>\",\n+            if is_hidden { \" hidden\" } else { \"\" },\n+            prefix,\n+            summary_html,\n+        );\n     } else if !prefix.is_empty() {\n         write!(\n             w,\n@@ -3689,7 +3693,7 @@ fn render_impl(\n                         } else if show_def_docs {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, cx, it, link, \"\", is_hidden);\n+                            document_short(w, it, link, \"\", is_hidden);\n                         }\n                     }\n                 } else {\n@@ -3701,7 +3705,7 @@ fn render_impl(\n             } else {\n                 document_stability(w, cx, item, is_hidden);\n                 if show_def_docs {\n-                    document_short(w, cx, item, link, \"\", is_hidden);\n+                    document_short(w, item, link, \"\", is_hidden);\n                 }\n             }\n         }"}, {"sha": "c995ccbf0af6770426242051a5a7c6a13baf2320", "filename": "src/test/rustdoc/plain-text-summaries.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Ftest%2Frustdoc%2Fplain-text-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Ftest%2Frustdoc%2Fplain-text-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplain-text-summaries.rs?ref=e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "patch": "@@ -0,0 +1,26 @@\n+#![crate_type = \"lib\"]\n+#![crate_name = \"summaries\"]\n+\n+//! This summary has a [link] and `code`.\n+//!\n+//! This is the second paragraph.\n+//!\n+//! [link]: https://example.com\n+\n+// @has search-index.js 'This summary has a link and `code`.'\n+// @!has - 'second paragraph'\n+\n+/// This `code` should be in backticks.\n+///\n+/// This text should not be rendered.\n+pub struct Sidebar;\n+\n+// @has summaries/sidebar-items.js 'This `code` should be in backticks.'\n+// @!has - 'text should not be rendered'\n+\n+/// ```text\n+/// this block should not be rendered\n+/// ```\n+pub struct Sidebar2;\n+\n+// @!has summaries/sidebar-items.js 'block should not be rendered'"}, {"sha": "3bcaa3bb673139956d3681eaa6c7aaf7ea06e781", "filename": "src/test/rustdoc/trait-impl.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0822ecdbc43a6128136661bb73fb6f3c3db2b4a/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=e0822ecdbc43a6128136661bb73fb6f3c3db2b4a", "patch": "@@ -0,0 +1,46 @@\n+pub trait Trait {\n+    /// Some long docs here.\n+    ///\n+    /// These docs are long enough that a link will be added to the end.\n+    fn a();\n+\n+    /// These docs contain a [reference link].\n+    ///\n+    /// [reference link]: https://example.com\n+    fn b();\n+\n+    /// ```\n+    /// This code block should not be in the output, but a Read more link should be generated\n+    /// ```\n+    fn c();\n+\n+    /// Escaped formatting a\\*b\\*c\\* works\n+    fn d();\n+}\n+\n+pub struct Struct;\n+\n+impl Trait for Struct {\n+    // @has trait_impl/struct.Struct.html '//*[@id=\"method.a\"]/../div/p' 'Some long docs'\n+    // @!has - '//*[@id=\"method.a\"]/../div/p' 'link will be added'\n+    // @has - '//*[@id=\"method.a\"]/../div/p/a' 'Read more'\n+    // @has - '//*[@id=\"method.a\"]/../div/p/a/@href' 'trait.Trait.html'\n+    fn a() {}\n+\n+    // @has trait_impl/struct.Struct.html '//*[@id=\"method.b\"]/../div/p' 'These docs contain'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a' 'reference link'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a/@href' 'https://example.com'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a' 'Read more'\n+    // @has - '//*[@id=\"method.b\"]/../div/p/a/@href' 'trait.Trait.html'\n+    fn b() {}\n+\n+    // @!has trait_impl/struct.Struct.html '//*[@id=\"method.c\"]/../div/p' 'code block'\n+    // @has - '//*[@id=\"method.c\"]/../div/p/a' 'Read more'\n+    // @has - '//*[@id=\"method.c\"]/../div/p/a/@href' 'trait.Trait.html'\n+    fn c() {}\n+\n+    // @has trait_impl/struct.Struct.html '//*[@id=\"method.d\"]/../div/p' \\\n+    //   'Escaped formatting a*b*c* works'\n+    // @!has trait_impl/struct.Struct.html '//*[@id=\"method.d\"]/../div/p/em'\n+    fn d() {}\n+}"}]}