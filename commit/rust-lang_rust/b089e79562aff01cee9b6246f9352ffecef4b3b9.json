{"sha": "b089e79562aff01cee9b6246f9352ffecef4b3b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwODllNzk1NjJhZmYwMWNlZTliNjI0NmY5MzUyZmZlY2VmNGIzYjk=", "commit": {"author": {"name": "daniellimws", "email": "weesoong.lim@gmail.com", "date": "2018-10-29T11:15:22Z"}, "committer": {"name": "daniellimws", "email": "weesoong.lim@gmail.com", "date": "2018-10-29T11:15:22Z"}, "message": "Add documentation for From impls", "tree": {"sha": "a8a244f116c703baf7c8121a30f8e68b55ac7cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a244f116c703baf7c8121a30f8e68b55ac7cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b089e79562aff01cee9b6246f9352ffecef4b3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b089e79562aff01cee9b6246f9352ffecef4b3b9", "html_url": "https://github.com/rust-lang/rust/commit/b089e79562aff01cee9b6246f9352ffecef4b3b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b089e79562aff01cee9b6246f9352ffecef4b3b9/comments", "author": {"login": "daniellimws", "id": 8130120, "node_id": "MDQ6VXNlcjgxMzAxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/8130120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniellimws", "html_url": "https://github.com/daniellimws", "followers_url": "https://api.github.com/users/daniellimws/followers", "following_url": "https://api.github.com/users/daniellimws/following{/other_user}", "gists_url": "https://api.github.com/users/daniellimws/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniellimws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniellimws/subscriptions", "organizations_url": "https://api.github.com/users/daniellimws/orgs", "repos_url": "https://api.github.com/users/daniellimws/repos", "events_url": "https://api.github.com/users/daniellimws/events{/privacy}", "received_events_url": "https://api.github.com/users/daniellimws/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daniellimws", "id": 8130120, "node_id": "MDQ6VXNlcjgxMzAxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/8130120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniellimws", "html_url": "https://github.com/daniellimws", "followers_url": "https://api.github.com/users/daniellimws/followers", "following_url": "https://api.github.com/users/daniellimws/following{/other_user}", "gists_url": "https://api.github.com/users/daniellimws/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniellimws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniellimws/subscriptions", "organizations_url": "https://api.github.com/users/daniellimws/orgs", "repos_url": "https://api.github.com/users/daniellimws/repos", "events_url": "https://api.github.com/users/daniellimws/events{/privacy}", "received_events_url": "https://api.github.com/users/daniellimws/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa45602b71c59c6315fdb07e925dec61f5827ad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa45602b71c59c6315fdb07e925dec61f5827ad9", "html_url": "https://github.com/rust-lang/rust/commit/fa45602b71c59c6315fdb07e925dec61f5827ad9"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "da4651ca7793b75801c3d28cf5715d5aec92682a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b089e79562aff01cee9b6246f9352ffecef4b3b9/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b089e79562aff01cee9b6246f9352ffecef4b3b9/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b089e79562aff01cee9b6246f9352ffecef4b3b9", "patch": "@@ -438,13 +438,28 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n \n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Box<T> {\n+    /// Converts a generic type `T` into a `Box<T>`\n+    ///\n+    /// The conversion allocates on the heap and moves `t`\n+    /// from the stack into it.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// let x = 5;\n+    /// let boxed = Box::new(5);\n+    ///\n+    /// assert_eq!(Box::from(x), boxed);\n+    /// ```\n     fn from(t: T) -> Self {\n         Box::new(t)\n     }\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T> From<Box<T>> for Pin<Box<T>> {\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n     fn from(boxed: Box<T>) -> Self {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n         // when `T: !Unpin`,  so it's safe to pin it directly without any\n@@ -455,6 +470,19 @@ impl<T> From<Box<T>> for Pin<Box<T>> {\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n+    /// Converts a `&[T]` into a `Box<[T]>`\n+    ///\n+    /// This conversion does not allocate on the heap\n+    /// but performs a copy of `slice`.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// // create a &[u8] which will be used to create a Box<[u8]>\n+    /// let slice: &[u8] = &[104, 101, 108, 108, 111];\n+    /// let boxed_slice = Box::from(slice);\n+    ///\n+    /// println!({:?}, boxed_slice);\n+    /// ```\n     fn from(slice: &'a [T]) -> Box<[T]> {\n         let mut boxed = unsafe { RawVec::with_capacity(slice.len()).into_box() };\n         boxed.copy_from_slice(slice);\n@@ -464,6 +492,15 @@ impl<'a, T: Copy> From<&'a [T]> for Box<[T]> {\n \n #[stable(feature = \"box_from_slice\", since = \"1.17.0\")]\n impl<'a> From<&'a str> for Box<str> {\n+    /// Converts a `&str` into a `Box<str>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// let boxed: Box<str> = Box::from(\"hello\");\n+    /// println!(\"{}\", boxed);\n+    /// ```\n     #[inline]\n     fn from(s: &'a str) -> Box<str> {\n         unsafe { from_boxed_utf8_unchecked(Box::from(s.as_bytes())) }\n@@ -472,6 +509,22 @@ impl<'a> From<&'a str> for Box<str> {\n \n #[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n+    /// Converts a `Box<str>>` into a `Box<[u8]>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    /// # Examples\n+    /// ```rust\n+    /// // create a Box<str> which will be used to create a Box<[u8]>\n+    /// let boxed: Box<str> = Box::from(\"hello\");\n+    /// let boxed_str: Box<[u8]> = Box::from(boxed);\n+    ///\n+    /// // create a &[u8] which will be used to create a Box<[u8]>\n+    /// let slice: &[u8] = &[104, 101, 108, 108, 111];\n+    /// let boxed_slice = Box::from(slice);\n+    ///\n+    /// assert_eq!(boxed_slice, boxed_str);\n+    /// ```\n     #[inline]\n     fn from(s: Box<str>) -> Self {\n         unsafe { Box::from_raw(Box::into_raw(s) as *mut [u8]) }"}]}