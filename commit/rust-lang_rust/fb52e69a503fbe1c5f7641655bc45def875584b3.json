{"sha": "fb52e69a503fbe1c5f7641655bc45def875584b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNTJlNjlhNTAzZmJlMWM1Zjc2NDE2NTViYzQ1ZGVmODc1NTg0YjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-28T09:31:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-28T09:31:24Z"}, "message": "auto merge of #19363 : michaelwoerister/rust/support-unboxed-closures, r=alexcrichton\n\nThis PR lets `rustc` generate debuginfo for variables captured by unboxed closures. \r\n\r\nFixes #19356\r\n\r\n@nikomatsakis This PR will probably conflict with #19338. If this gets merged before, you should be able to just leave the test case as it is (maybe remove the `#![feature(unboxed_closures)]` directive).", "tree": {"sha": "347352c78fc9f3e00b98a4f8714e751db201b793", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347352c78fc9f3e00b98a4f8714e751db201b793"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb52e69a503fbe1c5f7641655bc45def875584b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb52e69a503fbe1c5f7641655bc45def875584b3", "html_url": "https://github.com/rust-lang/rust/commit/fb52e69a503fbe1c5f7641655bc45def875584b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb52e69a503fbe1c5f7641655bc45def875584b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "832dc619ec1dcaa929de3a4eec440dffd3bedd06", "url": "https://api.github.com/repos/rust-lang/rust/commits/832dc619ec1dcaa929de3a4eec440dffd3bedd06", "html_url": "https://github.com/rust-lang/rust/commit/832dc619ec1dcaa929de3a4eec440dffd3bedd06"}, {"sha": "251386c6055f44f064df27d604ae8f9ed55aad09", "url": "https://api.github.com/repos/rust-lang/rust/commits/251386c6055f44f064df27d604ae8f9ed55aad09", "html_url": "https://github.com/rust-lang/rust/commit/251386c6055f44f064df27d604ae8f9ed55aad09"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "bb4df00bd944a1147ed9f6504767897d6a4b2082", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fb52e69a503fbe1c5f7641655bc45def875584b3/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb52e69a503fbe1c5f7641655bc45def875584b3/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=fb52e69a503fbe1c5f7641655bc45def875584b3", "patch": "@@ -272,21 +272,24 @@ fn load_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let mut i = 0u;\n     for freevar in freevars.iter() {\n         let mut upvarptr = GEPi(bcx, llcdata, &[0u, i]);\n-        match store {\n-            ty::RegionTraitStore(..) => { upvarptr = Load(bcx, upvarptr); }\n-            ty::UniqTraitStore => {}\n-        }\n+        let captured_by_ref = match store {\n+            ty::RegionTraitStore(..) => {\n+                upvarptr = Load(bcx, upvarptr);\n+                true\n+            }\n+            ty::UniqTraitStore => false\n+        };\n         let def_id = freevar.def.def_id();\n \n         bcx.fcx.llupvars.borrow_mut().insert(def_id.node, upvarptr);\n-        for &env_pointer_alloca in env_pointer_alloca.iter() {\n+        if let Some(env_pointer_alloca) = env_pointer_alloca {\n             debuginfo::create_captured_var_metadata(\n                 bcx,\n                 def_id.node,\n                 cdata_ty,\n                 env_pointer_alloca,\n                 i,\n-                store,\n+                captured_by_ref,\n                 freevar.span);\n         }\n \n@@ -320,11 +323,25 @@ fn load_unboxed_closure_environment<'blk, 'tcx>(\n         bcx.fcx.llenv.unwrap()\n     };\n \n+    // Store the pointer to closure data in an alloca for debug info because that's what the\n+    // llvm.dbg.declare intrinsic expects\n+    let env_pointer_alloca = if bcx.sess().opts.debuginfo == FullDebugInfo {\n+        let alloc = alloc_ty(bcx, ty::mk_mut_ptr(bcx.tcx(), self_type), \"__debuginfo_env_ptr\");\n+        Store(bcx, llenv, alloc);\n+        Some(alloc)\n+    } else {\n+        None\n+    };\n+\n     for (i, freevar) in freevars.iter().enumerate() {\n         let mut upvar_ptr = GEPi(bcx, llenv, &[0, i]);\n-        if freevar_mode == ast::CaptureByRef {\n-            upvar_ptr = Load(bcx, upvar_ptr);\n-        }\n+        let captured_by_ref = match freevar_mode {\n+            ast::CaptureByRef => {\n+                upvar_ptr = Load(bcx, upvar_ptr);\n+                true\n+            }\n+            ast::CaptureByValue => false\n+        };\n         let def_id = freevar.def.def_id();\n         bcx.fcx.llupvars.borrow_mut().insert(def_id.node, upvar_ptr);\n \n@@ -333,6 +350,17 @@ fn load_unboxed_closure_environment<'blk, 'tcx>(\n                                       upvar_ptr,\n                                       node_id_type(bcx, def_id.node))\n         }\n+\n+        if let Some(env_pointer_alloca) = env_pointer_alloca {\n+            debuginfo::create_captured_var_metadata(\n+                bcx,\n+                def_id.node,\n+                self_type,\n+                env_pointer_alloca,\n+                i,\n+                captured_by_ref,\n+                freevar.span);\n+        }\n     }\n \n     bcx"}, {"sha": "326adf1f3e7b633c2b2b769b4222ab99bc4c73ca", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb52e69a503fbe1c5f7641655bc45def875584b3/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb52e69a503fbe1c5f7641655bc45def875584b3/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=fb52e69a503fbe1c5f7641655bc45def875584b3", "patch": "@@ -885,7 +885,7 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                 env_data_type: Ty<'tcx>,\n                                                 env_pointer: ValueRef,\n                                                 env_index: uint,\n-                                                closure_store: ty::TraitStore,\n+                                                captured_by_ref: bool,\n                                                 span: Span) {\n     if fn_should_be_ignored(bcx.fcx) {\n         return;\n@@ -940,13 +940,10 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n          llvm::LLVMDIBuilderCreateOpDeref(Type::i64(cx).to_ref())]\n     };\n \n-    let address_op_count = match closure_store {\n-        ty::RegionTraitStore(..) => {\n-            address_operations.len()\n-        }\n-        ty::UniqTraitStore => {\n-            address_operations.len() - 1\n-        }\n+    let address_op_count = if captured_by_ref {\n+        address_operations.len()\n+    } else {\n+        address_operations.len() - 1\n     };\n \n     let variable_access = IndirectVariable {"}, {"sha": "fca47ed47bd7a1adeeee3503369fc362301a006e", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb52e69a503fbe1c5f7641655bc45def875584b3/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb52e69a503fbe1c5f7641655bc45def875584b3/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=fb52e69a503fbe1c5f7641655bc45def875584b3", "patch": "@@ -23,7 +23,11 @@\n // gdb-check:$2 = {a = -2, b = 3.5, c = 4}\n // gdb-command:print *owned\n // gdb-check:$3 = 5\n+// gdb-command:continue\n \n+// gdb-command:print constant2\n+// gdb-check:$4 = 6\n+// gdb-command:continue\n \n // === LLDB TESTS ==================================================================================\n \n@@ -37,6 +41,7 @@\n // lldb-check:[...]$2 = 5\n \n #![allow(unused_variables)]\n+#![feature(unboxed_closures)]\n \n struct Struct {\n     a: int,\n@@ -55,12 +60,24 @@ fn main() {\n \n     let owned = box 5;\n \n-    let closure: proc() = proc() {\n+    let closure = move |:| {\n         zzz(); // #break\n         do_something(&constant, &a_struct.a, &*owned);\n     };\n \n     closure();\n+\n+    let constant2 = 6u;\n+\n+    // The `self` argument of the following closure should be passed by value\n+    // to FnOnce::call_once(self, args), which gets translated a bit differently\n+    // than the regular case. Let's make sure this is supported too.\n+    let immedate_env = move |:| {\n+        zzz(); // #break\n+        return constant2;\n+    };\n+\n+    immedate_env();\n }\n \n fn do_something(_: &int, _:&int, _:&int) {"}]}