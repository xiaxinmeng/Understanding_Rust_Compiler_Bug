{"sha": "66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "node_id": "C_kwDOAAsO6NoAKDY2YTgzZDMzZWE5YTM5ZDFmYzBmNGMyY2EwNThjMGNlNDg4NGE3MWE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-06T02:56:29Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-28T21:45:41Z"}, "message": "Factor out some ty param utils", "tree": {"sha": "e0d2f4adff82f82a151a8f1b21f01f1abbb3dd55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d2f4adff82f82a151a8f1b21f01f1abbb3dd55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "html_url": "https://github.com/rust-lang/rust/commit/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145d7fc5298cec0995bdc4e71d09d275fcbcdcdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/145d7fc5298cec0995bdc4e71d09d275fcbcdcdb", "html_url": "https://github.com/rust-lang/rust/commit/145d7fc5298cec0995bdc4e71d09d275fcbcdcdb"}], "stats": {"total": 153, "additions": 63, "deletions": 90}, "files": [{"sha": "21a9558ec076a54e938fadc06f56fb6f9fa5ee34", "filename": "clippy_lints/src/types/box_collection.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_ty_param_diagnostic_item;\n+use clippy_utils::{path_def_id, qpath_generic_tys};\n use rustc_hir::{self as hir, def_id::DefId, QPath};\n use rustc_lint::LateContext;\n-use rustc_span::symbol::sym;\n+use rustc_span::{sym, Symbol};\n \n use super::BOX_COLLECTION;\n \n@@ -11,10 +11,9 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n         if Some(def_id) == cx.tcx.lang_items().owned_box();\n         if let Some(item_type) = get_std_collection(cx, qpath);\n         then {\n-            let generic = if item_type == \"String\" {\n-                \"\"\n-            } else {\n-                \"<..>\"\n+            let generic = match item_type {\n+                sym::String => \"\",\n+                _ => \"<..>\",\n             };\n             span_lint_and_help(\n                 cx,\n@@ -37,14 +36,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n     }\n }\n \n-fn get_std_collection(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n-    if is_ty_param_diagnostic_item(cx, qpath, sym::Vec).is_some() {\n-        Some(\"Vec\")\n-    } else if is_ty_param_diagnostic_item(cx, qpath, sym::String).is_some() {\n-        Some(\"String\")\n-    } else if is_ty_param_diagnostic_item(cx, qpath, sym::HashMap).is_some() {\n-        Some(\"HashMap\")\n-    } else {\n-        None\n-    }\n+fn get_std_collection(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Symbol> {\n+    let param = qpath_generic_tys(qpath).next()?;\n+    let id = path_def_id(cx, param)?;\n+    cx.tcx\n+        .get_diagnostic_name(id)\n+        .filter(|&name| matches!(name, sym::HashMap | sym::String | sym::Vec))\n }"}, {"sha": "8767e3c30a68ac4564ba72814b48f53719090be3", "filename": "clippy_lints/src/types/option_option.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs?ref=66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "patch": "@@ -1,22 +1,28 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::is_ty_param_diagnostic_item;\n+use clippy_utils::{path_def_id, qpath_generic_tys};\n+use if_chain::if_chain;\n use rustc_hir::{self as hir, def_id::DefId, QPath};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n use super::OPTION_OPTION;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if cx.tcx.is_diagnostic_item(sym::Option, def_id) && is_ty_param_diagnostic_item(cx, qpath, sym::Option).is_some() {\n-        span_lint(\n-            cx,\n-            OPTION_OPTION,\n-            hir_ty.span,\n-            \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n-                                 enum if you need to distinguish all 3 cases\",\n-        );\n-        true\n-    } else {\n-        false\n+    if_chain! {\n+        if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n+        if let Some(arg) = qpath_generic_tys(qpath).next();\n+        if path_def_id(cx, arg) == Some(def_id);\n+        then {\n+            span_lint(\n+                cx,\n+                OPTION_OPTION,\n+                hir_ty.span,\n+                \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n+                                     enum if you need to distinguish all 3 cases\",\n+            );\n+            true\n+        } else {\n+            false\n+        }\n     }\n }"}, {"sha": "4d72a29e8c74722711aeb3b6a754e3d0c2bd4765", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{is_ty_param_diagnostic_item, qpath_generic_tys};\n+use clippy_utils::{path_def_id, qpath_generic_tys};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n@@ -20,7 +20,12 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 format!(\"Rc<{}>\", alternate),\n                 Applicability::MachineApplicable,\n             );\n-        } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Vec) {\n+        } else {\n+            let Some(ty) = qpath_generic_tys(qpath).next() else { return false };\n+            let Some(id) = path_def_id(cx, ty) else { return false };\n+            if !cx.tcx.is_diagnostic_item(sym::Vec, id) {\n+                return false;\n+            }\n             let qpath = match &ty.kind {\n                 TyKind::Path(qpath) => qpath,\n                 _ => return false,\n@@ -55,7 +60,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 format!(\"Arc<{}>\", alternate),\n                 Applicability::MachineApplicable,\n             );\n-        } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Vec) {\n+        } else if let Some(ty) = qpath_generic_tys(qpath).next() {\n+            let Some(id) = path_def_id(cx, ty) else { return false };\n+            if !cx.tcx.is_diagnostic_item(sym::Vec, id) {\n+                return false;\n+            }\n             let qpath = match &ty.kind {\n                 TyKind::Path(qpath) => qpath,\n                 _ => return false,\n@@ -85,13 +94,13 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n }\n \n fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n-    if is_ty_param_diagnostic_item(cx, qpath, sym::String).is_some() {\n-        Some(\"str\")\n-    } else if is_ty_param_diagnostic_item(cx, qpath, sym::OsString).is_some() {\n-        Some(\"std::ffi::OsStr\")\n-    } else if is_ty_param_diagnostic_item(cx, qpath, sym::PathBuf).is_some() {\n-        Some(\"std::path::Path\")\n-    } else {\n-        None\n-    }\n+    let ty = qpath_generic_tys(qpath).next()?;\n+    let id = path_def_id(cx, ty)?;\n+    let path = match cx.tcx.get_diagnostic_name(id)? {\n+        sym::String => \"str\",\n+        sym::OsString => \"std::ffi::OsStr\",\n+        sym::PathBuf => \"std::path::Path\",\n+        _ => return None,\n+    };\n+    Some(path)\n }"}, {"sha": "a75972cf3ddbe1e2d91acbf11fc541577c7ed7e5", "filename": "clippy_lints/src/types/rc_mutex.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs?ref=66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_ty_param_diagnostic_item;\n+use clippy_utils::{path_def_id, qpath_generic_tys};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, def_id::DefId, QPath};\n use rustc_lint::LateContext;\n@@ -10,7 +10,9 @@ use super::RC_MUTEX;\n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n     if_chain! {\n         if cx.tcx.is_diagnostic_item(sym::Rc, def_id) ;\n-        if let Some(_) = is_ty_param_diagnostic_item(cx, qpath, sym::Mutex) ;\n+        if let Some(arg) = qpath_generic_tys(qpath).next();\n+        if let Some(id) = path_def_id(cx, arg);\n+        if cx.tcx.is_diagnostic_item(sym::Mutex, id);\n         then {\n             span_lint_and_help(\n                 cx,"}, {"sha": "10d2ae2eb1dbb8808eb0fa601d0fc1ffad349dfb", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::{is_ty_param_diagnostic_item, is_ty_param_lang_item, qpath_generic_tys};\n+use clippy_utils::{path_def_id, qpath_generic_tys};\n use rustc_errors::Applicability;\n-use rustc_hir::{self as hir, def_id::DefId, LangItem, QPath, TyKind};\n+use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n@@ -39,14 +39,13 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n         return true;\n     }\n \n-    let (inner_sym, ty) = if let Some(ty) = is_ty_param_lang_item(cx, qpath, LangItem::OwnedBox) {\n-        (\"Box\", ty)\n-    } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Rc) {\n-        (\"Rc\", ty)\n-    } else if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym::Arc) {\n-        (\"Arc\", ty)\n-    } else {\n-        return false;\n+    let Some(ty) = qpath_generic_tys(qpath).next() else { return false };\n+    let Some(id) = path_def_id(cx, ty) else { return false };\n+    let (inner_sym, ty) = match cx.tcx.get_diagnostic_name(id) {\n+        Some(sym::Arc) => (\"Arc\", ty),\n+        Some(sym::Rc) => (\"Rc\", ty),\n+        _ if Some(id) == cx.tcx.lang_items().owned_box() => (\"Box\", ty),\n+        _ => return false,\n     };\n \n     let inner_qpath = match &ty.kind {"}, {"sha": "ed73364841c598fb8483bffe10aa17ccc3eb14ca", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "patch": "@@ -262,44 +262,6 @@ pub fn is_wild(pat: &Pat<'_>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n-/// Checks if the first type parameter is a lang item.\n-pub fn is_ty_param_lang_item<'tcx>(\n-    cx: &LateContext<'_>,\n-    qpath: &QPath<'tcx>,\n-    item: LangItem,\n-) -> Option<&'tcx hir::Ty<'tcx>> {\n-    let ty = qpath_generic_tys(qpath).next()?;\n-\n-    if let TyKind::Path(qpath) = &ty.kind {\n-        cx.qpath_res(qpath, ty.hir_id)\n-            .opt_def_id()\n-            .map_or(false, |id| {\n-                cx.tcx.lang_items().require(item).map_or(false, |lang_id| id == lang_id)\n-            })\n-            .then(|| ty)\n-    } else {\n-        None\n-    }\n-}\n-\n-/// Checks if the first type parameter is a diagnostic item.\n-pub fn is_ty_param_diagnostic_item<'tcx>(\n-    cx: &LateContext<'_>,\n-    qpath: &QPath<'tcx>,\n-    item: Symbol,\n-) -> Option<&'tcx hir::Ty<'tcx>> {\n-    let ty = qpath_generic_tys(qpath).next()?;\n-\n-    if let TyKind::Path(qpath) = &ty.kind {\n-        cx.qpath_res(qpath, ty.hir_id)\n-            .opt_def_id()\n-            .map_or(false, |id| cx.tcx.is_diagnostic_item(item, id))\n-            .then(|| ty)\n-    } else {\n-        None\n-    }\n-}\n-\n /// Checks if the method call given in `expr` belongs to the given trait.\n /// This is a deprecated function, consider using [`is_trait_method`].\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {"}]}