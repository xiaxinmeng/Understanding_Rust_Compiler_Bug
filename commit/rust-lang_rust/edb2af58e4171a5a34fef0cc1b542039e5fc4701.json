{"sha": "edb2af58e4171a5a34fef0cc1b542039e5fc4701", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYjJhZjU4ZTQxNzFhNWEzNGZlZjBjYzFiNTQyMDM5ZTVmYzQ3MDE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-28T13:11:55Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:12Z"}, "message": "Don't use scary block reorderings", "tree": {"sha": "5655eb41da60b27cb6f76e2c424a5d4abcace4cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5655eb41da60b27cb6f76e2c424a5d4abcace4cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb2af58e4171a5a34fef0cc1b542039e5fc4701", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53QACgkQpp+NIls6\n19ldshAApPkaUT60aYOU44grL6r/6imDupSmAgLQcmwb2SE3dj1iWnYCzCWyOuDl\nTeBIGNSVkSmkimMBOHGml6LB0mtRFO9s0UBZYMpTFEzOjuC8x/sthp611c2X/GtX\ntAJcCSMs8m0hYS2D40J7k6XCzURIZQrjM1usycQtgerRG/hLD2ns+R7n4n6gdEGa\nIT7JXqPSUyourno+F3uqy7SN4U8wDhLtWR0G6il9mtHMdVniqXx2Jqe6FdMMgCaz\nbyihLqy89SQrNMN9181SluNjzIv6vEs+37XpKhBq1HyPIUqBH+YpDcmhpy9pPiSm\nff8K8BtOI/DAq/2A6aCR0GNGo9vnMtunfVnMgOYKcqheXZDUf2G9EWnD3IfV5qNl\nWsDz3chYRqUvkACDkfwFmu1ic/mcYx7r1ecgNiC4TL5Uk4nwn9OB2z2kXXb05Gh0\n/2rBmj4igkDyGn3R4esajmjKKESbMWOZQE5oeTJCU/xVZluuOz9cLIroSqDLagaY\nuw2Gun/sk6kwl4BKKf7rCjTb5fIULGLkCEG+9yKfyDO4NHKn4vKJ3OhtbmEpTwLT\n+Of+7dvFnra+Jt29xKLKy7VXxQ613AD2r0MUFvcGovGscqNkD1BVitaBa645LHDe\n9YeYutcWBwvHaZ6kWMduXVxzI/EjTmJro0lhf+Raicfp20BK4LI=\n=5pEb\n-----END PGP SIGNATURE-----", "payload": "tree 5655eb41da60b27cb6f76e2c424a5d4abcace4cc\nparent 5b247b9bbe7252db2d22d3ec4be172c73f1f94e9\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1517145115 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494452 +0100\n\nDon't use scary block reorderings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb2af58e4171a5a34fef0cc1b542039e5fc4701", "html_url": "https://github.com/rust-lang/rust/commit/edb2af58e4171a5a34fef0cc1b542039e5fc4701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb2af58e4171a5a34fef0cc1b542039e5fc4701/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9", "html_url": "https://github.com/rust-lang/rust/commit/5b247b9bbe7252db2d22d3ec4be172c73f1f94e9"}], "stats": {"total": 60, "additions": 4, "deletions": 56}, "files": [{"sha": "d5fa379dea00ee8521e61050cb6994bb1985c818", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 4, "deletions": 56, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/edb2af58e4171a5a34fef0cc1b542039e5fc4701/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb2af58e4171a5a34fef0cc1b542039e5fc4701/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=edb2af58e4171a5a34fef0cc1b542039e5fc4701", "patch": "@@ -12,19 +12,17 @@\n \n use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, ProjectionElem, Rvalue, Local};\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n-use rustc::mir::{SourceInfo, ARGUMENT_VISIBILITY_SCOPE, TerminatorKind};\n-use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n+use rustc::mir::TerminatorKind;\n+use rustc::mir::visit::{MutVisitor, Visitor};\n use rustc::middle::const_val::ConstVal;\n use rustc::ty::{TyCtxt, TypeVariants, self, Instance};\n use rustc::mir::interpret::{Value, PrimVal, GlobalId};\n use interpret::{eval_body_with_mir, eval_body, mk_borrowck_eval_cx, unary_op, ValTy};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n-use std::collections::VecDeque;\n use transform::{MirPass, MirSource};\n use syntax::codemap::Span;\n-use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n use rustc::ty::subst::Substs;\n \n pub struct InstCombine;\n@@ -73,7 +71,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for InstCombineVisitor<'a, 'tcx> {\n         }\n \n         if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n-            debug!(\"Replacing `Len([_; N])`: {:?}\", rvalue);\n+            debug!(\"Replacing `Len([_; N])`: {:?} with {:?}\", rvalue, constant);\n             *rvalue = Rvalue::Use(Operand::Constant(box constant));\n         }\n \n@@ -101,6 +99,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for InstCombineVisitor<'a, 'tcx> {\n     ) {\n         self.super_constant(constant, location);\n         if let Some(&(val, ty, _)) = self.optimizations.constants.get(constant) {\n+            debug!(\"Replacing `{:?}` with {:?}:{:?}\", constant.literal, val, ty);\n             constant.literal = Literal::Value {\n                 value: self.tcx.mk_const(ty::Const {\n                     val: ConstVal::Value(val),\n@@ -464,57 +463,6 @@ impl<'tcx> Visitor<'tcx> for ConstPropVisitor {\n }\n \n impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n-    // override to visit basic blocks in execution order\n-    fn super_mir(&mut self, mir: &Mir<'tcx>) {\n-        let mut seen = FxHashSet::default();\n-        seen.insert(mir.start_node());\n-        let mut sorted = Vec::new();\n-        let mut next = VecDeque::new();\n-        sorted.push(mir.start_node());\n-        next.push_back(mir.start_node());\n-        while let Some(current) = next.pop_front() {\n-            for successor in mir.successors(current) {\n-                trace!(\"checking successor of {:?}: {:?}\", current, successor);\n-                trace!(\"{:?}, {:?}\", sorted, next);\n-                if seen.contains(&successor) {\n-                    for &pending in &next {\n-                        // not a back-edge, just a branch merging back into a single execution\n-                        if pending == successor {\n-                            // move to the back of the queue\n-                            let i = sorted.iter().position(|&b| b == successor).unwrap();\n-                            sorted.remove(i);\n-                            sorted.push(successor);\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    seen.insert(successor);\n-                    sorted.push(successor);\n-                    next.push_back(successor);\n-                }\n-            }\n-        }\n-        trace!(\"checking basic blocks: {:?}\", sorted);\n-        for bb in sorted {\n-            self.visit_basic_block_data(bb, &mir[bb]);\n-        }\n-\n-        for scope in &mir.visibility_scopes {\n-            self.visit_visibility_scope_data(scope);\n-        }\n-\n-        self.visit_ty(&mir.return_ty(), TyContext::ReturnTy(SourceInfo {\n-            span: mir.span,\n-            scope: ARGUMENT_VISIBILITY_SCOPE,\n-        }));\n-\n-        for local in mir.local_decls.indices() {\n-            self.visit_local_decl(local, &mir.local_decls[local]);\n-        }\n-\n-        self.visit_span(&mir.span);\n-    }\n-\n     fn visit_constant(\n         &mut self,\n         constant: &Constant<'tcx>,"}]}