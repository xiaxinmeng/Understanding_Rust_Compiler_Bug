{"sha": "b40ee88a28938891dd40d35a635d13373c3011cb", "node_id": "C_kwDOAAsO6NoAKGI0MGVlODhhMjg5Mzg4OTFkZDQwZDM1YTYzNWQxMzM3M2MzMDExY2I", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-31T11:10:00Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:03Z"}, "message": "macros: note/help in `SessionDiagnostic` derive\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "205667c818313077c5df996c430293376daeb726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/205667c818313077c5df996c430293376daeb726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b40ee88a28938891dd40d35a635d13373c3011cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b40ee88a28938891dd40d35a635d13373c3011cb", "html_url": "https://github.com/rust-lang/rust/commit/b40ee88a28938891dd40d35a635d13373c3011cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b40ee88a28938891dd40d35a635d13373c3011cb/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a88717cef051b8ebbed0e74c57fc0a714bd893dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a88717cef051b8ebbed0e74c57fc0a714bd893dc", "html_url": "https://github.com/rust-lang/rust/commit/a88717cef051b8ebbed0e74c57fc0a714bd893dc"}], "stats": {"total": 168, "additions": 158, "deletions": 10}, "files": [{"sha": "3589860eb0eaca281df1407e34aa0269bb2e203d", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40ee88a28938891dd40d35a635d13373c3011cb/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ee88a28938891dd40d35a635d13373c3011cb/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=b40ee88a28938891dd40d35a635d13373c3011cb", "patch": "@@ -66,6 +66,8 @@ decl_derive!(\n         // struct attributes\n         warning,\n         error,\n+        note,\n+        help,\n         // field attributes\n         skip_arg,\n         primary_span,"}, {"sha": "c7ee72907b5bbcdbc4467ca7c3a5f3ecdcc55fae", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b40ee88a28938891dd40d35a635d13373c3011cb/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ee88a28938891dd40d35a635d13373c3011cb/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=b40ee88a28938891dd40d35a635d13373c3011cb", "patch": "@@ -362,18 +362,52 @@ struct SessionDiagnosticDeriveBuilder<'a> {\n \n impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     /// Establishes state in the `SessionDiagnosticDeriveBuilder` resulting from the struct\n-    /// attributes like `#[error(..)#`, such as the diagnostic kind, slug and code.\n-    ///\n-    /// Returns a `proc_macro2::TokenStream` so that the `Err(..)` variant can be transformed into\n-    /// the same type via `to_compile_error`.\n+    /// attributes like `#[error(..)#`, such as the diagnostic kind and slug. Generates\n+    /// diagnostic builder calls for setting error code and creating note/help messages.\n     fn generate_structure_code(\n         &mut self,\n         attr: &syn::Attribute,\n     ) -> Result<proc_macro2::TokenStream, SessionDiagnosticDeriveError> {\n         let span = attr.span().unwrap();\n+\n         let name = attr.path.segments.last().unwrap().ident.to_string();\n+        let name = name.as_str();\n+        let meta = attr.parse_meta()?;\n+\n+        if matches!(name, \"help\" | \"note\")\n+            && matches!(meta, syn::Meta::Path(_) | syn::Meta::NameValue(_))\n+        {\n+            let diag = &self.diag;\n+            let slug = match &self.slug {\n+                Some((slug, _)) => slug.as_str(),\n+                None => throw_span_err!(\n+                    span,\n+                    &format!(\n+                        \"`#[{}{}]` must come after `#[error(..)]` or `#[warn(..)]`\",\n+                        name,\n+                        match meta {\n+                            syn::Meta::Path(_) => \"\",\n+                            syn::Meta::NameValue(_) => \" = ...\",\n+                            _ => unreachable!(),\n+                        }\n+                    )\n+                ),\n+            };\n+            let id = match meta {\n+                syn::Meta::Path(..) => quote! { #name },\n+                syn::Meta::NameValue(syn::MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n+                    quote! { #s }\n+                }\n+                _ => unreachable!(),\n+            };\n+            let fn_name = proc_macro2::Ident::new(name, attr.span());\n+\n+            return Ok(quote! {\n+                #diag.#fn_name(rustc_errors::DiagnosticMessage::fluent_attr(#slug, #id));\n+            });\n+        }\n \n-        let nested = match attr.parse_meta()? {\n+        let nested = match meta {\n             syn::Meta::List(syn::MetaList { nested, .. }) => nested,\n             syn::Meta::Path(..) => throw_span_err!(\n                 span,\n@@ -385,7 +419,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n             ),\n         };\n \n-        let kind = match name.as_str() {\n+        let kind = match name {\n             \"error\" => SessionDiagnosticKind::Error,\n             \"warning\" => SessionDiagnosticKind::Warn,\n             other => throw_span_err!(\n@@ -579,17 +613,17 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                         #diag.set_span(*#field_binding);\n                     })\n                 }\n-                \"label\" => {\n+                \"label\" | \"note\" | \"help\" => {\n                     self.report_error_if_not_applied_to_span(attr, info)?;\n-                    Ok(self.add_subdiagnostic(field_binding, name, \"label\"))\n+                    Ok(self.add_subdiagnostic(field_binding, name, name))\n                 }\n                 other => throw_span_err!(\n                     attr.span().unwrap(),\n                     &format!(\"`#[{}]` is not a valid `SessionDiagnostic` field attribute\", other)\n                 ),\n             },\n             syn::Meta::NameValue(syn::MetaNameValue { lit: syn::Lit::Str(s), .. }) => match name {\n-                \"label\" => {\n+                \"label\" | \"note\" | \"help\" => {\n                     self.report_error_if_not_applied_to_span(attr, info)?;\n                     Ok(self.add_subdiagnostic(field_binding, name, &s.value()))\n                 }"}, {"sha": "a3ae3c9a14d89ab025052ac2b21f8c4ce30273fd", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b40ee88a28938891dd40d35a635d13373c3011cb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ee88a28938891dd40d35a635d13373c3011cb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=b40ee88a28938891dd40d35a635d13373c3011cb", "patch": "@@ -339,3 +339,91 @@ struct ArgFieldWithSkip {\n     #[skip_arg]\n     other: Hello,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithSpannedNote {\n+    #[note]\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithSpannedNoteCustom {\n+    #[note = \"bar\"]\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+#[note]\n+struct ErrorWithNote {\n+    val: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+#[note = \"bar\"]\n+struct ErrorWithNoteCustom {\n+    val: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithSpannedHelp {\n+    #[help]\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithSpannedHelpCustom {\n+    #[help = \"bar\"]\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+#[help]\n+struct ErrorWithHelp {\n+    val: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+#[help = \"bar\"]\n+struct ErrorWithHelpCustom {\n+    val: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[help]\n+//~^ ERROR `#[help]` must come after `#[error(..)]` or `#[warn(..)]`\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithHelpWrongOrder {\n+    val: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[help = \"bar\"]\n+//~^ ERROR `#[help = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithHelpCustomWrongOrder {\n+    val: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[note]\n+//~^ ERROR `#[note]` must come after `#[error(..)]` or `#[warn(..)]`\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithNoteWrongOrder {\n+    val: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[note = \"bar\"]\n+//~^ ERROR `#[note = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ErrorWithNoteCustomWrongOrder {\n+    val: String,\n+}"}, {"sha": "dc8e807cea34d8df3dff2b89edf63769056837bb", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b40ee88a28938891dd40d35a635d13373c3011cb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b40ee88a28938891dd40d35a635d13373c3011cb/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=b40ee88a28938891dd40d35a635d13373c3011cb", "patch": "@@ -249,6 +249,30 @@ error: invalid annotation list `#[label(...)]`\n LL |     #[label(\"bar\")]\n    |       ^^^^^^^^^^^^\n \n+error: `#[help]` must come after `#[error(..)]` or `#[warn(..)]`\n+  --> $DIR/session-derive-errors.rs:400:1\n+   |\n+LL | #[help]\n+   | ^^^^^^^\n+\n+error: `#[help = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n+  --> $DIR/session-derive-errors.rs:408:1\n+   |\n+LL | #[help = \"bar\"]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `#[note]` must come after `#[error(..)]` or `#[warn(..)]`\n+  --> $DIR/session-derive-errors.rs:416:1\n+   |\n+LL | #[note]\n+   | ^^^^^^^\n+\n+error: `#[note = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n+  --> $DIR/session-derive-errors.rs:424:1\n+   |\n+LL | #[note = \"bar\"]\n+   | ^^^^^^^^^^^^^^^\n+\n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/session-derive-errors.rs:51:3\n    |\n@@ -272,6 +296,6 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 38 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}