{"sha": "49d8b0dcbef738b70f08b6648bb7c358b491f47c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZDhiMGRjYmVmNzM4YjcwZjA4YjY2NDhiYjdjMzU4YjQ5MWY0N2M=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-09-10T19:22:59Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2015-09-10T19:22:59Z"}, "message": "Make print_macro_backtrace non-recursive", "tree": {"sha": "20eb61d836c276ed1acd7624f886e88e2e4892e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20eb61d836c276ed1acd7624f886e88e2e4892e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d8b0dcbef738b70f08b6648bb7c358b491f47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d8b0dcbef738b70f08b6648bb7c358b491f47c", "html_url": "https://github.com/rust-lang/rust/commit/49d8b0dcbef738b70f08b6648bb7c358b491f47c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d8b0dcbef738b70f08b6648bb7c358b491f47c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9577e426824d410e21147bec73b1c7d0a64f890d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9577e426824d410e21147bec73b1c7d0a64f890d", "html_url": "https://github.com/rust-lang/rust/commit/9577e426824d410e21147bec73b1c7d0a64f890d"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "1924368a7f5fb3bbb703cf8b57128b7eb0055e92", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/49d8b0dcbef738b70f08b6648bb7c358b491f47c/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d8b0dcbef738b70f08b6648bb7c358b491f47c/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=49d8b0dcbef738b70f08b6648bb7c358b491f47c", "patch": "@@ -727,30 +727,34 @@ impl EmitterWriter {\n                              cm: &codemap::CodeMap,\n                              sp: Span)\n                              -> io::Result<()> {\n-        let cs = try!(cm.with_expn_info(sp.expn_id, |expn_info| -> io::Result<_> {\n-            match expn_info {\n-                Some(ei) => {\n-                    let ss = ei.callee.span.map_or(String::new(),\n-                                                   |span| cm.span_to_string(span));\n-                    let (pre, post) = match ei.callee.format {\n-                        codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n-                        codemap::MacroBang(..) => (\"\", \"!\"),\n-                        codemap::CompilerExpansion(..) => (\"\", \"\"),\n-                    };\n-                    try!(self.print_diagnostic(&ss, Note,\n-                                               &format!(\"in expansion of {}{}{}\",\n-                                                        pre,\n-                                                        ei.callee.name(),\n-                                                        post),\n-                                               None));\n-                    let ss = cm.span_to_string(ei.call_site);\n-                    try!(self.print_diagnostic(&ss, Note, \"expansion site\", None));\n-                    Ok(Some(ei.call_site))\n+        let mut sp_opt = Some(sp);\n+        while let Some(sp) = sp_opt {\n+            sp_opt = try!(cm.with_expn_info(sp.expn_id, |expn_info| -> io::Result<_> {\n+                match expn_info {\n+                    Some(ei) => {\n+                        let ss = ei.callee.span.map_or(String::new(),\n+                                                       |span| cm.span_to_string(span));\n+                        let (pre, post) = match ei.callee.format {\n+                            codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n+                            codemap::MacroBang(..) => (\"\", \"!\"),\n+                            codemap::CompilerExpansion(..) => (\"\", \"\"),\n+                        };\n+                        try!(self.print_diagnostic(&ss, Note,\n+                                                   &format!(\"in expansion of {}{}{}\",\n+                                                            pre,\n+                                                            ei.callee.name(),\n+                                                            post),\n+                                                   None));\n+                        let ss = cm.span_to_string(ei.call_site);\n+                        try!(self.print_diagnostic(&ss, Note, \"expansion site\", None));\n+                        Ok(Some(ei.call_site))\n+                    }\n+                    None => Ok(None)\n                 }\n-                None => Ok(None)\n+            }));\n         }\n-        }));\n-        cs.map_or(Ok(()), |call_site| self.print_macro_backtrace(cm, call_site))\n+\n+        Ok(())\n     }\n }\n "}]}