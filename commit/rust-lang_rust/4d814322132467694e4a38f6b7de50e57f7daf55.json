{"sha": "4d814322132467694e4a38f6b7de50e57f7daf55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkODE0MzIyMTMyNDY3Njk0ZTRhMzhmNmI3ZGU1MGU1N2Y3ZGFmNTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-20T17:38:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-20T17:39:02Z"}, "message": "allow compiling ra_ide_api on wasm", "tree": {"sha": "5e55281374cecba83213c85802689c4a1e57a622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e55281374cecba83213c85802689c4a1e57a622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d814322132467694e4a38f6b7de50e57f7daf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d814322132467694e4a38f6b7de50e57f7daf55", "html_url": "https://github.com/rust-lang/rust/commit/4d814322132467694e4a38f6b7de50e57f7daf55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d814322132467694e4a38f6b7de50e57f7daf55/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c73399365867178523885d0c997844d0d2d33325", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73399365867178523885d0c997844d0d2d33325", "html_url": "https://github.com/rust-lang/rust/commit/c73399365867178523885d0c997844d0d2d33325"}], "stats": {"total": 88, "additions": 76, "deletions": 12}, "files": [{"sha": "6bbf9d5dde095f0fca7cbfbdbf669814e4936d43", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=4d814322132467694e4a38f6b7de50e57f7daf55", "patch": "@@ -4,6 +4,9 @@ name = \"ra_ide_api\"\n version = \"0.1.0\"\n authors = [\"rust-analyzer developers\"]\n \n+[features]\n+wasm = []\n+\n [dependencies]\n format-buf = \"1.0.0\"\n itertools = \"0.8.0\""}, {"sha": "cc476a2374adc7997f0aa468fcfa65ba383a3cf7", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=4d814322132467694e4a38f6b7de50e57f7daf55", "patch": "@@ -6,6 +6,7 @@ use ra_db::{\n };\n use ra_prof::{memory_usage, profile, Bytes};\n use ra_syntax::SourceFile;\n+#[cfg(not(feature = \"wasm\"))]\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashMap;\n@@ -143,7 +144,12 @@ impl LibraryData {\n         root_id: SourceRootId,\n         files: Vec<(FileId, RelativePathBuf, Arc<String>)>,\n     ) -> LibraryData {\n-        let symbol_index = SymbolIndex::for_files(files.par_iter().map(|(file_id, _, text)| {\n+        #[cfg(not(feature = \"wasm\"))]\n+        let iter = files.par_iter();\n+        #[cfg(feature = \"wasm\")]\n+        let iter = files.iter();\n+\n+        let symbol_index = SymbolIndex::for_files(iter.map(|(file_id, _, text)| {\n             let parse = SourceFile::parse(text);\n             (*file_id, parse)\n         }));\n@@ -234,8 +240,12 @@ impl RootDatabase {\n     }\n \n     pub(crate) fn maybe_collect_garbage(&mut self) {\n+        if cfg!(feature = \"wasm\") {\n+            return;\n+        }\n+\n         if self.last_gc_check.elapsed() > GC_COOLDOWN {\n-            self.last_gc_check = time::Instant::now();\n+            self.last_gc_check = crate::wasm_shims::Instant::now();\n             let retained_trees = syntax_tree_stats(self).retained;\n             if retained_trees > 100 {\n                 log::info!(\"automatic garbadge collection, {} retained trees\", retained_trees);\n@@ -245,8 +255,12 @@ impl RootDatabase {\n     }\n \n     pub(crate) fn collect_garbage(&mut self) {\n+        if cfg!(feature = \"wasm\") {\n+            return;\n+        }\n+\n         let _p = profile(\"RootDatabase::collect_garbage\");\n-        self.last_gc = time::Instant::now();\n+        self.last_gc = crate::wasm_shims::Instant::now();\n \n         let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n "}, {"sha": "afd9022ce45248d6507d1c3eda91ecfdc483abeb", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=4d814322132467694e4a38f6b7de50e57f7daf55", "patch": "@@ -1,4 +1,4 @@\n-use std::{sync::Arc, time};\n+use std::sync::Arc;\n \n use ra_db::{\n     salsa::{self, Database, Durability},\n@@ -25,8 +25,8 @@ pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n     pub(crate) feature_flags: Arc<FeatureFlags>,\n     pub(crate) debug_data: Arc<DebugData>,\n-    pub(crate) last_gc: time::Instant,\n-    pub(crate) last_gc_check: time::Instant,\n+    pub(crate) last_gc: crate::wasm_shims::Instant,\n+    pub(crate) last_gc_check: crate::wasm_shims::Instant,\n }\n \n impl hir::debug::HirDebugHelper for RootDatabase {\n@@ -69,8 +69,8 @@ impl RootDatabase {\n     pub fn new(lru_capacity: Option<usize>, feature_flags: FeatureFlags) -> RootDatabase {\n         let mut db = RootDatabase {\n             runtime: salsa::Runtime::default(),\n-            last_gc: time::Instant::now(),\n-            last_gc_check: time::Instant::now(),\n+            last_gc: crate::wasm_shims::Instant::now(),\n+            last_gc_check: crate::wasm_shims::Instant::now(),\n             feature_flags: Arc::new(feature_flags),\n             debug_data: Default::default(),\n         };"}, {"sha": "44d1ec77b0cf11c7d5fb9125d35d6c7891e07b2c", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=4d814322132467694e4a38f6b7de50e57f7daf55", "patch": "@@ -40,6 +40,7 @@ mod typing;\n mod matching_brace;\n mod display;\n mod inlay_hints;\n+mod wasm_shims;\n \n #[cfg(test)]\n mod marks;"}, {"sha": "02cdfbc606926b34e5dd56839b8a15c6b1709619", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=4d814322132467694e4a38f6b7de50e57f7daf55", "patch": "@@ -38,6 +38,7 @@ use ra_syntax::{\n     SyntaxKind::{self, *},\n     SyntaxNode, SyntaxNodePtr, TextRange, WalkEvent,\n };\n+#[cfg(not(feature = \"wasm\"))]\n use rayon::prelude::*;\n \n use crate::{db::RootDatabase, FileId, Query};\n@@ -79,10 +80,17 @@ pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol>\n \n     let buf: Vec<Arc<SymbolIndex>> = if query.libs {\n         let snap = Snap(db.snapshot());\n-        db.library_roots()\n+        #[cfg(not(feature = \"wasm\"))]\n+        let buf = db\n+            .library_roots()\n             .par_iter()\n             .map_with(snap, |db, &lib_id| db.0.library_symbols(lib_id))\n-            .collect()\n+            .collect();\n+\n+        #[cfg(feature = \"wasm\")]\n+        let buf = db.library_roots().iter().map(|&lib_id| snap.0.library_symbols(lib_id)).collect();\n+\n+        buf\n     } else {\n         let mut files = Vec::new();\n         for &root in db.local_roots().iter() {\n@@ -91,7 +99,14 @@ pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol>\n         }\n \n         let snap = Snap(db.snapshot());\n-        files.par_iter().map_with(snap, |db, &file_id| db.0.file_symbols(file_id)).collect()\n+        #[cfg(not(feature = \"wasm\"))]\n+        let buf =\n+            files.par_iter().map_with(snap, |db, &file_id| db.0.file_symbols(file_id)).collect();\n+\n+        #[cfg(feature = \"wasm\")]\n+        let buf = files.iter().map(|&file_id| snap.0.file_symbols(file_id)).collect();\n+\n+        buf\n     };\n     query.search(&buf)\n }\n@@ -135,9 +150,12 @@ impl SymbolIndex {\n         fn cmp_key<'a>(s1: &'a FileSymbol) -> impl Ord + 'a {\n             unicase::Ascii::new(s1.name.as_str())\n         }\n-\n+        #[cfg(not(feature = \"wasm\"))]\n         symbols.par_sort_by(|s1, s2| cmp_key(s1).cmp(&cmp_key(s2)));\n \n+        #[cfg(feature = \"wasm\")]\n+        symbols.sort_by(|s1, s2| cmp_key(s1).cmp(&cmp_key(s2)));\n+\n         let mut builder = fst::MapBuilder::memory();\n \n         let mut last_batch_start = 0;\n@@ -169,6 +187,7 @@ impl SymbolIndex {\n         self.map.as_fst().size() + self.symbols.len() * mem::size_of::<FileSymbol>()\n     }\n \n+    #[cfg(not(feature = \"wasm\"))]\n     pub(crate) fn for_files(\n         files: impl ParallelIterator<Item = (FileId, Parse<ast::SourceFile>)>,\n     ) -> SymbolIndex {\n@@ -178,6 +197,16 @@ impl SymbolIndex {\n         SymbolIndex::new(symbols)\n     }\n \n+    #[cfg(feature = \"wasm\")]\n+    pub(crate) fn for_files(\n+        files: impl Iterator<Item = (FileId, Parse<ast::SourceFile>)>,\n+    ) -> SymbolIndex {\n+        let symbols = files\n+            .flat_map(|(file_id, file)| source_file_to_file_symbols(&file.tree(), file_id))\n+            .collect::<Vec<_>>();\n+        SymbolIndex::new(symbols)\n+    }\n+\n     fn range_to_map_value(start: usize, end: usize) -> u64 {\n         debug_assert![start <= (std::u32::MAX as usize)];\n         debug_assert![end <= (std::u32::MAX as usize)];"}, {"sha": "592dddf44b119146399bcc5fcde6cdcfc7ce753c", "filename": "crates/ra_ide_api/src/wasm_shims.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fwasm_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d814322132467694e4a38f6b7de50e57f7daf55/crates%2Fra_ide_api%2Fsrc%2Fwasm_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fwasm_shims.rs?ref=4d814322132467694e4a38f6b7de50e57f7daf55", "patch": "@@ -0,0 +1,17 @@\n+#[cfg(not(feature = \"wasm\"))]\n+pub use std::time::Instant;\n+\n+#[cfg(feature = \"wasm\")]\n+#[derive(Clone, Copy, Debug)]\n+pub struct Instant;\n+\n+#[cfg(feature = \"wasm\")]\n+impl Instant {\n+    pub fn now() -> Self {\n+        Self\n+    }\n+\n+    pub fn elapsed(&self) -> std::time::Duration {\n+        std::time::Duration::new(0, 0)\n+    }\n+}"}]}