{"sha": "5c15ad7fca5140362fe459d7c72661ea59a66b10", "node_id": "C_kwDOAAsO6NoAKDVjMTVhZDdmY2E1MTQwMzYyZmU0NTlkN2M3MjY2MWVhNTlhNjZiMTA", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-11-20T02:48:29Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-01-19T21:33:57Z"}, "message": "NiceRegionError: Use written return type for async fn", "tree": {"sha": "87cb024dd11bcf19dab210049b32b6660790c579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87cb024dd11bcf19dab210049b32b6660790c579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c15ad7fca5140362fe459d7c72661ea59a66b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c15ad7fca5140362fe459d7c72661ea59a66b10", "html_url": "https://github.com/rust-lang/rust/commit/5c15ad7fca5140362fe459d7c72661ea59a66b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c15ad7fca5140362fe459d7c72661ea59a66b10/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64878458841d00882d1673a0b4579b4babaab91f", "url": "https://api.github.com/repos/rust-lang/rust/commits/64878458841d00882d1673a0b4579b4babaab91f", "html_url": "https://github.com/rust-lang/rust/commit/64878458841d00882d1673a0b4579b4babaab91f"}], "stats": {"total": 346, "additions": 181, "deletions": 165}, "files": [{"sha": "a9dbdd483fe6f7c3bd2f6bf61b09eb57febcde2e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2726,6 +2726,10 @@ pub struct FnHeader {\n }\n \n impl FnHeader {\n+    pub fn is_async(&self) -> bool {\n+        matches!(&self.asyncness, IsAsync::Async)\n+    }\n+\n     pub fn is_const(&self) -> bool {\n         matches!(&self.constness, Constness::Const)\n     }\n@@ -3169,7 +3173,7 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n-    pub fn fn_decl(&self) -> Option<&FnDecl<'hir>> {\n+    pub fn fn_decl(&self) -> Option<&'hir FnDecl<'hir>> {\n         match self {\n             Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n@@ -3181,6 +3185,15 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n+    pub fn fn_sig(&self) -> Option<&'hir FnSig<'hir>> {\n+        match self {\n+            Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n+            | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn body_id(&self) -> Option<BodyId> {\n         match self {\n             Node::TraitItem(TraitItem {"}, {"sha": "14ab635a2ae2b05cac26898141ca96f21fd42b83", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -65,9 +65,9 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::dep_graph::DepContext;\n-use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n+    error::TypeError,\n     subst::{GenericArgKind, Subst, SubstsRef},\n     Binder, Region, Ty, TyCtxt, TypeFoldable,\n };"}, {"sha": "5d33d2b4f9b06651c6824c0cd10c6f5b5dca335d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -171,6 +171,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         self.suggest_adding_lifetime_params(sub, ty_sup, ty_sub, &mut err);\n \n+        // TODO: This is only helpful if the lifetime more visible in the impl Future type than in the signature.\n         if let Some(t) = future_return_type {\n             let snip = self\n                 .tcx()"}, {"sha": "b1535701bb399dc86fbda3a1f0c57c1a3b63e75e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -1,6 +1,5 @@\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::Node;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime as rl;\n@@ -25,25 +24,19 @@ pub(crate) fn find_anon_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     region: Region<'tcx>,\n     br: &ty::BoundRegionKind,\n-) -> Option<(&'tcx hir::Ty<'tcx>, &'tcx hir::FnDecl<'tcx>)> {\n+) -> Option<(&'tcx hir::Ty<'tcx>, &'tcx hir::FnSig<'tcx>)> {\n     if let Some(anon_reg) = tcx.is_suitable_region(region) {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(anon_reg.def_id);\n-        let fndecl = match tcx.hir().get(hir_id) {\n-            Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n-            | Node::TraitItem(&hir::TraitItem {\n-                kind: hir::TraitItemKind::Fn(ref m, ..), ..\n-            })\n-            | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(ref m, ..), .. }) => {\n-                &m.decl\n-            }\n-            _ => return None,\n+        let Some(fn_sig) = tcx.hir().get(hir_id).fn_sig() else {\n+            return None\n         };\n \n-        fndecl\n+        fn_sig\n+            .decl\n             .inputs\n             .iter()\n             .find_map(|arg| find_component_for_bound_region(tcx, arg, br))\n-            .map(|ty| (ty, &**fndecl))\n+            .map(|ty| (ty, fn_sig))\n     } else {\n         None\n     }"}, {"sha": "3e87f97f496b8ca0a557779157de77d15936acac", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -4,7 +4,7 @@\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_middle::ty::{self, DefIdTree, Region, Ty};\n+use rustc_middle::ty::{self, Binder, DefIdTree, Region, Ty, TypeFoldable};\n use rustc_span::Span;\n \n /// Information about the anonymous region we are searching for.\n@@ -149,26 +149,41 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     }\n \n     // Here, we check for the case where the anonymous region\n-    // is in the return type.\n+    // is in the return type as written by the user.\n     // FIXME(#42703) - Need to handle certain cases here.\n     pub(super) fn is_return_type_anon(\n         &self,\n         scope_def_id: LocalDefId,\n         br: ty::BoundRegionKind,\n-        decl: &hir::FnDecl<'_>,\n+        hir_sig: &hir::FnSig<'_>,\n     ) -> Option<Span> {\n-        let ret_ty = self.tcx().type_of(scope_def_id);\n-        if let ty::FnDef(_, _) = ret_ty.kind() {\n-            let sig = ret_ty.fn_sig(self.tcx());\n-            let late_bound_regions =\n-                self.tcx().collect_referenced_late_bound_regions(&sig.output());\n-            if late_bound_regions.iter().any(|r| *r == br) {\n-                return Some(decl.output.span());\n-            }\n+        let fn_ty = self.tcx().type_of(scope_def_id);\n+        if let ty::FnDef(_, _) = fn_ty.kind() {\n+            let ret_ty = fn_ty.fn_sig(self.tcx()).output();\n+            let span = hir_sig.decl.output.span();\n+            let future_output = if hir_sig.header.is_async() {\n+                ret_ty.map_bound(|ty| self.infcx.get_impl_future_output_ty(ty)).transpose()\n+            } else {\n+                None\n+            };\n+            return match future_output {\n+                Some(output) if self.includes_region(output, br) => Some(span),\n+                None if self.includes_region(ret_ty, br) => Some(span),\n+                _ => None,\n+            };\n         }\n         None\n     }\n \n+    fn includes_region(\n+        &self,\n+        ty: Binder<'tcx, impl TypeFoldable<'tcx>>,\n+        region: ty::BoundRegionKind,\n+    ) -> bool {\n+        let late_bound_regions = self.tcx().collect_referenced_late_bound_regions(&ty);\n+        late_bound_regions.iter().any(|r| *r == region)\n+    }\n+\n     // Here we check for the case where anonymous region\n     // corresponds to self and if yes, we display E0312.\n     // FIXME(#42700) - Need to format self properly to"}, {"sha": "ac5f99970c8148398b7d105253eccad924fee621", "filename": "src/test/ui/async-await/issue-76547.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,23 +2,17 @@ error[E0623]: lifetime mismatch\n   --> $DIR/issue-76547.rs:20:13\n    |\n LL | async fn fut(bufs: &mut [&mut [u8]]) {\n-   |                          ---------   -\n-   |                          |           |\n-   |                          |           this `async fn` implicitly returns an `impl Future<Output = ()>`\n-   |                          this parameter and the returned future are declared with different lifetimes...\n+   |                    ---------------- these two types are declared with different lifetimes...\n LL |     ListFut(bufs).await\n-   |             ^^^^ ...but data from `bufs` is held across an await point here\n+   |             ^^^^ ...but data from `bufs` flows into `bufs` here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/issue-76547.rs:34:14\n    |\n LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n-   |                           ---------      ---\n-   |                           |              |\n-   |                           |              this `async fn` implicitly returns an `impl Future<Output = i32>`\n-   |                           this parameter and the returned future are declared with different lifetimes...\n+   |                     ---------------- these two types are declared with different lifetimes...\n LL |     ListFut2(bufs).await\n-   |              ^^^^ ...but data from `bufs` is held across an await point here\n+   |              ^^^^ ...but data from `bufs` flows into `bufs` here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32ca7afd82d8b75a90a0b1e60e0955af770dd1f8", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,7 +2,7 @@ error[E0623]: lifetime mismatch\n   --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n-   |         -------- this parameter and the returned future are declared with different lifetimes...\n+   |                        -------- this parameter and the returned future are declared with different lifetimes...\n LL |     ) -> &dyn Foo\n    |          --------\n    |          |"}, {"sha": "6986cd1a5fdacf080f01d3dfc6ff6278f46b88b8", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,28 +2,28 @@ error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ----               ----   ^ ...but data from `f` is held across an await point here\n-   |                          |                  |\n-   |                          |                  this `async fn` implicitly returns an `impl Future<Output = &Foo>`\n-   |                          this parameter and the returned future are declared with different lifetimes...\n+   |                                    ----     ----   ^ ...but data from `f` is held across an await point here\n+   |                                    |        |\n+   |                                    |        this `async fn` implicitly returns an `impl Future<Output = &Foo>`\n+   |                                    this parameter and the returned future are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -----                        -----------------          ^ ...but data from `f` is held across an await point here\n-   |                          |                            |\n-   |                          |                            this `async fn` implicitly returns an `impl Future<Output = (Pin<&Foo>, &Foo)>`\n-   |                          this parameter and the returned future are declared with different lifetimes...\n+   |                                     ----              -----------------          ^ ...but data from `f` is held across an await point here\n+   |                                     |                 |\n+   |                                     |                 this `async fn` implicitly returns an `impl Future<Output = (Pin<&Foo>, &Foo)>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                  -----                   ---   ^^^ ...but data from `arg` is held across an await point here\n-   |                                  |                       |\n-   |                                  |                       this `async fn` implicitly returns an `impl Future<Output = &()>`\n-   |                                  this parameter and the returned future are declared with different lifetimes...\n+   |                                               ------     ---   ^^^ ...but data from `arg` is held across an await point here\n+   |                                               |          |\n+   |                                               |          this `async fn` implicitly returns an `impl Future<Output = &()>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d65a6ade03733c45d60e85db802bc2c352f31884", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,65 +2,65 @@ error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----              ----\n-   |                       |                  |\n-   |                       |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                       this parameter and the returned future are declared with different lifetimes...\n+   |                                 ----     ----\n+   |                                 |        |\n+   |                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                 this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----              ----\n-   |                             |                  |\n-   |                             |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                             this parameter and the returned future are declared with different lifetimes...\n+   |                                       ----     ----\n+   |                                       |        |\n+   |                                       |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ----\n-   |                                     |                   |\n-   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |        |\n+   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ----\n-   |                                     |                   |\n-   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |        |\n+   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ----\n-   |                                             |                    |\n-   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |        |\n+   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                         this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                         -----                ----\n-   |                                         |                    |\n-   |                                         |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                         this parameter and the returned future are declared with different lifetimes...\n+   |                                                     ----     ----\n+   |                                                     |        |\n+   |                                                     |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n "}, {"sha": "c4f7b7eb625eaea408a2a146bf5cff0d46cbd570", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,65 +2,65 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                       ---------              ----\n-   |                       |                      |\n-   |                       |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                       this parameter and the returned future are declared with different lifetimes...\n+   |                                     ----     ----\n+   |                                     |        |\n+   |                                     |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                             ---------              ----\n-   |                             |                      |\n-   |                             |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                             this parameter and the returned future are declared with different lifetimes...\n+   |                                           ----     ----\n+   |                                           |        |\n+   |                                           |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                           this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------               ----\n-   |                                     |                       |\n-   |                                     |                       this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |        |\n+   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                    this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------               ----\n-   |                                     |                       |\n-   |                                     |                       this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |        |\n+   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                    this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------                ----\n-   |                                             |                        |\n-   |                                             |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                             ----     ----\n+   |                                                             |        |\n+   |                                                             |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------                ----\n-   |                                             |                        |\n-   |                                             |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                             ----     ----\n+   |                                                             |        |\n+   |                                                             |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n "}, {"sha": "6c5edcb2b366e761443f569c7db9945595a15be8", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,54 +2,54 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                               -----------              ----\n-   |                               |                        |\n-   |                               |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                               this parameter and the returned future are declared with different lifetimes...\n+   |                                               ----     ----\n+   |                                               |        |\n+   |                                               |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------               ----\n-   |                                       |                         |\n-   |                                       |                         this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                       this parameter and the returned future are declared with different lifetimes...\n+   |                                                        ----     ----\n+   |                                                        |        |\n+   |                                                        |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                        this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------               ----\n-   |                                       |                         |\n-   |                                       |                         this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                       this parameter and the returned future are declared with different lifetimes...\n+   |                                                        ----     ----\n+   |                                                        |        |\n+   |                                                        |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                        this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------                ----\n-   |                                               |                          |\n-   |                                               |                          this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                               this parameter and the returned future are declared with different lifetimes...\n+   |                                                                 ----     ----\n+   |                                                                 |        |\n+   |                                                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                                 this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------                ----\n-   |                                               |                          |\n-   |                                               |                          this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                               this parameter and the returned future are declared with different lifetimes...\n+   |                                                                 ----     ----\n+   |                                                                 |        |\n+   |                                                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                                 this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n "}, {"sha": "fef346b4d2a6ee2add96616565101eaff46a9513", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,76 +2,76 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:23:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----              ----\n-   |                       |                  |\n-   |                       |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                       this parameter and the returned future are declared with different lifetimes...\n+   |                                 ----     ----\n+   |                                 |        |\n+   |                                 |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                 this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----              ----\n-   |                             |                  |\n-   |                             |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                             this parameter and the returned future are declared with different lifetimes...\n+   |                                       ----     ----\n+   |                                       |        |\n+   |                                       |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ----\n-   |                                     |                   |\n-   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |        |\n+   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ----\n-   |                                     |                   |\n-   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                     this parameter and the returned future are declared with different lifetimes...\n+   |                                                ----     ----\n+   |                                                |        |\n+   |                                                |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ----\n-   |                                             |                    |\n-   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |        |\n+   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                         this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ----\n-   |                                             |                    |\n-   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                             this parameter and the returned future are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |        |\n+   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                         this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                            -----                    ---\n-   |                                            |                        |\n-   |                                            |                        this `async fn` implicitly returns an `impl Future<Output = &u8>`\n-   |                                            this parameter and the returned future are declared with different lifetimes...\n+   |                                                             ---     ---\n+   |                                                             |       |\n+   |                                                             |       this `async fn` implicitly returns an `impl Future<Output = &u8>`\n+   |                                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n "}, {"sha": "cc269c0e7aad514067c96902c89febbe1a863a9f", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c15ad7fca5140362fe459d7c72661ea59a66b10/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=5c15ad7fca5140362fe459d7c72661ea59a66b10", "patch": "@@ -2,54 +2,54 @@ error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                               -------              ----\n-   |                               |                    |\n-   |                               |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                               this parameter and the returned future are declared with different lifetimes...\n+   |                                           ----     ----\n+   |                                           |        |\n+   |                                           |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                           this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------               ----\n-   |                                       |                     |\n-   |                                       |                     this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                       this parameter and the returned future are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |        |\n+   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                    this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------               ----\n-   |                                       |                     |\n-   |                                       |                     this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                       this parameter and the returned future are declared with different lifetimes...\n+   |                                                    ----     ----\n+   |                                                    |        |\n+   |                                                    |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                    this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                               -------                ----\n-   |                                               |                      |\n-   |                                               |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                               this parameter and the returned future are declared with different lifetimes...\n+   |                                                             ----     ----\n+   |                                                             |        |\n+   |                                                             |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                           -------                ----\n-   |                                           |                      |\n-   |                                           |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n-   |                                           this parameter and the returned future are declared with different lifetimes...\n+   |                                                         ----     ----\n+   |                                                         |        |\n+   |                                                         |        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                                         this parameter and the returned future are declared with different lifetimes...\n LL |         f\n    |         ^ ...but data from `f` is held across an await point here\n "}]}