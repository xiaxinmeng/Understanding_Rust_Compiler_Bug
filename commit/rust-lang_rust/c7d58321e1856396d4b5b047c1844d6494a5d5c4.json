{"sha": "c7d58321e1856396d4b5b047c1844d6494a5d5c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZDU4MzIxZTE4NTYzOTZkNGI1YjA0N2MxODQ0ZDY0OTRhNWQ1YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-03T23:09:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-03T23:09:30Z"}, "message": "Auto merge of #30149 - mitaa:fqn, r=alexcrichton\n\nFixes #30109", "tree": {"sha": "8b997a1e442b2eefe3cde1fec2df1db97c4908cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b997a1e442b2eefe3cde1fec2df1db97c4908cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d58321e1856396d4b5b047c1844d6494a5d5c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d58321e1856396d4b5b047c1844d6494a5d5c4", "html_url": "https://github.com/rust-lang/rust/commit/c7d58321e1856396d4b5b047c1844d6494a5d5c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d58321e1856396d4b5b047c1844d6494a5d5c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "372e82c9c048c0afff1b702d3969a08cad5d26b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/372e82c9c048c0afff1b702d3969a08cad5d26b7", "html_url": "https://github.com/rust-lang/rust/commit/372e82c9c048c0afff1b702d3969a08cad5d26b7"}, {"sha": "af1ad419e154b5306c7d89b21218fe35607e9f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1ad419e154b5306c7d89b21218fe35607e9f3a", "html_url": "https://github.com/rust-lang/rust/commit/af1ad419e154b5306c7d89b21218fe35607e9f3a"}], "stats": {"total": 94, "additions": 84, "deletions": 10}, "files": [{"sha": "6efe6e608e8ad9cd83188462a2134caaffc48c9b", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=c7d58321e1856396d4b5b047c1844d6494a5d5c4", "patch": "@@ -34,6 +34,8 @@ pub struct TestProps {\n     pub exec_env: Vec<(String,String)> ,\n     // Lines to check if they appear in the expected debugger output\n     pub check_lines: Vec<String> ,\n+    // Build documentation for all specified aux-builds as well\n+    pub build_aux_docs: bool,\n     // Flag to force a crate to be built with the host architecture\n     pub force_host: bool,\n     // Check stdout for error-pattern output as well as stderr\n@@ -59,6 +61,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut run_flags = None;\n     let mut pp_exact = None;\n     let mut check_lines = Vec::new();\n+    let mut build_aux_docs = false;\n     let mut force_host = false;\n     let mut check_stdout = false;\n     let mut no_prefer_dynamic = false;\n@@ -83,6 +86,10 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n \n+        if !build_aux_docs {\n+            build_aux_docs = parse_build_aux_docs(ln);\n+        }\n+\n         if !force_host {\n             force_host = parse_force_host(ln);\n         }\n@@ -144,6 +151,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         aux_builds: aux_builds,\n         exec_env: exec_env,\n         check_lines: check_lines,\n+        build_aux_docs: build_aux_docs,\n         force_host: force_host,\n         check_stdout: check_stdout,\n         no_prefer_dynamic: no_prefer_dynamic,\n@@ -284,6 +292,10 @@ fn parse_force_host(line: &str) -> bool {\n     parse_name_directive(line, \"force-host\")\n }\n \n+fn parse_build_aux_docs(line: &str) -> bool {\n+    parse_name_directive(line, \"build-aux-docs\")\n+}\n+\n fn parse_check_stdout(line: &str) -> bool {\n     parse_name_directive(line, \"check-stdout\")\n }"}, {"sha": "833ab553a132f9d9c0dbaf7b929c1c32e5ecbf89", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c7d58321e1856396d4b5b047c1844d6494a5d5c4", "patch": "@@ -1149,11 +1149,20 @@ fn compile_test(config: &Config, props: &TestProps,\n }\n \n fn document(config: &Config, props: &TestProps,\n-            testfile: &Path) -> (ProcRes, PathBuf) {\n+            testfile: &Path, out_dir: &Path) -> ProcRes {\n+    if props.build_aux_docs {\n+        for rel_ab in &props.aux_builds {\n+            let abs_ab = config.aux_base.join(rel_ab);\n+            let aux_props = header::load_props(&abs_ab);\n+\n+            let auxres = document(config, &aux_props, &abs_ab, out_dir);\n+            if !auxres.status.success() {\n+                return auxres;\n+            }\n+        }\n+    }\n+\n     let aux_dir = aux_output_dir_name(config, testfile);\n-    let out_dir = output_base_name(config, testfile);\n-    let _ = fs::remove_dir_all(&out_dir);\n-    ensure_dir(&out_dir);\n     let mut args = vec![\"-L\".to_owned(),\n                         aux_dir.to_str().unwrap().to_owned(),\n                         \"-o\".to_owned(),\n@@ -1164,7 +1173,7 @@ fn document(config: &Config, props: &TestProps,\n         prog: config.rustdoc_path.to_str().unwrap().to_owned(),\n         args: args,\n     };\n-    (compose_and_run_compiler(config, props, testfile, args, None), out_dir)\n+    compose_and_run_compiler(config, props, testfile, args, None)\n }\n \n fn exec_compiled_test(config: &Config, props: &TestProps,\n@@ -1723,7 +1732,11 @@ fn charset() -> &'static str {\n }\n \n fn run_rustdoc_test(config: &Config, props: &TestProps, testfile: &Path) {\n-    let (proc_res, out_dir) = document(config, props, testfile);\n+    let out_dir = output_base_name(config, testfile);\n+    let _ = fs::remove_dir_all(&out_dir);\n+    ensure_dir(&out_dir);\n+\n+    let proc_res = document(config, props, testfile, &out_dir);\n     if !proc_res.status.success() {\n         fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n     }"}, {"sha": "fba6dea4448b204a3ea6a4b8089b0a22ee1001a6", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=c7d58321e1856396d4b5b047c1844d6494a5d5c4", "patch": "@@ -142,6 +142,7 @@ pub trait CrateStore<'tcx> : Any {\n     fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx>;\n     fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n+    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n     fn item_name(&self, def: DefId) -> ast::Name;\n     fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx>;\n@@ -295,6 +296,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx> { unimplemented!() }\n     fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n+    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n     fn item_name(&self, def: DefId) -> ast::Name { unimplemented!() }\n     fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx> { unimplemented!() }"}, {"sha": "822b11112f2113ab60e257489009edd25de03575", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=c7d58321e1856396d4b5b047c1844d6494a5d5c4", "patch": "@@ -21,14 +21,15 @@ use middle::lang_items;\n use middle::ty::{self, Ty};\n use middle::def_id::{DefId, DefIndex};\n \n-use rustc::front::map as ast_map;\n+use rustc::front::map as hir_map;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n use std::cell::RefCell;\n use std::rc::Rc;\n use std::path::PathBuf;\n use syntax::ast;\n use syntax::attr;\n+use syntax::parse::token;\n use rustc_back::svh::Svh;\n use rustc_back::target::Target;\n use rustc_front::hir;\n@@ -115,7 +116,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_method_arg_names(&cdata, did.index)\n     }\n \n-    fn item_path(&self, def: DefId) -> Vec<ast_map::PathElem> {\n+    fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem> {\n         let cdata = self.get_crate_data(def.krate);\n         let path = decoder::get_item_path(&*cdata, def.index);\n \n@@ -127,6 +128,17 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         })\n     }\n \n+    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> {\n+        let cdata = self.get_crate_data(def.krate);\n+        let path = decoder::get_item_path(&*cdata, def.index);\n+\n+        let mut r = Vec::with_capacity(path.len() + 1);\n+        let crate_name = hir_map::PathMod(token::intern(&cdata.name));\n+        r.push(crate_name);\n+        r.push_all(&path);\n+        r\n+    }\n+\n     fn item_name(&self, def: DefId) -> ast::Name {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_item_name(&self.intr, &cdata, def.index)\n@@ -350,7 +362,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_reachable_ids(&*cdata)\n     }\n \n-    fn def_path(&self, def: DefId) -> ast_map::DefPath\n+    fn def_path(&self, def: DefId) -> hir_map::DefPath\n     {\n         let cdata = self.get_crate_data(def.krate);\n         let path = decoder::def_path(&*cdata, def.index);"}, {"sha": "40e7146670907f46eb451a58dd621bc0e2b3bbfa", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c7d58321e1856396d4b5b047c1844d6494a5d5c4", "patch": "@@ -138,7 +138,7 @@ pub fn load_attrs(cx: &DocContext, tcx: &ty::ctxt,\n pub fn record_extern_fqn(cx: &DocContext, did: DefId, kind: clean::TypeKind) {\n     match cx.tcx_opt() {\n         Some(tcx) => {\n-            let fqn = tcx.sess.cstore.item_path(did);\n+            let fqn = tcx.sess.cstore.extern_item_path(did);\n             let fqn = fqn.into_iter().map(|i| i.to_string()).collect();\n             cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, kind));\n         }"}, {"sha": "59f952a0b29d1b28dd1403bf0e4c0d8843071a3e", "filename": "src/test/auxiliary/issue-30109-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Ftest%2Fauxiliary%2Fissue-30109-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Ftest%2Fauxiliary%2Fissue-30109-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-30109-1.rs?ref=c7d58321e1856396d4b5b047c1844d6494a5d5c4", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Bar;"}, {"sha": "2d33e9323d149779bc3e529c8691051fb64da6ee", "filename": "src/test/rustdoc/issue-30109.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Ftest%2Frustdoc%2Fissue-30109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d58321e1856396d4b5b047c1844d6494a5d5c4/src%2Ftest%2Frustdoc%2Fissue-30109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-30109.rs?ref=c7d58321e1856396d4b5b047c1844d6494a5d5c4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// build-aux-docs\n+// aux-build:issue-30109-1.rs\n+// ignore-cross-compile\n+\n+pub mod quux {\n+    extern crate issue_30109_1 as bar;\n+    use self::bar::Bar;\n+\n+    pub trait Foo {}\n+\n+    // @has issue_30109/quux/trait.Foo.html \\\n+    //          '//a/@href' '../issue_30109_1/struct.Bar.html'\n+    impl Foo for Bar {}\n+}"}]}