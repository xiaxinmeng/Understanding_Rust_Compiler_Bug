{"sha": "af546dba3165b6cf7bb7c521fe27baa49acc13fa", "node_id": "C_kwDOAAsO6NoAKGFmNTQ2ZGJhMzE2NWI2Y2Y3YmI3YzUyMWZlMjdiYWE0OWFjYzEzZmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-04T01:26:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-04T01:26:25Z"}, "message": "Rollup merge of #91481 - est31:let_else, r=jackh726\n\nUse let_else in some more places in rustc_lint\n\nFollow-up of #91018 and #89933 . Also cc #90985 which added the first let_else uses to rustc_lint.", "tree": {"sha": "182cb13387e99c6c2fdcc8a7227fb18a8701a974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/182cb13387e99c6c2fdcc8a7227fb18a8701a974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af546dba3165b6cf7bb7c521fe27baa49acc13fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqsPBCRBK7hj4Ov3rIwAAbXYIAH72dXEg+65gDSDIhSUKq+aZ\nmFxDzR0GhfzTmTjYvVX6Gx0HqR6Lsm5V+h6WunuHvxx6gWtmNnE2I0Vo9Wv0Vb1l\nV5JWCr0GQnr1CH9DC+rilnc19jgSP0YH5Y7J5m7zYWQ+rzX/4g0U9u0wB6TV5Df8\ndpsJRxXV+SarAvDUIYfyUtHGH8dmcijgSl5Vmv8jMtTopYpyuoUYx60B24ES+QDk\nNrQ3TCnNg32qTyWTRH9t12MIPmYtq8S4Obu/xO4BcndDV9RDnOX3GGW5YtGiwj/5\npYgJ2aqQeYbHjtfDKzv9GbdVvApgBWqLDqkyzMKLHxLQwhb24Pwb/CRsSP0A+mk=\n=n0Zq\n-----END PGP SIGNATURE-----\n", "payload": "tree 182cb13387e99c6c2fdcc8a7227fb18a8701a974\nparent f9587b60b60600b73a42a8d89133378a44d84d49\nparent bdc4b462219ec8bad75f545662d09dfe154a6766\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638581185 +0100\ncommitter GitHub <noreply@github.com> 1638581185 +0100\n\nRollup merge of #91481 - est31:let_else, r=jackh726\n\nUse let_else in some more places in rustc_lint\n\nFollow-up of #91018 and #89933 . Also cc #90985 which added the first let_else uses to rustc_lint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af546dba3165b6cf7bb7c521fe27baa49acc13fa", "html_url": "https://github.com/rust-lang/rust/commit/af546dba3165b6cf7bb7c521fe27baa49acc13fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af546dba3165b6cf7bb7c521fe27baa49acc13fa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9587b60b60600b73a42a8d89133378a44d84d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9587b60b60600b73a42a8d89133378a44d84d49", "html_url": "https://github.com/rust-lang/rust/commit/f9587b60b60600b73a42a8d89133378a44d84d49"}, {"sha": "bdc4b462219ec8bad75f545662d09dfe154a6766", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc4b462219ec8bad75f545662d09dfe154a6766", "html_url": "https://github.com/rust-lang/rust/commit/bdc4b462219ec8bad75f545662d09dfe154a6766"}], "stats": {"total": 121, "additions": 52, "deletions": 69}, "files": [{"sha": "4a24f803e8463b2c15bb765e54661389050539ad", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=af546dba3165b6cf7bb7c521fe27baa49acc13fa", "patch": "@@ -79,9 +79,8 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n             let receiver_ty = cx.typeck_results().expr_ty(receiver_arg);\n             let adjustments = cx.typeck_results().expr_adjustments(receiver_arg);\n \n-            let target = match adjustments.last() {\n-                Some(Adjustment { kind: Adjust::Borrow(_), target }) => target,\n-                _ => return,\n+            let Some(Adjustment { kind: Adjust::Borrow(_), target }) = adjustments.last() else {\n+                return\n             };\n \n             let types ="}, {"sha": "5dbcc1655c906f354b4046f0cbed2195ab663a38", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=af546dba3165b6cf7bb7c521fe27baa49acc13fa", "patch": "@@ -609,14 +609,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n                 // If the trait is private, add the impl items to `private_traits` so they don't get\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n-                if let Some(def_id) = real_trait.as_local() {\n-                    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-                    if let Some(Node::Item(item)) = cx.tcx.hir().find(hir_id) {\n-                        if let hir::VisibilityKind::Inherited = item.vis.node {\n-                            for impl_item_ref in items {\n-                                self.private_traits.insert(impl_item_ref.id.hir_id());\n-                            }\n-                        }\n+                let Some(def_id) = real_trait.as_local() else { return };\n+                let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n+                let Some(Node::Item(item)) = cx.tcx.hir().find(hir_id) else { return };\n+                if let hir::VisibilityKind::Inherited = item.vis.node {\n+                    for impl_item_ref in items {\n+                        self.private_traits.insert(impl_item_ref.id.hir_id());\n                     }\n                 }\n                 return;\n@@ -829,9 +827,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {\n             _ => return,\n         }\n \n-        let debug = match cx.tcx.get_diagnostic_item(sym::Debug) {\n-            Some(debug) => debug,\n-            None => return,\n+        let Some(debug) = cx.tcx.get_diagnostic_item(sym::Debug) else {\n+            return\n         };\n \n         if self.impling_types.is_none() {\n@@ -1509,9 +1506,8 @@ impl TypeAliasBounds {\n \n impl<'tcx> LateLintPass<'tcx> for TypeAliasBounds {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-        let (ty, type_alias_generics) = match item.kind {\n-            hir::ItemKind::TyAlias(ref ty, ref generics) => (&*ty, generics),\n-            _ => return,\n+        let hir::ItemKind::TyAlias(ty, type_alias_generics) = &item.kind else {\n+            return\n         };\n         if let hir::TyKind::OpaqueDef(..) = ty.kind {\n             // Bounds are respected for `type X = impl Trait`\n@@ -2266,16 +2262,15 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                         // and should check for them here.\n                         match predicate.bounded_ty.kind {\n                             hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n-                                if let Res::Def(DefKind::TyParam, def_id) = path.res {\n-                                    let index = ty_generics.param_def_id_to_index[&def_id];\n-                                    (\n-                                        Self::lifetimes_outliving_type(inferred_outlives, index),\n-                                        &predicate.bounds,\n-                                        predicate.span,\n-                                    )\n-                                } else {\n-                                    continue;\n-                                }\n+                                let Res::Def(DefKind::TyParam, def_id) = path.res else {\n+                                    continue\n+                                };\n+                                let index = ty_generics.param_def_id_to_index[&def_id];\n+                                (\n+                                    Self::lifetimes_outliving_type(inferred_outlives, index),\n+                                    &predicate.bounds,\n+                                    predicate.span,\n+                                )\n                             }\n                             _ => {\n                                 continue;\n@@ -3216,18 +3211,17 @@ impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n                     for (idx, _) in statement.match_indices(':') {\n                         let possible_label = statement[start_idx..idx].trim();\n                         let mut chars = possible_label.chars();\n-                        if let Some(c) = chars.next() {\n-                            // A label starts with an alphabetic character or . or _ and continues with alphanumeric characters, _, or $\n-                            if (c.is_alphabetic() || matches!(c, '.' | '_'))\n-                                && chars.all(|c| c.is_alphanumeric() || matches!(c, '_' | '$'))\n-                            {\n-                                found_labels.push(possible_label);\n-                            } else {\n-                                // If we encounter a non-label, there cannot be any further labels, so stop checking\n-                                break;\n-                            }\n-                        } else {\n+                        let Some(c) = chars.next() else {\n                             // Empty string means a leading ':' in this section, which is not a label\n+                            break\n+                        };\n+                        // A label starts with an alphabetic character or . or _ and continues with alphanumeric characters, _, or $\n+                        if (c.is_alphabetic() || matches!(c, '.' | '_'))\n+                            && chars.all(|c| c.is_alphanumeric() || matches!(c, '_' | '$'))\n+                        {\n+                            found_labels.push(possible_label);\n+                        } else {\n+                            // If we encounter a non-label, there cannot be any further labels, so stop checking\n                             break;\n                         }\n "}, {"sha": "485728cbfd39d3e0ff85141702d6d0aae1d8dcc9", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=af546dba3165b6cf7bb7c521fe27baa49acc13fa", "patch": "@@ -227,14 +227,12 @@ impl<'s> LintLevelsBuilder<'s> {\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for attr in attrs {\n-            let level = match Level::from_symbol(attr.name_or_empty()) {\n-                None => continue,\n-                Some(lvl) => lvl,\n+            let Some(level) = Level::from_symbol(attr.name_or_empty()) else {\n+                continue\n             };\n \n-            let mut metas = match attr.meta_item_list() {\n-                Some(x) => x,\n-                None => continue,\n+            let Some(mut metas) = attr.meta_item_list() else {\n+                continue\n             };\n \n             if metas.is_empty() {\n@@ -481,9 +479,8 @@ impl<'s> LintLevelsBuilder<'s> {\n                     continue;\n                 }\n \n-                let (lint_attr_name, lint_attr_span) = match *src {\n-                    LintLevelSource::Node(name, span, _) => (name, span),\n-                    _ => continue,\n+                let LintLevelSource::Node(lint_attr_name, lint_attr_span, _) = *src else {\n+                    continue\n                 };\n \n                 let lint = builtin::UNUSED_ATTRIBUTES;"}, {"sha": "600504f7c1280973c018386ecc2afacba0fb2fbc", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=af546dba3165b6cf7bb7c521fe27baa49acc13fa", "patch": "@@ -40,9 +40,8 @@ declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL]);\n impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // We only care about method calls.\n-        let (call, elements) = match expr.kind {\n-            ExprKind::MethodCall(call, _, elements, _) => (call, elements),\n-            _ => return,\n+        let ExprKind::MethodCall(call, _, elements, _) = &expr.kind else {\n+            return\n         };\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n@@ -70,9 +69,8 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         }\n         let param_env = cx.tcx.param_env(trait_id);\n         // Resolve the trait method instance.\n-        let i = match ty::Instance::resolve(cx.tcx, param_env, did, substs) {\n-            Ok(Some(i)) => i,\n-            _ => return,\n+        let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, param_env, did, substs) else {\n+            return\n         };\n         // (Re)check that it implements the noop diagnostic.\n         let Some(name) = cx.tcx.get_diagnostic_name(i.def_id()) else { return };"}, {"sha": "dafff640b36ef3d1bee3d26eb87e14931807e1ed", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=af546dba3165b6cf7bb7c521fe27baa49acc13fa", "patch": "@@ -91,9 +91,8 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n \n         let predicates = cx.tcx.explicit_predicates_of(item.def_id);\n         for &(predicate, span) in predicates.predicates {\n-            let trait_predicate = match predicate.kind().skip_binder() {\n-                Trait(trait_predicate) => trait_predicate,\n-                _ => continue,\n+            let Trait(trait_predicate) = predicate.kind().skip_binder() else {\n+                continue\n             };\n             if trait_predicate.constness == ty::BoundConstness::ConstIfConst {\n                 // `~const Drop` definitely have meanings so avoid linting here.\n@@ -106,9 +105,8 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                     continue;\n                 }\n                 cx.struct_span_lint(DROP_BOUNDS, span, |lint| {\n-                    let needs_drop = match cx.tcx.get_diagnostic_item(sym::needs_drop) {\n-                        Some(needs_drop) => needs_drop,\n-                        None => return,\n+                    let Some(needs_drop) = cx.tcx.get_diagnostic_item(sym::needs_drop) else {\n+                        return\n                     };\n                     let msg = format!(\n                         \"bounds on `{}` are most likely incorrect, consider instead \\\n@@ -123,17 +121,15 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n-        let bounds = match &ty.kind {\n-            hir::TyKind::TraitObject(bounds, _lifetime, _syntax) => bounds,\n-            _ => return,\n+        let hir::TyKind::TraitObject(bounds, _lifetime, _syntax) = &ty.kind else {\n+            return\n         };\n         for bound in &bounds[..] {\n             let def_id = bound.trait_ref.trait_def_id();\n             if cx.tcx.lang_items().drop_trait() == def_id {\n                 cx.struct_span_lint(DYN_DROP, bound.span, |lint| {\n-                    let needs_drop = match cx.tcx.get_diagnostic_item(sym::needs_drop) {\n-                        Some(needs_drop) => needs_drop,\n-                        None => return,\n+                    let Some(needs_drop) = cx.tcx.get_diagnostic_item(sym::needs_drop) else {\n+                        return\n                     };\n                     let msg = format!(\n                         \"types that do not implement `Drop` can still have drop glue, consider \\"}, {"sha": "32ed6dad7f8c349b5f411924759610e540b26a6c", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af546dba3165b6cf7bb7c521fe27baa49acc13fa/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=af546dba3165b6cf7bb7c521fe27baa49acc13fa", "patch": "@@ -1342,11 +1342,10 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n                     | ty::layout::LayoutError::NormalizationFailure(_, _),\n                 ) => return,\n             };\n-            let (variants, tag) = match layout.variants {\n-                Variants::Multiple {\n+            let Variants::Multiple {\n                     tag_encoding: TagEncoding::Direct, tag, ref variants, ..\n-                } => (variants, tag),\n-                _ => return,\n+                } = &layout.variants else {\n+                return\n             };\n \n             let tag_size = tag.value.size(&cx.tcx).bytes();"}]}