{"sha": "a474ebbc4e975683a296739bd9b11b5dde83f808", "node_id": "C_kwDOAAsO6NoAKGE0NzRlYmJjNGU5NzU2ODNhMjk2NzM5YmQ5YjExYjVkZGU4M2Y4MDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T01:13:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T01:13:58Z"}, "message": "Auto merge of #105883 - matthiaskrgr:rollup-v5n53t1, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #105419 (Add tests for #41731)\n - #105447 (Add a test for #103095)\n - #105842 (print argument name in arg mismatch if possible)\n - #105863 (Update browser-ui-test version to reduce GUI tests flakyness)\n - #105867 (remove redundant fn params that were only \"used\" in recursion)\n - #105869 (don't clone Copy types)\n - #105873 (use &str / String literals instead of format!())\n - #105879 (Revert \"Introduce lowering_arena to avoid creating AST nodes on the fly\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "02bf110293be3a45b7b76a76de485813d8c4d46f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bf110293be3a45b7b76a76de485813d8c4d46f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a474ebbc4e975683a296739bd9b11b5dde83f808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a474ebbc4e975683a296739bd9b11b5dde83f808", "html_url": "https://github.com/rust-lang/rust/commit/a474ebbc4e975683a296739bd9b11b5dde83f808", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a474ebbc4e975683a296739bd9b11b5dde83f808/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b094b1ede1cb04095a3210eb2f40f398d4a832a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b094b1ede1cb04095a3210eb2f40f398d4a832a", "html_url": "https://github.com/rust-lang/rust/commit/2b094b1ede1cb04095a3210eb2f40f398d4a832a"}, {"sha": "87a46948251c824f081323d6abf91126ac4d8cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a46948251c824f081323d6abf91126ac4d8cef", "html_url": "https://github.com/rust-lang/rust/commit/87a46948251c824f081323d6abf91126ac4d8cef"}], "stats": {"total": 398, "additions": 236, "deletions": 162}, "files": [{"sha": "9d4c2900eaf41aa12e6edb21621132a071f88374", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -1,6 +1,6 @@\n use super::errors::{InvalidAbi, InvalidAbiSuggestion, MisplacedRelaxTraitBound};\n use super::ResolverAstLoweringExt;\n-use super::{Arena, AstOwner, ImplTraitContext, ImplTraitPosition};\n+use super::{AstOwner, ImplTraitContext, ImplTraitPosition};\n use super::{FnDeclKind, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n@@ -24,7 +24,6 @@ use thin_vec::ThinVec;\n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n     pub(super) resolver: &'a mut ResolverAstLowering,\n-    pub(super) ast_arena: &'a Arena<'static>,\n     pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n }\n@@ -60,7 +59,6 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             tcx: self.tcx,\n             resolver: self.resolver,\n             arena: self.tcx.hir_arena,\n-            ast_arena: self.ast_arena,\n \n             // HirId handling.\n             bodies: Vec::new(),"}, {"sha": "fe0d0747be60c387a9decb81a868ffd5db8a9faf", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -42,7 +42,6 @@ extern crate tracing;\n \n use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait, TraitFnAsync};\n \n-use rustc_arena::declare_arena;\n use rustc_ast::ptr::P;\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n@@ -94,13 +93,6 @@ struct LoweringContext<'a, 'hir> {\n     /// Used to allocate HIR nodes.\n     arena: &'hir hir::Arena<'hir>,\n \n-    /// Used to allocate temporary AST nodes for use during lowering.\n-    /// This allows us to create \"fake\" AST -- these nodes can sometimes\n-    /// be allocated on the stack, but other times we need them to live longer\n-    /// than the current stack frame, so they can be collected into vectors\n-    /// and things like that.\n-    ast_arena: &'a Arena<'static>,\n-\n     /// Bodies inside the owner being lowered.\n     bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,\n     /// Attributes inside the owner being lowered.\n@@ -146,15 +138,6 @@ struct LoweringContext<'a, 'hir> {\n     generics_def_id_map: Vec<FxHashMap<LocalDefId, LocalDefId>>,\n }\n \n-declare_arena!([\n-    [] tys: rustc_ast::Ty,\n-    [] aba: rustc_ast::AngleBracketedArgs,\n-    [] ptr: rustc_ast::PolyTraitRef,\n-    // This _marker field is needed because `declare_arena` creates `Arena<'tcx>` and we need to\n-    // use `'tcx`. If we don't have this we get a compile error.\n-    [] _marker: std::marker::PhantomData<&'tcx ()>,\n-]);\n-\n trait ResolverAstLoweringExt {\n     fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n     fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n@@ -442,13 +425,10 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n         tcx.definitions_untracked().def_index_count(),\n     );\n \n-    let ast_arena = Arena::default();\n-\n     for def_id in ast_index.indices() {\n         item::ItemLowerer {\n             tcx,\n             resolver: &mut resolver,\n-            ast_arena: &ast_arena,\n             ast_index: &ast_index,\n             owners: &mut owners,\n         }\n@@ -1001,8 +981,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n                 GenericArgs::Parenthesized(data) => {\n                     self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    let aba = self.ast_arena.aba.alloc(data.as_angle_bracketed_args());\n-                    self.lower_angle_bracketed_parameter_data(aba, ParamMode::Explicit, itctx).0\n+                    self.lower_angle_bracketed_parameter_data(\n+                        &data.as_angle_bracketed_args(),\n+                        ParamMode::Explicit,\n+                        itctx,\n+                    )\n+                    .0\n                 }\n             };\n             gen_args_ctor.into_generic_args(self)\n@@ -1067,13 +1051,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let node_id = this.next_node_id();\n-                        let ty = this.ast_arena.tys.alloc(Ty {\n-                            id: node_id,\n-                            kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                            span: this.lower_span(constraint.span),\n-                            tokens: None,\n-                        });\n-                        let ty = this.lower_ty(ty, itctx);\n+                        let ty = this.lower_ty(\n+                            &Ty {\n+                                id: node_id,\n+                                kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n+                                span: this.lower_span(constraint.span),\n+                                tokens: None,\n+                            },\n+                            itctx,\n+                        );\n \n                         hir::TypeBindingKind::Equality { term: ty.into() }\n                     })\n@@ -1217,13 +1203,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             && let Some(Res::Def(DefKind::Trait | DefKind::TraitAlias, _)) = partial_res.full_res()\n         {\n             let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n-                let poly_trait_ref = this.ast_arena.ptr.alloc(PolyTraitRef {\n-                    bound_generic_params: vec![],\n-                    trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n-                    span: t.span\n-                });\n                 let bound = this.lower_poly_trait_ref(\n-                    poly_trait_ref,\n+                    &PolyTraitRef {\n+                        bound_generic_params: vec![],\n+                        trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n+                        span: t.span\n+                    },\n                     itctx,\n                 );\n                 let bounds = this.arena.alloc_from_iter([bound]);"}, {"sha": "c780d047992cdb994c709277bbe81443bc3b45e9", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -148,7 +148,7 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Edges<'s, 'tcx, D> {\n         if let Some(p) = self.pointer {\n             self.pointer = self.graph.next_constraints[p];\n \n-            Some(self.constraints[p].clone())\n+            Some(self.constraints[p])\n         } else if let Some(next_static_idx) = self.next_static_idx {\n             self.next_static_idx = if next_static_idx == (self.graph.first_constraints.len() - 1) {\n                 None"}, {"sha": "8d5c5a7124f88aeee0e472d5557d80b74cbea1ad", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -649,7 +649,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if !assign_value.is_empty() {\n             err.span_suggestion_verbose(\n                 sugg_span.shrink_to_hi(),\n-                format!(\"consider assigning a value\"),\n+                \"consider assigning a value\",\n                 format!(\" = {}\", assign_value),\n                 Applicability::MaybeIncorrect,\n             );"}, {"sha": "00f5e8a83972f9c6456c51635867e2a7bfa59227", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                 for extra in extra_info {\n                     match extra {\n                         ExtraConstraintInfo::PlaceholderFromPredicate(span) => {\n-                            err.span_note(*span, format!(\"due to current limitations in the borrow checker, this implies a `'static` lifetime\"));\n+                            err.span_note(*span, \"due to current limitations in the borrow checker, this implies a `'static` lifetime\");\n                         }\n                     }\n                 }"}, {"sha": "b5a0044e9e8cd5512cd9a6041d344a5f515f8bd9", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         for extra in extra_info {\n             match extra {\n                 ExtraConstraintInfo::PlaceholderFromPredicate(span) => {\n-                    diag.span_note(span, format!(\"due to current limitations in the borrow checker, this implies a `'static` lifetime\"));\n+                    diag.span_note(span, \"due to current limitations in the borrow checker, this implies a `'static` lifetime\");\n                 }\n             }\n         }"}, {"sha": "0d03346ef0a5e22f5016e2512d2aa86135d347a0", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -831,7 +831,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if self.eval_verify_bound(\n                 infcx,\n                 param_env,\n-                body,\n                 generic_ty,\n                 type_test.lower_bound,\n                 &type_test.verify_bound,\n@@ -962,14 +961,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // where `ur` is a local bound -- we are sometimes in a\n             // position to prove things that our caller cannot.  See\n             // #53570 for an example.\n-            if self.eval_verify_bound(\n-                infcx,\n-                param_env,\n-                body,\n-                generic_ty,\n-                ur,\n-                &type_test.verify_bound,\n-            ) {\n+            if self.eval_verify_bound(infcx, param_env, generic_ty, ur, &type_test.verify_bound) {\n                 continue;\n             }\n \n@@ -1190,7 +1182,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        body: &Body<'tcx>,\n         generic_ty: Ty<'tcx>,\n         lower_bound: RegionVid,\n         verify_bound: &VerifyBound<'tcx>,\n@@ -1213,25 +1204,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             VerifyBound::AnyBound(verify_bounds) => verify_bounds.iter().any(|verify_bound| {\n-                self.eval_verify_bound(\n-                    infcx,\n-                    param_env,\n-                    body,\n-                    generic_ty,\n-                    lower_bound,\n-                    verify_bound,\n-                )\n+                self.eval_verify_bound(infcx, param_env, generic_ty, lower_bound, verify_bound)\n             }),\n \n             VerifyBound::AllBounds(verify_bounds) => verify_bounds.iter().all(|verify_bound| {\n-                self.eval_verify_bound(\n-                    infcx,\n-                    param_env,\n-                    body,\n-                    generic_ty,\n-                    lower_bound,\n-                    verify_bound,\n-                )\n+                self.eval_verify_bound(infcx, param_env, generic_ty, lower_bound, verify_bound)\n             }),\n         }\n     }"}, {"sha": "8d4a720f8ce9ba8e3b5fa2d10528ae392d4ae1cd", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -612,7 +612,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         let locations = location.to_locations();\n         for constraint in constraints.outlives().iter() {\n-            let mut constraint = constraint.clone();\n+            let mut constraint = *constraint;\n             constraint.locations = locations;\n             if let ConstraintCategory::Return(_)\n             | ConstraintCategory::UseAsConst"}, {"sha": "606f710641fc0e25a17fd6f2b598058328a1e6b4", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -144,7 +144,7 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                     // We prefer the latter because it matches the behavior of\n                     // Clang.\n                     if late && matches!(reg, InlineAsmRegOrRegClass::Reg(_)) {\n-                        constraints.push(format!(\"{}\", reg_to_llvm(reg, Some(&in_value.layout))));\n+                        constraints.push(reg_to_llvm(reg, Some(&in_value.layout)).to_string());\n                     } else {\n                         constraints.push(format!(\"{}\", op_idx[&idx]));\n                     }"}, {"sha": "e4c16ef9efa19f397ea0e7ea169a038af4bdef76", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -2240,7 +2240,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ),\n                     \"s\",\n                 ),\n-                [only] => (format!(\"{only}\"), \"\"),\n+                [only] => (only.to_string(), \"\"),\n                 [] => unreachable!(),\n             };\n             let last_span = *arg_spans.last().unwrap();"}, {"sha": "eee0ba2e5ed2740961b4eeabec9b747a96752e41", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -99,18 +99,17 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n             ty: Ty<'tcx>,\n             tcx: TyCtxt<'tcx>,\n             param_env: ty::ParamEnv<'tcx>,\n-            span: Span,\n         ) -> bool {\n             // We don't just accept all !needs_drop fields, due to semver concerns.\n             match ty.kind() {\n                 ty::Ref(..) => true, // references never drop (even mutable refs, which are non-Copy and hence fail the later check)\n                 ty::Tuple(tys) => {\n                     // allow tuples of allowed types\n-                    tys.iter().all(|ty| allowed_union_field(ty, tcx, param_env, span))\n+                    tys.iter().all(|ty| allowed_union_field(ty, tcx, param_env))\n                 }\n                 ty::Array(elem, _len) => {\n                     // Like `Copy`, we do *not* special-case length 0.\n-                    allowed_union_field(*elem, tcx, param_env, span)\n+                    allowed_union_field(*elem, tcx, param_env)\n                 }\n                 _ => {\n                     // Fallback case: allow `ManuallyDrop` and things that are `Copy`.\n@@ -124,7 +123,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n         for field in &def.non_enum_variant().fields {\n             let field_ty = field.ty(tcx, substs);\n \n-            if !allowed_union_field(field_ty, tcx, param_env, span) {\n+            if !allowed_union_field(field_ty, tcx, param_env) {\n                 let (field_span, ty_span) = match tcx.hir().get_if_local(field.did) {\n                     // We are currently checking the type this field came from, so it must be local.\n                     Some(Node::Field(field)) => (field.span, field.ty.span),"}, {"sha": "8cdd12e4e347abfae0b9b5fb6347d98459187d28", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -1548,7 +1548,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error.clone(),\n+                            coercion_error,\n                             fcx,\n                             parent_id,\n                             expression,\n@@ -1567,7 +1567,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error.clone(),\n+                            coercion_error,\n                             fcx,\n                             id,\n                             expression,\n@@ -1583,7 +1583,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error.clone(),\n+                            coercion_error,\n                         );\n                     }\n                 }"}, {"sha": "479aaf2e1a7b5cc778f3623f86b90e332bb3ecfe", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -163,7 +163,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n-        let mut err = self.err_ctxt().report_mismatched_types(&cause, expected, expr_ty, e.clone());\n+        let mut err = self.err_ctxt().report_mismatched_types(&cause, expected, expr_ty, e);\n \n         let is_insufficiently_polymorphic =\n             matches!(e, TypeError::RegionsInsufficientlyPolymorphic(..));\n@@ -406,7 +406,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n \n                     let note_about_variant_field_privacy = (field_is_local && !field_is_accessible)\n-                        .then(|| format!(\" (its field is private, but it's local to this crate and its privacy can be changed)\"));\n+                        .then(|| \" (its field is private, but it's local to this crate and its privacy can be changed)\".to_string());\n \n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {"}, {"sha": "d1e0964112bc5ae64bf6eeef1be27f2543e13fb1", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, DefIdTree, IsSuggestable, Ty, TypeSuperVisitable, TypeVisitor};\n use rustc_session::Session;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{kw, Ident};\n use rustc_span::{self, sym, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n@@ -1013,7 +1013,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             } else {\n                                 args_span\n                             };\n-                            labels.push((span, format!(\"multiple arguments are missing\")));\n+                            labels.push((span, \"multiple arguments are missing\".to_string()));\n                             suggestion_text = match suggestion_text {\n                                 SuggestionText::None | SuggestionText::Provide(_) => {\n                                     SuggestionText::Provide(true)\n@@ -1141,6 +1141,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"()\".to_string()\n                     } else if expected_ty.is_suggestable(tcx, false) {\n                         format!(\"/* {} */\", expected_ty)\n+                    } else if let Some(fn_def_id) = fn_def_id\n+                        && self.tcx.def_kind(fn_def_id).is_fn_like()\n+                        && let self_implicit = matches!(call_expr.kind, hir::ExprKind::MethodCall(..)) as usize\n+                        && let Some(arg) = self.tcx.fn_arg_names(fn_def_id).get(expected_idx.as_usize() + self_implicit)\n+                        && arg.name != kw::SelfLower\n+                    {\n+                        format!(\"/* {} */\", arg.name)\n                     } else {\n                         \"/* value */\".to_string()\n                     }"}, {"sha": "aef1c7ddcd0816837a116d6bfed1cd9b08c0ef62", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -319,11 +319,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            err.multipart_suggestion_verbose(\n-                format!(\"use parentheses to call these\"),\n-                sugg,\n-                applicability,\n-            );\n+            err.multipart_suggestion_verbose(\"use parentheses to call these\", sugg, applicability);\n \n             true\n         } else {"}, {"sha": "7c5a9a333feba56da059e18d4b90b1cf1563db56", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -1007,7 +1007,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if def_kind == DefKind::AssocFn && lev_candidate.fn_has_self_parameter {\n                             err.span_suggestion(\n                                 span,\n-                                &format!(\"there is a method with a similar name\",),\n+                                \"there is a method with a similar name\",\n                                 lev_candidate.name,\n                                 Applicability::MaybeIncorrect,\n                             );"}, {"sha": "d3e88b1b80ae29a30aec1856320059b54bdbf793", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -2130,7 +2130,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n         {\n             let ty = self.resolve_vars_if_possible(ti.expected);\n-            let is_slice_or_array_or_vector = self.is_slice_or_array_or_vector(&mut err, snippet.clone(), ty);\n+            let is_slice_or_array_or_vector = self.is_slice_or_array_or_vector(ty);\n             match is_slice_or_array_or_vector.1.kind() {\n                 ty::Adt(adt_def, _)\n                     if self.tcx.is_diagnostic_item(sym::Option, adt_def.did())\n@@ -2159,17 +2159,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn is_slice_or_array_or_vector(\n-        &self,\n-        err: &mut Diagnostic,\n-        snippet: String,\n-        ty: Ty<'tcx>,\n-    ) -> (bool, Ty<'tcx>) {\n+    fn is_slice_or_array_or_vector(&self, ty: Ty<'tcx>) -> (bool, Ty<'tcx>) {\n         match ty.kind() {\n             ty::Adt(adt_def, _) if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did()) => {\n                 (true, ty)\n             }\n-            ty::Ref(_, ty, _) => self.is_slice_or_array_or_vector(err, snippet, *ty),\n+            ty::Ref(_, ty, _) => self.is_slice_or_array_or_vector(*ty),\n             ty::Slice(..) | ty::Array(..) => (true, ty),\n             _ => (false, ty),\n         }"}, {"sha": "269fc95420adef2dda18ea8e0ffd0051b7d393d6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -184,7 +184,7 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n             let text = if br.has_name() {\n                 format!(\"the lifetime `{}` as defined here\", br.name)\n             } else {\n-                format!(\"the anonymous lifetime as defined here\")\n+                \"the anonymous lifetime as defined here\".to_string()\n             };\n             (text, sp)\n         }\n@@ -203,7 +203,7 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n                             sp = param.span;\n                         }\n                         let text = if name == kw::UnderscoreLifetime {\n-                            format!(\"the anonymous lifetime as defined here\")\n+                            \"the anonymous lifetime as defined here\".to_string()\n                         } else {\n                             format!(\"the lifetime `{}` as defined here\", name)\n                         };"}, {"sha": "9534bce54ef0e7217fff7b76ba8337eb886093dc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                         );\n                     }\n                     (Some(sub_span), Some(sup_span), _, Some(sup_symbol)) => {\n-                        err.span_note(sub_span, format!(\"the lifetime defined here...\"));\n+                        err.span_note(sub_span, \"the lifetime defined here...\");\n                         err.span_note(\n                             sup_span,\n                             format!(\"...must outlive the lifetime `{sup_symbol}` defined here\"),\n@@ -55,17 +55,11 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                             sub_span,\n                             format!(\"the lifetime `{sub_symbol}` defined here...\"),\n                         );\n-                        err.span_note(\n-                            sup_span,\n-                            format!(\"...must outlive the lifetime defined here\"),\n-                        );\n+                        err.span_note(sup_span, \"...must outlive the lifetime defined here\");\n                     }\n                     (Some(sub_span), Some(sup_span), _, _) => {\n-                        err.span_note(sub_span, format!(\"the lifetime defined here...\"));\n-                        err.span_note(\n-                            sup_span,\n-                            format!(\"...must outlive the lifetime defined here\"),\n-                        );\n+                        err.span_note(sub_span, \"the lifetime defined here...\");\n+                        err.span_note(sup_span, \"...must outlive the lifetime defined here\");\n                     }\n                     _ => {}\n                 }"}, {"sha": "1d0c7f5b7a388fab828bc2cfddffcb74da82bda9", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -127,7 +127,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn register_plugins(&self) -> Result<&Query<(ast::Crate, Lrc<LintStore>)>> {\n         self.register_plugins.compute(|| {\n-            let crate_name = self.crate_name()?.peek().clone();\n+            let crate_name = *self.crate_name()?.peek();\n             let krate = self.parse()?.take();\n \n             let empty: &(dyn Fn(&Session, &mut LintStore) + Sync + Send) = &|_, _| {};"}, {"sha": "cd19e65b6fc3275d5b608569ec9e08136c579c36", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {\n                             |lint| {\n                                 let suggested_ident =\n                                     format!(\"{}{}\", binding_annot.prefix_str(), ident);\n-                                lint.set_arg(\"ident\", ident.clone()).span_suggestion(\n+                                lint.set_arg(\"ident\", ident).span_suggestion(\n                                     fieldpat.span,\n                                     fluent::suggestion,\n                                     suggested_ident,\n@@ -2052,7 +2052,7 @@ impl KeywordIdents {\n             ident.span,\n             fluent::lint_builtin_keyword_idents,\n             |lint| {\n-                lint.set_arg(\"kw\", ident.clone()).set_arg(\"next\", next_edition).span_suggestion(\n+                lint.set_arg(\"kw\", ident).set_arg(\"next\", next_edition).span_suggestion(\n                     ident.span,\n                     fluent::suggestion,\n                     format!(\"r#{}\", ident),"}, {"sha": "182734fa9fc8fc72970117c5c32e7746de87e62e", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -71,11 +71,11 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n                 );\n             } else {\n                 lint.multipart_suggestion_verbose(\n-                    format!(\"to check pattern in a loop use `while let`\"),\n+                    \"to check pattern in a loop use `while let`\",\n                     vec![\n                         // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n                         (expr.span.with_hi(pat.span.lo()), format!(\"while let {var}(\")),\n-                        (pat.span.between(arg.span), format!(\") = \")),\n+                        (pat.span.between(arg.span), \") = \".to_string()),\n                     ],\n                     Applicability::MaybeIncorrect\n                 );\n@@ -95,7 +95,7 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n                 vec![\n                     // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n                     (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n-                    (pat.span.between(arg.span), format!(\") = \")),\n+                    (pat.span.between(arg.span), \") = \".to_string()),\n                 ],\n                 Applicability::MaybeIncorrect,\n             )"}, {"sha": "9ff944864047753173598cdbe56778f022e2e919", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -39,10 +39,8 @@ impl<'a> DiagnosticDerive<'a> {\n             let init = match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n-                        .help(format!(\n-                            \"specify the slug as the first argument to the `#[diag(...)]` \\\n-                            attribute, such as `#[diag(hir_analysis_example_error)]`\",\n-                        ))\n+                        .help(\"specify the slug as the first argument to the `#[diag(...)]` \\\n+                            attribute, such as `#[diag(hir_analysis_example_error)]`\")\n                         .emit();\n                     return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                 }\n@@ -133,10 +131,8 @@ impl<'a> LintDiagnosticDerive<'a> {\n             match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n-                        .help(format!(\n-                            \"specify the slug as the first argument to the attribute, such as \\\n-                            `#[diag(compiletest_example)]`\",\n-                        ))\n+                        .help(\"specify the slug as the first argument to the attribute, such as \\\n+                            `#[diag(compiletest_example)]`\")\n                         .emit();\n                     DiagnosticDeriveError::ErrorHandled.to_compile_error()\n                 }"}, {"sha": "4af423f2a22e4be1f1c886882f57acad83ac6a6e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Symbol {\n                     s.emit_str(self.as_str());\n                 }\n                 Entry::Occupied(o) => {\n-                    let x = o.get().clone();\n+                    let x = *o.get();\n                     s.emit_u8(SYMBOL_OFFSET);\n                     s.emit_usize(x);\n                 }"}, {"sha": "1ebfdbbd6ef000b61ba2f04c191247b10f7999e7", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -448,15 +448,15 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n \n             // FIXME: this is a poor version of `pretty_print_const_value`.\n             let fmt_val = |val: &ConstValue<'tcx>| match val {\n-                ConstValue::ZeroSized => format!(\"<ZST>\"),\n+                ConstValue::ZeroSized => \"<ZST>\".to_string(),\n                 ConstValue::Scalar(s) => format!(\"Scalar({:?})\", s),\n-                ConstValue::Slice { .. } => format!(\"Slice(..)\"),\n-                ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n+                ConstValue::Slice { .. } => \"Slice(..)\".to_string(),\n+                ConstValue::ByRef { .. } => \"ByRef(..)\".to_string(),\n             };\n \n             let fmt_valtree = |valtree: &ty::ValTree<'tcx>| match valtree {\n                 ty::ValTree::Leaf(leaf) => format!(\"ValTree::Leaf({:?})\", leaf),\n-                ty::ValTree::Branch(_) => format!(\"ValTree::Branch(..)\"),\n+                ty::ValTree::Branch(_) => \"ValTree::Branch(..)\".to_string(),\n             };\n \n             let val = match literal {"}, {"sha": "7c39a93a8eb9e4b90c97a482c9c4849ed4d1608a", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -76,7 +76,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         let Some((otherwise, rest)) = arms.split_last() else {\n             return Err(ParseError {\n                 span,\n-                item_description: format!(\"no arms\"),\n+                item_description: \"no arms\".to_string(),\n                 expected: \"at least one arm\".to_string(),\n             })\n         };"}, {"sha": "c4e605c18521746f38c1633396243095c69a5f71", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -965,7 +965,7 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Symbol {\n                     s.emit_str(self.as_str());\n                 }\n                 Entry::Occupied(o) => {\n-                    let x = o.get().clone();\n+                    let x = *o.get();\n                     s.emit_u8(SYMBOL_OFFSET);\n                     s.emit_usize(x);\n                 }"}, {"sha": "600308b6508db9931c3b6974acf48493421d8bfc", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -277,11 +277,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 let override_suggestion =\n                     if [\"true\", \"false\"].contains(&item_str.to_string().to_lowercase().as_str()) {\n                         let item_typo = item_str.to_string().to_lowercase();\n-                        Some((\n-                            item_span,\n-                            \"you may want to use a bool value instead\",\n-                            format!(\"{}\", item_typo),\n-                        ))\n+                        Some((item_span, \"you may want to use a bool value instead\", item_typo))\n                     // FIXME(vincenzopalazzo): make the check smarter,\n                     // and maybe expand with levenshtein distance checks\n                     } else if item_str.as_str() == \"printf\" {\n@@ -2324,7 +2320,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         let message = format!(\"consider introducing lifetime `{}` here\", name);\n                         should_continue = suggest(err, false, span, &message, sugg);\n                     } else {\n-                        let message = format!(\"consider introducing a named lifetime parameter\");\n+                        let message = \"consider introducing a named lifetime parameter\";\n                         should_continue = suggest(err, false, span, &message, sugg);\n                     }\n                 }"}, {"sha": "4861ee746aae3158de435a078c5d83a2143d454a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -1491,7 +1491,7 @@ impl<'a> Resolver<'a> {\n             label_res_map: self.label_res_map.clone(),\n             lifetimes_res_map: self.lifetimes_res_map.clone(),\n             extra_lifetime_params_map: self.extra_lifetime_params_map.clone(),\n-            next_node_id: self.next_node_id.clone(),\n+            next_node_id: self.next_node_id,\n             node_id_to_def_id: self.node_id_to_def_id.clone(),\n             def_id_to_node_id: self.def_id_to_node_id.clone(),\n             trait_map: self.trait_map.clone(),"}, {"sha": "948632ccc6c40a87082f62225f42bd1b09ee68ba", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -159,13 +159,12 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             orig_env,\n             orig_env,\n             &mut fresh_preds,\n-            false,\n         ) else {\n             return AutoTraitResult::NegativeImpl;\n         };\n \n         let (full_env, full_user_env) = self\n-            .evaluate_predicates(&infcx, trait_did, ty, new_env, user_env, &mut fresh_preds, true)\n+            .evaluate_predicates(&infcx, trait_did, ty, new_env, user_env, &mut fresh_preds)\n             .unwrap_or_else(|| {\n                 panic!(\"Failed to fully process: {:?} {:?} {:?}\", ty, trait_did, orig_env)\n             });\n@@ -247,7 +246,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         user_env: ty::ParamEnv<'tcx>,\n         fresh_preds: &mut FxHashSet<ty::Predicate<'tcx>>,\n-        only_projections: bool,\n     ) -> Option<(ty::ParamEnv<'tcx>, ty::ParamEnv<'tcx>)> {\n         let tcx = infcx.tcx;\n \n@@ -322,7 +320,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         fresh_preds,\n                         &mut predicates,\n                         &mut select,\n-                        only_projections,\n                     ) {\n                         return None;\n                     }\n@@ -600,7 +597,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         fresh_preds: &mut FxHashSet<ty::Predicate<'tcx>>,\n         predicates: &mut VecDeque<ty::PolyTraitPredicate<'tcx>>,\n         selcx: &mut SelectionContext<'_, 'tcx>,\n-        only_projections: bool,\n     ) -> bool {\n         let dummy_cause = ObligationCause::dummy();\n \n@@ -744,7 +740,6 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                     fresh_preds,\n                                     predicates,\n                                     selcx,\n-                                    only_projections,\n                                 ) {\n                                     return false;\n                                 }"}, {"sha": "f8efe9bfa9f827b3d98c2544ebb544d73849e339", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -138,10 +138,10 @@ pub fn is_const_evaluatable<'tcx>(\n                 } else if uv.has_non_region_param() {\n                     NotConstEvaluatable::MentionsParam\n                 } else {\n-                    let guar = infcx.tcx.sess.delay_span_bug(\n-                        span,\n-                        format!(\"Missing value for constant, but no error reported?\"),\n-                    );\n+                    let guar = infcx\n+                        .tcx\n+                        .sess\n+                        .delay_span_bug(span, \"Missing value for constant, but no error reported?\");\n                     NotConstEvaluatable::Error(guar)\n                 };\n "}, {"sha": "8f317beaa77dd15c32a76fb0656ca732d8d1f3ae", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -1574,7 +1574,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     &error.obligation.cause,\n                     expected_found.expected,\n                     expected_found.found,\n-                    err.clone(),\n+                    *err,\n                 )\n                 .emit();\n             }\n@@ -1583,7 +1583,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     &error.obligation.cause,\n                     expected_found.expected,\n                     expected_found.found,\n-                    err.clone(),\n+                    *err,\n                 );\n                 let code = error.obligation.cause.code().peel_derives().peel_match_impls();\n                 if let ObligationCauseCode::BindingObligation(..)\n@@ -2332,9 +2332,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 // get rid of :: between Trait and <type>\n                                 // must be '::' between them, otherwise the parser won't accept the code\n                                 suggestions.push((between_span, \"\".to_string(),));\n-                                suggestions.push((generic_arg.span_ext.shrink_to_hi(), format!(\">\")));\n+                                suggestions.push((generic_arg.span_ext.shrink_to_hi(), \">\".to_string()));\n                             } else {\n-                                suggestions.push((trait_path_segment.ident.span.shrink_to_hi(), format!(\">\")));\n+                                suggestions.push((trait_path_segment.ident.span.shrink_to_hi(), \">\".to_string()));\n                             }\n                             err.multipart_suggestion(\n                                 message,"}, {"sha": "5a4c87c56d5da382f863f4dd2b8f684509004c01", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -2740,7 +2740,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             }\n                             ty::Closure(def_id, _) => err.span_note(\n                                 self.tcx.def_span(def_id),\n-                                &format!(\"required because it's used within this closure\"),\n+                                \"required because it's used within this closure\",\n                             ),\n                             _ => err.note(&msg),\n                         };\n@@ -3386,7 +3386,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n             err.span_note(\n                 multi_span,\n-                format!(\"the method call chain might not have had the expected associated types\"),\n+                \"the method call chain might not have had the expected associated types\",\n             );\n         }\n     }"}, {"sha": "78fcceb5f2cb512a3d7ec17e201577a988ab0e9f", "filename": "compiler/rustc_transmute/src/layout/nfa.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fnfa.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -123,7 +123,7 @@ where\n             let fix_state = |state| if state == other.start { self.accepting } else { state };\n             let entry = transitions.entry(fix_state(source)).or_default();\n             for (edge, destinations) in transition {\n-                let entry = entry.entry(edge.clone()).or_default();\n+                let entry = entry.entry(edge).or_default();\n                 for destination in destinations {\n                     entry.insert(fix_state(destination));\n                 }\n@@ -147,7 +147,7 @@ where\n             }\n             let entry = transitions.entry(source).or_default();\n             for (edge, destinations) in transition {\n-                let entry = entry.entry(edge.clone()).or_default();\n+                let entry = entry.entry(*edge).or_default();\n                 for &(mut destination) in destinations {\n                     // if dest is accepting state of `other`, replace with accepting state of `self`\n                     if destination == other.accepting {"}, {"sha": "475434e5aef8639abff9ae9cae4b20c84c0df7f6", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -1 +1 @@\n-0.13.2\n\\ No newline at end of file\n+0.13.4\n\\ No newline at end of file"}, {"sha": "062b3768858dda362aa894cc03428c42b283e495", "filename": "src/test/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -94,8 +94,8 @@ LL |     let closure = |x| x;\n    |                   ^^^\n help: provide the argument\n    |\n-LL |     closure(/* value */);\n-   |            ~~~~~~~~~~~~~\n+LL |     closure(/* x */);\n+   |            ~~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0340f39243fa8ec379e7d832ae933dd48a787b5c", "filename": "src/test/ui/borrowck/issue-103095.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fborrowck%2Fissue-103095.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fborrowck%2Fissue-103095.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103095.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+trait FnOnceForGenericRef<T>: FnOnce(&T) -> Self::FnOutput {\n+    type FnOutput;\n+}\n+\n+impl<T, R, F: FnOnce(&T) -> R> FnOnceForGenericRef<T> for F {\n+    type FnOutput = R;\n+}\n+\n+struct Data<T, D: FnOnceForGenericRef<T>> {\n+    value: Option<T>,\n+    output: Option<D::FnOutput>,\n+}\n+\n+impl<T, D: FnOnceForGenericRef<T>> Data<T, D> {\n+    fn new(value: T, f: D) -> Self {\n+        let output = f(&value);\n+        Self {\n+            value: Some(value),\n+            output: Some(output),\n+        }\n+    }\n+}\n+\n+fn test() {\n+    Data::new(String::new(), |_| {});\n+}\n+\n+fn main() {}"}, {"sha": "163737895fea2219c7cd6b70687f3bd7ecd78abc", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -11,8 +11,8 @@ LL |     let f = |x| x * 3;\n    |             ^^^\n help: provide the argument\n    |\n-LL |     let a = f(/* value */);\n-   |              ~~~~~~~~~~~~~\n+LL |     let a = f(/* x */);\n+   |              ~~~~~~~~~\n \n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13"}, {"sha": "0f051be2128b0486cfcda81f474e94ac8f563db3", "filename": "src/test/ui/higher-rank-trait-bounds/issue-58451.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.stderr?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -11,8 +11,8 @@ LL | fn f<I>(i: I)\n    |    ^    ----\n help: provide the argument\n    |\n-LL |     f(&[f(/* value */)]);\n-   |          ~~~~~~~~~~~~~\n+LL |     f(&[f(/* i */)]);\n+   |          ~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "d52e6e7e9eb8250d08f05ee544d9efa72c8fd8a1", "filename": "src/test/ui/infinite/issue-41731-infinite-macro-print.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-print.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z trace-macros\n+\n+#![recursion_limit = \"5\"]\n+\n+fn main() {\n+    macro_rules! stack {\n+        ($overflow:expr) => {\n+            print!(stack!($overflow));\n+            //~^ ERROR recursion limit reached while expanding\n+            //~| ERROR format argument must be a string literal\n+        };\n+    }\n+\n+    stack!(\"overflow\");\n+}"}, {"sha": "e30b2039d69c946cb724ff35afdea59c02a179e1", "filename": "src/test/ui/infinite/issue-41731-infinite-macro-print.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-print.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-print.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-print.stderr?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -0,0 +1,38 @@\n+error: recursion limit reached while expanding `$crate::format_args!`\n+  --> $DIR/issue-41731-infinite-macro-print.rs:14:5\n+   |\n+LL |     stack!(\"overflow\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"10\"]` attribute to your crate (`issue_41731_infinite_macro_print`)\n+   = note: this error originates in the macro `print` which comes from the expansion of the macro `stack` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: trace_macro\n+  --> $DIR/issue-41731-infinite-macro-print.rs:14:5\n+   |\n+LL |     stack!(\"overflow\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expanding `stack! { \"overflow\" }`\n+   = note: to `print! (stack! (\"overflow\")) ;`\n+   = note: expanding `print! { stack! (\"overflow\") }`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args! (stack! (\"overflow\"))) ; }`\n+   = note: expanding `stack! { \"overflow\" }`\n+   = note: to `print! (stack! (\"overflow\")) ;`\n+   = note: expanding `print! { stack! (\"overflow\") }`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args! (stack! (\"overflow\"))) ; }`\n+\n+error: format argument must be a string literal\n+  --> $DIR/issue-41731-infinite-macro-print.rs:14:5\n+   |\n+LL |     stack!(\"overflow\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `print` which comes from the expansion of the macro `stack` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: you might be missing a string literal to format with\n+   |\n+LL |             print!(\"{}\", stack!($overflow));\n+   |                    +++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3c2b7ee023b5ca62ed34f67537fbd80c0d63b181", "filename": "src/test/ui/infinite/issue-41731-infinite-macro-println.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-println.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-println.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-println.rs?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z trace-macros\n+\n+#![recursion_limit = \"5\"]\n+\n+fn main() {\n+    macro_rules! stack {\n+        ($overflow:expr) => {\n+            println!(stack!($overflow));\n+            //~^ ERROR recursion limit reached while expanding\n+            //~| ERROR format argument must be a string literal\n+        };\n+    }\n+\n+    stack!(\"overflow\");\n+}"}, {"sha": "66b466dafa0dac832998f239e619ff8964ca95b4", "filename": "src/test/ui/infinite/issue-41731-infinite-macro-println.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Fissue-41731-infinite-macro-println.stderr?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -0,0 +1,38 @@\n+error: recursion limit reached while expanding `$crate::format_args_nl!`\n+  --> $DIR/issue-41731-infinite-macro-println.rs:14:5\n+   |\n+LL |     stack!(\"overflow\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"10\"]` attribute to your crate (`issue_41731_infinite_macro_println`)\n+   = note: this error originates in the macro `println` which comes from the expansion of the macro `stack` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: trace_macro\n+  --> $DIR/issue-41731-infinite-macro-println.rs:14:5\n+   |\n+LL |     stack!(\"overflow\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expanding `stack! { \"overflow\" }`\n+   = note: to `println! (stack! (\"overflow\")) ;`\n+   = note: expanding `println! { stack! (\"overflow\") }`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args_nl! (stack! (\"overflow\"))) ; }`\n+   = note: expanding `stack! { \"overflow\" }`\n+   = note: to `println! (stack! (\"overflow\")) ;`\n+   = note: expanding `println! { stack! (\"overflow\") }`\n+   = note: to `{ $crate :: io :: _print($crate :: format_args_nl! (stack! (\"overflow\"))) ; }`\n+\n+error: format argument must be a string literal\n+  --> $DIR/issue-41731-infinite-macro-println.rs:14:5\n+   |\n+LL |     stack!(\"overflow\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `println` which comes from the expansion of the macro `stack` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: you might be missing a string literal to format with\n+   |\n+LL |             println!(\"{}\", stack!($overflow));\n+   |                      +++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1232b83c39171af52a5702476cc7823ef1e50816", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a474ebbc4e975683a296739bd9b11b5dde83f808/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=a474ebbc4e975683a296739bd9b11b5dde83f808", "patch": "@@ -13,7 +13,7 @@ help: provide the argument\n    |\n LL ~     needlesArr.iter().fold(|x, y| {\n LL +\n-LL ~     }, /* value */);\n+LL ~     }, /* f */);\n    |\n \n error: aborting due to previous error"}]}