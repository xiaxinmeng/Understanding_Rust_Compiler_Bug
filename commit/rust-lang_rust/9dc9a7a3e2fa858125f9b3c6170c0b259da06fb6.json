{"sha": "9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzlhN2EzZTJmYTg1ODEyNWY5YjNjNjE3MGMwYjI1OWRhMDZmYjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-06T16:28:42Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-06T16:28:42Z"}, "message": "Merge #1496\n\n1496: Add trait obligations for where clauses when calling functions/methods r=matklad a=flodiebold\n\nE.g. if we call `foo<T: Into<u32>>(x)`, that adds an obligation that `x: Into<u32>`, etc., which sometimes allows type inference to make further progress.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "cce758eabcbcfbb1bc1673601477a9c86580cb2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce758eabcbcfbb1bc1673601477a9c86580cb2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "html_url": "https://github.com/rust-lang/rust/commit/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "219e0e8c8d6672feaab2f19b7c3280d5967360e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/219e0e8c8d6672feaab2f19b7c3280d5967360e4", "html_url": "https://github.com/rust-lang/rust/commit/219e0e8c8d6672feaab2f19b7c3280d5967360e4"}, {"sha": "f854a29c9adcfeaa7164928ff91daab9ca9a063c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f854a29c9adcfeaa7164928ff91daab9ca9a063c", "html_url": "https://github.com/rust-lang/rust/commit/f854a29c9adcfeaa7164928ff91daab9ca9a063c"}], "stats": {"total": 213, "additions": 171, "deletions": 42}, "files": [{"sha": "0e6e3fdb734bd3fbd4eafafbbcd164096f1aa65f", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -163,10 +163,10 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     #[salsa::invoke(crate::ty::callable_item_sig)]\n     fn callable_item_signature(&self, def: CallableDef) -> FnSig;\n \n-    #[salsa::invoke(crate::ty::generic_predicates)]\n+    #[salsa::invoke(crate::ty::generic_predicates_query)]\n     fn generic_predicates(&self, def: GenericDef) -> Arc<[GenericPredicate]>;\n \n-    #[salsa::invoke(crate::ty::generic_defaults)]\n+    #[salsa::invoke(crate::ty::generic_defaults_query)]\n     fn generic_defaults(&self, def: GenericDef) -> Substs;\n \n     #[salsa::invoke(crate::expr::body_with_source_map_query)]"}, {"sha": "521e47090d6b8e5ddd53429656d621dd597fc276", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -11,8 +11,8 @@ use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     path::Path,\n     type_ref::TypeRef,\n-    AdtDef, AsName, Container, Enum, Function, HasSource, ImplBlock, Name, Struct, Trait,\n-    TypeAlias, Union,\n+    AdtDef, AsName, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct,\n+    Trait, TypeAlias, Union,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -50,8 +50,11 @@ pub enum GenericDef {\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n     ImplBlock(ImplBlock),\n+    // enum variants cannot have generics themselves, but their parent enums\n+    // can, and this makes some code easier to write\n+    EnumVariant(EnumVariant),\n }\n-impl_froms!(GenericDef: Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock);\n+impl_froms!(GenericDef: Function, Struct, Union, Enum, Trait, TypeAlias, ImplBlock, EnumVariant);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -62,6 +65,7 @@ impl GenericParams {\n         let parent = match def {\n             GenericDef::Function(it) => it.container(db).map(GenericDef::from),\n             GenericDef::TypeAlias(it) => it.container(db).map(GenericDef::from),\n+            GenericDef::EnumVariant(it) => Some(it.parent_enum(db).into()),\n             GenericDef::Struct(_)\n             | GenericDef::Union(_)\n             | GenericDef::Enum(_)\n@@ -86,6 +90,7 @@ impl GenericParams {\n             }\n             GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).ast, start),\n+            GenericDef::EnumVariant(_) => {}\n         }\n \n         Arc::new(generics)\n@@ -184,6 +189,7 @@ impl GenericDef {\n             GenericDef::Trait(inner) => inner.resolver(db),\n             GenericDef::TypeAlias(inner) => inner.resolver(db),\n             GenericDef::ImplBlock(inner) => inner.resolver(db),\n+            GenericDef::EnumVariant(inner) => inner.parent_enum(db).resolver(db),\n         }\n     }\n }"}, {"sha": "e2a7639b02da55e9b45f8ba6792a9d8e99226abb", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -221,6 +221,18 @@ impl Resolver {\n     pub(crate) fn krate(&self) -> Option<Crate> {\n         self.module().map(|t| t.0.krate())\n     }\n+\n+    pub(crate) fn where_predicates_in_scope<'a>(\n+        &'a self,\n+    ) -> impl Iterator<Item = &'a crate::generics::WherePredicate> + 'a {\n+        self.scopes\n+            .iter()\n+            .filter_map(|scope| match scope {\n+                Scope::GenericParams(params) => Some(params),\n+                _ => None,\n+            })\n+            .flat_map(|params| params.where_predicates.iter())\n+    }\n }\n \n impl Resolver {"}, {"sha": "d8c7945e1d46108d152b92f397089fafa0e79286", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -23,8 +23,8 @@ pub(crate) use autoderef::autoderef;\n pub(crate) use infer::{infer_query, InferTy, InferenceResult};\n pub use lower::CallableDef;\n pub(crate) use lower::{\n-    callable_item_sig, generic_defaults, generic_predicates, type_for_def, type_for_field,\n-    TypableDef,\n+    callable_item_sig, generic_defaults_query, generic_predicates_query, type_for_def,\n+    type_for_field, TypableDef,\n };\n pub(crate) use traits::ProjectionPredicate;\n "}, {"sha": "e79e5e2239901b7fcb42998f4a5e4ee4f73711c5", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -849,8 +849,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n         if let Ty::Apply(a_ty) = callable_ty {\n             if let TypeCtor::FnDef(def) = a_ty.ctor {\n+                let generic_predicates = self.db.generic_predicates(def.into());\n+                for predicate in generic_predicates.iter() {\n+                    let predicate = predicate.clone().subst(&a_ty.parameters);\n+                    if let Some(obligation) = Obligation::from_predicate(predicate) {\n+                        self.obligations.push(obligation);\n+                    }\n+                }\n                 // add obligation for trait implementation, if this is a trait method\n-                // FIXME also register obligations from where clauses from the trait or impl and method\n                 match def {\n                     CallableDef::Function(f) => {\n                         if let Some(trait_) = f.parent_trait(self.db) {\n@@ -992,7 +998,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         (Vec::new(), Ty::Unknown)\n                     }\n                 };\n-                // FIXME register obligations from where clauses from the function\n+                self.register_obligations_for_call(&callee_ty);\n                 let param_iter = param_tys.into_iter().chain(repeat(Ty::Unknown));\n                 for (arg, param) in args.iter().zip(param_iter) {\n                     self.infer_expr(*arg, &Expectation::has_type(param));"}, {"sha": "b48ada760f24d8ef7f82855b3d9f9f92b97d1094", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -318,15 +318,13 @@ pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n }\n \n /// Resolve the where clause(s) of an item with generics.\n-pub(crate) fn generic_predicates(\n+pub(crate) fn generic_predicates_query(\n     db: &impl HirDatabase,\n     def: GenericDef,\n ) -> Arc<[GenericPredicate]> {\n     let resolver = def.resolver(db);\n-    let generic_params = def.generic_params(db);\n-    let predicates = generic_params\n-        .where_predicates\n-        .iter()\n+    let predicates = resolver\n+        .where_predicates_in_scope()\n         .map(|pred| {\n             TraitRef::for_where_predicate(db, &resolver, pred)\n                 .map_or(GenericPredicate::Error, GenericPredicate::Implemented)\n@@ -336,7 +334,7 @@ pub(crate) fn generic_predicates(\n }\n \n /// Resolve the default type params from generics\n-pub(crate) fn generic_defaults(db: &impl HirDatabase, def: GenericDef) -> Substs {\n+pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDef) -> Substs {\n     let resolver = def.resolver(db);\n     let generic_params = def.generic_params(db);\n \n@@ -511,3 +509,13 @@ pub enum CallableDef {\n     EnumVariant(EnumVariant),\n }\n impl_froms!(CallableDef: Function, Struct, EnumVariant);\n+\n+impl From<CallableDef> for GenericDef {\n+    fn from(def: CallableDef) -> GenericDef {\n+        match def {\n+            CallableDef::Function(f) => f.into(),\n+            CallableDef::Struct(s) => s.into(),\n+            CallableDef::EnumVariant(e) => e.into(),\n+        }\n+    }\n+}"}, {"sha": "aacd94a2675080dcda0517e27afdc6358b1787cd", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 113, "deletions": 21, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -2232,16 +2232,18 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[86; 87) 't': T\n-[92; 94) '{}': ()\n-[105; 144) '{     ...(s); }': ()\n-[115; 116) 's': S<{unknown}>\n-[119; 120) 'S': S<{unknown}>(T) -> S<T>\n-[119; 129) 'S(unknown)': S<{unknown}>\n-[121; 128) 'unknown': {unknown}\n-[135; 138) 'foo': fn foo<S<{unknown}>>(T) -> ()\n-[135; 141) 'foo(s)': ()\n-[139; 140) 's': S<{unknown}>\"###\n+   \u22ee\n+   \u22ee[86; 87) 't': T\n+   \u22ee[92; 94) '{}': ()\n+   \u22ee[105; 144) '{     ...(s); }': ()\n+   \u22ee[115; 116) 's': S<u32>\n+   \u22ee[119; 120) 'S': S<u32>(T) -> S<T>\n+   \u22ee[119; 129) 'S(unknown)': S<u32>\n+   \u22ee[121; 128) 'unknown': u32\n+   \u22ee[135; 138) 'foo': fn foo<S<u32>>(T) -> ()\n+   \u22ee[135; 141) 'foo(s)': ()\n+   \u22ee[139; 140) 's': S<u32>\n+    \"###\n     );\n }\n \n@@ -2259,17 +2261,19 @@ fn test() {\n }\n \"#),\n         @r###\"\n-[87; 88) 't': T\n-[98; 100) '{}': ()\n-[111; 163) '{     ...(s); }': ()\n-[121; 122) 's': S<{unknown}>\n-[125; 126) 'S': S<{unknown}>(T) -> S<T>\n-[125; 135) 'S(unknown)': S<{unknown}>\n-[127; 134) 'unknown': {unknown}\n-[145; 146) 'x': u32\n-[154; 157) 'foo': fn foo<u32, S<{unknown}>>(T) -> U\n-[154; 160) 'foo(s)': u32\n-[158; 159) 's': S<{unknown}>\"###\n+   \u22ee\n+   \u22ee[87; 88) 't': T\n+   \u22ee[98; 100) '{}': ()\n+   \u22ee[111; 163) '{     ...(s); }': ()\n+   \u22ee[121; 122) 's': S<u32>\n+   \u22ee[125; 126) 'S': S<u32>(T) -> S<T>\n+   \u22ee[125; 135) 'S(unknown)': S<u32>\n+   \u22ee[127; 134) 'unknown': u32\n+   \u22ee[145; 146) 'x': u32\n+   \u22ee[154; 157) 'foo': fn foo<u32, S<u32>>(T) -> U\n+   \u22ee[154; 160) 'foo(s)': u32\n+   \u22ee[158; 159) 's': S<u32>\n+    \"###\n     );\n }\n \n@@ -2822,6 +2826,94 @@ fn test(s: S) {\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn obligation_from_function_clause() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+struct S;\n+\n+trait Trait<T> {}\n+impl Trait<u32> for S {}\n+\n+fn foo<T: Trait<U>, U>(t: T) -> U {}\n+\n+fn test(s: S) {\n+    foo(s)<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"u32\");\n+}\n+\n+#[test]\n+fn obligation_from_method_clause() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+struct S;\n+\n+trait Trait<T> {}\n+impl Trait<isize> for S {}\n+\n+struct O;\n+impl O {\n+    fn foo<T: Trait<U>, U>(&self, t: T) -> U {}\n+}\n+\n+fn test() {\n+    O.foo(S)<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"isize\");\n+}\n+\n+#[test]\n+fn obligation_from_self_method_clause() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+struct S;\n+\n+trait Trait<T> {}\n+impl Trait<i64> for S {}\n+\n+impl S {\n+    fn foo<U>(&self) -> U where Self: Trait<U> {}\n+}\n+\n+fn test() {\n+    S.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"i64\");\n+}\n+\n+#[test]\n+fn obligation_from_impl_clause() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+struct S;\n+\n+trait Trait<T> {}\n+impl Trait<&str> for S {}\n+\n+struct O<T>;\n+impl<U, T: Trait<U>> O<T> {\n+    fn foo(&self) -> U {}\n+}\n+\n+fn test(o: O<S>) {\n+    o.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"&str\");\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}, {"sha": "23a26a9718832bc06f17128f885d6636d343dcb2", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -7,7 +7,7 @@ use parking_lot::Mutex;\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use super::{Canonical, ProjectionTy, TraitRef, Ty};\n+use super::{Canonical, GenericPredicate, ProjectionTy, TraitRef, Ty};\n use crate::{db::HirDatabase, Crate, ImplBlock, Trait};\n \n use self::chalk::{from_chalk, ToChalk};\n@@ -78,6 +78,15 @@ pub enum Obligation {\n     // Projection(ProjectionPredicate),\n }\n \n+impl Obligation {\n+    pub fn from_predicate(predicate: GenericPredicate) -> Option<Obligation> {\n+        match predicate {\n+            GenericPredicate::Implemented(trait_ref) => Some(Obligation::Trait(trait_ref)),\n+            GenericPredicate::Error => None,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct ProjectionPredicate {\n     pub projection_ty: ProjectionTy,"}, {"sha": "4c3744b442524dbd2ef803db840e8a5e5a79b1f3", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=9dc9a7a3e2fa858125f9b3c6170c0b259da06fb6", "patch": "@@ -428,11 +428,7 @@ pub(crate) fn struct_datum_query(\n                 CallableDef::Struct(s) => s.module(db).krate(db),\n                 CallableDef::EnumVariant(v) => v.parent_enum(db).module(db).krate(db),\n             } != Some(krate);\n-            let generic_def: GenericDef = match callable {\n-                CallableDef::Function(f) => f.into(),\n-                CallableDef::Struct(s) => s.into(),\n-                CallableDef::EnumVariant(v) => v.parent_enum(db).into(),\n-            };\n+            let generic_def: GenericDef = callable.into();\n             let generic_params = generic_def.generic_params(db);\n             let bound_vars = Substs::bound_vars(&generic_params);\n             let where_clauses = convert_where_clauses(db, generic_def, &bound_vars);"}]}