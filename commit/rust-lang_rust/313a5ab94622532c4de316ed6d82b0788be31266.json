{"sha": "313a5ab94622532c4de316ed6d82b0788be31266", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxM2E1YWI5NDYyMjUzMmM0ZGUzMTZlZDZkODJiMDc4OGJlMzEyNjY=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-03T16:41:40Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-16T17:06:05Z"}, "message": "move interner_key macro", "tree": {"sha": "9d734cdaee97f68d7d6029a954897ef3c2526b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d734cdaee97f68d7d6029a954897ef3c2526b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313a5ab94622532c4de316ed6d82b0788be31266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313a5ab94622532c4de316ed6d82b0788be31266", "html_url": "https://github.com/rust-lang/rust/commit/313a5ab94622532c4de316ed6d82b0788be31266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313a5ab94622532c4de316ed6d82b0788be31266/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cacd87efd34f8b8c3c0db5e5b2192ddd32a6ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cacd87efd34f8b8c3c0db5e5b2192ddd32a6ec5", "html_url": "https://github.com/rust-lang/rust/commit/7cacd87efd34f8b8c3c0db5e5b2192ddd32a6ec5"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "5b5768d1d1c7590ef55b7fd37b8645bd04a6ad3d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=313a5ab94622532c4de316ed6d82b0788be31266", "patch": "@@ -22,14 +22,6 @@ use core::to_str::ToStr;\n use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n \n-/* can't import macros yet, so this is copied from token.rs. See its comment\n- * there. */\n-macro_rules! interner_key (\n-    () => (cast::transmute::<(uint, uint),\n-            &fn(+v: @@::parse::token::ident_interner)>(\n-        (-3 as uint, 0u)))\n-)\n-\n // an identifier contains an index into the interner\n // table and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros"}, {"sha": "706821e198536887d5bdec88b165e20bc52d3e97", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=313a5ab94622532c4de316ed6d82b0788be31266", "patch": "@@ -374,16 +374,6 @@ pub impl ident_interner {\n     }\n }\n \n-/* Key for thread-local data for sneaking interner information to the\n- * encoder/decoder. It sounds like a hack because it is one.\n- * Bonus ultra-hack: functions as keys don't work across crates,\n- * so we have to use a unique number. See taskgroup_key! in task.rs\n- * for another case of this. */\n-macro_rules! interner_key (\n-    () => (cast::transmute::<(uint, uint), &fn(+v: @@token::ident_interner)>(\n-        (-3 as uint, 0u)))\n-)\n-\n pub fn mk_ident_interner() -> @ident_interner {\n     unsafe {\n         match task::local_data::local_data_get(interner_key!()) {"}, {"sha": "c1b857a6cdba70a815bf73c25c4612dd1198cb4d", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=313a5ab94622532c4de316ed6d82b0788be31266", "patch": "@@ -30,6 +30,13 @@ extern mod std(vers = \"0.7-pre\");\n \n use core::*;\n \n+// allow the interner_key macro\n+// to escape this module:\n+#[macro_escape]\n+pub mod util {\n+    pub mod interner;\n+}\n+\n pub mod syntax {\n     pub use ext;\n     pub use parse;\n@@ -45,9 +52,6 @@ pub mod ast_util;\n pub mod ast_map;\n pub mod visit;\n pub mod fold;\n-pub mod util {\n-    pub mod interner;\n-}\n \n \n #[path = \"parse/mod.rs\"]"}, {"sha": "75bcac1b163062812c98942e8f2fa31f65c19d46", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313a5ab94622532c4de316ed6d82b0788be31266/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=313a5ab94622532c4de316ed6d82b0788be31266", "patch": "@@ -12,6 +12,9 @@\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n \n+// allow the interner_key macro to escape this module:\n+#[macro_escape];\n+\n use core::prelude::*;\n use core::hashmap::HashMap;\n \n@@ -66,6 +69,17 @@ pub impl<T:Eq + IterBytes + Hash + Const + Copy> Interner<T> {\n     fn len(&self) -> uint { let vect = &*self.vect; vect.len() }\n }\n \n+/* Key for thread-local data for sneaking interner information to the\n+* encoder/decoder. It sounds like a hack because it is one.\n+* Bonus ultra-hack: functions as keys don't work across crates,\n+* so we have to use a unique number. See taskgroup_key! in task.rs\n+* for another case of this. */\n+macro_rules! interner_key (\n+    () => (cast::transmute::<(uint, uint),\n+           &fn(+v: @@::parse::token::ident_interner)>(\n+        (-3 as uint, 0u)))\n+)\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -109,4 +123,4 @@ mod tests {\n         assert_eq!(i.get(2), @~\"Carol\");\n         assert_eq!(i.intern(@~\"Bob\"), 1);\n     }\n-}\n\\ No newline at end of file\n+}"}]}