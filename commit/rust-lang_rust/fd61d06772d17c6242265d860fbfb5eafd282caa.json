{"sha": "fd61d06772d17c6242265d860fbfb5eafd282caa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNjFkMDY3NzJkMTdjNjI0MjI2NWQ4NjBmYmZiNWVhZmQyODJjYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-01T09:15:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-01T09:15:12Z"}, "message": "Auto merge of #71704 - RalfJung:miri-error-print, r=oli-obk\n\nMiri: tweak error print\n\nI started by adjusting the \"invalid use of int as pointer\" message (it wasn't really clear what is invalid about the use). But then I realized that these are all `Debug` impls we use for these errors, for some reason, so I fixed that to use `Display` instead.\n\n~~This includes https://github.com/rust-lang/rust/pull/71590 (to get the `Display` impl for `Pointer`), so the diff will look better once that finally lands. Here's the [relative diff](https://github.com/RalfJung/rust/compare/e72ebf5119e833b70231c3f2f8c7ca4904b1f0a3...RalfJung:miri-error-print).~~\n\nr? @oli-obk", "tree": {"sha": "3a741cd536f7537639fef81a96fba861d5e3aa1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a741cd536f7537639fef81a96fba861d5e3aa1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd61d06772d17c6242265d860fbfb5eafd282caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd61d06772d17c6242265d860fbfb5eafd282caa", "html_url": "https://github.com/rust-lang/rust/commit/fd61d06772d17c6242265d860fbfb5eafd282caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd61d06772d17c6242265d860fbfb5eafd282caa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0bacc694d7d8175804bb6f690cb846bfa4a9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0bacc694d7d8175804bb6f690cb846bfa4a9ee", "html_url": "https://github.com/rust-lang/rust/commit/bd0bacc694d7d8175804bb6f690cb846bfa4a9ee"}, {"sha": "cce0cb3c39e9a23cdb6d09d4258de2eded5b8f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/cce0cb3c39e9a23cdb6d09d4258de2eded5b8f21", "html_url": "https://github.com/rust-lang/rust/commit/cce0cb3c39e9a23cdb6d09d4258de2eded5b8f21"}], "stats": {"total": 169, "additions": 87, "deletions": 82}, "files": [{"sha": "40454ce3b2db82cfc36e659c2cb1135f45cdc62b", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 71, "deletions": 40, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -1,4 +1,4 @@\n-use super::{AllocId, CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n+use super::{AllocId, Pointer, RawConst, ScalarMaybeUndef};\n \n use crate::mir::interpret::ConstValue;\n use crate::ty::layout::LayoutError;\n@@ -285,7 +285,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     TransmuteSizeDiff(Ty<'tcx>, Ty<'tcx>),\n }\n \n-impl fmt::Debug for InvalidProgramInfo<'_> {\n+impl fmt::Display for InvalidProgramInfo<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use InvalidProgramInfo::*;\n         match self {\n@@ -304,14 +304,38 @@ impl fmt::Debug for InvalidProgramInfo<'_> {\n     }\n }\n \n+/// Details of why a pointer had to be in-bounds.\n+#[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum CheckInAllocMsg {\n+    MemoryAccessTest,\n+    NullPointerTest,\n+    PointerArithmeticTest,\n+    InboundsTest,\n+}\n+\n+impl fmt::Display for CheckInAllocMsg {\n+    /// When this is printed as an error the context looks like this\n+    /// \"{test name} failed: pointer must be in-bounds at offset...\"\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"{}\",\n+            match *self {\n+                CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n+                CheckInAllocMsg::NullPointerTest => \"NULL pointer test\",\n+                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n+                CheckInAllocMsg::InboundsTest => \"inbounds test\",\n+            }\n+        )\n+    }\n+}\n+\n /// Error information for when the program caused Undefined Behavior.\n pub enum UndefinedBehaviorInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Ub(String),\n     /// Unreachable code was executed.\n     Unreachable,\n-    /// An enum discriminant was set to a value which was outside the range of valid values.\n-    InvalidDiscriminant(ScalarMaybeUndef),\n     /// A slice/array index projection went out-of-bounds.\n     BoundsCheckFailed {\n         len: u64,\n@@ -335,17 +359,15 @@ pub enum UndefinedBehaviorInfo {\n         msg: CheckInAllocMsg,\n         allocation_size: Size,\n     },\n+    /// Using an integer as a pointer in the wrong way.\n+    DanglingIntPointer(u64, CheckInAllocMsg),\n     /// Used a pointer with bad alignment.\n     AlignmentCheckFailed {\n         required: Align,\n         has: Align,\n     },\n-    /// Using an integer as a pointer in the wrong way.\n-    InvalidIntPointerUsage(u64),\n     /// Writing to read-only memory.\n     WriteToReadOnly(AllocId),\n-    /// Using a pointer-not-to-a-function as function pointer.\n-    InvalidFunctionPointer(Pointer),\n     // Trying to access the data behind a function pointer.\n     DerefFunctionPointer(AllocId),\n     /// The value validity check found a problem.\n@@ -356,6 +378,10 @@ pub enum UndefinedBehaviorInfo {\n     InvalidBool(u8),\n     /// Using a non-character `u32` as character.\n     InvalidChar(u32),\n+    /// An enum discriminant was set to a value which was outside the range of valid values.\n+    InvalidDiscriminant(ScalarMaybeUndef),\n+    /// Using a pointer-not-to-a-function as function pointer.\n+    InvalidFunctionPointer(Pointer),\n     /// Using uninitialized data where it is not allowed.\n     InvalidUndefBytes(Option<Pointer>),\n     /// Working with a local that is not currently live.\n@@ -367,29 +393,26 @@ pub enum UndefinedBehaviorInfo {\n     },\n }\n \n-impl fmt::Debug for UndefinedBehaviorInfo {\n+impl fmt::Display for UndefinedBehaviorInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n             Ub(msg) => write!(f, \"{}\", msg),\n             Unreachable => write!(f, \"entering unreachable code\"),\n-            InvalidDiscriminant(val) => write!(f, \"encountering invalid enum discriminant {}\", val),\n-            BoundsCheckFailed { ref len, ref index } => write!(\n-                f,\n-                \"indexing out of bounds: the len is {:?} but the index is {:?}\",\n-                len, index\n-            ),\n+            BoundsCheckFailed { ref len, ref index } => {\n+                write!(f, \"indexing out of bounds: the len is {} but the index is {}\", len, index)\n+            }\n             DivisionByZero => write!(f, \"dividing by zero\"),\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n             InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n             UnterminatedCString(p) => write!(\n                 f,\n-                \"reading a null-terminated string starting at {:?} with no null found before end of allocation\",\n+                \"reading a null-terminated string starting at {} with no null found before end of allocation\",\n                 p,\n             ),\n             PointerUseAfterFree(a) => {\n-                write!(f, \"pointer to {:?} was dereferenced after this allocation got freed\", a)\n+                write!(f, \"pointer to {} was dereferenced after this allocation got freed\", a)\n             }\n             PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n                 f,\n@@ -400,25 +423,34 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 ptr.alloc_id,\n                 allocation_size.bytes()\n             ),\n-            InvalidIntPointerUsage(0) => write!(f, \"invalid use of NULL pointer\"),\n-            InvalidIntPointerUsage(i) => write!(f, \"invalid use of {} as a pointer\", i),\n+            DanglingIntPointer(_, CheckInAllocMsg::NullPointerTest) => {\n+                write!(f, \"NULL pointer is not allowed for this operation\")\n+            }\n+            DanglingIntPointer(i, msg) => {\n+                write!(f, \"{} failed: 0x{:x} is not a valid pointer\", msg, i)\n+            }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,\n                 \"accessing memory with alignment {}, but alignment {} is required\",\n                 has.bytes(),\n                 required.bytes()\n             ),\n-            WriteToReadOnly(a) => write!(f, \"writing to {:?} which is read-only\", a),\n+            WriteToReadOnly(a) => write!(f, \"writing to {} which is read-only\", a),\n+            DerefFunctionPointer(a) => write!(f, \"accessing {} which contains a function\", a),\n+            ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n+            InvalidBool(b) => {\n+                write!(f, \"interpreting an invalid 8-bit value as a bool: 0x{:2x}\", b)\n+            }\n+            InvalidChar(c) => {\n+                write!(f, \"interpreting an invalid 32-bit value as a char: 0x{:8x}\", c)\n+            }\n+            InvalidDiscriminant(val) => write!(f, \"enum value has invalid discriminant: {}\", val),\n             InvalidFunctionPointer(p) => {\n-                write!(f, \"using {:?} as function pointer but it does not point to a function\", p)\n+                write!(f, \"using {} as function pointer but it does not point to a function\", p)\n             }\n-            DerefFunctionPointer(a) => write!(f, \"accessing {:?} which contains a function\", a),\n-            ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n-            InvalidBool(b) => write!(f, \"interpreting an invalid 8-bit value as a bool: {}\", b),\n-            InvalidChar(c) => write!(f, \"interpreting an invalid 32-bit value as a char: {}\", c),\n             InvalidUndefBytes(Some(p)) => write!(\n                 f,\n-                \"reading uninitialized memory at {:?}, but this operation requires initialized memory\",\n+                \"reading uninitialized memory at {}, but this operation requires initialized memory\",\n                 p\n             ),\n             InvalidUndefBytes(None) => write!(\n@@ -455,7 +487,7 @@ pub enum UnsupportedOpInfo {\n     ReadBytesAsPointer,\n }\n \n-impl fmt::Debug for UnsupportedOpInfo {\n+impl fmt::Display for UnsupportedOpInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UnsupportedOpInfo::*;\n         match self {\n@@ -481,7 +513,7 @@ pub enum ResourceExhaustionInfo {\n     StepLimitReached,\n }\n \n-impl fmt::Debug for ResourceExhaustionInfo {\n+impl fmt::Display for ResourceExhaustionInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use ResourceExhaustionInfo::*;\n         match self {\n@@ -499,7 +531,6 @@ impl fmt::Debug for ResourceExhaustionInfo {\n pub trait AsAny: Any {\n     fn as_any(&self) -> &dyn Any;\n }\n-\n impl<T: Any> AsAny for T {\n     #[inline(always)]\n     fn as_any(&self) -> &dyn Any {\n@@ -508,7 +539,7 @@ impl<T: Any> AsAny for T {\n }\n \n /// A trait for machine-specific errors (or other \"machine stop\" conditions).\n-pub trait MachineStopType: AsAny + fmt::Debug + Send {}\n+pub trait MachineStopType: AsAny + fmt::Display + Send {}\n impl MachineStopType for String {}\n \n impl dyn MachineStopType {\n@@ -538,21 +569,21 @@ pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n impl fmt::Display for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // Forward `Display` to `Debug`.\n-        fmt::Debug::fmt(self, f)\n+        use InterpError::*;\n+        match *self {\n+            Unsupported(ref msg) => write!(f, \"{}\", msg),\n+            InvalidProgram(ref msg) => write!(f, \"{}\", msg),\n+            UndefinedBehavior(ref msg) => write!(f, \"{}\", msg),\n+            ResourceExhaustion(ref msg) => write!(f, \"{}\", msg),\n+            MachineStop(ref msg) => write!(f, \"{}\", msg),\n+        }\n     }\n }\n \n+// Forward `Debug` to `Display`, so it does not look awful.\n impl fmt::Debug for InterpError<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use InterpError::*;\n-        match *self {\n-            Unsupported(ref msg) => write!(f, \"{:?}\", msg),\n-            InvalidProgram(ref msg) => write!(f, \"{:?}\", msg),\n-            UndefinedBehavior(ref msg) => write!(f, \"{:?}\", msg),\n-            ResourceExhaustion(ref msg) => write!(f, \"{:?}\", msg),\n-            MachineStop(ref msg) => write!(f, \"{:?}\", msg),\n-        }\n+        fmt::Display::fmt(self, f)\n     }\n }\n "}, {"sha": "6b86bbfd19722a168f52550da846dd0f49986bc5", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -117,16 +117,16 @@ use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Instance, Ty, TyCtxt};\n \n pub use self::error::{\n-    struct_error, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled, FrameInfo,\n-    InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n+    struct_error, CheckInAllocMsg, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled,\n+    FrameInfo, InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n     ResourceExhaustionInfo, UndefinedBehaviorInfo, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUndef};\n \n pub use self::allocation::{Allocation, AllocationExtra, Relocations, UndefMask};\n \n-pub use self::pointer::{CheckInAllocMsg, Pointer, PointerArithmetic};\n+pub use self::pointer::{Pointer, PointerArithmetic};\n \n /// Uniquely identifies one of the following:\n /// - A constant"}, {"sha": "19642278b44e355841aa7716700c3a0a36950844", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -4,33 +4,7 @@ use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n \n use std::convert::TryFrom;\n-use std::fmt::{self, Display};\n-\n-/// Used by `check_in_alloc` to indicate context of check\n-#[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum CheckInAllocMsg {\n-    MemoryAccessTest,\n-    NullPointerTest,\n-    PointerArithmeticTest,\n-    InboundsTest,\n-}\n-\n-impl Display for CheckInAllocMsg {\n-    /// When this is printed as an error the context looks like this\n-    /// \"{test name} failed: pointer must be in-bounds at offset...\"\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"{}\",\n-            match *self {\n-                CheckInAllocMsg::MemoryAccessTest => \"Memory access\",\n-                CheckInAllocMsg::NullPointerTest => \"Null pointer test\",\n-                CheckInAllocMsg::PointerArithmeticTest => \"Pointer arithmetic\",\n-                CheckInAllocMsg::InboundsTest => \"Inbounds test\",\n-            }\n-        )\n-    }\n-}\n+use std::fmt;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Pointer arithmetic"}, {"sha": "39b0218c5d73fda1ad1c3c6c12724d3a4a904a0e", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -10,8 +10,8 @@ use rustc_middle::ty::{self, Ty};\n use rustc_span::def_id::DefId;\n \n use super::{\n-    AllocId, Allocation, AllocationExtra, Frame, ImmTy, InterpCx, InterpResult, Memory, MemoryKind,\n-    OpTy, Operand, PlaceTy, Pointer, Scalar,\n+    AllocId, Allocation, AllocationExtra, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult,\n+    Memory, MemoryKind, OpTy, Operand, PlaceTy, Pointer, Scalar,\n };\n \n /// Data returned by Machine::stack_pop,\n@@ -346,7 +346,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         Err((if int == 0 {\n             // This is UB, seriously.\n-            err_ub!(InvalidIntPointerUsage(0))\n+            err_ub!(DanglingIntPointer(0, CheckInAllocMsg::InboundsTest))\n         } else {\n             // This is just something we cannot support during const-eval.\n             err_unsup!(ReadBytesAsPointer)"}, {"sha": "d1881524172cc840036c12d2882255ae58a32737", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -365,7 +365,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 assert!(size.bytes() == 0);\n                 // Must be non-NULL.\n                 if bits == 0 {\n-                    throw_ub!(InvalidIntPointerUsage(0))\n+                    throw_ub!(DanglingIntPointer(0, msg))\n                 }\n                 // Must be aligned.\n                 if let Some(align) = align {"}, {"sha": "a9586b74a56d7314c0aa2a40f1f6f09a7f31dc79", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -360,10 +360,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     place.ptr, size, align\n                 );\n                 match err.kind {\n-                    err_ub!(InvalidIntPointerUsage(0)) => {\n+                    err_ub!(DanglingIntPointer(0, _)) => {\n                         throw_validation_failure!(format_args!(\"a NULL {}\", kind), self.path)\n                     }\n-                    err_ub!(InvalidIntPointerUsage(i)) => throw_validation_failure!(\n+                    err_ub!(DanglingIntPointer(i, _)) => throw_validation_failure!(\n                         format_args!(\"a {} to unallocated address {}\", kind, i),\n                         self.path\n                     ),"}, {"sha": "2673bab20289919809b0794f305d875a7e4b1c83", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -43,8 +43,8 @@ macro_rules! throw_machine_stop_str {\n         // We make a new local type for it. The type itself does not carry any information,\n         // but its vtable (for the `MachineStopType` trait) does.\n         struct Zst;\n-        // Debug-printing this type shows the desired string.\n-        impl std::fmt::Debug for Zst {\n+        // Printing this type shows the desired string.\n+        impl std::fmt::Display for Zst {\n             fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n                 write!(f, $($tt)*)\n             }"}, {"sha": "38e9bdecdb9d2b8245a5f840f4618dc1fbfaf1f3", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc11 which has size 1\n+   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc11 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "e56459a7bdeb52abd299b071f3e937284c2cd178", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -186,13 +186,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:121:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid use of NULL pointer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:125:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n \n error: aborting due to 24 previous errors\n "}, {"sha": "92ecea5fdacddb8f46cf44b7126f33c22b269ae4", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd61d06772d17c6242265d860fbfb5eafd282caa/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=fd61d06772d17c6242265d860fbfb5eafd282caa", "patch": "@@ -66,7 +66,7 @@ error: any use of this value will cause an error\n LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n-   |           invalid use of NULL pointer\n+   |           inbounds test failed: 0x0 is not a valid pointer\n    |           inside `std::ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |           inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:37:14\n    | "}]}