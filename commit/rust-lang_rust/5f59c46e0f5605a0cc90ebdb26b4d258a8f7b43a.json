{"sha": "5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTljNDZlMGY1NjA1YTBjYzkwZWJkYjI2YjRkMjU4YThmN2I0M2E=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-01T06:51:20Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-01T08:39:00Z"}, "message": "rc: from_{owned,const} -> from_{send,freeze}", "tree": {"sha": "a642382ac27fced1c462830e069ff705fcd9d12a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a642382ac27fced1c462830e069ff705fcd9d12a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a", "html_url": "https://github.com/rust-lang/rust/commit/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "html_url": "https://github.com/rust-lang/rust/commit/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "86fbbd4c3cc597f62e4978a9e26904cd295d7b65", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a", "patch": "@@ -53,13 +53,13 @@ impl<T> Rc<T> {\n }\n \n impl<T: Send> Rc<T> {\n-    pub fn from_owned(value: T) -> Rc<T> {\n+    pub fn from_send(value: T) -> Rc<T> {\n         unsafe { Rc::new(value) }\n     }\n }\n \n impl<T: Freeze> Rc<T> {\n-    pub fn from_const(value: T) -> Rc<T> {\n+    pub fn from_freeze(value: T) -> Rc<T> {\n         unsafe { Rc::new(value) }\n     }\n }\n@@ -111,7 +111,7 @@ mod test_rc {\n \n     #[test]\n     fn test_clone() {\n-        let x = Rc::from_owned(Cell::new(5));\n+        let x = Rc::from_send(Cell::new(5));\n         let y = x.clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;\n@@ -121,7 +121,7 @@ mod test_rc {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = Rc::from_owned(Cell::new(5));\n+        let x = Rc::from_send(Cell::new(5));\n         let y = x.deep_clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;\n@@ -131,21 +131,21 @@ mod test_rc {\n \n     #[test]\n     fn test_simple() {\n-        let x = Rc::from_const(5);\n+        let x = Rc::from_freeze(5);\n         assert_eq!(*x.borrow(), 5);\n     }\n \n     #[test]\n     fn test_simple_clone() {\n-        let x = Rc::from_const(5);\n+        let x = Rc::from_freeze(5);\n         let y = x.clone();\n         assert_eq!(*x.borrow(), 5);\n         assert_eq!(*y.borrow(), 5);\n     }\n \n     #[test]\n     fn test_destructor() {\n-        let x = Rc::from_owned(~5);\n+        let x = Rc::from_send(~5);\n         assert_eq!(**x.borrow(), 5);\n     }\n }\n@@ -178,13 +178,13 @@ impl<T> RcMut<T> {\n }\n \n impl<T: Send> RcMut<T> {\n-    pub fn from_owned(value: T) -> RcMut<T> {\n+    pub fn from_send(value: T) -> RcMut<T> {\n         unsafe { RcMut::new(value) }\n     }\n }\n \n impl<T: Freeze> RcMut<T> {\n-    pub fn from_const(value: T) -> RcMut<T> {\n+    pub fn from_freeze(value: T) -> RcMut<T> {\n         unsafe { RcMut::new(value) }\n     }\n }\n@@ -258,7 +258,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn test_clone() {\n-        let x = RcMut::from_owned(5);\n+        let x = RcMut::from_send(5);\n         let y = x.clone();\n         do x.with_mut_borrow |value| {\n             *value = 20;\n@@ -270,7 +270,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = RcMut::from_const(5);\n+        let x = RcMut::from_freeze(5);\n         let y = x.deep_clone();\n         do x.with_mut_borrow |value| {\n             *value = 20;\n@@ -282,7 +282,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn borrow_many() {\n-        let x = RcMut::from_owned(5);\n+        let x = RcMut::from_send(5);\n         let y = x.clone();\n \n         do x.with_borrow |a| {\n@@ -298,7 +298,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn modify() {\n-        let x = RcMut::from_const(5);\n+        let x = RcMut::from_freeze(5);\n         let y = x.clone();\n \n         do y.with_mut_borrow |a| {\n@@ -313,22 +313,22 @@ mod test_rc_mut {\n \n     #[test]\n     fn release_immutable() {\n-        let x = RcMut::from_owned(5);\n+        let x = RcMut::from_send(5);\n         do x.with_borrow |_| {}\n         do x.with_mut_borrow |_| {}\n     }\n \n     #[test]\n     fn release_mutable() {\n-        let x = RcMut::from_const(5);\n+        let x = RcMut::from_freeze(5);\n         do x.with_mut_borrow |_| {}\n         do x.with_borrow |_| {}\n     }\n \n     #[test]\n     #[should_fail]\n     fn frozen() {\n-        let x = RcMut::from_owned(5);\n+        let x = RcMut::from_send(5);\n         let y = x.clone();\n \n         do x.with_borrow |_| {\n@@ -340,7 +340,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn mutable_dupe() {\n-        let x = RcMut::from_const(5);\n+        let x = RcMut::from_freeze(5);\n         let y = x.clone();\n \n         do x.with_mut_borrow |_| {\n@@ -352,7 +352,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn mutable_freeze() {\n-        let x = RcMut::from_owned(5);\n+        let x = RcMut::from_send(5);\n         let y = x.clone();\n \n         do x.with_mut_borrow |_| {\n@@ -364,7 +364,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn restore_freeze() {\n-        let x = RcMut::from_const(5);\n+        let x = RcMut::from_freeze(5);\n         let y = x.clone();\n \n         do x.with_borrow |_| {"}, {"sha": "d645f35d96d7c224f08aae8443afe05ad48efcb2", "filename": "src/test/compile-fail/rcmut-not-const-and-not-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs?ref=5f59c46e0f5605a0cc90ebdb26b4d258a8f7b43a", "patch": "@@ -14,7 +14,7 @@ fn o<T: Send>(_: &T) {}\n fn c<T: Freeze>(_: &T) {}\n \n fn main() {\n-    let x = extra::rc::RcMut::from_owned(0);\n+    let x = extra::rc::RcMut::from_send(0);\n     o(&x); //~ ERROR instantiating a type parameter with an incompatible type `extra::rc::RcMut<int>`, which does not fulfill `Send`\n     c(&x); //~ ERROR instantiating a type parameter with an incompatible type `extra::rc::RcMut<int>`, which does not fulfill `Freeze`\n }"}]}