{"sha": "c9ddcf0d06fded254fb185cb45830684383a96eb", "node_id": "C_kwDOAAsO6NoAKGM5ZGRjZjBkMDZmZGVkMjU0ZmIxODVjYjQ1ODMwNjg0MzgzYTk2ZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-27T10:09:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-27T10:09:51Z"}, "message": "Auto merge of #10822 - Alexendoo:needless-else-cfg, r=llogiq\n\nIgnore `#[cfg]`'d out code in `needless_else`\n\nchangelog: none (same release as #10810)\n\n`#[cfg]` making things fun once more\n\nThis lead me to think about macro calls that expand to nothing as well, but apparently they produce an empty stmt in the AST so are already handled, added a test for that\n\nr? `@llogiq`", "tree": {"sha": "a89e6d02a19613d832e2f3ff870775b8b7634745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89e6d02a19613d832e2f3ff870775b8b7634745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ddcf0d06fded254fb185cb45830684383a96eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ddcf0d06fded254fb185cb45830684383a96eb", "html_url": "https://github.com/rust-lang/rust/commit/c9ddcf0d06fded254fb185cb45830684383a96eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ddcf0d06fded254fb185cb45830684383a96eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1fd4673bc997164efbf0ba30cef01ffba24a43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fd4673bc997164efbf0ba30cef01ffba24a43f", "html_url": "https://github.com/rust-lang/rust/commit/f1fd4673bc997164efbf0ba30cef01ffba24a43f"}, {"sha": "021b7398e1c37c75c250e3b81a1b46622ce683c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/021b7398e1c37c75c250e3b81a1b46622ce683c9", "html_url": "https://github.com/rust-lang/rust/commit/021b7398e1c37c75c250e3b81a1b46622ce683c9"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "4ff1bf7ffc0deb404b27b650fb0290e1d854c6bc", "filename": "clippy_lints/src/needless_else.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddcf0d06fded254fb185cb45830684383a96eb/clippy_lints%2Fsrc%2Fneedless_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddcf0d06fded254fb185cb45830684383a96eb/clippy_lints%2Fsrc%2Fneedless_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_else.rs?ref=c9ddcf0d06fded254fb185cb45830684383a96eb", "patch": "@@ -1,4 +1,5 @@\n-use clippy_utils::{diagnostics::span_lint_and_sugg, source::trim_span, span_extract_comment};\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, source::trim_span};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n@@ -35,23 +36,26 @@ declare_lint_pass!(NeedlessElse => [NEEDLESS_ELSE]);\n \n impl EarlyLintPass for NeedlessElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if let ExprKind::If(_, then_block, Some(else_clause)) = &expr.kind &&\n-            let ExprKind::Block(block, _) = &else_clause.kind &&\n-            !expr.span.from_expansion() &&\n-            !else_clause.span.from_expansion() &&\n-            block.stmts.is_empty() {\n-                let span = trim_span(cx.sess().source_map(), expr.span.trim_start(then_block.span).unwrap());\n-                if span_extract_comment(cx.sess().source_map(), span).is_empty() {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        NEEDLESS_ELSE,\n-                        span,\n-                        \"this else branch is empty\",\n-                        \"you can remove it\",\n-                        String::new(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n+        if let ExprKind::If(_, then_block, Some(else_clause)) = &expr.kind\n+            && let ExprKind::Block(block, _) = &else_clause.kind\n+            && !expr.span.from_expansion()\n+            && !else_clause.span.from_expansion()\n+            && block.stmts.is_empty()\n+            && let Some(trimmed) = expr.span.trim_start(then_block.span)\n+            && let span = trim_span(cx.sess().source_map(), trimmed)\n+            && let Some(else_snippet) = snippet_opt(cx, span)\n+            // Ignore else blocks that contain comments or #[cfg]s\n+            && !else_snippet.contains(['/', '#'])\n+        {\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_ELSE,\n+                span,\n+                \"this else branch is empty\",\n+                \"you can remove it\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n     }\n }"}, {"sha": "06a16162790cc63faf41d39e8bdf45cbb77ef610", "filename": "tests/ui/needless_else.fixed", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddcf0d06fded254fb185cb45830684383a96eb/tests%2Fui%2Fneedless_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddcf0d06fded254fb185cb45830684383a96eb/tests%2Fui%2Fneedless_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_else.fixed?ref=c9ddcf0d06fded254fb185cb45830684383a96eb", "patch": "@@ -12,6 +12,10 @@ macro_rules! mac {\n     };\n }\n \n+macro_rules! empty_expansion {\n+    () => {};\n+}\n+\n fn main() {\n     let b = std::hint::black_box(true);\n \n@@ -37,4 +41,17 @@ fn main() {\n \n     // Do not lint because inside a macro\n     mac!(b);\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        #[cfg(foo)]\n+        \"Do not lint cfg'd out code\"\n+    }\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        empty_expansion!();\n+    }\n }"}, {"sha": "728032c47a66b23b68e63afb4f92b9ca77c126d2", "filename": "tests/ui/needless_else.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddcf0d06fded254fb185cb45830684383a96eb/tests%2Fui%2Fneedless_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddcf0d06fded254fb185cb45830684383a96eb/tests%2Fui%2Fneedless_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_else.rs?ref=c9ddcf0d06fded254fb185cb45830684383a96eb", "patch": "@@ -12,6 +12,10 @@ macro_rules! mac {\n     };\n }\n \n+macro_rules! empty_expansion {\n+    () => {};\n+}\n+\n fn main() {\n     let b = std::hint::black_box(true);\n \n@@ -38,4 +42,17 @@ fn main() {\n \n     // Do not lint because inside a macro\n     mac!(b);\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        #[cfg(foo)]\n+        \"Do not lint cfg'd out code\"\n+    }\n+\n+    if b {\n+        println!(\"Foobar\");\n+    } else {\n+        empty_expansion!();\n+    }\n }"}, {"sha": "ea693085164499db07d5dfcbc2ac62d0231740f8", "filename": "tests/ui/needless_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ddcf0d06fded254fb185cb45830684383a96eb/tests%2Fui%2Fneedless_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9ddcf0d06fded254fb185cb45830684383a96eb/tests%2Fui%2Fneedless_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_else.stderr?ref=c9ddcf0d06fded254fb185cb45830684383a96eb", "patch": "@@ -1,5 +1,5 @@\n error: this else branch is empty\n-  --> $DIR/needless_else.rs:20:7\n+  --> $DIR/needless_else.rs:24:7\n    |\n LL |       } else {\n    |  _______^"}]}