{"sha": "fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNDVkMmFkZWNjZmM2NzMyYjcwMmNkOGZhMjkxMWIzODViYzE1Yjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-27T20:41:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-27T20:41:35Z"}, "message": "Merge #8624\n\n8624: Automatically detect rust library source file map  r=vsrs a=vsrs\n\nThis PR adds a new possible `rust-analyzer.debug.sourceFileMap` value:\r\n```json\r\n{\r\n    \"rust-analyzer.debug.sourceFileMap\": \"auto\"\r\n}\r\n```\r\n\r\nI did not make it the default because it uses two shell calls (`rustc --print sysroot` and `rustc -V -v`). First one can be slow (https://github.com/rust-lang/rustup/issues/783)\r\n\r\nFixes #8619\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "41ab22e69528ccb346bc01b913f9251a24925960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ab22e69528ccb346bc01b913f9251a24925960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgiHb/CRBK7hj4Ov3rIwAAtCUIAAr4iYOL8BoGWD0Q3u/AYYQU\n4wUPKTgATfX5W+b+n1+GWSXkUJhezrKwo6aW/paChgeAVOy+bGbai4dm84YXW65z\n2EQijBfo45vFScacdn3kQ555gUpiSxsfv6Af51WbJkrTyFzN2fGi0lA+eMGFTaDy\n8oPaAzclJNTjt+BJnXW+rh9kU4qHqDues5Ac2mrCxu6KyMyhAoXQdgc17ZrIz6Ht\nFVe/+u/OlR36z5MsinFb3Fv67p/+S9O23izY5VNLva8KuseyYbvzPteQUVJGf9gG\nKpgdSuRoVvtiSmc+Cw2sQlS+BPx1jdW6xU/9qQvqSytB34tPB9WeXNrUC4eSS4s=\n=XPJU\n-----END PGP SIGNATURE-----\n", "payload": "tree 41ab22e69528ccb346bc01b913f9251a24925960\nparent e2b87735cc4b54ca530e7a99070da585d480b1c3\nparent 1b4197cb3520e4a71f118aac61a83bab1a6f5931\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619556095 +0000\ncommitter GitHub <noreply@github.com> 1619556095 +0000\n\nMerge #8624\n\n8624: Automatically detect rust library source file map  r=vsrs a=vsrs\n\nThis PR adds a new possible `rust-analyzer.debug.sourceFileMap` value:\r\n```json\r\n{\r\n    \"rust-analyzer.debug.sourceFileMap\": \"auto\"\r\n}\r\n```\r\n\r\nI did not make it the default because it uses two shell calls (`rustc --print sysroot` and `rustc -V -v`). First one can be slow (https://github.com/rust-lang/rustup/issues/783)\r\n\r\nFixes #8619\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "html_url": "https://github.com/rust-lang/rust/commit/fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b87735cc4b54ca530e7a99070da585d480b1c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b87735cc4b54ca530e7a99070da585d480b1c3", "html_url": "https://github.com/rust-lang/rust/commit/e2b87735cc4b54ca530e7a99070da585d480b1c3"}, {"sha": "1b4197cb3520e4a71f118aac61a83bab1a6f5931", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4197cb3520e4a71f118aac61a83bab1a6f5931", "html_url": "https://github.com/rust-lang/rust/commit/1b4197cb3520e4a71f118aac61a83bab1a6f5931"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "35b50e669d3edc4a515894c934e816d01fc181d3", "filename": "editors/code/package.json", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "patch": "@@ -353,8 +353,9 @@\n                         \"Use [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\"\n                     ]\n                 },\n-                \"rust-analyzer.debug.sourceFileMap\": {\n-                    \"type\": \"object\",\n+                \"rust-analyzer.debug.sourceFileMap\": {                    \n+                    \"type\": [\"object\", \"string\"],\n+                    \"const\": \"auto\",\n                     \"description\": \"Optional source file mappings passed to the debug engine.\",\n                     \"default\": {\n                         \"/rustc/<id>\": \"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust\""}, {"sha": "e858f80bcc4d482743aa0d3d628018e81de2d14d", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "patch": "@@ -135,8 +135,12 @@ export class Config {\n     }\n \n     get debug() {\n-        // \"/rustc/<id>\" used by suggestions only.\n-        const { [\"/rustc/<id>\"]: _, ...sourceFileMap } = this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+        let sourceFileMap = this.get<Record<string, string> | \"auto\">(\"debug.sourceFileMap\");\n+        if (sourceFileMap !== \"auto\") {\n+            // \"/rustc/<id>\" used by suggestions only.\n+            const { [\"/rustc/<id>\"]: _, ...trimmed } = this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+            sourceFileMap = trimmed;\n+        }\n \n         return {\n             engine: this.get<string>(\"debug.engine\"),"}, {"sha": "830980f968c5bb92f69ee41cc13151db9721ae3e", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "patch": "@@ -3,7 +3,7 @@ import * as vscode from 'vscode';\n import * as path from 'path';\n import * as ra from './lsp_ext';\n \n-import { Cargo } from './toolchain';\n+import { Cargo, getRustcId, getSysroot } from './toolchain';\n import { Ctx } from \"./ctx\";\n import { prepareEnv } from \"./run\";\n \n@@ -104,7 +104,17 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n \n     const executable = await getDebugExecutable(runnable);\n     const env = prepareEnv(runnable, ctx.config.runnableEnv);\n-    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, debugOptions.sourceFileMap);\n+    let sourceFileMap = debugOptions.sourceFileMap;\n+    if (sourceFileMap === \"auto\") {\n+        // let's try to use the default toolchain\n+        const commitHash = await getRustcId(wsFolder);\n+        const sysroot = await getSysroot(wsFolder);\n+        const rustlib = path.normalize(sysroot + \"/lib/rustlib/src/rust\");\n+        sourceFileMap = {};\n+        sourceFileMap[`/rustc/${commitHash}/`] = rustlib;\n+    }\n+\n+    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, sourceFileMap);\n     if (debugConfig.type in debugOptions.engineSettings) {\n         const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n         for (var key in settingsMap) {"}, {"sha": "68826c478d37248cb5ca0a2123aa1d74932b483c", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "patch": "@@ -4,7 +4,7 @@ import * as path from 'path';\n import * as fs from 'fs';\n import * as readline from 'readline';\n import { OutputChannel } from 'vscode';\n-import { log, memoize } from './util';\n+import { execute, log, memoize } from './util';\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -121,6 +121,24 @@ export class Cargo {\n     }\n }\n \n+/** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n+export function getSysroot(dir: string): Promise<string> {\n+    const rustcPath = getPathForExecutable(\"rustc\");\n+\n+    // do not memoize the result because the toolchain may change between runs\n+    return execute(`${rustcPath} --print sysroot`, { cwd: dir });\n+}\n+\n+export async function getRustcId(dir: string): Promise<string> {\n+    const rustcPath = getPathForExecutable(\"rustc\");\n+\n+    // do not memoize the result because the toolchain may change between runs\n+    const data = await execute(`${rustcPath} -V -v`, { cwd: dir });\n+    const rx = /commit-hash:\\s(.*)$/m.compile();\n+\n+    return rx.exec(data)![1];\n+}\n+\n /** Mirrors `toolchain::cargo()` implementation */\n export function cargoPath(): string {\n     return getPathForExecutable(\"cargo\");"}, {"sha": "56e0e439e980e46a87c86ec5a2387ad6adf2d233", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fb45d2adeccfc6732b702cd8fa2911b385bc15b7/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=fb45d2adeccfc6732b702cd8fa2911b385bc15b7", "patch": "@@ -1,7 +1,7 @@\n import * as lc from \"vscode-languageclient/node\";\n import * as vscode from \"vscode\";\n import { strict as nativeAssert } from \"assert\";\n-import { spawnSync } from \"child_process\";\n+import { exec, ExecOptions, spawnSync } from \"child_process\";\n import { inspect } from \"util\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n@@ -141,3 +141,22 @@ export function memoize<Ret, TThis, Param extends string>(func: (this: TThis, ar\n         return result;\n     };\n }\n+\n+/** Awaitable wrapper around `child_process.exec` */\n+export function execute(command: string, options: ExecOptions): Promise<string> {\n+    return new Promise((resolve, reject) => {\n+        exec(command, options, (err, stdout, stderr) => {\n+            if (err) {\n+                reject(err);\n+                return;\n+            }\n+\n+            if (stderr) {\n+                reject(new Error(stderr));\n+                return;\n+            }\n+\n+            resolve(stdout.trimEnd());\n+        });\n+    });\n+}"}]}