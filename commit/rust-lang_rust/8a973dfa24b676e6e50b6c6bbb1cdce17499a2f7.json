{"sha": "8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOTczZGZhMjRiNjc2ZTZlNTBiNmM2YmJiMWNkY2UxNzQ5OWEyZjc=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-28T14:39:47Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-28T14:39:47Z"}, "message": "restore old behaviour for sizes < 128", "tree": {"sha": "6c57432b18425a97a098090b912187623d3af364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c57432b18425a97a098090b912187623d3af364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7", "html_url": "https://github.com/rust-lang/rust/commit/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4d3f53468cb392cb9b80278a232857ad8d68992", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d3f53468cb392cb9b80278a232857ad8d68992", "html_url": "https://github.com/rust-lang/rust/commit/d4d3f53468cb392cb9b80278a232857ad8d68992"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "93ec54b17390f04e988d5b43e5fc21fd27f98726", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=8a973dfa24b676e6e50b6c6bbb1cdce17499a2f7", "patch": "@@ -499,6 +499,24 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n+        let len = size_of::<T>();\n+\n+        if len < 128 {\n+            // Give ourselves some scratch space to work with\n+            let mut t: T = uninitialized();\n+   \n+            // Perform the swap, `&mut` pointers never alias\n+            ptr::copy_nonoverlapping(&*x, &mut t, 1);\n+            ptr::copy_nonoverlapping(&*y, x, 1);\n+            ptr::copy_nonoverlapping(&t, y, 1);\n+   \n+            // y and t now point to the same thing, but we need to completely\n+            // forget `t` because we do not want to run the destructor for `T`\n+            // on its value, which is still owned somewhere outside this function.\n+            forget(t);\n+            return;\n+        }\n+\n         // The approach here is to utilize simd to swap x & y efficiently. Testing reveals\n         // that swapping either 32 bytes or 64 bytes at a time is most efficient for intel\n         // Haswell E processors. LLVM is more able to optimize if we give a struct a\n@@ -516,20 +534,21 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         // Loop through x & y, copying them `Block` at a time\n         // The optimizer should unroll the loop fully for most types\n         // N.B. We can't use a for loop as the `range` impl calls `mem::swap` recursively\n-        let len = size_of::<T>() as isize;\n         let mut i = 0;\n-        while i + block_size as isize <= len {\n+        while i + block_size <= len {\n             // Create some uninitialized memory as scratch space\n             // Declaring `t` here avoids aligning the stack when this loop is unused\n             let mut t: Block = uninitialized();\n             let t = &mut t as *mut _ as *mut u8;\n+            let x = x.offset(i as isize);\n+            let y = y.offset(i as isize);\n \n             // Swap a block of bytes of x & y, using t as a temporary buffer\n             // This should be optimized into efficient SIMD operations where available\n-            ptr::copy_nonoverlapping(x.offset(i), t, block_size);\n-            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), block_size);\n-            ptr::copy_nonoverlapping(t, y.offset(i), block_size);\n-            i += block_size as isize;\n+            ptr::copy_nonoverlapping(x, t, block_size);\n+            ptr::copy_nonoverlapping(y, x, block_size);\n+            ptr::copy_nonoverlapping(t, y, block_size);\n+            i += block_size;\n         }\n \n \n@@ -538,41 +557,15 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n             // where appropriate (this information is lost by conversion\n             // to *mut u8, so restore it manually here)\n             let mut t: UnalignedBlock = uninitialized();\n-            let rem = (len - i) as usize;\n-\n-            if align_of::<T>() % 8 == 0 && len % 8 == 0 {\n-                let t = &mut t as *mut _ as *mut u64;\n-                let x = x.offset(i) as *mut u64;\n-                let y = y.offset(i) as *mut u64;\n-\n-                ptr::copy_nonoverlapping(x, t, rem / 8);\n-                ptr::copy_nonoverlapping(y, x, rem / 8);\n-                ptr::copy_nonoverlapping(t, y, rem / 8);\n-            } else if align_of::<T>() % 4 == 0 && len % 4 == 0 {\n-                let t = &mut t as *mut _ as *mut u32;\n-                let x = x.offset(i) as *mut u32;\n-                let y = y.offset(i) as *mut u32;\n-\n-                ptr::copy_nonoverlapping(x, t, rem / 4);\n-                ptr::copy_nonoverlapping(y, x, rem / 4);\n-                ptr::copy_nonoverlapping(t, y, rem / 4);\n-            } else if align_of::<T>() % 2 == 0 && len % 2 == 0 {\n-                let t = &mut t as *mut _ as *mut u16;\n-                let x = x.offset(i) as *mut u16;\n-                let y = y.offset(i) as *mut u16;\n-\n-                ptr::copy_nonoverlapping(x, t, rem / 2);\n-                ptr::copy_nonoverlapping(y, x, rem / 2);\n-                ptr::copy_nonoverlapping(t, y, rem / 2);\n-            } else {\n-                let t = &mut t as *mut _ as *mut u8;\n-                let x = x.offset(i);\n-                let y = y.offset(i);\n-\n-                ptr::copy_nonoverlapping(x, t, rem);\n-                ptr::copy_nonoverlapping(y, x, rem);\n-                ptr::copy_nonoverlapping(t, y, rem);\n-            }\n+            let rem = len - i;\n+\n+            let t = &mut t as *mut _ as *mut u8;\n+            let x = x.offset(i as isize);\n+            let y = y.offset(i as isize);\n+\n+            ptr::copy_nonoverlapping(x, t, rem);\n+            ptr::copy_nonoverlapping(y, x, rem);\n+            ptr::copy_nonoverlapping(t, y, rem);\n         }\n     }\n }"}]}