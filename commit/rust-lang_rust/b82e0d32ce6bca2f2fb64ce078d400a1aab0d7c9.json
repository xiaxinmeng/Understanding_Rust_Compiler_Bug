{"sha": "b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MmUwZDMyY2U2YmNhMmYyZmI2NGNlMDc4ZDQwMGExYWFiMGQ3Yzk=", "commit": {"author": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-09-19T23:05:27Z"}, "committer": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-09-19T23:05:27Z"}, "message": "Add a new Digest.result_bytes convenience function.", "tree": {"sha": "9bd4fe76024931d8d36c77dace215b0baa6daeeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd4fe76024931d8d36c77dace215b0baa6daeeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9", "html_url": "https://github.com/rust-lang/rust/commit/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b0b11aebfe3167bf41f7c6c31cf7b1e396efe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b0b11aebfe3167bf41f7c6c31cf7b1e396efe7", "html_url": "https://github.com/rust-lang/rust/commit/d2b0b11aebfe3167bf41f7c6c31cf7b1e396efe7"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "71faadca3021e1c433e48da9261ec10cdb9c74cb", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9", "patch": "@@ -353,6 +353,7 @@ mod test {\n \n     use cryptoutil::{add_bytes_to_bits, add_bytes_to_bits_tuple};\n     use digest::Digest;\n+    use hex::FromHex;\n \n     /// Feed 1,000,000 'a's into the digest with varying input sizes and check that the result is\n     /// correct.\n@@ -373,8 +374,10 @@ mod test {\n         }\n \n         let result_str = digest.result_str();\n+        let result_bytes = digest.result_bytes();\n \n-        assert!(expected == result_str);\n+        assert_eq!(expected, result_str.as_slice());\n+        assert_eq!(expected.from_hex().unwrap(), result_bytes);\n     }\n \n     // A normal addition - no overflow occurs"}, {"sha": "85c256c47a3805c9728d2fb7bf22a8a684dd0d9a", "filename": "src/libextra/crypto/digest.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9/src%2Flibextra%2Fcrypto%2Fdigest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9/src%2Flibextra%2Fcrypto%2Fdigest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fdigest.rs?ref=b82e0d32ce6bca2f2fb64ce078d400a1aab0d7c9", "patch": "@@ -10,6 +10,8 @@\n \n use std::vec;\n \n+use hex::ToHex;\n+\n \n /**\n  * The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\n@@ -58,23 +60,20 @@ pub trait Digest {\n \n     /**\n      * Convenience function that retrieves the result of a digest as a\n-     * ~str in hexadecimal format.\n+     * newly allocated vec of bytes.\n      */\n-    fn result_str(&mut self) -> ~str {\n+    fn result_bytes(&mut self) -> ~[u8] {\n         let mut buf = vec::from_elem((self.output_bits()+7)/8, 0u8);\n         self.result(buf);\n-        return to_hex(buf);\n+        buf\n     }\n-}\n \n-fn to_hex(rr: &[u8]) -> ~str {\n-    let mut s = ~\"\";\n-    for b in rr.iter() {\n-        let hex = (*b as uint).to_str_radix(16u);\n-        if hex.len() == 1 {\n-            s.push_char('0');\n-        }\n-        s.push_str(hex);\n+    /**\n+     * Convenience function that retrieves the result of a digest as a\n+     * ~str in hexadecimal format.\n+     */\n+    fn result_str(&mut self) -> ~str {\n+        self.result_bytes().to_hex()\n     }\n-    return s;\n }\n+"}]}