{"sha": "28e1a7ba5ea65debc5e7402a9128196732c99d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZTFhN2JhNWVhNjVkZWJjNWU3NDAyYTkxMjgxOTY3MzJjOTlkNTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-12T21:26:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-12T21:26:51Z"}, "message": "Rollup merge of #53059 - ljedrz:unneeded_returns, r=kennytm\n\nRemove explicit returns where unnecessary", "tree": {"sha": "d0c6f433e0c591a1ac953c62f7f3067110849985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c6f433e0c591a1ac953c62f7f3067110849985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28e1a7ba5ea65debc5e7402a9128196732c99d56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcKYbCRBK7hj4Ov3rIwAAdHIIAEAjaWys7bjZoY8gEn/Hvyzd\n3Y24EE3tjlq/Kn44XfekloRtXNVQ0fjGX1ISCpAKCQ+Gh8Db9TC4778J7TumlNSo\nD4CBXvkkhh7Dg0lqq31b1erFyUV+11pmHe+4aq9VmRhO40vNj7EDr/NwCWEAlBgr\nG8FD7dtR1Byf6YhIXIRwxfKWCHHC7QRanjbnVbqVUVKM14WIccFWW0Z4+HaHHYFk\ng82YSpus4/ZjE0+I1etoXG89cseMXWSIx9MtFHrARAhvsWUfeeiaLwPOOdCmijtj\nMZBktbrt8sg0m6MgsVe5nzsnpqGfHxF3tAxpsZDoyvjkb1c4nK6h1jd50GudvSQ=\n=z9rP\n-----END PGP SIGNATURE-----\n", "payload": "tree d0c6f433e0c591a1ac953c62f7f3067110849985\nparent fbe6241064dd860c7bf3a361c7e6fd63bc8eb504\nparent 1667950d732bdeb9181fb34b247fc72751255b6f\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1534109211 +0200\ncommitter GitHub <noreply@github.com> 1534109211 +0200\n\nRollup merge of #53059 - ljedrz:unneeded_returns, r=kennytm\n\nRemove explicit returns where unnecessary\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28e1a7ba5ea65debc5e7402a9128196732c99d56", "html_url": "https://github.com/rust-lang/rust/commit/28e1a7ba5ea65debc5e7402a9128196732c99d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28e1a7ba5ea65debc5e7402a9128196732c99d56/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504", "html_url": "https://github.com/rust-lang/rust/commit/fbe6241064dd860c7bf3a361c7e6fd63bc8eb504"}, {"sha": "1667950d732bdeb9181fb34b247fc72751255b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1667950d732bdeb9181fb34b247fc72751255b6f", "html_url": "https://github.com/rust-lang/rust/commit/1667950d732bdeb9181fb34b247fc72751255b6f"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "35e4eea756d41ca0cceef932b15751a3928f1331", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=28e1a7ba5ea65debc5e7402a9128196732c99d56", "patch": "@@ -217,7 +217,7 @@ impl Layout {\n \n         let len_rounded_up = len.wrapping_add(align).wrapping_sub(1)\n             & !align.wrapping_sub(1);\n-        return len_rounded_up.wrapping_sub(len);\n+        len_rounded_up.wrapping_sub(len)\n     }\n \n     /// Creates a layout describing the record for `n` instances of\n@@ -971,9 +971,9 @@ pub unsafe trait Alloc {\n         // _l <= layout.size()                       [guaranteed by usable_size()]\n         //       layout.size() <= new_layout.size()  [required by this method]\n         if new_size <= u {\n-            return Ok(());\n+            Ok(())\n         } else {\n-            return Err(CannotReallocInPlace);\n+            Err(CannotReallocInPlace)\n         }\n     }\n \n@@ -1026,9 +1026,9 @@ pub unsafe trait Alloc {\n         //                      layout.size() <= _u  [guaranteed by usable_size()]\n         // new_layout.size() <= layout.size()        [required by this method]\n         if l <= new_size {\n-            return Ok(());\n+            Ok(())\n         } else {\n-            return Err(CannotReallocInPlace);\n+            Err(CannotReallocInPlace)\n         }\n     }\n "}, {"sha": "7e1313747eef205f2d92d6e54645b8914159216a", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=28e1a7ba5ea65debc5e7402a9128196732c99d56", "patch": "@@ -312,8 +312,8 @@ impl Iterator for EscapeDefault {\n                     None\n                 }\n             },\n-            EscapeDefaultState::Done => return None,\n-            EscapeDefaultState::Unicode(ref mut i) => return i.nth(n),\n+            EscapeDefaultState::Done => None,\n+            EscapeDefaultState::Unicode(ref mut i) => i.nth(n),\n         }\n     }\n "}, {"sha": "61033e7511253c858ee790bbbd2d0f292b48c121", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=28e1a7ba5ea65debc5e7402a9128196732c99d56", "patch": "@@ -2318,7 +2318,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n \n         let table_inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1];\n         if m <= INV_TABLE_MOD {\n-            return table_inverse & (m - 1);\n+            table_inverse & (m - 1)\n         } else {\n             // We iterate \"up\" using the following formula:\n             //\n@@ -2405,7 +2405,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     }\n \n     // Cannot be aligned at all.\n-    return usize::max_value();\n+    usize::max_value()\n }\n \n "}, {"sha": "88fdd767638934774afb20d85215c624f13001f0", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=28e1a7ba5ea65debc5e7402a9128196732c99d56", "patch": "@@ -1727,7 +1727,7 @@ impl<T> [T] {\n                     ctz_b = ::intrinsics::cttz_nonzero(b);\n                 }\n             }\n-            return a << k;\n+            a << k\n         }\n         let gcd: usize = gcd(::mem::size_of::<T>(), ::mem::size_of::<U>());\n         let ts: usize = ::mem::size_of::<U>() / gcd;\n@@ -1737,7 +1737,7 @@ impl<T> [T] {\n         let us_len = self.len() / ts * us;\n         // And how many `T`s will be in the trailing slice!\n         let ts_len = self.len() % ts;\n-        return (us_len, ts_len);\n+        (us_len, ts_len)\n     }\n \n     /// Transmute the slice to a slice of another type, ensuring aligment of the types is\n@@ -1782,13 +1782,13 @@ impl<T> [T] {\n         let ptr = self.as_ptr();\n         let offset = ::ptr::align_offset(ptr, ::mem::align_of::<U>());\n         if offset > self.len() {\n-            return (self, &[], &[]);\n+            (self, &[], &[])\n         } else {\n             let (left, rest) = self.split_at(offset);\n             let (us_len, ts_len) = rest.align_to_offsets::<U>();\n-            return (left,\n-                    from_raw_parts(rest.as_ptr() as *const U, us_len),\n-                    from_raw_parts(rest.as_ptr().offset((rest.len() - ts_len) as isize), ts_len))\n+            (left,\n+             from_raw_parts(rest.as_ptr() as *const U, us_len),\n+             from_raw_parts(rest.as_ptr().offset((rest.len() - ts_len) as isize), ts_len))\n         }\n     }\n \n@@ -1834,14 +1834,14 @@ impl<T> [T] {\n         let ptr = self.as_ptr();\n         let offset = ::ptr::align_offset(ptr, ::mem::align_of::<U>());\n         if offset > self.len() {\n-            return (self, &mut [], &mut []);\n+            (self, &mut [], &mut [])\n         } else {\n             let (left, rest) = self.split_at_mut(offset);\n             let (us_len, ts_len) = rest.align_to_offsets::<U>();\n             let mut_ptr = rest.as_mut_ptr();\n-            return (left,\n-                    from_raw_parts_mut(mut_ptr as *mut U, us_len),\n-                    from_raw_parts_mut(mut_ptr.offset((rest.len() - ts_len) as isize), ts_len))\n+            (left,\n+             from_raw_parts_mut(mut_ptr as *mut U, us_len),\n+             from_raw_parts_mut(mut_ptr.offset((rest.len() - ts_len) as isize), ts_len))\n         }\n     }\n }"}, {"sha": "186d6adbc91cf67ecb6c88df1acf286c943cebf4", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=28e1a7ba5ea65debc5e7402a9128196732c99d56", "patch": "@@ -146,7 +146,7 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n             broken: &[],\n         };\n         self.source = &[];\n-        return Some(r);\n+        Some(r)\n     }\n }\n "}, {"sha": "5ee53fe79dc02a4e62c50de6512e55e13f55e657", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=28e1a7ba5ea65debc5e7402a9128196732c99d56", "patch": "@@ -1567,7 +1567,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n #[unstable(feature = \"str_internals\", issue = \"0\")]\n #[inline]\n pub fn utf8_char_width(b: u8) -> usize {\n-    return UTF8_CHAR_WIDTH[b as usize] as usize;\n+    UTF8_CHAR_WIDTH[b as usize] as usize\n }\n \n /// Mask of the value bits of a continuation byte."}, {"sha": "9501adb938616de359b3e44ce9c41f7b4d8d5860", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28e1a7ba5ea65debc5e7402a9128196732c99d56/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=28e1a7ba5ea65debc5e7402a9128196732c99d56", "patch": "@@ -267,7 +267,7 @@ fn recv<B: BufRead>(dir: &Path, io: &mut B) -> PathBuf {\n     t!(io::copy(&mut io.take(amt),\n                 &mut t!(File::create(&dst))));\n     t!(fs::set_permissions(&dst, Permissions::from_mode(0o755)));\n-    return dst\n+    dst\n }\n \n fn my_copy(src: &mut dyn Read, which: u8, dst: &Mutex<dyn Write>) {"}]}