{"sha": "3f3bfeec27c3457de30929d7dbf914a5b350808c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmM2JmZWVjMjdjMzQ1N2RlMzA5MjlkN2RiZjkxNGE1YjM1MDgwOGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T20:52:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-13T14:27:35Z"}, "message": "make \"native fn\" the type for bare functions, remove fn exprs", "tree": {"sha": "db38c6f0d28f66e58ecaee44713f7dba432dd15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db38c6f0d28f66e58ecaee44713f7dba432dd15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f3bfeec27c3457de30929d7dbf914a5b350808c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3bfeec27c3457de30929d7dbf914a5b350808c", "html_url": "https://github.com/rust-lang/rust/commit/3f3bfeec27c3457de30929d7dbf914a5b350808c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f3bfeec27c3457de30929d7dbf914a5b350808c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455f8b0d4588b6d890ce8a908d488c0325e3f29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/455f8b0d4588b6d890ce8a908d488c0325e3f29e", "html_url": "https://github.com/rust-lang/rust/commit/455f8b0d4588b6d890ce8a908d488c0325e3f29e"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "537c420aa71ce84dd1d5f7f7516098db384fbda9", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -483,7 +483,7 @@ fn create_index<T: copy>(index: [entry<T>], hash_fn: fn@(T) -> uint) ->\n \n fn encode_index<T>(ebml_w: ebml::writer, buckets: [@[entry<T>]],\n                    write_fn: block(io::writer, T)) {\n-    let writer = io::new_writer(ebml_w.writer);\n+    let writer = ebml_w.writer;\n     ebml::start_tag(ebml_w, tag_index);\n     let bucket_locs: [uint] = [];\n     ebml::start_tag(ebml_w, tag_index_buckets);"}, {"sha": "d1289488b36c346b58ea8faa3612d572ebab29d6", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -304,7 +304,7 @@ fn print_type(s: ps, &&ty: @ast::ty) {\n         pclose(s);\n       }\n       ast::ty_fn(proto, d) {\n-        print_ty_fn(s, proto, d, none, none);\n+        print_ty_fn(s, some(proto), d, none, none);\n       }\n       ast::ty_path(path, _) { print_path(s, path, false); }\n       ast::ty_type. { word(s.s, \"type\"); }\n@@ -485,7 +485,7 @@ fn print_ty_method(s: ps, m: ast::ty_method) {\n     hardbreak_if_not_bol(s);\n     cbox(s, indent_unit);\n     maybe_print_comment(s, m.span.lo);\n-    print_ty_fn(s, ast::proto_bare, m.decl, some(m.ident), some(m.tps));\n+    print_ty_fn(s, none, m.decl, some(m.ident), some(m.tps));\n     word(s.s, \";\");\n     end(s);\n }\n@@ -1320,11 +1320,11 @@ fn print_mt(s: ps, mt: ast::mt) {\n     print_type(s, mt.ty);\n }\n \n-fn print_ty_fn(s: ps, proto: ast::proto,\n+fn print_ty_fn(s: ps, opt_proto: option<ast::proto>,\n                decl: ast::fn_decl, id: option::t<ast::ident>,\n                tps: option::t<[ast::ty_param]>) {\n     ibox(s, indent_unit);\n-    word(s.s, proto_to_str(proto));\n+    word(s.s, opt_proto_to_str(opt_proto));\n     alt id { some(id) { word(s.s, \" \"); word(s.s, id); } _ { } }\n     alt tps { some(tps) { print_type_params(s, tps); } _ { } }\n     zerobreak(s.s);\n@@ -1602,6 +1602,13 @@ fn ast_fn_constrs_str(decl: ast::fn_decl, constrs: [@ast::constr]) -> str {\n     ret s;\n }\n \n+fn opt_proto_to_str(opt_p: option<ast::proto>) -> str {\n+    alt opt_p {\n+      none. { \"fn\" }\n+      some(p) { proto_to_str(p) }\n+    }\n+}\n+\n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n           ast::proto_bare. { \"native fn\" }"}, {"sha": "afb64da8b6f34d1df1ecc1eb4ae289e115cb9dfe", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -116,7 +116,7 @@ Returns:\n \n A handle to the new task\n */\n-fn spawn(+f: sendfn()) -> task {\n+fn spawn(+f: fn~()) -> task {\n     spawn_inner(f, none)\n }\n "}, {"sha": "ef3c9a244bc41094659c2f441961723d2102ed86", "filename": "src/libstd/test.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -313,24 +313,24 @@ type test_future<T> = {test: test_desc<T>, wait: fn@() -> test_result};\n fn run_test<T: copy>(test: test_desc<T>,\n                     to_task: test_to_task<T>) -> test_future<T> {\n     if test.ignore {\n-        ret {test: test, wait: fn () -> test_result { tr_ignored }};\n+        ret {test: test, wait: fn@() -> test_result { tr_ignored }};\n     }\n \n     let test_task = to_task(test.fn);\n     ret {test: test,\n-         wait:\n-             bind fn (test_task: joinable, should_fail: bool) -> test_result {\n-                  alt task::join(test_task) {\n-                    task::tr_success. {\n-                      if should_fail { tr_failed }\n-                      else { tr_ok }\n-                    }\n-                    task::tr_failure. {\n-                      if should_fail { tr_ok }\n-                      else { tr_failed }\n-                    }\n-                  }\n-              }(test_task, test.should_fail)};\n+         wait: fn@() -> test_result {\n+             alt task::join(test_task) {\n+               task::tr_success. {\n+                 if test.should_fail { tr_failed }\n+                 else { tr_ok }\n+               }\n+               task::tr_failure. {\n+                 if test.should_fail { tr_ok }\n+                 else { tr_failed }\n+               }\n+             }\n+         }\n+        };\n }\n \n // We need to run our tests in another task in order to trap test failures."}, {"sha": "eb421ae9b085819e06af0f48175c0243c0758a14", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -45,11 +45,11 @@ mod map_reduce {\n \n     type putter = fn@(str, int);\n \n-    type mapper = fn(str, putter);\n+    type mapper = fn@(str, putter);\n \n     type getter = fn@() -> option<int>;\n \n-    type reducer = fn(str, getter);\n+    type reducer = fn@(str, getter);\n \n     tag ctrl_proto {\n         find_reducer(str, chan<chan<reduce_proto>>);"}, {"sha": "a9d2f38f6170fea938196bd87354414573752cf8", "filename": "src/test/compile-fail/fn-bare-bind.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -1,9 +1,8 @@\n-// error-pattern:mismatched types: expected `fn()` but found `fn@()`\n-\n fn f() {\n }\n \n fn main() {\n     // Can't produce a bare function by binding\n-    let g: fn() = bind f();\n+    let g: native fn() = bind f();\n+    //!^ ERROR mismatched types: expected `native fn()` but found `fn@()`\n }"}, {"sha": "a3b3e502ea46b8ae1fc6d509a5ab696c31865aba", "filename": "src/test/compile-fail/fn-compare-mismatch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-compare-mismatch.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -1,7 +1,6 @@\n-// error-pattern:expected `fn()` but found `fn(++int)`\n-\n fn main() {\n     fn f() { }\n     fn g(i: int) { }\n     let x = f == g;\n+    //!^ ERROR expected `native fn()` but found `native fn(++int)`\n }"}, {"sha": "b5ba3e2a7f809c9b7985f82d3c64d2bd145b0012", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -1,2 +1,3 @@\n-// error-pattern:wrong type in main function: found `fn() -> char`\n-fn main() -> char { }\n+fn main() -> char {\n+//!^ ERROR wrong type in main function: found `native fn() -> char`\n+}"}, {"sha": "34f35e51e52a807a9e942eb8d079c605430b0b6d", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -1,2 +1,3 @@\n-// error-pattern:wrong type in main function: found `fn(&&{x: int,y: int})`\n-fn main(foo: {x: int, y: int}) { }\n+fn main(foo: {x: int, y: int}) {\n+//!^ ERROR wrong type in main function: found `native fn(&&{x: int,y: int})`\n+}"}, {"sha": "b2b1d4ed85dda80b9d2cefe5f662d5c26e75b5fe", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let cheese = \"roquefort\";\n     let carrots = @\"crunchy\";\n \n-    fn (tasties: @str, macerate: block(str)) {\n+    fn@(tasties: @str, macerate: block(str)) {\n         macerate(*tasties);\n     } (carrots, { |food|\n         let mush = food + cheese;"}, {"sha": "af308c71064a658fb781c85d0805c7b80f1033bb", "filename": "src/test/run-pass/bind-parameterized-args-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n-    fn echo<T>(c: int, x: native fn(T)) { #error(\"wee\"); }\n+    fn echo<T>(c: int, x: fn@(T)) { #error(\"wee\"); }\n \n     let y = bind echo(42, _);\n \n-    y(fn(&&i: str) { });\n+    y(fn@(&&i: str) { });\n }"}, {"sha": "9e1e5127a2452b561d31023a9bee385aad5c7293", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3bfeec27c3457de30929d7dbf914a5b350808c/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=3f3bfeec27c3457de30929d7dbf914a5b350808c", "patch": "@@ -23,7 +23,7 @@ fn test05_start(&&f: fn~(&&float, &&str) -> pair<float, str>) {\n     assert q.b == \"Ho\";\n }\n \n-fn spawn<A: copy, B: copy>(f: fn(fn~(A,B)->pair<A,B>)) {\n+fn spawn<A: copy, B: copy>(f: native fn(fn~(A,B)->pair<A,B>)) {\n     let arg = fn~(a: A, b: B) -> pair<A,B> {\n         ret make_generic_record(a, b);\n     };"}]}