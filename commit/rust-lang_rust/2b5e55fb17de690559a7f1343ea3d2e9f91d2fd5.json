{"sha": "2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNWU1NWZiMTdkZTY5MDU1OWE3ZjEzNDNlYTNkMmU5ZjkxZDJmZDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-20T11:36:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-20T11:36:53Z"}, "message": "Refactor fn sig handling in preparation for supporting closures", "tree": {"sha": "a70beed6e22ae4ad0dfcdfe4cccdc23e1d7e6d71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a70beed6e22ae4ad0dfcdfe4cccdc23e1d7e6d71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "html_url": "https://github.com/rust-lang/rust/commit/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e129579dec84add38d632652d75253e96cf75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e129579dec84add38d632652d75253e96cf75f", "html_url": "https://github.com/rust-lang/rust/commit/12e129579dec84add38d632652d75253e96cf75f"}], "stats": {"total": 117, "additions": 86, "deletions": 31}, "files": [{"sha": "6f4c5e404a5b43413971c14c3a9586e19e4e779a", "filename": "src/abi.rs", "status": "modified", "additions": 76, "deletions": 26, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "patch": "@@ -1,25 +1,21 @@\n-use prelude::*;\n+use std::iter;\n \n-pub fn cton_sig_from_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: PolyFnSig<'tcx>, substs: &Substs<'tcx>) -> Signature {\n-    let sig = tcx.subst_and_normalize_erasing_regions(substs, ParamEnv::reveal_all(), &sig);\n-    cton_sig_from_mono_fn_sig(tcx, sig)\n-}\n+use rustc::hir;\n+use rustc_target::spec::abi::Abi;\n \n-pub fn cton_sig_from_instance<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, inst: Instance<'tcx>) -> Signature {\n-    let fn_ty = inst.ty(tcx);\n-    let sig = fn_ty.fn_sig(tcx);\n-    cton_sig_from_mono_fn_sig(tcx, sig)\n-}\n-\n-pub fn cton_sig_from_mono_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: PolyFnSig<'tcx>) -> Signature {\n-    // TODO: monomorphize signature\n+use prelude::*;\n \n+pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_ty: Ty<'tcx>) -> Signature {\n+    let sig = ty_fn_sig(tcx, fn_ty);\n     let sig = tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &sig);\n-    let inputs = sig.inputs();\n-    let _output = sig.output();\n     assert!(!sig.variadic, \"Variadic function are not yet supported\");\n-    let call_conv = match sig.abi {\n-        _ => CallConv::SystemV,\n+    let (call_conv, inputs, _output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n+        Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n+        Abi::RustCall => {\n+            unimplemented!();\n+        }\n+        Abi::System => bug!(\"system abi should be selected elsewhere\"),\n+        _ => unimplemented!(\"unsupported abi {:?}\", sig.abi),\n     };\n     Signature {\n         params: Some(types::I64).into_iter() // First param is place to put return val\n@@ -31,16 +27,75 @@ pub fn cton_sig_from_mono_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig:\n     }\n }\n \n+fn ty_fn_sig<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    ty: Ty<'tcx>\n+) -> ty::PolyFnSig<'tcx> {\n+    match ty.sty {\n+        ty::TyFnDef(..) |\n+        // Shims currently have type TyFnPtr. Not sure this should remain.\n+        ty::TyFnPtr(_) => ty.fn_sig(tcx),\n+        ty::TyClosure(def_id, substs) => {\n+            let sig = substs.closure_sig(def_id, tcx);\n+\n+            let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n+            sig.map_bound(|sig| tcx.mk_fn_sig(\n+                iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                sig.output(),\n+                sig.variadic,\n+                sig.unsafety,\n+                sig.abi\n+            ))\n+        }\n+        ty::TyGenerator(def_id, substs, _) => {\n+            let sig = substs.poly_sig(def_id, tcx);\n+\n+            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+            let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n+\n+            sig.map_bound(|sig| {\n+                let state_did = tcx.lang_items().gen_state().unwrap();\n+                let state_adt_ref = tcx.adt_def(state_did);\n+                let state_substs = tcx.intern_substs(&[\n+                    sig.yield_ty.into(),\n+                    sig.return_ty.into(),\n+                ]);\n+                let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+\n+                tcx.mk_fn_sig(iter::once(env_ty),\n+                    ret_ty,\n+                    false,\n+                    hir::Unsafety::Normal,\n+                    Abi::Rust\n+                )\n+            })\n+        }\n+        _ => bug!(\"unexpected type {:?} to ty_fn_sig\", ty)\n+    }\n+}\n+\n impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n+    /// Instance must be monomorphized\n     pub fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n+        assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n         let tcx = self.tcx;\n         let module = &mut self.module;\n         let func_id = *self.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n-            let sig = cton_sig_from_instance(tcx, inst);\n+            let fn_ty = inst.ty(tcx);\n+            let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n             module.declare_function(&tcx.absolute_item_path_str(inst.def_id()), Linkage::Local, &sig).unwrap()\n         });\n         module.declare_func_in_func(func_id, &mut self.bcx.func)\n     }\n+\n+    fn self_sig(&self) -> FnSig<'tcx> {\n+        let sig = ty_fn_sig(self.tcx, self.instance.ty(self.tcx));\n+        self.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &sig)\n+    }\n+\n+    fn return_type(&self) -> Ty<'tcx> {\n+        self.self_sig().output()\n+    }\n }\n \n pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb: Ebb) {\n@@ -63,7 +118,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n         (local, fx.bcx.append_ebb_param(start_ebb, cton_type), ty, stack_slot)\n     }).collect::<Vec<(Local, Value, Ty, StackSlot)>>();\n \n-    let ret_layout = fx.layout_of(fx.instance.ty(fx.tcx).fn_sig(fx.tcx).skip_binder().output());\n+    let ret_layout = fx.layout_of(fx.return_type());\n     fx.local_map.insert(RETURN_PLACE, CPlace::Addr(ret_param, ret_layout));\n \n     for (local, ebb_param, ty, stack_slot) in func_params {\n@@ -96,7 +151,6 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n ) -> Inst {\n     let func = ::base::trans_operand(fx, func);\n-    let func_ty = func.layout().ty;\n     let return_place = if let Some((place, _)) = destination {\n         ::base::trans_place(fx, place).expect_addr()\n     } else {\n@@ -121,13 +175,9 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             fx.bcx.ins().call(func, &args)\n         }\n         func => {\n+            let func_ty = func.layout().ty;\n             let func = func.load_value(fx);\n-            let sig = match func_ty.sty {\n-                TypeVariants::TyFnDef(def_id, _substs) => fx.tcx.fn_sig(def_id),\n-                TypeVariants::TyFnPtr(fn_sig) => fn_sig,\n-                _ => bug!(\"Calling non function type {:?}\", func_ty),\n-            };\n-            let sig = fx.bcx.import_signature(cton_sig_from_fn_sig(fx.tcx, sig, fx.param_substs));\n+            let sig = fx.bcx.import_signature(cton_sig_from_fn_ty(fx.tcx, func_ty));\n             fx.bcx.ins().call_indirect(sig, func, &args)\n         }\n     };"}, {"sha": "49739c68e10b0730db3a0072112645332965a5a1", "filename": "src/base.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "patch": "@@ -13,8 +13,13 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n                 ::rustc_mir::util::write_mir_pretty(tcx, Some(def_id), &mut mir).unwrap();\n                 tcx.sess.warn(&format!(\"{:?}:\\n\\n{}\", def_id, String::from_utf8_lossy(&mir.into_inner())));\n \n-                let sig = tcx.fn_sig(def_id);\n-                let sig = cton_sig_from_fn_sig(tcx, sig, substs);\n+                let fn_ty = inst.ty(tcx);\n+                let fn_ty = tcx.subst_and_normalize_erasing_regions(\n+                    substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &fn_ty,\n+                );\n+                let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n                 let func_id = {\n                     let module = &mut cx.module;\n                     *cx.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n@@ -44,6 +49,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n                 match ::cranelift::codegen::verify_function(&f, &flags) {\n                     Ok(_) => {}\n                     Err(err) => {\n+                        tcx.sess.err(&format!(\"{:?}\", err));\n                         let pretty_error = ::cranelift::codegen::print_errors::pretty_verifier_error(&f, None, Some(Box::new(writer)), &err);\n                         tcx.sess.fatal(&format!(\"cretonne verify error:\\n{}\", pretty_error));\n                     }"}, {"sha": "0c9d86d92fb3b3cde2a99b7259387fc144f3663c", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "patch": "@@ -1,10 +1,8 @@\n-extern crate rustc_target;\n-\n use std::borrow::Cow;\n use std::fmt;\n \n use syntax::ast::{IntTy, UintTy};\n-use self::rustc_target::spec::{HasTargetSpec, Target};\n+use rustc_target::spec::{HasTargetSpec, Target};\n \n use cranelift_module::{Module, FuncId, DataId};\n "}, {"sha": "d5400c9ce8112afa345718e74e64c648258dd6fd", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2b5e55fb17de690559a7f1343ea3d2e9f91d2fd5", "patch": "@@ -6,6 +6,7 @@ extern crate syntax;\n extern crate rustc;\n extern crate rustc_mir;\n extern crate rustc_codegen_utils;\n+extern crate rustc_target;\n extern crate rustc_incremental;\n extern crate rustc_data_structures;\n "}]}