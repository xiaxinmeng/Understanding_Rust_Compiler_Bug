{"sha": "a39a36aec937bebd74fa1a61afc9576655a723c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOWEzNmFlYzkzN2JlYmQ3NGZhMWE2MWFmYzk1NzY2NTVhNzIzYzY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-22T16:56:51Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-22T16:56:51Z"}, "message": "Rollup merge of #27170 - steveklabnik:doc_std_io_intoinnererror, r=alexcrichton\n\nMostly adding examples.\r\n\r\nr? @alexcrichton", "tree": {"sha": "27f0dcb89094d72a21cb2dfb7959112d94eac8da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f0dcb89094d72a21cb2dfb7959112d94eac8da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a39a36aec937bebd74fa1a61afc9576655a723c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a39a36aec937bebd74fa1a61afc9576655a723c6", "html_url": "https://github.com/rust-lang/rust/commit/a39a36aec937bebd74fa1a61afc9576655a723c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a39a36aec937bebd74fa1a61afc9576655a723c6/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932f0bb5c3bd24868108ff5cfe5f56144fecc274", "url": "https://api.github.com/repos/rust-lang/rust/commits/932f0bb5c3bd24868108ff5cfe5f56144fecc274", "html_url": "https://github.com/rust-lang/rust/commit/932f0bb5c3bd24868108ff5cfe5f56144fecc274"}, {"sha": "d2aee954fee04e48de4441df41076fe4abf84336", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2aee954fee04e48de4441df41076fe4abf84336", "html_url": "https://github.com/rust-lang/rust/commit/d2aee954fee04e48de4441df41076fe4abf84336"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "c25aa35ffbe3b339d9045ea47a6c15a6bd904f4d", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a39a36aec937bebd74fa1a61afc9576655a723c6/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39a36aec937bebd74fa1a61afc9576655a723c6/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=a39a36aec937bebd74fa1a61afc9576655a723c6", "patch": "@@ -304,6 +304,27 @@ pub struct BufWriter<W: Write> {\n /// An error returned by `into_inner` which combines an error that\n /// happened while writing out the buffer, and the buffered writer object\n /// which may be used to recover from the condition.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::io::BufWriter;\n+/// use std::net::TcpStream;\n+///\n+/// let mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n+///\n+/// // do stuff with the stream\n+///\n+/// // we want to get our `TcpStream` back, so let's try:\n+///\n+/// let stream = match stream.into_inner() {\n+///     Ok(s) => s,\n+///     Err(e) => {\n+///         // Here, e is an IntoInnerError\n+///         panic!(\"An error occurred\");\n+///     }\n+/// };\n+/// ```\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoInnerError<W>(W, Error);\n@@ -476,16 +497,67 @@ impl<W: Write> Drop for BufWriter<W> {\n }\n \n impl<W> IntoInnerError<W> {\n-    /// Returns the error which caused the call to `into_inner` to fail.\n+    /// Returns the error which caused the call to `into_inner()` to fail.\n     ///\n     /// This error was returned when attempting to write the internal buffer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io::BufWriter;\n+    /// use std::net::TcpStream;\n+    ///\n+    /// let mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n+    ///\n+    /// // do stuff with the stream\n+    ///\n+    /// // we want to get our `TcpStream` back, so let's try:\n+    ///\n+    /// let stream = match stream.into_inner() {\n+    ///     Ok(s) => s,\n+    ///     Err(e) => {\n+    ///         // Here, e is an IntoInnerError, let's log the inner error.\n+    ///         //\n+    ///         // We'll just 'log' to stdout for this example.\n+    ///         println!(\"{}\", e.error());\n+    ///\n+    ///         panic!(\"An unexpected error occurred.\");\n+    ///     }\n+    /// };\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn error(&self) -> &Error { &self.1 }\n \n     /// Returns the buffered writer instance which generated the error.\n     ///\n     /// The returned object can be used for error recovery, such as\n     /// re-inspecting the buffer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io::BufWriter;\n+    /// use std::net::TcpStream;\n+    ///\n+    /// let mut stream = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n+    ///\n+    /// // do stuff with the stream\n+    ///\n+    /// // we want to get our `TcpStream` back, so let's try:\n+    ///\n+    /// let stream = match stream.into_inner() {\n+    ///     Ok(s) => s,\n+    ///     Err(e) => {\n+    ///         // Here, e is a IntoInnerError, let's re-examine the buffer:\n+    ///         let buffer = e.into_inner();\n+    ///\n+    ///         // do stuff to try to recover\n+    ///\n+    ///         // afterwards, let's just return the stream\n+    ///         buffer.into_inner().unwrap()\n+    ///     }\n+    /// };\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_inner(self) -> W { self.0 }\n }"}]}