{"sha": "5639e52ae1aa91a5d2fef12509410d2997886d49", "node_id": "C_kwDOAAsO6NoAKDU2MzllNTJhZTFhYTkxYTVkMmZlZjEyNTA5NDEwZDI5OTc4ODZkNDk", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-09T08:52:10Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-09T08:52:10Z"}, "message": "move suggestions to its own method", "tree": {"sha": "b0a10f949fa7a9ec7390b86bd63f365afad0e673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a10f949fa7a9ec7390b86bd63f365afad0e673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5639e52ae1aa91a5d2fef12509410d2997886d49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5639e52ae1aa91a5d2fef12509410d2997886d49", "html_url": "https://github.com/rust-lang/rust/commit/5639e52ae1aa91a5d2fef12509410d2997886d49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5639e52ae1aa91a5d2fef12509410d2997886d49/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "html_url": "https://github.com/rust-lang/rust/commit/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec"}], "stats": {"total": 136, "additions": 107, "deletions": 29}, "files": [{"sha": "6f9c6592ad7cf4ea3d7c9ec9dc689506045094e7", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5639e52ae1aa91a5d2fef12509410d2997886d49/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e52ae1aa91a5d2fef12509410d2997886d49/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=5639e52ae1aa91a5d2fef12509410d2997886d49", "patch": "@@ -250,25 +250,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let code = source.error_code(res.is_some());\n         let mut err =\n             self.r.session.struct_span_err_with_code(base_error.span, &base_error.msg, code);\n-        if let Some((trait_ref, self_ty)) =\n-            self.diagnostic_metadata.currently_processing_impl_trait.clone()\n-            && let TyKind::Path(_, self_ty_path) = &self_ty.kind\n-            && let PathResult::Module(ModuleOrUniformRoot::Module(module)) = self.resolve_path(&Segment::from_path(self_ty_path), Some(TypeNS), None)\n-            && let ModuleKind::Def(DefKind::Trait, ..) = module.kind\n-            && trait_ref.path.span == span\n-            && let PathSource::Trait(_) = source\n-            && let Some(Res::Def(DefKind::Struct, _)) = res\n-            && let Ok(self_ty_str) =\n-                self.r.session.source_map().span_to_snippet(self_ty.span)\n-            && let Ok(trait_ref_str) =\n-                self.r.session.source_map().span_to_snippet(trait_ref.path.span)\n-        {\n-                err.multipart_suggestion(\n-                    \"consider swapping the struct and the trait\",\n-                    vec![(trait_ref.path.span, self_ty_str), (self_ty.span, trait_ref_str)],\n-                    Applicability::MaybeIncorrect,\n-                );\n-        }\n+\n+        self.suggest_swapping_misplaced_self_ty_and_trait(&mut err, source, res, base_error.span);\n \n         if let Some(sugg) = base_error.suggestion {\n             err.span_suggestion_verbose(sugg.0, sugg.1, sugg.2, Applicability::MaybeIncorrect);\n@@ -704,6 +687,35 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    fn suggest_swapping_misplaced_self_ty_and_trait(\n+        &mut self,\n+        err: &mut Diagnostic,\n+        source: PathSource<'_>,\n+        res: Option<Res>,\n+        span: Span,\n+    ) {\n+        if let Some((trait_ref, self_ty)) =\n+            self.diagnostic_metadata.currently_processing_impl_trait.clone()\n+            && let TyKind::Path(_, self_ty_path) = &self_ty.kind\n+            && let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n+                self.resolve_path(&Segment::from_path(self_ty_path), Some(TypeNS), None)\n+            && let ModuleKind::Def(DefKind::Trait, ..) = module.kind\n+            && trait_ref.path.span == span\n+            && let PathSource::Trait(_) = source\n+            && let Some(Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, _)) = res\n+            && let Ok(self_ty_str) =\n+                self.r.session.source_map().span_to_snippet(self_ty.span)\n+            && let Ok(trait_ref_str) =\n+                self.r.session.source_map().span_to_snippet(trait_ref.path.span)\n+        {\n+                err.multipart_suggestion(\n+                    \"`impl` items mention the trait being implemented first and the type it is being implemented for second\",\n+                    vec![(trait_ref.path.span, self_ty_str), (self_ty.span, trait_ref_str)],\n+                    Applicability::MaybeIncorrect,\n+                );\n+        }\n+    }\n+\n     fn get_single_associated_item(\n         &mut self,\n         path: &[Segment],"}, {"sha": "03c7ed347bddf3cdedbed26ccf26b8c63dc41013", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs?ref=5639e52ae1aa91a5d2fef12509410d2997886d49", "patch": "@@ -2,10 +2,21 @@\n \n pub trait Trait<'a, T> {}\n \n-pub struct Struct<T> {}\n+pub struct Struct<T>;\n+pub enum Enum<T> {}\n+\n+pub union Union<T> {\n+    f1: usize,\n+}\n \n impl<'a, T> Struct<T> for Trait<'a, T> {}\n //~^ ERROR expected trait, found struct `Struct`\n //~| ERROR trait objects must include the `dyn` keyword\n \n+impl<'a, T> Enum<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found enum `Enum`\n+\n+impl<'a, T> Union<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found union `Union`\n+\n fn main() {}"}, {"sha": "dd6951e047410b76457652f85a04fb904a7281cb", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.stderr", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr?ref=5639e52ae1aa91a5d2fef12509410d2997886d49", "patch": "@@ -1,16 +1,38 @@\n error[E0404]: expected trait, found struct `Struct`\n-  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:7:13\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:12:13\n    |\n LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n    |             ^^^^^^^^^ not a trait\n    |\n-help: consider swapping the struct and the trait\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n    |\n LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n    |             ~~~~~~~~~~~~     ~~~~~~~~~\n \n+error[E0404]: expected trait, found enum `Enum`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:16:13\n+   |\n+LL | impl<'a, T> Enum<T> for Trait<'a, T> {}\n+   |             ^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Enum<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~\n+\n+error[E0404]: expected trait, found union `Union`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:19:13\n+   |\n+LL | impl<'a, T> Union<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Union<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~\n+\n error[E0782]: trait objects must include the `dyn` keyword\n-  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:7:27\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:12:27\n    |\n LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n    |                           ^^^^^^^^^^^^\n@@ -21,7 +43,7 @@ LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n    | \n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0404, E0782.\n For more information about an error, try `rustc --explain E0404`."}, {"sha": "947bc2c79654b8cc1588c91c070664f86f205d2d", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs?ref=5639e52ae1aa91a5d2fef12509410d2997886d49", "patch": "@@ -1,10 +1,21 @@\n pub trait Trait<'a, T> {}\n \n-pub struct Struct<T> {}\n+pub struct Struct<T>;\n+pub enum Enum<T> {}\n+\n+pub union Union<T> {\n+    f1: usize,\n+}\n \n impl<'a, T> Struct<T> for Trait<'a, T> {}\n //~^ ERROR expected trait, found struct `Struct`\n //~| WARNING trait objects without an explicit `dyn` are deprecated\n //~| WARNING this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n \n+impl<'a, T> Enum<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found enum `Enum`\n+\n+impl<'a, T> Union<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found union `Union`\n+\n fn main() {}"}, {"sha": "86ab8474c4299a95b4bee7b5d5b6c9e1d266346f", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.stderr", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5639e52ae1aa91a5d2fef12509410d2997886d49/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr?ref=5639e52ae1aa91a5d2fef12509410d2997886d49", "patch": "@@ -1,16 +1,38 @@\n error[E0404]: expected trait, found struct `Struct`\n-  --> $DIR/suggest-swapping-self-ty-and-trait.rs:5:13\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:10:13\n    |\n LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n    |             ^^^^^^^^^ not a trait\n    |\n-help: consider swapping the struct and the trait\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n    |\n LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n    |             ~~~~~~~~~~~~     ~~~~~~~~~\n \n+error[E0404]: expected trait, found enum `Enum`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:15:13\n+   |\n+LL | impl<'a, T> Enum<T> for Trait<'a, T> {}\n+   |             ^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Enum<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~\n+\n+error[E0404]: expected trait, found union `Union`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:18:13\n+   |\n+LL | impl<'a, T> Union<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^ not a trait\n+   |\n+help: `impl` items mention the trait being implemented first and the type it is being implemented for second\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Union<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~\n+\n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/suggest-swapping-self-ty-and-trait.rs:5:27\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:10:27\n    |\n LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n    |                           ^^^^^^^^^^^^\n@@ -24,6 +46,6 @@ LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n    | \n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0404`."}]}