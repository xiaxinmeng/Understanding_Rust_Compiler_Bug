{"sha": "347e9e4ffe60d321999bb83216e956a0b1370810", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0N2U5ZTRmZmU2MGQzMjE5OTliYjgzMjE2ZTk1NmEwYjEzNzA4MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-14T18:00:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-14T18:00:20Z"}, "message": "auto merge of #13480 : edwardw/rust/vtable-ice, r=alexcrichton\n\nA mismatched type with more type parameters than the expected one causes\r\n`typeck` looking up out of the bound of type parameter vector, which\r\nleads to ICE.\r\n\r\nCloses #13466", "tree": {"sha": "0bf3f874fa957a6653792ca59c4908ac200def80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf3f874fa957a6653792ca59c4908ac200def80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/347e9e4ffe60d321999bb83216e956a0b1370810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/347e9e4ffe60d321999bb83216e956a0b1370810", "html_url": "https://github.com/rust-lang/rust/commit/347e9e4ffe60d321999bb83216e956a0b1370810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/347e9e4ffe60d321999bb83216e956a0b1370810/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f41a85d8e1f577f17e5b17a1d648508e1ac5001", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f41a85d8e1f577f17e5b17a1d648508e1ac5001", "html_url": "https://github.com/rust-lang/rust/commit/2f41a85d8e1f577f17e5b17a1d648508e1ac5001"}, {"sha": "fc043c054f39d5bae176eb93067f13a3be243d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc043c054f39d5bae176eb93067f13a3be243d8e", "html_url": "https://github.com/rust-lang/rust/commit/fc043c054f39d5bae176eb93067f13a3be243d8e"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "3f50a64e6309694c5b27fc71f97e94ee2efa9e20", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/347e9e4ffe60d321999bb83216e956a0b1370810/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347e9e4ffe60d321999bb83216e956a0b1370810/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=347e9e4ffe60d321999bb83216e956a0b1370810", "patch": "@@ -242,16 +242,17 @@ fn lookup_vtable(vcx: &VtableContext,\n     // bounds to see if they include the trait we are looking for.\n     let vtable_opt = match ty::get(ty).sty {\n         ty::ty_param(param_ty {idx: n, ..}) => {\n-            let type_param_bounds: &[@ty::TraitRef] =\n-                vcx.param_env\n-                   .type_param_bounds\n-                   .get(n)\n-                   .trait_bounds\n-                   .as_slice();\n-            lookup_vtable_from_bounds(vcx, span,\n-                                      type_param_bounds,\n-                                      param_numbered(n),\n-                                      trait_ref)\n+            let env_bounds = &vcx.param_env.type_param_bounds;\n+            if env_bounds.len() > n {\n+                let type_param_bounds: &[@ty::TraitRef] =\n+                    env_bounds.get(n).trait_bounds.as_slice();\n+                lookup_vtable_from_bounds(vcx, span,\n+                                          type_param_bounds,\n+                                          param_numbered(n),\n+                                          trait_ref)\n+            } else {\n+                None\n+            }\n         }\n \n         ty::ty_self(_) => {"}, {"sha": "4a75c8ea518b41f9fac559fae273d66612ad7819", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/347e9e4ffe60d321999bb83216e956a0b1370810/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347e9e4ffe60d321999bb83216e956a0b1370810/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=347e9e4ffe60d321999bb83216e956a0b1370810", "patch": "@@ -365,8 +365,9 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n       ty_param(param_ty {idx: id, def_id: did}) => {\n           let ident = match cx.ty_param_defs.borrow().find(&did.node) {\n               Some(def) => token::get_ident(def.ident).get().to_str(),\n-              // This should not happen...\n-              None => format!(\"BUG[{:?}]\", id)\n+              // This can only happen when a type mismatch error happens and\n+              // the actual type has more type parameters than the expected one.\n+              None => format!(\"<generic \\\\#{}>\", id)\n           };\n           if !cx.sess.verbose() {\n               ident"}, {"sha": "e4621495f47fc8474a73bae7c54d414935bf8069", "filename": "src/test/compile-fail/issue-13466.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/347e9e4ffe60d321999bb83216e956a0b1370810/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347e9e4ffe60d321999bb83216e956a0b1370810/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=347e9e4ffe60d321999bb83216e956a0b1370810", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #13466\n+\n+pub fn main() {\n+    // The expected arm type `Option<T>` has one type parameter, while\n+    // the actual arm `Result<T, E>` has two. typeck should not be\n+    // tricked into looking up a non-existing second type parameter.\n+    let _x: uint = match Some(1u) {\n+    //~^ ERROR mismatched types: expected `uint` but found `<generic #0>`\n+        Ok(u) => u, //~ ERROR  mismatched types: expected `std::option::Option<uint>`\n+        Err(e) => fail!(e)  //~ ERROR mismatched types: expected `std::option::Option<uint>`\n+    };\n+}"}]}