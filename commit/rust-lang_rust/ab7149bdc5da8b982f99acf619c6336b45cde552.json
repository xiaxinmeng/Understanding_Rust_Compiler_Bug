{"sha": "ab7149bdc5da8b982f99acf619c6336b45cde552", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzE0OWJkYzVkYThiOTgyZjk5YWNmNjE5YzYzMzZiNDVjZGU1NTI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-23T16:51:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-23T16:51:07Z"}, "message": "Rollup merge of #62791 - estebank:type-ascription, r=petrochenkov\n\nHandle more cases of typos misinterpreted as type ascription\n\nFix #60933, #54516.\n\nCC #47666, #34255, #48016.", "tree": {"sha": "f36748a48aff41c834566c4875927d7597a78b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36748a48aff41c834566c4875927d7597a78b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7149bdc5da8b982f99acf619c6336b45cde552", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdNzr7CRBK7hj4Ov3rIwAAdHIIACJ2E0IQYrA2xEleRoi0Jq2D\nFiAReder1DLcOgLPmv6O0Ttgl3BnN4Gd2dMUhi2oGcRrtLdXutkt48pjekU1i7lN\nnLV2gU78J0+cIDhQnlgbzD0NRa7/aBMsMy5yjYxwoEBW3eh/+NIiUzxPF8+4e5yT\nOuFo7Kg9GIjTeHOZpnm832+P8KTZypSChoOFVD1x60JG53MBm4LYHgjmSxw+qbNJ\nxFky5buzPy9PE3I6gf+l9IvXR2eR6jgZoGuTUw2S98asHblwTLDhzTTvoUnQwutp\nONKb9bAjLKcy4V1RulMuCEPFlL7WZKWdrENXu7Iy8DWM0593/dgpFdRi7E+TyTs=\n=sybc\n-----END PGP SIGNATURE-----\n", "payload": "tree f36748a48aff41c834566c4875927d7597a78b08\nparent 4264f8376a8187fa3404391bac6436b1123af42a\nparent 9dbe2e77b34f5321976ee3b26ca008ad8d574faf\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563900667 -0400\ncommitter GitHub <noreply@github.com> 1563900667 -0400\n\nRollup merge of #62791 - estebank:type-ascription, r=petrochenkov\n\nHandle more cases of typos misinterpreted as type ascription\n\nFix #60933, #54516.\n\nCC #47666, #34255, #48016.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7149bdc5da8b982f99acf619c6336b45cde552", "html_url": "https://github.com/rust-lang/rust/commit/ab7149bdc5da8b982f99acf619c6336b45cde552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7149bdc5da8b982f99acf619c6336b45cde552/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4264f8376a8187fa3404391bac6436b1123af42a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4264f8376a8187fa3404391bac6436b1123af42a", "html_url": "https://github.com/rust-lang/rust/commit/4264f8376a8187fa3404391bac6436b1123af42a"}, {"sha": "9dbe2e77b34f5321976ee3b26ca008ad8d574faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbe2e77b34f5321976ee3b26ca008ad8d574faf", "html_url": "https://github.com/rust-lang/rust/commit/9dbe2e77b34f5321976ee3b26ca008ad8d574faf"}], "stats": {"total": 343, "additions": 225, "deletions": 118}, "files": [{"sha": "f4fc87506f357247666cca64a661a88d750cc84d", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 53, "deletions": 46, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,6 +2,7 @@ use crate::ast::{\n     self, Arg, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind, VariantData,\n };\n+use crate::feature_gate::{feature_err, UnstableFeatures};\n use crate::parse::{SeqSep, PResult, Parser, ParseSess};\n use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType};\n use crate::parse::token::{self, TokenKind};\n@@ -326,8 +327,8 @@ impl<'a> Parser<'a> {\n             self.token.is_keyword(kw::Return) ||\n             self.token.is_keyword(kw::While)\n         );\n-        let cm = self.sess.source_map();\n-        match (cm.lookup_line(self.token.span.lo()), cm.lookup_line(sp.lo())) {\n+        let sm = self.sess.source_map();\n+        match (sm.lookup_line(self.token.span.lo()), sm.lookup_line(sp.lo())) {\n             (Ok(ref a), Ok(ref b)) if a.line != b.line && is_semi_suggestable => {\n                 // The spans are in different lines, expected `;` and found `let` or `return`.\n                 // High likelihood that it is only a missing `;`.\n@@ -365,9 +366,53 @@ impl<'a> Parser<'a> {\n                 err.span_label(self.token.span, \"unexpected token\");\n             }\n         }\n+        self.maybe_annotate_with_ascription(&mut err, false);\n         Err(err)\n     }\n \n+    pub fn maybe_annotate_with_ascription(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        maybe_expected_semicolon: bool,\n+    ) {\n+        if let Some((sp, likely_path)) = self.last_type_ascription {\n+            let sm = self.sess.source_map();\n+            let next_pos = sm.lookup_char_pos(self.token.span.lo());\n+            let op_pos = sm.lookup_char_pos(sp.hi());\n+\n+            if likely_path {\n+                err.span_suggestion(\n+                    sp,\n+                    \"maybe write a path separator here\",\n+                    \"::\".to_string(),\n+                    match self.sess.unstable_features {\n+                        UnstableFeatures::Disallow => Applicability::MachineApplicable,\n+                        _ => Applicability::MaybeIncorrect,\n+                    },\n+                );\n+            } else if op_pos.line != next_pos.line && maybe_expected_semicolon {\n+                err.span_suggestion(\n+                    sp,\n+                    \"try using a semicolon\",\n+                    \";\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else if let UnstableFeatures::Disallow = self.sess.unstable_features {\n+                err.span_label(sp, \"tried to parse a type due to this\");\n+            } else {\n+                err.span_label(sp, \"tried to parse a type due to this type ascription\");\n+            }\n+            if let UnstableFeatures::Disallow = self.sess.unstable_features {\n+                // Give extra information about type ascription only if it's a nightly compiler.\n+            } else {\n+                err.note(\"`#![feature(type_ascription)]` lets you annotate an expression with a \\\n+                          type: `<expr>: <type>`\");\n+                err.note(\"for more information, see \\\n+                          https://github.com/rust-lang/rust/issues/23416\");\n+            }\n+        }\n+    }\n+\n     /// Eats and discards tokens until one of `kets` is encountered. Respects token trees,\n     /// passes through any errors encountered. Used for error recovery.\n     crate fn eat_to_tokens(&mut self, kets: &[&TokenKind]) {\n@@ -556,7 +601,7 @@ impl<'a> Parser<'a> {\n         .collect::<Vec<_>>();\n \n         if !discriminant_spans.is_empty() && has_fields {\n-            let mut err = crate::feature_gate::feature_err(\n+            let mut err = feature_err(\n                 sess,\n                 sym::arbitrary_enum_discriminant,\n                 discriminant_spans.clone(),\n@@ -769,8 +814,8 @@ impl<'a> Parser<'a> {\n                 return Ok(recovered);\n             }\n         }\n-        let cm = self.sess.source_map();\n-        match (cm.lookup_line(prev_sp.lo()), cm.lookup_line(sp.lo())) {\n+        let sm = self.sess.source_map();\n+        match (sm.lookup_line(prev_sp.lo()), sm.lookup_line(sp.lo())) {\n             (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n                 // When the spans are in the same line, it means that the only content\n                 // between them is whitespace, point only at the found token.\n@@ -887,47 +932,9 @@ impl<'a> Parser<'a> {\n             self.look_ahead(2, |t| t.is_ident()) ||\n             self.look_ahead(1, |t| t == &token::Colon) &&  // `foo:bar:baz`\n             self.look_ahead(2, |t| t.is_ident()) ||\n-            self.look_ahead(1, |t| t == &token::ModSep) &&  // `foo:bar::baz`\n-            self.look_ahead(2, |t| t.is_ident())\n-    }\n-\n-    crate fn bad_type_ascription(\n-        &self,\n-        err: &mut DiagnosticBuilder<'a>,\n-        lhs_span: Span,\n-        cur_op_span: Span,\n-        next_sp: Span,\n-        maybe_path: bool,\n-    ) {\n-        err.span_label(self.token.span, \"expecting a type here because of type ascription\");\n-        let cm = self.sess.source_map();\n-        let next_pos = cm.lookup_char_pos(next_sp.lo());\n-        let op_pos = cm.lookup_char_pos(cur_op_span.hi());\n-        if op_pos.line != next_pos.line {\n-            err.span_suggestion(\n-                cur_op_span,\n-                \"try using a semicolon\",\n-                \";\".to_string(),\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else {\n-            if maybe_path {\n-                err.span_suggestion(\n-                    cur_op_span,\n-                    \"maybe you meant to write a path separator here\",\n-                    \"::\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else {\n-                err.note(\"`#![feature(type_ascription)]` lets you annotate an \\\n-                          expression with a type: `<expr>: <type>`\")\n-                    .span_note(\n-                        lhs_span,\n-                        \"this expression expects an ascribed type after the colon\",\n-                    )\n-                    .help(\"this might be indicative of a syntax error elsewhere\");\n-            }\n-        }\n+            self.look_ahead(1, |t| t == &token::ModSep) &&\n+            (self.look_ahead(2, |t| t.is_ident()) ||   // `foo:bar::baz`\n+             self.look_ahead(2, |t| t == &token::Lt))  // `foo:bar::<baz>`\n     }\n \n     crate fn recover_seq_parse_error("}, {"sha": "da38869463737d5d09873a5c3ebf23849baa2c7f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -239,6 +239,7 @@ pub struct Parser<'a> {\n     /// error.\n     crate unclosed_delims: Vec<UnmatchedBrace>,\n     crate last_unexpected_token_span: Option<Span>,\n+    crate last_type_ascription: Option<(Span, bool /* likely path typo */)>,\n     /// If present, this `Parser` is not parsing Rust code but rather a macro call.\n     crate subparser_name: Option<&'static str>,\n }\n@@ -502,6 +503,7 @@ impl<'a> Parser<'a> {\n             max_angle_bracket_count: 0,\n             unclosed_delims: Vec::new(),\n             last_unexpected_token_span: None,\n+            last_type_ascription: None,\n             subparser_name,\n         };\n \n@@ -1422,7 +1424,10 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             let msg = format!(\"expected type, found {}\", self.this_token_descr());\n-            return Err(self.fatal(&msg));\n+            let mut err = self.fatal(&msg);\n+            err.span_label(self.token.span, \"expected type\");\n+            self.maybe_annotate_with_ascription(&mut err, true);\n+            return Err(err);\n         };\n \n         let span = lo.to(self.prev_span);\n@@ -2823,10 +2828,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an associative expression with operators of at least `min_prec` precedence.\n-    fn parse_assoc_expr_with(&mut self,\n-                                 min_prec: usize,\n-                                 lhs: LhsExpr)\n-                                 -> PResult<'a, P<Expr>> {\n+    fn parse_assoc_expr_with(\n+        &mut self,\n+        min_prec: usize,\n+        lhs: LhsExpr,\n+    ) -> PResult<'a, P<Expr>> {\n         let mut lhs = if let LhsExpr::AlreadyParsed(expr) = lhs {\n             expr\n         } else {\n@@ -2840,9 +2846,11 @@ impl<'a> Parser<'a> {\n                 self.parse_prefix_expr(attrs)?\n             }\n         };\n+        let last_type_ascription_set = self.last_type_ascription.is_some();\n \n         match (self.expr_is_complete(&lhs), AssocOp::from_token(&self.token)) {\n             (true, None) => {\n+                self.last_type_ascription = None;\n                 // Semi-statement forms are odd. See https://github.com/rust-lang/rust/issues/29071\n                 return Ok(lhs);\n             }\n@@ -2857,12 +2865,14 @@ impl<'a> Parser<'a> {\n             // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n             // `if x { a } else { b } && if y { c } else { d }`\n             if !self.look_ahead(1, |t| t.is_reserved_ident()) => {\n+                self.last_type_ascription = None;\n                 // These cases are ambiguous and can't be identified in the parser alone\n                 let sp = self.sess.source_map().start_point(self.token.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n                 return Ok(lhs);\n             }\n             (true, Some(ref op)) if !op.can_continue_expr_unambiguously() => {\n+                self.last_type_ascription = None;\n                 return Ok(lhs);\n             }\n             (true, Some(_)) => {\n@@ -2921,21 +2931,9 @@ impl<'a> Parser<'a> {\n                 continue\n             } else if op == AssocOp::Colon {\n                 let maybe_path = self.could_ascription_be_path(&lhs.node);\n-                let next_sp = self.token.span;\n+                self.last_type_ascription = Some((self.prev_span, maybe_path));\n \n-                lhs = match self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type) {\n-                    Ok(lhs) => lhs,\n-                    Err(mut err) => {\n-                        self.bad_type_ascription(\n-                            &mut err,\n-                            lhs_span,\n-                            cur_op_span,\n-                            next_sp,\n-                            maybe_path,\n-                        );\n-                        return Err(err);\n-                    }\n-                };\n+                lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;\n                 continue\n             } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {\n                 // If we didn\u2019t have to handle `x..`/`x..=`, it would be pretty easy to\n@@ -3020,6 +3018,9 @@ impl<'a> Parser<'a> {\n \n             if let Fixity::None = fixity { break }\n         }\n+        if last_type_ascription_set {\n+            self.last_type_ascription = None;\n+        }\n         Ok(lhs)\n     }\n "}, {"sha": "e53660b656865ddb87f29650eb1c364da43b4dd3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -141,7 +141,10 @@ fn parse_args<'a>(\n \n     while p.token != token::Eof {\n         if !p.eat(&token::Comma) {\n-            return Err(ecx.struct_span_err(p.token.span, \"expected token: `,`\"));\n+            let mut err = ecx.struct_span_err(p.token.span, \"expected token: `,`\");\n+            err.span_label(p.token.span, \"expected `,`\");\n+            p.maybe_annotate_with_ascription(&mut err, false);\n+            return Err(err);\n         }\n         if p.token == token::Eof {\n             break;"}, {"sha": "5b01314d8ad4ff3f85375a0577b58c9184b21c12", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -10,13 +10,13 @@ error: expected token: `,`\n   --> $DIR/bad-format-args.rs:3:16\n    |\n LL |     format!(\"\" 1);\n-   |                ^\n+   |                ^ expected `,`\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:4:19\n    |\n LL |     format!(\"\", 1 1);\n-   |                   ^\n+   |                   ^ expected `,`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0fe167963c3f4b3f84d680d081f078115c928a6f", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -87,15 +87,12 @@ error: expected type, found `4`\n   --> $DIR/issue-22644.rs:34:28\n    |\n LL |     println!(\"{}\", a: &mut 4);\n-   |                            ^ expecting a type here because of type ascription\n+   |                     -      ^ expected type\n+   |                     |\n+   |                     tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/issue-22644.rs:34:20\n-   |\n-LL |     println!(\"{}\", a: &mut 4);\n-   |                    ^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 9 previous errors\n "}, {"sha": "acb093b51428b3ab5b4b57418266c8c8ac08f634", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,15 +2,12 @@ error: expected type, found `42`\n   --> $DIR/issue-34255-1.rs:8:24\n    |\n LL |     Test::Drill(field: 42);\n-   |                        ^^ expecting a type here because of type ascription\n+   |                      - ^^ expected type\n+   |                      |\n+   |                      tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/issue-34255-1.rs:8:17\n-   |\n-LL |     Test::Drill(field: 42);\n-   |                 ^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to previous error\n "}, {"sha": "75eb55fa50bb33e5531210a355861e0bf6684130", "filename": "src/test/ui/issues/issue-39616.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `0`\n   --> $DIR/issue-39616.rs:1:12\n    |\n LL | fn foo(a: [0; 1]) {}\n-   |            ^\n+   |            ^ expected type\n \n error: expected one of `)`, `,`, `->`, `where`, or `{`, found `]`\n   --> $DIR/issue-39616.rs:1:16"}, {"sha": "108542c9b6f135b3dd91162bcd17d671a5416ff4", "filename": "src/test/ui/issues/issue-44406.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -15,7 +15,10 @@ LL |         bar(baz: $rest)\n    |                - help: try using a semicolon: `;`\n ...\n LL |     foo!(true);\n-   |          ^^^^ expecting a type here because of type ascription\n+   |          ^^^^ expected type\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bacba10b55fba490dafb837daf829e6f5f4a8de9", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -12,15 +12,12 @@ error: expected type, found keyword `loop`\n   --> $DIR/lifetime_starts_expressions.rs:6:26\n    |\n LL |     loop { break 'label: loop { break 'label 42; }; }\n-   |                          ^^^^ expecting a type here because of type ascription\n+   |                        - ^^^^ expected type\n+   |                        |\n+   |                        tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/lifetime_starts_expressions.rs:6:12\n-   |\n-LL |     loop { break 'label: loop { break 'label 42; }; }\n-   |            ^^^^^^^^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f96848f8239f7ec437b017814c51c014ecea4b60", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected token: `,`\n   --> $DIR/missing-comma.rs:19:19\n    |\n LL |     println!(\"{}\" a);\n-   |                   ^\n+   |                   ^ expected `,`\n \n error: no rules expected the token `b`\n   --> $DIR/missing-comma.rs:21:12"}, {"sha": "2aff328393538c0031c1df39ce7706c693cc8452", "filename": "src/test/ui/parser/issue-33262.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fissue-33262.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fissue-33262.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33262.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `{`\n   --> $DIR/issue-33262.rs:4:22\n    |\n LL |     for i in 0..a as { }\n-   |                      ^\n+   |                      ^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "f02f60e4bfb1df142f74a4886049a65d524b500e", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `'static`\n   --> $DIR/trait-object-macro-matcher.rs:9:8\n    |\n LL |     m!('static);\n-   |        ^^^^^^^\n+   |        ^^^^^^^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "2311887a6fb36d35e6177d7c6da3bb10776084b9", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `{`\n   --> $DIR/recover-enum2.rs:6:18\n    |\n LL |             abc: {},\n-   |                  ^\n+   |                  ^ expected type\n \n error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `{`\n   --> $DIR/recover-enum2.rs:25:22"}, {"sha": "b46d3ca9c233ca2371fe33c3d989f57ca13a72a0", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,15 +2,12 @@ error: expected type, found `3`\n   --> $DIR/recover-from-bad-variant.rs:7:26\n    |\n LL |     let x = Enum::Foo(a: 3, b: 4);\n-   |                          ^ expecting a type here because of type ascription\n+   |                        - ^ expected type\n+   |                        |\n+   |                        tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/recover-from-bad-variant.rs:7:23\n-   |\n-LL |     let x = Enum::Foo(a: 3, b: 4);\n-   |                       ^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error[E0532]: expected tuple struct/variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9"}, {"sha": "02b518e251678a718703c171590878175cac2b7c", "filename": "src/test/ui/parser/removed-syntax-mut-vec-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mut-vec-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mut-vec-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mut-vec-ty.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected type, found keyword `mut`\n   --> $DIR/removed-syntax-mut-vec-ty.rs:1:11\n    |\n LL | type v = [mut isize];\n-   |           ^^^\n+   |           ^^^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "0a1655840b5509752ac70a4c634598976c98b55e", "filename": "src/test/ui/parser/removed-syntax-record.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-record.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-record.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-record.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `{`\n   --> $DIR/removed-syntax-record.rs:1:10\n    |\n LL | type t = { f: () };\n-   |          ^\n+   |          ^ expected type\n \n error: aborting due to previous error\n "}, {"sha": "7ffc26e9edead1542253912856dff347ae444faa", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -29,7 +29,7 @@ error: expected type, found `'a`\n   --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n LL |     let _: Box<('a) + Trait>;\n-   |         -       ^^\n+   |         -       ^^ expected type\n    |         |\n    |         while parsing the type for `_`\n "}, {"sha": "4a8d2f57d89d388a55552ab5c12a82a99009ad9f", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,9 +2,12 @@ error: expected type, found `\"foo\"`\n   --> $DIR/type-ascription-instead-of-method.rs:2:13\n    |\n LL |     Box:new(\"foo\".to_string())\n-   |        -    ^^^^^ expecting a type here because of type ascription\n+   |        -    ^^^^^ expected type\n    |        |\n-   |        help: maybe you meant to write a path separator here: `::`\n+   |        help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to previous error\n "}, {"sha": "7e9a31c06c8b249169fa5b6a343fbbad68d115a0", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,9 +2,12 @@ error: expected type, found `\"\"`\n   --> $DIR/type-ascription-instead-of-variant.rs:2:25\n    |\n LL |     let _ = Option:Some(\"\");\n-   |                   -     ^^ expecting a type here because of type ascription\n+   |                   -     ^^ expected type\n    |                   |\n-   |                   help: maybe you meant to write a path separator here: `::`\n+   |                   help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to previous error\n "}, {"sha": "c11a248d3c7d12652be9de002952f28450078235", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,15 @@\n+struct Reactor {\n+    input_cells: Vec<usize>,\n+}\n+\n+impl Reactor {\n+    pub fn new() -> Self {\n+        input_cells: Vec::new()\n+        //~^ ERROR cannot find value `input_cells` in this scope\n+        //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n+        //~| ERROR wrong number of type arguments: expected 1, found 0\n+        //~| WARNING this was previously accepted by the compiler but is being phased out\n+    }\n+}\n+\n+// This case isn't currently being handled gracefully, including for completeness."}, {"sha": "531455b82b4245f254179af1ae992dd7f29bbebd", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,30 @@\n+error[E0425]: cannot find value `input_cells` in this scope\n+  --> $DIR/issue-34255-1.rs:7:9\n+   |\n+LL |         input_cells: Vec::new()\n+   |         ^^^^^^^^^^^ a field by this name exists in `Self`\n+\n+error: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/issue-34255-1.rs:7:30\n+   |\n+LL |         input_cells: Vec::new()\n+   |                              ^^\n+   |\n+   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n+\n+error[E0601]: `main` function not found in crate `issue_34255_1`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-34255-1.rs`\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/issue-34255-1.rs:7:22\n+   |\n+LL |         input_cells: Vec::new()\n+   |                      ^^^^^^^^^^ expected 1 type argument\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0107, E0425, E0601.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "ceb1dd89daea9b96383b59765ef73e475b1ff979", "filename": "src/test/ui/type/ascription/issue-47666.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let _ = Option:Some(vec![0, 1]); //~ ERROR expected type, found\n+}\n+\n+// This case isn't currently being handled gracefully due to the macro invocation."}, {"sha": "7aa899f795c7d6b452e977ec5830c5864073a19f", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,13 @@\n+error: expected type, found reserved keyword `box`\n+  --> $DIR/issue-47666.rs:2:25\n+   |\n+LL |     let _ = Option:Some(vec![0, 1]);\n+   |                         ^^^^^^^^^^\n+   |                         |\n+   |                         expected type\n+   |                         in this macro invocation\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "6d65760e299b502265de517b1eba844989a962e2", "filename": "src/test/ui/type/ascription/issue-54516.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,6 @@\n+use std::collections::BTreeMap;\n+\n+fn main() {\n+    println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n+    //~^ ERROR expected token: `,`\n+}"}, {"sha": "a846f3bc320e6f5ed0dc16ae36bda0395f12628b", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,13 @@\n+error: expected token: `,`\n+  --> $DIR/issue-54516.rs:4:58\n+   |\n+LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n+   |                            -                             ^ expected `,`\n+   |                            |\n+   |                            help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+\n+error: aborting due to previous error\n+"}, {"sha": "8fb06c887bd3e7a16a332717fb881702f95e94e2", "filename": "src/test/ui/type/ascription/issue-60933.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let u: usize = std::mem:size_of::<u32>();\n+    //~^ ERROR expected one of\n+}"}, {"sha": "c2fc7bbcfc8651df024835ab2e48bfa6b17ea602", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -0,0 +1,13 @@\n+error: expected one of `!`, `::`, or `;`, found `(`\n+  --> $DIR/issue-60933.rs:2:43\n+   |\n+LL |     let u: usize = std::mem:size_of::<u32>();\n+   |                            -              ^ expected one of `!`, `::`, or `;` here\n+   |                            |\n+   |                            help: maybe write a path separator here: `::`\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n+\n+error: aborting due to previous error\n+"}, {"sha": "3fe676de59dab2f1c6b60bcead98564a61e6bd35", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `10`\n   --> $DIR/type-ascription-instead-of-initializer.rs:2:31\n    |\n LL |     let x: Vec::with_capacity(10, 20);\n-   |         --                    ^^\n+   |         --                    ^^ expected type\n    |         ||\n    |         |help: use `=` if you meant to assign\n    |         while parsing the type for `x`"}, {"sha": "8fbcb3969a79aa616970023f4064a78ea13c294c", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab7149bdc5da8b982f99acf619c6336b45cde552/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=ab7149bdc5da8b982f99acf619c6336b45cde552", "patch": "@@ -4,21 +4,21 @@ error: expected type, found `0`\n LL |     println!(\"test\"):\n    |                     - help: try using a semicolon: `;`\n LL |     0;\n-   |     ^ expecting a type here because of type ascription\n+   |     ^ expected type\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: expected type, found `0`\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:23\n    |\n LL |     println!(\"test\"): 0;\n-   |                       ^ expecting a type here because of type ascription\n+   |                     - ^ expected type\n+   |                     |\n+   |                     tried to parse a type due to this type ascription\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n-   |\n-LL |     println!(\"test\"): 0;\n-   |     ^^^^^^^^^^^^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n \n error: aborting due to 2 previous errors\n "}]}