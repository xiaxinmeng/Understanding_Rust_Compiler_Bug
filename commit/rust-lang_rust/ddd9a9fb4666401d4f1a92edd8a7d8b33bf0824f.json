{"sha": "ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f", "node_id": "C_kwDOAAsO6NoAKGRkZDlhOWZiNDY2NjQwMWQ0ZjFhOTJlZGQ4YTdkOGIzM2JmMDgyNGY", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-08T07:14:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-23T14:46:59Z"}, "message": "Add call in `emit_type_mismatch_suggestions`", "tree": {"sha": "1a95371f956ce3f23b32048c43ea5a572090c4a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a95371f956ce3f23b32048c43ea5a572090c4a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f", "html_url": "https://github.com/rust-lang/rust/commit/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a1609ec450d624fd8bf3f88647e966cf83eee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a1609ec450d624fd8bf3f88647e966cf83eee8", "html_url": "https://github.com/rust-lang/rust/commit/d5a1609ec450d624fd8bf3f88647e966cf83eee8"}], "stats": {"total": 88, "additions": 42, "deletions": 46}, "files": [{"sha": "d5f37abb8b4551f01e763ad8dfdfc73afa39e938", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f", "patch": "@@ -45,7 +45,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Expr;\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::{Coercion, InferOk, InferResult, TyCtxtInferExt};\n+use rustc_infer::infer::{Coercion, InferOk, InferResult};\n use rustc_infer::traits::Obligation;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::{\n@@ -1565,9 +1565,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             && let hir::ExprKind::Loop(loop_blk, ..) = expression.kind {\n                               intravisit::walk_block(& mut visitor, loop_blk);\n                         }\n-                        if let Some(expr) = expression {\n-                            self.note_result_coercion(fcx, &mut err, expr, expected, found);\n-                        }\n                     }\n                     ObligationCauseCode::ReturnValue(id) => {\n                         err = self.report_return_mismatched_types(\n@@ -1584,9 +1581,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             let id = fcx.tcx.hir().parent_id(id);\n                             unsized_return = self.is_return_ty_unsized(fcx, id);\n                         }\n-                        if let Some(expr) = expression {\n-                            self.note_result_coercion(fcx, &mut err, expr, expected, found);\n-                        }\n                     }\n                     _ => {\n                         err = fcx.err_ctxt().report_mismatched_types(\n@@ -1626,44 +1620,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         }\n     }\n \n-    fn note_result_coercion(\n-        &self,\n-        fcx: &FnCtxt<'_, 'tcx>,\n-        err: &mut Diagnostic,\n-        expr: &hir::Expr<'tcx>,\n-        expected: Ty<'tcx>,\n-        found: Ty<'tcx>,\n-    ) {\n-        let ty::Adt(e, substs_e) = expected.kind() else { return; };\n-        let ty::Adt(f, substs_f) = found.kind() else { return; };\n-        if e.did() != f.did() {\n-            return;\n-        }\n-        if Some(e.did()) != fcx.tcx.get_diagnostic_item(sym::Result) {\n-            return;\n-        }\n-        let e = substs_e.type_at(1);\n-        let f = substs_f.type_at(1);\n-        if fcx\n-            .infcx\n-            .type_implements_trait(\n-                fcx.tcx.get_diagnostic_item(sym::Into).unwrap(),\n-                [fcx.tcx.erase_regions(f), fcx.tcx.erase_regions(e)],\n-                fcx.param_env,\n-            )\n-            .must_apply_modulo_regions()\n-        {\n-            err.multipart_suggestion(\n-                \"you can rely on the implicit conversion that `?` does to transform the error type\",\n-                vec![\n-                    (expr.span.shrink_to_lo(), \"Ok(\".to_string()),\n-                    (expr.span.shrink_to_hi(), \"?)\".to_string()),\n-                ],\n-                Applicability::MaybeIncorrect,\n-            );\n-        }\n-    }\n-\n     fn note_unreachable_loop_return(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "b10bb593ead4b04bf046347df1dff284c4029e92", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=ddd9a9fb4666401d4f1a92edd8a7d8b33bf0824f", "patch": "@@ -59,7 +59,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n             || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n-            || self.suggest_floating_point_literal(err, expr, expected);\n+            || self.suggest_floating_point_literal(err, expr, expected)\n+            || self.note_result_coercion(err, expr, expected, expr_ty);\n         if !suggested {\n             self.point_at_expr_source_of_inferred_type(err, expr, expr_ty, expected);\n         }\n@@ -697,6 +698,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n     }\n \n+    pub(crate) fn note_result_coercion(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'tcx>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) -> bool {\n+        let ty::Adt(e, substs_e) = expected.kind() else { return false; };\n+        let ty::Adt(f, substs_f) = found.kind() else { return false; };\n+        if e.did() != f.did() {\n+            return false;\n+        }\n+        if Some(e.did()) != self.tcx.get_diagnostic_item(sym::Result) {\n+            return false;\n+        }\n+        let e = substs_e.type_at(1);\n+        let f = substs_f.type_at(1);\n+        if self\n+            .infcx\n+            .type_implements_trait(\n+                self.tcx.get_diagnostic_item(sym::Into).unwrap(),\n+                [self.tcx.erase_regions(f), self.tcx.erase_regions(e)],\n+                self.param_env,\n+            )\n+            .must_apply_modulo_regions()\n+        {\n+            err.multipart_suggestion(\n+                \"you can rely on the implicit conversion that `?` does to transform the error type\",\n+                vec![\n+                    (expr.span.shrink_to_lo(), \"Ok(\".to_string()),\n+                    (expr.span.shrink_to_hi(), \"?)\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n+            return true;\n+        }\n+        false\n+    }\n+\n     /// If the expected type is an enum (Issue #55250) with any variants whose\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants("}]}