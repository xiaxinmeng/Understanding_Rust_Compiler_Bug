{"sha": "5dc384132f7fe6f610ec21e62830ab83f45274a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzM4NDEzMmY3ZmU2ZjYxMGVjMjFlNjI4MzBhYjgzZjQ1Mjc0YTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-04T14:38:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-04T14:38:09Z"}, "message": "introduce macro_arg intermediate query\n\nCurrently, when expanding macros, we look at the source code\ndirectly (we invoke ast_id_to_node query via to_node method).\n\nThis is less then ideal, because it make us re-expand macros after\nevery source change.\n\nThis commit establishes a salsa-firewall: a query to get macro call's\ntoken tree. Unlike the syntax tree, token tree changes only if we\nactually modify the macro itself.", "tree": {"sha": "f9b89014aff6dab0353b2134dc5e8cf502f7fc4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b89014aff6dab0353b2134dc5e8cf502f7fc4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc384132f7fe6f610ec21e62830ab83f45274a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc384132f7fe6f610ec21e62830ab83f45274a9", "html_url": "https://github.com/rust-lang/rust/commit/5dc384132f7fe6f610ec21e62830ab83f45274a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc384132f7fe6f610ec21e62830ab83f45274a9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8876f44054f57c1f4ee305eb47340609683bd566", "url": "https://api.github.com/repos/rust-lang/rust/commits/8876f44054f57c1f4ee305eb47340609683bd566", "html_url": "https://github.com/rust-lang/rust/commit/8876f44054f57c1f4ee305eb47340609683bd566"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "f88ae61bb0e523e9ceed0a2bf3ce477a731725f8", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dc384132f7fe6f610ec21e62830ab83f45274a9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc384132f7fe6f610ec21e62830ab83f45274a9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=5dc384132f7fe6f610ec21e62830ab83f45274a9", "patch": "@@ -42,7 +42,10 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n \n-    #[salsa::invoke(HirFileId::hir_parse_query)]\n+    #[salsa::invoke(crate::ids::macro_arg_query)]\n+    fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n+\n+    #[salsa::invoke(crate::ids::HirFileId::hir_parse_query)]\n     fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n \n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]"}, {"sha": "f9b3f5443c1725b3157bdbeed9a5e34e69850968", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5dc384132f7fe6f610ec21e62830ab83f45274a9/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc384132f7fe6f610ec21e62830ab83f45274a9/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=5dc384132f7fe6f610ec21e62830ab83f45274a9", "patch": "@@ -826,21 +826,20 @@ where\n                     .with_file_id(self.current_file_id);\n \n                 if let Some(call_id) = self.resolver.resolve_macro_call(self.db, path, ast_id) {\n-                    if let Some(expr) = expand_macro_to_expr(self.db, call_id, e.token_tree()) {\n-                        log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n-                        let old_file_id =\n-                            std::mem::replace(&mut self.current_file_id, call_id.into());\n-                        let id = self.collect_expr(&expr);\n-                        self.current_file_id = old_file_id;\n-                        id\n-                    } else {\n-                        // FIXME: Instead of just dropping the error from expansion\n-                        // report it\n-                        self.alloc_expr(Expr::Missing, syntax_ptr)\n+                    if let Some(arg) = self.db.macro_arg(call_id) {\n+                        if let Some(expr) = expand_macro_to_expr(self.db, call_id, &arg) {\n+                            log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n+                            let old_file_id =\n+                                std::mem::replace(&mut self.current_file_id, call_id.into());\n+                            let id = self.collect_expr(&expr);\n+                            self.current_file_id = old_file_id;\n+                            return id;\n+                        }\n                     }\n-                } else {\n-                    self.alloc_expr(Expr::Missing, syntax_ptr)\n                 }\n+                // FIXME: Instead of just dropping the error from expansion\n+                // report it\n+                self.alloc_expr(Expr::Missing, syntax_ptr)\n             }\n         }\n     }\n@@ -1002,14 +1001,10 @@ where\n fn expand_macro_to_expr(\n     db: &impl HirDatabase,\n     macro_call: MacroCallId,\n-    args: Option<&ast::TokenTree>,\n+    arg: &tt::Subtree,\n ) -> Option<TreeArc<ast::Expr>> {\n     let rules = db.macro_def(macro_call.loc(db).def)?;\n-\n-    let args = mbe::ast_to_token_tree(args?)?.0;\n-\n-    let expanded = rules.expand(&args).ok()?;\n-\n+    let expanded = rules.expand(&arg).ok()?;\n     mbe::token_tree_to_expr(&expanded).ok()\n }\n "}, {"sha": "24c5f412b92cbf22b0ba63d61730e9e0ecd9b275", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5dc384132f7fe6f610ec21e62830ab83f45274a9/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc384132f7fe6f610ec21e62830ab83f45274a9/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=5dc384132f7fe6f610ec21e62830ab83f45274a9", "patch": "@@ -86,11 +86,7 @@ fn parse_macro(\n     macro_call_id: MacroCallId,\n ) -> Result<TreeArc<SourceFile>, String> {\n     let loc = macro_call_id.loc(db);\n-    let macro_call = loc.ast_id.to_node(db);\n-    let (macro_arg, _) = macro_call\n-        .token_tree()\n-        .and_then(mbe::ast_to_token_tree)\n-        .ok_or(\"Fail to args in to tt::TokenTree\")?;\n+    let macro_arg = db.macro_arg(macro_call_id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n \n     let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n     let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n@@ -139,6 +135,14 @@ pub(crate) fn macro_def_query(db: &impl DefDatabase, id: MacroDefId) -> Option<A\n     Some(Arc::new(rules))\n }\n \n+pub(crate) fn macro_arg_query(db: &impl DefDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n+    let loc = id.loc(db);\n+    let macro_call = loc.ast_id.to_node(db);\n+    let arg = macro_call.token_tree()?;\n+    let (tt, _) = mbe::ast_to_token_tree(arg)?;\n+    Some(Arc::new(tt))\n+}\n+\n macro_rules! impl_intern_key {\n     ($name:ident) => {\n         impl salsa::InternKey for $name {"}]}