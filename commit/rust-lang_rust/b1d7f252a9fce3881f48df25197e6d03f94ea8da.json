{"sha": "b1d7f252a9fce3881f48df25197e6d03f94ea8da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDdmMjUyYTlmY2UzODgxZjQ4ZGYyNTE5N2U2ZDAzZjk0ZWE4ZGE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-21T14:01:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-21T16:08:14Z"}, "message": "Remove unused tydesc argument to upcall_shared_malloc", "tree": {"sha": "806c7c7a4e73a7c380255bbf2e27d90f3534ad1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806c7c7a4e73a7c380255bbf2e27d90f3534ad1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d7f252a9fce3881f48df25197e6d03f94ea8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d7f252a9fce3881f48df25197e6d03f94ea8da", "html_url": "https://github.com/rust-lang/rust/commit/b1d7f252a9fce3881f48df25197e6d03f94ea8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d7f252a9fce3881f48df25197e6d03f94ea8da/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389aff333d17053878823fc8e6b09096f8eeb78c", "url": "https://api.github.com/repos/rust-lang/rust/commits/389aff333d17053878823fc8e6b09096f8eeb78c", "html_url": "https://github.com/rust-lang/rust/commit/389aff333d17053878823fc8e6b09096f8eeb78c"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "31ee139c524e09867c26894aa436085094a21e64", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=b1d7f252a9fce3881f48df25197e6d03f94ea8da", "patch": "@@ -57,20 +57,17 @@ fn declare_upcalls(targ_cfg: @session::config,\n                              T_ptr(T_i8()),\n                              size_t]),\n           malloc:\n-              d(\"malloc\", [T_ptr(tydesc_type)],\n-                T_ptr(T_i8())),\n+              d(\"malloc\", [T_ptr(tydesc_type)], T_ptr(T_i8())),\n           free:\n               dv(\"free\", [T_ptr(T_i8())]),\n           validate_box:\n               dv(\"validate_box\", [T_ptr(T_i8())]),\n           shared_malloc:\n-              d(\"shared_malloc\", [size_t, T_ptr(tydesc_type)],\n-                T_ptr(T_i8())),\n+              d(\"shared_malloc\", [size_t], T_ptr(T_i8())),\n           shared_free:\n               dv(\"shared_free\", [T_ptr(T_i8())]),\n           shared_realloc:\n-              d(\"shared_realloc\", [T_ptr(T_i8()), size_t],\n-                T_ptr(T_i8())),\n+              d(\"shared_realloc\", [T_ptr(T_i8()), size_t], T_ptr(T_i8())),\n           mark:\n               d(\"mark\", [T_ptr(T_i8())], int_t),\n           create_shared_type_desc:"}, {"sha": "02d6106ca5662828362c9bcd940f411c7575006a", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=b1d7f252a9fce3881f48df25197e6d03f94ea8da", "patch": "@@ -481,12 +481,7 @@ fn GEP_enum(cx: block, llblobptr: ValueRef, enum_id: ast::def_id,\n // and a size indicating how much space we want malloc'd.\n fn trans_shared_malloc(cx: block, llptr_ty: TypeRef, llsize: ValueRef)\n    -> result {\n-    // FIXME: need a table to collect tydesc globals.\n-\n-    let tydesc = C_null(T_ptr(cx.ccx().tydesc_type));\n-    let rval =\n-        Call(cx, cx.ccx().upcalls.shared_malloc,\n-             [llsize, tydesc]);\n+    let rval = Call(cx, cx.ccx().upcalls.shared_malloc, [llsize]);\n     ret rslt(cx, PointerCast(cx, rval, llptr_ty));\n }\n "}, {"sha": "b7b5b910041c03eca1f1cd9faf51eb25d3835a38", "filename": "src/comp/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs?ref=b1d7f252a9fce3881f48df25197e6d03f94ea8da", "patch": "@@ -627,7 +627,7 @@ fn make_opaque_cbox_take_glue(\n \n         // Allocate memory, update original ptr, and copy existing data\n         let malloc = ccx.upcalls.shared_malloc;\n-        let cbox_out = Call(bcx, malloc, [sz, tydesc]);\n+        let cbox_out = Call(bcx, malloc, [sz]);\n         let cbox_out = PointerCast(bcx, cbox_out, llopaquecboxty);\n         let {bcx, val: _} = call_memmove(bcx, cbox_out, cbox_in, sz);\n         Store(bcx, cbox_out, cboxptr);"}, {"sha": "affaa3e8f9c8c9fe1f86451ba38b3ca52cd73122", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b1d7f252a9fce3881f48df25197e6d03f94ea8da/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=b1d7f252a9fce3881f48df25197e6d03f94ea8da", "patch": "@@ -217,29 +217,24 @@ upcall_validate_box(rust_opaque_box* ptr) {\n struct s_shared_malloc_args {\n     uintptr_t retval;\n     size_t nbytes;\n-    type_desc *td;\n };\n \n extern \"C\" CDECL void\n upcall_s_shared_malloc(s_shared_malloc_args *args) {\n     rust_task *task = rust_task_thread::get_task();\n     LOG_UPCALL_ENTRY(task);\n \n-    LOG(task, mem,\n-        \"upcall shared_malloc(%\" PRIdPTR \", 0x%\" PRIxPTR \")\",\n-        args->nbytes, args->td);\n+    LOG(task, mem, \"upcall shared_malloc(%\" PRIdPTR \")\", args->nbytes);\n     void *p = task->kernel->malloc(args->nbytes, \"shared malloc\");\n     memset(p, '\\0', args->nbytes);\n-    LOG(task, mem,\n-        \"upcall shared_malloc(%\" PRIdPTR \", 0x%\" PRIxPTR\n-        \") = 0x%\" PRIxPTR,\n-        args->nbytes, args->td, (uintptr_t)p);\n+    LOG(task, mem, \"upcall shared_malloc(%\" PRIdPTR \") = 0x%\" PRIxPTR,\n+        args->nbytes, (uintptr_t)p);\n     args->retval = (uintptr_t) p;\n }\n \n extern \"C\" CDECL uintptr_t\n-upcall_shared_malloc(size_t nbytes, type_desc *td) {\n-    s_shared_malloc_args args = {0, nbytes, td};\n+upcall_shared_malloc(size_t nbytes) {\n+    s_shared_malloc_args args = {0, nbytes};\n     UPCALL_SWITCH_STACK(&args, upcall_s_shared_malloc);\n     return args.retval;\n }"}]}