{"sha": "77fa041fc1ca58b2ccbdb600f39aa92da1276970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZmEwNDFmYzFjYTU4YjJjY2JkYjYwMGYzOWFhOTJkYTEyNzY5NzA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-27T16:35:24Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-02T06:48:52Z"}, "message": "hir: remove NodeId from Item", "tree": {"sha": "8f691623d821f4ab7ab2a0b6674dfbf7a09a09cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f691623d821f4ab7ab2a0b6674dfbf7a09a09cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77fa041fc1ca58b2ccbdb600f39aa92da1276970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77fa041fc1ca58b2ccbdb600f39aa92da1276970", "html_url": "https://github.com/rust-lang/rust/commit/77fa041fc1ca58b2ccbdb600f39aa92da1276970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77fa041fc1ca58b2ccbdb600f39aa92da1276970/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c25193f3ff60faff504a24749761970a72ccdc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c25193f3ff60faff504a24749761970a72ccdc6", "html_url": "https://github.com/rust-lang/rust/commit/3c25193f3ff60faff504a24749761970a72ccdc6"}], "stats": {"total": 420, "additions": 208, "deletions": 212}, "files": [{"sha": "8b304007a3572bbc5ca5bc9cd12edf11911c6ff9", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n     /// Checks any attribute.\n     fn check_attributes(&self, item: &hir::Item, target: Target) {\n         if target == Target::Fn || target == Target::Const {\n-            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(item.id));\n+            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n         } else if let Some(a) = item.attrs.iter().find(|a| a.check_name(\"target_feature\")) {\n             self.tcx.sess.struct_span_err(a.span, \"attribute should be applied to a function\")\n                 .span_label(item.span, \"not a function\")"}, {"sha": "53c1e59796636bd327d6c43ae9521914cbef8faf", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -1414,7 +1414,6 @@ impl<'a> LoweringContext<'a> {\n \n             trace!(\"exist ty def index: {:#?}\", exist_ty_def_index);\n             let exist_ty_item = hir::Item {\n-                id: exist_ty_id.node_id,\n                 hir_id: exist_ty_id.hir_id,\n                 ident: keywords::Invalid.ident(),\n                 attrs: Default::default(),\n@@ -3128,7 +3127,6 @@ impl<'a> LoweringContext<'a> {\n                         this.insert_item(\n                             new_id.node_id,\n                             hir::Item {\n-                                id: new_id.node_id,\n                                 hir_id: new_id.hir_id,\n                                 ident,\n                                 attrs: attrs.clone(),\n@@ -3234,7 +3232,6 @@ impl<'a> LoweringContext<'a> {\n                         this.insert_item(\n                             new_id,\n                             hir::Item {\n-                                id: new_id,\n                                 hir_id: new_hir_id,\n                                 ident,\n                                 attrs: attrs.clone(),\n@@ -3534,10 +3531,9 @@ impl<'a> LoweringContext<'a> {\n \n         let node = self.lower_item_kind(i.id, &mut ident, &attrs, &mut vis, &i.node);\n \n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(i.id);\n+        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(i.id);\n \n         Some(hir::Item {\n-            id: node_id,\n             hir_id,\n             ident,\n             attrs,"}, {"sha": "9f39d648df1bfcf08df8590669cf482eb94ef6b1", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -356,7 +356,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_item(&mut self, i: &'hir Item) {\n         debug!(\"visit_item: {:?}\", i);\n         debug_assert_eq!(i.hir_id.owner,\n-                         self.definitions.opt_def_index(i.id).unwrap());\n+                         self.definitions.opt_def_index(self.hir_to_node_id[&i.hir_id]).unwrap());\n         self.with_dep_node_owner(i.hir_id.owner, i, |this| {\n             this.insert(i.span, i.hir_id, Node::Item(i));\n             this.with_parent(i.hir_id, |this| {"}, {"sha": "f8d1c949bdc76acf458cde20903be16a273d9a34", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -319,7 +319,7 @@ impl<'hir> Map<'hir> {\n \n         match node {\n             Node::Item(item) => {\n-                let def_id = || self.local_def_id(item.id);\n+                let def_id = || self.local_def_id_from_hir_id(item.hir_id);\n \n                 match item.node {\n                     ItemKind::Static(_, m, _) => Some(Def::Static(def_id(), m == MutMutable)),"}, {"sha": "8dfac646e8ea2ce58bbc7a2b4b067dbf8f0aaf61", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -2221,7 +2221,6 @@ pub struct ItemId {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Item {\n     pub ident: Ident,\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub attrs: HirVec<Attribute>,\n     pub node: ItemKind,"}, {"sha": "773fbda7961ff6a6e970557b82e34f92c8cf1fd4", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -856,7 +856,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {\n         let hir::Item {\n             ident,\n             ref attrs,\n-            id: _,\n             hir_id: _,\n             ref node,\n             ref vis,"}, {"sha": "5fe22f4c59779769eaeb95e14ceff5c88aa71388", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             Node::Item(item) => {\n                 match item.node {\n                     hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n-                        let def_id = self.tcx.hir().local_def_id(item.id);\n+                        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                         let def = self.tcx.adt_def(def_id);\n                         self.repr_has_repr_c = def.repr.c();\n "}, {"sha": "c20454a8822cd65915aadf872bd6246a4c99d4d8", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -2,11 +2,10 @@ use crate::hir::map as hir_map;\n use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use crate::session::{config, Session};\n use crate::session::config::EntryFnType;\n-use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax_pos::Span;\n-use crate::hir::{Item, ItemKind, ImplItem, TraitItem};\n+use crate::hir::{HirId, Item, ItemKind, ImplItem, TraitItem};\n use crate::hir::itemlikevisit::ItemLikeVisitor;\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n@@ -17,22 +16,22 @@ struct EntryContext<'a, 'tcx: 'a> {\n     map: &'a hir_map::Map<'tcx>,\n \n     // The top-level function called 'main'\n-    main_fn: Option<(NodeId, Span)>,\n+    main_fn: Option<(HirId, Span)>,\n \n     // The function that has attribute named 'main'\n-    attr_main_fn: Option<(NodeId, Span)>,\n+    attr_main_fn: Option<(HirId, Span)>,\n \n     // The function that has the attribute 'start' on it\n-    start_fn: Option<(NodeId, Span)>,\n+    start_fn: Option<(HirId, Span)>,\n \n     // The functions that one might think are 'main' but aren't, e.g.\n     // main functions not defined at the top level. For diagnostics.\n-    non_main_fns: Vec<(NodeId, Span)> ,\n+    non_main_fns: Vec<(HirId, Span)> ,\n }\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n-        let def_id = self.map.local_def_id(item.id);\n+        let def_id = self.map.local_def_id_from_hir_id(item.hir_id);\n         let def_key = self.map.def_key(def_id);\n         let at_root = def_key.parent == Some(CRATE_DEF_INDEX);\n         find_item(item, self, at_root);\n@@ -106,18 +105,18 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     match entry_point_type(item, at_root) {\n         EntryPointType::MainNamed => {\n             if ctxt.main_fn.is_none() {\n-                ctxt.main_fn = Some((item.id, item.span));\n+                ctxt.main_fn = Some((item.hir_id, item.span));\n             } else {\n                 span_err!(ctxt.session, item.span, E0136,\n                           \"multiple 'main' functions\");\n             }\n         },\n         EntryPointType::OtherMain => {\n-            ctxt.non_main_fns.push((item.id, item.span));\n+            ctxt.non_main_fns.push((item.hir_id, item.span));\n         },\n         EntryPointType::MainAttr => {\n             if ctxt.attr_main_fn.is_none() {\n-                ctxt.attr_main_fn = Some((item.id, item.span));\n+                ctxt.attr_main_fn = Some((item.hir_id, item.span));\n             } else {\n                 struct_span_err!(ctxt.session, item.span, E0137,\n                                  \"multiple functions with a #[main] attribute\")\n@@ -128,7 +127,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n         },\n         EntryPointType::Start => {\n             if ctxt.start_fn.is_none() {\n-                ctxt.start_fn = Some((item.id, item.span));\n+                ctxt.start_fn = Some((item.hir_id, item.span));\n             } else {\n                 struct_span_err!(ctxt.session, item.span, E0138, \"multiple 'start' functions\")\n                     .span_label(ctxt.start_fn.unwrap().1, \"previous `start` function here\")\n@@ -144,12 +143,12 @@ fn configure_main(\n     tcx: TyCtxt<'_, '_, '_>,\n     visitor: &EntryContext<'_, '_>,\n ) -> Option<(DefId, EntryFnType)> {\n-    if let Some((node_id, _)) = visitor.start_fn {\n-        Some((tcx.hir().local_def_id(node_id), EntryFnType::Start))\n-    } else if let Some((node_id, _)) = visitor.attr_main_fn {\n-        Some((tcx.hir().local_def_id(node_id), EntryFnType::Main))\n-    } else if let Some((node_id, _)) = visitor.main_fn {\n-        Some((tcx.hir().local_def_id(node_id), EntryFnType::Main))\n+    if let Some((hir_id, _)) = visitor.start_fn {\n+        Some((tcx.hir().local_def_id_from_hir_id(hir_id), EntryFnType::Start))\n+    } else if let Some((hir_id, _)) = visitor.attr_main_fn {\n+        Some((tcx.hir().local_def_id_from_hir_id(hir_id), EntryFnType::Main))\n+    } else if let Some((hir_id, _)) = visitor.main_fn {\n+        Some((tcx.hir().local_def_id_from_hir_id(hir_id), EntryFnType::Main))\n     } else {\n         // No main function\n         let mut err = struct_err!(tcx.sess, E0601,"}, {"sha": "7626310ea4eb3e3cf95d304e6723de1d0a1fe7d5", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n             match self.item_refs.get(&*value.as_str()).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {\n-                    let def_id = self.tcx.hir().local_def_id(item.id);\n+                    let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                     self.collect_item(item_index, def_id);\n                 },\n                 // Known lang item with attribute on incorrect target."}, {"sha": "962a08c7bef81a8aea5a0bb1dc67effb405b8dd4", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -36,7 +36,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match item.node {\n         hir::ItemKind::Impl(..) |\n         hir::ItemKind::Fn(..) => {\n-            let generics = tcx.generics_of(tcx.hir().local_def_id(item.id));\n+            let generics = tcx.generics_of(tcx.hir().local_def_id_from_hir_id(item.hir_id));\n             generics.requires_monomorphization(tcx)\n         }\n         _ => false,\n@@ -344,7 +344,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\"\n         // which are currently akin to allocator symbols.\n-        let def_id = self.tcx.hir().local_def_id(item.id);\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n         if codegen_attrs.contains_extern_indicator() ||\n             codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL) {"}, {"sha": "7c2cf29eba1f5288fad5ba8b1d7a804cc9d839b3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -13,7 +13,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n use crate::rustc::lint;\n use crate::session::Session;\n-use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet, NodeMap};\n+use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n use errors::{Applicability, DiagnosticBuilder};\n use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n@@ -204,7 +204,7 @@ struct NamedRegionMap {\n \n     // For each type and trait definition, maps type parameters\n     // to the trait object lifetime defaults computed from them.\n-    pub object_lifetime_defaults: NodeMap<Vec<ObjectLifetimeDefault>>,\n+    pub object_lifetime_defaults: HirIdMap<Vec<ObjectLifetimeDefault>>,\n }\n \n /// See [`NamedRegionMap`].\n@@ -395,8 +395,7 @@ fn resolve_lifetimes<'tcx>(\n             .or_default();\n         Lrc::get_mut(map).unwrap().insert(hir_id.local_id);\n     }\n-    for (k, v) in named_region_map.object_lifetime_defaults {\n-        let hir_id = tcx.hir().node_to_hir_id(k);\n+    for (hir_id, v) in named_region_map.object_lifetime_defaults {\n         let map = rl.object_lifetime_defaults\n             .entry(hir_id.owner_local_def_id())\n             .or_default();\n@@ -1266,8 +1265,8 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n \n fn compute_object_lifetime_defaults(\n     tcx: TyCtxt<'_, '_, '_>,\n-) -> NodeMap<Vec<ObjectLifetimeDefault>> {\n-    let mut map = NodeMap::default();\n+) -> HirIdMap<Vec<ObjectLifetimeDefault>> {\n+    let mut map = HirIdMap::default();\n     for item in tcx.hir().krate().items.values() {\n         match item.node {\n             hir::ItemKind::Struct(_, ref generics)\n@@ -1311,7 +1310,7 @@ fn compute_object_lifetime_defaults(\n                     tcx.sess.span_err(item.span, &object_lifetime_default_reprs);\n                 }\n \n-                map.insert(item.id, result);\n+                map.insert(item.hir_id, result);\n             }\n             _ => {}\n         }\n@@ -1959,7 +1958,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             };\n \n             let map = &self.map;\n-            let unsubst = if let Some(id) = self.tcx.hir().as_local_node_id(def_id) {\n+            let unsubst = if let Some(id) = self.tcx.hir().as_local_hir_id(def_id) {\n                 &map.object_lifetime_defaults[&id]\n             } else {\n                 let tcx = self.tcx;"}, {"sha": "aa23924486165c0222608ea9d1f383d7a9530815", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -761,7 +761,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                 // compiler-generated `extern crate` items have a dummy span.\n                 if item.span.is_dummy() { return }\n \n-                let def_id = self.tcx.hir().local_def_id(item.id);\n+                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                 let cnum = match self.tcx.extern_mod_stmt_cnum(def_id) {\n                     Some(cnum) => cnum,\n                     None => return,\n@@ -791,7 +791,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             // There's no good place to insert stability check for non-Copy unions,\n             // so semi-randomly perform it here in stability.rs\n             hir::ItemKind::Union(..) if !self.tcx.features().untagged_unions => {\n-                let def_id = self.tcx.hir().local_def_id(item.id);\n+                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                 let adt_def = self.tcx.adt_def(def_id);\n                 let ty = self.tcx.type_of(def_id);\n "}, {"sha": "3b89f853c3e8c22529e3eb47f5bed2bd060b8bb1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'gcx, 'tcx> DefIdTree for TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl Visibility {\n-    pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: TyCtxt<'_, '_, '_>) -> Self {\n+    pub fn from_hir(visibility: &hir::Visibility, id: hir::HirId, tcx: TyCtxt<'_, '_, '_>) -> Self {\n         match visibility.node {\n             hir::VisibilityKind::Public => Visibility::Public,\n             hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n@@ -271,7 +271,7 @@ impl Visibility {\n                 def => Visibility::Restricted(def.def_id()),\n             },\n             hir::VisibilityKind::Inherited => {\n-                Visibility::Restricted(tcx.hir().get_module_parent(id))\n+                Visibility::Restricted(tcx.hir().get_module_parent_by_hir_id(id))\n             }\n         }\n     }\n@@ -2737,11 +2737,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::AssociatedItemKind::Existential => bug!(\"only impls can have existentials\"),\n         };\n \n+        let hir_id = self.hir().node_to_hir_id(trait_item_ref.id.node_id);\n+\n         AssociatedItem {\n             ident: trait_item_ref.ident,\n             kind,\n             // Visibility of trait items is inherited from their traits.\n-            vis: Visibility::from_hir(parent_vis, trait_item_ref.id.node_id, self),\n+            vis: Visibility::from_hir(parent_vis, hir_id, self),\n             defaultness: trait_item_ref.defaultness,\n             def_id,\n             container: TraitContainer(parent_def_id),\n@@ -2763,11 +2765,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::AssociatedItemKind::Existential => (ty::AssociatedKind::Existential, false),\n         };\n \n+        let hir_id = self.hir().node_to_hir_id(impl_item_ref.id.node_id);\n+\n         AssociatedItem {\n             ident: impl_item_ref.ident,\n             kind,\n             // Visibility of trait impl items doesn't matter.\n-            vis: ty::Visibility::from_hir(&impl_item_ref.vis, impl_item_ref.id.node_id, self),\n+            vis: ty::Visibility::from_hir(&impl_item_ref.vis, hir_id, self),\n             defaultness: impl_item_ref.defaultness,\n             def_id,\n             container: ImplContainer(parent_def_id),"}, {"sha": "3399562bc8d83770988e8cd75e28273c479d59b0", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -408,8 +408,8 @@ impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n             pprust_hir::AnnNode::Name(_) => Ok(()),\n             pprust_hir::AnnNode::Item(item) => {\n                 s.s.space()?;\n-                s.synth_comment(format!(\"node_id: {} hir local_id: {}\",\n-                                        item.id, item.hir_id.local_id.as_u32()))\n+                s.synth_comment(format!(\"hir_id: {} hir local_id: {}\",\n+                                        item.hir_id, item.hir_id.local_id.as_u32()))\n             }\n             pprust_hir::AnnNode::SubItem(id) => {\n                 s.s.space()?;"}, {"sha": "8ed03efd1a784ab8ca39ba712178d54d2e07e36d", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -3,7 +3,6 @@ use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use syntax::ast;\n use syntax::attr;\n \n pub fn find<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Option<DefId> {\n@@ -19,17 +18,17 @@ fn proc_macro_decls_static<'tcx>(\n     let mut finder = Finder { decls: None };\n     tcx.hir().krate().visit_all_item_likes(&mut finder);\n \n-    finder.decls.map(|id| tcx.hir().local_def_id(id))\n+    finder.decls.map(|id| tcx.hir().local_def_id_from_hir_id(id))\n }\n \n struct Finder {\n-    decls: Option<ast::NodeId>,\n+    decls: Option<hir::HirId>,\n }\n \n impl<'v> ItemLikeVisitor<'v> for Finder {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if attr::contains_name(&item.attrs, \"rustc_proc_macro_decls\") {\n-            self.decls = Some(item.id);\n+            self.decls = Some(item.hir_id);\n         }\n     }\n "}, {"sha": "f5737c8fe51c8574af11d781f30ff8279746870e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -26,7 +26,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::{self, Ty};\n use rustc::{lint, util};\n use hir::Node;\n-use util::nodemap::NodeSet;\n+use util::nodemap::HirIdSet;\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n             hir::ItemKind::Enum(..) |\n             hir::ItemKind::Struct(..) |\n             hir::ItemKind::Union(..) => {\n-                let def_id = cx.tcx.hir().local_def_id(it.id);\n+                let def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n                 self.check_heap_type(cx, it.span, cx.tcx.type_of(def_id))\n             }\n             _ => ()\n@@ -569,21 +569,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n-                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id(item.id));\n+                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n                 (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             hir::ItemKind::Union(_, ref ast_generics) => {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n-                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id(item.id));\n+                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n                 (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             hir::ItemKind::Enum(_, ref ast_generics) => {\n                 if !ast_generics.params.is_empty() {\n                     return;\n                 }\n-                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id(item.id));\n+                let def = cx.tcx.adt_def(cx.tcx.hir().local_def_id_from_hir_id(item.hir_id));\n                 (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             _ => return,\n@@ -611,7 +611,7 @@ declare_lint! {\n }\n \n pub struct MissingDebugImplementations {\n-    impling_types: Option<NodeSet>,\n+    impling_types: Option<HirIdSet>,\n }\n \n impl MissingDebugImplementations {\n@@ -650,11 +650,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n         };\n \n         if self.impling_types.is_none() {\n-            let mut impls = NodeSet::default();\n+            let mut impls = HirIdSet::default();\n             cx.tcx.for_each_impl(debug, |d| {\n                 if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n-                    if let Some(node_id) = cx.tcx.hir().as_local_node_id(ty_def.did) {\n-                        impls.insert(node_id);\n+                    if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(ty_def.did) {\n+                        impls.insert(hir_id);\n                     }\n                 }\n             });\n@@ -663,7 +663,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n             debug!(\"{:?}\", self.impling_types);\n         }\n \n-        if !self.impling_types.as_ref().unwrap().contains(&item.id) {\n+        if !self.impling_types.as_ref().unwrap().contains(&item.hir_id) {\n             cx.span_lint(MISSING_DEBUG_IMPLEMENTATIONS,\n                          item.span,\n                          \"type does not implement `fmt::Debug`; consider adding #[derive(Debug)] \\\n@@ -860,7 +860,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n             _ => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id(it.id);\n+        let def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n         let prfn = match cx.tcx.extern_mod_stmt_cnum(def_id) {\n             Some(cnum) => cx.tcx.plugin_registrar_fn(cnum),\n             None => {\n@@ -1360,7 +1360,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n \n \n         if cx.tcx.features().trivial_bounds {\n-            let def_id = cx.tcx.hir().local_def_id(item.id);\n+            let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             let predicates = cx.tcx.predicates_of(def_id);\n             for &(predicate, span) in &predicates.predicates {\n                 let predicate_kind_name = match predicate {\n@@ -1500,14 +1500,14 @@ declare_lint! {\n }\n \n pub struct UnnameableTestItems {\n-    boundary: ast::NodeId, // NodeId of the item under which things are not nameable\n+    boundary: hir::HirId, // HirId of the item under which things are not nameable\n     items_nameable: bool,\n }\n \n impl UnnameableTestItems {\n     pub fn new() -> Self {\n         Self {\n-            boundary: ast::DUMMY_NODE_ID,\n+            boundary: hir::DUMMY_HIR_ID,\n             items_nameable: true\n         }\n     }\n@@ -1529,7 +1529,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n             if let hir::ItemKind::Mod(..) = it.node {}\n             else {\n                 self.items_nameable = false;\n-                self.boundary = it.id;\n+                self.boundary = it.hir_id;\n             }\n             return;\n         }\n@@ -1544,7 +1544,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n     }\n \n     fn check_item_post(&mut self, _cx: &LateContext<'_, '_>, it: &hir::Item) {\n-        if !self.items_nameable && self.boundary == it.id {\n+        if !self.items_nameable && self.boundary == it.hir_id {\n             self.items_nameable = true;\n         }\n     }\n@@ -1794,7 +1794,7 @@ impl ExplicitOutlivesRequirements {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         let infer_static = cx.tcx.features().infer_static_outlives_requirements;\n-        let def_id = cx.tcx.hir().local_def_id(item.id);\n+        let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         if let hir::ItemKind::Struct(_, ref generics) = item.node {\n             let mut bound_count = 0;\n             let mut lint_spans = Vec::new();"}, {"sha": "4ad1a00afe97c2fec84f4a4f92dd4e0a987ad68c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -839,7 +839,7 @@ impl LintPass for VariantSizeDifferences {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n         if let hir::ItemKind::Enum(ref enum_definition, _) = it.node {\n-            let item_def_id = cx.tcx.hir().local_def_id(it.id);\n+            let item_def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             let t = cx.tcx.type_of(item_def_id);\n             let ty = cx.tcx.erase_regions(&t);\n             match cx.layout_of(ty) {"}, {"sha": "541c7a781992e46c32665f773d90ecf228f37640", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -29,7 +29,7 @@ use std::hash::Hash;\n use std::path::Path;\n use rustc_data_structures::sync::Lrc;\n use std::u32;\n-use syntax::ast::{self, CRATE_NODE_ID};\n+use syntax::ast;\n use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n@@ -314,7 +314,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Public };\n         index.record(DefId::local(CRATE_DEF_INDEX),\n                      IsolatedEncoder::encode_info_for_mod,\n-                     FromId(CRATE_NODE_ID, (&krate.module, &krate.attrs, &vis)));\n+                     FromId(hir::CRATE_HIR_ID, (&krate.module, &krate.attrs, &vis)));\n         let mut visitor = EncodeVisitor { index };\n         krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n         for macro_def in &krate.exported_macros {\n@@ -588,8 +588,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n         };\n \n-        let enum_id = tcx.hir().as_local_node_id(enum_did).unwrap();\n-        let enum_vis = &tcx.hir().expect_item(enum_id).vis;\n+        let enum_id = tcx.hir().as_local_hir_id(enum_did).unwrap();\n+        let enum_vis = &tcx.hir().expect_item_by_hir_id(enum_id).vis;\n \n         Entry {\n             kind: EntryKind::Variant(self.lazy(&data)),\n@@ -624,7 +624,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                                                                  &hir::Visibility)>)\n                            -> Entry<'tcx> {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id(id);\n+        let def_id = tcx.hir().local_def_id_from_hir_id(id);\n         debug!(\"IsolatedEncoder::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n@@ -714,8 +714,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n         };\n \n-        let struct_id = tcx.hir().as_local_node_id(adt_def_id).unwrap();\n-        let struct_vis = &tcx.hir().expect_item(struct_id).vis;\n+        let struct_id = tcx.hir().as_local_hir_id(adt_def_id).unwrap();\n+        let struct_vis = &tcx.hir().expect_item_by_hir_id(struct_id).vis;\n         let mut ctor_vis = ty::Visibility::from_hir(struct_vis, struct_id, tcx);\n         for field in &variant.fields {\n             if ctor_vis.is_at_least(field.vis, tcx) {\n@@ -1055,7 +1055,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 EntryKind::Fn(self.lazy(&data))\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                return self.encode_info_for_mod(FromId(item.id, (m, &item.attrs, &item.vis)));\n+                return self.encode_info_for_mod(FromId(item.hir_id, (m, &item.attrs, &item.vis)));\n             }\n             hir::ItemKind::ForeignMod(_) => EntryKind::ForeignMod,\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n@@ -1154,7 +1154,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n         Entry {\n             kind,\n-            visibility: self.lazy(&ty::Visibility::from_hir(&item.vis, item.id, tcx)),\n+            visibility: self.lazy(&ty::Visibility::from_hir(&item.vis, item.hir_id, tcx)),\n             span: self.lazy(&item.span),\n             attributes: self.encode_attributes(&item.attrs),\n             children: match item.node {\n@@ -1608,11 +1608,9 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             hir::ForeignItemKind::Type => EntryKind::ForeignType,\n         };\n \n-        let node_id = self.tcx.hir().hir_to_node_id(nitem.hir_id);\n-\n         Entry {\n             kind,\n-            visibility: self.lazy(&ty::Visibility::from_hir(&nitem.vis, node_id, tcx)),\n+            visibility: self.lazy(&ty::Visibility::from_hir(&nitem.vis, nitem.hir_id, tcx)),\n             span: self.lazy(&nitem.span),\n             attributes: self.encode_attributes(&nitem.attrs),\n             children: LazySeq::empty(),\n@@ -1648,7 +1646,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n     }\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         intravisit::walk_item(self, item);\n-        let def_id = self.index.tcx.hir().local_def_id(item.id);\n+        let def_id = self.index.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         match item.node {\n             hir::ItemKind::ExternCrate(_) |\n             hir::ItemKind::Use(..) => (), // ignore these\n@@ -1744,7 +1742,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     /// so it's easier to do that here then to wait until we would encounter\n     /// normally in the visitor walk.\n     fn encode_addl_info_for_item(&mut self, item: &hir::Item) {\n-        let def_id = self.tcx.hir().local_def_id(item.id);\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         match item.node {\n             hir::ItemKind::Static(..) |\n             hir::ItemKind::Const(..) |\n@@ -1809,7 +1807,7 @@ struct ImplVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let hir::ItemKind::Impl(..) = item.node {\n-            let impl_id = self.tcx.hir().local_def_id(item.id);\n+            let impl_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_id) {\n                 self.impls\n                     .entry(trait_ref.def_id)"}, {"sha": "284f6796145a8a3487460ede44b661cd3e8e1c0d", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for Collector<'a, 'tcx> {\n             .collect();\n         self.modules.push(ForeignModule {\n             foreign_items,\n-            def_id: self.tcx.hir().local_def_id(it.id),\n+            def_id: self.tcx.hir().local_def_id_from_hir_id(it.hir_id),\n         });\n     }\n "}, {"sha": "8343171b99f4b6f38d5195592c7e123312429dd0", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -215,10 +215,10 @@ impl<T> DepGraphRead for Untracked<T> {\n /// HIR node that doesn't carry its own ID. This will allow an\n /// arbitrary `T` to be passed in, but register a read on the given\n /// `NodeId`.\n-pub struct FromId<T>(pub ast::NodeId, pub T);\n+pub struct FromId<T>(pub hir::HirId, pub T);\n \n impl<T> DepGraphRead for FromId<T> {\n     fn read(&self, tcx: TyCtxt<'_, '_, '_>) {\n-        tcx.hir().read(self.0);\n+        tcx.hir().read_by_hir_id(self.0);\n     }\n }"}, {"sha": "23898387cba4677680027793ec6fce3d0108b455", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for Collector<'a, 'tcx> {\n                 name: None,\n                 kind: cstore::NativeUnknown,\n                 cfg: None,\n-                foreign_module: Some(self.tcx.hir().local_def_id(it.id)),\n+                foreign_module: Some(self.tcx.hir().local_def_id_from_hir_id(it.hir_id)),\n                 wasm_import_module: None,\n             };\n             let mut kind_specified = false;"}, {"sha": "1f20c70dec503099698b908736200a908af10a38", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -952,7 +952,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemKind::Union(_, ref generics) => {\n                 if generics.params.is_empty() {\n                     if self.mode == MonoItemCollectionMode::Eager {\n-                        let def_id = self.tcx.hir().local_def_id(item.id);\n+                        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                         debug!(\"RootCollector: ADT drop-glue for {}\",\n                                def_id_to_string(self.tcx, def_id));\n \n@@ -964,11 +964,12 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemKind::GlobalAsm(..) => {\n                 debug!(\"RootCollector: ItemKind::GlobalAsm({})\",\n                        def_id_to_string(self.tcx,\n-                                        self.tcx.hir().local_def_id(item.id)));\n-                self.output.push(MonoItem::GlobalAsm(item.id));\n+                                        self.tcx.hir().local_def_id_from_hir_id(item.hir_id)));\n+                let node_id = self.tcx.hir().hir_to_node_id(item.hir_id);\n+                self.output.push(MonoItem::GlobalAsm(node_id));\n             }\n             hir::ItemKind::Static(..) => {\n-                let def_id = self.tcx.hir().local_def_id(item.id);\n+                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                 debug!(\"RootCollector: ItemKind::Static({})\",\n                        def_id_to_string(self.tcx, def_id));\n                 self.output.push(MonoItem::Static(def_id));\n@@ -978,7 +979,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 // actually used somewhere. Just declaring them is insufficient.\n \n                 // but even just declaring them must collect the items they refer to\n-                let def_id = self.tcx.hir().local_def_id(item.id);\n+                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n                 let instance = Instance::mono(self.tcx, def_id);\n                 let cid = GlobalId {\n@@ -992,7 +993,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 }\n             }\n             hir::ItemKind::Fn(..) => {\n-                let def_id = self.tcx.hir().local_def_id(item.id);\n+                let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                 self.push_if_root(def_id);\n             }\n         }\n@@ -1097,7 +1098,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             }\n \n-            let impl_def_id = tcx.hir().local_def_id(item.id);\n+            let impl_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n             debug!(\"create_mono_items_for_default_impls(item={})\",\n                    def_id_to_string(tcx, impl_def_id));"}, {"sha": "7fe3f5a36d850178804d2f06119005aebd31b24d", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -27,7 +27,7 @@ struct VarianceTest<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for VarianceTest<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let item_def_id = self.tcx.hir().local_def_id(item.id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n         if let ItemKind::Ty(..) = item.node {\n             for attr in self.tcx.get_attrs(item_def_id).iter() {"}, {"sha": "31018a7cd7a3ca7969627a4fe3038687c32d8e57", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -1,6 +1,5 @@\n //! Used by `rustc` when compiling a plugin crate.\n \n-use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -10,15 +9,15 @@ use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n \n struct RegistrarFinder {\n-    registrars: Vec<(ast::NodeId, Span)> ,\n+    registrars: Vec<(hir::HirId, Span)> ,\n }\n \n impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let hir::ItemKind::Fn(..) = item.node {\n             if attr::contains_name(&item.attrs,\n                                    \"plugin_registrar\") {\n-                self.registrars.push((item.id, item.span));\n+                self.registrars.push((item.hir_id, item.span));\n             }\n         }\n     }\n@@ -47,8 +46,8 @@ fn plugin_registrar_fn<'tcx>(\n     match finder.registrars.len() {\n         0 => None,\n         1 => {\n-            let (node_id, _) = finder.registrars.pop().unwrap();\n-            Some(tcx.hir().local_def_id(node_id))\n+            let (hir_id, _) = finder.registrars.pop().unwrap();\n+            Some(tcx.hir().local_def_id_from_hir_id(hir_id))\n         },\n         _ => {\n             let diagnostic = tcx.sess.diagnostic();"}, {"sha": "240e55abde826964ff3eed4119c9f2fa70e323b4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -220,16 +220,16 @@ impl<'a, 'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'a, 'tcx, V>\n \n fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                                -> (ty::Visibility, Span, &'static str) {\n-    match tcx.hir().as_local_node_id(def_id) {\n-        Some(node_id) => {\n-            let vis = match tcx.hir().get(node_id) {\n+    match tcx.hir().as_local_hir_id(def_id) {\n+        Some(hir_id) => {\n+            let vis = match tcx.hir().get_by_hir_id(hir_id) {\n                 Node::Item(item) => &item.vis,\n                 Node::ForeignItem(foreign_item) => &foreign_item.vis,\n                 Node::TraitItem(..) | Node::Variant(..) => {\n-                    return def_id_visibility(tcx, tcx.hir().get_parent_did(node_id));\n+                    return def_id_visibility(tcx, tcx.hir().get_parent_did_by_hir_id(hir_id));\n                 }\n                 Node::ImplItem(impl_item) => {\n-                    match tcx.hir().get(tcx.hir().get_parent(node_id)) {\n+                    match tcx.hir().get_by_hir_id(tcx.hir().get_parent_item(hir_id)) {\n                         Node::Item(item) => match &item.node {\n                             hir::ItemKind::Impl(.., None, _, _) => &impl_item.vis,\n                             hir::ItemKind::Impl(.., Some(trait_ref), _, _)\n@@ -240,16 +240,16 @@ fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                     }\n                 }\n                 Node::StructCtor(vdata) => {\n-                    let struct_node_id = tcx.hir().get_parent(node_id);\n-                    let item = match tcx.hir().get(struct_node_id) {\n+                    let struct_hir_id = tcx.hir().get_parent_item(hir_id);\n+                    let item = match tcx.hir().get_by_hir_id(struct_hir_id) {\n                         Node::Item(item) => item,\n                         node => bug!(\"unexpected node kind: {:?}\", node),\n                     };\n                     let (mut ctor_vis, mut span, mut descr) =\n-                        (ty::Visibility::from_hir(&item.vis, struct_node_id, tcx),\n+                        (ty::Visibility::from_hir(&item.vis, struct_hir_id, tcx),\n                          item.vis.span, item.vis.node.descr());\n                     for field in vdata.fields() {\n-                        let field_vis = ty::Visibility::from_hir(&field.vis, node_id, tcx);\n+                        let field_vis = ty::Visibility::from_hir(&field.vis, hir_id, tcx);\n                         if ctor_vis.is_at_least(field_vis, tcx) {\n                             ctor_vis = field_vis;\n                             span = field.vis.span;\n@@ -260,7 +260,7 @@ fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                     // If the structure is marked as non_exhaustive then lower the\n                     // visibility to within the crate.\n                     if ctor_vis == ty::Visibility::Public {\n-                        let adt_def = tcx.adt_def(tcx.hir().get_parent_did(node_id));\n+                        let adt_def = tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id));\n                         if adt_def.non_enum_variant().is_field_list_non_exhaustive() {\n                             ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n                             span = attr::find_by_name(&item.attrs, \"non_exhaustive\").unwrap().span;\n@@ -277,7 +277,7 @@ fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                 }\n                 node => bug!(\"unexpected node kind: {:?}\", node)\n             };\n-            (ty::Visibility::from_hir(vis, node_id, tcx), vis.span, vis.node.descr())\n+            (ty::Visibility::from_hir(vis, hir_id, tcx), vis.span, vis.node.descr())\n         }\n         None => {\n             let vis = tcx.visibility(def_id);\n@@ -1679,7 +1679,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let tcx = self.tcx;\n-        let item_visibility = ty::Visibility::from_hir(&item.vis, item.id, tcx);\n+        let item_visibility = ty::Visibility::from_hir(&item.vis, item.hir_id, tcx);\n \n         match item.node {\n             // Crates are always public.\n@@ -1724,7 +1724,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             // Subitems of foreign modules have their own publicity.\n             hir::ItemKind::ForeignMod(ref foreign_mod) => {\n                 for foreign_item in &foreign_mod.items {\n-                    let vis = ty::Visibility::from_hir(&foreign_item.vis, item.id, tcx);\n+                    let vis = ty::Visibility::from_hir(&foreign_item.vis, item.hir_id, tcx);\n                     self.check(foreign_item.hir_id, vis).generics().predicates().ty();\n                 }\n             }\n@@ -1734,7 +1734,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n \n                 for field in struct_def.fields() {\n-                    let field_visibility = ty::Visibility::from_hir(&field.vis, item.id, tcx);\n+                    let field_visibility = ty::Visibility::from_hir(&field.vis, item.hir_id, tcx);\n                     self.check(field.hir_id, min(item_visibility, field_visibility, tcx)).ty();\n                 }\n             }\n@@ -1748,7 +1748,9 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 for impl_item_ref in impl_item_refs {\n                     let impl_item = tcx.hir().impl_item(impl_item_ref.id);\n                     let impl_item_vis = if trait_ref.is_none() {\n-                        min(ty::Visibility::from_hir(&impl_item.vis, item.id, tcx), impl_vis, tcx)\n+                        min(ty::Visibility::from_hir(&impl_item.vis, item.hir_id, tcx),\n+                            impl_vis,\n+                            tcx)\n                     } else {\n                         impl_vis\n                     };"}, {"sha": "4bf6471a6293cc3764768dff2a00576a5452dd51", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -732,7 +732,7 @@ fn compute_all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Vec<DefId>\n     impl<'v, 'a, 'tcx> itemlikevisit::ItemLikeVisitor<'v> for Visitor<'a, 'tcx> {\n         fn visit_item(&mut self, i: &'v hir::Item) {\n             if let hir::ItemKind::Trait(..) = i.node {\n-                let def_id = self.map.local_def_id(i.id);\n+                let def_id = self.map.local_def_id_from_hir_id(i.hir_id);\n                 self.traits.push(def_id);\n             }\n         }"}, {"sha": "8c428e516bcedfc4cadcb98419653a8032e50fcc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -1289,9 +1289,9 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n }\n \n fn check_struct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          id: ast::NodeId,\n+                          id: hir::HirId,\n                           span: Span) {\n-    let def_id = tcx.hir().local_def_id(id);\n+    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n@@ -1305,9 +1305,9 @@ fn check_struct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                         id: ast::NodeId,\n+                         id: hir::HirId,\n                          span: Span) {\n-    let def_id = tcx.hir().local_def_id(id);\n+    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n     check_representable(tcx, span, def_id);\n@@ -1338,28 +1338,28 @@ fn check_opaque<'a, 'tcx>(\n \n pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item) {\n     debug!(\n-        \"check_item_type(it.id={}, it.name={})\",\n-        it.id,\n-        tcx.item_path_str(tcx.hir().local_def_id(it.id))\n+        \"check_item_type(it.hir_id={}, it.name={})\",\n+        it.hir_id,\n+        tcx.item_path_str(tcx.hir().local_def_id_from_hir_id(it.hir_id))\n     );\n     let _indenter = indenter();\n     match it.node {\n         // Consts can play a role in type-checking, so they are included here.\n         hir::ItemKind::Static(..) => {\n-            let def_id = tcx.hir().local_def_id(it.id);\n+            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             tcx.typeck_tables_of(def_id);\n             maybe_check_static_with_link_section(tcx, def_id, it.span);\n         }\n         hir::ItemKind::Const(..) => {\n-            tcx.typeck_tables_of(tcx.hir().local_def_id(it.id));\n+            tcx.typeck_tables_of(tcx.hir().local_def_id_from_hir_id(it.hir_id));\n         }\n         hir::ItemKind::Enum(ref enum_definition, _) => {\n-            check_enum(tcx, it.span, &enum_definition.variants, it.id);\n+            check_enum(tcx, it.span, &enum_definition.variants, it.hir_id);\n         }\n         hir::ItemKind::Fn(..) => {} // entirely within check_item_body\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n-            debug!(\"ItemKind::Impl {} with id {}\", it.ident, it.id);\n-            let impl_def_id = tcx.hir().local_def_id(it.id);\n+            debug!(\"ItemKind::Impl {} with id {}\", it.ident, it.hir_id);\n+            let impl_def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             if let Some(impl_trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n                 check_impl_items_against_trait(\n                     tcx,\n@@ -1373,23 +1373,23 @@ pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Ite\n             }\n         }\n         hir::ItemKind::Trait(..) => {\n-            let def_id = tcx.hir().local_def_id(it.id);\n+            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             check_on_unimplemented(tcx, def_id, it);\n         }\n         hir::ItemKind::Struct(..) => {\n-            check_struct(tcx, it.id, it.span);\n+            check_struct(tcx, it.hir_id, it.span);\n         }\n         hir::ItemKind::Union(..) => {\n-            check_union(tcx, it.id, it.span);\n+            check_union(tcx, it.hir_id, it.span);\n         }\n         hir::ItemKind::Existential(..) => {\n-            let def_id = tcx.hir().local_def_id(it.id);\n+            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n \n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n             check_opaque(tcx, def_id, substs, it.span);\n         }\n         hir::ItemKind::Ty(..) => {\n-            let def_id = tcx.hir().local_def_id(it.id);\n+            let def_id = tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             let pty_ty = tcx.type_of(def_id);\n             let generics = tcx.generics_of(def_id);\n             check_bounds_are_used(tcx, &generics, pty_ty);\n@@ -1476,7 +1476,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_, '_, '_>, id: DefId, span\n fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     trait_def_id: DefId,\n                                     item: &hir::Item) {\n-    let item_def_id = tcx.hir().local_def_id(item.id);\n+    let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n@@ -1842,8 +1842,8 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             sp: Span,\n                             vs: &'tcx [hir::Variant],\n-                            id: ast::NodeId) {\n-    let def_id = tcx.hir().local_def_id(id);\n+                            id: hir::HirId) {\n+    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n "}, {"sha": "860fa526a1b9133343df385ee4f741bc04b066bd", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -241,7 +241,7 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     for_item(tcx, item).with_fcx(|fcx, fcx_tcx| {\n         let variants = lookup_fields(fcx);\n-        let def_id = fcx.tcx.hir().local_def_id(item.id);\n+        let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let packed = fcx.tcx.adt_def(def_id).repr.packed();\n \n         for variant in &variants {\n@@ -302,9 +302,9 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n-    debug!(\"check_trait: {:?}\", item.id);\n+    debug!(\"check_trait: {:?}\", item.hir_id);\n \n-    let trait_def_id = tcx.hir().local_def_id(item.id);\n+    let trait_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n     let trait_def = tcx.trait_def(trait_def_id);\n     if trait_def.is_marker {\n@@ -326,7 +326,7 @@ fn check_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n \n fn check_item_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n-        let def_id = fcx.tcx.hir().local_def_id(item.id);\n+        let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n         let sig = fcx.normalize_associated_types_in(item.span, &sig);\n         let mut implied_bounds = vec![];\n@@ -376,7 +376,7 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"check_impl: {:?}\", item);\n \n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n-        let item_def_id = fcx.tcx.hir().local_def_id(item.id);\n+        let item_def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n         match *ast_trait_ref {\n             Some(ref ast_trait_ref) => {\n@@ -887,7 +887,7 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            item: &hir::Item,\n                                            hir_generics: &hir::Generics)\n {\n-    let item_def_id = tcx.hir().local_def_id(item.id);\n+    let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n     let ty = tcx.type_of(item_def_id);\n     if tcx.has_error_field(ty) {\n         return;\n@@ -1018,7 +1018,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n-        let def_id = self.tcx.hir().local_def_id(i.id);\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(i.hir_id);\n         self.tcx.ensure().check_item_well_formed(def_id);\n     }\n "}, {"sha": "6079f12936b5cf0fde634627ddf93f4eea7fdb33", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -212,7 +212,7 @@ struct ExternCrateToLint {\n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         if let hir::ItemKind::ExternCrate(orig_name) = item.node {\n-            let extern_crate_def_id = self.tcx.hir().local_def_id(item.id);\n+            let extern_crate_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             self.crates_to_lint.push(\n                 ExternCrateToLint {\n                     def_id: extern_crate_def_id,"}, {"sha": "d167c7fcafbe4807ce8f7a0bf7bb44623e14c730", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n             _ => return\n         };\n \n-        let def_id = self.tcx.hir().local_def_id(item.id);\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let self_ty = self.tcx.type_of(def_id);\n         let lang_items = self.tcx.lang_items();\n         match self_ty.sty {\n@@ -288,7 +288,7 @@ impl<'a, 'tcx> InherentCollect<'a, 'tcx> {\n             // Add the implementation to the mapping from implementation to base\n             // type def ID, if there is a base type for this implementation and\n             // the implementation does not have any associated traits.\n-            let impl_def_id = self.tcx.hir().local_def_id(item.id);\n+            let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             let mut rc_vec = self.impls_map.inherent_impls\n                                            .entry(def_id)\n                                            .or_default();"}, {"sha": "832c172e97c18e79f089d82e1fbc47558f864b41", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentOverlapChecker<'a, 'tcx> {\n             hir::ItemKind::Struct(..) |\n             hir::ItemKind::Trait(..) |\n             hir::ItemKind::Union(..) => {\n-                let type_def_id = self.tcx.hir().local_def_id(item.id);\n+                let type_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                 self.check_for_overlapping_inherent_impls(type_def_id);\n             }\n             _ => {}"}, {"sha": "c875b856f3a4f1805af5a3eccc8871ee04e5d676", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -22,11 +22,11 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n     /// to prevent inundating the user with a bunch of similar error\n     /// reports.\n     fn visit_item(&mut self, item: &hir::Item) {\n-        let def_id = self.tcx.hir().local_def_id(item.id);\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         // \"Trait\" impl\n         if let hir::ItemKind::Impl(.., Some(_), _, _) = item.node {\n             debug!(\"coherence2::orphan check: trait impl {}\",\n-                   self.tcx.hir().node_to_string(item.id));\n+                   self.tcx.hir().hir_to_string(item.hir_id));\n             let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n             let trait_def_id = trait_ref.def_id;\n             let cm = self.tcx.sess.source_map();"}, {"sha": "0b1de510aa4bde686ef7ef797222e39457481bef", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -21,7 +21,8 @@ impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n                                 unsafety: hir::Unsafety,\n                                 polarity: hir::ImplPolarity)\n     {\n-        if let Some(trait_ref) = self.tcx.impl_trait_ref(self.tcx.hir().local_def_id(item.id)) {\n+        let local_did = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n+        if let Some(trait_ref) = self.tcx.impl_trait_ref(local_did) {\n             let trait_def = self.tcx.trait_def(trait_ref.def_id);\n             let unsafe_attr = impl_generics.and_then(|generics| {\n                 generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\")"}, {"sha": "95c0ad95bc1a862f3ef16afe8b84399d3fe40d77", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        convert_item(self.tcx, item.id);\n+        convert_item(self.tcx, item.hir_id);\n         intravisit::walk_item(self, item);\n     }\n \n@@ -397,10 +397,10 @@ fn is_param<'a, 'tcx>(\n     }\n }\n \n-fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n-    let it = tcx.hir().expect_item(item_id);\n-    debug!(\"convert: item {} with id {}\", it.ident, it.id);\n-    let def_id = tcx.hir().local_def_id(item_id);\n+fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: hir::HirId) {\n+    let it = tcx.hir().expect_item_by_hir_id(item_id);\n+    debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n+    let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n     match it.node {\n         // These don't define types.\n         hir::ItemKind::ExternCrate(_)\n@@ -577,7 +577,7 @@ fn convert_variant<'a, 'tcx>(\n     attribute_def_id: DefId\n ) -> ty::VariantDef {\n     let mut seen_fields: FxHashMap<ast::Ident, Span> = Default::default();\n-    let node_id = tcx.hir().as_local_node_id(did).unwrap();\n+    let hir_id = tcx.hir().as_local_hir_id(did).unwrap();\n     let fields = def\n         .fields()\n         .iter()\n@@ -601,7 +601,7 @@ fn convert_variant<'a, 'tcx>(\n             ty::FieldDef {\n                 did: fid,\n                 ident: f.ident,\n-                vis: ty::Visibility::from_hir(&f.vis, node_id, tcx),\n+                vis: ty::Visibility::from_hir(&f.vis, hir_id, tcx),\n             }\n         })\n         .collect();\n@@ -937,12 +937,12 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n                     //\n                     // Something of a hack: use the node id for the trait, also as\n                     // the node id for the Self type parameter.\n-                    let param_id = item.id;\n+                    let param_id = item.hir_id;\n \n                     opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n                         name: keywords::SelfUpper.name().as_interned_str(),\n-                        def_id: tcx.hir().local_def_id(param_id),\n+                        def_id: tcx.hir().local_def_id_from_hir_id(param_id),\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n@@ -1477,7 +1477,7 @@ fn find_existential_constraints<'a, 'tcx>(\n             intravisit::NestedVisitorMap::All(&self.tcx.hir())\n         }\n         fn visit_item(&mut self, it: &'tcx Item) {\n-            let def_id = self.tcx.hir().local_def_id(it.id);\n+            let def_id = self.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             // the existential type itself or its children are not within its reveal scope\n             if def_id != self.def_id {\n                 self.check(def_id);"}, {"sha": "fb61dfad472aa204ccff7542e06d0abad1a3c953", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -79,7 +79,7 @@ struct ImplWfCheck<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for ImplWfCheck<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         if let hir::ItemKind::Impl(.., ref impl_item_refs) = item.node {\n-            let impl_def_id = self.tcx.hir().local_def_id(item.id);\n+            let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             enforce_impl_params_are_constrained(self.tcx,\n                                                 impl_def_id,\n                                                 impl_item_refs);"}, {"sha": "b560f3b4979208e18b892538a73e6c3cdd951e2e", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -52,16 +52,16 @@ pub struct InferVisitor<'cx, 'tcx: 'cx> {\n \n impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n-        let item_did = self.tcx.hir().local_def_id(item.id);\n+        let item_did = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n         debug!(\"InferVisitor::visit_item(item={:?})\", item_did);\n \n-        let node_id = self\n+        let hir_id = self\n             .tcx\n             .hir()\n-            .as_local_node_id(item_did)\n+            .as_local_hir_id(item_did)\n             .expect(\"expected local def-id\");\n-        let item = match self.tcx.hir().get(node_id) {\n+        let item = match self.tcx.hir().get_by_hir_id(hir_id) {\n             Node::Item(item) => item,\n             _ => bug!(),\n         };"}, {"sha": "e10c8361207186d15e32b4b7aaeee89a690fa840", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -14,7 +14,7 @@ struct OutlivesTest<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let item_def_id = self.tcx.hir().local_def_id(item.id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n         // For unit testing: check for a special \"rustc_outlives\"\n         // attribute and report an error with various results if found."}, {"sha": "50c8d5adfa3702d255dcddf5bd5a8a0ca0ed5986", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         debug!(\"add_inferreds for item {}\",\n-               self.tcx.hir().node_to_string(item.id));\n+               self.tcx.hir().hir_to_string(item.hir_id));\n \n         match item.node {\n             hir::ItemKind::Struct(ref struct_def, _) |"}, {"sha": "d04b1b276a2cc9156a7a9583f76b2e266825e435", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -12,7 +12,7 @@ struct VarianceTest<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for VarianceTest<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let item_def_id = self.tcx.hir().local_def_id(item.id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n \n         // For unit testing: check for a special \"rustc_variance\"\n         // attribute and report an error with various results if found."}, {"sha": "7511ad5dd29d901b6a8dfdd3dd5c492d5e56e6c0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -1725,7 +1725,7 @@ impl Clean<Item> for doctree::Function {\n             (self.generics.clean(cx), (&self.decl, self.body).clean(cx))\n         });\n \n-        let did = cx.tcx.hir().local_def_id(self.id);\n+        let did = cx.tcx.hir().local_def_id_from_hir_id(self.id);\n         let constness = if cx.tcx.is_min_const_fn(did) {\n             hir::Constness::Const\n         } else {\n@@ -1932,7 +1932,7 @@ impl Clean<Item> for doctree::Trait {\n             name: Some(self.name.clean(cx)),\n             attrs: attrs,\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -1962,7 +1962,7 @@ impl Clean<Item> for doctree::TraitAlias {\n             name: Some(self.name.clean(cx)),\n             attrs,\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -2994,7 +2994,7 @@ impl Clean<Item> for doctree::Struct {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3014,7 +3014,7 @@ impl Clean<Item> for doctree::Union {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3061,7 +3061,7 @@ impl Clean<Item> for doctree::Enum {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3377,7 +3377,7 @@ impl Clean<Item> for doctree::Typedef {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id.clone()),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3401,7 +3401,7 @@ impl Clean<Item> for doctree::Existential {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id.clone()),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3452,7 +3452,7 @@ impl Clean<Item> for doctree::Static {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3477,7 +3477,7 @@ impl Clean<Item> for doctree::Constant {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -3591,7 +3591,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n@@ -4038,7 +4038,7 @@ impl Clean<Item> for doctree::ProcMacro {\n             visibility: Some(Public),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_hir_id(self.id),\n             inner: ProcMacroItem(ProcMacro {\n                 kind: self.kind,\n                 helpers: self.helpers.clean(cx),"}, {"sha": "9c54b40b422aedd3fbe713f0599b5b8a8838fa0a", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -89,7 +89,7 @@ pub struct Struct {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub id: NodeId,\n+    pub id: hir::HirId,\n     pub struct_type: StructType,\n     pub name: Name,\n     pub generics: hir::Generics,\n@@ -102,7 +102,7 @@ pub struct Union {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub id: NodeId,\n+    pub id: hir::HirId,\n     pub struct_type: StructType,\n     pub name: Name,\n     pub generics: hir::Generics,\n@@ -118,7 +118,7 @@ pub struct Enum {\n     pub variants: hir::HirVec<Variant>,\n     pub generics: hir::Generics,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub id: NodeId,\n+    pub id: hir::HirId,\n     pub whence: Span,\n     pub name: Name,\n }\n@@ -135,7 +135,7 @@ pub struct Variant {\n pub struct Function {\n     pub decl: hir::FnDecl,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub id: NodeId,\n+    pub id: hir::HirId,\n     pub name: Name,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n@@ -150,7 +150,7 @@ pub struct Typedef {\n     pub ty: P<hir::Ty>,\n     pub gen: hir::Generics,\n     pub name: Name,\n-    pub id: ast::NodeId,\n+    pub id: hir::HirId,\n     pub attrs: hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: hir::Visibility,\n@@ -161,7 +161,7 @@ pub struct Typedef {\n pub struct Existential {\n     pub exist_ty: hir::ExistTy,\n     pub name: Name,\n-    pub id: ast::NodeId,\n+    pub id: hir::HirId,\n     pub attrs: hir::HirVec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: hir::Visibility,\n@@ -179,7 +179,7 @@ pub struct Static {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub id: ast::NodeId,\n+    pub id: hir::HirId,\n     pub whence: Span,\n }\n \n@@ -191,7 +191,7 @@ pub struct Constant {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub id: ast::NodeId,\n+    pub id: hir::HirId,\n     pub whence: Span,\n }\n \n@@ -203,7 +203,7 @@ pub struct Trait {\n     pub generics: hir::Generics,\n     pub bounds: hir::HirVec<hir::GenericBound>,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub id: ast::NodeId,\n+    pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n@@ -215,7 +215,7 @@ pub struct TraitAlias {\n     pub generics: hir::Generics,\n     pub bounds: hir::HirVec<hir::GenericBound>,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub id: ast::NodeId,\n+    pub id: hir::HirId,\n     pub whence: Span,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n@@ -236,7 +236,7 @@ pub struct Impl {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub id: ast::NodeId,\n+    pub id: hir::HirId,\n }\n \n // For Macro we store the DefId instead of the NodeId, since we also create\n@@ -263,7 +263,7 @@ pub struct ExternCrate {\n \n pub struct Import {\n     pub name: Name,\n-    pub id: NodeId,\n+    pub id: hir::HirId,\n     pub vis: hir::Visibility,\n     pub attrs: hir::HirVec<ast::Attribute>,\n     pub path: hir::Path,\n@@ -273,7 +273,7 @@ pub struct Import {\n \n pub struct ProcMacro {\n     pub name: Name,\n-    pub id: NodeId,\n+    pub id: hir::HirId,\n     pub kind: MacroKind,\n     pub helpers: Vec<Name>,\n     pub attrs: hir::HirVec<ast::Attribute>,"}, {"sha": "c1bd1d83a5b00b17ed9c7f387ba0a3a42ced2e71", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77fa041fc1ca58b2ccbdb600f39aa92da1276970/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=77fa041fc1ca58b2ccbdb600f39aa92da1276970", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         debug!(\"Visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n         Struct {\n-            id: item.id,\n+            id: item.hir_id,\n             struct_type,\n             name,\n             vis: item.vis.clone(),\n@@ -120,7 +120,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         debug!(\"Visiting union\");\n         let struct_type = struct_type_from_def(&*sd);\n         Union {\n-            id: item.id,\n+            id: item.hir_id,\n             struct_type,\n             name,\n             vis: item.vis.clone(),\n@@ -152,7 +152,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             depr: self.deprecation(it.hir_id),\n             generics: params.clone(),\n             attrs: it.attrs.clone(),\n-            id: it.id,\n+            id: it.hir_id,\n             whence: it.span,\n         }\n     }\n@@ -202,7 +202,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n \n                 om.proc_macros.push(ProcMacro {\n                     name,\n-                    id: item.id,\n+                    id: item.hir_id,\n                     kind,\n                     helpers,\n                     attrs: item.attrs.clone(),\n@@ -213,7 +213,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             }\n             None => {\n                 om.fns.push(Function {\n-                    id: item.id,\n+                    id: item.hir_id,\n                     vis: item.vis.clone(),\n                     stab: self.stability(item.hir_id),\n                     depr: self.deprecation(item.hir_id),\n@@ -262,7 +262,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     ///\n     /// Returns `true` if the target has been inlined.\n     fn maybe_inline_local(&mut self,\n-                          id: ast::NodeId,\n+                          id: hir::HirId,\n                           def: Def,\n                           renamed: Option<ast::Ident>,\n                           glob: bool,\n@@ -291,7 +291,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             return false;\n         };\n \n-        let use_attrs = tcx.hir().attrs(id);\n+        let use_attrs = tcx.hir().attrs_by_hir_id(id);\n         // Don't inline `doc(hidden)` imports so they can be stripped at a later stage.\n         let is_no_inline = use_attrs.lists(\"doc\").has_word(\"no_inline\") ||\n                            use_attrs.lists(\"doc\").has_word(\"hidden\");\n@@ -381,7 +381,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         let ident = renamed.unwrap_or(item.ident);\n \n         if item.vis.node.is_pub() {\n-            let def_id = self.cx.tcx.hir().local_def_id(item.id);\n+            let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             self.store_path(def_id);\n         }\n \n@@ -401,7 +401,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             _ if self.inlining && !item.vis.node.is_pub() => {}\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::ExternCrate(orig_name) => {\n-                let def_id = self.cx.tcx.hir().local_def_id(item.id);\n+                let def_id = self.cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n                 om.extern_crates.push(ExternCrate {\n                     cnum: self.cx.tcx.extern_mod_stmt_cnum(def_id)\n                                 .unwrap_or(LOCAL_CRATE),\n@@ -436,7 +436,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                         }\n                     });\n                     let ident = if is_glob { None } else { Some(ident) };\n-                    if self.maybe_inline_local(item.id,\n+                    if self.maybe_inline_local(item.hir_id,\n                                                path.def,\n                                                ident,\n                                                is_glob,\n@@ -448,7 +448,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n \n                 om.imports.push(Import {\n                     name: ident.name,\n-                    id: item.id,\n+                    id: item.hir_id,\n                     vis: item.vis.clone(),\n                     attrs: item.attrs.clone(),\n                     path: (**path).clone(),\n@@ -477,7 +477,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     ty: ty.clone(),\n                     gen: gen.clone(),\n                     name: ident.name,\n-                    id: item.id,\n+                    id: item.hir_id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -490,7 +490,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 let t = Existential {\n                     exist_ty: exist_ty.clone(),\n                     name: ident.name,\n-                    id: item.id,\n+                    id: item.hir_id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -504,7 +504,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     type_: ty.clone(),\n                     mutability: mut_.clone(),\n                     expr: exp.clone(),\n-                    id: item.id,\n+                    id: item.hir_id,\n                     name: ident.name,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n@@ -518,7 +518,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 let s = Constant {\n                     type_: ty.clone(),\n                     expr: exp.clone(),\n-                    id: item.id,\n+                    id: item.hir_id,\n                     name: ident.name,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n@@ -539,7 +539,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     items,\n                     generics: gen.clone(),\n                     bounds: b.iter().cloned().collect(),\n-                    id: item.id,\n+                    id: item.hir_id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -553,7 +553,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     name: ident.name,\n                     generics: gen.clone(),\n                     bounds: b.iter().cloned().collect(),\n-                    id: item.id,\n+                    id: item.hir_id,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n@@ -585,7 +585,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                         for_: ty.clone(),\n                         items,\n                         attrs: item.attrs.clone(),\n-                        id: item.id,\n+                        id: item.hir_id,\n                         whence: item.span,\n                         vis: item.vis.clone(),\n                         stab: self.stability(item.hir_id),"}]}