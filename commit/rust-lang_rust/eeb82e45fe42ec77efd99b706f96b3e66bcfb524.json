{"sha": "eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYjgyZTQ1ZmU0MmVjNzdlZmQ5OWI3MDZmOTZiM2U2NmJjZmI1MjQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-12T22:45:54Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-13T19:44:34Z"}, "message": "Add more tests for generic associated type bounds", "tree": {"sha": "e6efb16f2288555c5197b01e285e53192d2b1e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6efb16f2288555c5197b01e285e53192d2b1e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "html_url": "https://github.com/rust-lang/rust/commit/eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d785c8c447bd7f972e68e346a3f7b04c56ce486b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d785c8c447bd7f972e68e346a3f7b04c56ce486b", "html_url": "https://github.com/rust-lang/rust/commit/d785c8c447bd7f972e68e346a3f7b04c56ce486b"}], "stats": {"total": 266, "additions": 190, "deletions": 76}, "files": [{"sha": "8094450e5e137dfb9c93bd1b9df2f449d95cfe54", "filename": "src/test/ui/generic-associated-types/generic-associated-type-bounds.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+pub trait X {\n+    type Y<'a>;\n+    fn m(&self) -> Self::Y<'_>;\n+}\n+\n+impl X for () {\n+    type Y<'a> = &'a ();\n+\n+    fn m(&self) -> Self::Y<'_> {\n+        self\n+    }\n+}\n+\n+fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &() {\n+    x.m()\n+}\n+\n+fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &() {\n+    x.m()\n+}\n+\n+fn h(x: &()) -> &() {\n+    x.m()\n+}\n+\n+fn main() {\n+    f(&());\n+    g(&());\n+    h(&());\n+}"}, {"sha": "5e73a8829862233ca6242d7087979ae55e8a79ec", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -1,11 +1,11 @@\n #![feature(generic_associated_types)]\n- //~^ WARNING the feature\n+//~^ WARNING the feature\n \n pub trait SubTrait {}\n \n pub trait SuperTrait {\n     type SubType<'a>: SubTrait;\n-      //~^ ERROR missing generics for associated\n+    //~^ ERROR missing generics for associated\n \n     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n }\n@@ -36,6 +36,4 @@ impl SuperTrait for SuperStruct {\n \n fn main() {\n     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n-      //~^ ERROR the trait\n-      //~| ERROR the trait\n }"}, {"sha": "17661e0d90a4aecf2b550d95f27498ba38f4ea3e", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -23,41 +23,6 @@ help: use angle brackets to add missing lifetime argument\n LL |     type SubType<'a><'a>: SubTrait;\n    |                 ^^^^\n \n-error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:38:14\n-   |\n-LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n-   |\n-   = help: consider moving `get_sub` to another trait\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:10:37\n-   |\n-LL | pub trait SuperTrait {\n-   |           ---------- this trait cannot be made into an object...\n-...\n-LL |     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n-   |                                     ^^^^^^^^^^^^^^^^^ ...because method `get_sub` references the `Self` type in its return type\n-\n-error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:38:57\n-   |\n-LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n-   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n-   |\n-   = help: consider moving `get_sub` to another trait\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:10:37\n-   |\n-LL | pub trait SuperTrait {\n-   |           ---------- this trait cannot be made into an object...\n-...\n-LL |     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n-   |                                     ^^^^^^^^^^^^^^^^^ ...because method `get_sub` references the `Self` type in its return type\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n-   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-Some errors have detailed explanations: E0038, E0107.\n-For more information about an error, try `rustc --explain E0038`.\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "aeb33ca54641cc399daa00c0ef7209194e4aba85", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -19,7 +19,7 @@ impl<'a, T> RefCont<'a, T> for Box<T> {\n \n trait MapLike<K, V> {\n     type VRefCont<'a>: RefCont<'a, V>;\n-      //~^ ERROR missing generics\n+    //~^ ERROR missing generics\n     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n }\n \n@@ -42,6 +42,5 @@ impl<K, V: Default> MapLike<K, V> for Source {\n fn main() {\n     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n-      //~^ ERROR the trait\n-      //~^^^ ERROR the trait\n+    //~^^ ERROR type mismatch resolving\n }"}, {"sha": "a119bff03e2906e68bf67f30895e0ea4e9b110a1", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -14,41 +14,17 @@ help: use angle brackets to add missing lifetime argument\n LL |     type VRefCont<'a><'a>: RefCont<'a, V>;\n    |                  ^^^^\n \n-error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:44:12\n-   |\n-LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n-   |\n-   = help: consider moving `get` to another trait\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:23:38\n-   |\n-LL | trait MapLike<K, V> {\n-   |       ------- this trait cannot be made into an object...\n-...\n-LL |     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `get` references the `Self` type in its return type\n-\n-error[E0038]: the trait `MapLike` cannot be made into an object\n+error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'static> == (dyn RefCont<'_, u8> + 'static)`\n   --> $DIR/issue-79422.rs:43:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n-   |\n-   = help: consider moving `get` to another trait\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:23:38\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn RefCont`, found reference\n    |\n-LL | trait MapLike<K, V> {\n-   |       ------- this trait cannot be made into an object...\n-...\n-LL |     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `get` references the `Self` type in its return type\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n-   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n+   = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n+                 found reference `&'static u8`\n+   = note: required for the cast to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0038, E0107.\n-For more information about an error, try `rustc --explain E0038`.\n+Some errors have detailed explanations: E0107, E0271.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "0024e127a982c94f65899d927be8c4b733b6d735", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -0,0 +1,36 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+pub trait X {\n+    type Y<'a>;\n+    fn m(&self) -> Self::Y<'_>;\n+}\n+\n+impl X for () {\n+    type Y<'a> = &'a ();\n+\n+    fn m(&self) -> Self::Y<'_> {\n+        self\n+    }\n+}\n+\n+fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n+    x.m()\n+    //~^ ERROR explicit lifetime required\n+}\n+\n+fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n+    x.m()\n+    //~^ ERROR explicit lifetime required\n+}\n+\n+fn h(x: &()) -> &'static () {\n+    x.m()\n+    //~^ ERROR explicit lifetime required\n+}\n+\n+fn main() {\n+    f(&());\n+    g(&());\n+    h(&());\n+}"}, {"sha": "13b765dfa57191e8d1aa59ea89233afa283c56b8", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -0,0 +1,27 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/projection-type-lifetime-mismatch.rs:18:5\n+   |\n+LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n+   |         ------------------------------- help: add explicit lifetime `'static` to the type of `x`: `&'static impl for<'a> X<Y<'a> = &'a ()>`\n+LL |     x.m()\n+   |     ^^^^^ lifetime `'static` required\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/projection-type-lifetime-mismatch.rs:23:5\n+   |\n+LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n+   |                                       -- help: add explicit lifetime `'static` to the type of `x`: `&'static T`\n+LL |     x.m()\n+   |     ^^^^^ lifetime `'static` required\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/projection-type-lifetime-mismatch.rs:28:5\n+   |\n+LL | fn h(x: &()) -> &'static () {\n+   |         --- help: add explicit lifetime `'static` to the type of `x`: `&'static ()`\n+LL |     x.m()\n+   |     ^^^^^ lifetime `'static` required\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "7bcc7ba752ad04b8c263c5ebf43ee93cea172f6d", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.rs?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -0,0 +1,28 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+pub trait X {\n+    type Y<'a: 'static>;\n+    //~^ WARNING unnecessary lifetime parameter\n+}\n+\n+impl X for () {\n+    type Y<'a> = &'a ();\n+}\n+\n+struct B<'a, T: for<'r> X<Y<'r> = &'r ()>> {\n+    f: <T as X>::Y<'a>,\n+    //~^ ERROR lifetime bound not satisfied\n+}\n+\n+struct C<'a, T: X> {\n+    f: <T as X>::Y<'a>,\n+    //~^ ERROR lifetime bound not satisfied\n+}\n+\n+struct D<'a> {\n+    f: <() as X>::Y<'a>,\n+    //~^ ERROR lifetime bound not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "1c81d33ccfe7280f423c70a63d716a7d2cbb3dfd", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eeb82e45fe42ec77efd99b706f96b3e66bcfb524/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr?ref=eeb82e45fe42ec77efd99b706f96b3e66bcfb524", "patch": "@@ -0,0 +1,50 @@\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/unsatified-item-lifetime-bound.rs:5:12\n+   |\n+LL |     type Y<'a: 'static>;\n+   |            ^^^^^^^^^^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/unsatified-item-lifetime-bound.rs:14:8\n+   |\n+LL |     f: <T as X>::Y<'a>,\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 13:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:13:10\n+   |\n+LL | struct B<'a, T: for<'r> X<Y<'r> = &'r ()>> {\n+   |          ^^\n+   = note: but lifetime parameter must outlive the static lifetime\n+\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/unsatified-item-lifetime-bound.rs:19:8\n+   |\n+LL |     f: <T as X>::Y<'a>,\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 18:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:18:10\n+   |\n+LL | struct C<'a, T: X> {\n+   |          ^^\n+   = note: but lifetime parameter must outlive the static lifetime\n+\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/unsatified-item-lifetime-bound.rs:24:8\n+   |\n+LL |     f: <() as X>::Y<'a>,\n+   |        ^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the struct at 23:10\n+  --> $DIR/unsatified-item-lifetime-bound.rs:23:10\n+   |\n+LL | struct D<'a> {\n+   |          ^^\n+   = note: but lifetime parameter must outlive the static lifetime\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0478`."}]}