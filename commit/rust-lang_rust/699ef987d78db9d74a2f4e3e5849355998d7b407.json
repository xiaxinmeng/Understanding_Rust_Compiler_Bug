{"sha": "699ef987d78db9d74a2f4e3e5849355998d7b407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OWVmOTg3ZDc4ZGI5ZDc0YTJmNGUzZTU4NDkzNTU5OThkN2I0MDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-13T19:43:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-14T22:20:27Z"}, "message": "rustc: Start work on lvals", "tree": {"sha": "9b85b1b6172cbe5ababfaf3f58d62bd2c973063b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b85b1b6172cbe5ababfaf3f58d62bd2c973063b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/699ef987d78db9d74a2f4e3e5849355998d7b407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/699ef987d78db9d74a2f4e3e5849355998d7b407", "html_url": "https://github.com/rust-lang/rust/commit/699ef987d78db9d74a2f4e3e5849355998d7b407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/699ef987d78db9d74a2f4e3e5849355998d7b407/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ab80f743b3e2d34bb702be787507418cc794a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ab80f743b3e2d34bb702be787507418cc794a8", "html_url": "https://github.com/rust-lang/rust/commit/c7ab80f743b3e2d34bb702be787507418cc794a8"}], "stats": {"total": 196, "additions": 137, "deletions": 59}, "files": [{"sha": "5af9fa8b1c7908aa274e1d2a711441a568331ea1", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/699ef987d78db9d74a2f4e3e5849355998d7b407/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699ef987d78db9d74a2f4e3e5849355998d7b407/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=699ef987d78db9d74a2f4e3e5849355998d7b407", "patch": "@@ -89,12 +89,18 @@ tag expr_ {\n     expr_binary(binop, @expr, @expr);\n     expr_unary(unop, @expr);\n     expr_lit(@lit);\n-    expr_name(name, option[referent]);\n-    expr_field(@expr, ident);\n-    expr_index(@expr, @expr);\n     expr_cast(@expr, @ty);\n     expr_if(@expr, block, option[block]);\n     expr_block(block);\n+    expr_assign(@lval, @expr);\n+    expr_lval(@lval);\n+}\n+\n+type lval = spanned[lval_];\n+tag lval_ {\n+    lval_field(@expr, ident);\n+    lval_index(@expr, @expr);\n+    lval_name(name, option[referent]);\n }\n \n type lit = spanned[lit_];"}, {"sha": "d6968a5b9586da3b796c6360f0a03d29eadd3f46", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/699ef987d78db9d74a2f4e3e5849355998d7b407/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699ef987d78db9d74a2f4e3e5849355998d7b407/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=699ef987d78db9d74a2f4e3e5849355998d7b407", "patch": "@@ -238,6 +238,25 @@ io fn parse_possibly_mutable_expr(parser p) -> tup(bool, @ast.expr) {\n     ret tup(mut, parse_expr(p));\n }\n \n+io fn parse_lval(parser p) -> option[@ast.lval] {\n+    auto lo = p.get_span();\n+\n+    alt (p.peek()) {\n+        case (token.IDENT(?i)) {\n+            auto n = parse_name(p, i);\n+            auto hi = n.span;\n+            auto lval = ast.lval_name(n, none[ast.referent]);\n+            ret some(@spanned(lo, hi, lval));\n+        }\n+\n+        case (_) {\n+            ret none[@ast.lval];\n+        }\n+    }\n+\n+    fail;\n+}\n+\n io fn parse_bottom_expr(parser p) -> @ast.expr {\n \n     auto lo = p.get_span();\n@@ -297,21 +316,22 @@ io fn parse_bottom_expr(parser p) -> @ast.expr {\n             ex = ast.expr_rec(es.node);\n         }\n \n-        case (token.IDENT(?i)) {\n-            auto n = parse_name(p, i);\n-            hi = n.span;\n-            ex = ast.expr_name(n, none[ast.referent]);\n-        }\n-\n         case (_) {\n-            alt (parse_lit(p)) {\n-                case (some[ast.lit](?lit)) {\n-                    hi = lit.span;\n-                    ex = ast.expr_lit(@lit);\n+            alt (parse_lval(p)) {\n+                case (some[@ast.lval](?lval)) {\n+                    hi = lval.span;\n+                    ex = ast.expr_lval(lval);\n                 }\n-                case (none[ast.lit]) {\n-                    p.err(\"expecting expression\");\n-                    fail;\n+                case (none[@ast.lval]) {\n+                    alt (parse_lit(p)) {\n+                        case (some[ast.lit](?lit)) {\n+                            hi = lit.span;\n+                            ex = ast.expr_lit(@lit);\n+                        }\n+                        case (none[ast.lit]) {\n+                            p.err(\"expecting expression\");\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -332,13 +352,15 @@ io fn parse_path_expr(parser p) -> @ast.expr {\n                     case (token.IDENT(?i)) {\n                         hi = p.get_span();\n                         p.bump();\n-                        e = @spanned(lo, hi, ast.expr_field(e, i));\n+                        auto lv = @spanned(lo, hi, ast.lval_field(e, i));\n+                        e = @spanned(lo, hi, ast.expr_lval(lv));\n                     }\n \n                     case (token.LPAREN) {\n                         auto ix = parse_bottom_expr(p);\n                         hi = ix.span;\n-                        e = @spanned(lo, hi, ast.expr_index(e, ix));\n+                        auto lv = @spanned(lo, hi, ast.lval_index(e, ix));\n+                        e = @spanned(lo, hi, ast.expr_lval(lv));\n                     }\n                 }\n             }"}, {"sha": "a43eb1ac384d621bac72273f625b01538d3d49b7", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 91, "deletions": 41, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/699ef987d78db9d74a2f4e3e5849355998d7b407/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/699ef987d78db9d74a2f4e3e5849355998d7b407/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=699ef987d78db9d74a2f4e3e5849355998d7b407", "patch": "@@ -13,6 +13,7 @@ import front.ast.ident;\n import front.ast.name;\n import front.ast.ty;\n import front.ast.expr;\n+import front.ast.lval;\n import front.ast.stmt;\n import front.ast.block;\n import front.ast.item;\n@@ -66,22 +67,28 @@ type ast_fold[ENV] =\n          @ast.lit) -> @expr)                      fold_expr_lit,\n \n      (fn(&ENV e, &span sp,\n-         &name n,\n-         &option[referent] r) -> @expr)           fold_expr_name,\n+         @expr cond, block thn,\n+         &option[block] els) -> @expr)            fold_expr_if,\n \n      (fn(&ENV e, &span sp,\n-         @expr e, ident i) -> @expr)              fold_expr_field,\n+         block blk) -> @expr)                     fold_expr_block,\n \n      (fn(&ENV e, &span sp,\n-         @expr e, @expr ix) -> @expr)             fold_expr_index,\n+         @lval lhs, @expr rhs) -> @expr)          fold_expr_assign,\n \n      (fn(&ENV e, &span sp,\n-         @expr cond, block thn,\n-         &option[block] els) -> @expr)            fold_expr_if,\n+         @lval lv) -> @expr)                      fold_expr_lval,\n \n+     // Lvalue folds.\n      (fn(&ENV e, &span sp,\n-         block blk) -> @expr)                     fold_expr_block,\n+         @expr e, ident i) -> @lval)              fold_lval_field,\n \n+     (fn(&ENV e, &span sp,\n+         @expr e, @expr ix) -> @lval)             fold_lval_index,\n+\n+     (fn(&ENV e, &span sp,\n+         &name n,\n+         &option[referent] r) -> @lval)           fold_lval_name,\n \n      // Decl folds.\n      (fn(&ENV e, &span sp,\n@@ -131,6 +138,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e, @ast.crate c) -> ENV) update_env_for_crate,\n      (fn(&ENV e, @item i) -> ENV) update_env_for_item,\n      (fn(&ENV e, @stmt s) -> ENV) update_env_for_stmt,\n+     (fn(&ENV e, @lval l) -> ENV) update_env_for_lval,\n      (fn(&ENV e, @expr x) -> ENV) update_env_for_expr,\n      (fn(&ENV e, @ty t) -> ENV) update_env_for_ty,\n \n@@ -156,6 +164,33 @@ fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n     ret d;\n }\n \n+fn fold_lval[ENV](&ENV env, ast_fold[ENV] fld, @lval lv) -> @lval {\n+    let ENV env_ = fld.update_env_for_lval(env, lv);\n+\n+    if (!fld.keep_going(env_)) {\n+        ret lv;\n+    }\n+\n+    alt (lv.node) {\n+        case (ast.lval_field(?e, ?i)) {\n+            auto ee = fold_expr(env_, fld, e);\n+            ret fld.fold_lval_field(env_, lv.span, ee, i);\n+        }\n+\n+        case (ast.lval_index(?e, ?ix)) {\n+            auto ee = fold_expr(env_, fld, e);\n+            auto iix = fold_expr(env_, fld, ix);\n+            ret fld.fold_lval_index(env_, lv.span, ee, iix);\n+        }\n+\n+        case (ast.lval_name(?n, ?r)) {\n+            ret fld.fold_lval_name(env_, lv.span, n, r);\n+        }\n+    }\n+\n+    fail;   // shoudn't be reached\n+}\n+\n fn fold_exprs[ENV](&ENV env, ast_fold[ENV] fld, vec[@expr] e) -> vec[@expr] {\n     let operator[@expr, @expr] fe = bind fold_expr[ENV](env, fld, _);\n     ret _vec.map[@expr, @expr](fe, e);\n@@ -220,22 +255,6 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_lit(env_, e.span, lit);\n         }\n \n-        case (ast.expr_name(?n, ?r)) {\n-            auto nn = fold_expr_name(env_, fld, n, r);\n-            ret fld.fold_expr_name(env_, e.span, nn._0, nn._1);\n-        }\n-\n-        case (ast.expr_field(?e, ?i)) {\n-            auto ee = fold_expr(env_, fld, e);\n-            ret fld.fold_expr_field(env_, e.span, ee, i);\n-        }\n-\n-        case (ast.expr_index(?e, ?i)) {\n-            auto ee = fold_expr(env_, fld, e);\n-            auto ii = fold_expr(env_, fld, i);\n-            ret fld.fold_expr_index(env_, e.span, ee, ii);\n-        }\n-\n         case (ast.expr_if(?cnd, ?thn, ?els)) {\n             auto ccnd = fold_expr(env_, fld, cnd);\n             auto tthn = fold_block(env_, fld, thn);\n@@ -252,6 +271,17 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             auto bb = fold_block(env_, fld, b);\n             ret fld.fold_expr_block(env_, e.span, bb);\n         }\n+\n+        case (ast.expr_assign(?lhs, ?rhs)) {\n+            auto llhs = fold_lval(env_, fld, lhs);\n+            auto rrhs = fold_expr(env_, fld, rhs);\n+            ret fld.fold_expr_assign(env_, e.span, llhs, rrhs);\n+        }\n+\n+        case (ast.expr_lval(?lv)) {\n+            auto llv = fold_lval(env_, fld, lv);\n+            ret fld.fold_expr_lval(env_, e.span, llv);\n+        }\n     }\n \n     ret e;\n@@ -462,21 +492,6 @@ fn identity_fold_expr_lit[ENV](&ENV env, &span sp, @ast.lit lit) -> @expr {\n     ret @respan(sp, ast.expr_lit(lit));\n }\n \n-fn identity_fold_expr_name[ENV](&ENV env, &span sp, &name n,\n-                          &option[referent] r) -> @expr {\n-    ret @respan(sp, ast.expr_name(n, r));\n-}\n-\n-fn identity_fold_expr_field[ENV](&ENV env, &span sp,\n-                                 @expr e, ident i) -> @expr {\n-    ret @respan(sp, ast.expr_field(e, i));\n-}\n-\n-fn identity_fold_expr_index[ENV](&ENV env, &span sp,\n-                                 @expr e, @expr ix) -> @expr {\n-    ret @respan(sp, ast.expr_index(e, ix));\n-}\n-\n fn identity_fold_expr_if[ENV](&ENV env, &span sp,\n                               @expr cond, block thn,\n                               &option[block] els) -> @expr {\n@@ -487,6 +502,33 @@ fn identity_fold_expr_block[ENV](&ENV env, &span sp, block blk) -> @expr {\n     ret @respan(sp, ast.expr_block(blk));\n }\n \n+fn identity_fold_expr_assign[ENV](&ENV env, &span sp,\n+                                  @lval lhs, @expr rhs) -> @expr {\n+    ret @respan(sp, ast.expr_assign(lhs, rhs));\n+}\n+\n+fn identity_fold_expr_lval[ENV](&ENV env, &span sp, @lval lv) -> @expr {\n+    ret @respan(sp, ast.expr_lval(lv));\n+}\n+\n+\n+// Lvalue identities.\n+\n+fn identity_fold_lval_field[ENV](&ENV env, &span sp,\n+                                 @expr e, ident i) -> @lval {\n+    ret @respan(sp, ast.lval_field(e, i));\n+}\n+\n+fn identity_fold_lval_index[ENV](&ENV env, &span sp,\n+                                 @expr e, @expr ix) -> @lval {\n+    ret @respan(sp, ast.lval_index(e, ix));\n+}\n+\n+fn identity_fold_lval_name[ENV](&ENV env, &span sp,\n+                                &name n, &option[referent] r) -> @lval {\n+    ret @respan(sp, ast.lval_name(n, r));\n+}\n+\n \n // Decl identities.\n \n@@ -575,6 +617,10 @@ fn identity_update_env_for_stmt[ENV](&ENV e, @stmt s) -> ENV {\n     ret e;\n }\n \n+fn identity_update_env_for_lval[ENV](&ENV e, @lval l) -> ENV {\n+    ret e;\n+}\n+\n fn identity_update_env_for_expr[ENV](&ENV e, @expr x) -> ENV {\n     ret e;\n }\n@@ -613,11 +659,14 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_binary = bind identity_fold_expr_binary[ENV](_,_,_,_,_),\n          fold_expr_unary  = bind identity_fold_expr_unary[ENV](_,_,_,_),\n          fold_expr_lit    = bind identity_fold_expr_lit[ENV](_,_,_),\n-         fold_expr_name   = bind identity_fold_expr_name[ENV](_,_,_,_),\n-         fold_expr_field  = bind identity_fold_expr_field[ENV](_,_,_,_),\n-         fold_expr_index  = bind identity_fold_expr_index[ENV](_,_,_,_),\n          fold_expr_if     = bind identity_fold_expr_if[ENV](_,_,_,_,_),\n          fold_expr_block  = bind identity_fold_expr_block[ENV](_,_,_),\n+         fold_expr_assign = bind identity_fold_expr_assign[ENV](_,_,_,_),\n+         fold_expr_lval   = bind identity_fold_expr_lval[ENV](_,_,_),\n+\n+         fold_lval_field  = bind identity_fold_lval_field[ENV](_,_,_,_),\n+         fold_lval_index  = bind identity_fold_lval_index[ENV](_,_,_,_),\n+         fold_lval_name   = bind identity_fold_lval_name[ENV](_,_,_,_),\n \n          fold_decl_local  = bind identity_fold_decl_local[ENV](_,_,_,_,_),\n          fold_decl_item   = bind identity_fold_decl_item[ENV](_,_,_,_),\n@@ -639,6 +688,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          update_env_for_crate = bind identity_update_env_for_crate[ENV](_,_),\n          update_env_for_item = bind identity_update_env_for_item[ENV](_,_),\n          update_env_for_stmt = bind identity_update_env_for_stmt[ENV](_,_),\n+         update_env_for_lval = bind identity_update_env_for_lval[ENV](_,_),\n          update_env_for_expr = bind identity_update_env_for_expr[ENV](_,_),\n          update_env_for_ty = bind identity_update_env_for_ty[ENV](_,_),\n "}]}