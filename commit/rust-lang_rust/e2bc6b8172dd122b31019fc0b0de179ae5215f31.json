{"sha": "e2bc6b8172dd122b31019fc0b0de179ae5215f31", "node_id": "C_kwDOAAsO6NoAKGUyYmM2YjgxNzJkZDEyMmIzMTAxOWZjMGIwZGUxNzlhZTUyMTVmMzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-30T17:06:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-30T17:06:05Z"}, "message": "Rollup merge of #102382 - cuviper:defid-order, r=fee1-dead\n\nManually order `DefId` on 64-bit big-endian\n\n`DefId` uses different field orders on 64-bit big-endian vs. others, in\norder to optimize its `Hash` implementation. However, that also made it\nderive different lexical ordering for `PartialOrd` and `Ord`. That\ncaused spurious differences wherever `DefId`s are sorted, like the\ncandidate sources list in `report_method_error`.\n\nNow we manually implement `PartialOrd` and `Ord` on 64-bit big-endian to\nmatch the same lexical ordering as other targets, fixing at least one\ntest, `src/test/ui/methods/method-ambig-two-traits-cross-crate.rs`.", "tree": {"sha": "1090837a45b88aefeb3f06f52c0a6fa6ae0ef402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1090837a45b88aefeb3f06f52c0a6fa6ae0ef402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2bc6b8172dd122b31019fc0b0de179ae5215f31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjNyH9CRBK7hj4Ov3rIwAAMWcIACZKGMn3udVkPnS1NBFl5LlG\nxE/xMQ3TQEWGjCESuyp9FlZp+R1A9eVXVx6KmbzcBhpI3Mlh16ahVwiDpcA1OytS\nx5Dc/VMbu/VDnw2t2ElPpaRnsuUKyVCbBCxHzPGZystIb3OSlwaSiOiYdRN552ZL\nGNLnYj5YMQXOmTzJBwAW7YLAH18mCdbQYEiME9mgHQspYgx1gIkdkRXNUvGaVxk/\nyennYf23d93ovqSI/u215GahFfFXPsb57MmYJqxrc1Y8E8Q2QI2mH6oQiCPRKZIY\ngGU96ISEtYBVeFT1woAM1bJ492u7Li18WFLpmKRDyrXoVoU3OBJPbJnBxEGmlPU=\n=VMsB\n-----END PGP SIGNATURE-----\n", "payload": "tree 1090837a45b88aefeb3f06f52c0a6fa6ae0ef402\nparent 3452d9d593d901622e4be835cb6eba710387796e\nparent fb5002d68aa22f23ced3e2b5265f622264e4840a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664557565 +0200\ncommitter GitHub <noreply@github.com> 1664557565 +0200\n\nRollup merge of #102382 - cuviper:defid-order, r=fee1-dead\n\nManually order `DefId` on 64-bit big-endian\n\n`DefId` uses different field orders on 64-bit big-endian vs. others, in\norder to optimize its `Hash` implementation. However, that also made it\nderive different lexical ordering for `PartialOrd` and `Ord`. That\ncaused spurious differences wherever `DefId`s are sorted, like the\ncandidate sources list in `report_method_error`.\n\nNow we manually implement `PartialOrd` and `Ord` on 64-bit big-endian to\nmatch the same lexical ordering as other targets, fixing at least one\ntest, `src/test/ui/methods/method-ambig-two-traits-cross-crate.rs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bc6b8172dd122b31019fc0b0de179ae5215f31", "html_url": "https://github.com/rust-lang/rust/commit/e2bc6b8172dd122b31019fc0b0de179ae5215f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2bc6b8172dd122b31019fc0b0de179ae5215f31/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3452d9d593d901622e4be835cb6eba710387796e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3452d9d593d901622e4be835cb6eba710387796e", "html_url": "https://github.com/rust-lang/rust/commit/3452d9d593d901622e4be835cb6eba710387796e"}, {"sha": "fb5002d68aa22f23ced3e2b5265f622264e4840a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5002d68aa22f23ced3e2b5265f622264e4840a", "html_url": "https://github.com/rust-lang/rust/commit/fb5002d68aa22f23ced3e2b5265f622264e4840a"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "bbeabdb55a72a7b02edc3ee1b3c89c4fc0418ba4", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2bc6b8172dd122b31019fc0b0de179ae5215f31/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2bc6b8172dd122b31019fc0b0de179ae5215f31/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=e2bc6b8172dd122b31019fc0b0de179ae5215f31", "patch": "@@ -218,7 +218,9 @@ impl<D: Decoder> Decodable<D> for DefIndex {\n /// index and a def index.\n ///\n /// You can create a `DefId` from a `LocalDefId` using `local_def_id.to_def_id()`.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Copy)]\n+#[derive(Clone, PartialEq, Eq, Copy)]\n+// Don't derive order on 64-bit big-endian, so we can be consistent regardless of field order.\n+#[cfg_attr(not(all(target_pointer_width = \"64\", target_endian = \"big\")), derive(PartialOrd, Ord))]\n // On below-64 bit systems we can simply use the derived `Hash` impl\n #[cfg_attr(not(target_pointer_width = \"64\"), derive(Hash))]\n #[repr(C)]\n@@ -260,6 +262,22 @@ impl Hash for DefId {\n     }\n }\n \n+// Implement the same comparison as derived with the other field order.\n+#[cfg(all(target_pointer_width = \"64\", target_endian = \"big\"))]\n+impl Ord for DefId {\n+    #[inline]\n+    fn cmp(&self, other: &DefId) -> std::cmp::Ordering {\n+        Ord::cmp(&(self.index, self.krate), &(other.index, other.krate))\n+    }\n+}\n+#[cfg(all(target_pointer_width = \"64\", target_endian = \"big\"))]\n+impl PartialOrd for DefId {\n+    #[inline]\n+    fn partial_cmp(&self, other: &DefId) -> Option<std::cmp::Ordering> {\n+        Some(Ord::cmp(self, other))\n+    }\n+}\n+\n impl DefId {\n     /// Makes a local `DefId` from the given `DefIndex`.\n     #[inline]"}]}