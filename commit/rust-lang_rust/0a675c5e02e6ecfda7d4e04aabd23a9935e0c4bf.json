{"sha": "0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNjc1YzVlMDJlNmVjZmRhN2Q0ZTA0YWFiZDIzYTk5MzVlMGM0YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T02:58:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T02:58:00Z"}, "message": "Auto merge of #71815 - Mark-Simulacrum:no-llvm-rebuild, r=jonas-schievink\n\nDon't bust caches on x.py check/build switches\n\nFixes #71152", "tree": {"sha": "a0682bf671337ddecfb6ac5752d6fad393bbb2b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0682bf671337ddecfb6ac5752d6fad393bbb2b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "html_url": "https://github.com/rust-lang/rust/commit/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e05528696ca523055b0f7ce94b8033dcbaa39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e05528696ca523055b0f7ce94b8033dcbaa39e", "html_url": "https://github.com/rust-lang/rust/commit/c1e05528696ca523055b0f7ce94b8033dcbaa39e"}, {"sha": "7f645aba107e4b952c1ed47178ff74c5976b2663", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f645aba107e4b952c1ed47178ff74c5976b2663", "html_url": "https://github.com/rust-lang/rust/commit/7f645aba107e4b952c1ed47178ff74c5976b2663"}], "stats": {"total": 140, "additions": 89, "deletions": 51}, "files": [{"sha": "028623aa7aa9c9d83b1bf86c759e5d298caf0d3f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "patch": "@@ -765,9 +765,17 @@ impl<'a> Builder<'a> {\n         }\n \n         // Set a flag for `check`/`clippy`/`fix`, so that certain build\n-        // scripts can do less work (e.g. not building/requiring LLVM).\n+        // scripts can do less work (i.e. not building/requiring LLVM).\n         if cmd == \"check\" || cmd == \"clippy\" || cmd == \"fix\" {\n-            cargo.env(\"RUST_CHECK\", \"1\");\n+            // If we've not yet built LLVM, or it's stale, then bust\n+            // the librustc_llvm cache. That will always work, even though it\n+            // may mean that on the next non-check build we'll need to rebuild\n+            // librustc_llvm. But if LLVM is stale, that'll be a tiny amount\n+            // of work comparitively, and we'd likely need to rebuild it anyway,\n+            // so that's okay.\n+            if crate::native::prebuilt_llvm_config(self, target).is_err() {\n+                cargo.env(\"RUST_CHECK\", \"1\");\n+            }\n         }\n \n         let stage = if compiler.stage == 0 && self.local_rebuild {"}, {"sha": "0c754936bc242fccf076abe6c1fc91b7e79f007e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "patch": "@@ -517,9 +517,13 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: Interne\n     // librustc_llvm and librustc_codegen_llvm.\n     //\n     // Note that this is disabled if LLVM itself is disabled or we're in a check\n-    // build, where if we're in a check build there's no need to build all of\n-    // LLVM and such.\n-    if builder.config.llvm_enabled() && builder.kind != Kind::Check {\n+    // build. If we are in a check build we still go ahead here presuming we've\n+    // detected that LLVM is alreay built and good to go which helps prevent\n+    // busting caches (e.g. like #71152).\n+    if builder.config.llvm_enabled()\n+        && (builder.kind != Kind::Check\n+            || crate::native::prebuilt_llvm_config(builder, target).is_ok())\n+    {\n         if builder.is_rust_llvm(target) {\n             cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n         }"}, {"sha": "bcd79a49eced14cbb8069bbc7de80a56b41ddab3", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 71, "deletions": 45, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "patch": "@@ -24,6 +24,72 @@ use crate::util::{self, exe};\n use crate::GitRepo;\n use build_helper::up_to_date;\n \n+pub struct Meta {\n+    stamp: HashStamp,\n+    build_llvm_config: PathBuf,\n+    out_dir: PathBuf,\n+    root: String,\n+}\n+\n+// This returns whether we've already previously built LLVM.\n+//\n+// It's used to avoid busting caches during x.py check -- if we've already built\n+// LLVM, it's fine for us to not try to avoid doing so.\n+//\n+// This will return the llvm-config if it can get it (but it will not build it\n+// if not).\n+pub fn prebuilt_llvm_config(\n+    builder: &Builder<'_>,\n+    target: Interned<String>,\n+) -> Result<PathBuf, Meta> {\n+    // If we're using a custom LLVM bail out here, but we can only use a\n+    // custom LLVM for the build triple.\n+    if let Some(config) = builder.config.target_config.get(&target) {\n+        if let Some(ref s) = config.llvm_config {\n+            check_llvm_version(builder, s);\n+            return Ok(s.to_path_buf());\n+        }\n+    }\n+\n+    let root = \"src/llvm-project/llvm\";\n+    let out_dir = builder.llvm_out(target);\n+    let mut llvm_config_ret_dir = builder.llvm_out(builder.config.build);\n+    if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n+        llvm_config_ret_dir.push(\"build\");\n+    }\n+    llvm_config_ret_dir.push(\"bin\");\n+\n+    let build_llvm_config = llvm_config_ret_dir.join(exe(\"llvm-config\", &*builder.config.build));\n+\n+    let stamp = out_dir.join(\"llvm-finished-building\");\n+    let stamp = HashStamp::new(stamp, builder.in_tree_llvm_info.sha());\n+\n+    if builder.config.llvm_skip_rebuild && stamp.path.exists() {\n+        builder.info(\n+            \"Warning: \\\n+                Using a potentially stale build of LLVM; \\\n+                This may not behave well.\",\n+        );\n+        return Ok(build_llvm_config);\n+    }\n+\n+    if stamp.is_done() {\n+        if stamp.hash.is_none() {\n+            builder.info(\n+                \"Could not determine the LLVM submodule commit hash. \\\n+                     Assuming that an LLVM rebuild is not necessary.\",\n+            );\n+            builder.info(&format!(\n+                \"To force LLVM to rebuild, remove the file `{}`\",\n+                stamp.path.display()\n+            ));\n+        }\n+        return Ok(build_llvm_config);\n+    }\n+\n+    Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: Interned<String>,\n@@ -46,51 +112,11 @@ impl Step for Llvm {\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n         let target = self.target;\n \n-        // If we're using a custom LLVM bail out here, but we can only use a\n-        // custom LLVM for the build triple.\n-        if let Some(config) = builder.config.target_config.get(&target) {\n-            if let Some(ref s) = config.llvm_config {\n-                check_llvm_version(builder, s);\n-                return s.to_path_buf();\n-            }\n-        }\n-\n-        let root = \"src/llvm-project/llvm\";\n-        let out_dir = builder.llvm_out(target);\n-        let mut llvm_config_ret_dir = builder.llvm_out(builder.config.build);\n-        if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n-            llvm_config_ret_dir.push(\"build\");\n-        }\n-        llvm_config_ret_dir.push(\"bin\");\n-\n-        let build_llvm_config =\n-            llvm_config_ret_dir.join(exe(\"llvm-config\", &*builder.config.build));\n-\n-        let stamp = out_dir.join(\"llvm-finished-building\");\n-        let stamp = HashStamp::new(stamp, builder.in_tree_llvm_info.sha());\n-\n-        if builder.config.llvm_skip_rebuild && stamp.path.exists() {\n-            builder.info(\n-                \"Warning: \\\n-                Using a potentially stale build of LLVM; \\\n-                This may not behave well.\",\n-            );\n-            return build_llvm_config;\n-        }\n-\n-        if stamp.is_done() {\n-            if stamp.hash.is_none() {\n-                builder.info(\n-                    \"Could not determine the LLVM submodule commit hash. \\\n-                     Assuming that an LLVM rebuild is not necessary.\",\n-                );\n-                builder.info(&format!(\n-                    \"To force LLVM to rebuild, remove the file `{}`\",\n-                    stamp.path.display()\n-                ));\n-            }\n-            return build_llvm_config;\n-        }\n+        let Meta { stamp, build_llvm_config, out_dir, root } =\n+            match prebuilt_llvm_config(builder, target) {\n+                Ok(p) => return p,\n+                Err(m) => m,\n+            };\n \n         builder.info(&format!(\"Building LLVM for {}\", target));\n         t!(stamp.remove());"}, {"sha": "e97fa4345fe7c1f209ac4a9269eed2b242a4c55c", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=0a675c5e02e6ecfda7d4e04aabd23a9935e0c4bf", "patch": "@@ -15,9 +15,9 @@ fn detect_llvm_link() -> (&'static str, &'static str) {\n }\n \n fn main() {\n+    println!(\"cargo:rerun-if-env-changed=RUST_CHECK\");\n     if env::var_os(\"RUST_CHECK\").is_some() {\n         // If we're just running `check`, there's no need for LLVM to be built.\n-        println!(\"cargo:rerun-if-env-changed=RUST_CHECK\");\n         return;\n     }\n "}]}