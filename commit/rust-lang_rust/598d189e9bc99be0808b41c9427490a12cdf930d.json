{"sha": "598d189e9bc99be0808b41c9427490a12cdf930d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OGQxODllOWJjOTliZTA4MDhiNDFjOTQyNzQ5MGExMmNkZjkzMGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-05T00:52:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-05T00:52:44Z"}, "message": "Rollup merge of #80643 - LingMan:unwrap, r=oli-obk\n\nMove variable into the only branch where it is relevant\n\nAt the `if` branch `filter` (the `let` binding) is `None` iff `filter` (the parameter) was `None`.\nWe can branch on the parameter, move the binding into the `if`, and the complexity of handling\n`Option<Option<_>` largely dissolves.\n\n`@rustbot` modify labels +C-cleanup +T-compiler\n\nNote: I have no idea how hot this code is. If this method frequently gets called with a `None` filter, there might be a small perf improvement.", "tree": {"sha": "13e98185c931d7c432c541ed8a4e275468fad1d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e98185c931d7c432c541ed8a4e275468fad1d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/598d189e9bc99be0808b41c9427490a12cdf930d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf87hcCRBK7hj4Ov3rIwAAdHIIAKxvdnNa2WMTSoBAPuXhE3e/\nt402DvOGxf9+1tBCk9A/w9ubvYqHrtyPhoY3nLkJ3A7yBNjKj9zSu3gfI24K4W1E\nxzxSNdBpcgiMvYpV3K2760MlPQ8jQrCicFM8S5HnJt3ZDzk/FElByYpaoB9zrNzu\nzPzOc/JIbdqYWbgQVAfHeqZq++wtpaXyLUpuv6Tv5gxL9jdsWMk0vZVeyIQlrRNZ\nVMSVW2O0PmDj5zjckAeyaRDtMmVqHIdtdrEEPStoynx9ac4vb2sNaXiL4ojZpXiP\nDpKYU0ObLH5n7PNLf6T4FREqgqmdqTF1p544I1ohKxlu75sFZ1e3tZvhia2beyU=\n=zr19\n-----END PGP SIGNATURE-----\n", "payload": "tree 13e98185c931d7c432c541ed8a4e275468fad1d0\nparent faf8beddef859bbb387a24c536505d833c3821a5\nparent af7134e7de793ea3bba30bc350daef76ea9de755\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609807964 +0900\ncommitter GitHub <noreply@github.com> 1609807964 +0900\n\nRollup merge of #80643 - LingMan:unwrap, r=oli-obk\n\nMove variable into the only branch where it is relevant\n\nAt the `if` branch `filter` (the `let` binding) is `None` iff `filter` (the parameter) was `None`.\nWe can branch on the parameter, move the binding into the `if`, and the complexity of handling\n`Option<Option<_>` largely dissolves.\n\n`@rustbot` modify labels +C-cleanup +T-compiler\n\nNote: I have no idea how hot this code is. If this method frequently gets called with a `None` filter, there might be a small perf improvement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/598d189e9bc99be0808b41c9427490a12cdf930d", "html_url": "https://github.com/rust-lang/rust/commit/598d189e9bc99be0808b41c9427490a12cdf930d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/598d189e9bc99be0808b41c9427490a12cdf930d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf8beddef859bbb387a24c536505d833c3821a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf8beddef859bbb387a24c536505d833c3821a5", "html_url": "https://github.com/rust-lang/rust/commit/faf8beddef859bbb387a24c536505d833c3821a5"}, {"sha": "af7134e7de793ea3bba30bc350daef76ea9de755", "url": "https://api.github.com/repos/rust-lang/rust/commits/af7134e7de793ea3bba30bc350daef76ea9de755", "html_url": "https://github.com/rust-lang/rust/commit/af7134e7de793ea3bba30bc350daef76ea9de755"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "6e381fd296584334c4a5d45a86155f66021ded2f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/598d189e9bc99be0808b41c9427490a12cdf930d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598d189e9bc99be0808b41c9427490a12cdf930d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=598d189e9bc99be0808b41c9427490a12cdf930d", "patch": "@@ -1341,15 +1341,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             return &[];\n         }\n \n-        // Do a reverse lookup beforehand to avoid touching the crate_num\n-        // hash map in the loop below.\n-        let filter = match filter.map(|def_id| self.reverse_translate_def_id(def_id)) {\n-            Some(Some(def_id)) => Some((def_id.krate.as_u32(), def_id.index)),\n-            Some(None) => return &[],\n-            None => None,\n-        };\n+        if let Some(def_id) = filter {\n+            // Do a reverse lookup beforehand to avoid touching the crate_num\n+            // hash map in the loop below.\n+            let filter = match self.reverse_translate_def_id(def_id) {\n+                Some(def_id) => (def_id.krate.as_u32(), def_id.index),\n+                None => return &[],\n+            };\n \n-        if let Some(filter) = filter {\n             if let Some(impls) = self.trait_impls.get(&filter) {\n                 tcx.arena.alloc_from_iter(\n                     impls.decode(self).map(|(idx, simplified_self_ty)| {"}]}