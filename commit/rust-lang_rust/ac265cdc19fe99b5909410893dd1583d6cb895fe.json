{"sha": "ac265cdc19fe99b5909410893dd1583d6cb895fe", "node_id": "C_kwDOAAsO6NoAKGFjMjY1Y2RjMTlmZTk5YjU5MDk0MTA4OTNkZDE1ODNkNmNiODk1ZmU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-05T21:38:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-09T11:27:29Z"}, "message": "review feedback", "tree": {"sha": "e3808875f4616db2cd84b500083f3a279cb10a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3808875f4616db2cd84b500083f3a279cb10a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac265cdc19fe99b5909410893dd1583d6cb895fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac265cdc19fe99b5909410893dd1583d6cb895fe", "html_url": "https://github.com/rust-lang/rust/commit/ac265cdc19fe99b5909410893dd1583d6cb895fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac265cdc19fe99b5909410893dd1583d6cb895fe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052651dd134c6016108c5fc50bfe4196012a6a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/052651dd134c6016108c5fc50bfe4196012a6a8f", "html_url": "https://github.com/rust-lang/rust/commit/052651dd134c6016108c5fc50bfe4196012a6a8f"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "0739061fdbd7cbdcea075134e193bbaf2aa4fb42", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -167,7 +167,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n     }\n \n     match const_val {\n-        ConstValue::ZST => unreachable!(), // we already handles ZST above\n+        ConstValue::Zst => unreachable!(), // we already handles ZST above\n         ConstValue::Scalar(x) => match x {\n             Scalar::Int(int) => {\n                 if fx.clif_type(layout.ty).is_some() {"}, {"sha": "af15ae36fa973a1ea7395c193f4a7bbb54bf6762", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let llval = bx.scalar_to_backend(x, scalar, bx.immediate_backend_type(layout));\n                 OperandValue::Immediate(llval)\n             }\n-            ConstValue::ZST => {\n+            ConstValue::Zst => {\n                 let llval = bx.zst_to_backend(bx.immediate_backend_type(layout));\n                 OperandValue::Immediate(llval)\n             }"}, {"sha": "d3ebfd715c0d7eee222ce38dc672fd2e09b497a3", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -157,7 +157,7 @@ pub(super) fn op_to_const<'tcx>(\n                     \"this MPlaceTy must come from a validated constant, thus we can assume the \\\n                 alignment is correct\",\n                 );\n-                ConstValue::ZST\n+                ConstValue::Zst\n             }\n         }\n     };"}, {"sha": "c2978e0d4f8914aa02e9c5a9d12b8133f871ae29", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -272,7 +272,7 @@ pub fn valtree_to_const_value<'tcx>(\n     match ty.kind() {\n         ty::FnDef(..) => {\n             assert!(valtree.unwrap_branch().is_empty());\n-            ConstValue::ZST\n+            ConstValue::Zst\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => match valtree {\n             ty::ValTree::Leaf(scalar_int) => ConstValue::Scalar(Scalar::Int(scalar_int)),"}, {"sha": "236849f5f9f2f2017e46634b195031b70de1e0e1", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -709,7 +709,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Operand::Indirect(MemPlace::from_ptr(ptr.into()))\n             }\n             ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),\n-            ConstValue::ZST => Operand::Immediate(Immediate::Uninit),\n+            ConstValue::Zst => Operand::Immediate(Immediate::Uninit),\n             ConstValue::Slice { data, start, end } => {\n                 // We rely on mutability being set correctly in `data` to prevent writes\n                 // where none should happen."}, {"sha": "e38e4fc54c52d35166445633189390f8350e2c75", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -35,7 +35,7 @@ pub enum ConstValue<'tcx> {\n     Scalar(Scalar),\n \n     /// Only used for ZSTs.\n-    ZST,\n+    Zst,\n \n     /// Used only for `&[u8]` and `&str`\n     Slice { data: ConstAllocation<'tcx>, start: usize, end: usize },\n@@ -58,7 +58,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ConstValue<'tcx>> {\n         Some(match self {\n             ConstValue::Scalar(s) => ConstValue::Scalar(s),\n-            ConstValue::ZST => ConstValue::ZST,\n+            ConstValue::Zst => ConstValue::Zst,\n             ConstValue::Slice { data, start, end } => {\n                 ConstValue::Slice { data: tcx.lift(data)?, start, end }\n             }\n@@ -73,7 +73,7 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn try_to_scalar(&self) -> Option<Scalar<AllocId>> {\n         match *self {\n-            ConstValue::ByRef { .. } | ConstValue::Slice { .. } | ConstValue::ZST => None,\n+            ConstValue::ByRef { .. } | ConstValue::Slice { .. } | ConstValue::Zst => None,\n             ConstValue::Scalar(val) => Some(val),\n         }\n     }"}, {"sha": "066cb4d20578bb7ea71dcc5ff0403b4be8199455", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -1711,7 +1711,7 @@ impl<'tcx> Operand<'tcx> {\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n-            literal: ConstantKind::Val(ConstValue::ZST, ty),\n+            literal: ConstantKind::Val(ConstValue::Zst, ty),\n         }))\n     }\n \n@@ -2196,7 +2196,7 @@ impl<'tcx> ConstantKind<'tcx> {\n \n     #[inline]\n     pub fn zero_sized(ty: Ty<'tcx>) -> Self {\n-        let cv = ConstValue::ZST;\n+        let cv = ConstValue::Zst;\n         Self::Val(cv, ty)\n     }\n "}, {"sha": "07a3c8cf7bb0f53056359795d001d1bea44f0abe", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -449,7 +449,7 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n             }\n \n             let fmt_val = |val: &ConstValue<'tcx>| match val {\n-                ConstValue::ZST => format!(\"ZST\"),\n+                ConstValue::Zst => format!(\"ZST\"),\n                 ConstValue::Scalar(s) => format!(\"Scalar({:?})\", s),\n                 ConstValue::Slice { .. } => format!(\"Slice(..)\"),\n                 ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n@@ -680,7 +680,7 @@ pub fn write_allocations<'tcx>(\n             ConstValue::Scalar(interpret::Scalar::Int { .. }) => {\n                 Either::Left(Either::Right(std::iter::empty()))\n             }\n-            ConstValue::ZST => Either::Left(Either::Right(std::iter::empty())),\n+            ConstValue::Zst => Either::Left(Either::Right(std::iter::empty())),\n             ConstValue::ByRef { alloc, .. } | ConstValue::Slice { data: alloc, .. } => {\n                 Either::Right(alloc_ids_from_alloc(alloc))\n             }"}, {"sha": "3fe6394ad7e9c2d7a4465d19ccbbafaa20874e37", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -458,12 +458,6 @@ pub enum ExprKind<'tcx> {\n     },\n }\n \n-impl<'tcx> ExprKind<'tcx> {\n-    pub fn zero_sized_literal(user_ty: Option<Canonical<'tcx, UserType<'tcx>>>) -> Self {\n-        ExprKind::ZstLiteral { user_ty }\n-    }\n-}\n-\n /// Represents the association of a field identifier and an expression.\n ///\n /// This is used in struct constructors."}, {"sha": "063500c9187dc2387d44d81f97fc92d2504612c7", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty: ty,\n                     })\n                 });\n-                let literal = ConstantKind::Val(ConstValue::ZST, ty);\n+                let literal = ConstantKind::Val(ConstValue::Zst, ty);\n \n                 Constant { span, user_ty: user_ty, literal }\n             }"}, {"sha": "4eb3607e9cca0e914138c344bb39fb2e1691c469", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac265cdc19fe99b5909410893dd1583d6cb895fe/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=ac265cdc19fe99b5909410893dd1583d6cb895fe", "patch": "@@ -799,7 +799,7 @@ impl<'tcx> Cx<'tcx> {\n             }\n         };\n         let ty = self.tcx().mk_fn_def(def_id, substs);\n-        Expr { temp_lifetime, ty, span, kind: ExprKind::zero_sized_literal(user_ty) }\n+        Expr { temp_lifetime, ty, span, kind: ExprKind::ZstLiteral { user_ty } }\n     }\n \n     fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {\n@@ -828,7 +828,7 @@ impl<'tcx> Cx<'tcx> {\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n             | Res::SelfCtor(_) => {\n                 let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);\n-                ExprKind::zero_sized_literal(user_ty)\n+                ExprKind::ZstLiteral { user_ty }\n             }\n \n             Res::Def(DefKind::ConstParam, def_id) => {"}]}