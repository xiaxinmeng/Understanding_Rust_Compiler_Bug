{"sha": "9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYjJiMDhhNWQ5ZjQ1OGZkY2IyMGFlMzhiYWNlMmE0OWU3NzU5ZmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T10:36:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "extract parse_tuple_parens_expr", "tree": {"sha": "33aea1e3950212fefdbf59f909fbd44dc84cd372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33aea1e3950212fefdbf59f909fbd44dc84cd372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff", "html_url": "https://github.com/rust-lang/rust/commit/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c32ee17815ee2ba77e44045f89c19a46580c785", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c32ee17815ee2ba77e44045f89c19a46580c785", "html_url": "https://github.com/rust-lang/rust/commit/0c32ee17815ee2ba77e44045f89c19a46580c785"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "29778b73d4a77d46d94eb7278a280e5f2a12c1d2", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=9cb2b08a5d9f458fdcb20ae38bace2a49e7759ff", "patch": "@@ -834,9 +834,7 @@ impl<'a> Parser<'a> {\n                         hi = self.prev_span;\n                         ex = ExprKind::Lit(literal);\n                     }\n-                    None => {\n-                        return Err(self.expected_expression_found());\n-                    }\n+                    None => return Err(self.expected_expression_found()),\n                 }\n             }\n         }\n@@ -846,37 +844,8 @@ impl<'a> Parser<'a> {\n             // This match arm is a special-case of the `_` match arm below and\n             // could be removed without changing functionality, but it's faster\n             // to have it here, especially for programs with large constants.\n-            token::Literal(_) => {\n-                parse_lit!()\n-            }\n-            token::OpenDelim(token::Paren) => {\n-                let mut first = true;\n-                let parse_leading_attr_expr = |this: &mut Parser<'a>| {\n-                    if first {\n-                        attrs.extend(this.parse_inner_attributes()?);\n-                        first = false;\n-                    }\n-                    this.parse_expr_catch_underscore()\n-                };\n-\n-                // (e) is parenthesized e\n-                // (e,) is a tuple with only one field, e\n-                let (es, trailing_comma) =\n-                    match self.parse_paren_comma_seq(parse_leading_attr_expr)\n-                {\n-                    Ok(x) => x,\n-                    Err(err) => return Ok(\n-                        self.recover_seq_parse_error(token::Paren, lo, Err(err)),\n-                    ),\n-                };\n-\n-                hi = self.prev_span;\n-                ex = if es.len() == 1 && !trailing_comma {\n-                    ExprKind::Paren(es.into_iter().nth(0).unwrap())\n-                } else {\n-                    ExprKind::Tup(es)\n-                };\n-            }\n+            token::Literal(_) => parse_lit!(),\n+            token::OpenDelim(token::Paren) => return self.parse_tuple_parens_expr(),\n             token::OpenDelim(token::Brace) => {\n                 return self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs);\n             }\n@@ -1095,6 +1064,34 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    fn parse_tuple_parens_expr(&mut self) -> PResult<'a, P<Expr>> {\n+        let lo = self.token.span;\n+        let mut first = true;\n+        let mut attrs = ThinVec::new();\n+        let parse_leading_attr_expr = |p: &mut Self| {\n+            if first {\n+                // `(#![foo] a, b, ...)` is OK...\n+                attrs = p.parse_inner_attributes()?.into();\n+                // ...but not `(a, #![foo] b, ...)`.\n+                first = false;\n+            }\n+            p.parse_expr_catch_underscore()\n+        };\n+        let (es, trailing_comma) = match self.parse_paren_comma_seq(parse_leading_attr_expr) {\n+            Ok(x) => x,\n+            Err(err) => return Ok(self.recover_seq_parse_error(token::Paren, lo, Err(err))),\n+        };\n+        let kind = if es.len() == 1 && !trailing_comma {\n+            // `(e)` is parenthesized `e`.\n+            ExprKind::Paren(es.into_iter().nth(0).unwrap())\n+        } else {\n+            // `(e,)` is a tuple with only one field, `e`.\n+            ExprKind::Tup(es)\n+        };\n+        let expr = self.mk_expr(lo.to(self.prev_span), kind, attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n     /// Returns a string literal if the next token is a string literal.\n     /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n     /// and returns `None` if the next token is not literal at all."}]}