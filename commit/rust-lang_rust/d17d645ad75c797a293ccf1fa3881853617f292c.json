{"sha": "d17d645ad75c797a293ccf1fa3881853617f292c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxN2Q2NDVhZDc1Yzc5N2EyOTNjY2YxZmEzODgxODUzNjE3ZjI5MmM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-02-18T21:08:48Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-02-19T02:42:02Z"}, "message": "Add tests ensuring zero-Duration timeouts result in errors.\n\nPart of https://github.com/rust-lang/rust/issues/48311", "tree": {"sha": "eb47f4531a6dfb7d55e1ab6df4af5997eb6bf829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb47f4531a6dfb7d55e1ab6df4af5997eb6bf829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17d645ad75c797a293ccf1fa3881853617f292c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17d645ad75c797a293ccf1fa3881853617f292c", "html_url": "https://github.com/rust-lang/rust/commit/d17d645ad75c797a293ccf1fa3881853617f292c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17d645ad75c797a293ccf1fa3881853617f292c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad094d81c97b3d2dd8e980ccd1475a80647540d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad094d81c97b3d2dd8e980ccd1475a80647540d", "html_url": "https://github.com/rust-lang/rust/commit/1ad094d81c97b3d2dd8e980ccd1475a80647540d"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "ee63e185ddb23754efdc6ea9d03b151c281de927", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d17d645ad75c797a293ccf1fa3881853617f292c/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17d645ad75c797a293ccf1fa3881853617f292c/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=d17d645ad75c797a293ccf1fa3881853617f292c", "patch": "@@ -1545,6 +1545,26 @@ mod tests {\n         drop(listener);\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_timeout_zero_duration() {\n+        let addr = next_test_ip4();\n+\n+        let listener = t!(TcpListener::bind(&addr));\n+        let stream = t!(TcpStream::connect(&addr));\n+\n+        let result = stream.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = stream.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        drop(listener);\n+    }\n+\n     #[test]\n     fn nodelay() {\n         let addr = next_test_ip4();"}, {"sha": "4163bec000bb5262726fa94b53945acca7377a6d", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d17d645ad75c797a293ccf1fa3881853617f292c/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17d645ad75c797a293ccf1fa3881853617f292c/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=d17d645ad75c797a293ccf1fa3881853617f292c", "patch": "@@ -1024,6 +1024,23 @@ mod tests {\n         assert!(start.elapsed() > Duration::from_millis(400));\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_timeout_zero_duration() {\n+        let addr = next_test_ip4();\n+\n+        let socket = t!(UdpSocket::bind(&addr));\n+\n+        let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+    }\n+\n     #[test]\n     fn connect_send_recv() {\n         let addr = next_test_ip4();"}, {"sha": "f1bf8f240d3fb68f82f1346db6460b52bf3c5360", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d17d645ad75c797a293ccf1fa3881853617f292c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17d645ad75c797a293ccf1fa3881853617f292c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=d17d645ad75c797a293ccf1fa3881853617f292c", "patch": "@@ -1410,7 +1410,7 @@ impl IntoRawFd for UnixDatagram {\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod test {\n     use thread;\n-    use io;\n+    use io::{self, ErrorKind};\n     use io::prelude::*;\n     use time::Duration;\n     use sys_common::io::test::tmpdir;\n@@ -1613,6 +1613,27 @@ mod test {\n         assert!(kind == io::ErrorKind::WouldBlock || kind == io::ErrorKind::TimedOut);\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_unix_stream_timeout_zero_duration() {\n+        let dir = tmpdir();\n+        let socket_path = dir.path().join(\"sock\");\n+\n+        let listener = or_panic!(UnixListener::bind(&socket_path));\n+        let stream = or_panic!(UnixStream::connect(&socket_path));\n+\n+        let result = stream.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = stream.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        drop(listener);\n+    }\n+\n     #[test]\n     fn test_unix_datagram() {\n         let dir = tmpdir();\n@@ -1712,6 +1733,24 @@ mod test {\n         thread.join().unwrap();\n     }\n \n+    // Ensure the `set_read_timeout` and `set_write_timeout` calls return errors\n+    // when passed zero Durations\n+    #[test]\n+    fn test_unix_datagram_timeout_zero_duration() {\n+        let dir = tmpdir();\n+        let path = dir.path().join(\"sock\");\n+\n+        let datagram = or_panic!(UnixDatagram::bind(&path));\n+\n+        let result = datagram.set_write_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+\n+        let result = datagram.set_read_timeout(Some(Duration::new(0, 0)));\n+        let err = result.unwrap_err();\n+        assert_eq!(err.kind(), ErrorKind::InvalidInput);\n+    }\n+\n     #[test]\n     fn abstract_namespace_not_allowed() {\n         assert!(UnixStream::connect(\"\\0asdf\").is_err());"}]}