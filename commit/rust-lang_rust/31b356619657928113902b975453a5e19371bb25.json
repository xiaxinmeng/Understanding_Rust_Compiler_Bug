{"sha": "31b356619657928113902b975453a5e19371bb25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYjM1NjYxOTY1NzkyODExMzkwMmI5NzU0NTNhNWUxOTM3MWJiMjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-14T02:46:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-03T01:24:07Z"}, "message": "When a projection is expected, suggest constraining or calling method", "tree": {"sha": "3091edeed3d01082c1e4e491a52ee36a5cffb363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3091edeed3d01082c1e4e491a52ee36a5cffb363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31b356619657928113902b975453a5e19371bb25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31b356619657928113902b975453a5e19371bb25", "html_url": "https://github.com/rust-lang/rust/commit/31b356619657928113902b975453a5e19371bb25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31b356619657928113902b975453a5e19371bb25/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a795fba038bf64452abb8c2240fd1221185e274", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a795fba038bf64452abb8c2240fd1221185e274", "html_url": "https://github.com/rust-lang/rust/commit/3a795fba038bf64452abb8c2240fd1221185e274"}], "stats": {"total": 312, "additions": 228, "deletions": 84}, "files": [{"sha": "13c7989e5c88eec23cbee2af35ca66c7aef0c88d", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -1388,6 +1388,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         terr: &TypeError<'tcx>,\n     ) {\n         let span = cause.span(self.tcx);\n+        debug!(\"note_type_err cause={:?} values={:?}, terr={:?}\", cause, values, terr);\n \n         // For some types of errors, expected-found does not make\n         // sense, so just ignore the values we were given.\n@@ -1599,11 +1600,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n             });\n         self.check_and_note_conflicting_crates(diag, terr);\n-        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id.to_def_id());\n+        self.tcx.note_and_explain_type_err(diag, terr, cause, span, body_owner_def_id.to_def_id());\n \n         // It reads better to have the error origin as the final\n         // thing.\n-        self.note_error_origin(diag, &cause, exp_found);\n+        self.note_error_origin(diag, cause, exp_found);\n     }\n \n     /// When encountering a case where `.as_ref()` on a `Result` or `Option` would be appropriate,"}, {"sha": "99ea0068fed2a133fdd7d810c7b3e9c7e4c57ffd", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 157, "deletions": 41, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -1,10 +1,12 @@\n+use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::{self, BoundRegion, Region, Ty, TyCtxt};\n use rustc_ast::ast;\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n+use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n+use rustc_errors::{pluralize, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::sym;\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, MultiSpan, Span};\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n@@ -332,6 +334,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         db: &mut DiagnosticBuilder<'_>,\n         err: &TypeError<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n         sp: Span,\n         body_owner_def_id: DefId,\n     ) {\n@@ -370,7 +373,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                                     sp,\n                                     \"use a float literal\",\n                                     format!(\"{}.0\", snippet),\n-                                    Applicability::MachineApplicable,\n+                                    MachineApplicable,\n                                 );\n                             }\n                         }\n@@ -451,41 +454,27 @@ impl<T> Trait<T> for X {\n                             db.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Projection(_), _) => {\n-                        db.note(&format!(\n-                            \"consider constraining the associated type `{}` to `{}` or calling a \\\n-                             method that returns `{0}`\",\n-                            values.expected, values.found,\n-                        ));\n-                        if self.sess.teach(&db.get_code().unwrap()) {\n-                            db.help(\n-                                \"given an associated type `T` and a method `foo`:\n-```\n-trait Trait {\n-    type T;\n-    fn foo(&self) -> Self::T;\n-}\n-```\n-the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n-```\n-impl Trait for X {\n-    type T = String;\n-    fn foo(&self) -> Self::T { String::new() }\n-}\n-```\",\n-                            );\n-                        }\n-                        db.note(\n-                            \"for more information, visit \\\n-                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n+                    (ty::Projection(proj_ty), _) => {\n+                        self.expected_projection(\n+                            db,\n+                            proj_ty,\n+                            values,\n+                            body_owner_def_id,\n+                            &cause.code,\n                         );\n                     }\n                     (_, ty::Projection(proj_ty)) => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,\n                         );\n-                        if !self.suggest_constraint(db, &msg, body_owner_def_id, proj_ty, values) {\n+                        if !self.suggest_constraint(\n+                            db,\n+                            &msg,\n+                            body_owner_def_id,\n+                            proj_ty,\n+                            values.expected,\n+                        ) {\n                             db.help(&msg);\n                             db.note(\n                                 \"for more information, visit \\\n@@ -533,7 +522,7 @@ impl Trait for X {\n         msg: &str,\n         body_owner_def_id: DefId,\n         proj_ty: &ty::ProjectionTy<'tcx>,\n-        values: &ExpectedFound<Ty<'tcx>>,\n+        ty: Ty<'tcx>,\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.item_def_id);\n         let trait_ref = proj_ty.trait_ref(*self);\n@@ -570,7 +559,7 @@ impl Trait for X {\n                             &trait_ref,\n                             pred.bounds,\n                             &assoc,\n-                            values,\n+                            ty,\n                             msg,\n                         ) {\n                             return true;\n@@ -587,7 +576,7 @@ impl Trait for X {\n                             &trait_ref,\n                             param.bounds,\n                             &assoc,\n-                            values,\n+                            ty,\n                             msg,\n                         );\n                     }\n@@ -597,15 +586,145 @@ impl Trait for X {\n         false\n     }\n \n+    fn expected_projection(\n+        &self,\n+        db: &mut DiagnosticBuilder<'_>,\n+        proj_ty: &ty::ProjectionTy<'tcx>,\n+        values: &ExpectedFound<Ty<'tcx>>,\n+        body_owner_def_id: DefId,\n+        cause_code: &ObligationCauseCode<'_>,\n+    ) {\n+        let msg = format!(\n+            \"consider constraining the associated type `{}` to `{}`\",\n+            values.expected, values.found\n+        );\n+        let mut suggested = false;\n+        let body_owner = self.hir().get_if_local(body_owner_def_id);\n+        let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n+\n+        let callable_scope = match body_owner {\n+            Some(\n+                hir::Node::Item(hir::Item {\n+                    kind:\n+                        hir::ItemKind::Trait(..)\n+                        | hir::ItemKind::Impl { .. }\n+                        | hir::ItemKind::Const(..)\n+                        | hir::ItemKind::Enum(..)\n+                        | hir::ItemKind::Struct(..)\n+                        | hir::ItemKind::Union(..),\n+                    ..\n+                })\n+                | hir::Node::TraitItem(hir::TraitItem {\n+                    kind: hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..),\n+                    ..\n+                })\n+                | hir::Node::ImplItem(hir::ImplItem {\n+                    kind: hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(..),\n+                    ..\n+                }),\n+            ) => false,\n+            _ => true,\n+        };\n+        let impl_comparison =\n+            matches!(cause_code, ObligationCauseCode::CompareImplMethodObligation { .. });\n+        if !callable_scope || impl_comparison {\n+            // We do not want to suggest calling functions when the reason of the\n+            // type error is a comparison of an `impl` with its `trait` or when the\n+            // scope is outside of a `Body`.\n+        } else {\n+            let assoc = self.associated_item(proj_ty.item_def_id);\n+            let items = self.associated_items(assoc.container.id());\n+            // Find all the methods in the trait that could be called to construct the\n+            // expected associated type.\n+            let methods: Vec<(Span, String)> = items\n+                .items\n+                .iter()\n+                .filter(|(name, item)| {\n+                    ty::AssocKind::Method == item.kind && Some(**name) != current_method_ident\n+                })\n+                .filter_map(|(_, item)| {\n+                    let method = self.fn_sig(item.def_id);\n+                    match method.output().skip_binder().kind {\n+                        ty::Projection(ty::ProjectionTy { item_def_id, .. })\n+                            if item_def_id == proj_ty.item_def_id =>\n+                        {\n+                            Some((\n+                                self.sess.source_map().guess_head_span(self.def_span(item.def_id)),\n+                                format!(\"consider calling `{}`\", self.def_path_str(item.def_id)),\n+                            ))\n+                        }\n+                        _ => None,\n+                    }\n+                })\n+                .collect();\n+            if !methods.is_empty() {\n+                // Use a single `help:` to show all the methods in the trait that can\n+                // be used to construct the expected associated type.\n+                let mut span: MultiSpan =\n+                    methods.iter().map(|(sp, _)| *sp).collect::<Vec<Span>>().into();\n+                let msg = format!(\n+                    \"{some} method{s} {are} available that return{r} `{ty}`\",\n+                    some = if methods.len() == 1 { \"a\" } else { \"some\" },\n+                    s = pluralize!(methods.len()),\n+                    are = if methods.len() == 1 { \"is\" } else { \"are\" },\n+                    r = if methods.len() == 1 { \"s\" } else { \"\" },\n+                    ty = values.expected\n+                );\n+                for (sp, label) in methods.into_iter() {\n+                    span.push_span_label(sp, label);\n+                }\n+                db.span_help(span, &msg);\n+                suggested = true;\n+            }\n+            // Possibly suggest constraining the associated type to conform to the\n+            // found type.\n+            suggested |=\n+                self.suggest_constraint(db, &msg, body_owner_def_id, proj_ty, values.found);\n+        }\n+        if !suggested && !impl_comparison {\n+            // Generic suggestion when we can't be more specific.\n+            if callable_scope {\n+                db.help(\n+                    &format!(\"{} or calling a method that returns `{}`\", msg, values.expected,),\n+                );\n+            } else {\n+                db.help(&msg);\n+            }\n+            db.note(\n+                \"for more information, visit \\\n+                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n+            );\n+        }\n+        if self.sess.teach(&db.get_code().unwrap()) {\n+            db.help(\n+                \"given an associated type `T` and a method `foo`:\n+```\n+trait Trait {\n+type T;\n+fn foo(&self) -> Self::T;\n+}\n+```\n+the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n+```\n+impl Trait for X {\n+type T = String;\n+fn foo(&self) -> Self::T { String::new() }\n+}\n+```\",\n+            );\n+        }\n+    }\n+\n     fn constrain_associated_type_structured_suggestion(\n         &self,\n         db: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::TraitRef<'tcx>,\n         bounds: hir::GenericBounds<'_>,\n         assoc: &ty::AssocItem,\n-        values: &ExpectedFound<Ty<'tcx>>,\n+        ty: Ty<'tcx>,\n         msg: &str,\n     ) -> bool {\n+        // FIXME: we would want to call `resolve_vars_if_possible` on `ty` before suggesting.\n         for bound in bounds {\n             match bound {\n                 hir::GenericBound::Trait(ptr, hir::TraitBoundModifier::None) => {\n@@ -620,14 +739,11 @@ impl Trait for X {\n                             let (span, sugg) = if has_params {\n                                 let pos = ptr.span.hi() - BytePos(1);\n                                 let span = Span::new(pos, pos, ptr.span.ctxt());\n-                                (span, format!(\", {} = {}\", assoc.ident, values.expected))\n+                                (span, format!(\", {} = {}\", assoc.ident, ty))\n                             } else {\n-                                (\n-                                    ptr.span.shrink_to_hi(),\n-                                    format!(\"<{} = {}>\", assoc.ident, values.expected),\n-                                )\n+                                (ptr.span.shrink_to_hi(), format!(\"<{} = {}>\", assoc.ident, ty))\n                             };\n-                            db.span_suggestion(span, msg, sugg, Applicability::MaybeIncorrect);\n+                            db.span_suggestion_verbose(span, msg, sugg, MaybeIncorrect);\n                             return true;\n                         }\n                     }"}, {"sha": "6e3ec4ed155b39cd4dc85f9b2b1b1a307c4d30ce", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -9,7 +9,7 @@ LL |     const FROM: &'static str = \"foo\";\n    |\n    = note: expected associated type `<T as Foo>::Out`\n                     found reference `&'static str`\n-   = note: consider constraining the associated type `<T as Foo>::Out` to `&'static str` or calling a method that returns `<T as Foo>::Out`\n+   = help: consider constraining the associated type `<T as Foo>::Out` to `&'static str`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error"}, {"sha": "41dc67d6f475913abacf1bf48feda43a027fa4e9", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -10,7 +10,7 @@ trait Tr {\n         //~^ ERROR mismatched types\n         //~| NOTE expected associated type, found `()`\n         //~| NOTE expected associated type `<Self as Tr>::A`\n-        //~| NOTE consider constraining the associated type\n+        //~| HELP consider constraining the associated type\n         //~| NOTE for more information, visit\n     }\n }\n@@ -38,7 +38,7 @@ trait AssocConst {\n     //~^ ERROR mismatched types\n     //~| NOTE expected associated type, found `u8`\n     //~| NOTE expected associated type `<Self as AssocConst>::Ty`\n-    //~| NOTE consider constraining the associated type\n+    //~| HELP consider constraining the associated type\n     //~| NOTE for more information, visit\n }\n "}, {"sha": "a5b170d05c45e76c33b346545d626e5bd68d7c01", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -6,7 +6,7 @@ LL |         let () = p;\n    |\n    = note: expected associated type `<Self as Tr>::A`\n                     found unit type `()`\n-   = note: consider constraining the associated type `<Self as Tr>::A` to `()` or calling a method that returns `<Self as Tr>::A`\n+   = help: consider constraining the associated type `<Self as Tr>::A` to `()` or calling a method that returns `<Self as Tr>::A`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n@@ -17,7 +17,7 @@ LL |     const C: Self::Ty = 0u8;\n    |\n    = note: expected associated type `<Self as AssocConst>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<Self as AssocConst>::Ty` to `u8` or calling a method that returns `<Self as AssocConst>::Ty`\n+   = help: consider constraining the associated type `<Self as AssocConst>::Ty` to `u8`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors"}, {"sha": "2f3ce832725cff5a3362313735438b2c43deef78", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -9,8 +9,6 @@ LL |     fn make() -> u8 { 0 }\n    |\n    = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n               found fn pointer `fn() -> u8`\n-   = note: consider constraining the associated type `<A<T> as Tr>::Ty` to `u8` or calling a method that returns `<A<T> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:34:18\n@@ -23,8 +21,6 @@ LL |     fn make() -> bool { true }\n    |\n    = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n               found fn pointer `fn() -> bool`\n-   = note: consider constraining the associated type `<B<T> as Tr>::Ty` to `bool` or calling a method that returns `<B<T> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:9:9\n@@ -36,7 +32,7 @@ LL |         0u8\n    |\n    = note: expected associated type `<Self as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<Self as Tr>::Ty` to `u8` or calling a method that returns `<Self as Tr>::Ty`\n+   = help: consider constraining the associated type `<Self as Tr>::Ty` to `u8` or calling a method that returns `<Self as Tr>::Ty`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n@@ -49,7 +45,7 @@ LL |     fn make() -> Self::Ty { 0u8 }\n    |\n    = note: expected associated type `<A2<T> as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<A2<T> as Tr>::Ty` to `u8` or calling a method that returns `<A2<T> as Tr>::Ty`\n+   = help: consider constraining the associated type `<A2<T> as Tr>::Ty` to `u8` or calling a method that returns `<A2<T> as Tr>::Ty`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n@@ -62,7 +58,7 @@ LL |     fn make() -> Self::Ty { true }\n    |\n    = note: expected associated type `<B2<T> as Tr>::Ty`\n                          found type `bool`\n-   = note: consider constraining the associated type `<B2<T> as Tr>::Ty` to `bool` or calling a method that returns `<B2<T> as Tr>::Ty`\n+   = help: consider constraining the associated type `<B2<T> as Tr>::Ty` to `bool` or calling a method that returns `<B2<T> as Tr>::Ty`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n@@ -75,8 +71,11 @@ LL |     let _: <B<()> as Tr>::Ty = 0u8;\n    |\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `u8` or calling a method that returns `<B<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:87:32\n@@ -88,8 +87,11 @@ LL |     let _: <B<()> as Tr>::Ty = true;\n    |\n    = note: expected associated type `<B<()> as Tr>::Ty`\n                          found type `bool`\n-   = note: consider constraining the associated type `<B<()> as Tr>::Ty` to `bool` or calling a method that returns `<B<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:88:33\n@@ -101,8 +103,11 @@ LL |     let _: <B2<()> as Tr>::Ty = 0u8;\n    |\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `u8`\n-   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `u8` or calling a method that returns `<B2<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B2<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:89:33\n@@ -114,8 +119,11 @@ LL |     let _: <B2<()> as Tr>::Ty = true;\n    |\n    = note: expected associated type `<B2<()> as Tr>::Ty`\n                          found type `bool`\n-   = note: consider constraining the associated type `<B2<()> as Tr>::Ty` to `bool` or calling a method that returns `<B2<()> as Tr>::Ty`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: a method is available that returns `<B2<()> as Tr>::Ty`\n+  --> $DIR/defaults-specialization.rs:8:5\n+   |\n+LL |     fn make() -> Self::Ty {\n+   |     ^^^^^^^^^^^^^^^^^^^^^ consider calling `Tr::make`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "74411008c9dda6f74a2a64cb1dd13247d6dd4dc0", "filename": "src/test/ui/associated-types/issue-26681.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-26681.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -6,7 +6,7 @@ LL |     const C: <Self::Fv as Foo>::Bar = 6665;\n    |\n    = note: expected associated type `<<Self as Baz>::Fv as Foo>::Bar`\n                          found type `{integer}`\n-   = note: consider constraining the associated type `<<Self as Baz>::Fv as Foo>::Bar` to `{integer}` or calling a method that returns `<<Self as Baz>::Fv as Foo>::Bar`\n+   = help: consider constraining the associated type `<<Self as Baz>::Fv as Foo>::Bar` to `{integer}`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error"}, {"sha": "6e75462122513fae82463f1fc6c527b28bafeb90", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -34,7 +34,7 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |\n    = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n                     found reference `&T`\n-   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+   = help: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n@@ -51,7 +51,7 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |\n    = note: expected associated type `<[T] as Iterable>::Item<'_>`\n                     found reference `&T`\n-   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n+   = help: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 4 previous errors"}, {"sha": "369f56b9869a334755e72c442b6f67e11b63932a", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -8,8 +8,10 @@ LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |\n    = note: expected associated type `<T as Tr<'a>>::Out`\n                     found unit type `()`\n-   = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+help: consider constraining the associated type `<T as Tr<'a>>::Out` to `()`\n+   |\n+LL | pub fn f<'a, T: Tr<'a, Out = ()>>() -> <T as Tr<'a>>::Out {}\n+   |                      ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ac15ab0681a028c7ce328ca2ba041bf6e502137b", "filename": "src/test/ui/specialization/specialization-default-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-projection.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -9,7 +9,7 @@ LL |     ()\n    |\n    = note: expected associated type `<T as Foo>::Assoc`\n                     found unit type `()`\n-   = note: consider constraining the associated type `<T as Foo>::Assoc` to `()` or calling a method that returns `<T as Foo>::Assoc`\n+   = help: consider constraining the associated type `<T as Foo>::Assoc` to `()` or calling a method that returns `<T as Foo>::Assoc`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types"}, {"sha": "4dccf9ad9ab9703383727c6dd7237b4e1f420104", "filename": "src/test/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -8,7 +8,7 @@ LL |         Box::new(self)\n    |\n    = note: expected associated type `<T as Example>::Output`\n                        found struct `std::boxed::Box<T>`\n-   = note: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>` or calling a method that returns `<T as Example>::Output`\n+   = help: consider constraining the associated type `<T as Example>::Output` to `std::boxed::Box<T>` or calling a method that returns `<T as Example>::Output`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types"}, {"sha": "7465049787f59c931ebbfd7a19784db2a9c638f1", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.rs?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -6,6 +6,7 @@ trait Trait<T = Self> {\n     type A;\n \n     fn func(&self) -> Self::A;\n+    fn funk(&self, _: Self::A);\n }\n \n fn foo(_: impl Trait, x: impl Trait) {\n@@ -21,6 +22,7 @@ fn foo2(x: impl Trait<i32>) {\n }\n \n fn bar2<T: Trait<i32>>(x: T) {\n+    x.funk(3); //~ ERROR mismatched types\n     qux(x.func()) //~ ERROR mismatched types\n }\n \n@@ -29,7 +31,7 @@ fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n }\n \n fn bat(x: &mut dyn Trait<(), A = ()>) {\n-    qux(x) //~ ERROR mismatched types\n+    qux(x.func()) //~ ERROR mismatched types\n }\n \n fn ban<T>(x: T) where T: Trait {"}, {"sha": "5ae1d45c6b7037dd847f9dc1880e1d7c519b7556", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31b356619657928113902b975453a5e19371bb25/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=31b356619657928113902b975453a5e19371bb25", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:12:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:13:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -12,7 +12,7 @@ LL | fn foo(_: impl Trait, x: impl Trait<A = usize>) {\n    |                                    ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:16:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:17:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -25,7 +25,7 @@ LL | fn bar<T: Trait<A = usize>>(x: T) {\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:20:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:21:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -38,7 +38,25 @@ LL | fn foo2(x: impl Trait<i32, A = usize>) {\n    |                          ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:24:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:25:12\n+   |\n+LL |     x.funk(3);\n+   |            ^ expected associated type, found integer\n+   |\n+   = note: expected associated type `<T as Trait<i32>>::A`\n+                         found type `{integer}`\n+help: a method is available that returns `<T as Trait<i32>>::A`\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:8:5\n+   |\n+LL |     fn func(&self) -> Self::A;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ consider calling `Trait::func`\n+help: consider constraining the associated type `<T as Trait<i32>>::A` to `{integer}`\n+   |\n+LL | fn bar2<T: Trait<i32, A = {integer}>>(x: T) {\n+   |                     ^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:26:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -51,7 +69,7 @@ LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {\n    |                     ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:28:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:30:9\n    |\n LL | fn baz<D: std::fmt::Debug, T: Trait<A = D>>(x: T) {\n    |        - this type parameter\n@@ -62,16 +80,13 @@ LL |     qux(x.func())\n            found type parameter `D`\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:32:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:34:9\n    |\n-LL |     qux(x)\n-   |         ^ expected `usize`, found mutable reference\n-   |\n-   = note:           expected type `usize`\n-           found mutable reference `&mut dyn Trait<(), A = ()>`\n+LL |     qux(x.func())\n+   |         ^^^^^^^^ expected `usize`, found `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/trait-with-missing-associated-type-restriction.rs:36:9\n+  --> $DIR/trait-with-missing-associated-type-restriction.rs:38:9\n    |\n LL |     qux(x.func())\n    |         ^^^^^^^^ expected `usize`, found associated type\n@@ -83,6 +98,6 @@ help: consider constraining the associated type `<T as Trait>::A` to `usize`\n LL | fn ban<T>(x: T) where T: Trait<A = usize> {\n    |                               ^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}