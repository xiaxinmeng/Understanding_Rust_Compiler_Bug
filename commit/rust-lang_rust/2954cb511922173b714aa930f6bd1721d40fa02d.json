{"sha": "2954cb511922173b714aa930f6bd1721d40fa02d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NTRjYjUxMTkyMjE3M2I3MTRhYTkzMGY2YmQxNzIxZDQwZmEwMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T07:50:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T07:50:10Z"}, "message": "Auto merge of #50554 - clarcharr:from_bool, r=TimNN\n\nAdd From<bool> for int types\n\nFixes #46109.", "tree": {"sha": "0773a7e3a3886b90ceb784c080a82939b9ea9d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0773a7e3a3886b90ceb784c080a82939b9ea9d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2954cb511922173b714aa930f6bd1721d40fa02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2954cb511922173b714aa930f6bd1721d40fa02d", "html_url": "https://github.com/rust-lang/rust/commit/2954cb511922173b714aa930f6bd1721d40fa02d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2954cb511922173b714aa930f6bd1721d40fa02d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edae1cc38b467518a8eea590c9c3e0c103b4ecb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/edae1cc38b467518a8eea590c9c3e0c103b4ecb0", "html_url": "https://github.com/rust-lang/rust/commit/edae1cc38b467518a8eea590c9c3e0c103b4ecb0"}, {"sha": "b1797d57ffb42a063a8ecc8cc5f9d2b625708c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1797d57ffb42a063a8ecc8cc5f9d2b625708c72", "html_url": "https://github.com/rust-lang/rust/commit/b1797d57ffb42a063a8ecc8cc5f9d2b625708c72"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "ea652ad811e3cc27ca6041e2489010b39f62e22e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2954cb511922173b714aa930f6bd1721d40fa02d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2954cb511922173b714aa930f6bd1721d40fa02d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2954cb511922173b714aa930f6bd1721d40fa02d", "patch": "@@ -4454,6 +4454,20 @@ macro_rules! impl_from {\n     }\n }\n \n+// Bool -> Any\n+impl_from! { bool, u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, u128, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, usize, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, i8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, i16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, i32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, i64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, i128, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+impl_from! { bool, isize, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+\n // Unsigned -> Unsigned\n impl_from! { u8, u16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u8, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }"}, {"sha": "b5e6a019a228c6b4e87932323fbc0114ccd29631", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2954cb511922173b714aa930f6bd1721d40fa02d/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2954cb511922173b714aa930f6bd1721d40fa02d/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=2954cb511922173b714aa930f6bd1721d40fa02d", "patch": "@@ -134,6 +134,15 @@ fn test_infallible_try_from_int_error() {\n }\n \n macro_rules! test_impl_from {\n+    ($fn_name:ident, bool, $target: ty) => {\n+        #[test]\n+        fn $fn_name() {\n+            let one: $target = 1;\n+            let zero: $target = 0;\n+            assert_eq!(one, <$target>::from(true));\n+            assert_eq!(zero, <$target>::from(false));\n+        }\n+    };\n     ($fn_name: ident, $Small: ty, $Large: ty) => {\n         #[test]\n         fn $fn_name() {\n@@ -173,6 +182,18 @@ test_impl_from! { test_u16i32, u16, i32 }\n test_impl_from! { test_u16i64, u16, i64 }\n test_impl_from! { test_u32i64, u32, i64 }\n \n+// Bool -> Integer\n+test_impl_from! { test_boolu8, bool, u8 }\n+test_impl_from! { test_boolu16, bool, u16 }\n+test_impl_from! { test_boolu32, bool, u32 }\n+test_impl_from! { test_boolu64, bool, u64 }\n+test_impl_from! { test_boolu128, bool, u128 }\n+test_impl_from! { test_booli8, bool, i8 }\n+test_impl_from! { test_booli16, bool, i16 }\n+test_impl_from! { test_booli32, bool, i32 }\n+test_impl_from! { test_booli64, bool, i64 }\n+test_impl_from! { test_booli128, bool, i128 }\n+\n // Signed -> Float\n test_impl_from! { test_i8f32, i8, f32 }\n test_impl_from! { test_i8f64, i8, f64 }"}, {"sha": "d9927ce4487e95492714ebf6ae274c929f637dab", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2954cb511922173b714aa930f6bd1721d40fa02d/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2954cb511922173b714aa930f6bd1721d40fa02d/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=2954cb511922173b714aa930f6bd1721d40fa02d", "patch": "@@ -220,13 +220,15 @@ fn test_try() {\n     assert_eq!(try_result_none(), None);\n \n     fn try_result_ok() -> Result<u8, u8> {\n-        let val = Ok(1)?;\n+        let result: Result<u8, u8> = Ok(1);\n+        let val = result?;\n         Ok(val)\n     }\n     assert_eq!(try_result_ok(), Ok(1));\n \n     fn try_result_err() -> Result<u8, u8> {\n-        let val = Err(1)?;\n+        let result: Result<u8, u8> = Err(1);\n+        let val = result?;\n         Ok(val)\n     }\n     assert_eq!(try_result_err(), Err(1));"}]}