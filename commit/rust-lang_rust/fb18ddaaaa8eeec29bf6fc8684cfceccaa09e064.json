{"sha": "fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMThkZGFhYWE4ZWVlYzI5YmY2ZmM4Njg0Y2ZjZWNjYWEwOWUwNjQ=", "commit": {"author": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2018-12-14T04:26:09Z"}, "committer": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2018-12-20T06:18:04Z"}, "message": "Add DoubleEndedIterator::nth_back", "tree": {"sha": "19383c12741f33b907d84de87f42f8ef0e0fbd7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19383c12741f33b907d84de87f42f8ef0e0fbd7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "html_url": "https://github.com/rust-lang/rust/commit/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a4a4ffc69f2d05eb8b8a32eaf9bd0607b69fe38", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4a4ffc69f2d05eb8b8a32eaf9bd0607b69fe38", "html_url": "https://github.com/rust-lang/rust/commit/0a4a4ffc69f2d05eb8b8a32eaf9bd0607b69fe38"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "e493a3804376ffab9588a482ee078e050cca74a7", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "patch": "@@ -429,6 +429,9 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n \n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<<I as Iterator>::Item> { self.iter.nth_back(n) }\n+\n     fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n@@ -461,6 +464,9 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> { self.iter.nth(n) }\n+\n     fn try_rfold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {"}, {"sha": "727a60e3596944d0294acb80952268f948c6d7fe", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "patch": "@@ -427,6 +427,62 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n+    /// Returns the `n`th element from the end of the iterator.\n+    ///\n+    /// This is essentially the reversed version of [`nth`]. Although like most indexing\n+    /// operations, the count starts from zero, so `nth_back(0)` returns the first value fro\n+    /// the end, `nth_back(1)` the second, and so on.\n+    ///\n+    /// Note that all elements between the end and the returned element will be\n+    /// consumed, including the returned element. This also means that calling\n+    /// `nth_back(0)` multiple times on the same iterator will return different\n+    /// elements.\n+    ///\n+    /// `nth_back()` will return [`None`] if `n` is greater than or equal to the length of the\n+    /// iterator.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`nth`]: ../../std/iter/trait.Iterator.html#method.nth\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    /// assert_eq!(a.iter().nth_back(2), Some(&1));\n+    /// ```\n+    ///\n+    /// Calling `nth_back()` multiple times doesn't rewind the iterator:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.nth_back(1), Some(&2));\n+    /// assert_eq!(iter.nth_back(1), None);\n+    /// ```\n+    ///\n+    /// Returning `None` if there are less than `n + 1` elements:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    /// assert_eq!(a.iter().nth_back(10), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_nth_back\", issue = \"56995\")]\n+    fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n+        for x in self.rev() {\n+            if n == 0 { return Some(x) }\n+            n -= 1;\n+        }\n+        None\n+    }\n+\n     /// This is the reverse version of [`try_fold()`]: it takes elements\n     /// starting from the back of the iterator.\n     ///\n@@ -461,8 +517,11 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n-    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n-        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> R,\n+        R: Try<Ok=B>\n     {\n         let mut accum = init;\n         while let Some(x) = self.next_back() {\n@@ -524,8 +583,10 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n-    fn rfold<B, F>(mut self, accum: B, mut f: F) -> B where\n-        Self: Sized, F: FnMut(B, Self::Item) -> B,\n+    fn rfold<B, F>(mut self, accum: B, mut f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n     {\n         self.try_rfold(accum, move |acc, x| Ok::<B, !>(f(acc, x))).unwrap()\n     }\n@@ -574,7 +635,8 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n-    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item>\n+    where\n         Self: Sized,\n         P: FnMut(&Self::Item) -> bool\n     {\n@@ -587,7 +649,12 @@ pub trait DoubleEndedIterator: Iterator {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n-    fn next_back(&mut self) -> Option<I::Item> { (**self).next_back() }\n+    fn next_back(&mut self) -> Option<I::Item> {\n+        (**self).next_back()\n+    }\n+    fn nth_back(&mut self, n: usize) -> Option<I::Item> {\n+        (**self).nth_back(n)\n+    }\n }\n \n /// An iterator that knows its exact length."}, {"sha": "b5633333d01706c3e82f38aac78a6d00245140ac", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "patch": "@@ -1016,6 +1016,33 @@ fn test_iterator_nth() {\n     assert_eq!(v.iter().nth(v.len()), None);\n }\n \n+#[test]\n+fn test_iterator_nth_back() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().nth_back(i).unwrap(), &v[v.len() - 1 - i]);\n+    }\n+    assert_eq!(v.iter().nth_back(v.len()), None);\n+}\n+\n+#[test]\n+fn test_iterator_rev_nth_back() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().rev().nth_back(i).unwrap(), &v[i]);\n+    }\n+    assert_eq!(v.iter().rev().nth_back(v.len()), None);\n+}\n+\n+#[test]\n+fn test_iterator_rev_nth() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().rev().nth(i).unwrap(), &v[v.len() - 1 - i]);\n+    }\n+    assert_eq!(v.iter().rev().nth(v.len()), None);\n+}\n+\n #[test]\n fn test_iterator_last() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "2377a4733678d1eb33e2b6b4fca2d07b7b9bfd78", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "patch": "@@ -19,6 +19,7 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n+#![feature(iter_nth_back)]\n #![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}]}