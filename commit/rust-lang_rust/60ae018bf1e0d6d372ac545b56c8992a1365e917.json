{"sha": "60ae018bf1e0d6d372ac545b56c8992a1365e917", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWUwMThiZjFlMGQ2ZDM3MmFjNTQ1YjU2Yzg5OTJhMTM2NWU5MTc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-09T17:51:07Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-12T17:53:25Z"}, "message": "bootstrap: add --include-default-paths to ./x.py", "tree": {"sha": "f2878658e6ec6d7d0672b654bcc490ddfec6689e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2878658e6ec6d7d0672b654bcc490ddfec6689e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ae018bf1e0d6d372ac545b56c8992a1365e917", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+EmBUACgkQPgar6Auq\n8ZzTcRAAuy9WEsligV2c8T6uEZLOV5kHOC7kWM0LJFTzMPU67ev+UPCpeL8J79pI\nhJnJyTIPzK93H+QM8iWE+AwIQd/J083tuAwsyVAtV2lK6PG3DL7zvmqTocgG21pv\nKznqYKVaB/L1IQRe5ZQVl+i4fIJ2Xux0aZA06kNUMRBTu+nvp0nDKg8g3Hwg3bij\nTpIrctHJsk0vaJmE0qVJ0fR6FEL2AMoVw1HfosB7H2VGyVdqN8Ibuib6OojWrKo0\nZkuitKY+eQG2AQFlXth3bobiy87bAM7DmGJhwzvh0DOXymEgSv9bN4GvcYI87TWG\nB9D6llas1VEfTLPPQQeXYbmBF4IPsnLaHa9RGL38Z9B/Vp5gF/TYn6BPTqm0Ydj4\nlNkii3tDWg0ife9mYnVw5qvTGtoEfp3NloKPisDsU234h1bFwj09iYYmQSg6tl00\nk+vQK70cZKsNwYacK1Q8Acn/h8v4IzUYeynTA3/VgE9w5D7czFH3ZK91xdU0h07x\n3DST+g4VsUCSJt8PqLLbWrY/fEGd3pjEJBIEKSaQSH+wH8hM1L7VIpf0D/vzLAfL\nyceLKDEsUhvpYXSH5j9UFE5XKi0sl40B8BTSYJ7kQmVtN3dGiJR5P7A6isJufQpU\n8lLbWn5tY8VAxtj2Dct4GwDHH280raSXfKFrLyz9pE8NoFGVPxs=\n=j6os\n-----END PGP SIGNATURE-----", "payload": "tree f2878658e6ec6d7d0672b654bcc490ddfec6689e\nparent 2f387e9d11f1ea6222af0ff00e4de956496fc83f\nauthor Pietro Albini <pietro@pietroalbini.org> 1602265867 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1602525205 +0200\n\nbootstrap: add --include-default-paths to ./x.py\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ae018bf1e0d6d372ac545b56c8992a1365e917", "html_url": "https://github.com/rust-lang/rust/commit/60ae018bf1e0d6d372ac545b56c8992a1365e917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ae018bf1e0d6d372ac545b56c8992a1365e917/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f387e9d11f1ea6222af0ff00e4de956496fc83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f387e9d11f1ea6222af0ff00e4de956496fc83f", "html_url": "https://github.com/rust-lang/rust/commit/2f387e9d11f1ea6222af0ff00e4de956496fc83f"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "707c1ff3efad93012f7893ebed89731fe52d06f4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/60ae018bf1e0d6d372ac545b56c8992a1365e917/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae018bf1e0d6d372ac545b56c8992a1365e917/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=60ae018bf1e0d6d372ac545b56c8992a1365e917", "patch": "@@ -193,37 +193,37 @@ impl StepDescription {\n             );\n         }\n \n-        if paths.is_empty() {\n-            for (desc, should_run) in v.iter().zip(should_runs) {\n+        if paths.is_empty() || builder.config.include_default_paths {\n+            for (desc, should_run) in v.iter().zip(&should_runs) {\n                 if desc.default && should_run.is_really_default {\n                     for pathset in &should_run.paths {\n                         desc.maybe_run(builder, pathset);\n                     }\n                 }\n             }\n-        } else {\n-            for path in paths {\n-                // strip CurDir prefix if present\n-                let path = match path.strip_prefix(\".\") {\n-                    Ok(p) => p,\n-                    Err(_) => path,\n-                };\n+        }\n \n-                let mut attempted_run = false;\n-                for (desc, should_run) in v.iter().zip(&should_runs) {\n-                    if let Some(suite) = should_run.is_suite_path(path) {\n-                        attempted_run = true;\n-                        desc.maybe_run(builder, suite);\n-                    } else if let Some(pathset) = should_run.pathset_for_path(path) {\n-                        attempted_run = true;\n-                        desc.maybe_run(builder, pathset);\n-                    }\n-                }\n+        for path in paths {\n+            // strip CurDir prefix if present\n+            let path = match path.strip_prefix(\".\") {\n+                Ok(p) => p,\n+                Err(_) => path,\n+            };\n \n-                if !attempted_run {\n-                    panic!(\"error: no rules matched {}\", path.display());\n+            let mut attempted_run = false;\n+            for (desc, should_run) in v.iter().zip(&should_runs) {\n+                if let Some(suite) = should_run.is_suite_path(path) {\n+                    attempted_run = true;\n+                    desc.maybe_run(builder, suite);\n+                } else if let Some(pathset) = should_run.pathset_for_path(path) {\n+                    attempted_run = true;\n+                    desc.maybe_run(builder, pathset);\n                 }\n             }\n+\n+            if !attempted_run {\n+                panic!(\"error: no rules matched {}\", path.display());\n+            }\n         }\n     }\n }"}, {"sha": "db82155bd6ad2172b71b0b3315f78f39a043467d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ae018bf1e0d6d372ac545b56c8992a1365e917/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae018bf1e0d6d372ac545b56c8992a1365e917/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=60ae018bf1e0d6d372ac545b56c8992a1365e917", "patch": "@@ -61,6 +61,7 @@ pub struct Config {\n     pub profiler: bool,\n     pub ignore_git: bool,\n     pub exclude: Vec<PathBuf>,\n+    pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub test_compare_mode: bool,\n@@ -532,6 +533,7 @@ impl Config {\n \n         let mut config = Config::default_opts();\n         config.exclude = flags.exclude;\n+        config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.json_output = flags.json_output;\n         config.on_fail = flags.on_fail;"}, {"sha": "c10188875fbc4a46779200a8c48f1190c0d4b1f3", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60ae018bf1e0d6d372ac545b56c8992a1365e917/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ae018bf1e0d6d372ac545b56c8992a1365e917/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=60ae018bf1e0d6d372ac545b56c8992a1365e917", "patch": "@@ -30,6 +30,7 @@ pub struct Flags {\n     pub cmd: Subcommand,\n     pub incremental: bool,\n     pub exclude: Vec<PathBuf>,\n+    pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub dry_run: bool,\n@@ -137,6 +138,11 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n         opts.optmulti(\"\", \"target\", \"target targets to build\", \"TARGET\");\n         opts.optmulti(\"\", \"exclude\", \"build paths to exclude\", \"PATH\");\n+        opts.optflag(\n+            \"\",\n+            \"include-default-paths\",\n+            \"include default paths in addition to the provided ones\",\n+        );\n         opts.optopt(\"\", \"on-fail\", \"command to run on failure\", \"CMD\");\n         opts.optflag(\"\", \"dry-run\", \"dry run; don't build anything\");\n         opts.optopt(\n@@ -618,6 +624,7 @@ Arguments:\n                 .into_iter()\n                 .map(|p| p.into())\n                 .collect::<Vec<_>>(),\n+            include_default_paths: matches.opt_present(\"include-default-paths\"),\n             deny_warnings: parse_deny_warnings(&matches),\n             llvm_skip_rebuild: matches.opt_str(\"llvm-skip-rebuild\").map(|s| s.to_lowercase()).map(\n                 |s| s.parse::<bool>().expect(\"`llvm-skip-rebuild` should be either true or false\"),"}]}