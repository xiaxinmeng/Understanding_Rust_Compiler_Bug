{"sha": "4739953b84b814de3b2b80f273f6292c33e33010", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Mzk5NTNiODRiODE0ZGUzYjJiODBmMjczZjYyOTJjMzNlMzMwMTA=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T01:18:52Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-08T01:22:27Z"}, "message": "Fixed two races.\n\nThe first is that the memory_region destructor would complain there is\nstill an outstanding allocation. This is because circular_buffer from\nrust_chan wasn't refing its task, so the task was being destructed too\nsoon.\n\nThe second was where the program could deadlock while joining a\ntask. The target task would die in the time between checking whether\nthe task should block and then actually blocking. The fix is to use\nthe target task's lock.", "tree": {"sha": "6d8a7753de5404b18ecfcae5a8080b5820ddc2ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8a7753de5404b18ecfcae5a8080b5820ddc2ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4739953b84b814de3b2b80f273f6292c33e33010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4739953b84b814de3b2b80f273f6292c33e33010", "html_url": "https://github.com/rust-lang/rust/commit/4739953b84b814de3b2b80f273f6292c33e33010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4739953b84b814de3b2b80f273f6292c33e33010/comments", "author": null, "committer": null, "parents": [{"sha": "2d57b25f6b3803ec505ba4909302bebb2cad4afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d57b25f6b3803ec505ba4909302bebb2cad4afd", "html_url": "https://github.com/rust-lang/rust/commit/2d57b25f6b3803ec505ba4909302bebb2cad4afd"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "98746d62f1524cf4779bcf6cae676fc1f5dc550f", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4739953b84b814de3b2b80f273f6292c33e33010/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4739953b84b814de3b2b80f273f6292c33e33010/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=4739953b84b814de3b2b80f273f6292c33e33010", "patch": "@@ -20,6 +20,7 @@ circular_buffer::circular_buffer(rust_task *task, size_t unit_sz) :\n          _buffer_sz, _unread, this);\n \n     A(sched, _buffer, \"Failed to allocate buffer.\");\n+    task->ref();\n }\n \n circular_buffer::~circular_buffer() {\n@@ -28,6 +29,7 @@ circular_buffer::~circular_buffer() {\n     W(sched, _unread == 0,\n       \"freeing circular_buffer with %d unread bytes\", _unread);\n     task->free(_buffer);\n+    --task->ref_count;\n }\n \n size_t"}, {"sha": "33f4a5114cecdcd3efe761675bc533784659866b", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4739953b84b814de3b2b80f273f6292c33e33010/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4739953b84b814de3b2b80f273f6292c33e33010/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4739953b84b814de3b2b80f273f6292c33e33010", "patch": "@@ -393,11 +393,16 @@ task_yield(rust_task *task) {\n extern \"C\" CDECL void\n task_join(rust_task *task, rust_task *join_task) {\n     // If the other task is already dying, we don't have to wait for it.\n+    join_task->lock.lock();\n     if (join_task->dead() == false) {\n         join_task->tasks_waiting_to_join.push(task);\n         task->block(join_task, \"joining local task\");\n+        join_task->lock.unlock();\n         task->yield(2);\n     }\n+    else {\n+        join_task->lock.unlock();\n+    }\n }\n \n /* Debug builtins for std.dbg. */"}, {"sha": "70afcdd9d58131580b0d3d110e41ca29e9a1d854", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4739953b84b814de3b2b80f273f6292c33e33010/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4739953b84b814de3b2b80f273f6292c33e33010/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=4739953b84b814de3b2b80f273f6292c33e33010", "patch": "@@ -118,12 +118,15 @@ void task_start_wrapper(spawn_args *a)\n     a->f(&rval, task, a->a3, a->a4);\n \n     LOG(task, task, \"task exited with value %d\", rval);\n+    \n \n     LOG(task, task, \"task ref_count: %d\", task->ref_count);\n     A(task->sched, task->ref_count >= 0,\n       \"Task ref_count should not be negative on exit!\");\n     task->die();\n+    task->lock.lock();\n     task->notify_tasks_waiting_to_join();\n+    task->lock.unlock();\n \n     task->yield(1);\n }"}]}