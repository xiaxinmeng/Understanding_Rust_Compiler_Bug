{"sha": "5b0d3adf3debde4cd21e7adb1f434580386d7265", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMGQzYWRmM2RlYmRlNGNkMjFlN2FkYjFmNDM0NTgwMzg2ZDcyNjU=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-07-09T17:31:58Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-09-02T13:56:43Z"}, "message": "std: branchless bucket distance for hashmap", "tree": {"sha": "6eab3ff9ce79556333e48c6118de24f06538aceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eab3ff9ce79556333e48c6118de24f06538aceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0d3adf3debde4cd21e7adb1f434580386d7265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0d3adf3debde4cd21e7adb1f434580386d7265", "html_url": "https://github.com/rust-lang/rust/commit/5b0d3adf3debde4cd21e7adb1f434580386d7265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0d3adf3debde4cd21e7adb1f434580386d7265/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa", "html_url": "https://github.com/rust-lang/rust/commit/dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "d949eeebea0da4c08e1382f8f998eb4c5982a0f3", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b0d3adf3debde4cd21e7adb1f434580386d7265/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0d3adf3debde4cd21e7adb1f434580386d7265/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=5b0d3adf3debde4cd21e7adb1f434580386d7265", "patch": "@@ -802,17 +802,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     fn bucket_distance(&self, index_of_elem: &table::FullIndex) -> uint {\n         // where the hash of the element that happens to reside at\n         // `index_of_elem` tried to place itself first.\n-        let first_probe_index = self.probe(&index_of_elem.hash(), 0);\n-\n         let raw_index = index_of_elem.raw_index();\n \n-        if first_probe_index <= raw_index {\n-             // probe just went forward\n-            raw_index - first_probe_index\n-        } else {\n-            // probe wrapped around the hashtable\n-            raw_index + (self.table.capacity() - first_probe_index)\n-        }\n+        (raw_index - index_of_elem.hash() as uint) & (self.table.capacity() - 1)\n     }\n \n     /// Search for a pre-hashed key."}]}