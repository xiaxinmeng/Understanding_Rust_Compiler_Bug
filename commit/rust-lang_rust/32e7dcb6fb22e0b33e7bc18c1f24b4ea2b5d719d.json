{"sha": "32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZTdkY2I2ZmIyMmUwYjMzZTdiYzE4YzFmMjRiNGVhMmI1ZDcxOWQ=", "commit": {"author": {"name": "David Renshaw", "email": "david@sandstorm.io", "date": "2017-06-29T01:24:17Z"}, "committer": {"name": "David Renshaw", "email": "david@sandstorm.io", "date": "2017-06-29T02:00:17Z"}, "message": "update for upstream changes to TyFnDef", "tree": {"sha": "3701591617beb4b0c5e4c195581c6de1f4519889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3701591617beb4b0c5e4c195581c6de1f4519889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d", "html_url": "https://github.com/rust-lang/rust/commit/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d/comments", "author": null, "committer": null, "parents": [{"sha": "695f9723d2046d73566a10660f411dfcedb16411", "url": "https://api.github.com/repos/rust-lang/rust/commits/695f9723d2046d73566a10660f411dfcedb16411", "html_url": "https://github.com/rust-lang/rust/commit/695f9723d2046d73566a10660f411dfcedb16411"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "dbad616f9196bfae3c18fa72717fc81fa6f6bc1c", "filename": "src/eval_context.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d", "patch": "@@ -771,7 +771,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     ReifyFnPointer => match self.operand_ty(operand).sty {\n-                        ty::TyFnDef(def_id, substs, _) => {\n+                        ty::TyFnDef(def_id, substs) => {\n                             let instance = resolve(self.tcx, def_id, substs);\n                             let fn_ptr = self.memory.create_fn_alloc(instance);\n                             self.write_value(Value::ByVal(PrimVal::Ptr(fn_ptr)), dest, dest_ty)?;\n@@ -1686,7 +1686,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             let main_ptr = ecx.memory.create_fn_alloc(main_instance);\n             let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n             let main_ty = main_instance.def.def_ty(ecx.tcx);\n-            let main_ptr_ty = ecx.tcx.mk_fn_ptr(main_ty.fn_sig());\n+            let main_ptr_ty = ecx.tcx.mk_fn_ptr(main_ty.fn_sig(ecx.tcx));\n             ecx.write_value(Value::ByVal(PrimVal::Ptr(main_ptr)), dest, main_ptr_ty)?;\n \n             // Second argument (argc): 0\n@@ -1830,7 +1830,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let self_ty = tcx.mk_closure_from_closure_substs(\n         closure_did, substs);\n \n-    let sig = tcx.closure_type(closure_did).subst(tcx, substs.substs);\n+    let sig = tcx.fn_sig(closure_did).subst(tcx, substs.substs);\n     let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     assert_eq!(sig.inputs().len(), 1);\n     let substs = tcx.mk_substs([\n@@ -1891,9 +1891,11 @@ pub fn resolve<'a, 'tcx>(\n     } else {\n         let item_type = def_ty(tcx, def_id, substs);\n         let def = match item_type.sty {\n-            ty::TyFnDef(_, _, f) if\n-                f.abi() == Abi::RustIntrinsic ||\n-                f.abi() == Abi::PlatformIntrinsic =>\n+            ty::TyFnDef(..) if {\n+                    let f = item_type.fn_sig(tcx);\n+                    f.abi() == Abi::RustIntrinsic ||\n+                    f.abi() == Abi::PlatformIntrinsic\n+                } =>\n             {\n                 debug!(\" => intrinsic\");\n                 ty::InstanceDef::Intrinsic(def_id)"}, {"sha": "534eb777e414583b9e9f3c66da2852fcf52e432a", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=32e7dcb6fb22e0b33e7bc18c1f24b4ea2b5d719d", "patch": "@@ -72,7 +72,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let instance_ty = instance.def.def_ty(self.tcx);\n                         let instance_ty = self.monomorphize(instance_ty, instance.substs);\n                         match instance_ty.sty {\n-                            ty::TyFnDef(_, _, real_sig) => {\n+                            ty::TyFnDef(..) => {\n+                                let real_sig = instance_ty.fn_sig(self.tcx);\n                                 let sig = self.erase_lifetimes(&sig);\n                                 let real_sig = self.erase_lifetimes(&real_sig);\n                                 if !self.check_sig_compat(sig, real_sig)? {\n@@ -83,7 +84,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         }\n                         (instance, sig)\n                     },\n-                    ty::TyFnDef(def_id, substs, sig) => (::eval_context::resolve(self.tcx, def_id, substs), sig),\n+                    ty::TyFnDef(def_id, substs) => (::eval_context::resolve(self.tcx, def_id, substs), func_ty.fn_sig(self.tcx)),\n                     _ => {\n                         let msg = format!(\"can't handle callee of type {:?}\", func_ty);\n                         return Err(EvalError::Unimplemented(msg));"}]}