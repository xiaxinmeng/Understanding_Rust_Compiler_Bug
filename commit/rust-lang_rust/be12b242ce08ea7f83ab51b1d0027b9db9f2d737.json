{"sha": "be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTJiMjQyY2UwOGVhN2Y4M2FiNTFiMWQwMDI3YjlkYjlmMmQ3Mzc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-24T11:13:28Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Fix print_miri_value for signed integers", "tree": {"sha": "86ee249857efa4053af33be9568010f64db33ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ee249857efa4053af33be9568010f64db33ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "html_url": "https://github.com/rust-lang/rust/commit/be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be12b242ce08ea7f83ab51b1d0027b9db9f2d737/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd", "html_url": "https://github.com/rust-lang/rust/commit/97a032ebb4f87bb5a0a7478528d4dfb6d2c63ddd"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "2013766aa39ceafc472f2a46432dbffb203fbbf0", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be12b242ce08ea7f83ab51b1d0027b9db9f2d737/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12b242ce08ea7f83ab51b1d0027b9db9f2d737/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "patch": "@@ -35,6 +35,7 @@ use std::slice;\n use std::vec::IntoIter;\n use std::{iter, mem, option, u32};\n use syntax::ast::{self, Name};\n+use syntax::attr::SignedInt;\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -2228,7 +2229,7 @@ pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ty::Const) -> fmt::Resul\n     }\n }\n \n-pub fn print_miri_value<W: Write>(value: Value, ty: Ty, f: &mut W) -> fmt::Result {\n+pub fn print_miri_value<'tcx, W: Write>(value: Value, ty: Ty<'tcx>, f: &mut W) -> fmt::Result {\n     use ty::TypeVariants::*;\n     // print some primitives\n     if let Value::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits { bits, .. })) = value {"}, {"sha": "c666469f3574d5e3a368cb71e42147565fa6bb8e", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be12b242ce08ea7f83ab51b1d0027b9db9f2d737/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be12b242ce08ea7f83ab51b1d0027b9db9f2d737/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "patch": "@@ -668,19 +668,14 @@ impl<'tcx> IntRange<'tcx> {\n             ty::TyInt(_) => {\n                 // FIXME(49937): refactor these bit manipulations into interpret.\n                 let bits = tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n-                                 .unwrap().size.bits() as u128;\n+                              .unwrap().size.bits() as u128;\n                 let min = 1u128 << (bits - 1);\n                 let mask = !0u128 >> (128 - bits);\n                 if encode {\n                     let offset = |x: u128| x.wrapping_sub(min) & mask;\n                     (offset(lo), offset(hi))\n                 } else {\n-                    let offset = |x: u128| {\n-                        // FIXME: this shouldn't be necessary once `print_miri_value`\n-                        // sign-extends `TyInt`.\n-                        interpret::sign_extend(tcx, x.wrapping_add(min) & mask, ty)\n-                                  .expect(\"layout error for TyInt\")\n-                    };\n+                    let offset = |x: u128| x.wrapping_add(min) & mask;\n                     (offset(lo), offset(hi))\n                 }\n             }"}]}