{"sha": "6bea76f175f1a565320a1a93a174fb80567dda7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZWE3NmYxNzVmMWE1NjUzMjBhMWE5M2ExNzRmYjgwNTY3ZGRhN2M=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-09-29T15:04:40Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-09T18:26:06Z"}, "message": "Simplify included import items handling", "tree": {"sha": "61c17d0fc0f183d73156b71e76731d652face492", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c17d0fc0f183d73156b71e76731d652face492"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bea76f175f1a565320a1a93a174fb80567dda7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bea76f175f1a565320a1a93a174fb80567dda7c", "html_url": "https://github.com/rust-lang/rust/commit/6bea76f175f1a565320a1a93a174fb80567dda7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bea76f175f1a565320a1a93a174fb80567dda7c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfdfc66f73b3e60ea2024ce090ae036b9f8200cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfdfc66f73b3e60ea2024ce090ae036b9f8200cf", "html_url": "https://github.com/rust-lang/rust/commit/bfdfc66f73b3e60ea2024ce090ae036b9f8200cf"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "79ff7fc62d53e20f3984813c2a1a1c45bc371024", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6bea76f175f1a565320a1a93a174fb80567dda7c", "patch": "@@ -498,7 +498,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         visibility: clean::Public,\n                         stability: None,\n                         deprecation: None,\n-                        inner: clean::ImportItem(clean::Import::Simple(\n+                        inner: clean::ImportItem(clean::Import::new_simple(\n                             item.ident.to_string(),\n                             clean::ImportSource {\n                                 path: clean::Path {\n@@ -514,7 +514,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                                 },\n                                 did: None,\n                             },\n-                            false,\n+                            true,\n                         )),\n                     });\n                 } else if let Some(i) ="}, {"sha": "721e3902cf51acfadaebeb3e84bcc4093116ad54", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6bea76f175f1a565320a1a93a174fb80567dda7c", "patch": "@@ -2269,12 +2269,12 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         visibility: self.vis.clean(cx),\n                         stability: None,\n                         deprecation: None,\n-                        inner: ImportItem(Import::Glob(resolve_use_source(cx, path), false)),\n+                        inner: ImportItem(Import::new_glob(resolve_use_source(cx, path), false)),\n                     });\n                     return items;\n                 }\n             }\n-            Import::Glob(resolve_use_source(cx, path), true)\n+            Import::new_glob(resolve_use_source(cx, path), true)\n         } else {\n             let name = self.name;\n             if !please_inline {\n@@ -2297,9 +2297,6 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                     Some(self.attrs),\n                     &mut visited,\n                 ) {\n-                    // In case this is a macro, we don't want to show the reexport, only the macro\n-                    // itself.\n-                    let is_macro = matches!(path.res, Res::Def(DefKind::Macro(_), _));\n                     items.push(Item {\n                         name: None,\n                         attrs: self.attrs.clean(cx),\n@@ -2308,16 +2305,16 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         visibility: self.vis.clean(cx),\n                         stability: None,\n                         deprecation: None,\n-                        inner: ImportItem(Import::Simple(\n+                        inner: ImportItem(Import::new_simple(\n                             self.name.clean(cx),\n                             resolve_use_source(cx, path),\n-                            is_macro,\n+                            false,\n                         )),\n                     });\n                     return items;\n                 }\n             }\n-            Import::Simple(name.clean(cx), resolve_use_source(cx, path), false)\n+            Import::new_simple(name.clean(cx), resolve_use_source(cx, path), true)\n         };\n \n         vec![Item {"}, {"sha": "903f44a0f93dff198264a7580dbcedfc63f076bf", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6bea76f175f1a565320a1a93a174fb80567dda7c", "patch": "@@ -177,6 +177,7 @@ impl Item {\n     pub fn is_stripped(&self) -> bool {\n         match self.inner {\n             StrippedItem(..) => true,\n+            ImportItem(ref i) => !i.should_be_displayed,\n             _ => false,\n         }\n     }\n@@ -1653,24 +1654,30 @@ pub struct Impl {\n }\n \n #[derive(Clone, Debug)]\n-pub enum Import {\n-    // use source as str;\n-    // The bool indicates whether it imports a macro or not.\n-    Simple(String, ImportSource, bool),\n-    // use source::*;\n-    // The bool indicates whether this is from an import.\n-    Glob(ImportSource, bool),\n+pub struct Import {\n+    pub kind: ImportKind,\n+    pub source: ImportSource,\n+    pub should_be_displayed: bool,\n }\n \n impl Import {\n-    pub fn should_be_displayed(&self) -> bool {\n-        match *self {\n-            Self::Simple(_, _, is_macro) => !is_macro,\n-            Self::Glob(_, is_from_import) => is_from_import,\n-        }\n+    pub fn new_simple(name: String, source: ImportSource, should_be_displayed: bool) -> Self {\n+        Self { kind: ImportKind::Simple(name), source, should_be_displayed }\n+    }\n+\n+    pub fn new_glob(source: ImportSource, should_be_displayed: bool) -> Self {\n+        Self { kind: ImportKind::Glob, source, should_be_displayed }\n     }\n }\n \n+#[derive(Clone, Debug)]\n+pub enum ImportKind {\n+    // use source as str;\n+    Simple(String),\n+    // use source::*;\n+    Glob,\n+}\n+\n #[derive(Clone, Debug)]\n pub struct ImportSource {\n     pub path: Path,"}, {"sha": "d18282d6e675d82bfbd2d738528956c499ce149d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6bea76f175f1a565320a1a93a174fb80567dda7c", "patch": "@@ -1149,19 +1149,19 @@ impl PrintWithSpace for hir::Mutability {\n \n impl clean::Import {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n-        display_fn(move |f| match *self {\n-            clean::Import::Simple(ref name, ref src, _) => {\n-                if *name == src.path.last_name() {\n-                    write!(f, \"use {};\", src.print())\n+        display_fn(move |f| match self.kind {\n+            clean::ImportKind::Simple(ref name) => {\n+                if *name == self.source.path.last_name() {\n+                    write!(f, \"use {};\", self.source.print())\n                 } else {\n-                    write!(f, \"use {} as {};\", src.print(), *name)\n+                    write!(f, \"use {} as {};\", self.source.print(), *name)\n                 }\n             }\n-            clean::Import::Glob(ref src, _) => {\n-                if src.path.segments.is_empty() {\n+            clean::ImportKind::Glob => {\n+                if self.source.path.segments.is_empty() {\n                     write!(f, \"use *;\")\n                 } else {\n-                    write!(f, \"use {}::*;\", src.print())\n+                    write!(f, \"use {}::*;\", self.source.print())\n                 }\n             }\n         })"}, {"sha": "76334f0213d158d13f39e66b7672b4f898013f2d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6bea76f175f1a565320a1a93a174fb80567dda7c", "patch": "@@ -2074,14 +2074,12 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n             }\n \n             clean::ImportItem(ref import) => {\n-                if import.should_be_displayed() {\n-                    write!(\n-                        w,\n-                        \"<tr><td><code>{}{}</code></td></tr>\",\n-                        myitem.visibility.print_with_space(),\n-                        import.print()\n-                    );\n-                }\n+                write!(\n+                    w,\n+                    \"<tr><td><code>{}{}</code></td></tr>\",\n+                    myitem.visibility.print_with_space(),\n+                    import.print()\n+                );\n             }\n \n             _ => {\n@@ -4440,8 +4438,9 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     let mut sidebar = String::new();\n \n-    if items.iter().any(|it| it.type_() == ItemType::ExternCrate || it.type_() == ItemType::Import)\n-    {\n+    if items.iter().any(|it| {\n+        it.type_() == ItemType::ExternCrate || (it.type_() == ItemType::Import && !it.is_stripped())\n+    }) {\n         sidebar.push_str(&format!(\n             \"<li><a href=\\\"#{id}\\\">{name}</a></li>\",\n             id = \"reexports\","}, {"sha": "5b5624298a41a57778437f59a84a60d9dd716f8d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6bea76f175f1a565320a1a93a174fb80567dda7c", "patch": "@@ -758,7 +758,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 debug!(\"ignoring extern crate item {:?}\", item.def_id);\n                 return self.fold_item_recur(item);\n             }\n-            ImportItem(Import::Simple(ref name, ..)) => Some(name.clone()),\n+            ImportItem(Import { kind: ImportKind::Simple(ref name, ..), .. }) => Some(name.clone()),\n             MacroItem(..) => None,\n             _ => item.name.clone(),\n         };"}, {"sha": "9ecf1abbea9285090afd16ff6c29810f442c5b16", "filename": "src/test/rustdoc/reexport-check.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Ftest%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bea76f175f1a565320a1a93a174fb80567dda7c/src%2Ftest%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexport-check.rs?ref=6bea76f175f1a565320a1a93a174fb80567dda7c", "patch": "@@ -0,0 +1,11 @@\n+#![crate_name = \"foo\"]\n+\n+// @!has 'foo/index.html' '//code' 'pub use self::i32;'\n+// @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'i32'\n+// @has 'foo/i32/index.html'\n+pub use std::i32;\n+// @!has 'foo/index.html' '//code' 'pub use self::string::String;'\n+// @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'String'\n+pub use std::string::String;\n+// @!has 'foo/index.html' '//code' 'pub use self::string::*;'\n+pub use std::string::*;"}]}