{"sha": "8cdd75ca2965a5618c763eb751cf2dec5b4a66c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZGQ3NWNhMjk2NWE1NjE4Yzc2M2ViNzUxY2YyZGVjNWI0YTY2YzI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-10T09:50:06Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-10T20:21:40Z"}, "message": "Clean-up CONTRIBUTING.md", "tree": {"sha": "73d84711fe4c272986aaab7afc3ab51bf59c7e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d84711fe4c272986aaab7afc3ab51bf59c7e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl5n9tQACgkQsJhshcDi\n2qFvxQ//ZVG5kJEoQmnGIeKKJK9+Sif2FL0T/Vi2suwHdXm11MemSykjdPSRL6CP\nufAdhH9wUd/FOqzLNdYibdeyzhPTums4g8rSRNKQBLyxyrECXt7Zvbsfu1I3qtFY\nb5UzuRWRT+47BzY1KsTdYqX+GE94U5mPi9akji3qSLfAzuFbdw5/Y1aitBr1tSPH\nEbOy3rwzKevwlEqNhGjPQ4XLZy0cGRPfgfd6Dt+qmtFHCNoAHxzeOy3W7J38Frqq\nKiYjGrtzJqAPD7fGqzkRX9f6JVJzgQQesjTSvWoNJLN7Dbhjc3o2BULju22X+xbW\nH9pWBrCn3jniJI/z6zVrDUjVfJjmxqYfOv6wXugilXDGOq7rMI18yC8dV0/ajsBI\nBkckOl6zzatzG/r6amCM2OAHEYUf6AzNonZ9MY0XhnYAdr95GO6KWa1lTMs0RpTL\ndX1T6FmnkvSyw7Qex6aulqTR+TsFWHZFlYwRLoRGRJkPKNhFfq5AmnNLDxVh56de\nDMIjbWv5JailnxRc6TjazHT5KaBE805ddTm8pM+Jmw4Gh2yqDUbO1RC8mj8CxtJT\nxbowtdkquOrgRAGQuIKFa4JJesdHCclnDJzQbxVjDIfqWClaW4p+XKTAqnQZjhOs\nFZkjkKXSETnS3LP/yAyP3vvEkmOECZ2NaznxsPF5mTWOsE9MjMo=\n=4X6q\n-----END PGP SIGNATURE-----", "payload": "tree 73d84711fe4c272986aaab7afc3ab51bf59c7e35\nparent 187bbf0e7bbc1c7da5902cd1a89f286aa063c5ff\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1583833806 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1583871700 +0900\n\nClean-up CONTRIBUTING.md\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2", "html_url": "https://github.com/rust-lang/rust/commit/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187bbf0e7bbc1c7da5902cd1a89f286aa063c5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/187bbf0e7bbc1c7da5902cd1a89f286aa063c5ff", "html_url": "https://github.com/rust-lang/rust/commit/187bbf0e7bbc1c7da5902cd1a89f286aa063c5ff"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "23e371774785e3bdec88a139d8689c9a4b01d6dc", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/8cdd75ca2965a5618c763eb751cf2dec5b4a66c2/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=8cdd75ca2965a5618c763eb751cf2dec5b4a66c2", "patch": "@@ -8,8 +8,7 @@ something. We appreciate any sort of contributions, and don't want a wall of rul\n \n Clippy welcomes contributions from everyone. There are many ways to contribute to Clippy and the following document\n explains how you can contribute and how to get started.  If you have any questions about contributing or need help with\n-anything, feel free to ask questions on issues or visit the `#clippy` IRC channel on `irc.mozilla.org` or meet us in\n-`#clippy` on [Discord](https://discord.gg/rust-lang).\n+anything, feel free to ask questions on issues or visit the `#clippy` on [Discord](https://discord.gg/rust-lang).\n \n All contributors are expected to follow the [Rust Code of Conduct](http://www.rust-lang.org/conduct.html).\n \n@@ -55,8 +54,7 @@ and resolved paths.\n [`T-AST`](https://github.com/rust-lang/rust-clippy/labels/T-AST) issues will generally need you to match against a\n predefined syntax structure. To figure out how this syntax structure is encoded in the AST, it is recommended to run\n `rustc -Z ast-json` on an example of the structure and compare with the [nodes in the AST\n-docs](https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast). Usually the lint will end up to be a nested series of\n-matches and ifs, [like\n+docs]. Usually the lint will end up to be a nested series of matches and ifs, [like\n so](https://github.com/rust-lang/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34).\n \n [`E-medium`](https://github.com/rust-lang/rust-clippy/labels/E-medium) issues are generally\n@@ -69,6 +67,8 @@ be more involved and require verifying types. The\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\n an AST expression). `match_def_path()` in Clippy's `utils` module can also be useful.\n \n+[nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n+\n ## Writing code\n \n Have a look at the [docs for writing lints](doc/adding_lints.md) for more details. [Llogiq's blog post on\n@@ -82,11 +82,8 @@ quick read.\n \n ## How Clippy works\n \n-Clippy is a [rustc compiler plugin][compiler_plugin]. The main entry point is at [`src/lib.rs`][main_entry]. In there,\n-the lint registration is delegated to the [`clippy_lints`][lint_crate] crate.\n-\n-[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers them with the rustc\n-plugin registry. For example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n+[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers in the [`LintStore`].\n+For example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n \n ```rust\n // ./clippy_lints/src/lib.rs\n@@ -95,25 +92,24 @@ plugin registry. For example, the [`else_if_without_else`][else_if_without_else]\n pub mod else_if_without_else;\n // ...\n \n-pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry) {\n+pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     // ...\n-    reg.register_early_lint_pass(box else_if_without_else::ElseIfWithoutElse);\n+    store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n     // ...\n \n-    reg.register_lint_group(\"clippy::restriction\", vec![\n+    store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         // ...\n-        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+        LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n         // ...\n     ]);\n }\n ```\n \n-The [`plugin::PluginRegistry`][plugin_registry] provides two methods to register lints:\n-[register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].  Both take an object\n+The [`rustc_lint::LintStore`][`LintStore`] provides two methods to register lints:\n+[register_early_pass][reg_early_pass] and [register_late_pass][reg_late_pass]. Both take an object\n that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in\n every single lint. It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `cargo dev\n-update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to\n-save you some time.\n+update_lints`. When you are writing your own lint, you can use that script to save you some time.\n \n ```rust\n // ./clippy_lints/src/else_if_without_else.rs\n@@ -135,18 +131,24 @@ The difference between `EarlyLintPass` and `LateLintPass` is that the methods of\n AST information. The methods of the `LateLintPass` trait are executed after type checking and contain type information\n via the `LateContext` parameter.\n \n-That's why the `else_if_without_else` example uses the `register_early_lint_pass` function. Because the [actual lint\n+That's why the `else_if_without_else` example uses the `register_early_pass` function. Because the [actual lint\n logic][else_if_without_else] does not depend on any type information.\n \n+See also [the adding lints doc].\n+\n+[the adding lints doc]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n+[`LintStore`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html\n+\n ## Fixing build failures caused by Rust\n \n Clippy will sometimes fail to build from source because building it depends on unstable internal Rust features. Most of\n the times we have to adapt to the changes and only very rarely there's an actual bug in Rust. Fixing build failures\n caused by Rust updates, can be a good way to learn about Rust internals.\n \n In order to find out why Clippy does not work properly with a new Rust commit, you can use the [rust-toolstate commit\n-history][toolstate_commit_history].  You will then have to look for the last commit that contains `test-pass ->\n-build-fail` or `test-pass` -> `test-fail` for the `clippy-driver` component. [Here][toolstate_commit] is an example.\n+history][toolstate_commit_history].  You will then have to look for the last commit that contains\n+`test-pass -> build-fail` or `test-pass` -> `test-fail` for the `clippy-driver` component.\n+[Here][toolstate_commit] is an example.\n \n The commit message contains a link to the PR. The PRs are usually small enough to discover the breaking API change and\n if they are bigger, they likely include some discussion that may help you to fix Clippy.\n@@ -158,14 +160,8 @@ If you decide to make Clippy work again with a Rust commit that breaks it,\n you probably want to install the latest Rust from master locally and run Clippy\n using that version of Rust.\n \n-You can use [rustup-toolchain-install-master][rtim] to do that:\n-\n-```bash\n-cargo install rustup-toolchain-install-master\n-rustup-toolchain-install-master --force -n master -c rustc-dev\n-rustup override set master\n-cargo test\n-```\n+You can set up the master toolchain by running `./setup-toolchain.sh`. That script will install\n+[rustup-toolchain-install-master][rtim] and master toolchain, then run `rustup override set master`.\n \n After fixing the build failure on this repository, we can submit a pull request\n to [`rust-lang/rust`] to fix the toolstate.\n@@ -206,39 +202,34 @@ You can find the Clippy bors queue [here][homu_queue].\n If you have @bors permissions, you can find an overview of the available\n commands [here][homu_instructions].\n \n-\n ## Contributions\n \n Contributions to Clippy should be made in the form of GitHub pull requests. Each pull request will\n be reviewed by a core contributor (someone with permission to land patches) and either landed in the\n main tree or given feedback for changes that would be required.\n \n-All code in this repository is under the [Apache-2.0](http://www.apache.org/licenses/LICENSE-2.0>)\n-or the [MIT](http://opensource.org/licenses/MIT) license.\n+All code in this repository is under the [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)\n+or the [MIT](https://opensource.org/licenses/MIT) license.\n \n <!-- adapted from https://github.com/servo/servo/blob/master/CONTRIBUTING.md -->\n \n-[main_entry]: https://github.com/rust-lang/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/src/lib.rs#L14\n-[lint_crate]: https://github.com/rust-lang/rust-clippy/tree/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src\n-[lint_crate_entry]: https://github.com/rust-lang/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src/lib.rs\n-[else_if_without_else]: https://github.com/rust-lang/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src/else_if_without_else.rs\n-[compiler_plugin]: https://doc.rust-lang.org/unstable-book/language-features/plugin.html#lint-plugins\n-[plugin_registry]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin_impl/registry/struct.Registry.html\n-[reg_early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin_impl/registry/struct.Registry.html#method.register_early_lint_pass\n-[reg_late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin_impl/registry/struct.Registry.html#method.register_late_lint_pass\n-[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html\n-[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.LateLintPass.html\n+[lint_crate_entry]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n+[else_if_without_else]: https://github.com/rust-lang/rust-clippy/blob/4253aa7137cb7378acc96133c787e49a345c2b3c/clippy_lints/src/else_if_without_else.rs\n+[reg_early_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_early_pass\n+[reg_late_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_late_pass\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n [toolstate_commit_history]: https://github.com/rust-lang-nursery/rust-toolstate/commits/master\n-[toolstate_commit]: https://github.com/rust-lang-nursery/rust-toolstate/commit/6ce0459f6bfa7c528ae1886492a3e0b5ef0ee547\n+[toolstate_commit]: https://github.com/rust-lang-nursery/rust-toolstate/commit/aad74d8294e198a7cf8ac81a91aebb7f3bbcf727\n [rtim]: https://github.com/kennytm/rustup-toolchain-install-master\n-[rustup_component_history]: https://mexus.github.io/rustup-components-history\n+[rustup_component_history]: https://rust-lang.github.io/rustup-components-history\n [clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n [rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n [rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n [triage]: https://forge.rust-lang.org/triage-procedure.html\n [l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n [l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n-[homu]: https://github.com/servo/homu\n+[homu]: https://github.com/rust-lang/homu\n [homu_instructions]: https://buildbot2.rust-lang.org/homu/\n [homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n [`rust-lang/rust`]: https://github.com/rust-lang/rust"}]}