{"sha": "93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZmZlZDRjMTYzNmYyNTdlNjhmMDdjNmNkNmM1ZjJiYjM4Yzc0ZTU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-22T07:29:01Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-22T07:29:01Z"}, "message": "Fix unboxing in alias pass\n\nThe alias checker would only deref once for autoderef, and only deref\nboxes. It should now do the right thing. Closes #725.", "tree": {"sha": "35335c12c682b6c4b02c6bcbe68bee95c9a37748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35335c12c682b6c4b02c6bcbe68bee95c9a37748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5", "html_url": "https://github.com/rust-lang/rust/commit/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1348a383c39a083424280ab4f4d20b622e1769a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1348a383c39a083424280ab4f4d20b622e1769a6", "html_url": "https://github.com/rust-lang/rust/commit/1348a383c39a083424280ab4f4d20b622e1769a6"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "fac5db76e58cb2a62ed759bab15641f2bbbd3be2", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5", "patch": "@@ -521,20 +521,32 @@ type deref = @rec(bool mut, deref_t kind, ty::t outer_t);\n // ds=[field(baz),field(bar)])\n fn expr_root(&ctx cx, @ast::expr ex, bool autoderef) ->\n    rec(@ast::expr ex, @deref[] ds) {\n-    fn maybe_auto_unbox(&ctx cx, &ty::t t) ->\n-       rec(ty::t t, option::t[deref] d) {\n-        alt (ty::struct(cx.tcx, t)) {\n-            case (ty::ty_box(?mt)) {\n-                ret rec(t=mt.ty,\n-                        d=some(@rec(mut=mt.mut != ast::imm,\n-                                    kind=unbox,\n-                                    outer_t=t)));\n+    fn maybe_auto_unbox(&ctx cx, ty::t t) -> rec(ty::t t, deref[] ds) {\n+        auto ds = ~[];\n+        while (true) {\n+            alt (ty::struct(cx.tcx, t)) {\n+              ty::ty_box(?mt) {\n+                ds += ~[@rec(mut=mt.mut != ast::imm, kind=unbox, outer_t=t)];\n+                t = mt.ty;\n+              }\n+              ty::ty_res(_, ?inner, ?tps) {\n+                ds += ~[@rec(mut=false, kind=unbox, outer_t=t)];\n+                t = ty::substitute_type_params(cx.tcx, tps, inner);\n+              }\n+              ty::ty_tag(?did, ?tps) {\n+                auto variants = ty::tag_variants(cx.tcx, did);\n+                if (ivec::len(variants) != 1u ||\n+                    ivec::len(variants.(0).args) != 1u) {\n+                    break;\n+                }\n+                ds += ~[@rec(mut=false, kind=unbox, outer_t=t)];\n+                t = ty::substitute_type_params(cx.tcx, tps,\n+                                               variants.(0).args.(0));\n+              }\n+              _ { break; }\n             }\n-            case (_) { ret rec(t=t, d=none); }\n         }\n-    }\n-    fn maybe_push_auto_unbox(&option::t[deref] d, &mutable deref[] ds) {\n-        alt (d) { case (some(?d)) { ds += ~[d]; } case (none) { } }\n+        ret rec(t=t, ds=ds);\n     }\n     let deref[] ds = ~[];\n     while (true) {\n@@ -559,7 +571,7 @@ fn expr_root(&ctx cx, @ast::expr ex, bool autoderef) ->\n                     case (ty::ty_obj(_)) { }\n                 }\n                 ds += ~[@rec(mut=mut, kind=field, outer_t=auto_unbox.t)];\n-                maybe_push_auto_unbox(auto_unbox.d, ds);\n+                ds += auto_unbox.ds;\n                 ex = base;\n             }\n             case (ast::expr_index(?base, _)) {\n@@ -577,7 +589,7 @@ fn expr_root(&ctx cx, @ast::expr ex, bool autoderef) ->\n                                     outer_t=auto_unbox.t)];\n                     }\n                 }\n-                maybe_push_auto_unbox(auto_unbox.d, ds);\n+                ds += auto_unbox.ds;\n                 ex = base;\n             }\n             case (ast::expr_unary(?op, ?base)) {\n@@ -599,7 +611,7 @@ fn expr_root(&ctx cx, @ast::expr ex, bool autoderef) ->\n     }\n     if (autoderef) {\n         auto auto_unbox = maybe_auto_unbox(cx, ty::expr_ty(cx.tcx, ex));\n-        maybe_push_auto_unbox(auto_unbox.d, ds);\n+        ds += auto_unbox.ds;\n     }\n     ret rec(ex=ex, ds=@ds);\n }"}, {"sha": "19f3ed32da6fe924240189bda1e2c529b1f44cd0", "filename": "src/test/run-pass/double-unbox.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs?ref=93ffed4c1636f257e68f07c6cd6c5f2bb38c74e5", "patch": "@@ -0,0 +1,8 @@\n+type quux = rec(int bar);\n+\n+fn g(&int i) { }\n+fn f(@@quux foo) {\n+    g(foo.bar);\n+}\n+\n+fn main() {}"}]}