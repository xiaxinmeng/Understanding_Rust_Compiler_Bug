{"sha": "ccfbfb80975ff1233f664a50163cb5f983aab916", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZmJmYjgwOTc1ZmYxMjMzZjY2NGE1MDE2M2NiNWY5ODNhYWI5MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-09T12:05:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-09T12:05:41Z"}, "message": "Auto merge of #3860 - phansch:refactor_out_opt_def_id, r=flip1995\n\nRefactor: Remove utils::opt_def_id\n\nThis removes some indirection. Probably this method was uplifted to\nrustc at some point?", "tree": {"sha": "6f31f98bc004823ac8d9141629767c7ed6ffb09e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f31f98bc004823ac8d9141629767c7ed6ffb09e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccfbfb80975ff1233f664a50163cb5f983aab916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfbfb80975ff1233f664a50163cb5f983aab916", "html_url": "https://github.com/rust-lang/rust/commit/ccfbfb80975ff1233f664a50163cb5f983aab916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccfbfb80975ff1233f664a50163cb5f983aab916/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8213d252ae2a7eb28615937d6267a132e95338fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8213d252ae2a7eb28615937d6267a132e95338fb", "html_url": "https://github.com/rust-lang/rust/commit/8213d252ae2a7eb28615937d6267a132e95338fb"}, {"sha": "9d97ed6faa84cde61ea18208a7a3818cc80e1c8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d97ed6faa84cde61ea18208a7a3818cc80e1c8b", "html_url": "https://github.com/rust-lang/rust/commit/9d97ed6faa84cde61ea18208a7a3818cc80e1c8b"}], "stats": {"total": 88, "additions": 41, "deletions": 47}, "files": [{"sha": "ab3b7e471ac04cb0cfd5ff7f345c677e6aa2edb1", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -2,8 +2,8 @@\n \n use crate::reexport::*;\n use crate::utils::{\n-    in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, without_block_comments,\n+    in_macro, last_line_of_span, match_def_path, paths, snippet_opt, span_lint, span_lint_and_sugg, span_lint_and_then,\n+    without_block_comments,\n };\n use if_chain::if_chain;\n use rustc::hir::*;\n@@ -396,7 +396,7 @@ fn is_relevant_expr(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>, expr\n         ExprKind::Ret(None) | ExprKind::Break(_, None) => false,\n         ExprKind::Call(path_expr, _) => {\n             if let ExprKind::Path(qpath) = &path_expr.node {\n-                if let Some(fun_id) = opt_def_id(tables.qpath_def(qpath, path_expr.hir_id)) {\n+                if let Some(fun_id) = tables.qpath_def(qpath, path_expr.hir_id).opt_def_id() {\n                     !match_def_path(tcx, fun_id, &paths::BEGIN_PANIC)\n                 } else {\n                     true"}, {"sha": "247dff7560999113da19591b5586a5caa5803bdc", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -5,7 +5,7 @@ use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n \n-use crate::utils::{any_parent_is_automatically_derived, match_def_path, opt_def_id, paths, span_lint_and_sugg};\n+use crate::utils::{any_parent_is_automatically_derived, match_def_path, paths, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for literal calls to `Default::default()`.\n@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n             if let ExprKind::Call(ref path, ..) = expr.node;\n             if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n             if let ExprKind::Path(ref qpath) = path.node;\n-            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n+            if let Some(def_id) = cx.tables.qpath_def(qpath, path.hir_id).opt_def_id();\n             if match_def_path(cx.tcx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n             then {\n                 match qpath {"}, {"sha": "b880e28fc647d2a573ebcb7c57f3fbc4c2a5f51b", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_def_path, opt_def_id, paths, span_note_and_lint};\n+use crate::utils::{is_copy, match_def_path, paths, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let ExprKind::Call(ref path, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath) = path.node;\n             if args.len() == 1;\n-            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n+            if let Some(def_id) = cx.tables.qpath_def(qpath, path.hir_id).opt_def_id();\n             then {\n                 let lint;\n                 let msg;"}, {"sha": "64ba3efedc5e2543b4abb6eec9cd7c11a6433055", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_expn_of, match_def_path, opt_def_id, resolve_node, span_lint, span_lint_and_sugg};\n+use crate::utils::{is_expn_of, match_def_path, resolve_node, span_lint, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -53,7 +53,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let ExprKind::Call(ref dest_fun, _) = write_args[0].node;\n             if let ExprKind::Path(ref qpath) = dest_fun.node;\n             if let Some(dest_fun_id) =\n-                opt_def_id(resolve_node(cx, qpath, dest_fun.hir_id));\n+                resolve_node(cx, qpath, dest_fun.hir_id).opt_def_id();\n             if let Some(dest_name) = if match_def_path(cx.tcx, dest_fun_id, &[\"std\", \"io\", \"stdio\", \"stdout\"]) {\n                 Some(\"stdout\")\n             } else if match_def_path(cx.tcx, dest_fun_id, &[\"std\", \"io\", \"stdio\", \"stderr\"]) {"}, {"sha": "c59a5fc20a678f3ed3287ec5f26ca058c35868c7", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n-use crate::utils::{is_expn_of, match_def_path, method_chain_args, opt_def_id, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{is_expn_of, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -71,7 +71,7 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n             if_chain! {\n                 if let ExprKind::Call(ref func_expr, _) = expr.node;\n                 if let ExprKind::Path(QPath::Resolved(_, ref path)) = func_expr.node;\n-                if let Some(path_def_id) = opt_def_id(path.def);\n+                if let Some(path_def_id) = path.def.opt_def_id();\n                 if match_def_path(self.tcx, path_def_id, &BEGIN_PANIC) ||\n                     match_def_path(self.tcx, path_def_id, &BEGIN_PANIC_FMT);\n                 if is_expn_of(expr.span, \"unreachable\").is_none();"}, {"sha": "02a47d65421091c43a854bdbcf52a2e14c7a9f53", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::paths;\n use crate::utils::{\n-    in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet,\n-    span_lint_and_then, walk_ptrs_ty,\n+    in_macro, is_expn_of, last_path_segment, match_def_path, match_type, resolve_node, snippet, span_lint_and_then,\n+    walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::hir::*;\n@@ -58,7 +58,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 ExprKind::Call(ref fun, ref args) => {\n                     if_chain! {\n                         if let ExprKind::Path(ref qpath) = fun.node;\n-                        if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id));\n+                        if let Some(fun_def_id) = resolve_node(cx, qpath, fun.hir_id).opt_def_id();\n                         let new_v1 = match_def_path(cx.tcx, fun_def_id, &paths::FMT_ARGUMENTS_NEWV1);\n                         let new_v1_fmt = match_def_path(\n                             cx.tcx,\n@@ -159,7 +159,7 @@ fn get_single_string_arg<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option\n         if let ExprKind::Call(_, ref args) = exprs[0].node;\n         if args.len() == 2;\n         if let ExprKind::Path(ref qpath) = args[1].node;\n-        if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, args[1].hir_id));\n+        if let Some(fun_def_id) = resolve_node(cx, qpath, args[1].hir_id).opt_def_id();\n         if match_def_path(cx.tcx, fun_def_id, &paths::DISPLAY_FMT_METHOD);\n         then {\n             let ty = walk_ptrs_ty(cx.tables.pat_ty(&pat[0]));"}, {"sha": "7391f0a5208eba617164a51bac329353315d7a25", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n     in_macro, match_def_path, match_trait_method, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then,\n };\n-use crate::utils::{opt_def_id, paths, resolve_node};\n+use crate::utils::{paths, resolve_node};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n@@ -98,7 +98,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n \n             ExprKind::Call(ref path, ref args) => {\n                 if let ExprKind::Path(ref qpath) = path.node {\n-                    if let Some(def_id) = opt_def_id(resolve_node(cx, qpath, path.hir_id)) {\n+                    if let Some(def_id) = resolve_node(cx, qpath, path.hir_id).opt_def_id() {\n                         if match_def_path(cx.tcx, def_id, &paths::FROM_FROM[..]) {\n                             let a = cx.tables.expr_ty(e);\n                             let b = cx.tables.expr_ty(&args[0]);"}, {"sha": "721db396fff6314fced0a0992f2835167aa0b1f5", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, opt_def_id, paths, span_help_and_lint};\n+use crate::utils::{match_def_path, paths, span_help_and_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n             if let ExprKind::Path(ref qpath) = path.node;\n             if args.len() == 0;\n             if let ty::Ref(..) = cx.tables.expr_ty(expr).sty;\n-            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n+            if let Some(def_id) = cx.tables.qpath_def(qpath, path.hir_id).opt_def_id();\n             then {\n                 let msg = if match_def_path(cx.tcx, def_id, &paths::MEM_ZEROED) |\n                              match_def_path(cx.tcx, def_id, &paths::INIT)"}, {"sha": "0eb42dbaaf99757d8ce6ad4e1dfc73e6893add06", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, opt_def_id, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n+use crate::utils::{match_def_path, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n             if let ExprKind::Call(ref func, ref func_args) = expr.node;\n             // is `mem::discriminant`\n             if let ExprKind::Path(ref func_qpath) = func.node;\n-            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(func_qpath, func.hir_id));\n+            if let Some(def_id) = cx.tables.qpath_def(func_qpath, func.hir_id).opt_def_id();\n             if match_def_path(cx.tcx, def_id, &paths::MEM_DISCRIMINANT);\n             // type is non-enum\n             let ty_param = cx.tables.node_substs(func.hir_id).type_at(0);"}, {"sha": "82070063b0460877761ab7d5c40c2b0cdac017f7", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n+use crate::utils::{match_def_path, paths, span_lint};\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n@@ -37,7 +37,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {\n-                if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path_expr.hir_id)) {\n+                if let Some(def_id) = cx.tables.qpath_def(qpath, path_expr.hir_id).opt_def_id() {\n                     if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n                         let forgot_ty = cx.tables.expr_ty(&args[0]);\n "}, {"sha": "57b05ab108cb780e04888adf23f2895a08797e7b", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, match_qpath, opt_def_id, paths, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{match_def_path, match_qpath, paths, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -51,7 +51,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n             if let ExprKind::Call(ref func, ref func_args) = expr.node;\n             if func_args.len() == 2;\n             if let ExprKind::Path(ref func_qpath) = func.node;\n-            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(func_qpath, func.hir_id));\n+            if let Some(def_id) = cx.tables.qpath_def(func_qpath, func.hir_id).opt_def_id();\n             if match_def_path(cx.tcx, def_id, &paths::MEM_REPLACE);\n \n             // Check that second argument is `Option::None`"}, {"sha": "8633458626a17e7517cfa08343859f522a7ccbb2", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n+use crate::utils::{match_def_path, paths, span_lint};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n@@ -72,7 +72,7 @@ enum MinMax {\n fn min_max<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<(MinMax, Constant, &'a Expr)> {\n     if let ExprKind::Call(ref path, ref args) = expr.node {\n         if let ExprKind::Path(ref qpath) = path.node {\n-            opt_def_id(cx.tables.qpath_def(qpath, path.hir_id)).and_then(|def_id| {\n+            cx.tables.qpath_def(qpath, path.hir_id).opt_def_id().and_then(|def_id| {\n                 if match_def_path(cx.tcx, def_id, &paths::CMP_MIN) {\n                     fetch_const(cx, args, MinMax::Min)\n                 } else if match_def_path(cx.tcx, def_id, &paths::CMP_MAX) {"}, {"sha": "66624a066751bc735b5a1e630f7f544b224a3256", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, paths, resolve_node, span_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(ref ex) = block.expr;\n             if let ExprKind::Call(ref fun, ref params) = ex.node;\n             if let ExprKind::Path(ref qpath) = fun.node;\n-            if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id));\n+            if let Some(fun_def_id) = resolve_node(cx, qpath, fun.hir_id).opt_def_id();\n             if match_def_path(cx.tcx, fun_def_id, &paths::BEGIN_PANIC);\n             if params.len() == 2;\n             then {"}, {"sha": "094b6124076c9e266affe4b03c1b0653b719e2f1", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n+use crate::utils::{is_expn_of, match_def_path, match_type, paths, span_help_and_lint, span_lint};\n use if_chain::if_chain;\n use regex_syntax;\n use rustc::hir::*;\n@@ -118,7 +118,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let ExprKind::Call(ref fun, ref args) = expr.node;\n             if let ExprKind::Path(ref qpath) = fun.node;\n             if args.len() == 1;\n-            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, fun.hir_id));\n+            if let Some(def_id) = cx.tables.qpath_def(qpath, fun.hir_id).opt_def_id();\n             then {\n                 if match_def_path(cx.tcx, def_id, &paths::REGEX_NEW) ||\n                    match_def_path(cx.tcx, def_id, &paths::REGEX_BUILDER_NEW) {"}, {"sha": "65bd62863a094c9d5ad0957c2b38a26899ad2ff7", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -1,5 +1,4 @@\n-use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n-use crate::utils::{opt_def_id, sugg};\n+use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then, sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -231,7 +230,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {\n-                if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path_expr.hir_id)) {\n+                if let Some(def_id) = cx.tables.qpath_def(qpath, path_expr.hir_id).opt_def_id() {\n                     if match_def_path(cx.tcx, def_id, &paths::TRANSMUTE) {\n                         let from_ty = cx.tables.expr_ty(&args[0]);\n                         let to_ty = cx.tables.expr_ty(e);"}, {"sha": "e9fee8e022317a863267f97cce5daacaf78061d0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -4,9 +4,8 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n-    match_def_path, match_path, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n-    snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n-    AbsolutePathBuffer,\n+    match_def_path, match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n+    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext, AbsolutePathBuffer,\n };\n use if_chain::if_chain;\n use rustc::hir;\n@@ -225,7 +224,7 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n             _ => None,\n         });\n         if let TyKind::Path(ref qpath) = ty.node;\n-        if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, ty.hir_id));\n+        if let Some(did) = cx.tables.qpath_def(qpath, ty.hir_id).opt_def_id();\n         if match_def_path(cx.tcx, did, path);\n         then {\n             return true;\n@@ -248,7 +247,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n         TyKind::Path(ref qpath) if !is_local => {\n             let hir_id = hir_ty.hir_id;\n             let def = cx.tables.qpath_def(qpath, hir_id);\n-            if let Some(def_id) = opt_def_id(def) {\n+            if let Some(def_id) = def.opt_def_id() {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     if match_type_parameter(cx, qpath, &paths::VEC) {\n                         span_help_and_lint(\n@@ -271,7 +270,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                         // ty is now _ at this point\n                         if let TyKind::Path(ref ty_qpath) = ty.node;\n                         let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n-                        if let Some(def_id) = opt_def_id(def);\n+                        if let Some(def_id) = def.opt_def_id();\n                         if Some(def_id) == cx.tcx.lang_items().owned_box();\n                         // At this point, we know ty is Box<T>, now get T\n                         if let Some(ref last) = last_path_segment(ty_qpath).args;\n@@ -378,7 +377,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt:\n             let hir_id = mut_ty.ty.hir_id;\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if_chain! {\n-                if let Some(def_id) = opt_def_id(def);\n+                if let Some(def_id) = def.opt_def_id();\n                 if Some(def_id) == cx.tcx.lang_items().owned_box();\n                 if let QPath::Resolved(None, ref path) = *qpath;\n                 if let [ref bx] = *path.segments;"}, {"sha": "9095c49a2ac3c77a096ae96dec52c609cfa1a7de", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -3,7 +3,7 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::utils::{is_expn_of, match_def_path, match_qpath, opt_def_id, paths, resolve_node};\n+use crate::utils::{is_expn_of, match_def_path, match_qpath, paths, resolve_node};\n use if_chain::if_chain;\n use rustc::lint::LateContext;\n use rustc::{hir, ty};\n@@ -214,7 +214,7 @@ pub fn vec_macro<'e>(cx: &LateContext<'_, '_>, expr: &'e hir::Expr) -> Option<Ve\n         if let hir::ExprKind::Call(ref fun, ref args) = expr.node;\n         if let hir::ExprKind::Path(ref path) = fun.node;\n         if is_expn_of(fun.span, \"vec\").is_some();\n-        if let Some(fun_def_id) = opt_def_id(resolve_node(cx, path, fun.hir_id));\n+        if let Some(fun_def_id) = resolve_node(cx, path, fun.hir_id).opt_def_id();\n         then {\n             return if match_def_path(cx.tcx, fun_def_id, &paths::VEC_FROM_ELEM) && args.len() == 2 {\n                 // `vec![elem; size]` case"}, {"sha": "7615afd407e37e80676da4594882ee530280564b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfbfb80975ff1233f664a50163cb5f983aab916/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ccfbfb80975ff1233f664a50163cb5f983aab916", "patch": "@@ -845,10 +845,6 @@ pub fn remove_blocks(expr: &Expr) -> &Expr {\n     }\n }\n \n-pub fn opt_def_id(def: Def) -> Option<DefId> {\n-    def.opt_def_id()\n-}\n-\n pub fn is_self(slf: &Arg) -> bool {\n     if let PatKind::Binding(.., name, _) = slf.pat.node {\n         name.name == keywords::SelfLower.name()"}]}