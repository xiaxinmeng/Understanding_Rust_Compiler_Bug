{"sha": "5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "node_id": "C_kwDOAAsO6NoAKDVlNmRlMjM2OWM4MmVkMGIzNmU2YjY1MWIwNDFiYWQ1Y2I1ZTFlZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T09:30:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T09:30:35Z"}, "message": "Auto merge of #103509 - compiler-errors:opaques-w-bound-vars-r-hard, r=oli-obk\n\nRevert \"Normalize opaques with escaping bound vars\"\n\nThis caused a perf regression in #103423, cc `@skyzh` this should fix #103423.\n\nreverts #100980\n\nr? `@oli-obk`", "tree": {"sha": "8ce407daee6639beba2944c9563ec040afb69598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce407daee6639beba2944c9563ec040afb69598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "html_url": "https://github.com/rust-lang/rust/commit/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8d8040166a730d0da7bba0f2864f0ef7ff6364", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8d8040166a730d0da7bba0f2864f0ef7ff6364", "html_url": "https://github.com/rust-lang/rust/commit/2f8d8040166a730d0da7bba0f2864f0ef7ff6364"}, {"sha": "6ae4e5e2d48e1a968c121c03b9aec84fc3a58b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae4e5e2d48e1a968c121c03b9aec84fc3a58b3e", "html_url": "https://github.com/rust-lang/rust/commit/6ae4e5e2d48e1a968c121c03b9aec84fc3a58b3e"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "528b98cf4a1c0915ff33a1471c3ce0fa1019adb1", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),"}, {"sha": "a875ea1578dcb92d879b7f8ce80751ee13e97c5d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "patch": "@@ -198,7 +198,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),"}, {"sha": "020bcbb8396c959d468aadc238e6250ff3e078ac", "filename": "src/test/ui/impl-trait/normalize-tait-in-const.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.rs?ref=5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "patch": "@@ -0,0 +1,39 @@\n+// known-bug: #103507\n+// failure-status: 101\n+// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+// rustc-env:RUST_BACKTRACE=0\n+\n+#![feature(type_alias_impl_trait)]\n+#![feature(const_trait_impl)]\n+#![feature(const_refs_to_cell)]\n+#![feature(inline_const)]\n+\n+use std::marker::Destruct;\n+\n+trait T {\n+    type Item;\n+}\n+\n+type Alias<'a> = impl T<Item = &'a ()>;\n+\n+struct S;\n+impl<'a> T for &'a S {\n+    type Item = &'a ();\n+}\n+\n+const fn filter_positive<'a>() -> &'a Alias<'a> {\n+    &&S\n+}\n+\n+const fn with_positive<F: ~const for<'a> Fn(&'a Alias<'a>) + ~const Destruct>(fun: F) {\n+    fun(filter_positive());\n+}\n+\n+const fn foo(_: &Alias<'_>) {}\n+\n+const BAR: () = {\n+    with_positive(foo);\n+};\n+\n+fn main() {}"}, {"sha": "b9fc8726ffc0b342227921676dc17088d13cf956", "filename": "src/test/ui/impl-trait/normalize-tait-in-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr?ref=5e6de2369c82ed0b36e6b651b041bad5cb5e1ef8", "patch": "@@ -0,0 +1,8 @@\n+error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:198:90: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n+\n+query stack during panic:\n+#0 [eval_to_allocation_raw] const-evaluating + checking `BAR`\n+#1 [eval_to_const_value_raw] simplifying constant for the type system `BAR`\n+end of query stack\n+error: aborting due to previous error\n+"}, {"sha": "a8281d30bac4a61e827ac54dcaab121c44cbe934", "filename": "src/tools/miri/tests/pass/issues/issue-miri-2433.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f8d8040166a730d0da7bba0f2864f0ef7ff6364/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8d8040166a730d0da7bba0f2864f0ef7ff6364/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fissues%2Fissue-miri-2433.rs?ref=2f8d8040166a730d0da7bba0f2864f0ef7ff6364", "patch": "@@ -1,24 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-trait T {\n-    type Item;\n-}\n-\n-type Alias<'a> = impl T<Item = &'a ()>;\n-\n-struct S;\n-impl<'a> T for &'a S {\n-    type Item = &'a ();\n-}\n-\n-fn filter_positive<'a>() -> Alias<'a> {\n-    &S\n-}\n-\n-fn with_positive(fun: impl Fn(Alias<'_>)) {\n-    fun(filter_positive());\n-}\n-\n-fn main() {\n-    with_positive(|_| ());\n-}"}]}