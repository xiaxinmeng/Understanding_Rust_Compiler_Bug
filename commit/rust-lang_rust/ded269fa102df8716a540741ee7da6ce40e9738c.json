{"sha": "ded269fa102df8716a540741ee7da6ce40e9738c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZDI2OWZhMTAyZGY4NzE2YTU0MDc0MWVlN2RhNmNlNDBlOTczOGM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T21:25:06Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T21:25:06Z"}, "message": "Improve panic_fmt message for panic!(\"{}\") with a fmt placeholder.", "tree": {"sha": "197c5421d3b85f973da0cf3c6cb1d8e79a71c65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/197c5421d3b85f973da0cf3c6cb1d8e79a71c65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded269fa102df8716a540741ee7da6ce40e9738c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded269fa102df8716a540741ee7da6ce40e9738c", "html_url": "https://github.com/rust-lang/rust/commit/ded269fa102df8716a540741ee7da6ce40e9738c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded269fa102df8716a540741ee7da6ce40e9738c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451c9864c498f715c39b52dbbf0c6258c608c13f", "url": "https://api.github.com/repos/rust-lang/rust/commits/451c9864c498f715c39b52dbbf0c6258c608c13f", "html_url": "https://github.com/rust-lang/rust/commit/451c9864c498f715c39b52dbbf0c6258c608c13f"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "6879244721bb2da0af642f7451b35d0067e5a5b7", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ded269fa102df8716a540741ee7da6ce40e9738c/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded269fa102df8716a540741ee7da6ce40e9738c/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=ded269fa102df8716a540741ee7da6ce40e9738c", "patch": "@@ -47,24 +47,52 @@ impl<'tcx> LateLintPass<'tcx> for PanicFmt {\n fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tcx hir::Expr<'tcx>) {\n     if let hir::ExprKind::Lit(lit) = &arg.kind {\n         if let ast::LitKind::Str(sym, _) = lit.node {\n-            if sym.as_str().contains(&['{', '}'][..]) {\n-                let expn = f.span.ctxt().outer_expn_data();\n-                if let Some(id) = expn.macro_def_id {\n-                    if cx.tcx.is_diagnostic_item(sym::std_panic_macro, id)\n-                        || cx.tcx.is_diagnostic_item(sym::core_panic_macro, id)\n-                    {\n-                        let expn = {\n-                            // Unwrap another level of macro expansion if this\n-                            // panic!() was expanded from assert!().\n-                            let parent = expn.call_site.ctxt().outer_expn_data();\n-                            if parent.macro_def_id.map_or(false, |id| {\n-                                cx.tcx.is_diagnostic_item(sym::assert_macro, id)\n-                            }) {\n-                                parent\n-                            } else {\n-                                expn\n+            let s = sym.as_str();\n+            let open = s.find('{');\n+            let close = s[open.unwrap_or(0)..].find('}');\n+            let looks_like_placeholder = match (open, close) {\n+                (Some(_), Some(_)) => true,\n+                (Some(_), None) | (None, Some(_)) => false,\n+                (None, None) => return // OK, no braces.\n+            };\n+            let expn = f.span.ctxt().outer_expn_data();\n+            if let Some(id) = expn.macro_def_id {\n+                if cx.tcx.is_diagnostic_item(sym::std_panic_macro, id)\n+                    || cx.tcx.is_diagnostic_item(sym::core_panic_macro, id)\n+                {\n+                    let expn = {\n+                        // Unwrap another level of macro expansion if this\n+                        // panic!() was expanded from assert!().\n+                        let parent = expn.call_site.ctxt().outer_expn_data();\n+                        if parent.macro_def_id.map_or(false, |id| {\n+                            cx.tcx.is_diagnostic_item(sym::assert_macro, id)\n+                        }) {\n+                            parent\n+                        } else {\n+                            expn\n+                        }\n+                    };\n+                    if looks_like_placeholder {\n+                        cx.struct_span_lint(PANIC_FMT, arg.span.source_callsite(), |lint| {\n+                            let mut l = lint.build(\"Panic message contains an unused formatting placeholder\");\n+                            l.note(\"This message is not used as a format string when given without arguments, but will be in a future Rust version\");\n+                            if expn.call_site.contains(arg.span) {\n+                                l.span_suggestion(\n+                                    arg.span.shrink_to_hi(),\n+                                    \"add the missing argument(s)\",\n+                                    \", argument\".into(),\n+                                    Applicability::HasPlaceholders,\n+                                );\n+                                l.span_suggestion(\n+                                    arg.span.shrink_to_lo(),\n+                                    \"or add a \\\"{}\\\" format string to use the message literally\",\n+                                    \"\\\"{}\\\", \".into(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n                             }\n-                        };\n+                            l.emit();\n+                        });\n+                    } else {\n                         cx.struct_span_lint(PANIC_FMT, expn.call_site, |lint| {\n                             let mut l = lint.build(\"Panic message contains a brace\");\n                             l.note(\"This message is not used as a format string, but will be in a future Rust version\");"}]}