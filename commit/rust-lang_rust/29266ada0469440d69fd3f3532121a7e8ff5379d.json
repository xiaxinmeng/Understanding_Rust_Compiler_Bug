{"sha": "29266ada0469440d69fd3f3532121a7e8ff5379d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MjY2YWRhMDQ2OTQ0MGQ2OWZkM2YzNTMyMTIxYTdlOGZmNTM3OWQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-15T20:26:55Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:34Z"}, "message": "Improve debug printing without TLS", "tree": {"sha": "7ad65e64269aa2ed99e89d2ccd038fdd2873ddb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad65e64269aa2ed99e89d2ccd038fdd2873ddb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29266ada0469440d69fd3f3532121a7e8ff5379d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29266ada0469440d69fd3f3532121a7e8ff5379d", "html_url": "https://github.com/rust-lang/rust/commit/29266ada0469440d69fd3f3532121a7e8ff5379d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29266ada0469440d69fd3f3532121a7e8ff5379d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c423f5b88f40da4f3682602bf17a9b6848f5411", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c423f5b88f40da4f3682602bf17a9b6848f5411", "html_url": "https://github.com/rust-lang/rust/commit/7c423f5b88f40da4f3682602bf17a9b6848f5411"}], "stats": {"total": 179, "additions": 21, "deletions": 158}, "files": [{"sha": "29ffdd9b7f3940da7059ceca683e1a94d28ea422", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/29266ada0469440d69fd3f3532121a7e8ff5379d/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29266ada0469440d69fd3f3532121a7e8ff5379d/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=29266ada0469440d69fd3f3532121a7e8ff5379d", "patch": "@@ -107,66 +107,65 @@ impl chalk_ir::interner::Interner for Interner {\n         opaque_ty: &chalk_ir::OpaqueTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_opaque_ty(opaque_ty, fmt)))\n+        Some(write!(fmt, \"{:?}\", opaque_ty.opaque_ty_id))\n     }\n \n     fn debug_opaque_ty_id(\n         opaque_ty_id: chalk_ir::OpaqueTyId<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_opaque_ty_id(opaque_ty_id, fmt)))\n+        Some(fmt.debug_struct(\"OpaqueTyId\").field(\"index\", &opaque_ty_id.0).finish())\n     }\n \n     fn debug_ty(ty: &chalk_ir::Ty<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_ty(ty, fmt)))\n+        Some(write!(fmt, \"{:?}\", ty.data(&Interner)))\n     }\n \n     fn debug_lifetime(\n         lifetime: &chalk_ir::Lifetime<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_lifetime(lifetime, fmt)))\n+        Some(write!(fmt, \"{:?}\", lifetime.data(&Interner)))\n     }\n \n     fn debug_generic_arg(\n         parameter: &GenericArg,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_generic_arg(parameter, fmt)))\n+        Some(write!(fmt, \"{:?}\", parameter.data(&Interner).inner_debug()))\n     }\n \n     fn debug_goal(goal: &Goal<Interner>, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_goal(goal, fmt)))\n+        let goal_data = goal.data(&Interner);\n+        Some(write!(fmt, \"{:?}\", goal_data))\n     }\n \n     fn debug_goals(\n         goals: &chalk_ir::Goals<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_goals(goals, fmt)))\n+        Some(write!(fmt, \"{:?}\", goals.debug(&Interner)))\n     }\n \n     fn debug_program_clause_implication(\n         pci: &chalk_ir::ProgramClauseImplication<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_program_clause_implication(pci, fmt)))\n+        Some(write!(fmt, \"{:?}\", pci.debug(&Interner)))\n     }\n \n     fn debug_substitution(\n         substitution: &chalk_ir::Substitution<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_substitution(substitution, fmt)))\n+        Some(write!(fmt, \"{:?}\", substitution.debug(&Interner)))\n     }\n \n     fn debug_separator_trait_ref(\n         separator_trait_ref: &chalk_ir::SeparatorTraitRef<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| {\n-            Some(prog?.debug_separator_trait_ref(separator_trait_ref, fmt))\n-        })\n+        Some(write!(fmt, \"{:?}\", separator_trait_ref.debug(&Interner)))\n     }\n \n     fn debug_fn_def_id(\n@@ -179,47 +178,43 @@ impl chalk_ir::interner::Interner for Interner {\n         constant: &chalk_ir::Const<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_const(constant, fmt)))\n+        Some(write!(fmt, \"{:?}\", constant.data(&Interner)))\n     }\n     fn debug_variable_kinds(\n         variable_kinds: &chalk_ir::VariableKinds<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_variable_kinds(variable_kinds, fmt)))\n+        Some(write!(fmt, \"{:?}\", variable_kinds.as_slice(&Interner)))\n     }\n     fn debug_variable_kinds_with_angles(\n         variable_kinds: &chalk_ir::VariableKinds<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| {\n-            Some(prog?.debug_variable_kinds_with_angles(variable_kinds, fmt))\n-        })\n+        Some(write!(fmt, \"{:?}\", variable_kinds.inner_debug(&Interner)))\n     }\n     fn debug_canonical_var_kinds(\n         canonical_var_kinds: &chalk_ir::CanonicalVarKinds<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| {\n-            Some(prog?.debug_canonical_var_kinds(canonical_var_kinds, fmt))\n-        })\n+        Some(write!(fmt, \"{:?}\", canonical_var_kinds.as_slice(&Interner)))\n     }\n     fn debug_program_clause(\n         clause: &chalk_ir::ProgramClause<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_program_clause(clause, fmt)))\n+        Some(write!(fmt, \"{:?}\", clause.data(&Interner)))\n     }\n     fn debug_program_clauses(\n         clauses: &chalk_ir::ProgramClauses<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_program_clauses(clauses, fmt)))\n+        Some(write!(fmt, \"{:?}\", clauses.as_slice(&Interner)))\n     }\n     fn debug_quantified_where_clauses(\n         clauses: &chalk_ir::QuantifiedWhereClauses<Self>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n-        tls::with_current_program(|prog| Some(prog?.debug_quantified_where_clauses(clauses, fmt)))\n+        Some(write!(fmt, \"{:?}\", clauses.as_slice(&Interner)))\n     }\n \n     fn intern_ty(&self, kind: chalk_ir::TyKind<Self>) -> Self::InternedType {"}, {"sha": "708797c4772239230f0096252047ed1faa43118b", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 3, "deletions": 135, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/29266ada0469440d69fd3f3532121a7e8ff5379d/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29266ada0469440d69fd3f3532121a7e8ff5379d/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=29266ada0469440d69fd3f3532121a7e8ff5379d", "patch": "@@ -1,7 +1,7 @@\n //! Implementation of Chalk debug helper functions using TLS.\n-use std::fmt;\n+use std::fmt::{self, Debug};\n \n-use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication};\n+use chalk_ir::AliasTy;\n use itertools::Itertools;\n \n use crate::{\n@@ -53,22 +53,14 @@ impl DebugContext<'_> {\n         write!(fmt, \"{}::{}\", trait_data.name, type_alias_data.name)\n     }\n \n-    pub(crate) fn debug_opaque_ty_id(\n-        &self,\n-        opaque_ty_id: chalk_ir::OpaqueTyId<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        fmt.debug_struct(\"OpaqueTyId\").field(\"index\", &opaque_ty_id.0).finish()\n-    }\n-\n     pub(crate) fn debug_alias(\n         &self,\n         alias_ty: &AliasTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         match alias_ty {\n             AliasTy::Projection(projection_ty) => self.debug_projection_ty(projection_ty, fmt),\n-            AliasTy::Opaque(opaque_ty) => self.debug_opaque_ty(opaque_ty, fmt),\n+            AliasTy::Opaque(opaque_ty) => opaque_ty.fmt(fmt),\n         }\n     }\n \n@@ -96,79 +88,6 @@ impl DebugContext<'_> {\n         write!(fmt, \">::{}\", type_alias_data.name)\n     }\n \n-    pub(crate) fn debug_opaque_ty(\n-        &self,\n-        opaque_ty: &chalk_ir::OpaqueTy<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", opaque_ty.opaque_ty_id)\n-    }\n-\n-    pub(crate) fn debug_ty(\n-        &self,\n-        ty: &chalk_ir::Ty<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", ty.data(&Interner))\n-    }\n-\n-    pub(crate) fn debug_lifetime(\n-        &self,\n-        lifetime: &Lifetime<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", lifetime.data(&Interner))\n-    }\n-\n-    pub(crate) fn debug_generic_arg(\n-        &self,\n-        parameter: &GenericArg<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", parameter.data(&Interner).inner_debug())\n-    }\n-\n-    pub(crate) fn debug_goal(\n-        &self,\n-        goal: &Goal<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        let goal_data = goal.data(&Interner);\n-        write!(fmt, \"{:?}\", goal_data)\n-    }\n-\n-    pub(crate) fn debug_goals(\n-        &self,\n-        goals: &Goals<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", goals.debug(&Interner))\n-    }\n-\n-    pub(crate) fn debug_program_clause_implication(\n-        &self,\n-        pci: &ProgramClauseImplication<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", pci.debug(&Interner))\n-    }\n-\n-    pub(crate) fn debug_substitution(\n-        &self,\n-        substitution: &chalk_ir::Substitution<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", substitution.debug(&Interner))\n-    }\n-\n-    pub(crate) fn debug_separator_trait_ref(\n-        &self,\n-        separator_trait_ref: &chalk_ir::SeparatorTraitRef<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> Result<(), fmt::Error> {\n-        write!(fmt, \"{:?}\", separator_trait_ref.debug(&Interner))\n-    }\n-\n     pub(crate) fn debug_fn_def_id(\n         &self,\n         fn_def_id: chalk_ir::FnDefId<Interner>,\n@@ -190,57 +109,6 @@ impl DebugContext<'_> {\n             }\n         }\n     }\n-\n-    pub(crate) fn debug_const(\n-        &self,\n-        _constant: &chalk_ir::Const<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> fmt::Result {\n-        write!(fmt, \"const\")\n-    }\n-\n-    pub(crate) fn debug_variable_kinds(\n-        &self,\n-        variable_kinds: &chalk_ir::VariableKinds<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> fmt::Result {\n-        write!(fmt, \"{:?}\", variable_kinds.as_slice(&Interner))\n-    }\n-    pub(crate) fn debug_variable_kinds_with_angles(\n-        &self,\n-        variable_kinds: &chalk_ir::VariableKinds<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> fmt::Result {\n-        write!(fmt, \"{:?}\", variable_kinds.inner_debug(&Interner))\n-    }\n-    pub(crate) fn debug_canonical_var_kinds(\n-        &self,\n-        canonical_var_kinds: &chalk_ir::CanonicalVarKinds<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> fmt::Result {\n-        write!(fmt, \"{:?}\", canonical_var_kinds.as_slice(&Interner))\n-    }\n-    pub(crate) fn debug_program_clause(\n-        &self,\n-        clause: &chalk_ir::ProgramClause<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> fmt::Result {\n-        write!(fmt, \"{:?}\", clause.data(&Interner))\n-    }\n-    pub(crate) fn debug_program_clauses(\n-        &self,\n-        clauses: &chalk_ir::ProgramClauses<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> fmt::Result {\n-        write!(fmt, \"{:?}\", clauses.as_slice(&Interner))\n-    }\n-    pub(crate) fn debug_quantified_where_clauses(\n-        &self,\n-        clauses: &chalk_ir::QuantifiedWhereClauses<Interner>,\n-        fmt: &mut fmt::Formatter<'_>,\n-    ) -> fmt::Result {\n-        write!(fmt, \"{:?}\", clauses.as_slice(&Interner))\n-    }\n }\n \n mod unsafe_tls {"}]}