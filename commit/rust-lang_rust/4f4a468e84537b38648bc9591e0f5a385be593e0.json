{"sha": "4f4a468e84537b38648bc9591e0f5a385be593e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNGE0NjhlODQ1MzdiMzg2NDhiYzk1OTFlMGY1YTM4NWJlNTkzZTA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-17T21:39:15Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-15T08:05:41Z"}, "message": "Forbid deinitializing upvars in typestate\n\nCloses #1965.", "tree": {"sha": "762d9170471360465ad7fbd3d4820ede4877a918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762d9170471360465ad7fbd3d4820ede4877a918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4a468e84537b38648bc9591e0f5a385be593e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4a468e84537b38648bc9591e0f5a385be593e0", "html_url": "https://github.com/rust-lang/rust/commit/4f4a468e84537b38648bc9591e0f5a385be593e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4a468e84537b38648bc9591e0f5a385be593e0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e358f01236c24747ae8af0de4be19f2b34c003", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e358f01236c24747ae8af0de4be19f2b34c003", "html_url": "https://github.com/rust-lang/rust/commit/46e358f01236c24747ae8af0de4be19f2b34c003"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "fbfcaae8a47631f93e6056049b5613a1afe89bb3", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f4a468e84537b38648bc9591e0f5a385be593e0/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4a468e84537b38648bc9591e0f5a385be593e0/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=4f4a468e84537b38648bc9591e0f5a385be593e0", "patch": "@@ -710,6 +710,12 @@ fn find_instance_(pattern: [constr_arg_general_<inst>], descs: [pred_args]) ->\n }\n \n type inst = {ident: ident, node: node_id};\n+\n+enum dest {\n+    local_dest(inst), // RHS is assigned to a local variable\n+    call                        // RHS is passed to a function\n+}\n+\n type subst = [{from: inst, to: inst}];\n \n fn find_instances(_fcx: fn_ctxt, subst: subst, c: constraint) ->\n@@ -1064,12 +1070,12 @@ fn ast_constr_to_sp_constr(tcx: ty::ctxt, args: [arg], c: @constr) ->\n     ret respan(c.span, tconstr);\n }\n \n-type binding = {lhs: [inst], rhs: option<initializer>};\n+type binding = {lhs: [dest], rhs: option<initializer>};\n \n fn local_to_bindings(tcx: ty::ctxt, loc: @local) -> binding {\n     let mut lhs = [];\n     pat_bindings(tcx.def_map, loc.node.pat) {|p_id, _s, name|\n-        lhs += [{ident: path_to_ident(name), node: p_id}];\n+      lhs += [local_dest({ident: path_to_ident(name), node: p_id})];\n     };\n     {lhs: lhs, rhs: loc.node.init}\n }\n@@ -1106,12 +1112,12 @@ fn callee_arg_init_ops(fcx: fn_ctxt, callee: node_id) -> [init_op] {\n     }\n }\n \n-fn anon_bindings(ops: [init_op], es: [@expr]) -> [binding] {\n+fn arg_bindings(ops: [init_op], es: [@expr]) -> [binding] {\n     let mut bindings: [binding] = [];\n-    let mut i = 0;\n+    let mut i = 0u;\n     for ops.each {|op|\n-        bindings += [{lhs: [], rhs: some({op: op, expr: es[i]})}];\n-        i += 1;\n+        bindings += [{lhs: [call], rhs: some({op: op, expr: es[i]})}];\n+        i += 1u;\n     }\n     ret bindings;\n }"}, {"sha": "8845e433a394c1cc96cfdc73def4e58abf3ddf39", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4f4a468e84537b38648bc9591e0f5a385be593e0/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4a468e84537b38648bc9591e0f5a385be593e0/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=4f4a468e84537b38648bc9591e0f5a385be593e0", "patch": "@@ -13,6 +13,9 @@ import driver::session::session;\n import std::map::hashmap;\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n+    //            fcx.ccx.tcx.sess.span_note(sp,\n+    //              #fmt(\"forbid_upvar: checking. %?\", t));\n+\n     alt t {\n       oper_move {\n         alt local_node_id_to_def(fcx, rhs_id) {\n@@ -29,7 +32,7 @@ fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n }\n \n fn handle_move_or_copy(fcx: fn_ctxt, post: poststate, rhs_path: @path,\n-                       rhs_id: node_id, instlhs: inst, init_op: init_op) {\n+                       rhs_id: node_id, destlhs: dest, init_op: init_op) {\n     forbid_upvar(fcx, rhs_id, rhs_path.span, op_to_oper_ty(init_op));\n \n     let rhs_d_id = local_node_id_to_def_id(fcx, rhs_id);\n@@ -38,8 +41,13 @@ fn handle_move_or_copy(fcx: fn_ctxt, post: poststate, rhs_path: @path,\n         // RHS is a local var\n         let instrhs =\n             {ident: path_to_ident(rhs_path), node: rhsid.node};\n-        copy_in_poststate(fcx, post, instlhs, instrhs,\n-                          op_to_oper_ty(init_op));\n+        alt destlhs {\n+          local_dest(instlhs) {\n+             copy_in_poststate(fcx, post, instlhs, instrhs,\n+                               op_to_oper_ty(init_op));\n+          }\n+          _ {}\n+        }\n       }\n       _ {\n         // not a local -- do nothing\n@@ -74,15 +82,20 @@ fn seq_states(fcx: fn_ctxt, pres: prestate, bindings: [binding]) ->\n             changed |=\n                 find_pre_post_state_expr(fcx, post, an_init.expr) || changed;\n             post = tritv_clone(expr_poststate(fcx.ccx, an_init.expr));\n-            for b.lhs.each {|i|\n+            for b.lhs.each {|d|\n                 alt an_init.expr.node {\n                   expr_path(p) {\n-                    handle_move_or_copy(fcx, post, p, an_init.expr.id, i,\n+                    handle_move_or_copy(fcx, post, p, an_init.expr.id, d,\n                                         an_init.op);\n                   }\n                   _ { }\n                 }\n-                set_in_poststate_ident(fcx, i.node, i.ident, post);\n+                alt d {\n+                  local_dest(i) {\n+                      set_in_poststate_ident(fcx, i.node, i.ident, post);\n+                  }\n+                  _ {}\n+                }\n             }\n \n             // Forget the RHS if we just moved it.\n@@ -91,9 +104,14 @@ fn seq_states(fcx: fn_ctxt, pres: prestate, bindings: [binding]) ->\n             }\n           }\n           none {\n-            for b.lhs.each {|i|\n+            for b.lhs.each {|d|\n                 // variables w/o an initializer\n-                clear_in_poststate_ident_(fcx, i.node, i.ident, post);\n+                 alt check d {\n+                   // would be an error to pass something uninit'd to a call\n+                   local_dest(i) {\n+                     clear_in_poststate_ident_(fcx, i.node, i.ident, post);\n+                   }\n+                 }\n             }\n           }\n         }\n@@ -198,7 +216,7 @@ fn find_pre_post_state_call(fcx: fn_ctxt, pres: prestate, a: @expr,\n fn find_pre_post_state_exprs(fcx: fn_ctxt, pres: prestate, id: node_id,\n                              ops: [init_op], es: [@expr], cf: ret_style) ->\n    bool {\n-    let rs = seq_states(fcx, pres, anon_bindings(ops, es));\n+    let rs = seq_states(fcx, pres, arg_bindings(ops, es));\n     let mut changed = rs.changed | set_prestate_ann(fcx.ccx, id, pres);\n     /* if this is a failing call, it sets everything as initialized */\n     alt cf {\n@@ -371,6 +389,8 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                       return_val);\n       }\n       expr_call(operator, operands, _) {\n+          #debug(\"hey it's a call\");\n+          log_expr(*e);\n         ret find_pre_post_state_call(fcx, pres, operator, e.id,\n                                      callee_arg_init_ops(fcx, operator.id),\n                                      operands,"}, {"sha": "7b4bfa74ba3d094ecb52de5ed07c279dc7fa7494", "filename": "src/test/compile-fail/issue-1965.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f4a468e84537b38648bc9591e0f5a385be593e0/src%2Ftest%2Fcompile-fail%2Fissue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4a468e84537b38648bc9591e0f5a385be593e0/src%2Ftest%2Fcompile-fail%2Fissue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1965.rs?ref=4f4a468e84537b38648bc9591e0f5a385be593e0", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern:tried to deinitialize a variable declared in a different\n+fn test(-x: uint) {}\n+\n+fn main() {\n+    let i = 3u;\n+    uint::range(0u, 10u) {|_x| test(i)}\n+}\n\\ No newline at end of file"}]}