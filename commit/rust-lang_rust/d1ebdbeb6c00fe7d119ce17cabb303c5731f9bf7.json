{"sha": "d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZWJkYmViNmMwMGZlN2QxMTljZTE3Y2FiYjMwM2M1NzMxZjliZjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-28T21:51:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-04T22:51:31Z"}, "message": "librustc: Implement explicit self for Add and Index; add a hack in the borrow checker to support this. r=nmatsakis", "tree": {"sha": "bde6bd5862f6838776d2176e52ea96235828e348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde6bd5862f6838776d2176e52ea96235828e348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "html_url": "https://github.com/rust-lang/rust/commit/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ece46f7de9d1703dd39f952afac9bed22633b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ece46f7de9d1703dd39f952afac9bed22633b6", "html_url": "https://github.com/rust-lang/rust/commit/56ece46f7de9d1703dd39f952afac9bed22633b6"}], "stats": {"total": 143, "additions": 128, "deletions": 15}, "files": [{"sha": "13429c902669e13adda4eb1b03f8bfbb6b67884c", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -145,12 +145,22 @@ pub pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n \n #[cfg(notest)]\n pub mod traits {\n+    #[cfg(stage0)]\n     pub impl<T: Copy> @[T] : Add<&[const T],@[T]> {\n         #[inline(always)]\n         pure fn add(rhs: & &self/[const T]) -> @[T] {\n             append(self, (*rhs))\n         }\n     }\n+\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    pub impl<T: Copy> @[T] : Add<&[const T],@[T]> {\n+        #[inline(always)]\n+        pure fn add(&self, rhs: & &self/[const T]) -> @[T] {\n+            append(*self, (*rhs))\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "b3da5f1e98b5cd1afc53806ef2d17c19616b69d8", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -358,10 +358,19 @@ impl<A: Copy> DVec<A> {\n     }\n }\n \n+#[cfg(stage0)]\n impl<A:Copy> DVec<A>: Index<uint,A> {\n     #[inline(always)]\n     pure fn index(idx: uint) -> A {\n         self.get_elt(idx)\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl<A:Copy> DVec<A>: Index<uint,A> {\n+    #[inline(always)]\n+    pure fn index(&self, idx: uint) -> A {\n+        self.get_elt(idx)\n+    }\n+}\n "}, {"sha": "71d4b297252f576086c469c309ec3046dc7267a5", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -18,11 +18,19 @@ pub trait Drop {\n     fn finalize(&self);  // XXX: Rename to \"drop\"? --pcwalton\n }\n \n+#[cfg(stage0)]\n #[lang=\"add\"]\n pub trait Add<RHS,Result> {\n     pure fn add(rhs: &RHS) -> Result;\n }\n \n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[lang=\"add\"]\n+pub trait Add<RHS,Result> {\n+    pure fn add(&self, rhs: &RHS) -> Result;\n+}\n+\n #[lang=\"sub\"]\n pub trait Sub<RHS,Result> {\n     pure fn sub(&self, rhs: &RHS) -> Result;\n@@ -73,8 +81,16 @@ pub trait Shr<RHS,Result> {\n     pure fn shr(&self, rhs: &RHS) -> Result;\n }\n \n+#[cfg(stage0)]\n #[lang=\"index\"]\n pub trait Index<Index,Result> {\n     pure fn index(index: Index) -> Result;\n }\n \n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[lang=\"index\"]\n+pub trait Index<Index,Result> {\n+    pure fn index(&self, index: Index) -> Result;\n+}\n+"}, {"sha": "40a8f9afd678d2e6ddfa38f27296879faa0337af", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -2107,12 +2107,21 @@ impl ~str: Trimmable {\n \n #[cfg(notest)]\n pub mod traits {\n+    #[cfg(stage0)]\n     impl ~str : Add<&str,~str> {\n         #[inline(always)]\n         pure fn add(rhs: & &self/str) -> ~str {\n             append(copy self, (*rhs))\n         }\n     }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    impl ~str : Add<&str,~str> {\n+        #[inline(always)]\n+        pure fn add(&self, rhs: & &self/str) -> ~str {\n+            append(copy *self, (*rhs))\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "8b6cb2ade5e7a3ab1a28567564c68f350128149c", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -1438,18 +1438,37 @@ impl<T: Ord> @[T] : Ord {\n }\n \n #[cfg(notest)]\n-impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n-    #[inline(always)]\n-    pure fn add(rhs: & &self/[const T]) -> ~[T] {\n-        append(copy self, (*rhs))\n+pub mod traits {\n+    #[cfg(stage0)]\n+    impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n+        #[inline(always)]\n+        pure fn add(rhs: & &self/[const T]) -> ~[T] {\n+            append(copy self, (*rhs))\n+        }\n+    }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n+        #[inline(always)]\n+        pure fn add(&self, rhs: & &self/[const T]) -> ~[T] {\n+            append(copy *self, (*rhs))\n+        }\n     }\n-}\n \n-#[cfg(notest)]\n-impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n-    #[inline(always)]\n-    pure fn add(rhs: & &self/[const T]) -> ~[mut T] {\n-        append_mut(copy self, (*rhs))\n+    #[cfg(stage0)]\n+    impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n+        #[inline(always)]\n+        pure fn add(rhs: & &self/[const T]) -> ~[mut T] {\n+            append_mut(copy self, (*rhs))\n+        }\n+    }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n+        #[inline(always)]\n+        pure fn add(&self, rhs: & &self/[const T]) -> ~[mut T] {\n+            append_mut(copy *self, (*rhs))\n+        }\n     }\n }\n "}, {"sha": "d573bf15d38fb56c932659a238901519dd4eeaa1", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -20,6 +20,8 @@ use mem_categorization::{mem_categorization_ctxt, opt_deref_kind};\n use preserve::{preserve_condition, pc_ok, pc_if_pure};\n use ty::{ty_region};\n \n+use core::send_map::linear::LinearMap;\n+\n export gather_loans;\n \n /// Context used while gathering loans:\n@@ -53,14 +55,16 @@ export gather_loans;\n enum gather_loan_ctxt = @{bccx: borrowck_ctxt,\n                           req_maps: req_maps,\n                           mut item_ub: ast::node_id,\n-                          mut root_ub: ast::node_id};\n+                          mut root_ub: ast::node_id,\n+                          mut ignore_adjustments: LinearMap<ast::node_id,()>};\n \n fn gather_loans(bccx: borrowck_ctxt, crate: @ast::crate) -> req_maps {\n     let glcx = gather_loan_ctxt(@{bccx: bccx,\n                                   req_maps: {req_loan_map: HashMap(),\n                                              pure_map: HashMap()},\n                                   mut item_ub: 0,\n-                                  mut root_ub: 0});\n+                                  mut root_ub: 0,\n+                                  mut ignore_adjustments: LinearMap()});\n     let v = visit::mk_vt(@{visit_expr: req_loans_in_expr,\n                            visit_fn: req_loans_in_fn,\n                            .. *visit::default_visitor()});\n@@ -104,8 +108,10 @@ fn req_loans_in_expr(ex: @ast::expr,\n            ex.id, pprust::expr_to_str(ex, tcx.sess.intr()));\n \n     // If this expression is borrowed, have to ensure it remains valid:\n-    for tcx.adjustments.find(ex.id).each |adjustments| {\n-        self.guarantee_adjustments(ex, *adjustments);\n+    if !self.ignore_adjustments.contains_key(&ex.id) {\n+        for tcx.adjustments.find(ex.id).each |adjustments| {\n+            self.guarantee_adjustments(ex, *adjustments);\n+        }\n     }\n \n     // Special checks for various kinds of expressions:\n@@ -179,7 +185,8 @@ fn req_loans_in_expr(ex: @ast::expr,\n \n       ast::expr_index(rcvr, _) |\n       ast::expr_binary(_, rcvr, _) |\n-      ast::expr_unary(_, rcvr)\n+      ast::expr_unary(_, rcvr) |\n+      ast::expr_assign_op(_, rcvr, _)\n       if self.bccx.method_map.contains_key(ex.id) => {\n         // Receivers in method calls are always passed by ref.\n         //\n@@ -193,6 +200,11 @@ fn req_loans_in_expr(ex: @ast::expr,\n         let scope_r = ty::re_scope(ex.id);\n         let rcvr_cmt = self.bccx.cat_expr(rcvr);\n         self.guarantee_valid(rcvr_cmt, m_imm, scope_r);\n+\n+        // FIXME (#3387): Total hack: Ignore adjustments for the left-hand\n+        // side. Their regions will be inferred to be too large.\n+        self.ignore_adjustments.insert(rcvr.id, ());\n+\n         visit::visit_expr(ex, self, vt);\n       }\n "}, {"sha": "72f21a687daa992cd857f892f3fb5aae80432238", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -565,11 +565,19 @@ pure fn land(w0: uint, w1: uint) -> uint { return w0 & w1; }\n \n pure fn right(_w0: uint, w1: uint) -> uint { return w1; }\n \n+#[cfg(stage0)]\n impl Bitv: ops::Index<uint,bool> {\n     pure fn index(i: uint) -> bool {\n         self.get(i)\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl Bitv: ops::Index<uint,bool> {\n+    pure fn index(&self, i: uint) -> bool {\n+        self.get(i)\n+    }\n+}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "3b65f913755232e802987150ce8f7e45b788c193", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -57,13 +57,23 @@ pub mod Reader {\n \n     // ebml reading\n \n+    #[cfg(stage0)]\n     impl Doc: ops::Index<uint,Doc> {\n         pure fn index(tag: uint) -> Doc {\n             unsafe {\n                 get_doc(self, tag)\n             }\n         }\n     }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    impl Doc: ops::Index<uint,Doc> {\n+        pure fn index(&self, tag: uint) -> Doc {\n+            unsafe {\n+                get_doc(*self, tag)\n+            }\n+        }\n+    }\n \n     fn vuint_at(data: &[u8], start: uint) -> {val: uint, next: uint} {\n         let a = data[start];"}, {"sha": "add1976539c57a1eade7aec9c8c934d4d901a96b", "filename": "src/libstd/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -429,13 +429,23 @@ pub mod chained {\n         }\n     }\n \n+    #[cfg(stage0)]\n     impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n         pure fn index(k: K) -> V {\n             unsafe {\n                 self.get(k)\n             }\n         }\n     }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n+        pure fn index(&self, k: K) -> V {\n+            unsafe {\n+                self.get(k)\n+            }\n+        }\n+    }\n \n     fn chains<K,V>(nchains: uint) -> ~[mut Option<@Entry<K,V>>] {\n         vec::to_mut(vec::from_elem(nchains, None))"}, {"sha": "3e82c3c9419787e5a9f30251037223de8872f1bc", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=d1ebdbeb6c00fe7d119ce17cabb303c5731f9bf7", "patch": "@@ -150,13 +150,23 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n     }\n }\n \n+#[cfg(stage0)]\n impl<V: Copy> SmallIntMap<V>: ops::Index<uint, V> {\n     pure fn index(key: uint) -> V {\n         unsafe {\n             get(self, key)\n         }\n     }\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl<V: Copy> SmallIntMap<V>: ops::Index<uint, V> {\n+    pure fn index(&self, key: uint) -> V {\n+        unsafe {\n+            get(*self, key)\n+        }\n+    }\n+}\n \n /// Cast the given smallintmap to a map::map\n pub fn as_map<V: Copy>(s: SmallIntMap<V>) -> map::Map<uint, V> {"}]}