{"sha": "cff5b998e08ab3082512f72069fad38c12cc9702", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZjViOTk4ZTA4YWIzMDgyNTEyZjcyMDY5ZmFkMzhjMTJjYzk3MDI=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-03-16T15:01:03Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-24T18:31:36Z"}, "message": "add a few more DefKinds\n\nmake Map::def_kind take LocalDefId\n\nCo-Authored-By: Vadim Petrochenkov <vadim.petrochenkov@gmail.com>\n\ncrates are DefKind::Mod", "tree": {"sha": "7ea5761db2887d54da4e176452eb0906b6bc473a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ea5761db2887d54da4e176452eb0906b6bc473a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff5b998e08ab3082512f72069fad38c12cc9702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff5b998e08ab3082512f72069fad38c12cc9702", "html_url": "https://github.com/rust-lang/rust/commit/cff5b998e08ab3082512f72069fad38c12cc9702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff5b998e08ab3082512f72069fad38c12cc9702/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061256835886be38fcb2255d585ec4e1292b77d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/061256835886be38fcb2255d585ec4e1292b77d0", "html_url": "https://github.com/rust-lang/rust/commit/061256835886be38fcb2255d585ec4e1292b77d0"}], "stats": {"total": 197, "additions": 133, "deletions": 64}, "files": [{"sha": "b4b19b9795b06b0252c40d716d786facf065d5fb", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -77,6 +77,17 @@ pub enum DefKind {\n \n     // Macro namespace\n     Macro(MacroKind),\n+\n+    // Not namespaced (or they are, but we don't treat them so)\n+    ExternCrate,\n+    Use,\n+    ForeignMod,\n+    AnonConst,\n+    Field,\n+    LifetimeParam,\n+    GlobalAsm,\n+    Impl,\n+    Closure,\n }\n \n impl DefKind {\n@@ -113,6 +124,15 @@ impl DefKind {\n             DefKind::TyParam => \"type parameter\",\n             DefKind::ConstParam => \"const parameter\",\n             DefKind::Macro(macro_kind) => macro_kind.descr(),\n+            DefKind::LifetimeParam => \"lifetime parameter\",\n+            DefKind::Use => \"import\",\n+            DefKind::ForeignMod => \"foreign module\",\n+            DefKind::AnonConst => \"anonymous constant\",\n+            DefKind::Field => \"field\",\n+            DefKind::Impl => \"implementation\",\n+            DefKind::Closure => \"closure\",\n+            DefKind::ExternCrate => \"extern crate\",\n+            DefKind::GlobalAsm => \"global assembly block\",\n         }\n     }\n \n@@ -124,7 +144,9 @@ impl DefKind {\n             | DefKind::AssocOpaqueTy\n             | DefKind::AssocFn\n             | DefKind::Enum\n-            | DefKind::OpaqueTy => \"an\",\n+            | DefKind::OpaqueTy\n+            | DefKind::AnonConst\n+            | DefKind::Impl => \"an\",\n             DefKind::Macro(macro_kind) => macro_kind.article(),\n             _ => \"a\",\n         }\n@@ -155,6 +177,17 @@ impl DefKind {\n             | DefKind::AssocConst => ns == Namespace::ValueNS,\n \n             DefKind::Macro(..) => ns == Namespace::MacroNS,\n+\n+            // Not namespaced.\n+            DefKind::AnonConst\n+            | DefKind::Field\n+            | DefKind::LifetimeParam\n+            | DefKind::ExternCrate\n+            | DefKind::Closure\n+            | DefKind::Use\n+            | DefKind::ForeignMod\n+            | DefKind::GlobalAsm\n+            | DefKind::Impl => false,\n         }\n     }\n }"}, {"sha": "bc6c30ccc4ea9f122c89b3c526ed9fe6f2bdf871", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -562,8 +562,8 @@ impl MetadataBlob {\n }\n \n impl EntryKind {\n-    fn def_kind(&self) -> Option<DefKind> {\n-        Some(match *self {\n+    fn def_kind(&self) -> DefKind {\n+        match *self {\n             EntryKind::Const(..) => DefKind::Const,\n             EntryKind::AssocConst(..) => DefKind::AssocConst,\n             EntryKind::ImmStatic\n@@ -587,14 +587,13 @@ impl EntryKind {\n             EntryKind::Enum(..) => DefKind::Enum,\n             EntryKind::MacroDef(_) => DefKind::Macro(MacroKind::Bang),\n             EntryKind::ForeignType => DefKind::ForeignTy,\n-\n-            EntryKind::ForeignMod\n-            | EntryKind::GlobalAsm\n-            | EntryKind::Impl(_)\n-            | EntryKind::Field\n-            | EntryKind::Generator(_)\n-            | EntryKind::Closure => return None,\n-        })\n+            EntryKind::Impl(_) => DefKind::Impl,\n+            EntryKind::Closure => DefKind::Closure,\n+            EntryKind::ForeignMod => DefKind::ForeignMod,\n+            EntryKind::GlobalAsm => DefKind::GlobalAsm,\n+            EntryKind::Field => DefKind::Field,\n+            EntryKind::Generator(_) => DefKind::Closure,\n+        }\n     }\n }\n \n@@ -679,11 +678,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn def_kind(&self, index: DefIndex) -> Option<DefKind> {\n+    fn def_kind(&self, index: DefIndex) -> DefKind {\n         if !self.is_proc_macro(index) {\n             self.kind(index).def_kind()\n         } else {\n-            Some(DefKind::Macro(macro_kind(self.raw_proc_macro(index))))\n+            DefKind::Macro(macro_kind(self.raw_proc_macro(index)))\n         }\n     }\n \n@@ -1009,20 +1008,19 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                             .get(self, child_index)\n                             .unwrap_or(Lazy::empty());\n                         for child_index in child_children.decode((self, sess)) {\n-                            if let Some(kind) = self.def_kind(child_index) {\n-                                callback(Export {\n-                                    res: Res::Def(kind, self.local_def_id(child_index)),\n-                                    ident: self.item_ident(child_index, sess),\n-                                    vis: self.get_visibility(child_index),\n-                                    span: self\n-                                        .root\n-                                        .tables\n-                                        .span\n-                                        .get(self, child_index)\n-                                        .unwrap()\n-                                        .decode((self, sess)),\n-                                });\n-                            }\n+                            let kind = self.def_kind(child_index);\n+                            callback(Export {\n+                                res: Res::Def(kind, self.local_def_id(child_index)),\n+                                ident: self.item_ident(child_index, sess),\n+                                vis: self.get_visibility(child_index),\n+                                span: self\n+                                    .root\n+                                    .tables\n+                                    .span\n+                                    .get(self, child_index)\n+                                    .unwrap()\n+                                    .decode((self, sess)),\n+                            });\n                         }\n                         continue;\n                     }\n@@ -1033,10 +1031,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n                 let def_key = self.def_key(child_index);\n                 let span = self.get_span(child_index, sess);\n-                if let (Some(kind), true) = (\n-                    self.def_kind(child_index),\n-                    def_key.disambiguated_data.data.get_opt_name().is_some(),\n-                ) {\n+                if def_key.disambiguated_data.data.get_opt_name().is_some() {\n+                    let kind = self.def_kind(child_index);\n                     let ident = self.item_ident(child_index, sess);\n                     let vis = self.get_visibility(child_index);\n                     let def_id = self.local_def_id(child_index);"}, {"sha": "60bf7aba713be0c841a94655d08fec2169109933", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -127,7 +127,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     generator_kind => { cdata.generator_kind(def_id.index) }\n-    def_kind => { cdata.def_kind(def_id.index) }\n+    def_kind => { Some(cdata.def_kind(def_id.index)) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {\n         cdata.get_stability(def_id.index).map(|s| tcx.intern_stability(s))"}, {"sha": "d52edbfa96d667a71cab63e76f993c4a95d5d055", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -6,7 +6,7 @@ use crate::ty::TyCtxt;\n use rustc_ast::ast::{self, Name, NodeId};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -227,7 +227,12 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.opt_local_def_id_to_hir_id(def_id)\n     }\n \n-    pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n+    pub fn def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {\n+        if local_def_id.to_def_id().index == CRATE_DEF_INDEX {\n+            return Some(DefKind::Mod);\n+        }\n+\n+        let hir_id = self.local_def_id_to_hir_id(local_def_id);\n         let node = self.find(hir_id)?;\n \n         Some(match node {\n@@ -243,11 +248,11 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Union(..) => DefKind::Union,\n                 ItemKind::Trait(..) => DefKind::Trait,\n                 ItemKind::TraitAlias(..) => DefKind::TraitAlias,\n-                ItemKind::ExternCrate(_)\n-                | ItemKind::Use(..)\n-                | ItemKind::ForeignMod(..)\n-                | ItemKind::GlobalAsm(..)\n-                | ItemKind::Impl { .. } => return None,\n+                ItemKind::ExternCrate(_) => DefKind::ExternCrate,\n+                ItemKind::Use(..) => DefKind::Use,\n+                ItemKind::ForeignMod(..) => DefKind::ForeignMod,\n+                ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,\n+                ItemKind::Impl { .. } => DefKind::Impl,\n             },\n             Node::ForeignItem(item) => match item.kind {\n                 ForeignItemKind::Fn(..) => DefKind::Fn,\n@@ -277,10 +282,19 @@ impl<'hir> Map<'hir> {\n                 };\n                 DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))\n             }\n-            Node::AnonConst(_)\n-            | Node::Field(_)\n-            | Node::Expr(_)\n-            | Node::Stmt(_)\n+            Node::AnonConst(_) => DefKind::AnonConst,\n+            Node::Field(_) => DefKind::Field,\n+            Node::Expr(expr) => match expr.kind {\n+                ExprKind::Closure { .. } => DefKind::Closure,\n+                _ => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n+            },\n+            Node::MacroDef(_) => DefKind::Macro(MacroKind::Bang),\n+            Node::GenericParam(param) => match param.kind {\n+                GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,\n+                GenericParamKind::Type { .. } => DefKind::TyParam,\n+                GenericParamKind::Const { .. } => DefKind::ConstParam,\n+            },\n+            Node::Stmt(_)\n             | Node::PathSegment(_)\n             | Node::Ty(_)\n             | Node::TraitRef(_)\n@@ -292,13 +306,7 @@ impl<'hir> Map<'hir> {\n             | Node::Lifetime(_)\n             | Node::Visibility(_)\n             | Node::Block(_)\n-            | Node::Crate(_) => return None,\n-            Node::MacroDef(_) => DefKind::Macro(MacroKind::Bang),\n-            Node::GenericParam(param) => match param.kind {\n-                GenericParamKind::Lifetime { .. } => return None,\n-                GenericParamKind::Type { .. } => DefKind::TyParam,\n-                GenericParamKind::Const { .. } => DefKind::ConstParam,\n-            },\n+            | Node::Crate(_) => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n         })\n     }\n \n@@ -1082,6 +1090,5 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n-    providers.def_kind =\n-        |tcx, def_id| tcx.hir().def_kind(tcx.hir().as_local_hir_id(def_id.expect_local()));\n+    providers.def_kind = |tcx, def_id| tcx.hir().def_kind(def_id.expect_local());\n }"}, {"sha": "f0fc5c12c90dd3f3b3d8ed32a82db1b5eacd3e60", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -817,7 +817,7 @@ fn write_mir_sig(\n             write!(w, \"static {}\", if tcx.is_mutable_static(src.def_id()) { \"mut \" } else { \"\" })?\n         }\n         (_, _) if is_function => write!(w, \"fn \")?,\n-        (None, _) => {} // things like anon const, not an item\n+        (Some(DefKind::AnonConst), _) | (None, _) => {} // things like anon const, not an item\n         _ => bug!(\"Unexpected def kind {:?}\", kind),\n     }\n "}, {"sha": "86dc0bb3fdd4784a7a45dd363d73a0da71d981c7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -1,6 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n use rustc_ast::ast::Ident;\n@@ -612,8 +613,8 @@ impl EmbargoVisitor<'tcx> {\n                 }\n             }\n \n-            // These have type privacy, so are not reachable unless they're\n-            // public\n+            // These have type privacy or are not namespaced, so are not reachable unless they're\n+            // public.\n             DefKind::AssocConst\n             | DefKind::AssocTy\n             | DefKind::AssocOpaqueTy\n@@ -626,7 +627,16 @@ impl EmbargoVisitor<'tcx> {\n             | DefKind::AssocFn\n             | DefKind::Trait\n             | DefKind::TyParam\n-            | DefKind::Variant => (),\n+            | DefKind::Variant\n+            | DefKind::LifetimeParam\n+            | DefKind::ExternCrate\n+            | DefKind::Use\n+            | DefKind::ForeignMod\n+            | DefKind::AnonConst\n+            | DefKind::Field\n+            | DefKind::GlobalAsm\n+            | DefKind::Impl\n+            | DefKind::Closure => (),\n         }\n     }\n "}, {"sha": "2bf9c857d6e067160970836d216e4fe8dde4a427", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -906,7 +906,20 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {\n                 self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n             }\n-            Res::Def(DefKind::TyParam | DefKind::ConstParam, _)\n+            Res::Def(\n+                DefKind::TyParam\n+                | DefKind::ConstParam\n+                | DefKind::ExternCrate\n+                | DefKind::Use\n+                | DefKind::ForeignMod\n+                | DefKind::AnonConst\n+                | DefKind::Field\n+                | DefKind::LifetimeParam\n+                | DefKind::GlobalAsm\n+                | DefKind::Closure\n+                | DefKind::Impl,\n+                _,\n+            )\n             | Res::Local(..)\n             | Res::SelfTy(..)\n             | Res::SelfCtor(..)"}, {"sha": "7639de1c0f5e614a3eaee6c12231203603c10ba3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -2502,10 +2502,8 @@ impl<'a> Resolver<'a> {\n         }\n \n         let container = match parent.kind {\n-            ModuleKind::Def(DefKind::Mod, _, _) => \"module\",\n-            ModuleKind::Def(DefKind::Trait, _, _) => \"trait\",\n+            ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id().unwrap()),\n             ModuleKind::Block(..) => \"block\",\n-            _ => \"enum\",\n         };\n \n         let old_noun = match old_binding.is_import() {"}, {"sha": "100c32fbc2a7e3f56793961bcc8c2a9eb985a3b9", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -760,9 +760,22 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Res::Def(HirDefKind::Mod, def_id) => {\n                 Some(Ref { kind: RefKind::Mod, span, ref_id: id_from_def_id(def_id) })\n             }\n-            Res::PrimTy(..)\n+\n+            Res::Def(\n+                HirDefKind::Macro(..)\n+                | HirDefKind::ExternCrate\n+                | HirDefKind::ForeignMod\n+                | HirDefKind::LifetimeParam\n+                | HirDefKind::AnonConst\n+                | HirDefKind::Use\n+                | HirDefKind::Field\n+                | HirDefKind::GlobalAsm\n+                | HirDefKind::Impl\n+                | HirDefKind::Closure,\n+                _,\n+            )\n+            | Res::PrimTy(..)\n             | Res::SelfTy(..)\n-            | Res::Def(HirDefKind::Macro(..), _)\n             | Res::ToolMod\n             | Res::NonMacroAttr(..)\n             | Res::SelfCtor(..)"}, {"sha": "6db720470fbeaf5b92c6c1fe957706c82871d79d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5b998e08ab3082512f72069fad38c12cc9702/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cff5b998e08ab3082512f72069fad38c12cc9702", "patch": "@@ -4972,8 +4972,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n                     match def_id\n                         .as_local()\n-                        .map(|def_id| hir.as_local_hir_id(def_id))\n-                        .and_then(|hir_id| hir.def_kind(hir_id))\n+                        .and_then(|def_id| hir.def_kind(def_id))\n                     {\n                         Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n                             msg = \"instantiate this tuple variant\";"}]}