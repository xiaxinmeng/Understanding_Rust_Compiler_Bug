{"sha": "4ae582ef88adbdcd3a01686a7a61120efd7a208b", "node_id": "C_kwDOAAsO6NoAKDRhZTU4MmVmODhhZGJkY2QzYTAxNjg2YTdhNjExMjBlZmQ3YTIwOGI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-13T13:23:12Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-08T01:53:51Z"}, "message": "Don't lint `missing_docs_in_private_items` on proc-macro output", "tree": {"sha": "ed080a750a5a37a67ca88e7a3f0e19c992fbc4e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed080a750a5a37a67ca88e7a3f0e19c992fbc4e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae582ef88adbdcd3a01686a7a61120efd7a208b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae582ef88adbdcd3a01686a7a61120efd7a208b", "html_url": "https://github.com/rust-lang/rust/commit/4ae582ef88adbdcd3a01686a7a61120efd7a208b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae582ef88adbdcd3a01686a7a61120efd7a208b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e838f759b99dd3ac042a61f60a4f14272b99c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e838f759b99dd3ac042a61f60a4f14272b99c2", "html_url": "https://github.com/rust-lang/rust/commit/37e838f759b99dd3ac042a61f60a4f14272b99c2"}], "stats": {"total": 269, "additions": 212, "deletions": 57}, "files": [{"sha": "7ef80b1a5960e8288f07c5e8b229c55e5c855b45", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -7,6 +7,7 @@\n \n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_from_proc_macro;\n use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n@@ -158,14 +159,18 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n-        self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n+        if !is_from_proc_macro(cx, it) {\n+            self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n+        }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n         let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n         let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n-        self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n+        if !is_from_proc_macro(cx, trait_item) {\n+            self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n+        }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n@@ -181,18 +186,24 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n         let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n-        self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n+        if !is_from_proc_macro(cx, impl_item) {\n+            self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n+        }\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             let attrs = cx.tcx.hir().attrs(sf.hir_id);\n-            self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n+            if !is_from_proc_macro(cx, sf) {\n+                self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n+            }\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n         let attrs = cx.tcx.hir().attrs(v.id);\n-        self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n+        if !is_from_proc_macro(cx, v) {\n+            self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n+        }\n     }\n }"}, {"sha": "546242ebd9a474d1c27d8b39ad986472814f71d7", "filename": "clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -103,7 +103,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitTypes {\n         let_unit_value::check(cx, local);\n     }\n \n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         unit_cmp::check(cx, expr);\n         unit_arg::check(cx, expr);\n     }"}, {"sha": "16da2f11b81a6a6650b07d9dde5062461720c5b5", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::is_expr_from_proc_macro;\n+use clippy_utils::is_from_proc_macro;\n use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -8,7 +8,7 @@ use rustc_lint::LateContext;\n \n use super::{utils, UNIT_ARG};\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n     if expr.span.from_expansion() {\n         return;\n     }\n@@ -45,7 +45,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                     }\n                 })\n                 .collect::<Vec<_>>();\n-            if !args_to_recover.is_empty() && !is_expr_from_proc_macro(cx, expr) {\n+            if !args_to_recover.is_empty() && !is_from_proc_macro(cx, expr) {\n                 lint_unit_args(cx, expr, &args_to_recover);\n             }\n         },"}, {"sha": "4dd0ec6b6d05e67ae59df539d48f49784df134ef", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 123, "deletions": 7, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -14,17 +14,20 @@\n \n use rustc_ast::ast::{IntTy, LitIntType, LitKind, StrStyle, UintTy};\n use rustc_hir::{\n-    Block, BlockCheckMode, Closure, Destination, Expr, ExprKind, LoopSource, MatchSource, QPath, UnOp, UnsafeSource,\n-    YieldSource,\n+    Block, BlockCheckMode, Closure, Destination, Expr, ExprKind, FieldDef, FnHeader, Impl, ImplItem, ImplItemKind,\n+    IsAuto, Item, ItemKind, LoopSource, MatchSource, QPath, TraitItem, TraitItemKind, UnOp, UnsafeSource, Unsafety,\n+    Variant, VariantData, VisibilityKind, YieldSource,\n };\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::{Span, Symbol};\n+use rustc_target::spec::abi::Abi;\n \n #[derive(Clone, Copy)]\n-enum Pat {\n+pub enum Pat {\n     Str(&'static str),\n+    MultiStr(&'static [&'static str]),\n     Sym(Symbol),\n     Num,\n }\n@@ -43,10 +46,12 @@ fn span_matches_pat(sess: &Session, span: Span, start_pat: Pat, end_pat: Pat) ->\n         let end_str = s.trim_end_matches(|c: char| c.is_whitespace() || c == ')' || c == ',');\n         (match start_pat {\n             Pat::Str(text) => start_str.starts_with(text),\n+            Pat::MultiStr(texts) => texts.iter().any(|s| start_str.starts_with(s)),\n             Pat::Sym(sym) => start_str.starts_with(sym.as_str()),\n             Pat::Num => start_str.as_bytes().first().map_or(false, u8::is_ascii_digit),\n         } && match end_pat {\n             Pat::Str(text) => end_str.ends_with(text),\n+            Pat::MultiStr(texts) => texts.iter().any(|s| start_str.ends_with(s)),\n             Pat::Sym(sym) => end_str.ends_with(sym.as_str()),\n             Pat::Num => end_str.as_bytes().last().map_or(false, u8::is_ascii_hexdigit),\n         })\n@@ -155,10 +160,121 @@ fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n     }\n }\n \n-/// Checks if the expression likely came from a proc-macro\n-pub fn is_expr_from_proc_macro(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n-    let (start_pat, end_pat) = expr_search_pat(cx.tcx, e);\n-    !span_matches_pat(cx.sess(), e.span, start_pat, end_pat)\n+fn fn_header_search_pat(header: FnHeader) -> Pat {\n+    if header.is_async() {\n+        Pat::Str(\"async\")\n+    } else if header.is_const() {\n+        Pat::Str(\"const\")\n+    } else if header.is_unsafe() {\n+        Pat::Str(\"unsafe\")\n+    } else if header.abi != Abi::Rust {\n+        Pat::Str(\"extern\")\n+    } else {\n+        Pat::MultiStr(&[\"fn\", \"extern\"])\n+    }\n+}\n+\n+fn item_search_pat(item: &Item<'_>) -> (Pat, Pat) {\n+    let (start_pat, end_pat) = match &item.kind {\n+        ItemKind::ExternCrate(_) => (Pat::Str(\"extern\"), Pat::Str(\";\")),\n+        ItemKind::Static(..) => (Pat::Str(\"static\"), Pat::Str(\";\")),\n+        ItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n+        ItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n+        ItemKind::ForeignMod { .. } => (Pat::Str(\"extern\"), Pat::Str(\"}\")),\n+        ItemKind::TyAlias(..) | ItemKind::OpaqueTy(_) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        ItemKind::Enum(..) => (Pat::Str(\"enum\"), Pat::Str(\"}\")),\n+        ItemKind::Struct(VariantData::Struct(..), _) => (Pat::Str(\"struct\"), Pat::Str(\"}\")),\n+        ItemKind::Struct(..) => (Pat::Str(\"struct\"), Pat::Str(\";\")),\n+        ItemKind::Union(..) => (Pat::Str(\"union\"), Pat::Str(\"}\")),\n+        ItemKind::Trait(_, Unsafety::Unsafe, ..)\n+        | ItemKind::Impl(Impl {\n+            unsafety: Unsafety::Unsafe,\n+            ..\n+        }) => (Pat::Str(\"unsafe\"), Pat::Str(\"}\")),\n+        ItemKind::Trait(IsAuto::Yes, ..) => (Pat::Str(\"auto\"), Pat::Str(\"}\")),\n+        ItemKind::Trait(..) => (Pat::Str(\"trait\"), Pat::Str(\"}\")),\n+        ItemKind::Impl(_) => (Pat::Str(\"impl\"), Pat::Str(\"}\")),\n+        _ => return (Pat::Str(\"\"), Pat::Str(\"\")),\n+    };\n+    if matches!(item.vis.node, VisibilityKind::Inherited) {\n+        (start_pat, end_pat)\n+    } else {\n+        (Pat::Str(\"pub\"), end_pat)\n+    }\n+}\n+\n+fn trait_item_search_pat(item: &TraitItem<'_>) -> (Pat, Pat) {\n+    match &item.kind {\n+        TraitItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n+        TraitItemKind::Type(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        TraitItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n+    }\n+}\n+\n+fn impl_item_search_pat(item: &ImplItem<'_>) -> (Pat, Pat) {\n+    let (start_pat, end_pat) = match &item.kind {\n+        ImplItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n+        ImplItemKind::TyAlias(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        ImplItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n+    };\n+    if matches!(item.vis.node, VisibilityKind::Inherited) {\n+        (start_pat, end_pat)\n+    } else {\n+        (Pat::Str(\"pub\"), end_pat)\n+    }\n+}\n+\n+fn field_def_search_pat(def: &FieldDef<'_>) -> (Pat, Pat) {\n+    if matches!(def.vis.node, VisibilityKind::Inherited) {\n+        if def.is_positional() {\n+            (Pat::Str(\"\"), Pat::Str(\"\"))\n+        } else {\n+            (Pat::Sym(def.ident.name), Pat::Str(\"\"))\n+        }\n+    } else {\n+        (Pat::Str(\"pub\"), Pat::Str(\"\"))\n+    }\n+}\n+\n+fn variant_search_pat(v: &Variant<'_>) -> (Pat, Pat) {\n+    match v.data {\n+        VariantData::Struct(..) => (Pat::Sym(v.ident.name), Pat::Str(\"}\")),\n+        VariantData::Tuple(..) => (Pat::Sym(v.ident.name), Pat::Str(\"\")),\n+        VariantData::Unit(..) => (Pat::Sym(v.ident.name), Pat::Sym(v.ident.name)),\n+    }\n+}\n+\n+pub trait WithSearchPat {\n+    type Context: LintContext;\n+    fn search_pat(&self, cx: &Self::Context) -> (Pat, Pat);\n+    fn span(&self) -> Span;\n+}\n+macro_rules! impl_with_search_pat {\n+    ($cx:ident: $ty:ident with $fn:ident $(($tcx:ident))?) => {\n+        impl<'cx> WithSearchPat for $ty<'cx> {\n+            type Context = $cx<'cx>;\n+            #[allow(unused_variables)]\n+            fn search_pat(&self, cx: &Self::Context) -> (Pat, Pat) {\n+                $(let $tcx = cx.tcx;)?\n+                $fn($($tcx,)? self)\n+            }\n+            fn span(&self) -> Span {\n+                self.span\n+            }\n+        }\n+    };\n+}\n+impl_with_search_pat!(LateContext: Expr with expr_search_pat(tcx));\n+impl_with_search_pat!(LateContext: Item with item_search_pat);\n+impl_with_search_pat!(LateContext: TraitItem with trait_item_search_pat);\n+impl_with_search_pat!(LateContext: ImplItem with impl_item_search_pat);\n+impl_with_search_pat!(LateContext: FieldDef with field_def_search_pat);\n+impl_with_search_pat!(LateContext: Variant with variant_search_pat);\n+\n+/// Checks if the item likely came from a proc-macro\n+pub fn is_from_proc_macro<T: WithSearchPat>(cx: &T::Context, item: &T) -> bool {\n+    let (start_pat, end_pat) = item.search_pat(cx);\n+    !span_matches_pat(cx.sess(), item.span(), start_pat, end_pat)\n }\n \n /// Checks if the span actually refers to a match expression"}, {"sha": "dcfc03475b423d134252b1eedd5c1db22e972a1d", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -59,7 +59,7 @@ pub mod usage;\n pub mod visitors;\n \n pub use self::attrs::*;\n-pub use self::check_proc_macro::{is_expr_from_proc_macro, is_span_if, is_span_match};\n+pub use self::check_proc_macro::{is_from_proc_macro, is_span_if, is_span_match};\n pub use self::hir_utils::{\n     both, count_eq, eq_expr_value, hash_expr, hash_stmt, over, HirEqInterExpr, SpanlessEq, SpanlessHash,\n };"}, {"sha": "29cc026a8fd394e21b033bb1f45c9b8614252087", "filename": "tests/ui/missing_doc.rs", "status": "renamed", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -1,10 +1,15 @@\n+// aux-build: proc_macro_with_span.rs\n+\n #![warn(clippy::missing_docs_in_private_items)]\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n #![allow(dead_code)]\n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n use std::arch::global_asm;\n \n type Typedef = String;\n@@ -100,3 +105,11 @@ fn main() {}\n \n // Ensure global asm doesn't require documentation.\n global_asm! { \"\" }\n+\n+// Don't lint proc macro output with an unexpected span.\n+with_span!(span pub struct FooPm { pub field: u32});\n+with_span!(span pub struct FooPm2;);\n+with_span!(span pub enum FooPm3 { A, B(u32), C { field: u32 }});\n+with_span!(span pub fn foo_pm() {});\n+with_span!(span pub static FOO_PM: u32 = 0;);\n+with_span!(span pub const FOO2_PM: u32 = 0;);", "previous_filename": "tests/ui/missing-doc.rs"}, {"sha": "6c8e66f464377c9f1fd0f36415b1a35926f558f7", "filename": "tests/ui/missing_doc.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc.stderr?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -1,43 +1,43 @@\n error: missing documentation for a type alias\n-  --> $DIR/missing-doc.rs:10:1\n+  --> $DIR/missing_doc.rs:15:1\n    |\n LL | type Typedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n \n error: missing documentation for a type alias\n-  --> $DIR/missing-doc.rs:11:1\n+  --> $DIR/missing_doc.rs:16:1\n    |\n LL | pub type PubTypedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:13:1\n+  --> $DIR/missing_doc.rs:18:1\n    |\n LL | mod module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:14:1\n+  --> $DIR/missing_doc.rs:19:1\n    |\n LL | pub mod pub_module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:18:1\n+  --> $DIR/missing_doc.rs:23:1\n    |\n LL | pub fn foo2() {}\n    | ^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:19:1\n+  --> $DIR/missing_doc.rs:24:1\n    |\n LL | fn foo3() {}\n    | ^^^^^^^^^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing-doc.rs:33:1\n+  --> $DIR/missing_doc.rs:38:1\n    |\n LL | / enum Baz {\n LL | |     BazA { a: isize, b: isize },\n@@ -46,75 +46,75 @@ LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:34:5\n+  --> $DIR/missing_doc.rs:39:5\n    |\n LL |     BazA { a: isize, b: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:34:12\n+  --> $DIR/missing_doc.rs:39:12\n    |\n LL |     BazA { a: isize, b: isize },\n    |            ^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:34:22\n+  --> $DIR/missing_doc.rs:39:22\n    |\n LL |     BazA { a: isize, b: isize },\n    |                      ^^^^^^^^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:35:5\n+  --> $DIR/missing_doc.rs:40:5\n    |\n LL |     BarB,\n    |     ^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing-doc.rs:38:1\n+  --> $DIR/missing_doc.rs:43:1\n    |\n LL | / pub enum PubBaz {\n LL | |     PubBazA { a: isize },\n LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:39:5\n+  --> $DIR/missing_doc.rs:44:5\n    |\n LL |     PubBazA { a: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:39:15\n+  --> $DIR/missing_doc.rs:44:15\n    |\n LL |     PubBazA { a: isize },\n    |               ^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing-doc.rs:59:1\n+  --> $DIR/missing_doc.rs:64:1\n    |\n LL | const FOO: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing-doc.rs:66:1\n+  --> $DIR/missing_doc.rs:71:1\n    |\n LL | pub const FOO4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing-doc.rs:68:1\n+  --> $DIR/missing_doc.rs:73:1\n    |\n LL | static BAR: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing-doc.rs:75:1\n+  --> $DIR/missing_doc.rs:80:1\n    |\n LL | pub static BAR4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:77:1\n+  --> $DIR/missing_doc.rs:82:1\n    |\n LL | / mod internal_impl {\n LL | |     /// dox\n@@ -126,31 +126,31 @@ LL | | }\n    | |_^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:80:5\n+  --> $DIR/missing_doc.rs:85:5\n    |\n LL |     pub fn undocumented1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:81:5\n+  --> $DIR/missing_doc.rs:86:5\n    |\n LL |     pub fn undocumented2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:82:5\n+  --> $DIR/missing_doc.rs:87:5\n    |\n LL |     fn undocumented3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:87:9\n+  --> $DIR/missing_doc.rs:92:9\n    |\n LL |         pub fn also_undocumented1() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:88:9\n+  --> $DIR/missing_doc.rs:93:9\n    |\n LL |         fn also_undocumented2() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/missing-doc.stderr"}, {"sha": "e00c7fbfed15745932a1929049ef96f943ae5fd2", "filename": "tests/ui/missing_doc_crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_crate.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "previous_filename": "tests/ui/missing-doc-crate.rs"}, {"sha": "51fd57df8df1da962322d50dc6edcf85726e9661", "filename": "tests/ui/missing_doc_crate_missing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_crate_missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_crate_missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_crate_missing.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "previous_filename": "tests/ui/missing-doc-crate-missing.rs"}, {"sha": "19516bf5fab0e176caf6c1dd4d42bd6519d9a7f9", "filename": "tests/ui/missing_doc_crate_missing.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_crate_missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_crate_missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_crate_missing.stderr?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -1,5 +1,5 @@\n error: missing documentation for the crate\n-  --> $DIR/missing-doc-crate-missing.rs:1:1\n+  --> $DIR/missing_doc_crate_missing.rs:1:1\n    |\n LL | / #![warn(clippy::missing_docs_in_private_items)]\n LL | |", "previous_filename": "tests/ui/missing-doc-crate-missing.stderr"}, {"sha": "0396d1193ff5c2b1e3d330e9d8d5b2b1c5cedc7b", "filename": "tests/ui/missing_doc_impl.rs", "status": "renamed", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.rs?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -1,10 +1,15 @@\n+// aux-build: proc_macro_with_span.rs\n+\n #![warn(clippy::missing_docs_in_private_items)]\n #![allow(dead_code)]\n #![feature(associated_type_defaults)]\n \n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n struct Foo {\n     a: isize,\n     b: isize,\n@@ -90,3 +95,13 @@ impl F for Foo {\n }\n \n fn main() {}\n+\n+// don't lint proc macro output\n+with_span!(span\n+    pub struct FooPm;\n+    impl FooPm {\n+        pub fn foo() {}\n+        pub const fn bar() {}\n+        pub const X: u32 = 0;\n+    }\n+);", "previous_filename": "tests/ui/missing-doc-impl.rs"}, {"sha": "f22fa19dbcabc912ed543f1c26228442e7229974", "filename": "tests/ui/missing_doc_impl.stderr", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ae582ef88adbdcd3a01686a7a61120efd7a208b/tests%2Fui%2Fmissing_doc_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.stderr?ref=4ae582ef88adbdcd3a01686a7a61120efd7a208b", "patch": "@@ -1,5 +1,5 @@\n error: missing documentation for a struct\n-  --> $DIR/missing-doc-impl.rs:8:1\n+  --> $DIR/missing_doc_impl.rs:13:1\n    |\n LL | / struct Foo {\n LL | |     a: isize,\n@@ -10,19 +10,19 @@ LL | | }\n    = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:9:5\n+  --> $DIR/missing_doc_impl.rs:14:5\n    |\n LL |     a: isize,\n    |     ^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:10:5\n+  --> $DIR/missing_doc_impl.rs:15:5\n    |\n LL |     b: isize,\n    |     ^^^^^^^^\n \n error: missing documentation for a struct\n-  --> $DIR/missing-doc-impl.rs:13:1\n+  --> $DIR/missing_doc_impl.rs:18:1\n    |\n LL | / pub struct PubFoo {\n LL | |     pub a: isize,\n@@ -31,19 +31,19 @@ LL | | }\n    | |_^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:14:5\n+  --> $DIR/missing_doc_impl.rs:19:5\n    |\n LL |     pub a: isize,\n    |     ^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:15:5\n+  --> $DIR/missing_doc_impl.rs:20:5\n    |\n LL |     b: isize,\n    |     ^^^^^^^^\n \n error: missing documentation for a trait\n-  --> $DIR/missing-doc-impl.rs:38:1\n+  --> $DIR/missing_doc_impl.rs:43:1\n    |\n LL | / pub trait C {\n LL | |     fn foo(&self);\n@@ -52,51 +52,51 @@ LL | | }\n    | |_^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:39:5\n+  --> $DIR/missing_doc_impl.rs:44:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:40:5\n+  --> $DIR/missing_doc_impl.rs:45:5\n    |\n LL |     fn foo_with_impl(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/missing-doc-impl.rs:50:5\n+  --> $DIR/missing_doc_impl.rs:55:5\n    |\n LL |     type AssociatedType;\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/missing-doc-impl.rs:51:5\n+  --> $DIR/missing_doc_impl.rs:56:5\n    |\n LL |     type AssociatedTypeDef = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:62:5\n+  --> $DIR/missing_doc_impl.rs:67:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Foo { a: 0, b: 0 }\n LL | |     }\n    | |_____^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:65:5\n+  --> $DIR/missing_doc_impl.rs:70:5\n    |\n LL |     fn bar() {}\n    |     ^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:69:5\n+  --> $DIR/missing_doc_impl.rs:74:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:73:5\n+  --> $DIR/missing_doc_impl.rs:78:5\n    |\n LL | /     fn foo2() -> u32 {\n LL | |         1", "previous_filename": "tests/ui/missing-doc-impl.stderr"}]}