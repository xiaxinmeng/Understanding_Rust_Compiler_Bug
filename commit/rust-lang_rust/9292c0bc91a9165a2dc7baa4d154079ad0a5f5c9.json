{"sha": "9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOTJjMGJjOTFhOTE2NWEyZGM3YmFhNGQxNTQwNzlhZDBhNWY1Yzk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-16T21:15:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-18T19:51:18Z"}, "message": "Properly feature gate all unstable ABIs", "tree": {"sha": "eda6051124a021d6ee33964d10a73d189b171c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eda6051124a021d6ee33964d10a73d189b171c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "html_url": "https://github.com/rust-lang/rust/commit/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ca016b6e779ba972efb9d1735afc527d301505", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ca016b6e779ba972efb9d1735afc527d301505", "html_url": "https://github.com/rust-lang/rust/commit/06ca016b6e779ba972efb9d1735afc527d301505"}], "stats": {"total": 176, "additions": 103, "deletions": 73}, "files": [{"sha": "defa63b916928c799aa276196604dc5f7812f966", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "patch": "@@ -223,6 +223,7 @@ trait system to overload operators. Calling functions is no different. We have\n three separate traits to overload with:\n \n ```rust\n+# #![feature(unboxed_closures)]\n # mod foo {\n pub trait Fn<Args> : FnMut<Args> {\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;"}, {"sha": "2b79a7012e31f6f451678cca94ff088af11204a6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "patch": "@@ -800,6 +800,29 @@ macro_rules! gate_feature_post {\n     }}\n }\n \n+impl<'a> PostExpansionVisitor<'a> {\n+    fn check_abi(&self, abi: Abi, span: Span) {\n+        match abi {\n+            Abi::RustIntrinsic =>\n+                gate_feature_post!(&self, intrinsics, span,\n+                                   \"intrinsics are subject to change\"),\n+            Abi::PlatformIntrinsic => {\n+                gate_feature_post!(&self, platform_intrinsics, span,\n+                                   \"platform intrinsics are experimental and possibly buggy\")\n+            },\n+            Abi::Vectorcall => {\n+                gate_feature_post!(&self, abi_vectorcall, span,\n+                                   \"vectorcall is experimental and subject to change\")\n+            }\n+            Abi::RustCall => {\n+                gate_feature_post!(&self, unboxed_closures, span,\n+                                   \"rust-call ABI is subject to change\");\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n impl<'a> Visitor for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         if !self.context.cm.span_allows_unstable(attr.span) {\n@@ -831,21 +854,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                                        across platforms, it is recommended to \\\n                                        use `#[link(name = \\\"foo\\\")]` instead\")\n                 }\n-                match foreign_module.abi {\n-                    Abi::RustIntrinsic =>\n-                        gate_feature_post!(&self, intrinsics, i.span,\n-                                           \"intrinsics are subject to change\"),\n-                    Abi::PlatformIntrinsic => {\n-                        gate_feature_post!(&self, platform_intrinsics, i.span,\n-                                           \"platform intrinsics are experimental \\\n-                                            and possibly buggy\")\n-                    },\n-                    Abi::Vectorcall => {\n-                        gate_feature_post!(&self, abi_vectorcall, i.span,\n-                                           \"vectorcall is experimental and subject to change\")\n-                    }\n-                    _ => ()\n-                }\n+                self.check_abi(foreign_module.abi, i.span);\n             }\n \n             ast::ItemKind::Fn(..) => {\n@@ -928,6 +937,16 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n         visit::walk_foreign_item(self, i)\n     }\n \n+    fn visit_ty(&mut self, ty: &ast::Ty) {\n+        match ty.node {\n+            ast::TyKind::BareFn(ref bare_fn_ty) => {\n+                self.check_abi(bare_fn_ty.abi, ty.span);\n+            }\n+            _ => {}\n+        }\n+        visit::walk_ty(self, ty)\n+    }\n+\n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n             ast::ExprKind::Box(_) => {\n@@ -1015,23 +1034,10 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n         }\n \n         match fn_kind {\n-            FnKind::ItemFn(_, _, _, _, abi, _) if abi == Abi::RustIntrinsic => {\n-                gate_feature_post!(&self, intrinsics,\n-                                  span,\n-                                  \"intrinsics are subject to change\")\n-            }\n             FnKind::ItemFn(_, _, _, _, abi, _) |\n-            FnKind::Method(_, &ast::MethodSig { abi, .. }, _) => match abi {\n-                Abi::RustCall => {\n-                    gate_feature_post!(&self, unboxed_closures, span,\n-                        \"rust-call ABI is subject to change\");\n-                },\n-                Abi::Vectorcall => {\n-                    gate_feature_post!(&self, abi_vectorcall, span,\n-                        \"vectorcall is experimental and subject to change\");\n-                },\n-                _ => {}\n-            },\n+            FnKind::Method(_, &ast::MethodSig { abi, .. }, _) => {\n+                self.check_abi(abi, span);\n+            }\n             _ => {}\n         }\n         visit::walk_fn(self, fn_kind, fn_decl, block, span);\n@@ -1044,7 +1050,10 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                                   ti.span,\n                                   \"associated constants are experimental\")\n             }\n-            ast::TraitItemKind::Method(ref sig, _) => {\n+            ast::TraitItemKind::Method(ref sig, ref block) => {\n+                if block.is_none() {\n+                    self.check_abi(sig.abi, ti.span);\n+                }\n                 if sig.constness == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");\n                 }"}, {"sha": "2a731596b4be8005c57ac9ba2ecdee156654b9d4", "filename": "src/test/compile-fail/E0045.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Ftest%2Fcompile-fail%2FE0045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Ftest%2Fcompile-fail%2FE0045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0045.rs?ref=9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern \"rust-call\" { fn foo(x: u8, ...); } //~ ERROR E0045\n+extern \"Rust\" { fn foo(x: u8, ...); } //~ ERROR E0045\n \n fn main() {\n }"}, {"sha": "79f3c8dc7762589a5d440a1011720b641f1da6f8", "filename": "src/test/compile-fail/feature-gate-abi-vectorcall.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06ca016b6e779ba972efb9d1735afc527d301505/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-vectorcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ca016b6e779ba972efb9d1735afc527d301505/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-vectorcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi-vectorcall.rs?ref=06ca016b6e779ba972efb9d1735afc527d301505", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern \"vectorcall\" {   //~ ERROR vectorcall is experimental and subject to change\n-    fn bar();\n-}\n-\n-extern \"vectorcall\" fn baz() {  //~ ERROR vectorcall is experimental and subject to change\n-}\n-\n-fn main() {\n-}"}, {"sha": "0c01f955c063bbdf5c5a605b36eac664592d55b5", "filename": "src/test/compile-fail/feature-gate-abi.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs?ref=9292c0bc91a9165a2dc7baa4d154079ad0a5f5c9", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Functions\n+extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n+extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n+extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n+extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n+\n+// Methods in trait definition\n+trait Tr {\n+    extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n+    extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n+    extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n+    extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n+\n+    extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n+    extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n+    extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n+    extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n+}\n+\n+struct S;\n+\n+// Methods in trait impl\n+impl Tr for S {\n+    extern \"rust-intrinsic\" fn m1() {} //~ ERROR intrinsics are subject to change\n+    extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n+    extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n+    extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n+}\n+\n+// Methods in inherent impl\n+impl S {\n+    extern \"rust-intrinsic\" fn im1() {} //~ ERROR intrinsics are subject to change\n+    extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n+    extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n+    extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n+}\n+\n+// Function pointer types\n+type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n+type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n+type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n+type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n+\n+// Foreign modules\n+extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n+extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n+extern \"vectorcall\" {} //~ ERROR vectorcall is experimental and subject to change\n+extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n+\n+fn main() {}"}, {"sha": "029a9cad65fcfe3869fa53904eb47ca1dbfad181", "filename": "src/test/compile-fail/feature-gate-rust-call.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06ca016b6e779ba972efb9d1735afc527d301505/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ca016b6e779ba972efb9d1735afc527d301505/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rust-call.rs?ref=06ca016b6e779ba972efb9d1735afc527d301505", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern \"rust-call\" fn foo() { } //~ ERROR rust-call ABI is subject to change\n-\n-trait Foo {\n-    extern \"rust-call\" fn foo();\n-}\n-\n-impl Foo for i32 {\n-    extern \"rust-call\" fn foo() { } //~ ERROR rust-call ABI is subject to change\n-}\n-\n-fn main() { }"}]}