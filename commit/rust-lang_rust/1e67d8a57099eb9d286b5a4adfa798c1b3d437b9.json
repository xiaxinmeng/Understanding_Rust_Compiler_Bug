{"sha": "1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjdkOGE1NzA5OWViOWQyODZiNWE0YWRmYTc5OGMxYjNkNDM3Yjk=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-10T05:31:19Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-27T05:25:47Z"}, "message": "deriving: factor out discriminant_value construction", "tree": {"sha": "335f24e8fd32062f457819cae29f262cfefd30bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335f24e8fd32062f457819cae29f262cfefd30bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "html_url": "https://github.com/rust-lang/rust/commit/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5972ee354c3b76c1d34df8eb0cbd5e9a6b48e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5972ee354c3b76c1d34df8eb0cbd5e9a6b48e7", "html_url": "https://github.com/rust-lang/rust/commit/dd5972ee354c3b76c1d34df8eb0cbd5e9a6b48e7"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "7d452b14dae84ce3fb05fa32fadb9b134a451370", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "patch": "@@ -209,6 +209,8 @@ use syntax::ptr::P;\n \n use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n \n+use deriving;\n+\n pub mod ty;\n \n pub struct TraitDef<'a> {\n@@ -381,22 +383,6 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n     visitor.types\n }\n \n-/// Replacement for expr_unreachable which generates intrinsics::unreachable()\n-/// instead of unreachable!()\n-fn expr_unreachable_intrinsic(cx: &ExtCtxt, sp: Span) -> P<Expr> {\n-    let path = cx.std_path(&[\"intrinsics\", \"unreachable\"]);\n-    let call = cx.expr_call_global(\n-        sp, path, vec![]);\n-    let unreachable = cx.expr_block(P(ast::Block {\n-        stmts: vec![],\n-        expr: Some(call),\n-        id: ast::DUMMY_NODE_ID,\n-        rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-        span: sp }));\n-\n-    unreachable\n-}\n-\n impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n@@ -1279,15 +1265,11 @@ impl<'a> MethodDef<'a> {\n \n             let mut first_ident = None;\n             for (&ident, self_arg) in vi_idents.iter().zip(&self_args) {\n-                let path = cx.std_path(&[\"intrinsics\", \"discriminant_value\"]);\n-                let call = cx.expr_call_global(\n-                    sp, path, vec![cx.expr_addr_of(sp, self_arg.clone())]);\n-                let variant_value = cx.expr_block(P(ast::Block {\n-                    stmts: vec![],\n-                    expr: Some(call),\n-                    id: ast::DUMMY_NODE_ID,\n-                    rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-                    span: sp }));\n+                let self_addr = cx.expr_addr_of(sp, self_arg.clone());\n+                let variant_value = deriving::call_intrinsic(cx,\n+                                                             sp,\n+                                                             \"discriminant_value\",\n+                                                             vec![self_addr]);\n \n                 let target_ty = cx.ty_ident(sp, cx.ident_of(target_type_name));\n                 let variant_disr = cx.expr_cast(sp, variant_value, target_ty);\n@@ -1315,7 +1297,9 @@ impl<'a> MethodDef<'a> {\n             //Since we know that all the arguments will match if we reach the match expression we\n             //add the unreachable intrinsics as the result of the catch all which should help llvm\n             //in optimizing it\n-            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], expr_unreachable_intrinsic(cx, sp)));\n+            match_arms.push(cx.arm(sp,\n+                                   vec![cx.pat_wild(sp)],\n+                                   deriving::call_intrinsic(cx, sp, \"unreachable\", vec![])));\n \n             // Final wrinkle: the self_args are expressions that deref\n             // down to desired l-values, but we cannot actually deref\n@@ -1391,7 +1375,7 @@ impl<'a> MethodDef<'a> {\n             // derive Debug on such a type could here generate code\n             // that needs the feature gate enabled.)\n \n-            expr_unreachable_intrinsic(cx, sp)\n+            deriving::call_intrinsic(cx, sp, \"unreachable\", vec![])\n         }\n         else {\n "}, {"sha": "c37ae116d379be84c496ad42e604f8cba24cb28c", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "patch": "@@ -12,7 +12,7 @@ use deriving;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{self, MetaItem, Expr, Mutability};\n+use syntax::ast::{MetaItem, Expr, Mutability};\n use syntax::codemap::Span;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n@@ -82,15 +82,10 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n     let fields = match *substr.fields {\n         Struct(_, ref fs) => fs,\n         EnumMatching(_, _, ref fs) => {\n-            let path = cx.std_path(&[\"intrinsics\", \"discriminant_value\"]);\n-            let call = cx.expr_call_global(\n-                trait_span, path, vec![cx.expr_self(trait_span)]);\n-            let variant_value = cx.expr_block(P(ast::Block {\n-                stmts: vec![],\n-                expr: Some(call),\n-                id: ast::DUMMY_NODE_ID,\n-                rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-                span: trait_span }));\n+            let variant_value = deriving::call_intrinsic(cx,\n+                                                         trait_span,\n+                                                         \"discriminant_value\",\n+                                                         vec![cx.expr_self(trait_span)]);\n \n             stmts.push(call_hash(trait_span, variant_value));\n "}, {"sha": "92a141fb4ec863f43db5666b4c251fa030f29b94", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "patch": "@@ -18,6 +18,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n use syntax::codemap::Span;\n use syntax::parse::token::{intern, intern_and_get_ident};\n+use syntax::ptr::P;\n \n macro_rules! pathvec {\n     ($($x:ident)::+) => (\n@@ -271,3 +272,19 @@ fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n     typaram\n }\n \n+/// Constructs an expression that calls an intrinsic\n+fn call_intrinsic(cx: &ExtCtxt,\n+                  span: Span,\n+                  intrinsic: &str,\n+                  args: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n+    let path = cx.std_path(&[\"intrinsics\", intrinsic]);\n+    let call = cx.expr_call_global(span, path, args);\n+\n+    cx.expr_block(P(ast::Block {\n+        stmts: vec![],\n+        expr: Some(call),\n+        id: ast::DUMMY_NODE_ID,\n+        rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n+        span: span }))\n+}\n+"}]}