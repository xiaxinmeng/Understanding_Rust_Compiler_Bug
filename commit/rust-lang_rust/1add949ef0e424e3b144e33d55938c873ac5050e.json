{"sha": "1add949ef0e424e3b144e33d55938c873ac5050e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZGQ5NDllZjBlNDI0ZTNiMTQ0ZTMzZDU1OTM4Yzg3M2FjNTA1MGU=", "commit": {"author": {"name": "Paul Emmerich", "email": "paul.emmerich@croit.io", "date": "2019-07-11T20:23:00Z"}, "committer": {"name": "Paul Emmerich", "email": "paul.emmerich@croit.io", "date": "2019-07-11T20:23:00Z"}, "message": "libtest: add --show-output option\n\nthis new flag enables printing the captured stdout of successful tests\nutilizing the already existing display_output test runner option", "tree": {"sha": "f2d4468038ff6e0864a7db59b89b1081be80d7a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d4468038ff6e0864a7db59b89b1081be80d7a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1add949ef0e424e3b144e33d55938c873ac5050e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1add949ef0e424e3b144e33d55938c873ac5050e", "html_url": "https://github.com/rust-lang/rust/commit/1add949ef0e424e3b144e33d55938c873ac5050e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1add949ef0e424e3b144e33d55938c873ac5050e/comments", "author": {"login": "emmericp", "id": 8938753, "node_id": "MDQ6VXNlcjg5Mzg3NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/8938753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emmericp", "html_url": "https://github.com/emmericp", "followers_url": "https://api.github.com/users/emmericp/followers", "following_url": "https://api.github.com/users/emmericp/following{/other_user}", "gists_url": "https://api.github.com/users/emmericp/gists{/gist_id}", "starred_url": "https://api.github.com/users/emmericp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emmericp/subscriptions", "organizations_url": "https://api.github.com/users/emmericp/orgs", "repos_url": "https://api.github.com/users/emmericp/repos", "events_url": "https://api.github.com/users/emmericp/events{/privacy}", "received_events_url": "https://api.github.com/users/emmericp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emmericp", "id": 8938753, "node_id": "MDQ6VXNlcjg5Mzg3NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/8938753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emmericp", "html_url": "https://github.com/emmericp", "followers_url": "https://api.github.com/users/emmericp/followers", "following_url": "https://api.github.com/users/emmericp/following{/other_user}", "gists_url": "https://api.github.com/users/emmericp/gists{/gist_id}", "starred_url": "https://api.github.com/users/emmericp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emmericp/subscriptions", "organizations_url": "https://api.github.com/users/emmericp/orgs", "repos_url": "https://api.github.com/users/emmericp/repos", "events_url": "https://api.github.com/users/emmericp/events{/privacy}", "received_events_url": "https://api.github.com/users/emmericp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "html_url": "https://github.com/rust-lang/rust/commit/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "21a7c39f72e9299eb0dd3d76d99ebb4bb1c6a3b1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=1add949ef0e424e3b144e33d55938c873ac5050e", "patch": "@@ -154,6 +154,6 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n \n     options.test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&options.test_args, collector.tests,\n-                       testing::Options::new().display_output(options.display_warnings));\n+                       Some(testing::Options::new().display_output(options.display_warnings)));\n     0\n }"}, {"sha": "562d98a4a4327eb34969e1e7e47b92ce96ca5509", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1add949ef0e424e3b144e33d55938c873ac5050e", "patch": "@@ -120,7 +120,7 @@ pub fn run(options: Options) -> i32 {\n     testing::test_main(\n         &test_args,\n         tests,\n-        testing::Options::new().display_output(display_warnings)\n+        Some(testing::Options::new().display_output(display_warnings))\n     );\n \n     0"}, {"sha": "a1ce45dad4e9ea668cbc23d115140fc5a5b1c674", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=1add949ef0e424e3b144e33d55938c873ac5050e", "patch": "@@ -272,7 +272,7 @@ impl Options {\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs.\n-pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Options) {\n+pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Option<Options>) {\n     let mut opts = match parse_opts(args) {\n         Some(Ok(o)) => o,\n         Some(Err(msg)) => {\n@@ -281,8 +281,9 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn>, options: Options) {\n         }\n         None => return,\n     };\n-\n-    opts.options = options;\n+    if let Some(options) = options {\n+        opts.options = options;\n+    }\n     if opts.list {\n         if let Err(e) = list_tests_console(&opts, tests) {\n             eprintln!(\"error: io error when listing tests: {:?}\", e);\n@@ -323,7 +324,7 @@ pub fn test_main_static(tests: &[&TestDescAndFn]) {\n             _ => panic!(\"non-static tests passed to test::test_main_static\"),\n         })\n         .collect();\n-    test_main(&args, owned_tests, Options::new())\n+    test_main(&args, owned_tests, None)\n }\n \n /// Invoked when unit tests terminate. Should panic if the unit\n@@ -468,6 +469,11 @@ fn optgroups() -> getopts::Options {\n             json   = Output a json document\",\n             \"pretty|terse|json\",\n         )\n+        .optflag(\n+            \"\",\n+            \"show-output\",\n+            \"Show captured stdout of successful tests\"\n+        )\n         .optopt(\n             \"Z\",\n             \"\",\n@@ -667,7 +673,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         format,\n         test_threads,\n         skip: matches.opt_strs(\"skip\"),\n-        options: Options::new(),\n+        options: Options::new().display_output(matches.opt_present(\"show-output\")),\n     };\n \n     Some(Ok(test_opts))"}, {"sha": "5956526e894039e5a1edfb94bad3f08d18d30c17", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1add949ef0e424e3b144e33d55938c873ac5050e/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=1add949ef0e424e3b144e33d55938c873ac5050e", "patch": "@@ -160,6 +160,17 @@ fn parse_ignored_flag() {\n     assert_eq!(opts.run_ignored, RunIgnored::Only);\n }\n \n+#[test]\n+fn parse_show_output_flag() {\n+    let args = vec![\n+        \"progname\".to_string(),\n+        \"filter\".to_string(),\n+        \"--show-output\".to_string(),\n+    ];\n+    let opts = parse_opts(&args).unwrap().unwrap();\n+    assert!(opts.options.display_output);\n+}\n+\n #[test]\n fn parse_include_ignored_flag() {\n     let args = vec!["}]}