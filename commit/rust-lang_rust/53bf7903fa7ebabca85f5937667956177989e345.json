{"sha": "53bf7903fa7ebabca85f5937667956177989e345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYmY3OTAzZmE3ZWJhYmNhODVmNTkzNzY2Nzk1NjE3Nzk4OWUzNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-29T23:01:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-29T23:01:45Z"}, "message": "Auto merge of #43009 - GuillaumeGomez:unused-doc-comments, r=nrc\n\nThrow errors when doc comments are added where they're unused\n\n#42617", "tree": {"sha": "ec30eabce66b14bc4412ea97e3537ce975fed1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec30eabce66b14bc4412ea97e3537ce975fed1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53bf7903fa7ebabca85f5937667956177989e345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53bf7903fa7ebabca85f5937667956177989e345", "html_url": "https://github.com/rust-lang/rust/commit/53bf7903fa7ebabca85f5937667956177989e345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53bf7903fa7ebabca85f5937667956177989e345/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfe1668ca3ddb3dc57b1af319e258a16664486fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe1668ca3ddb3dc57b1af319e258a16664486fa", "html_url": "https://github.com/rust-lang/rust/commit/cfe1668ca3ddb3dc57b1af319e258a16664486fa"}, {"sha": "3142ca0a6562ecf4653e2f1b1da19de6270322ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3142ca0a6562ecf4653e2f1b1da19de6270322ec", "html_url": "https://github.com/rust-lang/rust/commit/3142ca0a6562ecf4653e2f1b1da19de6270322ec"}], "stats": {"total": 149, "additions": 112, "deletions": 37}, "files": [{"sha": "18d97972cd3e5b22bc44aaa39bf399482b439596", "filename": "src/Cargo.lock", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -187,7 +187,7 @@ dependencies = [\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"docopt 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.11.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs2 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -323,7 +323,7 @@ name = \"crates-io\"\n version = \"0.11.0\"\n dependencies = [\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.11.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -436,6 +436,14 @@ dependencies = [\n  \"backtrace 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"error-chain\"\n+version = \"0.11.0-rc.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"backtrace 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n@@ -2145,6 +2153,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n \"checksum error-chain 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9435d864e017c3c6afeac1654189b06cdb491cf2ff73dbf0d73b0f292f42ff8\"\n+\"checksum error-chain 0.11.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38d3a55d9a7a456748f2a3912c0941a5d9a68006eb15b3c3c9836b8420dc102d\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n \"checksum flate2 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36df0166e856739905cd3d7e0b210fe818592211a008862599845e012d8d304c\"\n \"checksum fnv 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6cc484842f1e2884faf56f529f960cc12ad8c71ce96cc7abba0a067c98fee344\""}, {"sha": "a3a133daa09c460bb7a3beec60612ce702a6aeb5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -892,6 +892,13 @@ impl Decl_ {\n             DeclItem(_) => &[]\n         }\n     }\n+\n+    pub fn is_local(&self) -> bool {\n+        match *self {\n+            Decl_::DeclLocal(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// represents one arm of a 'match'\n@@ -1679,7 +1686,7 @@ pub struct Item {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n-    /// An`extern crate` item, with optional original crate name,\n+    /// An `extern crate` item, with optional original crate name,\n     ///\n     /// e.g. `extern crate foo` or `extern crate foo_bar as foo`\n     ItemExternCrate(Option<Name>),"}, {"sha": "39cb5d1b8c8e84cccd392d72d7c451ae80958f5f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -458,10 +458,10 @@ impl<'tcx> RegionMaps {\n                                    -> CodeExtent {\n         if scope_a == scope_b { return scope_a; }\n \n-        /// [1] The initial values for `a_buf` and `b_buf` are not used.\n-        /// The `ancestors_of` function will return some prefix that\n-        /// is re-initialized with new values (or else fallback to a\n-        /// heap-allocated vector).\n+        // [1] The initial values for `a_buf` and `b_buf` are not used.\n+        // The `ancestors_of` function will return some prefix that\n+        // is re-initialized with new values (or else fallback to a\n+        // heap-allocated vector).\n         let mut a_buf: [CodeExtent; 32] = [scope_a /* [1] */; 32];\n         let mut a_vec: Vec<CodeExtent> = vec![];\n         let mut b_buf: [CodeExtent; 32] = [scope_b /* [1] */; 32];"}, {"sha": "ca30ed4a536e2be1a0c910bb9a6a183a09fe0a9e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -722,6 +722,46 @@ impl EarlyLintPass for IllegalFloatLiteralPattern {\n     }\n }\n \n+declare_lint! {\n+    pub UNUSED_DOC_COMMENT,\n+    Warn,\n+    \"detects doc comments that aren't used by rustdoc\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct UnusedDocComment;\n+\n+impl LintPass for UnusedDocComment {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![UNUSED_DOC_COMMENT]\n+    }\n+}\n+\n+impl UnusedDocComment {\n+    fn warn_if_doc<'a, 'tcx,\n+                   I: Iterator<Item=&'a ast::Attribute>,\n+                   C: LintContext<'tcx>>(&self, mut attrs: I, cx: &C) {\n+        if let Some(attr) = attrs.find(|a| a.is_value_str() && a.check_name(\"doc\")) {\n+            cx.struct_span_lint(UNUSED_DOC_COMMENT, attr.span, \"doc comment not used by rustdoc\")\n+              .emit();\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for UnusedDocComment {\n+    fn check_local(&mut self, cx: &EarlyContext, decl: &ast::Local) {\n+        self.warn_if_doc(decl.attrs.iter(), cx);\n+    }\n+\n+    fn check_arm(&mut self, cx: &EarlyContext, arm: &ast::Arm) {\n+        self.warn_if_doc(arm.attrs.iter(), cx);\n+    }\n+\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {\n+        self.warn_if_doc(expr.attrs.iter(), cx);\n+    }\n+}\n+\n declare_lint! {\n     pub UNCONDITIONAL_RECURSION,\n     Warn,"}, {"sha": "83c00c178a0ba540ce6e3588e2efa05709e63a23", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -111,6 +111,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        IllegalFloatLiteralPattern,\n+                       UnusedDocComment,\n                        );\n \n     add_early_builtin_with_new!(sess,"}, {"sha": "cf5882bb9bdbd943cfc11fb9aa83e6b8abb572e3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -89,23 +89,23 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                tcx.item_path_str(tcx.hir.local_def_id(item.id)));\n \n         match item.node {\n-            /// Right now we check that every default trait implementation\n-            /// has an implementation of itself. Basically, a case like:\n-            ///\n-            /// `impl Trait for T {}`\n-            ///\n-            /// has a requirement of `T: Trait` which was required for default\n-            /// method implementations. Although this could be improved now that\n-            /// there's a better infrastructure in place for this, it's being left\n-            /// for a follow-up work.\n-            ///\n-            /// Since there's such a requirement, we need to check *just* positive\n-            /// implementations, otherwise things like:\n-            ///\n-            /// impl !Send for T {}\n-            ///\n-            /// won't be allowed unless there's an *explicit* implementation of `Send`\n-            /// for `T`\n+            // Right now we check that every default trait implementation\n+            // has an implementation of itself. Basically, a case like:\n+            //\n+            // `impl Trait for T {}`\n+            //\n+            // has a requirement of `T: Trait` which was required for default\n+            // method implementations. Although this could be improved now that\n+            // there's a better infrastructure in place for this, it's being left\n+            // for a follow-up work.\n+            //\n+            // Since there's such a requirement, we need to check *just* positive\n+            // implementations, otherwise things like:\n+            //\n+            // impl !Send for T {}\n+            //\n+            // won't be allowed unless there's an *explicit* implementation of `Send`\n+            // for `T`\n             hir::ItemImpl(_, hir::ImplPolarity::Positive, _, _,\n                           ref trait_ref, ref self_ty, _) => {\n                 self.check_impl(item, self_ty, trait_ref);"}, {"sha": "2b28194c14916b45e54f4a7e088b9cd7551a1ad7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -733,6 +733,13 @@ impl Stmt {\n         };\n         self\n     }\n+\n+    pub fn is_item(&self) -> bool {\n+        match self.node {\n+            StmtKind::Local(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl fmt::Debug for Stmt {"}, {"sha": "1cb5a8111dced6b3784b6e7a62c9048605cb5de1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -2074,14 +2074,14 @@ impl<'a> Parser<'a> {\n                 } else {\n                     Ok(self.mk_expr(span, ExprKind::Tup(es), attrs))\n                 }\n-            },\n+            }\n             token::OpenDelim(token::Brace) => {\n                 return self.parse_block_expr(lo, BlockCheckMode::Default, attrs);\n-            },\n-            token::BinOp(token::Or) |  token::OrOr => {\n+            }\n+            token::BinOp(token::Or) | token::OrOr => {\n                 let lo = self.span;\n                 return self.parse_lambda_expr(lo, CaptureBy::Ref, attrs);\n-            },\n+            }\n             token::OpenDelim(token::Bracket) => {\n                 self.bump();\n \n@@ -2329,7 +2329,6 @@ impl<'a> Parser<'a> {\n     pub fn parse_block_expr(&mut self, lo: Span, blk_mode: BlockCheckMode,\n                             outer_attrs: ThinVec<Attribute>)\n                             -> PResult<'a, P<Expr>> {\n-\n         self.expect(&token::OpenDelim(token::Brace))?;\n \n         let mut attrs = outer_attrs;"}, {"sha": "a1172bb214d0a1ae7f44a1e01da02d89234b1a51", "filename": "src/test/compile-fail/useless_comment.rs", "status": "renamed", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53bf7903fa7ebabca85f5937667956177989e345/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf7903fa7ebabca85f5937667956177989e345/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -8,11 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-#![allow(warnings)]\n+#![deny(unused_doc_comment)]\n \n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n-    /// crash\n-    let x = 0;\n+fn foo() {\n+    /// a //~ ERROR doc comment not used by rustdoc\n+    let x = 12;\n+\n+    /// b //~ doc comment not used by rustdoc\n+    match x {\n+        /// c //~ ERROR doc comment not used by rustdoc\n+        1 => {},\n+        _ => {}\n+    }\n+\n+    /// foo //~ ERROR doc comment not used by rustdoc\n+    unsafe {}\n }\n+\n+fn main() {\n+    foo();\n+}\n\\ No newline at end of file", "previous_filename": "src/test/compile-fail/issue-34222.rs"}, {"sha": "305bc25d5e105e84ffe261655b46cf74570f6e5b", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -1 +1 @@\n-Subproject commit 88aa6423a164774d09abc78a24e74e8e665f651b\n+Subproject commit 305bc25d5e105e84ffe261655b46cf74570f6e5b"}, {"sha": "06b48d1c97dd69968a24b4f506e85e3a3efb7dea", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=53bf7903fa7ebabca85f5937667956177989e345", "patch": "@@ -1 +1 @@\n-Subproject commit 79d659e5699fbf7db5b4819e9a442fb3f550472a\n+Subproject commit 06b48d1c97dd69968a24b4f506e85e3a3efb7dea"}]}