{"sha": "0690a26ddfb762c7fb7906326f41a7e470728654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OTBhMjZkZGZiNzYyYzdmYjc5MDYzMjZmNDFhN2U0NzA3Mjg2NTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-22T11:01:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-22T11:01:08Z"}, "message": "make Memory::dump use `trace!` instead of `println!`", "tree": {"sha": "0b4c9ba9933be65e5767c0c80df3dfd903fe9b06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b4c9ba9933be65e5767c0c80df3dfd903fe9b06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0690a26ddfb762c7fb7906326f41a7e470728654", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX47n0AAoJEFbW7qD8Z6xGCL0P/2WfOAoYMYncozS7uaPyKrsS\ngbIv49ZMW4Uur4QKeLeJ7mHbXgLDtUl1WsqQjs+y94tPRHIGf2LfmM/5rTNAUuzl\nClSvZM6jwe7aYaLqnVSXF4uZz3pilLmzblomSz2tateSI6WjwWcMgATzS5zdMfPv\nEFjeUWKyVLAraUS7pZEQKR7afBHU8W5ozZO/uYnqpeGG+qNK2lCqbTIohasgc5Sm\nPimRPS1RpgR/FsaRo/x2m2A5HeltnXorEFwoD1iqt6zh0gLaNWxiHIWjYVIt61hO\nFngjhFNCZKpLyunU/qqmUefIRgGKDdURurN1az6BVAEZRlmk48EaYT1FZ6XG7Ysf\npVKH8LZjzvhWYjKhEPCNhbzgivZ4++Iu8Pz6+akovhwxXSc0QLwPvPDSe9tvITI1\nUCiGVL9NVegJwxN18C9hMsFZZNSwy+0DCkag3SAEyhq9gSt+n5Fb1scBWweuV1aI\nmZW/LgGQtG/DCGKKqzmf3U+cqUR0Hol/ia0vcVqFvEXxq6o7VVCcwn8igWaMiFsh\nTsiPayljHuHTmlq8qLJKsj4b8zDGKijiFYXeVGpbYhpLOedLBjLsNFwcsOCrvddY\nqN72FIDZ8xeH0yieYjE3cgarOn/KOhiuHyivQacf4qRKv8BWyZTfiCwl4bor4D8X\nQ6PDxn3Qv65gFakFd7ng\n=1hB+\n-----END PGP SIGNATURE-----", "payload": "tree 0b4c9ba9933be65e5767c0c80df3dfd903fe9b06\nparent 0f578f0d2ef1943d8a3a1123520eba90f926e757\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474542068 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474542068 +0200\n\nmake Memory::dump use `trace!` instead of `println!`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0690a26ddfb762c7fb7906326f41a7e470728654", "html_url": "https://github.com/rust-lang/rust/commit/0690a26ddfb762c7fb7906326f41a7e470728654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0690a26ddfb762c7fb7906326f41a7e470728654/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f578f0d2ef1943d8a3a1123520eba90f926e757", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f578f0d2ef1943d8a3a1123520eba90f926e757", "html_url": "https://github.com/rust-lang/rust/commit/0f578f0d2ef1943d8a3a1123520eba90f926e757"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "ae590b0eef10661bb6b91c60ef678bc4f3cc90dd", "filename": "src/memory.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0690a26ddfb762c7fb7906326f41a7e470728654/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0690a26ddfb762c7fb7906326f41a7e470728654/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=0690a26ddfb762c7fb7906326f41a7e470728654", "patch": "@@ -345,25 +345,26 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     /// Print an allocation and all allocations it points to, recursively.\n     pub fn dump(&self, id: AllocId) {\n+        use std::fmt::Write;\n         let mut allocs_seen = HashSet::new();\n         let mut allocs_to_print = VecDeque::new();\n         allocs_to_print.push_back(id);\n \n         while let Some(id) = allocs_to_print.pop_front() {\n             allocs_seen.insert(id);\n-            let prefix = format!(\"Alloc {:<5} \", format!(\"{}:\", id));\n-            print!(\"{}\", prefix);\n+            let mut msg = format!(\"Alloc {:<5} \", format!(\"{}:\", id));\n+            let prefix_len = msg.len();\n             let mut relocations = vec![];\n \n             let alloc = match (self.alloc_map.get(&id), self.functions.get(&id)) {\n                 (Some(a), None) => a,\n                 (None, Some(_)) => {\n                     // FIXME: print function name\n-                    println!(\"function pointer\");\n+                    trace!(\"{} function pointer\", msg);\n                     continue;\n                 },\n                 (None, None) => {\n-                    println!(\"(deallocated)\");\n+                    trace!(\"{} (deallocated)\", msg);\n                     continue;\n                 },\n                 (Some(_), Some(_)) => bug!(\"miri invariant broken: an allocation id exists that points to both a function and a memory location\"),\n@@ -377,25 +378,26 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n                     relocations.push((i, target_id));\n                 }\n                 if alloc.undef_mask.is_range_defined(i, i + 1) {\n-                    print!(\"{:02x} \", alloc.bytes[i]);\n+                    write!(msg, \"{:02x} \", alloc.bytes[i]).unwrap();\n                 } else {\n-                    print!(\"__ \");\n+                    msg.push_str(\"__ \");\n                 }\n             }\n \n             let immutable = if alloc.immutable { \" (immutable)\" } else { \"\" };\n-            println!(\"({} bytes){}\", alloc.bytes.len(), immutable);\n+            trace!(\"{}({} bytes){}\", msg, alloc.bytes.len(), immutable);\n \n             if !relocations.is_empty() {\n-                print!(\"{:1$}\", \"\", prefix.len()); // Print spaces.\n+                msg.clear();\n+                write!(msg, \"{:1$}\", \"\", prefix_len).unwrap(); // Print spaces.\n                 let mut pos = 0;\n                 let relocation_width = (self.pointer_size() - 1) * 3;\n                 for (i, target_id) in relocations {\n-                    print!(\"{:1$}\", \"\", (i - pos) * 3);\n-                    print!(\"\u2514{0:\u2500^1$}\u2518 \", format!(\"({})\", target_id), relocation_width);\n+                    write!(msg, \"{:1$}\", \"\", (i - pos) * 3).unwrap();\n+                    write!(msg, \"\u2514{0:\u2500^1$}\u2518 \", format!(\"({})\", target_id), relocation_width).unwrap();\n                     pos = i + self.pointer_size();\n                 }\n-                println!(\"\");\n+                trace!(\"{}\", msg);\n             }\n         }\n     }"}]}