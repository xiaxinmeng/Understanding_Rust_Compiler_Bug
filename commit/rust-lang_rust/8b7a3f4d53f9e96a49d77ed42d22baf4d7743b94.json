{"sha": "8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94", "node_id": "C_kwDOAAsO6NoAKDhiN2EzZjRkNTNmOWU5NmE0OWQ3N2VkNDJkMjJiYWY0ZDc3NDNiOTQ", "commit": {"author": {"name": "Evan Richter", "email": "evanjrichter@gmail.com", "date": "2022-05-17T05:53:06Z"}, "committer": {"name": "Evan Richter", "email": "evanjrichter@gmail.com", "date": "2022-05-19T19:59:42Z"}, "message": "impl Read and Write for VecDeque<u8>\n\n* For read and read_buf, only the front slice of a discontiguous\nVecDeque is copied. The VecDeque is advanced after reading, making any\nback slice available for reading with a second call to Read::read(_buf).\n\n* For write, the VecDeque always appends the entire slice to the end,\ngrowing its allocation when necessary.", "tree": {"sha": "c98fb05a1e24f82a7bb483a0d84a15dddbe40cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98fb05a1e24f82a7bb483a0d84a15dddbe40cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgqysSwOn3rK8w90/qjMJnj7DUK6\nQOe9xARka/wb52cEkAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKvIt1EePEdebDwnuFu3m8g8USyVumb/bE0sj/6oOolDZ9+7Kj9owTZNi4YpVWHkd+\nDImxLeN8Zaum/I6KH1Cw8=\n-----END SSH SIGNATURE-----", "payload": "tree c98fb05a1e24f82a7bb483a0d84a15dddbe40cc2\nparent 596deceaac224b9bb4f7e65e2e37d4e2e242d6ad\nauthor Evan Richter <evanjrichter@gmail.com> 1652766786 -0500\ncommitter Evan Richter <evanjrichter@gmail.com> 1652990382 -0500\n\nimpl Read and Write for VecDeque<u8>\n\n* For read and read_buf, only the front slice of a discontiguous\nVecDeque is copied. The VecDeque is advanced after reading, making any\nback slice available for reading with a second call to Read::read(_buf).\n\n* For write, the VecDeque always appends the entire slice to the end,\ngrowing its allocation when necessary.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94", "html_url": "https://github.com/rust-lang/rust/commit/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94/comments", "author": {"login": "evanrichter", "id": 330292, "node_id": "MDQ6VXNlcjMzMDI5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evanrichter", "html_url": "https://github.com/evanrichter", "followers_url": "https://api.github.com/users/evanrichter/followers", "following_url": "https://api.github.com/users/evanrichter/following{/other_user}", "gists_url": "https://api.github.com/users/evanrichter/gists{/gist_id}", "starred_url": "https://api.github.com/users/evanrichter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evanrichter/subscriptions", "organizations_url": "https://api.github.com/users/evanrichter/orgs", "repos_url": "https://api.github.com/users/evanrichter/repos", "events_url": "https://api.github.com/users/evanrichter/events{/privacy}", "received_events_url": "https://api.github.com/users/evanrichter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "evanrichter", "id": 330292, "node_id": "MDQ6VXNlcjMzMDI5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evanrichter", "html_url": "https://github.com/evanrichter", "followers_url": "https://api.github.com/users/evanrichter/followers", "following_url": "https://api.github.com/users/evanrichter/following{/other_user}", "gists_url": "https://api.github.com/users/evanrichter/gists{/gist_id}", "starred_url": "https://api.github.com/users/evanrichter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evanrichter/subscriptions", "organizations_url": "https://api.github.com/users/evanrichter/orgs", "repos_url": "https://api.github.com/users/evanrichter/repos", "events_url": "https://api.github.com/users/evanrichter/events{/privacy}", "received_events_url": "https://api.github.com/users/evanrichter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596deceaac224b9bb4f7e65e2e37d4e2e242d6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/596deceaac224b9bb4f7e65e2e37d4e2e242d6ad", "html_url": "https://github.com/rust-lang/rust/commit/596deceaac224b9bb4f7e65e2e37d4e2e242d6ad"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "0ca58efe1fe2f8af355b2865db0697a488384756", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=8b7a3f4d53f9e96a49d77ed42d22baf4d7743b94", "patch": "@@ -3,6 +3,7 @@ mod tests;\n \n use crate::alloc::Allocator;\n use crate::cmp;\n+use crate::collections::VecDeque;\n use crate::fmt;\n use crate::io::{\n     self, BufRead, ErrorKind, IoSlice, IoSliceMut, Read, ReadBuf, Seek, SeekFrom, Write,\n@@ -410,3 +411,50 @@ impl<A: Allocator> Write for Vec<u8, A> {\n         Ok(())\n     }\n }\n+\n+/// Read is implemented for `VecDeque<u8>` by consuming bytes from the front of the `VecDeque`.\n+#[stable(feature = \"vecdeque_read_write\", since = \"1.63.0\")]\n+impl<A: Allocator> Read for VecDeque<u8, A> {\n+    /// Fill `buf` with the contents of the \"front\" slice as returned by\n+    /// [`as_slices`][`VecDeque::as_slices`]. If the contained byte slices of the `VecDeque` are\n+    /// discontiguous, multiple calls to `read` will be needed to read the entire content.\n+    #[inline]\n+    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+        let (ref mut front, _) = self.as_slices();\n+        let n = Read::read(front, buf)?;\n+        self.drain(..n);\n+        Ok(n)\n+    }\n+\n+    #[inline]\n+    fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        let (ref mut front, _) = self.as_slices();\n+        let n = cmp::min(buf.remaining(), front.len());\n+        Read::read_buf(front, buf)?;\n+        self.drain(..n);\n+        Ok(())\n+    }\n+}\n+\n+/// Write is implemented for `VecDeque<u8>` by appending to the `VecDeque`, growing it as needed.\n+#[stable(feature = \"vecdeque_read_write\", since = \"1.63.0\")]\n+impl<A: Allocator> Write for VecDeque<u8, A> {\n+    #[inline]\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        self.reserve(buf.len());\n+        self.extend(buf);\n+        Ok(buf.len())\n+    }\n+\n+    #[inline]\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        self.reserve(buf.len());\n+        self.extend(buf);\n+        Ok(())\n+    }\n+\n+    #[inline]\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}"}]}