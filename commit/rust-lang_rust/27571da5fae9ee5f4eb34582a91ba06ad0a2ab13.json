{"sha": "27571da5fae9ee5f4eb34582a91ba06ad0a2ab13", "node_id": "C_kwDOAAsO6NoAKDI3NTcxZGE1ZmFlOWVlNWY0ZWIzNDU4MmE5MWJhMDZhZDBhMmFiMTM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-04T22:59:17Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-08T23:02:50Z"}, "message": "Remove `FieldInfo::attrs`.\n\nIt's unused. This also removes the need for the lifetime on `FieldInfo`,\nwhich is nice.", "tree": {"sha": "f2bb10d7eb9588098d2f42a4e3eb5d067e90089a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2bb10d7eb9588098d2f42a4e3eb5d067e90089a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13", "html_url": "https://github.com/rust-lang/rust/commit/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3057b5ca78cc05823f2dc75cb774bbffc5403a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3057b5ca78cc05823f2dc75cb774bbffc5403a6", "html_url": "https://github.com/rust-lang/rust/commit/d3057b5ca78cc05823f2dc75cb774bbffc5403a6"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "9cd72ed0c67b272289b1d3ba3bccc6c0aa98e66f", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=27571da5fae9ee5f4eb34582a91ba06ad0a2ab13", "patch": "@@ -160,7 +160,7 @@ fn cs_clone(\n     let ctor_path;\n     let all_fields;\n     let fn_path = cx.std_path(&[sym::clone, sym::Clone, sym::clone]);\n-    let subcall = |cx: &mut ExtCtxt<'_>, field: &FieldInfo<'_>| {\n+    let subcall = |cx: &mut ExtCtxt<'_>, field: &FieldInfo| {\n         let args = vec![cx.expr_addr_of(field.span, field.self_expr.clone())];\n         cx.expr_call_global(field.span, fn_path.clone(), args)\n     };"}, {"sha": "9781687d0615047818da073eee65cfc4268d439a", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27571da5fae9ee5f4eb34582a91ba06ad0a2ab13/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=27571da5fae9ee5f4eb34582a91ba06ad0a2ab13", "patch": "@@ -251,7 +251,7 @@ pub struct Substructure<'a> {\n }\n \n /// Summary of the relevant parts of a struct/enum field.\n-pub struct FieldInfo<'a> {\n+pub struct FieldInfo {\n     pub span: Span,\n     /// None for tuple structs/normal enum variants, Some for normal\n     /// structs/struct enum variants.\n@@ -262,8 +262,6 @@ pub struct FieldInfo<'a> {\n     /// The expressions corresponding to references to this field in\n     /// the other selflike arguments.\n     pub other_selflike_exprs: Vec<P<Expr>>,\n-    /// The attributes on the field\n-    pub attrs: &'a [ast::Attribute],\n }\n \n /// Fields for a static method\n@@ -276,11 +274,11 @@ pub enum StaticFields {\n \n /// A summary of the possible sets of fields.\n pub enum SubstructureFields<'a> {\n-    Struct(&'a ast::VariantData, Vec<FieldInfo<'a>>),\n+    Struct(&'a ast::VariantData, Vec<FieldInfo>),\n     /// Matching variants of the enum: variant index, variant count, ast::Variant,\n     /// fields: the field name is only non-`None` in the case of a struct\n     /// variant.\n-    EnumMatching(usize, usize, &'a ast::Variant, Vec<FieldInfo<'a>>),\n+    EnumMatching(usize, usize, &'a ast::Variant, Vec<FieldInfo>),\n \n     /// Non-matching variants of the enum, but with all state hidden from the\n     /// consequent code. The field is a list of `Ident`s bound to the variant\n@@ -1082,18 +1080,17 @@ impl<'a> MethodDef<'a> {\n             let first_field = raw_fields.next().unwrap();\n             let mut nonself_fields: Vec<vec::IntoIter<_>> = raw_fields.collect();\n             first_field\n-                .map(|(span, opt_id, expr, attrs)| FieldInfo {\n+                .map(|(span, opt_id, expr)| FieldInfo {\n                     span: span.with_ctxt(trait_.span.ctxt()),\n                     name: opt_id,\n                     self_expr: expr,\n                     other_selflike_exprs: nonself_fields\n                         .iter_mut()\n                         .map(|l| {\n-                            let (.., ex, _) = l.next().unwrap();\n+                            let (_, _, ex) = l.next().unwrap();\n                             ex\n                         })\n                         .collect(),\n-                    attrs,\n                 })\n                 .collect()\n         } else {\n@@ -1282,7 +1279,7 @@ impl<'a> MethodDef<'a> {\n                     .into_iter()\n                     .enumerate()\n                     // For each arg field of self, pull out its getter expr ...\n-                    .map(|(field_index, (span, opt_ident, self_getter_expr, attrs))| {\n+                    .map(|(field_index, (span, opt_ident, self_getter_expr))| {\n                         // ... but FieldInfo also wants getter expr\n                         // for matching other arguments of Self type;\n                         // so walk across the *other* selflike_pats_idents\n@@ -1292,7 +1289,7 @@ impl<'a> MethodDef<'a> {\n                         let other_selflike_exprs = selflike_pats_idents\n                             .iter()\n                             .map(|fields| {\n-                                let (_, _opt_ident, ref other_getter_expr, _) = fields[field_index];\n+                                let (_, _opt_ident, ref other_getter_expr) = fields[field_index];\n \n                                 // All Self args have same variant, so\n                                 // opt_idents are the same.  (Assert\n@@ -1309,10 +1306,9 @@ impl<'a> MethodDef<'a> {\n                             name: opt_ident,\n                             self_expr: self_getter_expr,\n                             other_selflike_exprs,\n-                            attrs,\n                         }\n                     })\n-                    .collect::<Vec<FieldInfo<'_>>>();\n+                    .collect::<Vec<FieldInfo>>();\n \n                 // Now, for some given VariantK, we have built up\n                 // expressions for referencing every field of every\n@@ -1598,7 +1594,7 @@ impl<'a> TraitDef<'a> {\n         prefix: &str,\n         mutbl: ast::Mutability,\n         use_temporaries: bool,\n-    ) -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n+    ) -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n         let mut paths = Vec::new();\n         let mut ident_exprs = Vec::new();\n         for (i, struct_field) in struct_def.fields().iter().enumerate() {\n@@ -1607,7 +1603,7 @@ impl<'a> TraitDef<'a> {\n             paths.push(ident.with_span_pos(sp));\n             let val = cx.expr_path(cx.path_ident(sp, ident));\n             let val = if use_temporaries { val } else { cx.expr_deref(sp, val) };\n-            ident_exprs.push((sp, struct_field.ident, val, &struct_field.attrs[..]));\n+            ident_exprs.push((sp, struct_field.ident, val));\n         }\n \n         let subpats = self.create_subpatterns(cx, paths, mutbl, use_temporaries);\n@@ -1643,7 +1639,7 @@ impl<'a> TraitDef<'a> {\n         cx: &mut ExtCtxt<'_>,\n         mut selflike_arg: &P<Expr>,\n         struct_def: &'a VariantData,\n-    ) -> Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])> {\n+    ) -> Vec<(Span, Option<Ident>, P<Expr>)> {\n         let mut ident_exprs = Vec::new();\n         for (i, struct_field) in struct_def.fields().iter().enumerate() {\n             let sp = struct_field.span.with_ctxt(self.span.ctxt());\n@@ -1666,7 +1662,7 @@ impl<'a> TraitDef<'a> {\n                     }),\n                 ),\n             );\n-            ident_exprs.push((sp, struct_field.ident, val, &struct_field.attrs[..]));\n+            ident_exprs.push((sp, struct_field.ident, val));\n         }\n         ident_exprs\n     }\n@@ -1678,7 +1674,7 @@ impl<'a> TraitDef<'a> {\n         variant: &'a ast::Variant,\n         prefix: &str,\n         mutbl: ast::Mutability,\n-    ) -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n+    ) -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n         let sp = variant.span.with_ctxt(self.span.ctxt());\n         let variant_path = cx.path(sp, vec![enum_ident, variant.ident]);\n         let use_temporaries = false; // enums can't be repr(packed)"}]}