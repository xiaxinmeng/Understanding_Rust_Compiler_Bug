{"sha": "7ff6c367169127a8914f8610cbbd9e217d8e7158", "node_id": "C_kwDOAAsO6NoAKDdmZjZjMzY3MTY5MTI3YTg5MTRmODYxMGNiYmQ5ZTIxN2Q4ZTcxNTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-14T21:22:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-15T11:30:43Z"}, "message": "fix: Don't show qualified path completions for private items", "tree": {"sha": "23727ec8671f19a6b68aab88ca9f3e117853acde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23727ec8671f19a6b68aab88ca9f3e117853acde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff6c367169127a8914f8610cbbd9e217d8e7158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff6c367169127a8914f8610cbbd9e217d8e7158", "html_url": "https://github.com/rust-lang/rust/commit/7ff6c367169127a8914f8610cbbd9e217d8e7158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff6c367169127a8914f8610cbbd9e217d8e7158/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b823b0234ab983d7cc9304dfbf2710809da1cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b823b0234ab983d7cc9304dfbf2710809da1cdc", "html_url": "https://github.com/rust-lang/rust/commit/6b823b0234ab983d7cc9304dfbf2710809da1cdc"}], "stats": {"total": 184, "additions": 121, "deletions": 63}, "files": [{"sha": "a32513cf65b7d7700c6a96d3564cf5e896b621d8", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -219,7 +219,7 @@ impl DefMap {\n \n         let edition = crate_graph[krate].edition;\n         let origin = ModuleOrigin::CrateRoot { definition: crate_graph[krate].root_file_id };\n-        let def_map = DefMap::empty(krate, edition, origin);\n+        let def_map = DefMap::empty(krate, edition, ModuleData::new(origin, Visibility::Public));\n         let def_map = collector::collect_defs(\n             db,\n             def_map,\n@@ -241,30 +241,26 @@ impl DefMap {\n             return None;\n         }\n \n-        let block_info = BlockInfo { block: block_id, parent: block.module };\n-\n         let parent_map = block.module.def_map(db);\n-        let mut def_map = DefMap::empty(\n-            block.module.krate,\n-            parent_map.edition,\n-            ModuleOrigin::BlockExpr { block: block.ast_id },\n-        );\n-        def_map.block = Some(block_info);\n+        let krate = block.module.krate;\n+        let local_id = LocalModuleId::from_raw(la_arena::RawIdx::from(0));\n+        // NB: we use `None` as block here, which would be wrong for implicit\n+        // modules declared by blocks with items. At the moment, we don't use\n+        // this visibility for anything outside IDE, so that's probably OK.\n+        let visibility = Visibility::Module(ModuleId { krate, local_id, block: None });\n+        let module_data =\n+            ModuleData::new(ModuleOrigin::BlockExpr { block: block.ast_id }, visibility);\n+\n+        let mut def_map = DefMap::empty(krate, parent_map.edition, module_data);\n+        def_map.block = Some(BlockInfo { block: block_id, parent: block.module });\n \n         let def_map = collector::collect_defs(db, def_map, tree_id);\n         Some(Arc::new(def_map))\n     }\n \n-    fn empty(krate: CrateId, edition: Edition, root_module_origin: ModuleOrigin) -> DefMap {\n+    fn empty(krate: CrateId, edition: Edition, module_data: ModuleData) -> DefMap {\n         let mut modules: Arena<ModuleData> = Arena::default();\n-\n-        let local_id = LocalModuleId::from_raw(la_arena::RawIdx::from(0));\n-        // NB: we use `None` as block here, which would be wrong for implicit\n-        // modules declared by blocks with items. At the moment, we don't use\n-        // this visibility for anything outside IDE, so that's probably OK.\n-        let visibility = Visibility::Module(ModuleId { krate, local_id, block: None });\n-        let root = modules.alloc(ModuleData::new(root_module_origin, visibility));\n-        assert_eq!(local_id, root);\n+        let root = modules.alloc(module_data);\n \n         DefMap {\n             _c: Count::new(),"}, {"sha": "973a0b87206722308c63e1ca5af9e29aeb28301e", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -2141,7 +2141,8 @@ mod tests {\n \n         let edition = db.crate_graph()[krate].edition;\n         let module_origin = ModuleOrigin::CrateRoot { definition: file_id };\n-        let def_map = DefMap::empty(krate, edition, module_origin);\n+        let def_map =\n+            DefMap::empty(krate, edition, ModuleData::new(module_origin, Visibility::Public));\n         do_collect_defs(&db, def_map)\n     }\n "}, {"sha": "b4fd70d082fc9f173a69b6473b27e970c359231a", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -505,7 +505,7 @@ impl HirDisplay for Module {\n         // FIXME: Module doesn't have visibility saved in data.\n         match self.name(f.db) {\n             Some(name) => write!(f, \"mod {}\", name),\n-            None if self.is_crate_root(f.db) => match self.krate().display_name(f.db) {\n+            None if self.is_crate_root(f.db) => match self.krate(f.db).display_name(f.db) {\n                 Some(name) => write!(f, \"extern crate {}\", name),\n                 None => f.write_str(\"extern crate {unknown}\"),\n             },"}, {"sha": "4696f48f2b56dca0a49d9f506ace65e92c0aa48d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -3573,3 +3573,27 @@ impl HasCrate for Macro {\n         self.module(db).krate()\n     }\n }\n+\n+impl HasCrate for Trait {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n+impl HasCrate for Static {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n+impl HasCrate for Adt {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n+impl HasCrate for Module {\n+    fn krate(&self, _: &dyn HirDatabase) -> Crate {\n+        Module::krate(*self)\n+    }\n+}"}, {"sha": "7b90307988f0785cd33b5d05387a3cd7af8fd528", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -174,13 +174,19 @@ impl Completions {\n         local_name: hir::Name,\n         resolution: hir::ScopeDef,\n     ) {\n-        if ctx.is_scope_def_hidden(resolution) {\n-            cov_mark::hit!(qualified_path_doc_hidden);\n-            return;\n-        }\n+        let is_private_editable = match ctx.def_is_visible(&resolution) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n         self.add(\n-            render_path_resolution(RenderContext::new(ctx), path_ctx, local_name, resolution)\n-                .build(),\n+            render_path_resolution(\n+                RenderContext::new(ctx).private_editable(is_private_editable),\n+                path_ctx,\n+                local_name,\n+                resolution,\n+            )\n+            .build(),\n         );\n     }\n \n@@ -191,13 +197,19 @@ impl Completions {\n         local_name: hir::Name,\n         resolution: hir::ScopeDef,\n     ) {\n-        if ctx.is_scope_def_hidden(resolution) {\n-            cov_mark::hit!(qualified_path_doc_hidden);\n-            return;\n-        }\n+        let is_private_editable = match ctx.def_is_visible(&resolution) {\n+            Visible::Yes => false,\n+            Visible::Editable => true,\n+            Visible::No => return,\n+        };\n         self.add(\n-            render_pattern_resolution(RenderContext::new(ctx), pattern_ctx, local_name, resolution)\n-                .build(),\n+            render_pattern_resolution(\n+                RenderContext::new(ctx).private_editable(is_private_editable),\n+                pattern_ctx,\n+                local_name,\n+                resolution,\n+            )\n+            .build(),\n         );\n     }\n "}, {"sha": "8fd059f87ca11fe9ddf6dc13baa56b324e7cdba6", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -33,6 +33,7 @@ pub(crate) enum PatternRefutability {\n     Irrefutable,\n }\n \n+#[derive(Debug)]\n pub(crate) enum Visible {\n     Yes,\n     Editable,\n@@ -355,10 +356,11 @@ pub(crate) struct CompletionContext<'a> {\n \n     pub(super) locals: FxHashMap<Name, Local>,\n \n+    /// The module depth of the current module of the cursor position.\n     /// - crate-root\n     ///  - mod foo\n     ///   - mod bar\n-    /// Here depth will be 2: {[bar<->foo], [foo<->crate-root]}\n+    /// Here depth will be 2\n     pub(super) depth_from_crate_root: usize,\n }\n \n@@ -383,6 +385,30 @@ impl<'a> CompletionContext<'a> {\n         FamousDefs(&self.sema, self.krate)\n     }\n \n+    /// Checks if an item is visible and not `doc(hidden)` at the completion site.\n+    pub(crate) fn def_is_visible(&self, item: &ScopeDef) -> Visible {\n+        match item {\n+            ScopeDef::ModuleDef(def) => match def {\n+                hir::ModuleDef::Module(it) => self.is_visible(it),\n+                hir::ModuleDef::Function(it) => self.is_visible(it),\n+                hir::ModuleDef::Adt(it) => self.is_visible(it),\n+                hir::ModuleDef::Variant(it) => self.is_visible(it),\n+                hir::ModuleDef::Const(it) => self.is_visible(it),\n+                hir::ModuleDef::Static(it) => self.is_visible(it),\n+                hir::ModuleDef::Trait(it) => self.is_visible(it),\n+                hir::ModuleDef::TypeAlias(it) => self.is_visible(it),\n+                hir::ModuleDef::Macro(it) => self.is_visible(it),\n+                hir::ModuleDef::BuiltinType(_) => Visible::Yes,\n+            },\n+            ScopeDef::GenericParam(_)\n+            | ScopeDef::ImplSelfType(_)\n+            | ScopeDef::AdtSelfType(_)\n+            | ScopeDef::Local(_)\n+            | ScopeDef::Label(_)\n+            | ScopeDef::Unknown => Visible::Yes,\n+        }\n+    }\n+\n     /// Checks if an item is visible and not `doc(hidden)` at the completion site.\n     pub(crate) fn is_visible<I>(&self, item: &I) -> Visible\n     where\n@@ -393,14 +419,6 @@ impl<'a> CompletionContext<'a> {\n         self.is_visible_impl(&vis, &attrs, item.krate(self.db))\n     }\n \n-    pub(crate) fn is_scope_def_hidden(&self, scope_def: ScopeDef) -> bool {\n-        if let (Some(attrs), Some(krate)) = (scope_def.attrs(self.db), scope_def.krate(self.db)) {\n-            return self.is_doc_hidden(&attrs, krate);\n-        }\n-\n-        false\n-    }\n-\n     /// Check if an item is `#[doc(hidden)]`.\n     pub(crate) fn is_item_hidden(&self, item: &hir::ItemInNs) -> bool {\n         let attrs = item.attrs(self.db);\n@@ -468,6 +486,14 @@ impl<'a> CompletionContext<'a> {\n         self.scope.process_all_names(&mut |name, def| f(name, def));\n     }\n \n+    fn is_scope_def_hidden(&self, scope_def: ScopeDef) -> bool {\n+        if let (Some(attrs), Some(krate)) = (scope_def.attrs(self.db), scope_def.krate(self.db)) {\n+            return self.is_doc_hidden(&attrs, krate);\n+        }\n+\n+        false\n+    }\n+\n     fn is_visible_impl(\n         &self,\n         vis: &hir::Visibility,"}, {"sha": "ca779c2fc713e98f6022b85d1a35467579ba779e", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -419,9 +419,9 @@ mod m {\n     pub use super::p::WrongType as RightType;\n }\n mod p {\n-    fn wrong_fn() {}\n-    const WRONG_CONST: u32 = 1;\n-    struct WrongType {};\n+    pub fn wrong_fn() {}\n+    pub const WRONG_CONST: u32 = 1;\n+    pub struct WrongType {};\n }\n \"#,\n         expect![[r#\"\n@@ -442,9 +442,9 @@ mod m {\n     pub use super::p::WrongType as RightType;\n }\n mod p {\n-    fn wrong_fn() {}\n-    const WRONG_CONST: u32 = 1;\n-    struct WrongType {};\n+    pub fn wrong_fn() {}\n+    pub const WRONG_CONST: u32 = 1;\n+    pub struct WrongType {};\n }\n \"#,\n         r#\"\n@@ -456,9 +456,9 @@ mod m {\n     pub use super::p::WrongType as RightType;\n }\n mod p {\n-    fn wrong_fn() {}\n-    const WRONG_CONST: u32 = 1;\n-    struct WrongType {};\n+    pub fn wrong_fn() {}\n+    pub const WRONG_CONST: u32 = 1;\n+    pub struct WrongType {};\n }\n \"#,\n     );\n@@ -627,7 +627,6 @@ fn main() {\n \n #[test]\n fn respects_doc_hidden2() {\n-    cov_mark::check!(qualified_path_doc_hidden);\n     check(\n         r#\"\n //- /lib.rs crate:lib deps:dep"}, {"sha": "b91d54dd927a0cf414fa79456463ccf37afca369", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -328,8 +328,8 @@ fn highlight_def(sema: &Semantics<RootDatabase>, krate: hir::Crate, def: Definit\n         Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::Module(module) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));\n-            if module.parent(db).is_none() {\n-                h |= HlMod::CrateRoot\n+            if module.is_crate_root(db) {\n+                h |= HlMod::CrateRoot;\n             }\n             h\n         }"}, {"sha": "1e4c06df7ea0b66a404385033a910958d48ee4ef", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -49,18 +49,18 @@\n \n <span class=\"keyword\">use</span> <span class=\"module crate_root library\">foo</span> <span class=\"keyword\">as</span> <span class=\"module crate_root declaration library\">foooo</span><span class=\"semicolon\">;</span>\n \n-<span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword crate_root\">crate</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword crate_root public\">crate</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"module default_library library\">iter</span><span class=\"operator\">::</span><span class=\"function default_library library\">repeat</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">mod</span> <span class=\"module declaration\">bar</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword control\">in</span> <span class=\"keyword crate_root\">super</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">FORTY_TWO</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword control\">in</span> <span class=\"keyword crate_root public\">super</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">FORTY_TWO</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">mod</span> <span class=\"module declaration\">baz</span> <span class=\"brace\">{</span>\n-        <span class=\"keyword\">use</span> <span class=\"keyword\">super</span><span class=\"operator\">::</span><span class=\"keyword crate_root\">super</span><span class=\"operator\">::</span><span class=\"constant public\">NINETY_TWO</span><span class=\"semicolon\">;</span>\n-        <span class=\"keyword\">use</span> <span class=\"keyword crate_root\">crate</span><span class=\"operator\">::</span><span class=\"module crate_root library\">foooo</span><span class=\"operator\">::</span><span class=\"struct library\">Point</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">use</span> <span class=\"keyword\">super</span><span class=\"operator\">::</span><span class=\"keyword crate_root public\">super</span><span class=\"operator\">::</span><span class=\"constant public\">NINETY_TWO</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">use</span> <span class=\"keyword crate_root public\">crate</span><span class=\"operator\">::</span><span class=\"module crate_root library\">foooo</span><span class=\"operator\">::</span><span class=\"struct library\">Point</span><span class=\"semicolon\">;</span>\n \n-        <span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword control\">in</span> <span class=\"keyword\">super</span><span class=\"operator\">::</span><span class=\"keyword crate_root\">super</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">TWENTY_NINE</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">29</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword control\">in</span> <span class=\"keyword\">super</span><span class=\"operator\">::</span><span class=\"keyword crate_root public\">super</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">TWENTY_NINE</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">29</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "a97802cbbd0f997c7b106e28fef45573d541eefd", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -84,7 +84,7 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"operator\">::</span><span class=\"struct\">FooCopy</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"struct declaration\">BarCopy</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">use</span> <span class=\"self_keyword crate_root public\">self</span><span class=\"operator\">::</span><span class=\"struct\">FooCopy</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"struct declaration\">BarCopy</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"attribute attribute default_library library\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"derive attribute default_library library\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>"}, {"sha": "66f9ede96295fb8f4eebd9517aec3d77341f401b", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_keywords.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "raw_url": "https://github.com/rust-lang/rust/raw/7ff6c367169127a8914f8610cbbd9e217d8e7158/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html?ref=7ff6c367169127a8914f8610cbbd9e217d8e7158", "patch": "@@ -42,12 +42,12 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"self_keyword crate_root\">self</span><span class=\"semicolon\">;</span>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"self_keyword crate_root public\">self</span><span class=\"semicolon\">;</span>\n \n-<span class=\"keyword\">use</span> <span class=\"keyword crate_root\">crate</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">use</span> <span class=\"keyword crate_root public\">crate</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">use</span> <span class=\"self_keyword crate_root public\">self</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">__</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">use</span> <span class=\"keyword crate_root\">super</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">use</span> <span class=\"keyword crate_root public\">super</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">void</span> <span class=\"brace\">{</span>"}]}