{"sha": "491e6eaf9e030d44fd0fa5f4a831199dc3257745", "node_id": "C_kwDOAAsO6NoAKDQ5MWU2ZWFmOWUwMzBkNDRmZDBmYTVmNGE4MzExOTlkYzMyNTc3NDU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-06-27T10:10:37Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-06-27T14:20:17Z"}, "message": "fix: escape ${receiver} when completing with custom snippets", "tree": {"sha": "89cca014d218263a31d8a775e153391098f38c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89cca014d218263a31d8a775e153391098f38c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/491e6eaf9e030d44fd0fa5f4a831199dc3257745", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmK5vKEACgkQ4laYqTBY\nYXGM4RAArQJA2gK5C0VxvTMKvdj0iaF3m6BxtcoARXI3+zHpVYS4YeOUrO9cHR7a\nqA/yyRfeOfwJxa7Ts6/FVj5zhDFA9+XnBY0wIc0Fi3hKRB9hwmPIF0w98vuiEVnI\nYgDBZLIzi3Rr4zr8Sh3jybc8pbA+JUVl983yOG4wKuaPoYA+OzuNmkMDO3NAgXep\nrGiK0ICU+wUjV1edtcb0kJzsRzQcwViLZdnCZbX93LbxT63a5JN81Uj5oUgkX+tZ\nA1zmWujGrV2SsubqKIteDklIRzEEUuIb+6pOPsSibKsTNIIQkh6EfpSe8ueWOUG0\nz/73ZuqcW1twHG/s3MXLVzwJPFnMGAMpbf8IT//28QAISnW8xLXvSxeI3TqMR+WR\nrrOxegZ9d020XZZGQNcjUgMk3THC72Nf6wu6rKVC1jfipCA0DM9ImsT62v8PODSg\nECG7O8AbU+FTTfivIZ45C4HOTfvTrCU9Lc7/ugOPCxbkPJps29jqqW1BQCnYap2J\nHdExh5J99GkoGDvJ29AP64VULrDpulcByQTtKAY72Xm0si02wuGjERSnzY6RNcBh\nu4hH6cWMEaAWylU/l5o5Hij6czmPm+XwvO/7Bcea1AMl/QGltm3i4I2n5JOy6+LW\nrgzEcpG03yFS9jQoOy/Fdy34lZwAP4dSQ3HaVwyp2EAAGkAIsCE=\n=ofFG\n-----END PGP SIGNATURE-----", "payload": "tree 89cca014d218263a31d8a775e153391098f38c70\nparent b74e96f509baf0be70281c55f14cb18fefbc6b22\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1656324637 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1656339617 +0900\n\nfix: escape ${receiver} when completing with custom snippets\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/491e6eaf9e030d44fd0fa5f4a831199dc3257745", "html_url": "https://github.com/rust-lang/rust/commit/491e6eaf9e030d44fd0fa5f4a831199dc3257745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/491e6eaf9e030d44fd0fa5f4a831199dc3257745/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74e96f509baf0be70281c55f14cb18fefbc6b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74e96f509baf0be70281c55f14cb18fefbc6b22", "html_url": "https://github.com/rust-lang/rust/commit/b74e96f509baf0be70281c55f14cb18fefbc6b22"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "762d7cddb97c9981554d7c03ce0cb0429e1d6877", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 62, "deletions": 14, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/491e6eaf9e030d44fd0fa5f4a831199dc3257745/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491e6eaf9e030d44fd0fa5f4a831199dc3257745/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=491e6eaf9e030d44fd0fa5f4a831199dc3257745", "patch": "@@ -193,13 +193,21 @@ pub(crate) fn complete_postfix(\n }\n \n fn get_receiver_text(receiver: &ast::Expr, receiver_is_ambiguous_float_literal: bool) -> String {\n-    if receiver_is_ambiguous_float_literal {\n+    let text = if receiver_is_ambiguous_float_literal {\n         let text = receiver.syntax().text();\n         let without_dot = ..text.len() - TextSize::of('.');\n         text.slice(without_dot).to_string()\n     } else {\n         receiver.to_string()\n-    }\n+    };\n+\n+    // The receiver texts should be interpreted as-is, as they are expected to be\n+    // normal Rust expressions. We escape '\\' and '$' so they don't get treated as\n+    // snippet-specific constructs.\n+    //\n+    // Note that we don't need to escape the other characters that can be escaped,\n+    // because they wouldn't be treated as snippet-specific constructs without '$'.\n+    text.replace('\\\\', \"\\\\\\\\\").replace('$', \"\\\\$\")\n }\n \n fn include_references(initial_element: &ast::Expr) -> ast::Expr {\n@@ -494,19 +502,21 @@ fn main() {\n \n     #[test]\n     fn custom_postfix_completion() {\n+        let config = CompletionConfig {\n+            snippets: vec![Snippet::new(\n+                &[],\n+                &[\"break\".into()],\n+                &[\"ControlFlow::Break(${receiver})\".into()],\n+                \"\",\n+                &[\"core::ops::ControlFlow\".into()],\n+                crate::SnippetScope::Expr,\n+            )\n+            .unwrap()],\n+            ..TEST_CONFIG\n+        };\n+\n         check_edit_with_config(\n-            CompletionConfig {\n-                snippets: vec![Snippet::new(\n-                    &[],\n-                    &[\"break\".into()],\n-                    &[\"ControlFlow::Break(${receiver})\".into()],\n-                    \"\",\n-                    &[\"core::ops::ControlFlow\".into()],\n-                    crate::SnippetScope::Expr,\n-                )\n-                .unwrap()],\n-                ..TEST_CONFIG\n-            },\n+            config.clone(),\n             \"break\",\n             r#\"\n //- minicore: try\n@@ -516,6 +526,44 @@ fn main() { 42.$0 }\n use core::ops::ControlFlow;\n \n fn main() { ControlFlow::Break(42) }\n+\"#,\n+        );\n+\n+        check_edit_with_config(\n+            config.clone(),\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() { '\\\\'.$0 }\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() { ControlFlow::Break('\\\\\\\\') }\n+\"#,\n+        );\n+\n+        check_edit_with_config(\n+            config.clone(),\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() {\n+    match true {\n+        true => \"${1:placeholder}\",\n+        false => \"\\$\",\n+    }.$0\n+}\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() {\n+    ControlFlow::Break(match true {\n+        true => \"\\${1:placeholder}\",\n+        false => \"\\\\\\$\",\n+    })\n+}\n \"#,\n         );\n     }"}]}