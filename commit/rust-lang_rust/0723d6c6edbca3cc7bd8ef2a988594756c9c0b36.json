{"sha": "0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MjNkNmM2ZWRiY2EzY2M3YmQ4ZWYyYTk4ODU5NDc1NmM5YzBiMzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-11T20:56:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-16T10:22:33Z"}, "message": "Pacify tidy.", "tree": {"sha": "6b3cc96b9b8bea3b22859a60c9700e0e103aa15b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b3cc96b9b8bea3b22859a60c9700e0e103aa15b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "html_url": "https://github.com/rust-lang/rust/commit/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c31b2849ea499fae4a9f6f049d1ab0512e70fd", "html_url": "https://github.com/rust-lang/rust/commit/57c31b2849ea499fae4a9f6f049d1ab0512e70fd"}], "stats": {"total": 148, "additions": 89, "deletions": 59}, "files": [{"sha": "d09bbc37fe4688d4e015038f0921a6547f34baa1", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "patch": "@@ -286,7 +286,8 @@ pub fn try_report_overflow_error_type_of_infinite_size<'a, 'tcx>(\n         struct_enum_tys.iter()\n                        .enumerate()\n                        .filter_map(|(index, ty)| match ty.sty {\n-                           ty::TyEnum(adt_def, _) | ty::TyStruct(adt_def, _) if adt_def.did.is_local() =>\n+                           ty::TyEnum(adt_def, _) | ty::TyStruct(adt_def, _)\n+                               if adt_def.did.is_local() =>\n                                Some((index, adt_def.did)),\n                            _ =>\n                                None,"}, {"sha": "465cee0b60cc0d4391e85bd58c080037ce498524", "filename": "src/librustc_data_structures/obligation_forest/node_index.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs?ref=0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use core::nonzero::NonZero;\n use std::u32;\n "}, {"sha": "628d3f94bdb90f6d2a2e7cf99c4e74a837985aab", "filename": "src/librustc_data_structures/obligation_forest/test.rs", "status": "modified", "additions": 75, "deletions": 57, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftest.rs?ref=0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use super::{ObligationForest, Outcome, Error};\n \n #[test]\n@@ -86,42 +96,46 @@ fn success_in_grandchildren() {\n     let mut forest = ObligationForest::new();\n     forest.push_root(\"A\");\n \n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, _| {\n-        match *obligation {\n-            \"A\" => Ok(Some(vec![\"A.1\", \"A.2\", \"A.3\"])),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, _| {\n+            match *obligation {\n+                \"A\" => Ok(Some(vec![\"A.1\", \"A.2\", \"A.3\"])),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert!(ok.is_empty());\n     assert!(err.is_empty());\n \n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, _| {\n-        match *obligation {\n-            \"A.1\" => Ok(Some(vec![])),\n-            \"A.2\" => Ok(Some(vec![\"A.2.i\", \"A.2.ii\"])),\n-            \"A.3\" => Ok(Some(vec![])),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, _| {\n+            match *obligation {\n+                \"A.1\" => Ok(Some(vec![])),\n+                \"A.2\" => Ok(Some(vec![\"A.2.i\", \"A.2.ii\"])),\n+                \"A.3\" => Ok(Some(vec![])),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert_eq!(ok, vec![\"A.3\", \"A.1\"]);\n     assert!(err.is_empty());\n \n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, _| {\n-        match *obligation {\n-            \"A.2.i\" => Ok(Some(vec![\"A.2.i.a\"])),\n-            \"A.2.ii\" => Ok(Some(vec![])),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, _| {\n+            match *obligation {\n+                \"A.2.i\" => Ok(Some(vec![\"A.2.i.a\"])),\n+                \"A.2.ii\" => Ok(Some(vec![])),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert_eq!(ok, vec![\"A.2.ii\"]);\n     assert!(err.is_empty());\n \n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, _| {\n-        match *obligation {\n-            \"A.2.i.a\" => Ok(Some(vec![])),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, _| {\n+            match *obligation {\n+                \"A.2.i.a\" => Ok(Some(vec![])),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert_eq!(ok, vec![\"A.2.i.a\", \"A.2.i\", \"A.2\", \"A\"]);\n     assert!(err.is_empty());\n \n@@ -137,12 +151,13 @@ fn to_errors_no_throw() {\n     // only yields one of them (and does not panic, in particular).\n     let mut forest = ObligationForest::new();\n     forest.push_root(\"A\");\n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, _| {\n-        match *obligation {\n-            \"A\" => Ok(Some(vec![\"A.1\", \"A.2\", \"A.3\"])),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, _| {\n+            match *obligation {\n+                \"A\" => Ok(Some(vec![\"A.1\", \"A.2\", \"A.3\"])),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert_eq!(ok.len(), 0);\n     assert_eq!(err.len(), 0);\n     let errors = forest.to_errors(());\n@@ -155,34 +170,37 @@ fn backtrace() {\n     // only yields one of them (and does not panic, in particular).\n     let mut forest: ObligationForest<&'static str> = ObligationForest::new();\n     forest.push_root(\"A\");\n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, mut backtrace| {\n-        assert!(backtrace.next().is_none());\n-        match *obligation {\n-            \"A\" => Ok(Some(vec![\"A.1\"])),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, mut backtrace| {\n+            assert!(backtrace.next().is_none());\n+            match *obligation {\n+                \"A\" => Ok(Some(vec![\"A.1\"])),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert!(ok.is_empty());\n     assert!(err.is_empty());\n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, mut backtrace| {\n-        assert!(backtrace.next().unwrap() == &\"A\");\n-        assert!(backtrace.next().is_none());\n-        match *obligation {\n-            \"A.1\" => Ok(Some(vec![\"A.1.i\"])),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, mut backtrace| {\n+            assert!(backtrace.next().unwrap() == &\"A\");\n+            assert!(backtrace.next().is_none());\n+            match *obligation {\n+                \"A.1\" => Ok(Some(vec![\"A.1.i\"])),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert!(ok.is_empty());\n     assert!(err.is_empty());\n-    let Outcome { successful: ok, errors: err, .. } = forest.process_obligations::<(),_>(|obligation, mut backtrace| {\n-        assert!(backtrace.next().unwrap() == &\"A.1\");\n-        assert!(backtrace.next().unwrap() == &\"A\");\n-        assert!(backtrace.next().is_none());\n-        match *obligation {\n-            \"A.1.i\" => Ok(None),\n-            _ => unreachable!(),\n-        }\n-    });\n+    let Outcome { successful: ok, errors: err, .. } =\n+        forest.process_obligations::<(),_>(|obligation, mut backtrace| {\n+            assert!(backtrace.next().unwrap() == &\"A.1\");\n+            assert!(backtrace.next().unwrap() == &\"A\");\n+            assert!(backtrace.next().is_none());\n+            match *obligation {\n+                \"A.1.i\" => Ok(None),\n+                _ => unreachable!(),\n+            }\n+        });\n     assert_eq!(ok.len(), 0);\n     assert!(err.is_empty());\n }"}, {"sha": "4ada6c36f8fe9bd80a0c4934d2251a9375b9e021", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0723d6c6edbca3cc7bd8ef2a988594756c9c0b36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0723d6c6edbca3cc7bd8ef2a988594756c9c0b36", "patch": "@@ -4142,7 +4142,8 @@ pub fn check_representable(tcx: &ty::ctxt,\n     // caught by case 1.\n     match rty.is_representable(tcx, sp) {\n         Representability::SelfRecursive => {\n-            traits::recursive_type_with_infinite_size_error(tcx, tcx.map.local_def_id(item_id)).emit();\n+            let item_def_id = tcx.map.local_def_id(item_id);\n+            traits::recursive_type_with_infinite_size_error(tcx, item_def_id).emit();\n             return false\n         }\n         Representability::Representable | Representability::ContainsRecursive => (),"}]}