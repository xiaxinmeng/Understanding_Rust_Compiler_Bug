{"sha": "2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzVhMTAxNmIwYzBjYzExMzJjMTk4NzVkY2Q4OGQ3YjI4MjVlYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T01:12:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T01:12:13Z"}, "message": "Auto merge of #55982 - alexcrichton:panic-extern-abort, r=zackmdavis\n\nrustc: Switch `extern` functions to abort by default on panic\n\nThis was intended to land way back in 1.24, but it was backed out due to\nbreakage which has long since been fixed. An unstable `#[unwind]`\nattribute can be used to tweak the behavior here, but this is currently\nsimply switching rustc's internal default to abort-by-default if an\n`extern` function panics, making our codegen sound primarily (as\ncurrently you can produce UB with safe code)\n\nCloses #52652", "tree": {"sha": "fbc2850a9e364278843141b19445aa1ed1a0796c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbc2850a9e364278843141b19445aa1ed1a0796c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "html_url": "https://github.com/rust-lang/rust/commit/2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0076f58d5333f24f709aa46b4bad760ffb51b9b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0076f58d5333f24f709aa46b4bad760ffb51b9b0", "html_url": "https://github.com/rust-lang/rust/commit/0076f58d5333f24f709aa46b4bad760ffb51b9b0"}, {"sha": "1091eee65b91a9968f2a0b2f0c7d6e8e27d8d033", "url": "https://api.github.com/repos/rust-lang/rust/commits/1091eee65b91a9968f2a0b2f0c7d6e8e27d8d033", "html_url": "https://github.com/rust-lang/rust/commit/1091eee65b91a9968f2a0b2f0c7d6e8e27d8d033"}], "stats": {"total": 107, "additions": 61, "deletions": 46}, "files": [{"sha": "30edc4744ecd4eff0f8d0b8e344e405323394b07", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -15,14 +15,15 @@ use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n use rustc::session::config::Sanitizer;\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{self, TyCtxt, PolyFnSig};\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_codegen_ssa::traits::*;\n \n+use abi::Abi;\n use attributes;\n use llvm::{self, Attribute};\n use llvm::AttributePlace::Function;\n@@ -60,7 +61,7 @@ pub fn emit_uwtable(val: &'ll Value, emit: bool) {\n \n /// Tell LLVM whether the function can or cannot unwind.\n #[inline]\n-pub fn unwind(val: &'ll Value, can_unwind: bool) {\n+fn unwind(val: &'ll Value, can_unwind: bool) {\n     Attribute::NoUnwind.toggle_llfn(Function, val, !can_unwind);\n }\n \n@@ -150,9 +151,10 @@ pub fn non_lazy_bind(sess: &Session, llfn: &'ll Value) {\n /// Composite function which sets LLVM attributes for function depending on its AST (`#[attribute]`)\n /// attributes.\n pub fn from_fn_attrs(\n-    cx: &CodegenCx<'ll, '_>,\n+    cx: &CodegenCx<'ll, 'tcx>,\n     llfn: &'ll Value,\n     id: Option<DefId>,\n+    sig: PolyFnSig<'tcx>,\n ) {\n     let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n         .unwrap_or_else(|| CodegenFnAttrs::new());\n@@ -194,28 +196,37 @@ pub fn from_fn_attrs(\n             llvm::AttributePlace::ReturnValue, llfn);\n     }\n \n-    let can_unwind = if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::UNWIND) {\n-        Some(true)\n+    unwind(llfn, if cx.tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n+        // In panic=abort mode we assume nothing can unwind anywhere, so\n+        // optimize based on this!\n+        false\n+    } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::UNWIND) {\n+        // If a specific #[unwind] attribute is present, use that\n+        true\n     } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n-        Some(false)\n-\n-    // Perhaps questionable, but we assume that anything defined\n-    // *in Rust code* may unwind. Foreign items like `extern \"C\" {\n-    // fn foo(); }` are assumed not to unwind **unless** they have\n-    // a `#[unwind]` attribute.\n-    } else if id.map(|id| !cx.tcx.is_foreign_item(id)).unwrap_or(false) {\n-        Some(true)\n-    } else {\n-        None\n-    };\n-\n-    match can_unwind {\n-        Some(false) => attributes::unwind(llfn, false),\n-        Some(true) if cx.tcx.sess.panic_strategy() == PanicStrategy::Unwind => {\n-            attributes::unwind(llfn, true);\n+        // Special attribute for allocator functions, which can't unwind\n+        false\n+    } else if let Some(id) = id {\n+        let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+        if cx.tcx.is_foreign_item(id) {\n+            // Foreign items like `extern \"C\" { fn foo(); }` are assumed not to\n+            // unwind\n+            false\n+        } else if sig.abi != Abi::Rust && sig.abi != Abi::RustCall {\n+            // Any items defined in Rust that *don't* have the `extern` ABI are\n+            // defined to not unwind. We insert shims to abort if an unwind\n+            // happens to enforce this.\n+            false\n+        } else {\n+            // Anything else defined in Rust is assumed that it can possibly\n+            // unwind\n+            true\n         }\n-        Some(true) | None => {}\n-    }\n+    } else {\n+        // assume this can possibly unwind, avoiding the application of a\n+        // `nounwind` attribute below.\n+        true\n+    });\n \n     // Always annotate functions with the target-cpu they are compiled for.\n     // Without this, ThinLTO won't inline Rust functions into Clang generated"}, {"sha": "87185a20c50913ceb3dcc895ffaa38fd5dbb043f", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -94,7 +94,7 @@ pub fn get_fn(\n         if instance.def.is_inline(tcx) {\n             attributes::inline(cx, llfn, attributes::InlineAttr::Hint);\n         }\n-        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()));\n+        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()), sig);\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "0bd6146f5aaa0e002924e625562e08c7ee1398ff", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -409,7 +409,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         ));\n \n         let llfn = self.declare_fn(\"rust_eh_unwind_resume\", sig);\n-        attributes::unwind(llfn, true);\n         attributes::apply_target_cpu_attr(self, llfn);\n         unwresume.set(Some(llfn));\n         llfn"}, {"sha": "2964f2e58470f00497fc84320e50af16be22d852", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -26,8 +26,7 @@ use rustc::ty::{self, PolyFnSig};\n use rustc::ty::layout::LayoutOf;\n use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_target::spec::PanicStrategy;\n-use abi::{Abi, FnType, FnTypeExt};\n+use abi::{FnType, FnTypeExt};\n use attributes;\n use context::CodegenCx;\n use type_::Type;\n@@ -86,10 +85,6 @@ fn declare_raw_fn(\n         _ => {},\n     }\n \n-    if cx.tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-        attributes::unwind(llfn, false);\n-    }\n-\n     attributes::non_lazy_bind(cx.sess(), llfn);\n \n     llfn\n@@ -132,10 +127,6 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n         }\n \n-        if sig.abi != Abi::Rust && sig.abi != Abi::RustCall {\n-            attributes::unwind(llfn, false);\n-        }\n-\n         fty.apply_attrs_llfn(llfn);\n \n         llfn"}, {"sha": "2b82ebe0bc25c5bc11afa28247d8e3aa7eed4fd0", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -1081,7 +1081,7 @@ fn gen_fn<'ll, 'tcx>(\n         Abi::Rust\n     ));\n     let llfn = cx.define_internal_fn(name, rust_fn_sig);\n-    attributes::from_fn_attrs(cx, llfn, None);\n+    attributes::from_fn_attrs(cx, llfn, None, rust_fn_sig);\n     let bx = Builder::new_block(cx, llfn, \"entry-block\");\n     codegen(bx);\n     llfn"}, {"sha": "9c69d7d8cf4ffa1731930a02381997a486ee0919", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -82,7 +82,12 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         if instance.def.is_inline(self.tcx) {\n             attributes::inline(self, lldecl, attributes::InlineAttr::Hint);\n         }\n-        attributes::from_fn_attrs(self, lldecl, Some(instance.def.def_id()));\n+        attributes::from_fn_attrs(\n+            self,\n+            lldecl,\n+            Some(instance.def.def_id()),\n+            mono_sig,\n+        );\n \n         self.instances.borrow_mut().insert(instance, lldecl);\n     }"}, {"sha": "ab52d9be6b81bc7255f5aeb2e0530a298886a061", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -628,12 +628,7 @@ fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // unwind anyway. Don't stop them.\n     let attrs = &tcx.get_attrs(fn_def_id);\n     match attr::find_unwind_attr(Some(tcx.sess.diagnostic()), attrs) {\n-        None => {\n-            // FIXME(rust-lang/rust#48251) -- Had to disable\n-            // abort-on-panic for backwards compatibility reasons.\n-            false\n-        }\n-\n+        None => true,\n         Some(UnwindAttr::Allowed) => false,\n         Some(UnwindAttr::Aborts) => true,\n     }"}, {"sha": "ed07cf1d6b20d3c872f5234cbf7adf05db61f950", "filename": "src/test/codegen/nounwind-extern.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Ftest%2Fcodegen%2Fnounwind-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Ftest%2Fcodegen%2Fnounwind-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnounwind-extern.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: Function Attrs: norecurse nounwind\n+pub extern fn foo() {}"}, {"sha": "12b5b786766d67e2e7515e12c14eff41e2498ad2", "filename": "src/test/run-pass/abort-on-c-abi.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -15,14 +15,11 @@\n // ignore-cloudabi no env and process\n // ignore-emscripten no processes\n \n-#![feature(unwind_attributes)]\n-\n use std::{env, panic};\n use std::io::prelude::*;\n use std::io;\n use std::process::{Command, Stdio};\n \n-#[unwind(aborts)]\n extern \"C\" fn panic_in_ffi() {\n     panic!(\"Test\");\n }"}, {"sha": "12df0f32134a2348620ef55cb4297613f9e46c07", "filename": "src/test/run-pass/extern/extern-call-deep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f35a1016b0c0cc1132c19875dcd88d7b2825eae/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep.rs?ref=2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "patch": "@@ -10,6 +10,7 @@\n \n // run-pass\n // ignore-wasm32-bare no libc to test ffi with\n+// ignore-emscripten blows the JS stack\n \n #![feature(rustc_private)]\n "}]}