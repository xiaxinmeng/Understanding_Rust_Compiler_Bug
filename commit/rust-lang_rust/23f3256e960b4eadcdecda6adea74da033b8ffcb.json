{"sha": "23f3256e960b4eadcdecda6adea74da033b8ffcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZjMyNTZlOTYwYjRlYWRjZGVjZGE2YWRlYTc0ZGEwMzNiOGZmY2I=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-03T08:50:56Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-03T14:03:25Z"}, "message": "More text fixes after Test section was moved to top", "tree": {"sha": "549b8ad06bf273cababeb48a081c4d6771dda5dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549b8ad06bf273cababeb48a081c4d6771dda5dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f3256e960b4eadcdecda6adea74da033b8ffcb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlx73rMACgkQtvoGpuDi\nZls3Hw/7BuL4ZDJ9KsqLrmau+VFBIfKZcH6TpYmxGpjods/TB44QSYWg7QS/hV0D\nrxukSVcw/u4bnOS7yb99ahMxZgBdO0R+s/g56RpLSfibnMyKAdMYohefTomVOAbi\n4T8C56fsVvjgrqbkS7xmiYgcClayogdDUTqwAoXiPY6gbPkSTRep+se1GWE/+afJ\noO3z1us7OQeLjnlUpR/1VV1nD9NBqbLclLYJhi4zXKjEDPcYWlbCfO9OQjM2v0S5\neB9OmyZD/gn6Eakq3I5r5wNIn+1ym5mXtMc1gJ7yQdeQq+JweVad4VDe4GhWF79N\nwaNVw28VeIoLK84nQFec4kRVT5SJr8SwZRyYZjoHTX3KnTjO3EncjWVsrqNIQ8Ru\nwKqcCW1vWLp8xtCn6GPDMVqyH9p+ZEGGgd3lPSiHgxpmzW7UxpMzPGMZWg41TRAV\n6LzARwVPdFLuZXrYcvFGCZHAInUQroxioGeB1IzBg2ZMIBU9l1qmVUI0DGQf20w/\nzC+5VnyQ5pkMYM9uUVbzrrdL8CIzEZheoXiiZxypHv6S9E3/SMz2To4ITyNHcR+H\nT2lSTQAQWhsD+/LSTawn5GsVPHWtzqCAOCGRqVgWjqSek5mwhggXVcuVnZxzAX+A\n2S8cjGYI+Gb8hyqo/7368JrzKiyrnSuFhDV5m1Ja8Ek6qEKZwtY=\n=L6pj\n-----END PGP SIGNATURE-----", "payload": "tree 549b8ad06bf273cababeb48a081c4d6771dda5dc\nparent 0da3521eb6161cc855da65e6f0c7308147b22ba7\nauthor Philipp Hansch <dev@phansch.net> 1551603056 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551621805 +0100\n\nMore text fixes after Test section was moved to top\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f3256e960b4eadcdecda6adea74da033b8ffcb", "html_url": "https://github.com/rust-lang/rust/commit/23f3256e960b4eadcdecda6adea74da033b8ffcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f3256e960b4eadcdecda6adea74da033b8ffcb/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da3521eb6161cc855da65e6f0c7308147b22ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da3521eb6161cc855da65e6f0c7308147b22ba7", "html_url": "https://github.com/rust-lang/rust/commit/0da3521eb6161cc855da65e6f0c7308147b22ba7"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "27381721103e4ee42c137799caa49989635d79db", "filename": "doc/adding_lints.md", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/23f3256e960b4eadcdecda6adea74da033b8ffcb/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/23f3256e960b4eadcdecda6adea74da033b8ffcb/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=23f3256e960b4eadcdecda6adea74da033b8ffcb", "patch": "@@ -78,7 +78,7 @@ fn main() {\n \n Now we can run the test with `TESTNAME=ui/foo_functions cargo uitest`.\n Currently this test will fail. If you go through the output you will see that we\n-have to add some missing imports to our lint file.\n+are told that `clippy::foo_functions` is an unknown lint, which is expected.\n \n While you are working on implementing your lint, you can keep running the UI\n test. That allows you to check if the output is turning into what you want.\n@@ -97,16 +97,16 @@ that test. Rustfix will apply the suggestions from the lint to the code of the\n test file and compare that to the contents of a `.fixed` file.\n \n Use `tests/ui/update-all-references.sh` to automatically generate the\n-`.fixed` file after running `cargo test`.\n+`.fixed` file after running the tests.\n \n With tests in place, let's have a look at implementing our lint now.\n \n ### Testing manually\n \n-Manually testing against an example file is useful if you have added some\n-`println!`s and test suite output becomes unreadable.  To try Clippy with your\n-local modifications, run `env CLIPPY_TESTS=true cargo run --bin clippy-driver -- -L ./target/debug input.rs`\n-from the working copy root.\n+Manually testing against an example file can be useful if you have added some\n+`println!`s and the test suite output becomes unreadable. To try Clippy with\n+your local modifications, run `env CLIPPY_TESTS=true cargo run --bin\n+clippy-driver -- -L ./target/debug input.rs` from the working copy root.\n \n ### Lint declaration\n \n@@ -177,9 +177,9 @@ in `clippy_lints/src/lib.rs`:\n reg.register_early_lint_pass(box foo_functions::FooFunctionsPass);\n ```\n \n-Without that, running the UI tests would produce an error like `unknown clippy\n-lint: clippy::foo_functions`.  The next decision we have to make is which lint\n-pass our lint is going to need.\n+This should fix the `unknown clippy lint: clippy::foo_functions` error that we\n+saw when we executed our tests the first time. The next decision we have to make\n+is which lint pass our lint is going to need.\n \n ### Lint passes\n \n@@ -189,8 +189,6 @@ This is good, because it makes writing this particular lint less complicated.\n \n We have to make this decision with every new Clippy lint. It boils down to using\n either [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass].\n-This is a result of Rust's compilation process. You can read more about it [in\n-the rustc guide][compilation_stages].\n \n In short, the `LateLintPass` has access to type information while the\n `EarlyLintPass` doesn't. If you don't need access to type information, use the\n@@ -209,8 +207,7 @@ use rustc::{declare_tool_lint, lint_array};\n ### Emitting a lint\n \n With UI tests and the lint declaration in place, we can start working on the\n-implementation of the lint logic. We can keep executing the tests until we make\n-them pass.\n+implementation of the lint logic.\n \n Let's start by implementing the `EarlyLintPass` for our `FooFunctionsPass`:\n \n@@ -229,9 +226,12 @@ the next section. Let's worry about the details later and emit our lint for\n *every* function definition first.\n \n Depending on how complex we want our lint message to be, we can choose from a\n-variety of lint emission functions.  They can all be found in\n+variety of lint emission functions. They can all be found in\n [`clippy_lints/src/utils/diagnostics.rs`][diagnostics].\n \n+`span_help_and_lint` seems most appropriate in this case. It allows us to\n+provide an extra help message and we can't really suggest a better name\n+automatically. This is how it looks:\n \n ```rust\n impl EarlyLintPass for Pass {\n@@ -247,9 +247,11 @@ impl EarlyLintPass for Pass {\n }\n ```\n \n+Running our UI test should now produce output that contains the lint message.\n+\n ### Adding the lint logic\n \n-Writing the logic for your lint will most likely be different from this example,\n+Writing the logic for our lint will most likely be different from this example,\n so this section is kept rather short.\n \n Using the [`check_fn`][check_fn] method gives us access to [`FnKind`][fn_kind]"}]}