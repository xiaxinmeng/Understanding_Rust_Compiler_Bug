{"sha": "7a34ac589008c4861022ca66da769fe42466a0d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzRhYzU4OTAwOGM0ODYxMDIyY2E2NmRhNzY5ZmU0MjQ2NmEwZDI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T13:55:07Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T13:55:07Z"}, "message": "Revert order of arguments to option::maybe and from_maybe\n\nCloses #2019", "tree": {"sha": "a4928f05ef38c850e7a818ea0bce45c464f4122d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4928f05ef38c850e7a818ea0bce45c464f4122d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a34ac589008c4861022ca66da769fe42466a0d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a34ac589008c4861022ca66da769fe42466a0d2", "html_url": "https://github.com/rust-lang/rust/commit/7a34ac589008c4861022ca66da769fe42466a0d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a34ac589008c4861022ca66da769fe42466a0d2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1547c279267191b47cecd461ec9cade57c0e4f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/1547c279267191b47cecd461ec9cade57c0e4f12", "html_url": "https://github.com/rust-lang/rust/commit/1547c279267191b47cecd461ec9cade57c0e4f12"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "34577d7da7d9518cfa95d4f6aff11c27858bcad8", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -52,13 +52,13 @@ pure fn is_some<T>(opt: option<T>) -> bool {\n     !is_none(opt)\n }\n \n-pure fn from_maybe<T: copy>(def: T, opt: option<T>) -> T {\n+pure fn from_maybe<T: copy>(opt: option<T>, def: T) -> T {\n     #[doc = \"Returns the contained value or a default\"];\n \n     alt opt { some(x) { x } none { def } }\n }\n \n-fn maybe<T, U: copy>(def: U, opt: option<T>, f: fn(T) -> U) -> U {\n+fn maybe<T, U: copy>(opt: option<T>, def: U, f: fn(T) -> U) -> U {\n     #[doc = \"Applies a function to the contained value or returns a default\"];\n \n     alt opt { none { def } some(t) { f(t) } }"}, {"sha": "2841202d6b7defb5e19170d86e8f9b7c8d010dee", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -372,7 +372,7 @@ fn homedir() -> option<path> {\n \n     #[cfg(target_os = \"win32\")]\n     fn secondary() -> option<path> {\n-        option::maybe(none, getenv(\"USERPROFILE\")) {|p|\n+        option::chain(getenv(\"USERPROFILE\")) {|p|\n             if !str::is_empty(p) {\n                 some(p)\n             } else {"}, {"sha": "30fe337017b8110e768803ea751abcf565825c7e", "filename": "src/rustc/driver/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdiagnostic.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -245,7 +245,7 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n \n fn print_macro_backtrace(cm: codemap::codemap, sp: span) {\n     option::may (sp.expn_info) {|ei|\n-        let ss = option::maybe(\"\", ei.callie.span,\n+        let ss = option::maybe(ei.callie.span, \"\",\n                                bind codemap::span_to_str(_, cm));\n         print_diagnostic(ss, note,\n                          #fmt(\"in expansion of #%s\", ei.callie.name));"}, {"sha": "17f1d2185a36bb6d1df4a5bcf9b45adbfa6cf026", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -163,7 +163,7 @@ fn get_dep_hashes(cstore: cstore) -> [str] {\n \n fn get_path(cstore: cstore, d: ast::def_id) -> [str] {\n     // let f = bind str::split_str(_, \"::\");\n-    option::maybe([], p(cstore).mod_path_map.find(d),\n+    option::maybe(p(cstore).mod_path_map.find(d), [],\n                   {|ds| str::split_str(ds, \"::\")})\n }\n // Local Variables:"}, {"sha": "d7148563d0215101eccefd37b54f9b13eff78bd4", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -616,7 +616,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         handle_fail(fcx, pres, post);\n         ret set_prestate_ann(fcx.ccx, e.id, pres) |\n                 set_poststate_ann(fcx.ccx, e.id, post) |\n-                option::maybe(false, maybe_fail_val, {|fail_val|\n+                option::maybe(maybe_fail_val, false, {|fail_val|\n                         find_pre_post_state_expr(fcx, pres, fail_val)});\n       }\n       expr_assert(p) {"}, {"sha": "59cd0ffe13ca7f5199463e45c4c4dd9b6ab96b41", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -356,7 +356,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            region_map: @middle::region::region_map) -> ctxt {\n     let interner = map::hashmap({|&&k: intern_key|\n         hash_type_structure(k.struct) +\n-            option::maybe(0u, k.o_def_id, ast_util::hash_def_id)\n+            option::maybe(k.o_def_id, 0u, ast_util::hash_def_id)\n     }, {|&&a, &&b| a == b});\n     @{interner: interner,\n       mutable next_id: 0u,"}, {"sha": "3c17372f200d5d121655d16c725ecf7f057051e3", "filename": "src/rustc/syntax/parse/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustc%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Feval.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -25,7 +25,7 @@ fn eval_crate_directives_to_mod(cx: ctx, cdirs: [@ast::crate_directive],\n     -> (ast::_mod, [ast::attribute]) {\n     #debug(\"eval crate prefix: %s\", prefix);\n     #debug(\"eval crate suffix: %s\",\n-           option::from_maybe(\"none\", suffix));\n+           option::from_maybe(suffix, \"none\"));\n     let (cview_items, citems, cattrs)\n         = parse_companion_mod(cx, prefix, suffix);\n     let view_items: [@ast::view_item] = [];"}, {"sha": "5d33fcb85745c3d824be0ea520a18eb6f0a93d26", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -50,7 +50,7 @@ fn fold_crate(\n     {\n         topmod: {\n             item: {\n-                name: option::from_maybe(doc.topmod.name(), attrs.name)\n+                name: option::from_maybe(attrs.name, doc.topmod.name())\n                 with doc.topmod.item\n             }\n             with doc.topmod"}, {"sha": "077f8a6ffd2d6d048fe03a168cc89d1f8f5539ae", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a34ac589008c4861022ca66da769fe42466a0d2/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=7a34ac589008c4861022ca66da769fe42466a0d2", "patch": "@@ -125,14 +125,14 @@ fn config_from_opts(\n     let result = result::chain(result) {|config|\n         let output_dir = getopts::opt_maybe_str(match, opt_output_dir());\n         result::ok({\n-            output_dir: option::from_maybe(config.output_dir, output_dir)\n+            output_dir: option::from_maybe(output_dir, config.output_dir)\n             with config\n         })\n     };\n     let result = result::chain(result) {|config|\n         let output_format = getopts::opt_maybe_str(\n             match, opt_output_format());\n-        option::maybe(result::ok(config), output_format) {|output_format|\n+        option::maybe(output_format, result::ok(config)) {|output_format|\n             result::chain(parse_output_format(output_format)) {|output_format|\n                 result::ok({\n                     output_format: output_format\n@@ -143,7 +143,7 @@ fn config_from_opts(\n     };\n     let result = result::chain(result) {|config|\n         let output_style = getopts::opt_maybe_str(match, opt_output_style());\n-        option::maybe(result::ok(config), output_style) {|output_style|\n+        option::maybe(output_style, result::ok(config)) {|output_style|\n             result::chain(parse_output_style(output_style)) {|output_style|\n                 result::ok({\n                     output_style: output_style"}]}