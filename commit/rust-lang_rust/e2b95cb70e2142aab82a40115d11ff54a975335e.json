{"sha": "e2b95cb70e2142aab82a40115d11ff54a975335e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYjk1Y2I3MGUyMTQyYWFiODJhNDAxMTVkMTFmZjU0YTk3NTMzNWU=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-05-28T15:11:34Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-08-18T23:07:33Z"}, "message": "Lift some Sized checks.", "tree": {"sha": "c8e4c91ad14abd3a6b82ec3a51be94167cf14a4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e4c91ad14abd3a6b82ec3a51be94167cf14a4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2b95cb70e2142aab82a40115d11ff54a975335e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b95cb70e2142aab82a40115d11ff54a975335e", "html_url": "https://github.com/rust-lang/rust/commit/e2b95cb70e2142aab82a40115d11ff54a975335e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2b95cb70e2142aab82a40115d11ff54a975335e/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f05304068bf6a3b84b328ad6911f6645a0dbf40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f05304068bf6a3b84b328ad6911f6645a0dbf40", "html_url": "https://github.com/rust-lang/rust/commit/7f05304068bf6a3b84b328ad6911f6645a0dbf40"}], "stats": {"total": 154, "additions": 140, "deletions": 14}, "files": [{"sha": "23736b1c77bb5d487e8a3e02471eca3c4128f2f3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -1454,9 +1454,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             ObligationCauseCode::VariableType(_) => {\n                 err.note(\"all local variables must have a statically known size\");\n+                if !self.tcx.features().unsized_locals {\n+                    err.help(\"unsized locals are gated as an unstable feature\");\n+                }\n             }\n             ObligationCauseCode::SizedArgumentType => {\n                 err.note(\"all function arguments must have a statically known size\");\n+                if !self.tcx.features().unsized_locals {\n+                    err.help(\"unsized locals are gated as an unstable feature\");\n+                }\n             }\n             ObligationCauseCode::SizedReturnType => {\n                 err.note(\"the return type of a function must have a \\"}, {"sha": "ab83cfe25b590b92a1f9c7b42566905be70e5015", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -903,11 +903,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 }\n                 self.check_rvalue(mir, rv, location);\n-                let trait_ref = ty::TraitRef {\n-                    def_id: tcx.lang_items().sized_trait().unwrap(),\n-                    substs: tcx.mk_substs_trait(place_ty, &[]),\n-                };\n-                self.prove_trait_ref(trait_ref, location.interesting());\n+                if !self.tcx().features().unsized_locals {\n+                    let trait_ref = ty::TraitRef {\n+                        def_id: tcx.lang_items().sized_trait().unwrap(),\n+                        substs: tcx.mk_substs_trait(place_ty, &[]),\n+                    };\n+                    self.prove_trait_ref(trait_ref, location.interesting());\n+                }\n             }\n             StatementKind::SetDiscriminant {\n                 ref place,\n@@ -962,6 +964,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         mir: &Mir<'tcx>,\n         term: &Terminator<'tcx>,\n         term_location: Location,\n+        errors_buffer: &mut Option<&mut Vec<Diagnostic>>,\n     ) {\n         debug!(\"check_terminator: {:?}\", term);\n         let tcx = self.tcx();\n@@ -1041,7 +1044,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     &sig,\n                 );\n                 let sig = self.normalize(sig, term_location);\n-                self.check_call_dest(mir, term, &sig, destination, term_location);\n+                self.check_call_dest(mir, term, &sig, destination, term_location, errors_buffer);\n \n                 self.prove_predicates(\n                     sig.inputs().iter().map(|ty| ty::Predicate::WellFormed(ty)),\n@@ -1115,6 +1118,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         sig: &ty::FnSig<'tcx>,\n         destination: &Option<(Place<'tcx>, BasicBlock)>,\n         term_location: Location,\n+        errors_buffer: &mut Option<&mut Vec<Diagnostic>>,\n     ) {\n         let tcx = self.tcx();\n         match *destination {\n@@ -1143,6 +1147,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         terr\n                     );\n                 }\n+\n+                // When `#![feature(unsized_locals)]` is not enabled,\n+                // this check is done at `check_local`.\n+                if self.tcx().features().unsized_locals {\n+                    let span = term.source_info.span;\n+                    self.ensure_place_sized(dest_ty, span, errors_buffer);\n+                }\n             }\n             None => {\n                 // FIXME(canndrew): This is_never should probably be an is_uninhabited\n@@ -1309,14 +1320,26 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             LocalKind::Var | LocalKind::Temp => {}\n         }\n \n-        let span = local_decl.source_info.span;\n-        let ty = local_decl.ty;\n+        // When `#![feature(unsized_locals)]` is enabled, only function calls\n+        // are checked in `check_call_dest`.\n+        if !self.tcx().features().unsized_locals {\n+            let span = local_decl.source_info.span;\n+            let ty = local_decl.ty;\n+            self.ensure_place_sized(ty, span, errors_buffer);\n+        }\n+    }\n+\n+    fn ensure_place_sized(&mut self,\n+                          ty: Ty<'tcx>,\n+                          span: Span,\n+                          errors_buffer: &mut Option<&mut Vec<Diagnostic>>) {\n+        let tcx = self.tcx();\n \n         // Erase the regions from `ty` to get a global type.  The\n         // `Sized` bound in no way depends on precise regions, so this\n         // shouldn't affect `is_sized`.\n-        let gcx = self.tcx().global_tcx();\n-        let erased_ty = gcx.lift(&self.tcx().erase_regions(&ty)).unwrap();\n+        let gcx = tcx.global_tcx();\n+        let erased_ty = gcx.lift(&tcx.erase_regions(&ty)).unwrap();\n         if !erased_ty.is_sized(gcx.at(span), self.param_env) {\n             // in current MIR construction, all non-control-flow rvalue\n             // expressions evaluate through `as_temp` or `into` a return\n@@ -1838,7 +1861,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 location.statement_index += 1;\n             }\n \n-            self.check_terminator(mir, block_data.terminator(), location);\n+            self.check_terminator(mir, block_data.terminator(), location, &mut errors_buffer);\n             self.check_iscleanup(mir, block_data);\n         }\n     }"}, {"sha": "f73333df796b5135ed1fea8cc8615df21e61f34d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -961,8 +961,10 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n         if let PatKind::Binding(_, _, ident, _) = p.node {\n             let var_ty = self.assign(p.span, p.id, None);\n \n-            self.fcx.require_type_is_sized(var_ty, p.span,\n-                                           traits::VariableType(p.id));\n+            if !self.fcx.tcx.features().unsized_locals {\n+                self.fcx.require_type_is_sized(var_ty, p.span,\n+                                               traits::VariableType(p.id));\n+            }\n \n             debug!(\"Pattern binding {} is assigned to {} with type {:?}\",\n                    ident,\n@@ -1048,7 +1050,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n-        if arg.pat.simple_ident().is_none() {\n+        if arg.pat.simple_ident().is_none() && !fcx.tcx.features().unsized_locals {\n             fcx.require_type_is_sized(arg_ty, decl.output.span(), traits::SizedArgumentType);\n         }\n "}, {"sha": "a09ccbb407e9847e832fc07a107a2c6a95792d1b", "filename": "src/test/compile-fail/unsized-locals/unsized-exprs.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Funsized-exprs.rs?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_tuple_coercion, unsized_locals)]\n+\n+struct A<X: ?Sized>(X);\n+\n+fn udrop<T: ?Sized>(_x: T) {}\n+fn foo() -> Box<[u8]> {\n+    Box::new(*b\"foo\")\n+}\n+fn tfoo() -> Box<(i32, [u8])> {\n+    Box::new((42, *b\"foo\"))\n+}\n+fn afoo() -> Box<A<[u8]>> {\n+    Box::new(A(*b\"foo\"))\n+}\n+\n+impl std::ops::Add<i32> for A<[u8]> {\n+    type Output = ();\n+    fn add(self, _rhs: i32) -> Self::Output {}\n+}\n+\n+fn main() {\n+    udrop::<(i32, [u8])>((42, *foo()));\n+    //~^ERROR E0277\n+    udrop::<A<[u8]>>(A { 0: *foo() });\n+    //~^ERROR E0277\n+}"}, {"sha": "40d6e54bd892fe3ae8d2a587444f213cf7873fe1", "filename": "src/test/compile-fail/unsized-locals/unsized-exprs2.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-locals%2Funsized-exprs2.rs?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_tuple_coercion, unsized_locals)]\n+\n+struct A<X: ?Sized>(X);\n+\n+fn udrop<T: ?Sized>(_x: T) {}\n+fn foo() -> Box<[u8]> {\n+    Box::new(*b\"foo\")\n+}\n+fn tfoo() -> Box<(i32, [u8])> {\n+    Box::new((42, *b\"foo\"))\n+}\n+fn afoo() -> Box<A<[u8]>> {\n+    Box::new(A(*b\"foo\"))\n+}\n+\n+impl std::ops::Add<i32> for A<[u8]> {\n+    type Output = ();\n+    fn add(self, _rhs: i32) -> Self::Output {}\n+}\n+\n+fn main() {\n+    udrop::<[u8]>(foo()[..]);\n+    //~^ERROR cannot move out of indexed content\n+    // FIXME: should be error\n+    udrop::<A<[u8]>>(A(*foo()));\n+}"}, {"sha": "09e3cb8c126a3e18deb54a98c85b2a409fde6f74", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -8,6 +8,7 @@ LL |     let x = t.get(); //~ ERROR the size for values of type\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where <T as Get>::Value: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "ab9020222ea2b4f7b7e149a1618b5b3f25ca4786", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -8,6 +8,7 @@ LL | fn f(p: Path) { }\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:27:5"}, {"sha": "a0440a373d2fc939e8696a1f83a0ac5bf1a74241", "filename": "src/test/ui/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unsized_locals.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -7,6 +7,7 @@ LL | fn f(f: FnOnce()) {}\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce() + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "877e0eaedf1435a0b5d4aba0fd657148275c8682", "filename": "src/test/ui/issues/issue-15756.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -7,6 +7,7 @@ LL |     &mut something\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "269a69dde3345bdd930e902c5f5b338ebc843060", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -8,6 +8,7 @@ LL |     fn foo(self) -> &'static i32 {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "9bc937b97c9a1649b43cf0836a15fcfb56d33490", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -7,6 +7,7 @@ LL | fn _test(ref _p: str) {}\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "e4a34fdaf48a46375f02469571ec843d5de14619", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -7,6 +7,7 @@ LL | pub fn example(ref s: str) {}\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "912d791b6bc3a4b3a27746307a5a33e0a04c2c3a", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -8,6 +8,7 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where <Self as std::ops::Deref>::Target: std::marker::Sized` bound\n    = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n   --> $DIR/issue-42312.rs:18:23\n@@ -18,6 +19,7 @@ LL | pub fn f(_: ToString) {}\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to 2 previous errors\n "}, {"sha": "63dabd86ca89ed539e1beeacf1bfddb27dd23710", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -7,6 +7,7 @@ LL | fn new_struct(r: A+'static)\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5883.rs:18:8"}, {"sha": "9e7fca0508ef8732278bfce408236a03b1f87394", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -7,6 +7,7 @@ LL | fn foo(_x: K) {}\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "57eff3fb13708878f3b0082c46a98be1d8bc7c86", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -30,6 +30,7 @@ LL |   let v = s[..2];\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:19:17"}, {"sha": "ecabf9af27b381a628df2110b2aec1731a20fb7c", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -7,6 +7,7 @@ LL | fn foo(_x: Foo + Send) {\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + std::marker::Send + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to previous error\n "}, {"sha": "5a09533269288ab705bd7f761f2b4c8b278667d4", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2b95cb70e2142aab82a40115d11ff54a975335e/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=e2b95cb70e2142aab82a40115d11ff54a975335e", "patch": "@@ -8,6 +8,7 @@ LL |     let y: Y;\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:17:12\n@@ -41,6 +42,7 @@ LL |     let y: X;\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:27:12\n@@ -63,6 +65,7 @@ LL |     let y: X = *x1;\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:34:9\n@@ -74,6 +77,7 @@ LL |     let y = *x2;\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:36:10\n@@ -85,6 +89,7 @@ LL |     let (y, z) = (*x3, 4);\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:9\n@@ -96,6 +101,7 @@ LL |     let y: X = *x1;\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:42:9\n@@ -107,6 +113,7 @@ LL |     let y = *x2;\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:44:10\n@@ -118,6 +125,7 @@ LL |     let (y, z) = (*x3, 4);\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:48:18\n@@ -129,6 +137,7 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:50:22\n@@ -140,6 +149,7 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n \n error: aborting due to 13 previous errors\n "}]}