{"sha": "650fb06d68771828406f4f27e3af5db9c11311c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MGZiMDZkNjg3NzE4Mjg0MDZmNGYyN2UzYWY1ZGI5YzExMzExYzU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-28T00:38:01Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-31T01:04:19Z"}, "message": "Pretty-print token trees.", "tree": {"sha": "d2d25f90e0ceab9c30cc54c7a850eea12eee7a1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d25f90e0ceab9c30cc54c7a850eea12eee7a1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/650fb06d68771828406f4f27e3af5db9c11311c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/650fb06d68771828406f4f27e3af5db9c11311c5", "html_url": "https://github.com/rust-lang/rust/commit/650fb06d68771828406f4f27e3af5db9c11311c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/650fb06d68771828406f4f27e3af5db9c11311c5/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28812cfd66115c013b306c4c809dc3dc8c8b6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a28812cfd66115c013b306c4c809dc3dc8c8b6ac", "html_url": "https://github.com/rust-lang/rust/commit/a28812cfd66115c013b306c4c809dc3dc8c8b6ac"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "32ff77e55a192c9ebb507676212ed39cbb94b57d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/650fb06d68771828406f4f27e3af5db9c11311c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/650fb06d68771828406f4f27e3af5db9c11311c5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=650fb06d68771828406f4f27e3af5db9c11311c5", "patch": "@@ -597,10 +597,9 @@ fn print_item(s: ps, &&item: @ast::item) {\n         bclose(s, item.span);\n       }\n       ast::item_mac({node: ast::mac_invoc_tt(pth, tts), _}) {\n-\n-        word(s.s, *item.ident);\n+        head(s, path_to_str(pth) + \"! \" + *item.ident);\n         bopen(s);\n-        for tts.each |tt| { print_tt(s, tt); }\n+        for tts.each |tt| { print_tt(s, tt);  }\n         bclose(s, item.span);\n       }\n       ast::item_mac(_) {\n@@ -610,13 +609,40 @@ fn print_item(s: ps, &&item: @ast::item) {\n     s.ann.post(ann_node);\n }\n \n-/// Unimplemented because ident tokens lose their meaning without the interner\n-/// present. Fixing that would make invoking the pretty printer painful.\n-/// If this did work, the naive way of implementing it would be really ugly.\n-/// A prettier option would involve scraping the macro grammar for formatting\n-/// advice. But that would be hard.\n-fn print_tt(_s: ps, _tt: ast::token_tree) {\n-    fail ~\"token trees cannot be pretty-printed\"\n+/// This doesn't deserve to be called \"pretty\" printing, but it should be\n+/// meaning-preserving. A quick hack that might help would be to look at the\n+/// spans embedded in the TTs to decide where to put spaces and newlines.\n+/// But it'd be better to parse these according to the grammar of the\n+/// appropriate macro, transcribe back into the grammar we just parsed from,\n+/// and then pretty-print the resulting AST nodes (so, e.g., we print\n+/// expression arguments as expressions). It can be done! I think.\n+fn print_tt(s: ps, tt: ast::token_tree) {\n+    alt tt {\n+      ast::tt_delim(tts) {\n+        for tts.each() |tt_elt| { print_tt(s, tt_elt); }\n+      }\n+      ast::tt_tok(_, tk) {\n+        word(s.s, parse::token::to_str(*s.intr, tk));\n+        alt tk {\n+          // gotta keep them separated\n+          parse::token::IDENT(*) { word(s.s, ~\" \") }\n+          _ {}\n+        }\n+      }\n+      ast::tt_seq(_, tts, sep, zerok) {\n+        word(s.s, ~\"$(\");\n+        for tts.each() |tt_elt| { print_tt(s, tt_elt); }\n+        word(s.s, ~\")\");\n+        alt sep {\n+          some(tk) { word(s.s, parse::token::to_str(*s.intr, tk)); }\n+          none {}\n+        }\n+        word(s.s, if zerok { ~\"*\" } else { ~\"+\" });\n+      }\n+      ast::tt_nonterminal(_, name) {\n+        word(s.s, ~\"$\" + *name);\n+      }\n+    }\n }\n \n fn print_variant(s: ps, v: ast::variant) {\n@@ -839,9 +865,8 @@ fn print_mac(s: ps, m: ast::mac) {\n         option::iter(arg, |a| print_expr(s, a));\n         // FIXME: extension 'body' (#2339)\n       }\n-      ast::mac_invoc_tt(path, tts) {\n-        print_path(s, path, false);\n-        word(s.s, ~\"!\");\n+      ast::mac_invoc_tt(pth, tts) {\n+        head(s, path_to_str(pth) + \"!\");\n         bopen(s);\n         for tts.each() |tt| { print_tt(s, tt); }\n         bclose(s, m.span);"}]}