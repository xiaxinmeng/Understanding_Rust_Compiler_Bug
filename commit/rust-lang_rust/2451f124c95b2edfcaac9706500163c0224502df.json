{"sha": "2451f124c95b2edfcaac9706500163c0224502df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NTFmMTI0Yzk1YjJlZGZjYWFjOTcwNjUwMDE2M2MwMjI0NTAyZGY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-25T00:09:33Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-25T00:09:33Z"}, "message": "Address review comments", "tree": {"sha": "7fc448ef88555f515ea025f8ba4e300330205b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc448ef88555f515ea025f8ba4e300330205b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2451f124c95b2edfcaac9706500163c0224502df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2451f124c95b2edfcaac9706500163c0224502df", "html_url": "https://github.com/rust-lang/rust/commit/2451f124c95b2edfcaac9706500163c0224502df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2451f124c95b2edfcaac9706500163c0224502df/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00eca69bffcb4ef95ba1dd6013b840bf12a85804", "url": "https://api.github.com/repos/rust-lang/rust/commits/00eca69bffcb4ef95ba1dd6013b840bf12a85804", "html_url": "https://github.com/rust-lang/rust/commit/00eca69bffcb4ef95ba1dd6013b840bf12a85804"}], "stats": {"total": 168, "additions": 78, "deletions": 90}, "files": [{"sha": "f090bfbf2b22831d92eeb538d2b728d4999b000a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 40, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=2451f124c95b2edfcaac9706500163c0224502df", "patch": "@@ -44,7 +44,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Tup(ref elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),\n                 ExprKind::Call(ref f, ref args) => {\n-                    if let Some(legacy_args) = self.legacy_const_generic_args(f) {\n+                    if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n                         self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)\n                     } else {\n                         let f = self.lower_expr(f);\n@@ -298,39 +298,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    /// Checks if an expression refers to a function marked with\n-    /// `#[rustc_legacy_const_generics]` and returns the argument index list\n-    /// from the attribute.\n-    fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {\n-        if let ExprKind::Path(None, path) = &expr.kind {\n-            if path.segments.last().unwrap().args.is_some() {\n-                return None;\n-            }\n-            if let Some(partial_res) = self.resolver.get_partial_res(expr.id) {\n-                if partial_res.unresolved_segments() != 0 {\n-                    return None;\n-                }\n-                if let Res::Def(hir::def::DefKind::Fn, def_id) = partial_res.base_res() {\n-                    let attrs = self.item_attrs(def_id);\n-                    let attr = attrs\n-                        .iter()\n-                        .find(|a| self.sess.check_name(a, sym::rustc_legacy_const_generics))?;\n-                    let mut ret = vec![];\n-                    for meta in attr.meta_item_list()? {\n-                        match meta.literal()?.kind {\n-                            LitKind::Int(a, _) => {\n-                                ret.push(a as usize);\n-                            }\n-                            _ => panic!(\"invalid arg index\"),\n-                        }\n-                    }\n-                    return Some(ret);\n-                }\n-            }\n-        }\n-        None\n-    }\n-\n     fn lower_legacy_const_generics(\n         &mut self,\n         mut f: Expr,\n@@ -366,12 +333,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         }\n \n-        // Add generic args to the last element of the path\n-        path.segments.last_mut().unwrap().args =\n-            Some(AstP(GenericArgs::AngleBracketed(AngleBracketedArgs {\n-                span: DUMMY_SP,\n-                args: generic_args,\n-            })));\n+        // Add generic args to the last element of the path.\n+        let last_segment = path.segments.last_mut().unwrap();\n+        assert!(last_segment.args.is_none());\n+        last_segment.args = Some(AstP(GenericArgs::AngleBracketed(AngleBracketedArgs {\n+            span: DUMMY_SP,\n+            args: generic_args,\n+        })));\n \n         // Now lower everything as normal.\n         let f = self.lower_expr(&f);"}, {"sha": "644e1d1139f6a0c4f95aded2c47efcb5246cc3a4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2451f124c95b2edfcaac9706500163c0224502df", "patch": "@@ -175,7 +175,7 @@ pub trait ResolverAstLowering {\n \n     fn item_generics_num_lifetimes(&self, def: DefId, sess: &Session) -> usize;\n \n-    fn item_attrs(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute>;\n+    fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n \n     /// Obtains resolution for a `NodeId` with a single resolution.\n     fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes>;\n@@ -2828,16 +2828,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             )\n         }\n     }\n-\n-    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> {\n-        if let Some(_local_def_id) = def_id.as_local() {\n-            // FIXME: This doesn't actually work, items doesn't include everything?\n-            //self.items[&hir::ItemId { def_id: local_def_id }].attrs.into()\n-            Vec::new()\n-        } else {\n-            self.resolver.item_attrs(def_id, self.sess)\n-        }\n-    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body<'_>>) -> Vec<hir::BodyId> {"}, {"sha": "022f1858878f39149e09037e118c51a2ce619755", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=2451f124c95b2edfcaac9706500163c0224502df", "patch": "@@ -789,6 +789,23 @@ impl CheckAttrVisitor<'tcx> {\n                 })) = item\n                 {\n                     let arg_count = decl.inputs.len() as u128 + generics.params.len() as u128;\n+                    for param in generics.params {\n+                        match param.kind {\n+                            hir::GenericParamKind::Const { .. } => {}\n+                            _ => {\n+                                self.tcx\n+                                    .sess\n+                                    .struct_span_err(\n+                                        meta.span(),\n+                                        \"#[rustc_legacy_const_generics] functions must \\\n+                                         only have const generics\",\n+                                    )\n+                                    .span_label(param.span, \"non-const generic parameter\")\n+                                    .emit();\n+                                break;\n+                            }\n+                        }\n+                    }\n                     if *val >= arg_count {\n                         let span = meta.span();\n                         self.tcx"}, {"sha": "6f24d7e9413518b6daf48b74a3b5d90fd5f28752", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=2451f124c95b2edfcaac9706500163c0224502df", "patch": "@@ -2326,8 +2326,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             ExprKind::Call(ref callee, ref arguments) => {\n                 self.resolve_expr(callee, Some(expr));\n-                let const_args = self.legacy_const_generic_args(callee).unwrap_or(Vec::new());\n+                let const_args = self.r.legacy_const_generic_args(callee).unwrap_or(Vec::new());\n                 for (idx, argument) in arguments.iter().enumerate() {\n+                    // Constant arguments need to be treated as AnonConst since\n+                    // that is how they will be later lowered to HIR.\n                     if const_args.contains(&idx) {\n                         self.with_constant_rib(\n                             IsRepeatExpr::No,\n@@ -2418,42 +2420,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             Some((ident.name, ns)),\n         )\n     }\n-\n-    /// Checks if an expression refers to a function marked with\n-    /// `#[rustc_legacy_const_generics]` and returns the argument index list\n-    /// from the attribute.\n-    fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {\n-        if let ExprKind::Path(None, path) = &expr.kind {\n-            if path.segments.last().unwrap().args.is_some() {\n-                return None;\n-            }\n-            if let Some(partial_res) = self.r.get_partial_res(expr.id) {\n-                if partial_res.unresolved_segments() != 0 {\n-                    return None;\n-                }\n-                if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {\n-                    if def_id.is_local() {\n-                        return None;\n-                    }\n-                    let attrs = self.r.cstore().item_attrs(def_id, self.r.session);\n-                    let attr = attrs\n-                        .iter()\n-                        .find(|a| self.r.session.check_name(a, sym::rustc_legacy_const_generics))?;\n-                    let mut ret = vec![];\n-                    for meta in attr.meta_item_list()? {\n-                        match meta.literal()?.kind {\n-                            LitKind::Int(a, _) => {\n-                                ret.push(a as usize);\n-                            }\n-                            _ => panic!(\"invalid arg index\"),\n-                        }\n-                    }\n-                    return Some(ret);\n-                }\n-            }\n-        }\n-        None\n-    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "d703ed221a7dd1598c0dacd1d6643296e864e93d", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2451f124c95b2edfcaac9706500163c0224502df/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=2451f124c95b2edfcaac9706500163c0224502df", "patch": "@@ -29,6 +29,7 @@ use rustc_ast::unwrap_or;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{self as ast, NodeId};\n use rustc_ast::{Crate, CRATE_NODE_ID};\n+use rustc_ast::{Expr, ExprKind, LitKind};\n use rustc_ast::{ItemKind, ModKind, Path};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_ast_pretty::pprust;\n@@ -1076,8 +1077,8 @@ impl ResolverAstLowering for Resolver<'_> {\n         self.cstore().item_generics_num_lifetimes(def_id, sess)\n     }\n \n-    fn item_attrs(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute> {\n-        self.cstore().item_attrs(def_id, sess)\n+    fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>> {\n+        self.legacy_const_generic_args(expr)\n     }\n \n     fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes> {\n@@ -3312,6 +3313,49 @@ impl<'a> Resolver<'a> {\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {\n         if let Some(def_id) = def_id.as_local() { Some(self.def_id_to_span[def_id]) } else { None }\n     }\n+\n+    /// Checks if an expression refers to a function marked with\n+    /// `#[rustc_legacy_const_generics]` and returns the argument index list\n+    /// from the attribute.\n+    pub fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>> {\n+        if let ExprKind::Path(None, path) = &expr.kind {\n+            // Don't perform legacy const generics rewriting if the path already\n+            // has generic arguments.\n+            if path.segments.last().unwrap().args.is_some() {\n+                return None;\n+            }\n+\n+            let partial_res = self.partial_res_map.get(&expr.id)?;\n+            if partial_res.unresolved_segments() != 0 {\n+                return None;\n+            }\n+\n+            if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {\n+                // We only support cross-crate argument rewriting. Uses\n+                // within the same crate should be updated to use the new\n+                // const generics style.\n+                if def_id.is_local() {\n+                    return None;\n+                }\n+\n+                let attrs = self.cstore().item_attrs(def_id, self.session);\n+                let attr = attrs\n+                    .iter()\n+                    .find(|a| self.session.check_name(a, sym::rustc_legacy_const_generics))?;\n+                let mut ret = vec![];\n+                for meta in attr.meta_item_list()? {\n+                    match meta.literal()?.kind {\n+                        LitKind::Int(a, _) => {\n+                            ret.push(a as usize);\n+                        }\n+                        _ => panic!(\"invalid arg index\"),\n+                    }\n+                }\n+                return Some(ret);\n+            }\n+        }\n+        None\n+    }\n }\n \n fn names_to_string(names: &[Symbol]) -> String {"}, {"sha": "880e2199dc405a846ed368f64e15809ef9998c74", "filename": "src/test/ui/invalid/invalid-rustc_legacy_const_generics-arguments.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2451f124c95b2edfcaac9706500163c0224502df/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2451f124c95b2edfcaac9706500163c0224502df/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs?ref=2451f124c95b2edfcaac9706500163c0224502df", "patch": "@@ -26,6 +26,9 @@ extern {\n     fn foo7(_: u8);\n }\n \n+#[rustc_legacy_const_generics(0)] //~ ERROR #[rustc_legacy_const_generics] functions must only have\n+fn foo3<X>() {}\n+\n #[rustc_legacy_const_generics] //~ ERROR malformed `rustc_legacy_const_generics` attribute\n fn bar1() {}\n "}]}