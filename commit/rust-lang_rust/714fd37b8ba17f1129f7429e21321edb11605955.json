{"sha": "714fd37b8ba17f1129f7429e21321edb11605955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNGZkMzdiOGJhMTdmMTEyOWY3NDI5ZTIxMzIxZWRiMTE2MDU5NTU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:12:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:12:40Z"}, "message": "Rollup merge of #52778 - ljedrz:readable_serialize, r=kennytm\n\nImprove readability of serialize.rs", "tree": {"sha": "ffe1f79c678abfcf2c3a68eaeb21ef0ddfe1e0b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe1f79c678abfcf2c3a68eaeb21ef0ddfe1e0b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/714fd37b8ba17f1129f7429e21321edb11605955", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWt4CRBK7hj4Ov3rIwAAdHIIAC9MR5eKOjNTUCS9eXKmNbng\nr7ioFXX1I4aEN7ea0bs9pKIV9DB3Hg2smaIzDCIfGj82zSbH/DCR/OeHEWgSPd2U\nFLo7gWyG2v5HILPDiI+MDCqksaWtO/X4xeLxNnHssMZBORuyASAV8tf2eh8Z84WI\ndd1Pce139HqMtVudW71EmGT2FPQx8UNqDsl/ST9AMuDxB9UE0PwpJT28X6SIbX3q\n2uY+1ZHEd56GzduD1m0FitY1vKOEeojC1n+v1AmV658+gPDaQMFuAOTn8c+rsS/J\nwDpVXPbmNRRBQjATJBNiuRHOzoZno9588ZypyPvLteCTjUh8bt7x16SOGXP77Qw=\n=YPo+\n-----END PGP SIGNATURE-----\n", "payload": "tree ffe1f79c678abfcf2c3a68eaeb21ef0ddfe1e0b0\nparent 06b91a4901621455999ff77f1b63c8c64f4eae56\nparent 7750a0d0a6d8f943023239237124a3489b88aaf2\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111160 +0200\ncommitter GitHub <noreply@github.com> 1533111160 +0200\n\nRollup merge of #52778 - ljedrz:readable_serialize, r=kennytm\n\nImprove readability of serialize.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/714fd37b8ba17f1129f7429e21321edb11605955", "html_url": "https://github.com/rust-lang/rust/commit/714fd37b8ba17f1129f7429e21321edb11605955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/714fd37b8ba17f1129f7429e21321edb11605955/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b91a4901621455999ff77f1b63c8c64f4eae56", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b91a4901621455999ff77f1b63c8c64f4eae56", "html_url": "https://github.com/rust-lang/rust/commit/06b91a4901621455999ff77f1b63c8c64f4eae56"}, {"sha": "7750a0d0a6d8f943023239237124a3489b88aaf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7750a0d0a6d8f943023239237124a3489b88aaf2", "html_url": "https://github.com/rust-lang/rust/commit/7750a0d0a6d8f943023239237124a3489b88aaf2"}], "stats": {"total": 199, "additions": 116, "deletions": 83}, "files": [{"sha": "ed94194ffcc05be5411eb9ca3cd5fb397e4f8fab", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 116, "deletions": 83, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/714fd37b8ba17f1129f7429e21321edb11605955/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/714fd37b8ba17f1129f7429e21321edb11605955/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=714fd37b8ba17f1129f7429e21321edb11605955", "patch": "@@ -46,58 +46,67 @@ pub trait Encoder {\n \n     // Compound types:\n     fn emit_enum<F>(&mut self, _name: &str, f: F) -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n-\n-    fn emit_enum_variant<F>(&mut self, _v_name: &str,\n-                            v_id: usize,\n-                            _len: usize,\n-                            f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n+\n+    fn emit_enum_variant<F>(&mut self, _v_name: &str, v_id: usize, _len: usize, f: F)\n+        -> Result<(), Self::Error> where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n     {\n         self.emit_usize(v_id)?;\n         f(self)\n     }\n-    fn emit_enum_variant_arg<F>(&mut self, _a_idx: usize, f: F)\n-                                -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n \n-    fn emit_enum_struct_variant<F>(&mut self, v_name: &str,\n-                                   v_id: usize,\n-                                   len: usize,\n-                                   f: F) -> Result<(), Self::Error>\n+    fn emit_enum_variant_arg<F>(&mut self, _a_idx: usize, f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n+\n+    fn emit_enum_struct_variant<F>(&mut self, v_name: &str, v_id: usize, len: usize, f: F)\n+        -> Result<(), Self::Error> where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n     {\n         self.emit_enum_variant(v_name, v_id, len, f)\n     }\n-    fn emit_enum_struct_variant_field<F>(&mut self,\n-                                         _f_name: &str,\n-                                         f_idx: usize,\n-                                         f: F) -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+\n+    fn emit_enum_struct_variant_field<F>(&mut self, _f_name: &str, f_idx: usize, f: F)\n+        -> Result<(), Self::Error> where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n     {\n         self.emit_enum_variant_arg(f_idx, f)\n     }\n \n-    fn emit_struct<F>(&mut self, _name: &str, _len: usize, f: F)\n-                      -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n+    fn emit_struct<F>(&mut self, _name: &str, _len: usize, f: F) -> Result<(), Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n+\n     fn emit_struct_field<F>(&mut self, _f_name: &str, _f_idx: usize, f: F)\n-                            -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n+        -> Result<(), Self::Error> where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n \n     fn emit_tuple<F>(&mut self, _len: usize, f: F) -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n+\n     fn emit_tuple_arg<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n \n-    fn emit_tuple_struct<F>(&mut self, _name: &str, len: usize, f: F)\n-                            -> Result<(), Self::Error>\n+    fn emit_tuple_struct<F>(&mut self, _name: &str, len: usize, f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n     {\n         self.emit_tuple(len, f)\n     }\n-    fn emit_tuple_struct_arg<F>(&mut self, f_idx: usize, f: F)\n-                                -> Result<(), Self::Error>\n+\n+    fn emit_tuple_struct_arg<F>(&mut self, f_idx: usize, f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n     {\n         self.emit_tuple_arg(f_idx, f)\n@@ -109,13 +118,14 @@ pub trait Encoder {\n     {\n         self.emit_enum(\"Option\", f)\n     }\n+\n     fn emit_option_none(&mut self) -> Result<(), Self::Error> {\n         self.emit_enum_variant(\"None\", 0, 0, |_| Ok(()))\n     }\n+\n     fn emit_option_some<F>(&mut self, f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n     {\n-\n         self.emit_enum_variant(\"Some\", 1, 1, f)\n     }\n \n@@ -125,19 +135,31 @@ pub trait Encoder {\n         self.emit_usize(len)?;\n         f(self)\n     }\n+\n     fn emit_seq_elt<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n \n     fn emit_map<F>(&mut self, len: usize, f: F) -> Result<(), Self::Error>\n         where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n     {\n         self.emit_usize(len)?;\n         f(self)\n     }\n+\n     fn emit_map_elt_key<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n+\n     fn emit_map_elt_val<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<(), Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<(), Self::Error>\n+    {\n+        f(self)\n+    }\n }\n \n pub trait Decoder {\n@@ -165,59 +187,67 @@ pub trait Decoder {\n \n     // Compound types:\n     fn read_enum<T, F>(&mut self, _name: &str, f: F) -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n \n-    fn read_enum_variant<T, F>(&mut self, _names: &[&str], mut f: F)\n-                               -> Result<T, Self::Error>\n+    fn read_enum_variant<T, F>(&mut self, _names: &[&str], mut f: F) -> Result<T, Self::Error>\n         where F: FnMut(&mut Self, usize) -> Result<T, Self::Error>\n     {\n         let disr = self.read_usize()?;\n         f(self, disr)\n     }\n-    fn read_enum_variant_arg<T, F>(&mut self, _a_idx: usize, f: F)\n-                                   -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n \n-    fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F)\n-                                      -> Result<T, Self::Error>\n+    fn read_enum_variant_arg<T, F>(&mut self, _a_idx: usize, f: F) -> Result<T, Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n+\n+    fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> Result<T, Self::Error>\n         where F: FnMut(&mut Self, usize) -> Result<T, Self::Error>\n     {\n         self.read_enum_variant(names, f)\n     }\n-    fn read_enum_struct_variant_field<T, F>(&mut self,\n-                                            _f_name: &str,\n-                                            f_idx: usize,\n-                                            f: F)\n-                                            -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+\n+    fn read_enum_struct_variant_field<T, F>(&mut self, _f_name: &str, f_idx: usize, f: F)\n+        -> Result<T, Self::Error> where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n     {\n         self.read_enum_variant_arg(f_idx, f)\n     }\n \n-    fn read_struct<T, F>(&mut self, _s_name: &str, _len: usize, f: F)\n-                         -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n-    fn read_struct_field<T, F>(&mut self,\n-                               _f_name: &str,\n-                               _f_idx: usize,\n-                               f: F)\n-                               -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n+    fn read_struct<T, F>(&mut self, _s_name: &str, _len: usize, f: F) -> Result<T, Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n+\n+    fn read_struct_field<T, F>(&mut self, _f_name: &str, _f_idx: usize, f: F)\n+        -> Result<T, Self::Error> where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n \n     fn read_tuple<T, F>(&mut self, _len: usize, f: F) -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n-    fn read_tuple_arg<T, F>(&mut self, _a_idx: usize, f: F)\n-                            -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n+\n+    fn read_tuple_arg<T, F>(&mut self, _a_idx: usize, f: F) -> Result<T, Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n \n-    fn read_tuple_struct<T, F>(&mut self, _s_name: &str, len: usize, f: F)\n-                               -> Result<T, Self::Error>\n+    fn read_tuple_struct<T, F>(&mut self, _s_name: &str, len: usize, f: F) -> Result<T, Self::Error>\n         where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n     {\n         self.read_tuple(len, f)\n     }\n-    fn read_tuple_struct_arg<T, F>(&mut self, a_idx: usize, f: F)\n-                                   -> Result<T, Self::Error>\n+\n+    fn read_tuple_struct_arg<T, F>(&mut self, a_idx: usize, f: F) -> Result<T, Self::Error>\n         where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n     {\n         self.read_tuple_arg(a_idx, f)\n@@ -244,21 +274,31 @@ pub trait Decoder {\n         let len = self.read_usize()?;\n         f(self, len)\n     }\n+\n     fn read_seq_elt<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n \n     fn read_map<T, F>(&mut self, f: F) -> Result<T, Self::Error>\n         where F: FnOnce(&mut Self, usize) -> Result<T, Self::Error>\n     {\n         let len = self.read_usize()?;\n         f(self, len)\n     }\n-    fn read_map_elt_key<T, F>(&mut self, _idx: usize, f: F)\n-                              -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n-    fn read_map_elt_val<T, F>(&mut self, _idx: usize, f: F)\n-                              -> Result<T, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<T, Self::Error> { f(self) }\n+\n+    fn read_map_elt_key<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n+\n+    fn read_map_elt_val<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<T, Self::Error>\n+    {\n+        f(self)\n+    }\n \n     // Failure\n     fn error(&mut self, err: &str) -> Self::Error;\n@@ -567,9 +607,7 @@ impl<T:Decodable> Decodable for Vec<T> {\n     }\n }\n \n-impl<'a, T:Encodable> Encodable for Cow<'a, [T]>\n-where [T]: ToOwned<Owned = Vec<T>>\n-{\n+impl<'a, T:Encodable> Encodable for Cow<'a, [T]> where [T]: ToOwned<Owned = Vec<T>> {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_seq(self.len(), |s| {\n             for (i, e) in self.iter().enumerate() {\n@@ -580,9 +618,7 @@ where [T]: ToOwned<Owned = Vec<T>>\n     }\n }\n \n-impl<T:Decodable+ToOwned> Decodable for Cow<'static, [T]>\n-where [T]: ToOwned<Owned = Vec<T>>\n-{\n+impl<T:Decodable+ToOwned> Decodable for Cow<'static, [T]> where [T]: ToOwned<Owned = Vec<T>> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<Cow<'static, [T]>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut v = Vec::with_capacity(len);\n@@ -685,8 +721,7 @@ macro_rules! tuple {\n                 let len: usize = count_idents!($($name,)*);\n                 d.read_tuple(len, |d| {\n                     let mut i = 0;\n-                    let ret = ($(d.read_tuple_arg({ i+=1; i-1 },\n-                                                  |d| -> Result<$name,D::Error> {\n+                    let ret = ($(d.read_tuple_arg({ i+=1; i-1 }, |d| -> Result<$name, D::Error> {\n                         Decodable::decode(d)\n                     })?,)*);\n                     Ok(ret)\n@@ -778,13 +813,11 @@ pub trait SpecializationError {\n     /// `T` is the type being encoded/decoded, and\n     /// the arguments are the names of the trait\n     /// and method that should've been overridden.\n-    fn not_found<S, T: ?Sized>(trait_name: &'static str,\n-                               method_name: &'static str) -> Self;\n+    fn not_found<S, T: ?Sized>(trait_name: &'static str, method_name: &'static str) -> Self;\n }\n \n impl<E> SpecializationError for E {\n-    default fn not_found<S, T: ?Sized>(trait_name: &'static str,\n-                                       method_name: &'static str) -> E {\n+    default fn not_found<S, T: ?Sized>(trait_name: &'static str, method_name: &'static str) -> E {\n         panic!(\"missing specialization: `<{} as {}<{}>>::{}` not overridden\",\n                unsafe { intrinsics::type_name::<S>() },\n                trait_name,"}]}