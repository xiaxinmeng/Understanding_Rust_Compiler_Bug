{"sha": "f3447682d0534f03f7b0195ea8e736f152095718", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNDQ3NjgyZDA1MzRmMDNmN2IwMTk1ZWE4ZTczNmYxNTIwOTU3MTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-30T16:22:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-30T16:26:51Z"}, "message": "Handle PassMode::Cast in combination with #[repr(align)]", "tree": {"sha": "a3eaf0f1ec0e9c3cbd802f8c4aa4eda3d718688e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3eaf0f1ec0e9c3cbd802f8c4aa4eda3d718688e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3447682d0534f03f7b0195ea8e736f152095718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3447682d0534f03f7b0195ea8e736f152095718", "html_url": "https://github.com/rust-lang/rust/commit/f3447682d0534f03f7b0195ea8e736f152095718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3447682d0534f03f7b0195ea8e736f152095718/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18de1b1fde169e76c3f4941b9c8b8c009221d618", "url": "https://api.github.com/repos/rust-lang/rust/commits/18de1b1fde169e76c3f4941b9c8b8c009221d618", "html_url": "https://github.com/rust-lang/rust/commit/18de1b1fde169e76c3f4941b9c8b8c009221d618"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "1202c23dbe7b3ba77bb3da86b85bbf0976960c14", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3447682d0534f03f7b0195ea8e736f152095718/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3447682d0534f03f7b0195ea8e736f152095718/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=f3447682d0534f03f7b0195ea8e736f152095718", "patch": "@@ -227,17 +227,19 @@ pub(super) fn from_casted_value<'tcx>(\n     cast: CastTarget,\n ) -> CValue<'tcx> {\n     let abi_params = cast_target_to_abi_params(cast);\n-    let size: u32 = abi_params\n+    let abi_param_size: u32 = abi_params\n         .iter()\n         .map(|param| param.value_type.bytes())\n         .sum();\n-    // Stack slot size may be bigger for for example `[u8; 3]` which is packed into an `i32`.\n-    assert!(u64::from(size) >= layout.size.bytes());\n+    let layout_size = u32::try_from(layout.size.bytes()).unwrap();\n     let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n         kind: StackSlotKind::ExplicitSlot,\n         // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n         // specify stack slot alignment.\n-        size: (size + 15) / 16 * 16,\n+        // Stack slot size may be bigger for for example `[u8; 3]` which is packed into an `i32`.\n+        // It may also be smaller for example when the type is a wrapper around an integer with a\n+        // larger alignment than the integer.\n+        size: (std::cmp::max(abi_param_size, layout_size) + 15) / 16 * 16,\n         offset: None,\n     });\n     let ptr = Pointer::new(fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0));"}]}