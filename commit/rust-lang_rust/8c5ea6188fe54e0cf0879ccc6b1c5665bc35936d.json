{"sha": "8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "node_id": "C_kwDOAAsO6NoAKDhjNWVhNjE4OGZlNTRlMGNmMDg3OWNjYzZiMWM1NjY1YmMzNTkzNmQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-15T12:21:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-15T12:21:32Z"}, "message": "Rollup merge of #109136 - compiler-errors:simplify-proc-macro-checking, r=oli-obk\n\nSimplify proc macro signature validity check\n\nUse an `ObligationCtxt` instead of `normalize_erasing_regions` + `DeepRejectCtxt`. This should both give us a more accurate error message, and also avoid issues like not-well-formed proc macro signatures. Also, let's fall back on the regular type mismatch error reporting for making these diagnostic notes, instead of hard-coding a bunch of specific diagnostics.\n\nFixes #109129", "tree": {"sha": "33f0bff641df2b21e31c53f1055f27e2e0bae0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f0bff641df2b21e31c53f1055f27e2e0bae0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEbhMCRBK7hj4Ov3rIwAAJ2QIADy6hPBv09p2+f5K3kJHEbzl\n5AV/afsrxNE3Wk/yCNsIMXIyW0jmpBBO0BcPD9okVY7s3zNc7JxVZqJrOH4ylY0M\nDVKy/kFeoMNJUZdGBL2bjhm4JpN6i7NicMsVsbaMPvHDIiHvqWg5JTQppA7JKEG1\n9Dg6aF+zeWd9aevql0ddIYJPM1SJINyoHzyQyEZLBPP8nK2W+gXd0t0ON0qGdkkj\nlctz3jBM/lZ0Q91+xFXEEFUcWNokdLonW7iBV3xGhiBNMkqRxFgnt3kJC/+STa0a\nb4fiPObCPN/Ig+koKkQSnIoz77/LyY1mQCmYOyjrCyCWHZxY7oklX1ynLkXtoPM=\n=skMt\n-----END PGP SIGNATURE-----\n", "payload": "tree 33f0bff641df2b21e31c53f1055f27e2e0bae0ca\nparent d133c36fa982676e092b876ba65908d889877bec\nparent 00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1678882892 +0530\ncommitter GitHub <noreply@github.com> 1678882892 +0530\n\nRollup merge of #109136 - compiler-errors:simplify-proc-macro-checking, r=oli-obk\n\nSimplify proc macro signature validity check\n\nUse an `ObligationCtxt` instead of `normalize_erasing_regions` + `DeepRejectCtxt`. This should both give us a more accurate error message, and also avoid issues like not-well-formed proc macro signatures. Also, let's fall back on the regular type mismatch error reporting for making these diagnostic notes, instead of hard-coding a bunch of specific diagnostics.\n\nFixes #109129\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "html_url": "https://github.com/rust-lang/rust/commit/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d133c36fa982676e092b876ba65908d889877bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d133c36fa982676e092b876ba65908d889877bec", "html_url": "https://github.com/rust-lang/rust/commit/d133c36fa982676e092b876ba65908d889877bec"}, {"sha": "00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "html_url": "https://github.com/rust-lang/rust/commit/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67"}], "stats": {"total": 487, "additions": 212, "deletions": 275}, "files": [{"sha": "243f4e6139c9af3fc4ea6053af9b7574f648051d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -5139,6 +5139,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"rustc_trait_selection\",\n  \"tracing\",\n ]\n "}, {"sha": "44f991f8c15b553684b87cfb03d3d74e14f3e343", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -22,3 +22,4 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "d063b51c8b8622c0e138be85a3a55259185c1541", "filename": "compiler/rustc_passes/messages.ftl", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fmessages.ftl?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -720,26 +720,7 @@ passes_ignored_derived_impls =\n      *[other] traits {$trait_list}, but these are\n     } intentionally ignored during dead code analysis\n \n-passes_proc_macro_typeerror = mismatched {$kind} signature\n-    .label = found {$found}, expected type `proc_macro::TokenStream`\n-    .note = {$kind}s must have a signature of `{$expected_signature}`\n-\n-passes_proc_macro_diff_arg_count = mismatched {$kind} signature\n-    .label = found unexpected {$count ->\n-      [one] argument\n-     *[other] arguments\n-    }\n-    .note = {$kind}s must have a signature of `{$expected_signature}`\n-\n-passes_proc_macro_missing_args = mismatched {$kind} signature\n-    .label = {$kind} must have {$expected_input_count ->\n-      [one] one argument\n-     *[other] two arguments\n-    } of type `proc_macro::TokenStream`\n-\n-passes_proc_macro_invalid_abi = proc macro functions may not be `extern \"{$abi}\"`\n-\n-passes_proc_macro_unsafe = proc macro functions may not be `unsafe`\n+passes_proc_macro_bad_sig = {$kind} has incorrect signature\n \n passes_skipping_const_checks = skipping const checks\n "}, {"sha": "8bed7888142096a62c2a4d9b356ade72c4cbb1ea", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 88, "deletions": 85, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -19,9 +19,10 @@ use rustc_hir::{\n use rustc_hir::{MethodKind, Target, Unsafety};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault;\n-use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n+use rustc_middle::traits::ObligationCause;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{ParamEnv, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, INVALID_MACRO_EXPORT_ARGUMENTS,\n     UNUSED_ATTRIBUTES,\n@@ -30,6 +31,9 @@ use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n+use rustc_trait_selection::infer::{TyCtxtInferExt, ValuePairs};\n+use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n+use rustc_trait_selection::traits::ObligationCtxt;\n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n \n@@ -2188,100 +2192,99 @@ impl CheckAttrVisitor<'_> {\n     ///\n     /// If this best effort goes wrong, it will just emit a worse error later (see #102923)\n     fn check_proc_macro(&self, hir_id: HirId, target: Target, kind: ProcMacroKind) {\n-        let expected_input_count = match kind {\n-            ProcMacroKind::Attribute => 2,\n-            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => 1,\n-        };\n-\n-        let expected_signature = match kind {\n-            ProcMacroKind::Attribute => \"fn(TokenStream, TokenStream) -> TokenStream\",\n-            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => \"fn(TokenStream) -> TokenStream\",\n-        };\n+        if target != Target::Fn {\n+            return;\n+        }\n \n         let tcx = self.tcx;\n-        if target == Target::Fn {\n-            let Some(tokenstream) = tcx.get_diagnostic_item(sym::TokenStream) else {return};\n-            let tokenstream = tcx.type_of(tokenstream).subst_identity();\n-\n-            let id = hir_id.expect_owner();\n-            let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id).unwrap();\n-\n-            let sig =\n-                tcx.liberate_late_bound_regions(id.to_def_id(), tcx.fn_sig(id).subst_identity());\n-            let sig = tcx.normalize_erasing_regions(ParamEnv::empty(), sig);\n-\n-            // We don't currently require that the function signature is equal to\n-            // `fn(TokenStream) -> TokenStream`, but instead monomorphizes to\n-            // `fn(TokenStream) -> TokenStream` after some substitution of generic arguments.\n-            //\n-            // Properly checking this means pulling in additional `rustc` crates, so we don't.\n-            let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsCandidateKey };\n-\n-            if sig.abi != Abi::Rust {\n-                tcx.sess.emit_err(errors::ProcMacroInvalidAbi {\n-                    span: hir_sig.span,\n-                    abi: sig.abi.name(),\n-                });\n-                self.abort.set(true);\n-            }\n+        let Some(token_stream_def_id) = tcx.get_diagnostic_item(sym::TokenStream) else { return; };\n+        let Some(token_stream) = tcx.type_of(token_stream_def_id).no_bound_vars() else { return; };\n \n-            if sig.unsafety == Unsafety::Unsafe {\n-                tcx.sess.emit_err(errors::ProcMacroUnsafe { span: hir_sig.span });\n-                self.abort.set(true);\n-            }\n+        let def_id = hir_id.expect_owner().def_id;\n+        let param_env = ty::ParamEnv::empty();\n \n-            let output = sig.output();\n+        let infcx = tcx.infer_ctxt().build();\n+        let ocx = ObligationCtxt::new(&infcx);\n \n-            // Typecheck the output\n-            if !drcx.types_may_unify(output, tokenstream) {\n-                tcx.sess.emit_err(errors::ProcMacroTypeError {\n-                    span: hir_sig.decl.output.span(),\n-                    found: output,\n-                    kind,\n-                    expected_signature,\n-                });\n-                self.abort.set(true);\n-            }\n+        let span = tcx.def_span(def_id);\n+        let fresh_substs = infcx.fresh_substs_for_item(span, def_id.to_def_id());\n+        let sig = tcx.liberate_late_bound_regions(\n+            def_id.to_def_id(),\n+            tcx.fn_sig(def_id).subst(tcx, fresh_substs),\n+        );\n \n-            if sig.inputs().len() < expected_input_count {\n-                tcx.sess.emit_err(errors::ProcMacroMissingArguments {\n-                    expected_input_count,\n-                    span: hir_sig.span,\n-                    kind,\n-                    expected_signature,\n-                });\n-                self.abort.set(true);\n-            }\n+        let mut cause = ObligationCause::misc(span, def_id);\n+        let sig = ocx.normalize(&cause, param_env, sig);\n \n-            // Check that the inputs are correct, if there are enough.\n-            if sig.inputs().len() >= expected_input_count {\n-                for (arg, input) in\n-                    sig.inputs().iter().zip(hir_sig.decl.inputs).take(expected_input_count)\n-                {\n-                    if !drcx.types_may_unify(*arg, tokenstream) {\n-                        tcx.sess.emit_err(errors::ProcMacroTypeError {\n-                            span: input.span,\n-                            found: *arg,\n-                            kind,\n-                            expected_signature,\n-                        });\n-                        self.abort.set(true);\n+        // proc macro is not WF.\n+        let errors = ocx.select_where_possible();\n+        if !errors.is_empty() {\n+            return;\n+        }\n+\n+        let expected_sig = tcx.mk_fn_sig(\n+            std::iter::repeat(token_stream).take(match kind {\n+                ProcMacroKind::Attribute => 2,\n+                ProcMacroKind::Derive | ProcMacroKind::FunctionLike => 1,\n+            }),\n+            token_stream,\n+            false,\n+            Unsafety::Normal,\n+            Abi::Rust,\n+        );\n+\n+        if let Err(terr) = ocx.eq(&cause, param_env, expected_sig, sig) {\n+            let mut diag = tcx.sess.create_err(errors::ProcMacroBadSig { span, kind });\n+\n+            let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id);\n+            if let Some(hir_sig) = hir_sig {\n+                match terr {\n+                    TypeError::ArgumentMutability(idx) | TypeError::ArgumentSorts(_, idx) => {\n+                        if let Some(ty) = hir_sig.decl.inputs.get(idx) {\n+                            diag.set_span(ty.span);\n+                            cause.span = ty.span;\n+                        } else if idx == hir_sig.decl.inputs.len() {\n+                            let span = hir_sig.decl.output.span();\n+                            diag.set_span(span);\n+                            cause.span = span;\n+                        }\n+                    }\n+                    TypeError::ArgCount => {\n+                        if let Some(ty) = hir_sig.decl.inputs.get(expected_sig.inputs().len()) {\n+                            diag.set_span(ty.span);\n+                            cause.span = ty.span;\n+                        }\n                     }\n+                    TypeError::UnsafetyMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    TypeError::AbiMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    TypeError::VariadicMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    _ => {}\n                 }\n             }\n \n-            // Check that there are not too many arguments\n-            let body_id = tcx.hir().body_owned_by(id.def_id);\n-            let excess = tcx.hir().body(body_id).params.get(expected_input_count..);\n-            if let Some(excess @ [begin @ end] | excess @ [begin, .., end]) = excess {\n-                tcx.sess.emit_err(errors::ProcMacroDiffArguments {\n-                    span: begin.span.to(end.span),\n-                    count: excess.len(),\n-                    kind,\n-                    expected_signature,\n-                });\n-                self.abort.set(true);\n-            }\n+            infcx.err_ctxt().note_type_err(\n+                &mut diag,\n+                &cause,\n+                None,\n+                Some(ValuePairs::Sigs(ExpectedFound { expected: expected_sig, found: sig })),\n+                terr,\n+                false,\n+                false,\n+            );\n+            diag.emit();\n+            self.abort.set(true);\n+        }\n+\n+        let errors = ocx.select_all_or_error();\n+        if !errors.is_empty() {\n+            infcx.err_ctxt().report_fulfillment_errors(&errors);\n+            self.abort.set(true);\n         }\n     }\n }"}, {"sha": "1b0cd5d91ab5359e30c4afee84cf8e76f0a9c476", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -1546,52 +1546,11 @@ pub struct ChangeFieldsToBeOfUnitType {\n }\n \n #[derive(Diagnostic)]\n-#[diag(passes_proc_macro_typeerror)]\n-#[note]\n-pub(crate) struct ProcMacroTypeError<'tcx> {\n-    #[primary_span]\n-    #[label]\n-    pub span: Span,\n-    pub found: Ty<'tcx>,\n-    pub kind: ProcMacroKind,\n-    pub expected_signature: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_diff_arg_count)]\n-pub(crate) struct ProcMacroDiffArguments {\n-    #[primary_span]\n-    #[label]\n-    pub span: Span,\n-    pub count: usize,\n-    pub kind: ProcMacroKind,\n-    pub expected_signature: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_missing_args)]\n-pub(crate) struct ProcMacroMissingArguments {\n+#[diag(passes_proc_macro_bad_sig)]\n+pub(crate) struct ProcMacroBadSig {\n     #[primary_span]\n-    #[label]\n     pub span: Span,\n-    pub expected_input_count: usize,\n     pub kind: ProcMacroKind,\n-    pub expected_signature: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_invalid_abi)]\n-pub(crate) struct ProcMacroInvalidAbi {\n-    #[primary_span]\n-    pub span: Span,\n-    pub abi: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_unsafe)]\n-pub(crate) struct ProcMacroUnsafe {\n-    #[primary_span]\n-    pub span: Span,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "d214c7ac8b274c9a9a26aeb11782c57a835d24b1", "filename": "tests/ui/proc-macro/bad-projection.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fbad-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fbad-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fbad-projection.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -0,0 +1,15 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![allow(warnings)]\n+\n+extern crate proc_macro;\n+\n+trait Project {\n+    type Assoc;\n+}\n+\n+#[proc_macro]\n+pub fn uwu() -> <() as Project>::Assoc {}\n+//~^ ERROR the trait bound `(): Project` is not satisfied"}, {"sha": "8a8246376fe08db85eed48c20975b5480e31e70f", "filename": "tests/ui/proc-macro/bad-projection.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fbad-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fbad-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fbad-projection.stderr?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `(): Project` is not satisfied\n+  --> $DIR/bad-projection.rs:14:17\n+   |\n+LL | pub fn uwu() -> <() as Project>::Assoc {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ the trait `Project` is not implemented for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "93a613e8b8fc3e794020854f6a37c5da6dcda506", "filename": "tests/ui/proc-macro/proc-macro-abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -9,19 +9,19 @@ use proc_macro::TokenStream;\n \n #[proc_macro]\n pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n-    //~^ ERROR proc macro functions may not be `extern \"C\"`\n+    //~^ ERROR function-like proc macro has incorrect signature\n     a\n }\n \n #[proc_macro]\n pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n-    //~^ ERROR proc macro functions may not be `extern \"system\"`\n+    //~^ ERROR function-like proc macro has incorrect signature\n     a\n }\n \n #[proc_macro]\n pub extern fn abi3(a: TokenStream) -> TokenStream {\n-    //~^ ERROR proc macro functions may not be `extern \"C\"`\n+    //~^ ERROR function-like proc macro has incorrect signature\n     a\n }\n "}, {"sha": "ccc72e5187ed3f9045cf0283bcf159fa3dacd089", "filename": "tests/ui/proc-macro/proc-macro-abi.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -1,20 +1,29 @@\n-error: proc macro functions may not be `extern \"C\"`\n+error: function-like proc macro has incorrect signature\n   --> $DIR/proc-macro-abi.rs:11:1\n    |\n LL | pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `extern \"C\" fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n \n-error: proc macro functions may not be `extern \"system\"`\n+error: function-like proc macro has incorrect signature\n   --> $DIR/proc-macro-abi.rs:17:1\n    |\n LL | pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"system\" fn\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `extern \"system\" fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n \n-error: proc macro functions may not be `extern \"C\"`\n+error: function-like proc macro has incorrect signature\n   --> $DIR/proc-macro-abi.rs:23:1\n    |\n LL | pub extern fn abi3(a: TokenStream) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `extern \"C\" fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fb48f748ce00482c4315ce3cb3f562068541c231", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -8,25 +8,23 @@ use proc_macro::TokenStream;\n \n #[proc_macro_attribute]\n pub fn bad_input(input: String) -> TokenStream {\n-    //~^ ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n     ::proc_macro::TokenStream::new()\n }\n \n #[proc_macro_attribute]\n pub fn bad_output(input: TokenStream) -> String {\n-    //~^ ERROR mismatched attribute proc macro signature\n-    //~| ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n     String::from(\"blah\")\n }\n \n #[proc_macro_attribute]\n pub fn bad_everything(input: String) -> String {\n-    //~^ ERROR mismatched attribute proc macro signature\n-    //~| ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n     input\n }\n \n #[proc_macro_attribute]\n pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-    //~^ ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n }"}, {"sha": "ce832eaa5c7afe01148b000a916fd3fb0cbe4c15", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.stderr", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -1,42 +1,38 @@\n-error: mismatched attribute proc macro signature\n+error: attribute proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-attribute.rs:10:1\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n-\n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:16:42\n-   |\n-LL | pub fn bad_output(input: TokenStream) -> String {\n-   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n-error: mismatched attribute proc macro signature\n+error: attribute proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-attribute.rs:16:1\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n-\n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:23:41\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-LL | pub fn bad_everything(input: String) -> String {\n-   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n-   |\n-   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:23:1\n+error: attribute proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro-attribute.rs:22:1\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> std::string::String`\n \n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:30:49\n+error: attribute proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro-attribute.rs:28:52\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   |                                                 ^^^^^^^^^ found unexpected argument\n+   |                                                    ^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "d294b15912794fe1bbaeda5014b641b85e7511a6", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -8,24 +8,23 @@ use proc_macro::TokenStream;\n \n #[proc_macro_derive(Blah)]\n pub fn bad_input(input: String) -> TokenStream {\n-    //~^ ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n     TokenStream::new()\n }\n \n #[proc_macro_derive(Bleh)]\n pub fn bad_output(input: TokenStream) -> String {\n-    //~^ ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n     String::from(\"blah\")\n }\n \n #[proc_macro_derive(Bluh)]\n pub fn bad_everything(input: String) -> String {\n-    //~^ ERROR mismatched derive proc macro signature\n-    //~| ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n     input\n }\n \n #[proc_macro_derive(Blih)]\n pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-    //~^ ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n }"}, {"sha": "03c6abad17d918c5cb145189e905c4642444da38", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.stderr", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -1,40 +1,38 @@\n-error: mismatched derive proc macro signature\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-derive.rs:10:25\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                         ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n-error: mismatched derive proc macro signature\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-derive.rs:16:42\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                                          ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n-error: mismatched derive proc macro signature\n-  --> $DIR/signature-proc-macro-derive.rs:22:41\n-   |\n-LL | pub fn bad_everything(input: String) -> String {\n-   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n-   |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched derive proc macro signature\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-derive.rs:22:30\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                              ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> std::string::String`\n \n-error: mismatched derive proc macro signature\n-  --> $DIR/signature-proc-macro-derive.rs:29:33\n+error: derive proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro-derive.rs:28:36\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+   |                                    ^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "ca2509ed84b5d9e5e9b1c6d2a5c2442dd8bc8194", "filename": "tests/ui/proc-macro/signature-proc-macro.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -8,24 +8,23 @@ use proc_macro::TokenStream;\n \n #[proc_macro]\n pub fn bad_input(input: String) -> TokenStream {\n-    //~^ ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n     ::proc_macro::TokenStream::new()\n }\n \n #[proc_macro]\n pub fn bad_output(input: TokenStream) -> String {\n-    //~^ ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n     String::from(\"blah\")\n }\n \n #[proc_macro]\n pub fn bad_everything(input: String) -> String {\n-    //~^ ERROR mismatched function-like proc macro signature\n-    //~| ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n     input\n }\n \n #[proc_macro]\n pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-    //~^ ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n }"}, {"sha": "dd2cb0570daa28d341d04288dbe73e14b8b87695", "filename": "tests/ui/proc-macro/signature-proc-macro.stderr", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -1,40 +1,38 @@\n-error: mismatched function-like proc macro signature\n+error: function-like proc macro has incorrect signature\n   --> $DIR/signature-proc-macro.rs:10:25\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                         ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n-error: mismatched function-like proc macro signature\n+error: function-like proc macro has incorrect signature\n   --> $DIR/signature-proc-macro.rs:16:42\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                                          ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n-error: mismatched function-like proc macro signature\n-  --> $DIR/signature-proc-macro.rs:22:41\n-   |\n-LL | pub fn bad_everything(input: String) -> String {\n-   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n-   |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched function-like proc macro signature\n+error: function-like proc macro has incorrect signature\n   --> $DIR/signature-proc-macro.rs:22:30\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                              ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> std::string::String`\n \n-error: mismatched function-like proc macro signature\n-  --> $DIR/signature-proc-macro.rs:29:33\n+error: function-like proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro.rs:28:36\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+   |                                    ^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "7b4982a6178f903ae86417f13cf0bd34efcda1dd", "filename": "tests/ui/proc-macro/signature.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.rs?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -8,10 +8,6 @@ extern crate proc_macro;\n \n #[proc_macro_derive(A)]\n pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-    //~^ ERROR: mismatched derive proc macro signature\n-    //~| mismatched derive proc macro signature\n-    //~| mismatched derive proc macro signature\n-    //~| proc macro functions may not be `extern\n-    //~| proc macro functions may not be `unsafe\n+    //~^ ERROR: derive proc macro has incorrect signature\n     loop {}\n }"}, {"sha": "ba5c8c1571e5896542906e1cb591ce6db93e822b", "filename": "tests/ui/proc-macro/signature.stderr", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.stderr?ref=8c5ea6188fe54e0cf0879ccc6b1c5665bc35936d", "patch": "@@ -1,36 +1,11 @@\n-error: proc macro functions may not be `extern \"C\"`\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature.rs:10:1\n    |\n LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: proc macro functions may not be `unsafe`\n-  --> $DIR/signature.rs:10:1\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: mismatched derive proc macro signature\n-  --> $DIR/signature.rs:10:49\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   |                                                 ^^^ found u32, expected type `proc_macro::TokenStream`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected normal fn, found unsafe fn\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched derive proc macro signature\n-  --> $DIR/signature.rs:10:33\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   |                                 ^^^ found i32, expected type `proc_macro::TokenStream`\n-   |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched derive proc macro signature\n-  --> $DIR/signature.rs:10:38\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   |                                      ^^^^^^ found unexpected argument\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `unsafe extern \"C\" fn(i32, u32) -> u32`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n "}]}