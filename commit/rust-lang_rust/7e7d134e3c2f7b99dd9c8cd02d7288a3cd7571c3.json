{"sha": "7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlN2QxMzRlM2MyZjdiOTlkZDljOGNkMDJkNzI4OGEzY2Q3NTcxYzM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-11T05:02:27Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-11T05:38:17Z"}, "message": "Remove unnecessary array access from SHA1\n\nProvides a very small speedup.", "tree": {"sha": "38ad8d1206f0d5d08a3f1b8ed1c132b7ef9111c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ad8d1206f0d5d08a3f1b8ed1c132b7ef9111c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3", "html_url": "https://github.com/rust-lang/rust/commit/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "html_url": "https://github.com/rust-lang/rust/commit/e35984b6c67f2adf1c12d84c48fdf4f01be020e5"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "93b06a518bac673c430d939a98629276e9a3d121", "filename": "src/lib/SHA1.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3/src%2Flib%2FSHA1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3/src%2Flib%2FSHA1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FSHA1.rs?ref=7e7d134e3c2f7b99dd9c8cd02d7288a3cd7571c3", "patch": "@@ -31,6 +31,11 @@ state type sha1 = state obj {\n const uint digest_buf_len = 5;\n const uint msg_block_len = 64;\n \n+const u32 k0 = 0x5A827999u32;\n+const u32 k1 = 0x6ED9EBA1u32;\n+const u32 k2 = 0x8F1BBCDCu32;\n+const u32 k3 = 0xCA62C1D6u32;\n+\n // Builds a sha1 object\n fn mk_sha1() -> sha1 {\n \n@@ -69,22 +74,18 @@ fn mk_sha1() -> sha1 {\n         // FIXME: Make precondition\n         assert (Vec.len(st.h) == digest_buf_len);\n \n-        // Constants\n-        auto k = vec(0x5A827999u32,\n-                     0x6ED9EBA1u32,\n-                     0x8F1BBCDCu32,\n-                     0xCA62C1D6u32);\n-\n         let int t; // Loop counter\n         let vec[mutable u32] w = Vec.init_elt_mut[u32](0u32, 80u);\n \n         // Initialize the first 16 words of the vector w\n         t = 0;\n         while (t < 16) {\n-            w.(t) = (st.msg_block.(t * 4) as u32) << 24u32;\n-            w.(t) = w.(t) | ((st.msg_block.(t * 4 + 1) as u32) << 16u32);\n-            w.(t) = w.(t) | ((st.msg_block.(t * 4 + 2) as u32) << 8u32);\n-            w.(t) = w.(t) | (st.msg_block.(t * 4 + 3) as u32);\n+            auto tmp;\n+            tmp = (st.msg_block.(t * 4) as u32) << 24u32;\n+            tmp = tmp | ((st.msg_block.(t * 4 + 1) as u32) << 16u32);\n+            tmp = tmp | ((st.msg_block.(t * 4 + 2) as u32) << 8u32);\n+            tmp = tmp | (st.msg_block.(t * 4 + 3) as u32);\n+            w.(t) = tmp;\n             t += 1;\n         }\n \n@@ -106,7 +107,7 @@ fn mk_sha1() -> sha1 {\n         t = 0;\n         while (t < 20) {\n             temp = circular_shift(5u32, a)\n-                + ((b & c) | ((~b) & d)) + e + w.(t) + k.(0);\n+                + ((b & c) | ((~b) & d)) + e + w.(t) + k0;\n             e = d;\n             d = c;\n             c = circular_shift(30u32, b);\n@@ -117,7 +118,7 @@ fn mk_sha1() -> sha1 {\n \n         while (t < 40) {\n             temp = circular_shift(5u32, a)\n-                + (b ^ c ^ d) + e + w.(t) + k.(1);\n+                + (b ^ c ^ d) + e + w.(t) + k1;\n             e = d;\n             d = c;\n             c = circular_shift(30u32, b);\n@@ -128,7 +129,7 @@ fn mk_sha1() -> sha1 {\n \n         while (t < 60) {\n             temp = circular_shift(5u32, a)\n-                + ((b & c) | (b & d) | (c & d)) + e + w.(t) + k.(2);\n+                + ((b & c) | (b & d) | (c & d)) + e + w.(t) + k2;\n             e = d;\n             d = c;\n             c = circular_shift(30u32, b);\n@@ -139,7 +140,7 @@ fn mk_sha1() -> sha1 {\n \n         while (t < 80) {\n             temp = circular_shift(5u32, a)\n-                + (b ^ c ^ d) + e + w.(t) + k.(3);\n+                + (b ^ c ^ d) + e + w.(t) + k3;\n             e = d;\n             d = c;\n             c = circular_shift(30u32, b);"}]}