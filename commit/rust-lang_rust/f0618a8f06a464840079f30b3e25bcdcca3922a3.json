{"sha": "f0618a8f06a464840079f30b3e25bcdcca3922a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNjE4YThmMDZhNDY0ODQwMDc5ZjMwYjNlMjViY2RjY2EzOTIyYTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-13T19:17:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-13T19:17:57Z"}, "message": "Merge #9257\n\n9257: internal: diagnostic code is mandatory r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5b57ca5243009f6a63cb6f3d37acb524b8cd2c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b57ca5243009f6a63cb6f3d37acb524b8cd2c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0618a8f06a464840079f30b3e25bcdcca3922a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgxlnlCRBK7hj4Ov3rIwAAYh4IAKA6GJ1poI4/6J8x87js62UL\neEGLufyin9GmDKHcyWRGKCJ1F6crF48avfj5aTi5LKKYm3mFp2Bb90mvXpImkzY5\nnspuPEjP5BJj5lu+e/xoEla53Qpkdwz7Pff7llDHZZvuf4J1ItQd1EBNzEf+TseB\nqP6cfrbOqH3nYdCQoUHxjJk+AJ2zJM/vnlR+vfOr4eMOCd82YmzQ7KzYyZd9y8T7\n7935y4gDOTwcWPjwEhI60sBEAfVZDJChu9247mqDxnZSEMAEi45rlQxLgAQd+4gh\nrPVnlGOzF92vceNrmi9oKeNhN//2V0ef7H2T4zNyRmd5PwbHU4XZDXIzm9httt0=\n=Q772\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b57ca5243009f6a63cb6f3d37acb524b8cd2c80\nparent 8c5c0ef7b910ffafc9c684cb7076149ab79f4bdd\nparent 500c909c76a5165e3e3c6ff2eacc009c90f08bbe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623611877 +0000\ncommitter GitHub <noreply@github.com> 1623611877 +0000\n\nMerge #9257\n\n9257: internal: diagnostic code is mandatory r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0618a8f06a464840079f30b3e25bcdcca3922a3", "html_url": "https://github.com/rust-lang/rust/commit/f0618a8f06a464840079f30b3e25bcdcca3922a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0618a8f06a464840079f30b3e25bcdcca3922a3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c5c0ef7b910ffafc9c684cb7076149ab79f4bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5c0ef7b910ffafc9c684cb7076149ab79f4bdd", "html_url": "https://github.com/rust-lang/rust/commit/8c5c0ef7b910ffafc9c684cb7076149ab79f4bdd"}, {"sha": "500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/500c909c76a5165e3e3c6ff2eacc009c90f08bbe", "html_url": "https://github.com/rust-lang/rust/commit/500c909c76a5165e3e3c6ff2eacc009c90f08bbe"}], "stats": {"total": 130, "additions": 51, "deletions": 79}, "files": [{"sha": "815a633e5ea9608a0f81cd25248fe3ae4ec2c680", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 56, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=f0618a8f06a464840079f30b3e25bcdcca3922a3", "patch": "@@ -51,28 +51,26 @@ impl DiagnosticCode {\n \n #[derive(Debug)]\n pub struct Diagnostic {\n-    // pub name: Option<String>,\n+    pub code: DiagnosticCode,\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n-    pub fixes: Option<Vec<Assist>>,\n     pub unused: bool,\n-    pub code: Option<DiagnosticCode>,\n     pub experimental: bool,\n+    pub fixes: Option<Vec<Assist>>,\n }\n \n impl Diagnostic {\n     fn new(code: &'static str, message: impl Into<String>, range: TextRange) -> Diagnostic {\n         let message = message.into();\n-        let code = Some(DiagnosticCode(code));\n-        Self {\n+        Diagnostic {\n+            code: DiagnosticCode(code),\n             message,\n             range,\n             severity: Severity::Error,\n-            fixes: None,\n             unused: false,\n-            code,\n             experimental: false,\n+            fixes: None,\n         }\n     }\n \n@@ -86,36 +84,14 @@ impl Diagnostic {\n         self\n     }\n \n-    fn error(range: TextRange, message: String) -> Self {\n-        Self {\n-            message,\n-            range,\n-            severity: Severity::Error,\n-            fixes: None,\n-            unused: false,\n-            code: None,\n-            experimental: false,\n-        }\n-    }\n-\n-    fn hint(range: TextRange, message: String) -> Self {\n-        Self {\n-            message,\n-            range,\n-            severity: Severity::WeakWarning,\n-            fixes: None,\n-            unused: false,\n-            code: None,\n-            experimental: false,\n-        }\n-    }\n-\n-    fn with_fixes(self, fixes: Option<Vec<Assist>>) -> Self {\n-        Self { fixes, ..self }\n+    fn with_fixes(mut self, fixes: Option<Vec<Assist>>) -> Diagnostic {\n+        self.fixes = fixes;\n+        self\n     }\n \n-    fn with_unused(self, unused: bool) -> Self {\n-        Self { unused, ..self }\n+    fn with_unused(mut self, unused: bool) -> Diagnostic {\n+        self.unused = unused;\n+        self\n     }\n }\n \n@@ -150,11 +126,9 @@ pub(crate) fn diagnostics(\n \n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n     res.extend(\n-        parse\n-            .errors()\n-            .iter()\n-            .take(128)\n-            .map(|err| Diagnostic::error(err.range(), format!(\"Syntax Error: {}\", err))),\n+        parse.errors().iter().take(128).map(|err| {\n+            Diagnostic::new(\"syntax-error\", format!(\"Syntax Error: {}\", err), err.range())\n+        }),\n     );\n \n     for node in parse.tree().syntax().descendants() {\n@@ -205,15 +179,8 @@ pub(crate) fn diagnostics(\n     }\n \n     res.retain(|d| {\n-        if let Some(code) = d.code {\n-            if ctx.config.disabled.contains(code.as_str()) {\n-                return false;\n-            }\n-        }\n-        if ctx.config.disable_experimental && d.experimental {\n-            return false;\n-        }\n-        true\n+        !ctx.config.disabled.contains(d.code.as_str())\n+            && !(ctx.config.disable_experimental && d.experimental)\n     });\n \n     res\n@@ -244,13 +211,18 @@ fn check_unnecessary_braces_in_use_statement(\n                 });\n \n         acc.push(\n-            Diagnostic::hint(use_range, \"Unnecessary braces in use statement\".to_string())\n-                .with_fixes(Some(vec![fix(\n-                    \"remove_braces\",\n-                    \"Remove unnecessary braces\",\n-                    SourceChange::from_text_edit(file_id, edit),\n-                    use_range,\n-                )])),\n+            Diagnostic::new(\n+                \"unnecessary-braces\",\n+                \"Unnecessary braces in use statement\".to_string(),\n+                use_range,\n+            )\n+            .severity(Severity::WeakWarning)\n+            .with_fixes(Some(vec![fix(\n+                \"remove_braces\",\n+                \"Remove unnecessary braces\",\n+                SourceChange::from_text_edit(file_id, edit),\n+                use_range,\n+            )])),\n         );\n     }\n "}, {"sha": "c7f4dab8ea1d92199a1d8990ce92cdb530831f43", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=f0618a8f06a464840079f30b3e25bcdcca3922a3", "patch": "@@ -5,7 +5,7 @@ use ide_db::{base_db::FileId, source_change::SourceChange};\n use syntax::{ast, match_ast, AstNode, SyntaxNode};\n use text_edit::TextEdit;\n \n-use crate::{diagnostics::fix, Diagnostic};\n+use crate::{diagnostics::fix, Diagnostic, Severity};\n \n pub(super) fn check(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &SyntaxNode) {\n     match_ast! {\n@@ -46,7 +46,8 @@ fn check_expr_field_shorthand(\n \n         let field_range = record_field.syntax().text_range();\n         acc.push(\n-            Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string())\n+            Diagnostic::new(\"use-field-shorthand\", \"Shorthand struct initialization\", field_range)\n+                .severity(Severity::WeakWarning)\n                 .with_fixes(Some(vec![fix(\n                     \"use_expr_field_shorthand\",\n                     \"Use struct shorthand initialization\",\n@@ -85,14 +86,16 @@ fn check_pat_field_shorthand(\n         let edit = edit_builder.finish();\n \n         let field_range = record_pat_field.syntax().text_range();\n-        acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fixes(\n-            Some(vec![fix(\n-                \"use_pat_field_shorthand\",\n-                \"Use struct field shorthand\",\n-                SourceChange::from_text_edit(file_id, edit),\n-                field_range,\n-            )]),\n-        ));\n+        acc.push(\n+            Diagnostic::new(\"use-field-shorthand\", \"Shorthand struct pattern\", field_range)\n+                .severity(Severity::WeakWarning)\n+                .with_fixes(Some(vec![fix(\n+                    \"use_pat_field_shorthand\",\n+                    \"Use struct field shorthand\",\n+                    SourceChange::from_text_edit(file_id, edit),\n+                    field_range,\n+                )])),\n+        );\n     }\n }\n "}, {"sha": "977b464140e58e5720f9059a752ccc7b6baca543", "filename": "crates/ide/src/diagnostics/unresolved_module.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_module.rs?ref=f0618a8f06a464840079f30b3e25bcdcca3922a3", "patch": "@@ -65,9 +65,14 @@ mod baz {}\n             expect![[r#\"\n                 [\n                     Diagnostic {\n+                        code: DiagnosticCode(\n+                            \"unresolved-module\",\n+                        ),\n                         message: \"unresolved module\",\n                         range: 0..8,\n                         severity: Error,\n+                        unused: false,\n+                        experimental: false,\n                         fixes: Some(\n                             [\n                                 Assist {\n@@ -98,13 +103,6 @@ mod baz {}\n                                 },\n                             ],\n                         ),\n-                        unused: false,\n-                        code: Some(\n-                            DiagnosticCode(\n-                                \"unresolved-module\",\n-                            ),\n-                        ),\n-                        experimental: false,\n                     },\n                 ]\n             \"#]],"}, {"sha": "ccf66294f16b447336f24f87173b4b801196a0f3", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0618a8f06a464840079f30b3e25bcdcca3922a3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f0618a8f06a464840079f30b3e25bcdcca3922a3", "patch": "@@ -1229,14 +1229,13 @@ pub(crate) fn publish_diagnostics(\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),\n             severity: Some(to_proto::diagnostic_severity(d.severity)),\n-            code: d.code.map(|d| d.as_str().to_owned()).map(NumberOrString::String),\n-            code_description: d.code.and_then(|code| {\n-                lsp_types::Url::parse(&format!(\n+            code: Some(NumberOrString::String(d.code.as_str().to_string())),\n+            code_description: Some(lsp_types::CodeDescription {\n+                href: lsp_types::Url::parse(&format!(\n                     \"https://rust-analyzer.github.io/manual.html#{}\",\n-                    code.as_str()\n+                    d.code.as_str()\n                 ))\n-                .ok()\n-                .map(|href| lsp_types::CodeDescription { href })\n+                .unwrap(),\n             }),\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,"}]}