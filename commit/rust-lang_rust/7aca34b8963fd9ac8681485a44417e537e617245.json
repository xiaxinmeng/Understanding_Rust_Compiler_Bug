{"sha": "7aca34b8963fd9ac8681485a44417e537e617245", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhY2EzNGI4OTYzZmQ5YWM4NjgxNDg1YTQ0NDE3ZTUzN2U2MTcyNDU=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-02-16T22:47:00Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-02-16T22:47:48Z"}, "message": "add readme for librustdoc", "tree": {"sha": "3ab1509f084063a707a594e90480541a34f1a426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab1509f084063a707a594e90480541a34f1a426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aca34b8963fd9ac8681485a44417e537e617245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aca34b8963fd9ac8681485a44417e537e617245", "html_url": "https://github.com/rust-lang/rust/commit/7aca34b8963fd9ac8681485a44417e537e617245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aca34b8963fd9ac8681485a44417e537e617245/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932c736479f43dc8893a924946e4335d8e308c2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/932c736479f43dc8893a924946e4335d8e308c2e", "html_url": "https://github.com/rust-lang/rust/commit/932c736479f43dc8893a924946e4335d8e308c2e"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "844c54c7aa88cd29635acc962aa2d9f715adcfac", "filename": "src/librustdoc/README.md", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/7aca34b8963fd9ac8681485a44417e537e617245/src%2Flibrustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7aca34b8963fd9ac8681485a44417e537e617245/src%2Flibrustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FREADME.md?ref=7aca34b8963fd9ac8681485a44417e537e617245", "patch": "@@ -0,0 +1,170 @@\n+# The walking tour of rustdoc\n+\n+Rustdoc is implemented entirely within the crate `librustdoc`. After partially compiling a crate to\n+get its AST (technically the HIR map) from rustc, librustdoc performs two major steps past that to\n+render a set of documentation:\n+\n+* \"Clean\" the AST into a form that's more suited to creating documentation (and slightly more\n+  resistant to churn in the compiler).\n+* Use this cleaned AST to render a crate's documentation, one page at a time.\n+\n+Naturally, there's more than just this, and those descriptions simplify out lots of details, but\n+that's the high-level overview.\n+\n+(Side note: this is a library crate! The `rustdoc` binary is crated using the project in\n+`src/tools/rustdoc`. Note that literally all that does is call the `main()` that's in this crate's\n+`lib.rs`, though.)\n+\n+## Cheat sheet\n+\n+* Use `x.py build --stage 1 src/libstd src/tools/rustdoc` to make a useable rustdoc you can run on\n+  other projects.\n+  * Add `src/libtest` to be able to use `rustdoc --test`.\n+  * If you've used `rustup toolchain link local /path/to/build/$TARGET/stage1` previously, then\n+    after the previous build command, `cargo +local doc` will Just Work.\n+* Use `x.py doc --stage 1 src/libstd` to use this rustdoc to generate the standard library docs.\n+  * The completed docs will be available in `build/$TARGET/doc/std`, though the bundle is meant to\n+    be used as though you would copy out the `doc` folder to a web server, since that's where the\n+    CSS/JS and landing page are.\n+* Most of the HTML printing code is in `html/format.rs` and `html/render.rs`. It's in a bunch of\n+  `fmt::Display` implementations and supplementary functions.\n+* The types that operates on are defined in `clean/mod.rs`, right next to the custom `Clean` trait\n+  used to process them out of the rustc HIR.\n+* The bits specific to using rustdoc as a test harness are in `test.rs`.\n+* The Markdown renderer is loaded up in `html/markdown.rs`, including functions for extracting\n+  doctests from a given block of Markdown.\n+* The tests on rustdoc *output* are located in `src/test/rustdoc`, where they're handled by the test\n+  runner of rustbuild and the supplementary script `src/etc/htmldocck.py`.\n+* Tests on search index generation are located in `src/test/rustdoc-js`, as a series of JavaScript\n+  files that encode queries on the standard library search index and expected results.\n+\n+## From crate to clean\n+\n+In `core.rs` are two central items: the `DocContext` struct, and the `run_core` function. The latter\n+is where rustdoc calls out to rustc to compile a crate to the point where rustdoc can take over. The\n+former is a state container used when crawling through a crate to gather its documentation.\n+\n+The main process of crate crawling is done in `clean/mod.rs` through several implementations of the\n+`Clean` trait defined within. This is a conversion trait, which defines one method:\n+\n+```rust\n+pub trait Clean<T> {\n+    fn clean(&self, cx: &DocContext) -> T;\n+}\n+```\n+\n+`clean/mod.rs` also defines the types for the \"cleaned\" AST used later on to render documentation\n+pages. Each usually accompanies an implementation of `Clean` that takes some AST or HIR type from\n+rustc and converts it into the appropriate \"cleaned\" type. \"Big\" items like modules or associated\n+items may have some extra processing in its `Clean` implementation, but for the most part these\n+impls are straightforward conversions. The \"entry point\" to this module is the `impl Clean<Crate>\n+for visit_ast::RustdocVisitor`, which is called by `run_core` above.\n+\n+You see, I actually lied a little earlier: There's another AST transformation that happens before\n+the events in `clean/mod.rs`.  In `visit_ast.rs` is the type `RustdocVisitor`, which *actually*\n+crawls a `hir::Crate` to get the first intermediate representation, defined in `doctree.rs`. This\n+pass is mainly to get a few intermediate wrappers around the HIR types and to process visibility\n+and inlining. This is where `#[doc(inline)]`, `#[doc(no_inline)]`, and `#[doc(hidden)]` are\n+processed, as well as the logic for whether a `pub use` should get the full page or a \"Reexport\"\n+line in the module page.\n+\n+Back in `clean/mod.rs`, the other major thing that happens here is the special collection of doc\n+comments (and basic `#[doc=\"\"]` attributes) into a separate field in the `Attributes` struct from\n+the other attributes. The primary output of this process is a `clean::Crate` with a tree of `Item`s\n+which describe the publicly-documentable items in the target crate.\n+\n+### Hot potato\n+\n+Before moving on to the next major step, a few important \"passes\" occur over the documentation.\n+These do things like combine the separate \"attributes\" into a single string and strip leading\n+whitespace to make the document easier on the markdown parser, or drop items that are not public or\n+deliberately hidden with `#[doc(hidden)]`. These are all implemented in the `passes/` directory, one\n+file per pass. By default, all of these passes are run on a crate, but the ones regarding dropping\n+private/hidden items can be bypassed by passing `--document-private-items` to rustdoc.\n+\n+(Strictly speaking, you can fine-tune the passes run and even add your own, but [we're trying to\n+deprecate that][44136]. If you need finer-grain control over these passes, please let us know!)\n+\n+[44136]: https://github.com/rust-lang/rust/issues/44136\n+\n+## From clean to crate\n+\n+This is where the \"second phase\" in rustdoc begins. This phase primarily lives in the `html/`\n+folder, and it all starts with `run()` in `html/render.rs`. This code is responsible for setting up\n+the `Context`, `SharedContext`, and `Cache` which are used during rendering, copying out the static\n+files which live in every rendered set of documentation (things like the fonts, CSS, and JavaScript\n+that live in `html/static/`), creating the search index, and printing out the source code rendering,\n+before beginning the process of rendering all the documentation for the crate.\n+\n+Several functions implemented directly on `Context` take the `clean::Crate` and set up some state\n+between rendering items or recursing on a module's child items. From here the \"page rendering\"\n+begins, via an enormous `write!()` call in `html/layout.rs`. The parts that actually generate HTML\n+from the items and documentation occurs within a series of `std::fmt::Display` implementations and\n+functions that pass around a `&mut std::fmt::Formatter`. The top-level implementation that writes\n+out the page body is the `impl<'a> fmt::Display for Item<'a>` in `html/render.rs`, which switches\n+out to one of several `item_*` functions based on the kind of `Item` being rendered.\n+\n+Depending on what kind of rendering code you're looking for, you'll probably find it either in\n+`html/render.rs` for major items like \"what sections should I print for a struct page\" or\n+`html/format.rs` for smaller component pieces like \"how should I print a where clause as part of\n+some other item\".\n+\n+Whenever rustdoc comes across an item that should print hand-written documentation alongside, it\n+calls out to `html/markdown.rs` which interfaces with the Markdown parser. This is exposed as a\n+series of types that wrap a string of Markdown, and implement `fmt::Display` to emit HTML text. It\n+takes special care to enable certain features like footnotes and tables and add syntax highlighting\n+to Rust code blocks (via `html/highlight.rs`) before running the Markdown parser. There's also a\n+function in here (`find_testable_code`) that specifically scans for Rust code blocks so the\n+test-runner code can find all the doctests in the crate.\n+\n+### From soup to nuts\n+\n+(alternate title: [\"An unbroken thread that stretches from those first `Cell`s to us\"][video])\n+\n+[video]: https://www.youtube.com/watch?v=hOLAGYmUQV0\n+\n+It's important to note that the AST cleaning can ask the compiler for information (crucially,\n+`DocContext` contains a `TyCtxt`), but page rendering cannot. The `clean::Crate` created within\n+`run_core` is passed outside the compiler context before being handed to `html::render::run`. This\n+means that a lot of the \"supplementary data\" that isn't immediately available inside an item's\n+definition, like which trait is the `Deref` trait used by the language, needs to be collected during\n+cleaning, stored in the `DocContext`, and passed along to the `SharedContext` during HTML rendering.\n+This manifests as a bunch of shared state, context variables, and `RefCell`s.\n+\n+Also of note is that some items that come from \"asking the compiler\" don't go directly into the\n+`DocContext` - for example, when loading items from a foreign crate, rustdoc will ask about trait\n+implementations and generate new `Item`s for the impls based on that information. This goes directly\n+into the returned `Crate` rather than roundabout through the `DocContext`. This way, these\n+implementations can be collected alongside the others, right before rendering the HTML.\n+\n+## Other tricks up its sleeve\n+\n+All this describes the process for generating HTML documentation from a Rust crate, but there are\n+couple other major modes that rustdoc runs in. It can also be run on a standalone Markdown file, or\n+it can run doctests on Rust code or standalone Markdown files. For the former, it shortcuts straight\n+to `html/markdown.rs`, optionally including a mode which inserts a Table of Contents to the output\n+HTML.\n+\n+For the latter, rustdoc runs a similar partial-compilation to get relevant documentation in\n+`test.rs`, but instead of going through the full clean and render process, it runs a much simpler\n+crate walk to grab *just* the hand-written documentation. Combined with the aforementioned\n+\"`find_testable_code`\" in `html/markdown.rs`, it builds up a collection of tests to run before\n+handing them off to the libtest test runner. One notable location in `test.rs` is the function\n+`make_test`, which is where hand-written doctests get transformed into something that can be\n+executed.\n+\n+## Dotting i's and crossing t's\n+\n+So that's rustdoc's code in a nutshell, but there's more things in the repo that deal with it. Since\n+we have the full `compiletest` suite at hand, there's a set of tests in `src/test/rustdoc` that make\n+sure the final HTML is what we expect in various situations. These tests also use a supplementary\n+script, `src/etc/htmldocck.py`, that allows it to look through the final HTML using XPath notation\n+to get a precise look at the output. The full description of all the commands available to rustdoc\n+tests is in `htmldocck.py`.\n+\n+In addition, there are separate tests for the search index and rustdoc's ability to query it. The\n+files in `src/test/rustdoc-js` each contain a different search query and the expected results,\n+broken out by search tab. These files are processed by a script in `src/tools/rustdoc-js` and the\n+Node.js runtime. These tests don't have as thorough of a writeup, but a broad example that features\n+results in all tabs can be found in `basic.js`. The basic idea is that you match a given `QUERY`\n+with a set of `EXPECTED` results, complete with the full item path of each item."}]}