{"sha": "99ba290a14c6654164cea8339b827d8da0ff600d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YmEyOTBhMTRjNjY1NDE2NGNlYTgzMzliODI3ZDhkYTBmZjYwMGQ=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-08-16T23:36:02Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-08-16T23:36:02Z"}, "message": "Improve code style", "tree": {"sha": "e5e88c9611f13bbb9e543ba8479b832d343e9519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e88c9611f13bbb9e543ba8479b832d343e9519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ba290a14c6654164cea8339b827d8da0ff600d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ba290a14c6654164cea8339b827d8da0ff600d", "html_url": "https://github.com/rust-lang/rust/commit/99ba290a14c6654164cea8339b827d8da0ff600d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ba290a14c6654164cea8339b827d8da0ff600d/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f98ffa271d0112d04b482e1d61228d99bf006ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f98ffa271d0112d04b482e1d61228d99bf006ccf", "html_url": "https://github.com/rust-lang/rust/commit/f98ffa271d0112d04b482e1d61228d99bf006ccf"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "df06031d999e60af859cef06263e468ee170ea88", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/99ba290a14c6654164cea8339b827d8da0ff600d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ba290a14c6654164cea8339b827d8da0ff600d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=99ba290a14c6654164cea8339b827d8da0ff600d", "patch": "@@ -1145,29 +1145,24 @@ fn detect_same_item_push<'tcx>(\n                 let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n                 let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n                 if let ExprKind::Path(ref qpath) = pushed_item.kind {\n-                    if let Res::Local(hir_id) = qpath_res(cx, qpath, pushed_item.hir_id) {\n+                    if_chain! {\n+                        if let Res::Local(hir_id) = qpath_res(cx, qpath, pushed_item.hir_id);\n                         let node = cx.tcx.hir().get(hir_id);\n-                        if_chain! {\n-                            if let Node::Binding(pat) = node;\n-                            if let PatKind::Binding(bind_ann, ..) = pat.kind;\n-                            then {\n-                                match bind_ann {\n-                                    BindingAnnotation::RefMut | BindingAnnotation::Mutable => {},\n-                                    _ => {\n-                                        span_lint_and_help(\n-                                            cx,\n-                                            SAME_ITEM_PUSH,\n-                                            vec.span,\n-                                            \"it looks like the same item is being pushed into this Vec\",\n-                                            None,\n-                                            &format!(\n-                                                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                                                item_str, vec_str, item_str\n-                                            ),\n-                                        )\n-                                    }\n-                                }\n-                            }\n+                        if let Node::Binding(pat) = node;\n+                        if let PatKind::Binding(bind_ann, ..) = pat.kind;\n+                        if !matches!(bind_ann, BindingAnnotation::RefMut | BindingAnnotation::Mutable);\n+                        then {\n+                            span_lint_and_help(\n+                                cx,\n+                                SAME_ITEM_PUSH,\n+                                vec.span,\n+                                \"it looks like the same item is being pushed into this Vec\",\n+                                None,\n+                                &format!(\n+                                    \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                                    item_str, vec_str, item_str\n+                                ),\n+                            )\n                         }\n                     }\n                 } else if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {"}]}