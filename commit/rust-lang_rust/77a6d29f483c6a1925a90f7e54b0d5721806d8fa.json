{"sha": "77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YTZkMjlmNDgzYzZhMTkyNWE5MGY3ZTU0YjBkNTcyMTgwNmQ4ZmE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-05-03T23:11:39Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-05-04T02:25:35Z"}, "message": "Address review comments", "tree": {"sha": "1b9b2dbb4731c29ee906b3a37d517172ffa688fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9b2dbb4731c29ee906b3a37d517172ffa688fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "html_url": "https://github.com/rust-lang/rust/commit/77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15dbe652ffa260fda162be3fa8e7aa075884c412", "url": "https://api.github.com/repos/rust-lang/rust/commits/15dbe652ffa260fda162be3fa8e7aa075884c412", "html_url": "https://github.com/rust-lang/rust/commit/15dbe652ffa260fda162be3fa8e7aa075884c412"}], "stats": {"total": 90, "additions": 39, "deletions": 51}, "files": [{"sha": "e77315f06a952384871914c923933ef90e37de01", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -2995,7 +2995,7 @@ pub struct UnsafetyCheckResult {\n }\n \n newtype_index! {\n-    pub struct GeneratorField {\n+    pub struct GeneratorSavedLocal {\n         derive [HashStable]\n         DEBUG_FORMAT = \"_{}\",\n     }\n@@ -3005,18 +3005,18 @@ newtype_index! {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GeneratorLayout<'tcx> {\n     /// The type of every local stored inside the generator.\n-    pub field_tys: IndexVec<GeneratorField, Ty<'tcx>>,\n+    pub field_tys: IndexVec<GeneratorSavedLocal, Ty<'tcx>>,\n \n     /// Which of the above fields are in each variant. Note that one field may\n     /// be stored in multiple variants.\n-    pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorField>>,\n+    pub variant_fields: IndexVec<VariantIdx, IndexVec<Field, GeneratorSavedLocal>>,\n \n     /// Names and scopes of all the stored generator locals.\n     /// NOTE(tmandry) This is *strictly* a temporary hack for codegen\n     /// debuginfo generation, and will be removed at some point.\n     /// Do **NOT** use it for anything else, local information should not be\n     /// in the MIR, please rely on local crate HIR or other side-channels.\n-    pub __local_debuginfo_codegen_only_do_not_use: IndexVec<GeneratorField, LocalDecl<'tcx>>,\n+    pub __local_debuginfo_codegen_only_do_not_use: IndexVec<GeneratorSavedLocal, LocalDecl<'tcx>>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n@@ -3582,7 +3582,7 @@ impl<'tcx> TypeFoldable<'tcx> for Field {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for GeneratorField {\n+impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }"}, {"sha": "1dbb5a8f0bff649b65e8500a47eb9863ca4343d6", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -605,6 +605,12 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             }\n \n             ty::Generator(def_id, ref substs, _) => {\n+                // FIXME(tmandry): For fields that are repeated in multiple\n+                // variants in the GeneratorLayout, we need code to ensure that\n+                // the offset of these fields never change. Right now this is\n+                // not an issue since every variant has every field, but once we\n+                // optimize this we have to be more careful.\n+\n                 let discr_index = substs.prefix_tys(def_id, tcx).count();\n                 let prefix_tys = substs.prefix_tys(def_id, tcx)\n                     .chain(iter::once(substs.discr_ty(tcx)));\n@@ -1691,7 +1697,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n \n     fn field(this: TyLayout<'tcx>, cx: &C, i: usize) -> C::TyLayout {\n         let tcx = cx.tcx();\n-        let handle_discriminant = |discr: &Scalar| -> C::TyLayout {\n+        let discr_layout = |discr: &Scalar| -> C::TyLayout {\n             let layout = LayoutDetails::scalar(cx, discr.clone());\n             MaybeResult::from_ok(TyLayout {\n                 details: tcx.intern_layout(layout),\n@@ -1781,7 +1787,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                     }\n                     Variants::Multiple { ref discr, discr_index, .. } => {\n                         if i == discr_index {\n-                            return handle_discriminant(discr);\n+                            return discr_layout(discr);\n                         }\n                         substs.prefix_tys(def_id, tcx).nth(i).unwrap()\n                     }\n@@ -1805,7 +1811,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                     // Discriminant field for enums (where applicable).\n                     Variants::Multiple { ref discr, .. } => {\n                         assert_eq!(i, 0);\n-                        return handle_discriminant(discr);\n+                        return discr_layout(discr);\n                     }\n                 }\n             }"}, {"sha": "44e452d8373e391a937877d961f5a0e4ce2f3379", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -16,6 +16,7 @@ use crate::util::captures::Captures;\n use crate::mir::interpret::{Scalar, Pointer};\n \n use smallvec::SmallVec;\n+use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::marker::PhantomData;\n use std::ops::Range;\n@@ -513,16 +514,13 @@ impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n     /// Calls `f` with a reference to the name of the enumerator for the given\n     /// variant `v`.\n     #[inline]\n-    pub fn map_variant_name<R>(&self, v: VariantIdx, f: impl FnOnce(&str) -> R) -> R {\n-        let name = match v.as_usize() {\n-            Self::UNRESUMED => Self::UNRESUMED_NAME,\n-            Self::RETURNED => Self::RETURNED_NAME,\n-            Self::POISONED => Self::POISONED_NAME,\n-            _ => {\n-                return f(&format!(\"variant#{}\", v.as_usize()));\n-            }\n-        };\n-        f(name)\n+    pub fn variant_name(&self, v: VariantIdx) -> Cow<'static, str> {\n+        match v.as_usize() {\n+            Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),\n+            Self::RETURNED => Cow::from(Self::RETURNED_NAME),\n+            Self::POISONED => Cow::from(Self::POISONED_NAME),\n+            _ => Cow::from(format!(\"Suspend{}\", v.as_usize() - 3))\n+        }\n     }\n \n     /// The type of the state discriminant used in the generator type."}, {"sha": "4ab197c64604f4be144931fd4d53cd18e825e823", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -1575,7 +1575,7 @@ impl<'tcx> VariantInfo<'tcx> {\n         match self {\n             VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n             VariantInfo::Generator(substs, _, variant_index) =>\n-                substs.map_variant_name(*variant_index, f),\n+                f(&substs.variant_name(*variant_index)),\n         }\n     }\n \n@@ -1720,16 +1720,16 @@ fn prepare_enum_metadata(\n                 .collect(),\n             ty::Generator(_, substs, _) => substs\n                 .variant_range(enum_def_id, cx.tcx)\n-                .map(|v| substs.map_variant_name(v, |name| {\n-                    let name = SmallCStr::new(name);\n+                .map(|variant_index| {\n+                    let name = SmallCStr::new(&substs.variant_name(variant_index));\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),\n                             name.as_ptr(),\n                             // FIXME: what if enumeration has i128 discriminant?\n-                            v.as_usize() as u64))\n+                            variant_index.as_usize() as u64))\n                     }\n-                }))\n+                })\n                 .collect(),\n             _ => bug!(),\n         };"}, {"sha": "cbcc457fda9a29ffebea5170c433e9c0f3b076e4", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -63,10 +63,10 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                     write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n                 }\n             }\n-            if let (&ty::Generator(..), &layout::Variants::Single { index })\n+            if let (&ty::Generator(_, substs, _), &layout::Variants::Single { index })\n                  = (&layout.ty.sty, &layout.variants)\n             {\n-                write!(&mut name, \"::variant#{:?}\", index).unwrap();\n+                write!(&mut name, \"::{}\", substs.variant_name(index)).unwrap();\n             }\n             Some(name)\n         }"}, {"sha": "a076f4aab9de1f555084f62140b0543ec1e58c6c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -684,25 +684,8 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                         }\n                     }\n                 }\n-                ty::Generator(def_id, substs, _) => {\n-                    let variants = substs.state_tys(def_id, tcx).count();\n-                    if index.as_usize() >= variants {\n-                        PlaceTy::from_ty(\n-                            span_mirbug_and_err!(\n-                                self,\n-                                place,\n-                                \"cast to variant #{:?} but generator only has {:?}\",\n-                                index,\n-                                variants\n-                            ),\n-                        )\n-                    } else {\n-                        PlaceTy {\n-                            ty: base_ty,\n-                            variant_index: Some(index),\n-                        }\n-                    }\n-                }\n+                // We do not need to handle generators here, because this runs\n+                // before the generator transform stage.\n                 _ => {\n                     let ty = if let Some(name) = maybe_name {\n                         span_mirbug_and_err!("}, {"sha": "9215356daa484f405a299e73bda2a635c8e58276", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -58,7 +58,7 @@ impl MirPass for Deaggregator {\n                     }\n                     AggregateKind::Generator(..) => {\n                         // Right now we only support initializing generators to\n-                        // variant#0.\n+                        // variant 0 (Unresumed).\n                         let variant_index = VariantIdx::new(0);\n                         set_discriminant = Some(Statement {\n                             kind: StatementKind::SetDiscriminant {"}, {"sha": "e35787a98719cfa82da9ecab56b530b8580d34ae", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -561,12 +561,13 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         remap.insert(local, (var.ty, variant_index, idx));\n         decls.push(var);\n     }\n-    let field_tys = decls.iter().map(|field| field.ty).collect::<IndexVec<GeneratorField, _>>();\n+    let field_tys = decls.iter().map(|field| field.ty).collect::<IndexVec<_, _>>();\n \n     // Put every var in each variant, for now.\n-    let all_vars = (0..field_tys.len()).map(GeneratorField::from).collect();\n+    let all_vars = (0..field_tys.len()).map(GeneratorSavedLocal::from).collect();\n     let empty_variants = iter::repeat(IndexVec::new()).take(3);\n     let state_variants = iter::repeat(all_vars).take(suspending_blocks.count());\n+\n     let layout = GeneratorLayout {\n         field_tys,\n         variant_fields: empty_variants.chain(state_variants).collect(),"}, {"sha": "c6f98e5782b1f8449999ab71cc5bc7301c2c91bf", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a6d29f483c6a1925a90f7e54b0d5721806d8fa/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=77a6d29f483c6a1925a90f7e54b0d5721806d8fa", "patch": "@@ -10,16 +10,16 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {[...]}, 4: generator_objects::main::generator::variant#4 {[...]}}}\n+// gdb-check:$1 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 0, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::Suspend0 {[...]}, 4: generator_objects::main::generator::Suspend1 {[...]}}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {c: 6, d: 7}, 4: generator_objects::main::generator::variant#4 {[...]}}}\n+// gdb-check:$2 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 3, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::Suspend0 {c: 6, d: 7}, 4: generator_objects::main::generator::Suspend1 {[...]}}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {[...]}, 4: generator_objects::main::generator::variant#4 {c: 7, d: 8}}}\n+// gdb-check:$3 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 4, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::Suspend0 {[...]}, 4: generator_objects::main::generator::Suspend1 {c: 7, d: 8}}}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::variant#3 {[...]}, 4: generator_objects::main::generator::variant#4 {[...]}}}\n+// gdb-check:$4 = generator_objects::main::generator {__0: 0x[...], <<variant>>: {__state: 1, 0: generator_objects::main::generator::Unresumed, 1: generator_objects::main::generator::Returned, 2: generator_objects::main::generator::Panicked, 3: generator_objects::main::generator::Suspend0 {[...]}, 4: generator_objects::main::generator::Suspend1 {[...]}}}\n \n // === LLDB TESTS ==================================================================================\n "}]}