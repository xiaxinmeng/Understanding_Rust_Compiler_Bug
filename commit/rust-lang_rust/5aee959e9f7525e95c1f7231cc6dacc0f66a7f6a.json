{"sha": "5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWU5NTllOWY3NTI1ZTk1YzFmNzIzMWNjNmRhY2MwZjY2YTdmNmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-25T13:14:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T15:37:46Z"}, "message": "make field always private, add `From` impls", "tree": {"sha": "5825e9b8234e8825b9e2c30eb8a14e236eec156a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5825e9b8234e8825b9e2c30eb8a14e236eec156a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "html_url": "https://github.com/rust-lang/rust/commit/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46f185f670ff051f56f48d7f19da4b116a6128a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46f185f670ff051f56f48d7f19da4b116a6128a", "html_url": "https://github.com/rust-lang/rust/commit/c46f185f670ff051f56f48d7f19da4b116a6128a"}], "stats": {"total": 190, "additions": 64, "deletions": 126}, "files": [{"sha": "caf7985226bbfcbab4f723d9fb6d415214f848fe", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -53,7 +53,7 @@ impl CrateNum {\n     }\n \n     pub fn as_u32(&self) -> u32 {\n-        self.0\n+        u32::from(*self)\n     }\n \n     pub fn as_def_id(&self) -> DefId { DefId { krate: *self, index: CRATE_DEF_INDEX } }"}, {"sha": "8b7438cbe63250d4c8e3dfab318a51fe327d716c", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -102,7 +102,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::Local {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -112,7 +111,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::BasicBlock {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -122,7 +120,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::Field {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -133,7 +130,6 @@ for mir::SourceScope {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -143,7 +139,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::Promoted {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "e90c4f62f59d5c0ba3c09b5cd42cd9ec7f38ab92", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -143,7 +143,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -153,7 +152,6 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::CanonicalVar {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n         self.index().hash_stable(hcx, hasher);\n     }\n }\n@@ -774,7 +772,6 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n     FnPtrAddrCast\n });\n \n-impl_stable_hash_for!(tuple_struct ::middle::region::FirstStatementIndex { idx });\n impl_stable_hash_for!(struct ::middle::region::Scope { id, code });\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for region::Scope {"}, {"sha": "eabcf1ce4136361878b3879dc62df4271eee517d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -73,8 +73,6 @@ use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n \n-use rustc_data_structures::indexed_vec::Idx;\n-\n mod note;\n \n mod need_type_info;"}, {"sha": "d8f3b9a05bd40f57c3009d3b290a57b06e031672", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -16,7 +16,7 @@ use self::CombineMapType::*;\n use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n use super::unify_key;\n \n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::unify as ut;\n use ty::{self, Ty, TyCtxt};"}, {"sha": "cdc92877a5ae82e0596f6b256af74e78136852fb", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -49,8 +49,8 @@ impl UnifyValue for RegionVidKey {\n \n impl UnifyKey for ty::RegionVid {\n     type Value = RegionVidKey;\n-    fn index(&self) -> u32 { self.0 }\n-    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid(i) }\n+    fn index(&self) -> u32 { u32::from(*self) }\n+    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid::from(i) }\n     fn tag() -> &'static str { \"RegionVid\" }\n }\n "}, {"sha": "0f565a3a7ec16043b7956a0fa7057e91610778c2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -161,11 +161,12 @@ pub struct BlockRemainder {\n \n newtype_index! {\n     pub struct FirstStatementIndex {\n-        pub idx\n         MAX = SCOPE_DATA_REMAINDER_MAX\n     }\n }\n \n+impl_stable_hash_for!(tuple_struct ::middle::region::FirstStatementIndex { idx });\n+\n impl From<ScopeData> for Scope {\n     #[inline]\n     fn from(scope_data: ScopeData) -> Self {"}, {"sha": "e444730b8d032ea3595b1b8ec068d94773718be7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -1179,7 +1179,6 @@ pub struct FloatVid {\n \n newtype_index! {\n     pub struct RegionVid {\n-        pub idx\n         DEBUG_FORMAT = custom,\n     }\n }\n@@ -1190,18 +1189,6 @@ impl Atom for RegionVid {\n     }\n }\n \n-impl From<usize> for RegionVid {\n-    fn from(i: usize) -> RegionVid {\n-        RegionVid::new(i)\n-    }\n-}\n-\n-impl From<RegionVid> for usize {\n-    fn from(vid: RegionVid) -> usize {\n-        Idx::index(vid)\n-    }\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub enum InferTy {\n     TyVar(TyVid),"}, {"sha": "e8236e21e246342e7f1db270b6b15a63d776a90a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -26,7 +26,6 @@ use std::cell::Cell;\n use std::fmt;\n use std::usize;\n \n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};"}, {"sha": "258fe643c3067cad32126a200fa6a4c2cce90378", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -32,7 +32,7 @@ use syntax::symbol::keywords;\n use std::iter;\n \n use rustc_data_structures::bitvec::BitArray;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n \n pub use self::constant::codegen_static_initializer;\n "}, {"sha": "bfa0e0a451e6f86ad0d40b981ce7fa54743fc125", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -13,7 +13,6 @@ use rustc::mir;\n use rustc::mir::interpret::{ConstValue, ScalarMaybeUndef};\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n \n use base;"}, {"sha": "4baab1763c31059288385dfe5b9a193482c49945", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -13,7 +13,6 @@ use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, Size};\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n-use rustc_data_structures::indexed_vec::Idx;\n use base;\n use builder::Builder;\n use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_null, C_uint_big};"}, {"sha": "107e6b0530effb16265492d6da83df323f8b4e45", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 52, "deletions": 64, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -49,12 +49,20 @@ impl Idx for u32 {\n }\n \n /// Creates a struct type `S` that can be used as an index with\n-/// `IndexVec` and so on.  This struct can be constructed via `S::new`\n-/// (given a `usize`) and converted to a usize with the `index()`\n-/// method (from the `Idx` trait). Internally, the index uses a u32,\n-/// so the index must not exceed `u32::MAX`. You can also customize\n-/// things like the `Debug` impl, what traits are derived, and so\n-/// forth.\n+/// `IndexVec` and so on.\n+///\n+/// There are two ways of interacting with these indices:\n+///\n+/// - The `From` impls are the preferred way. So you can do\n+///   `S::from(v)` with a `usize` or `u32`. And you can convert back\n+///   to an integer with `u32::from(s)`.\n+///\n+/// - Alternatively, you can use the methods `S::new(v)` and `s.index()`\n+///   to create/return a value.\n+///\n+/// Internally, the index uses a u32, so the index must not exceed\n+/// `u32::MAX`. You can also customize things like the `Debug` impl,\n+/// what traits are derived, and so forth via the macro.\n #[macro_export]\n macro_rules! newtype_index {\n     // ---- public rules ----\n@@ -84,13 +92,20 @@ macro_rules! newtype_index {\n \n     // Base case, user-defined constants (if any) have already been defined\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n-        $v struct $type($($pub)* u32);\n+        $v struct $type(u32);\n+\n+        impl $type {\n+            /// Extract value of this index as an integer.\n+            #[inline]\n+            $v fn index(self) -> usize {\n+                <Self as Idx>::index(self)\n+            }\n+        }\n \n         impl Idx for $type {\n             #[inline]\n@@ -134,6 +149,30 @@ macro_rules! newtype_index {\n             }\n         }\n \n+        impl From<$type> for u32 {\n+            fn from(v: $type) -> u32 {\n+                v.0\n+            }\n+        }\n+\n+        impl From<$type> for usize {\n+            fn from(v: $type) -> usize {\n+                v.0 as usize\n+            }\n+        }\n+\n+        impl From<usize> for $type {\n+            fn from(v: usize) -> Self {\n+                Self::new(v)\n+            }\n+        }\n+\n+        impl From<u32> for $type {\n+            fn from(v: u32) -> Self {\n+                Self::new(v as usize)\n+            }\n+        }\n+\n         newtype_index!(\n             @handle_debug\n             @derives      [$($derives,)*]\n@@ -177,47 +216,14 @@ macro_rules! newtype_index {\n             @debug_format [$debug_format]);\n     );\n \n-    // Handle the case where someone wants to make the internal field public\n-    (@type         [$type:ident]\n-     @max          [$max:expr]\n-     @vis          [$v:vis]\n-     @debug_format [$debug_format:tt]\n-                   pub idx\n-                   $($tokens:tt)*) => (\n-        newtype_index!(\n-            @pub          [pub]\n-            @type         [$type]\n-            @max          [$max]\n-            @vis          [$v]\n-            @debug_format [$debug_format]\n-                          $($tokens)*);\n-    );\n-\n-    // The default case is that the internal field is private\n-    (@type         [$type:ident]\n-     @max          [$max:expr]\n-     @vis          [$v:vis]\n-     @debug_format [$debug_format:tt]\n-                   $($tokens:tt)*) => (\n-        newtype_index!(\n-            @pub          []\n-            @type         [$type]\n-            @max          [$max]\n-            @vis          [$v]\n-            @debug_format [$debug_format]\n-                          $($tokens)*);\n-    );\n-\n     // Append comma to end of derives list if it's missing\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident),*]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -228,8 +234,7 @@ macro_rules! newtype_index {\n \n     // By not including the @derives marker in this list nor in the default args, we can force it\n     // to come first if it exists. When encodable is custom, just use the derives list as-is.\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n@@ -238,7 +243,6 @@ macro_rules! newtype_index {\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)+]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -248,16 +252,14 @@ macro_rules! newtype_index {\n \n     // By not including the @derives marker in this list nor in the default args, we can force it\n     // to come first if it exists. When encodable isn't custom, add serialization traits by default.\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)+ RustcDecodable, RustcEncodable,]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -267,16 +269,14 @@ macro_rules! newtype_index {\n \n     // The case where no derives are added, but encodable is overridden. Don't\n     // derive serialization traits\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      []\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -285,15 +285,13 @@ macro_rules! newtype_index {\n     );\n \n     // The case where no derives are added, add serialization derives by default\n-    (@pub          [$($pub:tt)*]\n-     @type         [$type:ident]\n+    (@type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [RustcDecodable, RustcEncodable,]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -303,15 +301,13 @@ macro_rules! newtype_index {\n \n     // Rewrite final without comma to one that includes comma\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -321,7 +317,6 @@ macro_rules! newtype_index {\n \n     // Rewrite final const without comma to one that includes comma\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n      @vis          [$v:vis]\n@@ -330,7 +325,6 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -340,7 +334,6 @@ macro_rules! newtype_index {\n \n     // Replace existing default for max\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n      @vis          [$v:vis]\n@@ -349,7 +342,6 @@ macro_rules! newtype_index {\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -359,7 +351,6 @@ macro_rules! newtype_index {\n \n     // Replace existing default for debug_format\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n@@ -368,7 +359,6 @@ macro_rules! newtype_index {\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n@@ -378,7 +368,6 @@ macro_rules! newtype_index {\n \n     // Assign a user-defined constant\n     (@derives      [$($derives:ident,)*]\n-     @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n      @vis          [$v:vis]\n@@ -390,7 +379,6 @@ macro_rules! newtype_index {\n         pub const $name: $type = $type($constant);\n         newtype_index!(\n             @derives      [$($derives,)*]\n-            @pub          [$($pub)*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]"}, {"sha": "3f8cd03660c43ab6708420f79eb03509076453cf", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -16,7 +16,6 @@ use rustc::mir::{LocalDecl, LocalKind, Location, Operand, Place};\n use rustc::mir::{ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;"}, {"sha": "290c7032388053f0b1376b35e1d22295e8a4ae58", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -12,7 +12,6 @@ use core::unicode::property::Pattern_White_Space;\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::DiagnosticBuilder;\n-use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;"}, {"sha": "465707ecc17ddcfc58c041d083c095bd6fffb69d", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -100,18 +100,6 @@ impl Atom for LocationIndex {\n     }\n }\n \n-impl From<usize> for LocationIndex {\n-    fn from(i: usize) -> LocationIndex {\n-        LocationIndex::new(i)\n-    }\n-}\n-\n-impl From<LocationIndex> for usize {\n-    fn from(vid: LocationIndex) -> usize {\n-        Idx::index(vid)\n-    }\n-}\n-\n struct FactWriter<'w> {\n     location_table: &'w LocationTable,\n     dir: &'w Path,"}, {"sha": "34e893d2a59f24970b9c92ff46c12ca5bc475143", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -15,7 +15,6 @@\n use super::*;\n use borrow_check::nll::constraints::OutlivesConstraint;\n use dot::{self, IntoCow};\n-use rustc_data_structures::indexed_vec::Idx;\n use std::borrow::Cow;\n use std::io::{self, Write};\n "}, {"sha": "82158acc9e6ab312b73daa965ca4387f4d3c0e9d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -42,7 +42,6 @@ use syntax_pos::{Span, DUMMY_SP};\n use transform::{MirPass, MirSource};\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::indexed_vec::Idx;\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({"}, {"sha": "8ffce9c94926fa5437217fb2e578396c6f253c79", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc::ty::subst::Kind;\n use rustc::ty::{self, CanonicalTy, CanonicalVar, RegionVid, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use std::mem;\n \n pub(super) fn sub_types<'tcx>("}, {"sha": "38e0854bcd61eddabdd00c694f9efc45018d9a43", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -95,7 +95,6 @@ use rustc::hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::mir::*;\n use syntax_pos::{Span};\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fx::FxHashMap;\n \n #[derive(Debug)]"}, {"sha": "154830c2e77e07277bc1fd3ea8ed7dc1fe10ed8e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -19,7 +19,7 @@ use rustc::mir;\n use rustc::ty::{self, TyCtxt, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n \n use syntax::ast::Mutability;\n use syntax::source_map::Span;"}, {"sha": "1dc91cd05b33e9c7aeef0457942904c43ea47117", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -13,7 +13,6 @@\n \n use rustc::mir::{BasicBlock, Location};\n use rustc_data_structures::indexed_set::{HybridIdxSet, IdxSet, Iter};\n-use rustc_data_structures::indexed_vec::Idx;\n \n use dataflow::{BitDenotation, BlockSets, DataflowResults};\n use dataflow::move_paths::{HasMoveData, MovePathIndex};"}, {"sha": "2b5d26c748704f1655ff225b08b859d82b5f9788", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -13,7 +13,6 @@\n use syntax::ast::NodeId;\n use rustc::mir::{BasicBlock, Mir};\n use rustc_data_structures::bitslice::bits_to_string;\n-use rustc_data_structures::indexed_vec::Idx;\n \n use dot;\n use dot::IntoCow;"}, {"sha": "461285ff9bc106422dda4d97f10be82a74f61cf4", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -16,7 +16,7 @@ use std::convert::TryInto;\n \n use rustc::{mir, ty};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt};\n-use rustc_data_structures::indexed_vec::Idx;\n+\n use rustc::mir::interpret::{\n     GlobalId, AllocId,\n     ConstValue, Pointer, Scalar, ScalarMaybeUndef,"}, {"sha": "d01593ca5e91c6a1878d23892a7cff56708b34a3", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -18,7 +18,6 @@ use rustc::ich::StableHashingContext;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Size, Align, LayoutOf, TyLayout, HasDataLayout};\n-use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n use rustc::mir::interpret::{"}, {"sha": "4d19e9dfbf98abd3623ed81fb2fa6070c6b26248", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -26,7 +26,7 @@ use interpret::{self, Value, OpTy, MemoryKind};\n use transform::{MirPass, MirSource};\n use syntax::source_map::{Span, DUMMY_SP};\n use rustc::ty::subst::Substs;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::ParamEnv;\n use rustc::ty::layout::{\n     LayoutOf, TyLayout, LayoutError,\n@@ -133,7 +133,6 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         self.ecx.tcx.span = source_info.span;\n         let lint_root = match self.mir.source_scope_local_data {\n             ClearCrossCrate::Set(ref ivs) => {\n-                use rustc_data_structures::indexed_vec::Idx;\n                 //FIXME(#51314): remove this check\n                 if source_info.scope.index() >= ivs.len() {\n                     return None;"}, {"sha": "bf538112e41ed26ec434092858648a6df1081fb1", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -19,7 +19,6 @@ use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSet;\n-use rustc_data_structures::indexed_vec::Idx;\n use transform::{MirPass, MirSource};\n use util::patch::MirPatch;\n use util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};"}, {"sha": "81fc235c23346aa1515951cdc573ca612b7ee0de", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -16,7 +16,7 @@\n \n use rustc_data_structures::bitvec::BitArray;\n use rustc_data_structures::indexed_set::IdxSet;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;"}, {"sha": "9faaeea3f5b70038073c9e8ae8df3c6862f35310", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -15,7 +15,6 @@ use syntax_pos::Span;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::indexed_set::IdxSet;\n-use rustc_data_structures::indexed_vec::Idx;\n use transform::{MirPass, MirSource};\n \n use dataflow::{do_dataflow, DebugFormatted};"}, {"sha": "0b883f68bff40f464062acff65b5af2b17026917", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=5aee959e9f7525e95c1f7231cc6dacc0f66a7f6a", "patch": "@@ -15,8 +15,6 @@ use rustc::ty::TyCtxt;\n use std::fmt::Debug;\n use std::io::{self, Write};\n \n-use rustc_data_structures::indexed_vec::Idx;\n-\n use super::pretty::dump_mir_def_ids;\n \n /// Write a graphviz DOT graph of a list of MIRs."}]}