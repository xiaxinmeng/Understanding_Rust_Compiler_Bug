{"sha": "3980342f3164a62ba7036711c16cc8af20d06418", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ODAzNDJmMzE2NGE2MmJhNzAzNjcxMWMxNmNjOGFmMjBkMDY0MTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-04T06:19:18Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-12T01:42:28Z"}, "message": "Use structured suggestion for disambiguating method calls\n\nFix #65635.", "tree": {"sha": "0b19205d68453d528709e30127eb3ccff3adec6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b19205d68453d528709e30127eb3ccff3adec6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3980342f3164a62ba7036711c16cc8af20d06418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3980342f3164a62ba7036711c16cc8af20d06418", "html_url": "https://github.com/rust-lang/rust/commit/3980342f3164a62ba7036711c16cc8af20d06418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3980342f3164a62ba7036711c16cc8af20d06418/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c", "html_url": "https://github.com/rust-lang/rust/commit/7dbfb0a8ca4ab74ee3111e57a024f9e6257ce37c"}], "stats": {"total": 322, "additions": 248, "deletions": 74}, "files": [{"sha": "15bbfa7860fa77b0285bf48bffadc0d97d1f46ce", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -212,6 +212,17 @@ pub enum AssocKind {\n     Type\n }\n \n+impl AssocKind {\n+    pub fn suggestion_descr(&self) -> &'static str {\n+        match self {\n+            ty::AssocKind::Method => \"method call\",\n+            ty::AssocKind::Type |\n+            ty::AssocKind::OpaqueTy => \"associated type\",\n+            ty::AssocKind::Const => \"associated constant\",\n+        }\n+    }\n+}\n+\n impl AssocItem {\n     pub fn def_kind(&self) -> DefKind {\n         match self.kind {"}, {"sha": "b11a8a7ab53366c29b915bcf28ca0646c8ef24cf", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -1422,8 +1422,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: ast::Ident,\n     ) -> Ty<'tcx> {\n         let expr_t = self.check_expr_with_needs(base, needs);\n-        let expr_t = self.structurally_resolved_type(base.span,\n-                                                     expr_t);\n+        let expr_t = self.structurally_resolved_type(base.span, expr_t);\n         let mut private_candidate = None;\n         let mut autoderef = self.autoderef(expr.span, expr_t);\n         while let Some((base_t, _)) = autoderef.next() {"}, {"sha": "cd26e6f237c7d76aeb413c8a411265afba5d2a99", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 92, "deletions": 35, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -82,34 +82,63 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let print_disambiguation_help = |\n             err: &mut DiagnosticBuilder<'_>,\n             trait_name: String,\n+            rcvr_ty: Ty<'_>,\n+            kind: ty::AssocKind,\n+            span: Span,\n+            candidate: Option<usize>,\n         | {\n-            err.help(&format!(\n-                \"to disambiguate the method call, write `{}::{}({}{})` instead\",\n-                trait_name,\n-                item_name,\n-                if rcvr_ty.is_region_ptr() && args.is_some() {\n-                    if rcvr_ty.is_mutable_ptr() {\n-                        \"&mut \"\n+            let mut applicability = Applicability::MachineApplicable;\n+            let sugg_args = if let ty::AssocKind::Method = kind {\n+                format!(\n+                    \"({}{})\",\n+                    if rcvr_ty.is_region_ptr() && args.is_some() {\n+                        if rcvr_ty.is_mutable_ptr() {\n+                            \"&mut \"\n+                        } else {\n+                            \"&\"\n+                        }\n                     } else {\n-                        \"&\"\n-                    }\n-                } else {\n-                    \"\"\n-                },\n-                args.map(|arg| arg\n-                    .iter()\n-                    .map(|arg| self.tcx.sess.source_map().span_to_snippet(arg.span)\n-                        .unwrap_or_else(|_| \"...\".to_owned()))\n-                    .collect::<Vec<_>>()\n-                    .join(\", \")\n-                ).unwrap_or_else(|| \"...\".to_owned())\n-            ));\n+                        \"\"\n+                    },\n+                    args.map(|arg| arg\n+                        .iter()\n+                        .map(|arg| self.tcx.sess.source_map().span_to_snippet(arg.span)\n+                            .unwrap_or_else(|_| {\n+                                applicability = Applicability::HasPlaceholders;\n+                                \"...\".to_owned()\n+                            }))\n+                        .collect::<Vec<_>>()\n+                        .join(\", \")\n+                    ).unwrap_or_else(|| {\n+                        applicability = Applicability::HasPlaceholders;\n+                        \"...\".to_owned()\n+                    }),\n+                )\n+            } else {\n+                String::new()\n+            };\n+            let sugg = format!(\"{}::{}{}\", trait_name, item_name, sugg_args);\n+            err.span_suggestion(\n+                span,\n+                &format!(\n+                    \"disambiguate the {} for {}\",\n+                    kind.suggestion_descr(),\n+                    if let Some(candidate) = candidate {\n+                        format!(\"candidate #{}\", candidate)\n+                    } else {\n+                        \"the candidate\".to_string()\n+                    },\n+                ),\n+                sugg,\n+                applicability,\n+            );\n         };\n \n         let report_candidates = |\n             span: Span,\n             err: &mut DiagnosticBuilder<'_>,\n             mut sources: Vec<CandidateSource>,\n+            sugg_span: Span,\n         | {\n             sources.sort();\n             sources.dedup();\n@@ -150,15 +179,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         };\n \n-                        let note_str = if sources.len() > 1 {\n-                            format!(\"candidate #{} is defined in an impl{} for the type `{}`\",\n-                                    idx + 1,\n-                                    insertion,\n-                                    impl_ty)\n+                        let (note_str, idx) = if sources.len() > 1 {\n+                            (format!(\n+                                \"candidate #{} is defined in an impl{} for the type `{}`\",\n+                                idx + 1,\n+                                insertion,\n+                                impl_ty,\n+                            ), Some(idx + 1))\n                         } else {\n-                            format!(\"the candidate is defined in an impl{} for the type `{}`\",\n-                                    insertion,\n-                                    impl_ty)\n+                            (format!(\n+                                \"the candidate is defined in an impl{} for the type `{}`\",\n+                                insertion,\n+                                impl_ty,\n+                            ), None)\n                         };\n                         if let Some(note_span) = note_span {\n                             // We have a span pointing to the method. Show note with snippet.\n@@ -168,7 +201,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.note(&note_str);\n                         }\n                         if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n-                            print_disambiguation_help(err, self.tcx.def_path_str(trait_ref.def_id));\n+                            let path = self.tcx.def_path_str(trait_ref.def_id);\n+\n+                            let ty = match item.kind {\n+                                ty::AssocKind::Const |\n+                                ty::AssocKind::Type |\n+                                ty::AssocKind::OpaqueTy => rcvr_ty,\n+                                ty::AssocKind::Method => self.tcx.fn_sig(item.def_id)\n+                                    .inputs()\n+                                    .skip_binder()\n+                                    .get(0)\n+                                    .filter(|ty| ty.is_region_ptr() && !rcvr_ty.is_region_ptr())\n+                                    .map(|ty| *ty)\n+                                    .unwrap_or(rcvr_ty),\n+                            };\n+                            print_disambiguation_help(err, path, ty, item.kind, sugg_span, idx);\n                         }\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n@@ -182,19 +229,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         };\n                         let item_span = self.tcx.sess.source_map()\n                             .def_span(self.tcx.def_span(item.def_id));\n-                        if sources.len() > 1 {\n+                        let idx = if sources.len() > 1 {\n                             span_note!(err,\n                                        item_span,\n                                        \"candidate #{} is defined in the trait `{}`\",\n                                        idx + 1,\n                                        self.tcx.def_path_str(trait_did));\n+                            Some(idx + 1)\n                         } else {\n                             span_note!(err,\n                                        item_span,\n                                        \"the candidate is defined in the trait `{}`\",\n                                        self.tcx.def_path_str(trait_did));\n-                        }\n-                        print_disambiguation_help(err, self.tcx.def_path_str(trait_did));\n+                            None\n+                        };\n+                        let path = self.tcx.def_path_str(trait_did);\n+                        print_disambiguation_help(err, path, rcvr_ty, item.kind, sugg_span, idx);\n                     }\n                 }\n             }\n@@ -203,6 +253,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n+        let sugg_span = if let SelfSource::MethodCall(expr) = source {\n+            // Given `foo.bar(baz)`, `expr` is `bar`, but we want to point to the whole thing.\n+            self.tcx.hir().expect_expr(self.tcx.hir().get_parent_node(expr.hir_id)).span\n+        } else {\n+            span\n+        };\n+\n         match error {\n             MethodError::NoMatch(NoMatchData {\n                 static_candidates: static_sources,\n@@ -495,9 +552,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ));\n                     }\n \n-                    report_candidates(span, &mut err, static_sources);\n+                    report_candidates(span, &mut err, static_sources, sugg_span);\n                 } else if static_sources.len() > 1 {\n-                    report_candidates(span, &mut err, static_sources);\n+                    report_candidates(span, &mut err, static_sources, sugg_span);\n                 }\n \n                 if !unsatisfied_predicates.is_empty() {\n@@ -584,7 +641,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                \"multiple applicable items in scope\");\n                 err.span_label(span, format!(\"multiple `{}` found\", item_name));\n \n-                report_candidates(span, &mut err, sources);\n+                report_candidates(span, &mut err, sources, sugg_span);\n                 err.emit();\n             }\n "}, {"sha": "92a8d19021a2c2610564b027dba837792301a229", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`\n    |\n LL |     const ID: i32 = 1;\n    |     ^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `Foo::ID(...)` instead\n note: candidate #2 is defined in an impl of the trait `Bar` for the type `i32`\n   --> $DIR/associated-const-ambiguity-report.rs:14:5\n    |\n LL |     const ID: i32 = 3;\n    |     ^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `Bar::ID(...)` instead\n+help: disambiguate the associated constant for candidate #1\n+   |\n+LL | const X: i32 = Foo::ID;\n+   |                ^^^^^^^\n+help: disambiguate the associated constant for candidate #2\n+   |\n+LL | const X: i32 = Bar::ID;\n+   |                ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "30b44fd402bb85b9d1ee0abdbb15b9b2d666262f", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `Trait1` for the type `Tes\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n-   = help: to disambiguate the method call, write `Trait1::foo(...)` instead\n note: candidate #2 is defined in an impl of the trait `Trait2` for the type `Test`\n   --> $DIR/E0034.rs:16:5\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n-   = help: to disambiguate the method call, write `Trait2::foo(...)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     Trait1::foo(...)()\n+   |     ^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     Trait2::foo(...)()\n+   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fa908440e41ea6833779f21525f09ae516c0e9fd", "filename": "src/test/ui/inference/inference_unstable_featured.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -5,9 +5,15 @@ LL |     assert_eq!('x'.ipu_flatten(), 0);\n    |                    ^^^^^^^^^^^ multiple `ipu_flatten` found\n    |\n    = note: candidate #1 is defined in an impl of the trait `inference_unstable_iterator::IpuIterator` for the type `char`\n-   = help: to disambiguate the method call, write `inference_unstable_iterator::IpuIterator::ipu_flatten('x')` instead\n    = note: candidate #2 is defined in an impl of the trait `inference_unstable_itertools::IpuItertools` for the type `char`\n-   = help: to disambiguate the method call, write `inference_unstable_itertools::IpuItertools::ipu_flatten('x')` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     assert_eq!(inference_unstable_iterator::IpuIterator::ipu_flatten(&'x'), 0);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     assert_eq!(inference_unstable_itertools::IpuItertools::ipu_flatten(&'x'), 0);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3422add9dd96b701bbae7fee4052f38b96500f89", "filename": "src/test/ui/issues/issue-18446.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -2,7 +2,10 @@ error[E0034]: multiple applicable items in scope\n   --> $DIR/issue-18446.rs:18:7\n    |\n LL |     x.foo();\n-   |       ^^^ multiple `foo` found\n+   |     --^^^--\n+   |     | |\n+   |     | multiple `foo` found\n+   |     help: disambiguate the method call for candidate #2: `T::foo(&x)`\n    |\n note: candidate #1 is defined in an impl for the type `dyn T`\n   --> $DIR/issue-18446.rs:9:5\n@@ -14,7 +17,6 @@ note: candidate #2 is defined in the trait `T`\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `T::foo(&x)` instead\n \n error: aborting due to previous error\n "}, {"sha": "b18e407c3d464d9f3b03bf8533becd860cee5154", "filename": "src/test/ui/issues/issue-3702-2.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `ToPrimitive` for the type\n    |\n LL |     fn to_int(&self) -> isize { 0 }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `ToPrimitive::to_int(&self)` instead\n note: candidate #2 is defined in an impl of the trait `Add` for the type `isize`\n   --> $DIR/issue-3702-2.rs:14:5\n    |\n LL |     fn to_int(&self) -> isize { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `Add::to_int(&self)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |         ToPrimitive::to_int(&self) + other.to_int()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |         Add::to_int(&self) + other.to_int()\n+   |         ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "feaf3dc753ffbaf89dbb00fe0c159066d12f7402", "filename": "src/test/ui/issues/issue-65634-raw-ident-suggestion.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `async` for the type `r#fn\n    |\n LL |     fn r#struct(&self) {\n    |     ^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `async::r#struct(r#fn {})` instead\n note: candidate #2 is defined in an impl of the trait `await` for the type `r#fn`\n   --> $DIR/issue-65634-raw-ident-suggestion.rs:10:5\n    |\n LL |     fn r#struct(&self) {\n    |     ^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `await::r#struct(r#fn {})` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     async::r#struct(&r#fn {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     await::r#struct(&r#fn {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fa3add81a28f5af1b5db7e4d5981fb50da301cca", "filename": "src/test/ui/methods/method-ambig-two-traits-cross-crate.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,9 +9,15 @@ note: candidate #1 is defined in an impl of the trait `Me2` for the type `usize`\n    |\n LL | impl Me2 for usize { fn me(&self) -> usize { *self } }\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `Me2::me(1_usize)` instead\n    = note: candidate #2 is defined in an impl of the trait `ambig_impl_2_lib::Me` for the type `usize`\n-   = help: to disambiguate the method call, write `ambig_impl_2_lib::Me::me(1_usize)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL | fn main() { Me2::me(&1_usize); }\n+   |             ^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL | fn main() { ambig_impl_2_lib::Me::me(&1_usize); }\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b6c81c2377ee44ddc634943690d08d12dff3bea4", "filename": "src/test/ui/methods/method-ambig-two-traits-from-bounds.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in the trait `A`\n    |\n LL | trait A { fn foo(&self); }\n    |           ^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `A::foo(t)` instead\n note: candidate #2 is defined in the trait `B`\n   --> $DIR/method-ambig-two-traits-from-bounds.rs:2:11\n    |\n LL | trait B { fn foo(&self); }\n    |           ^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `B::foo(t)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     A::foo(t);\n+   |     ^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     B::foo(t);\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "71c65f7ccc68d3229fd3187cffc790d6b0d3bdbe", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `A::foo(AB {})` instead\n note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n   --> $DIR/method-ambig-two-traits-from-impls.rs:11:5\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `B::foo(AB {})` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     A::foo(AB {});\n+   |     ^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     B::foo(AB {});\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "55499215799d7ff67e3060a1968b602080b4a54d", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n-   = help: to disambiguate the method call, write `A::foo(...)` instead\n note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n   --> $DIR/method-ambig-two-traits-from-impls2.rs:11:5\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n-   = help: to disambiguate the method call, write `B::foo(...)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     A::foo(...)();\n+   |     ^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     B::foo(...)();\n+   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3dbb17371004a9706fa9b7b0e96ecade7aeddef4", "filename": "src/test/ui/methods/method-ambig-two-traits-with-default-method.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `Foo` for the type `usize`\n    |\n LL | trait Foo { fn method(&self) {} }\n    |             ^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `Foo::method(1_usize)` instead\n note: candidate #2 is defined in an impl of the trait `Bar` for the type `usize`\n   --> $DIR/method-ambig-two-traits-with-default-method.rs:6:13\n    |\n LL | trait Bar { fn method(&self) {} }\n    |             ^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `Bar::method(1_usize)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     Foo::method(&1_usize);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     Bar::method(&1_usize);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e7f295df8c482642c7ea78a1fb71e0ee975ad094", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -25,19 +25,28 @@ note: candidate #1 is defined in an impl of the trait `internal::X` for the type\n    |\n LL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `internal::X::foo(x)` instead\n note: candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `_`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:70:9\n    |\n LL |         fn foo(self) {}\n    |         ^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `nuisance_foo::NuisanceFoo::foo(x)` instead\n note: candidate #3 is defined in the trait `FinalFoo`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:57:5\n    |\n LL |     fn foo(&self) -> u8;\n    |     ^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `FinalFoo::foo(x)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     let z = internal::X::foo(x);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     let z = nuisance_foo::NuisanceFoo::foo(x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #3\n+   |\n+LL |     let z = FinalFoo::foo(x);\n+   |             ^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:137:24"}, {"sha": "9ed6c8b826f79f04b2e59f40ace4832c7846ad91", "filename": "src/test/ui/span/issue-37767.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in the trait `A`\n    |\n LL |     fn foo(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `A::foo(&a)` instead\n note: candidate #2 is defined in the trait `B`\n   --> $DIR/issue-37767.rs:6:5\n    |\n LL |     fn foo(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `B::foo(&a)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     A::foo(&a)\n+   |     ^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     B::foo(&a)\n+   |     ^^^^^^^^^^\n \n error[E0034]: multiple applicable items in scope\n   --> $DIR/issue-37767.rs:22:7\n@@ -28,13 +34,19 @@ note: candidate #1 is defined in the trait `C`\n    |\n LL |     fn foo(&self) {}\n    |     ^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `C::foo(&a)` instead\n note: candidate #2 is defined in the trait `D`\n   --> $DIR/issue-37767.rs:18:5\n    |\n LL |     fn foo(&self) {}\n    |     ^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `D::foo(&a)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     C::foo(&a)\n+   |     ^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     D::foo(&a)\n+   |     ^^^^^^^^^^\n \n error[E0034]: multiple applicable items in scope\n   --> $DIR/issue-37767.rs:34:7\n@@ -47,13 +59,19 @@ note: candidate #1 is defined in the trait `E`\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `E::foo(a)` instead\n note: candidate #2 is defined in the trait `F`\n   --> $DIR/issue-37767.rs:30:5\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `F::foo(a)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     E::foo(a)\n+   |     ^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     F::foo(a)\n+   |     ^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "53a6238422b571217f1b1a854f438540d0e6b031", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -10,24 +10,33 @@ note: candidate #1 is defined in the trait `CtxtFn`\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `CtxtFn::f9(u, 342)` instead\n note: candidate #2 is defined in the trait `OtherTrait`\n   --> $DIR/issue-7575.rs:8:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `OtherTrait::f9(u, 342)` instead\n note: candidate #3 is defined in the trait `UnusedTrait`\n   --> $DIR/issue-7575.rs:17:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `UnusedTrait::f9(u, 342)` instead\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following traits define an item `f9`, perhaps you need to implement one of them:\n            candidate #1: `CtxtFn`\n            candidate #2: `OtherTrait`\n            candidate #3: `UnusedTrait`\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     u.f8(42) + CtxtFn::f9(u, 342) + m.fff(42)\n+   |                ^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     u.f8(42) + OtherTrait::f9(u, 342) + m.fff(42)\n+   |                ^^^^^^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #3\n+   |\n+LL |     u.f8(42) + UnusedTrait::f9(u, 342) + m.fff(42)\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `fff` found for type `Myisize` in the current scope\n   --> $DIR/issue-7575.rs:62:30\n@@ -60,8 +69,11 @@ note: the candidate is defined in the trait `ManyImplTrait`\n    |\n LL |     fn is_str() -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `ManyImplTrait::is_str(t)` instead\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: disambiguate the method call for the candidate\n+   |\n+LL |     ManyImplTrait::is_str(t)\n+   |\n help: the following trait defines an item `is_str`, perhaps you need to restrict type parameter `T` with it:\n    |\n LL | fn param_bound<T: ManyImplTrait + ManyImplTrait>(t: T) -> bool {"}, {"sha": "48a029104aeca8842485eef2035c67c3a644ac86", "filename": "src/test/ui/traits/trait-alias-ambiguous.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3980342f3164a62ba7036711c16cc8af20d06418/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr?ref=3980342f3164a62ba7036711c16cc8af20d06418", "patch": "@@ -9,13 +9,19 @@ note: candidate #1 is defined in an impl of the trait `inner::A` for the type `u\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `inner::A::foo(t)` instead\n note: candidate #2 is defined in an impl of the trait `inner::B` for the type `u8`\n   --> $DIR/trait-alias-ambiguous.rs:11:9\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^\n-   = help: to disambiguate the method call, write `inner::B::foo(t)` instead\n+help: disambiguate the method call for candidate #1\n+   |\n+LL |     inner::A::foo(&t);\n+   |     ^^^^^^^^^^^^^^^^^\n+help: disambiguate the method call for candidate #2\n+   |\n+LL |     inner::B::foo(&t);\n+   |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}