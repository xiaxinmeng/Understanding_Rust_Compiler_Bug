{"sha": "b6b6bc0a61e847f38ad5e8bd136b5473601f366d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YjZiYzBhNjFlODQ3ZjM4YWQ1ZThiZDEzNmI1NDczNjAxZjM2NmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-10T18:19:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-10T18:19:10Z"}, "message": "Rollup merge of #77738 - RalfJung:alloc-error-handler-comment, r=Amanieu\n\nfix __rust_alloc_error_handler comment\n\n`__rust_alloc_error_handler` was added in the same `extern` block as the allocator functions, but the comment there was not actually correct for `__rust_alloc_error_handler`. So move it down to the rest of the default allocator handling with a fixed comment. At least the comment reflects my understanding of what happens, please check carefully. :)\n\nr? @Amanieu Cc @haraldh", "tree": {"sha": "8cb771a5e2172f13ec35eee5a61de48cfe382b40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb771a5e2172f13ec35eee5a61de48cfe382b40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6b6bc0a61e847f38ad5e8bd136b5473601f366d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfgfsfCRBK7hj4Ov3rIwAAdHIIAF0IWDfS7f5JlAHKiUfwW4MP\nB7o6WKe/eOKeZY3EuGw85fLrOJvRhTVFAb4Jog/dDFXGU+UDP41W7wxVMBYtBRZ8\n7MxHf2TZrjWIDSJOPVcnDbdJz17VjLtSP/4+lIIVGy9ouovRvOFWgbxVIOwa2R18\nuWmy7Igz3Gs5HhLoTfrFBGTTmBaDVUaYIN6n04M3E9wGw8/ret1+tMvMBEVZyiZW\nYGjvkqPWKz5FepOo/5AIKk378g4Qy+1PEUKZ4dh7yMYJAVMU+v7aM71HEPDnLW1A\nfPnmqJB2tYztGh3WBnReM5jBeDozsUbhSD9U4znI2rznAgOkVvXzZsyNenJmgQs=\n=ep2Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 8cb771a5e2172f13ec35eee5a61de48cfe382b40\nparent 45e35745d37b53bf983baee408fae04c726fb532\nparent b6bedc80c9922833d92e81c6bf91eb5b24e11c86\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602353950 +0900\ncommitter GitHub <noreply@github.com> 1602353950 +0900\n\nRollup merge of #77738 - RalfJung:alloc-error-handler-comment, r=Amanieu\n\nfix __rust_alloc_error_handler comment\n\n`__rust_alloc_error_handler` was added in the same `extern` block as the allocator functions, but the comment there was not actually correct for `__rust_alloc_error_handler`. So move it down to the rest of the default allocator handling with a fixed comment. At least the comment reflects my understanding of what happens, please check carefully. :)\n\nr? @Amanieu Cc @haraldh\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b6bc0a61e847f38ad5e8bd136b5473601f366d", "html_url": "https://github.com/rust-lang/rust/commit/b6b6bc0a61e847f38ad5e8bd136b5473601f366d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6b6bc0a61e847f38ad5e8bd136b5473601f366d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e35745d37b53bf983baee408fae04c726fb532", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e35745d37b53bf983baee408fae04c726fb532", "html_url": "https://github.com/rust-lang/rust/commit/45e35745d37b53bf983baee408fae04c726fb532"}, {"sha": "b6bedc80c9922833d92e81c6bf91eb5b24e11c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6bedc80c9922833d92e81c6bf91eb5b24e11c86", "html_url": "https://github.com/rust-lang/rust/commit/b6bedc80c9922833d92e81c6bf91eb5b24e11c86"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "4646d4a833525e9e4c01979a85fe6133503fa4c5", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b6b6bc0a61e847f38ad5e8bd136b5473601f366d/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b6bc0a61e847f38ad5e8bd136b5473601f366d/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=b6b6bc0a61e847f38ad5e8bd136b5473601f366d", "patch": "@@ -14,8 +14,9 @@ mod tests;\n \n extern \"Rust\" {\n     // These are the magic symbols to call the global allocator.  rustc generates\n-    // them from the `#[global_allocator]` attribute if there is one, or uses the\n-    // default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n+    // them to call `__rg_alloc` etc if there is a `#[global_allocator]` attribute\n+    // (the code expanding that attribute macro generates those functions), or to call\n+    // the default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n     // otherwise.\n     #[rustc_allocator]\n     #[rustc_allocator_nounwind]\n@@ -26,8 +27,6 @@ extern \"Rust\" {\n     fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -> *mut u8;\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n-    #[rustc_allocator_nounwind]\n-    fn __rust_alloc_error_handler(size: usize, align: usize) -> !;\n }\n \n /// The global memory allocator.\n@@ -323,6 +322,16 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n     }\n }\n \n+// # Allocation error handler\n+\n+extern \"Rust\" {\n+    // This is the magic symbol to call the global alloc error handler.  rustc generates\n+    // it to call `__rg_oom` if there is a `#[alloc_error_handler]`, or to call the\n+    // default implementations below (`__rdl_oom`) otherwise.\n+    #[rustc_allocator_nounwind]\n+    fn __rust_alloc_error_handler(size: usize, align: usize) -> !;\n+}\n+\n /// Abort on memory allocation error or failure.\n ///\n /// Callers of memory allocation APIs wishing to abort computation\n@@ -367,7 +376,7 @@ pub fn handle_alloc_error(layout: Layout) -> ! {\n #[doc(hidden)]\n #[allow(unused_attributes)]\n #[unstable(feature = \"alloc_internals\", issue = \"none\")]\n-pub mod __default_lib_allocator {\n+pub mod __alloc_error_handler {\n     use crate::alloc::Layout;\n \n     // called via generated `__rust_alloc_error_handler`"}]}