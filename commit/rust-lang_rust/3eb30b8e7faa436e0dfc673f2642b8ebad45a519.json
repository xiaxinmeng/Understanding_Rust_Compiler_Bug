{"sha": "3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "node_id": "C_kwDOAAsO6NoAKDNlYjMwYjhlN2ZhYTQzNmUwZGZjNjczZjI2NDJiOGViYWQ0NWE1MTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-21T08:55:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-21T08:55:15Z"}, "message": "Rollup merge of #91097 - compiler-errors:spaces_in_impl_trait, r=estebank\n\nAdd spaces in opaque `impl Trait` with more than one trait\n\n`impl A+B` becomes `impl A + B`\n\nr? `@estebank`", "tree": {"sha": "9aab98546a6b7371c990fcca538d0b54e60ab1b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aab98546a6b7371c990fcca538d0b54e60ab1b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmglzCRBK7hj4Ov3rIwAAPCUIAHeuW+5jP31XV7X4M3Tl4brF\nYgMRMHfpNJck4IOI4NhECTeyPcgiKVpvqrmiVvNWWUJBp0QHF1d7ZCLrgfEi+Bw8\nRr6nvZ/9Z6fjN5mC8Ku8HZi9jzbPd1UTYrmTx5EFbT4sjtbZOhDbxLkiOONibpPe\n4Qysi3OwBtAUR9HpjZotHTOfLdkf4Kqe6FT+pxHQsxRpc250qXPH79SZEy4dCA/A\nDpyg/bfqfVlh3vsEvzJ8HXWGL3SvsxPoX58o78u4fl6zHLYUavbMi/BskVSoowth\nTjWVf1fNuGaEWnjXKfIyjhBXvprzJh65NH8M1wfeKotLLnY/ElqlAHdbOvNNPwQ=\n=iSZn\n-----END PGP SIGNATURE-----\n", "payload": "tree 9aab98546a6b7371c990fcca538d0b54e60ab1b9\nparent df552b3c24ac364802aaea6e77025110c074ddc7\nparent d99b132586435e62423e00f2e0c0eed9106f0ca8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637484915 +0100\ncommitter GitHub <noreply@github.com> 1637484915 +0100\n\nRollup merge of #91097 - compiler-errors:spaces_in_impl_trait, r=estebank\n\nAdd spaces in opaque `impl Trait` with more than one trait\n\n`impl A+B` becomes `impl A + B`\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "html_url": "https://github.com/rust-lang/rust/commit/3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df552b3c24ac364802aaea6e77025110c074ddc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df552b3c24ac364802aaea6e77025110c074ddc7", "html_url": "https://github.com/rust-lang/rust/commit/df552b3c24ac364802aaea6e77025110c074ddc7"}, {"sha": "d99b132586435e62423e00f2e0c0eed9106f0ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99b132586435e62423e00f2e0c0eed9106f0ca8", "html_url": "https://github.com/rust-lang/rust/commit/d99b132586435e62423e00f2e0c0eed9106f0ca8"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "3846cf19d915b339eaa7fb729950fccbb432f62f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "patch": "@@ -688,7 +688,7 @@ pub trait PrettyPrinter<'tcx>:\n                                 }\n \n                                 p!(\n-                                    write(\"{}\", if first { \" \" } else { \"+\" }),\n+                                    write(\"{}\", if first { \" \" } else { \" + \" }),\n                                     print(trait_ref.print_only_trait_path())\n                                 );\n \n@@ -699,7 +699,7 @@ pub trait PrettyPrinter<'tcx>:\n                     }\n \n                     if is_future {\n-                        p!(write(\"{}Future\", if first { \" \" } else { \"+\" }));\n+                        p!(write(\"{}Future\", if first { \" \" } else { \" + \" }));\n                         first = false;\n \n                         if let Some(future_output_ty) = future_output_ty {\n@@ -712,7 +712,7 @@ pub trait PrettyPrinter<'tcx>:\n                     }\n \n                     if !is_sized {\n-                        p!(write(\"{}?Sized\", if first { \" \" } else { \"+\" }));\n+                        p!(write(\"{}?Sized\", if first { \" \" } else { \" + \" }));\n                     } else if first {\n                         p!(\" Sized\");\n                     }"}, {"sha": "384561f8ccd7e0496ef3c867ff4e015f8955a958", "filename": "src/test/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "patch": "@@ -83,17 +83,17 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n-    //~^ ERROR type mismatch resolving `<impl Trait+Foo as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived_foo());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait+Foo as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_duplicate());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n }"}, {"sha": "8db4a49da3c96e4f7790d038e62ac3ad0062a3d4", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "patch": "@@ -160,7 +160,7 @@ help: consider constraining the associated type `<impl DerivedTrait as Trait>::A\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n    |                                                 +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl Trait+Foo as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:85:5\n    |\n LL | fn returns_opaque_foo() -> impl Trait + Foo {\n@@ -170,18 +170,18 @@ LL |     accepts_trait(returns_opaque_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Trait+Foo as Trait>::Associated`\n+           found associated type `<impl Trait + Foo as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl Trait+Foo as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl Trait + Foo as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n    |                                      +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait+Foo as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:88:5\n    |\n LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n@@ -191,8 +191,8 @@ LL |     accepts_trait(returns_opaque_derived_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl DerivedTrait+Foo as Trait>::Associated`\n-   = help: consider constraining the associated type `<impl DerivedTrait+Foo as Trait>::Associated` to `()`\n+           found associated type `<impl DerivedTrait + Foo as Trait>::Associated`\n+   = help: consider constraining the associated type `<impl DerivedTrait + Foo as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n@@ -221,7 +221,7 @@ help: consider constraining the associated type `<impl GenericTrait<()> as Gener\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n    |                                                    +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:94:5\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n@@ -231,18 +231,18 @@ LL |     accepts_generic_trait(returns_opaque_generic_foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated`\n+           found associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n-help: consider constraining the associated type `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated` to `()`\n+help: consider constraining the associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> + Foo {\n    |                                                        +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:97:5\n    |\n LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n@@ -252,8 +252,8 @@ LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated`\n-   = help: consider constraining the associated type `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated` to `()`\n+           found associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated`\n+   = help: consider constraining the associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46"}, {"sha": "f9abfb5225f91c3f5b1fd693f14c6cb245887fed", "filename": "src/test/ui/cast/casts-differing-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb30b8e7faa436e0dfc673f2642b8ebad45a519/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcasts-differing-anon.stderr?ref=3eb30b8e7faa436e0dfc673f2642b8ebad45a519", "patch": "@@ -1,4 +1,4 @@\n-error[E0606]: casting `*mut impl Debug+?Sized` as `*mut impl Debug+?Sized` is invalid\n+error[E0606]: casting `*mut impl Debug + ?Sized` as `*mut impl Debug + ?Sized` is invalid\n   --> $DIR/casts-differing-anon.rs:21:13\n    |\n LL |     b_raw = f_raw as *mut _;"}]}