{"sha": "7c11a53f9ccb4040995b9e054b093a47fef29cc1", "node_id": "C_kwDOAAsO6NoAKDdjMTFhNTNmOWNjYjQwNDA5OTViOWUwNTRiMDkzYTQ3ZmVmMjljYzE", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-25T09:11:47Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-25T09:13:45Z"}, "message": "fix #104867, Properly handle postfix inc/dec in standalone and subexpr scenarios", "tree": {"sha": "67c683a12e99f16e17bc221ffa87e01edd1c3d59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c683a12e99f16e17bc221ffa87e01edd1c3d59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c11a53f9ccb4040995b9e054b093a47fef29cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c11a53f9ccb4040995b9e054b093a47fef29cc1", "html_url": "https://github.com/rust-lang/rust/commit/7c11a53f9ccb4040995b9e054b093a47fef29cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c11a53f9ccb4040995b9e054b093a47fef29cc1/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dda298ad39a64e019a3511139c5b13ac0a18e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dda298ad39a64e019a3511139c5b13ac0a18e54", "html_url": "https://github.com/rust-lang/rust/commit/1dda298ad39a64e019a3511139c5b13ac0a18e54"}], "stats": {"total": 252, "additions": 188, "deletions": 64}, "files": [{"sha": "eba0f22f37f34bac9b6447fbda90faab00efba66", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 41, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7c11a53f9ccb4040995b9e054b093a47fef29cc1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c11a53f9ccb4040995b9e054b093a47fef29cc1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7c11a53f9ccb4040995b9e054b093a47fef29cc1", "patch": "@@ -159,8 +159,6 @@ enum IsStandalone {\n     Standalone,\n     /// It's a subexpression, i.e., *not* standalone.\n     Subexpr,\n-    /// It's maybe standalone; we're not sure.\n-    Maybe,\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n@@ -213,14 +211,8 @@ impl MultiSugg {\n         err.multipart_suggestion(&self.msg, self.patches, self.applicability);\n     }\n \n-    /// Overrides individual messages and applicabilities.\n-    fn emit_many(\n-        err: &mut Diagnostic,\n-        msg: &str,\n-        applicability: Applicability,\n-        suggestions: impl Iterator<Item = Self>,\n-    ) {\n-        err.multipart_suggestions(msg, suggestions.map(|s| s.patches), applicability);\n+    fn emit_verbose(self, err: &mut Diagnostic) {\n+        err.multipart_suggestion_verbose(&self.msg, self.patches, self.applicability);\n     }\n }\n \n@@ -1272,21 +1264,20 @@ impl<'a> Parser<'a> {\n         let standalone =\n             if prev_is_semi { IsStandalone::Standalone } else { IsStandalone::Subexpr };\n         let kind = IncDecRecovery { standalone, op: IncOrDec::Inc, fixity: UnaryFixity::Pre };\n-\n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n \n     pub(super) fn recover_from_postfix_increment(\n         &mut self,\n         operand_expr: P<Expr>,\n         op_span: Span,\n+        prev_is_semi: bool,\n     ) -> PResult<'a, P<Expr>> {\n         let kind = IncDecRecovery {\n-            standalone: IsStandalone::Maybe,\n+            standalone: if prev_is_semi { IsStandalone::Standalone } else { IsStandalone::Subexpr },\n             op: IncOrDec::Inc,\n             fixity: UnaryFixity::Post,\n         };\n-\n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n \n@@ -1314,35 +1305,20 @@ impl<'a> Parser<'a> {\n             UnaryFixity::Post => (base.span.shrink_to_lo(), op_span),\n         };\n \n+        let Ok(base_src) = self.span_to_snippet(base.span)\n+        else { return help_base_case(err, base) };\n         match kind.standalone {\n-            IsStandalone::Standalone => self.inc_dec_standalone_suggest(kind, spans).emit(&mut err),\n-            IsStandalone::Subexpr => {\n-                let Ok(base_src) = self.span_to_snippet(base.span)\n-                    else { return help_base_case(err, base) };\n-                match kind.fixity {\n-                    UnaryFixity::Pre => {\n-                        self.prefix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n-                    }\n-                    UnaryFixity::Post => {\n-                        self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n-                    }\n-                }\n-            }\n-            IsStandalone::Maybe => {\n-                let Ok(base_src) = self.span_to_snippet(base.span)\n-                    else { return help_base_case(err, base) };\n-                let sugg1 = match kind.fixity {\n-                    UnaryFixity::Pre => self.prefix_inc_dec_suggest(base_src, kind, spans),\n-                    UnaryFixity::Post => self.postfix_inc_dec_suggest(base_src, kind, spans),\n-                };\n-                let sugg2 = self.inc_dec_standalone_suggest(kind, spans);\n-                MultiSugg::emit_many(\n-                    &mut err,\n-                    \"use `+= 1` instead\",\n-                    Applicability::Unspecified,\n-                    [sugg1, sugg2].into_iter(),\n-                )\n+            IsStandalone::Standalone => {\n+                self.inc_dec_standalone_suggest(kind, spans).emit_verbose(&mut err)\n             }\n+            IsStandalone::Subexpr => match kind.fixity {\n+                UnaryFixity::Pre => {\n+                    self.prefix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                }\n+                UnaryFixity::Post => {\n+                    self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n+                }\n+            },\n         }\n         Err(err)\n     }\n@@ -1392,7 +1368,6 @@ impl<'a> Parser<'a> {\n         }\n \n         patches.push((post_span, format!(\" {}= 1\", kind.op.chr())));\n-\n         MultiSugg {\n             msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n             patches,"}, {"sha": "b98372d0f28c17507d945c7c6b37afa81e168186", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c11a53f9ccb4040995b9e054b093a47fef29cc1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c11a53f9ccb4040995b9e054b093a47fef29cc1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7c11a53f9ccb4040995b9e054b093a47fef29cc1", "patch": "@@ -292,7 +292,15 @@ impl<'a> Parser<'a> {\n                 let op_span = self.prev_token.span.to(self.token.span);\n                 // Eat the second `+`\n                 self.bump();\n-                lhs = self.recover_from_postfix_increment(lhs, op_span)?;\n+                let prev_is_semi = {\n+                    if let Ok(prev_code) = self.sess.source_map().span_to_prev_source(lhs.span) &&\n+                          prev_code.trim_end().ends_with(\";\") {\n+                            true\n+                    } else {\n+                        false\n+                    }\n+                };\n+                lhs = self.recover_from_postfix_increment(lhs, op_span, prev_is_semi)?;\n                 continue;\n             }\n "}, {"sha": "580ebaf5dbb13d1d87a19fdba2169490bf7a0ac7", "filename": "src/test/ui/parser/increment-notfixed.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.fixed?ref=7c11a53f9ccb4040995b9e054b093a47fef29cc1", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+struct Foo {\n+    bar: Bar,\n+}\n+\n+struct Bar {\n+    qux: i32,\n+}\n+\n+pub fn post_regular() {\n+    let mut i = 0;\n+    i += 1; //~ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", i);\n+}\n+\n+pub fn post_while() {\n+    let mut i = 0;\n+    while { let tmp = i; i += 1; tmp } < 5 {\n+        //~^ ERROR Rust has no postfix increment operator\n+        println!(\"{}\", i);\n+    }\n+}\n+\n+pub fn post_regular_tmp() {\n+    let mut tmp = 0;\n+    tmp += 1; //~ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", tmp);\n+}\n+\n+pub fn post_while_tmp() {\n+    let mut tmp = 0;\n+    while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n+        //~^ ERROR Rust has no postfix increment operator\n+        println!(\"{}\", tmp);\n+    }\n+}\n+\n+pub fn post_field() {\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n+    foo.bar.qux += 1;\n+    //~^ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+pub fn post_field_tmp() {\n+    struct S {\n+        tmp: i32\n+    }\n+    let mut s = S { tmp: 0 };\n+    s.tmp += 1;\n+    //~^ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", s.tmp);\n+}\n+\n+pub fn pre_field() {\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n+    foo.bar.qux += 1;\n+    //~^ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+fn main() {}"}, {"sha": "ebe5fa6ca1e768cbc316e73d7e12511d1a1aab43", "filename": "src/test/ui/parser/increment-notfixed.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs?ref=7c11a53f9ccb4040995b9e054b093a47fef29cc1", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n struct Foo {\n     bar: Bar,\n }\n@@ -35,7 +37,7 @@ pub fn post_while_tmp() {\n }\n \n pub fn post_field() {\n-    let foo = Foo { bar: Bar { qux: 0 } };\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n     foo.bar.qux++;\n     //~^ ERROR Rust has no postfix increment operator\n     println!(\"{}\", foo.bar.qux);\n@@ -45,14 +47,14 @@ pub fn post_field_tmp() {\n     struct S {\n         tmp: i32\n     }\n-    let s = S { tmp: 0 };\n+    let mut s = S { tmp: 0 };\n     s.tmp++;\n     //~^ ERROR Rust has no postfix increment operator\n     println!(\"{}\", s.tmp);\n }\n \n pub fn pre_field() {\n-    let foo = Foo { bar: Bar { qux: 0 } };\n+    let mut foo = Foo { bar: Bar { qux: 0 } };\n     ++foo.bar.qux;\n     //~^ ERROR Rust has no prefix increment operator\n     println!(\"{}\", foo.bar.qux);"}, {"sha": "ffee8b64637c9ed00ac799aca100f4a3fa4f267b", "filename": "src/test/ui/parser/increment-notfixed.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr?ref=7c11a53f9ccb4040995b9e054b093a47fef29cc1", "patch": "@@ -1,18 +1,16 @@\n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:11:6\n+  --> $DIR/increment-notfixed.rs:13:6\n    |\n LL |     i++;\n    |      ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp = i; i += 1; tmp };\n-   |     +++++++++++  ~~~~~~~~~~~~~~~\n LL |     i += 1;\n    |       ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:17:12\n+  --> $DIR/increment-notfixed.rs:19:12\n    |\n LL |     while i++ < 5 {\n    |     -----  ^^ not a valid postfix operator\n@@ -23,24 +21,20 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp = i; i += 1; tmp } < 5 {\n    |           +++++++++++  ~~~~~~~~~~~~~~~\n-LL |     while i += 1 < 5 {\n-   |             ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:25:8\n+  --> $DIR/increment-notfixed.rs:27:8\n    |\n LL |     tmp++;\n    |        ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp_ = tmp; tmp += 1; tmp_ };\n-   |     ++++++++++++    ~~~~~~~~~~~~~~~~~~\n LL |     tmp += 1;\n    |         ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:31:14\n+  --> $DIR/increment-notfixed.rs:33:14\n    |\n LL |     while tmp++ < 5 {\n    |     -----    ^^ not a valid postfix operator\n@@ -51,37 +45,31 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n    |           ++++++++++++    ~~~~~~~~~~~~~~~~~~\n-LL |     while tmp += 1 < 5 {\n-   |               ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:39:16\n+  --> $DIR/increment-notfixed.rs:41:16\n    |\n LL |     foo.bar.qux++;\n    |                ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp = foo.bar.qux; foo.bar.qux += 1; tmp };\n-   |     +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     foo.bar.qux += 1;\n    |                 ~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment-notfixed.rs:49:10\n+  --> $DIR/increment-notfixed.rs:51:10\n    |\n LL |     s.tmp++;\n    |          ^^ not a valid postfix operator\n    |\n help: use `+= 1` instead\n    |\n-LL |     { let tmp = s.tmp; s.tmp += 1; tmp };\n-   |     +++++++++++      ~~~~~~~~~~~~~~~~~~~\n LL |     s.tmp += 1;\n    |           ~~~~\n \n error: Rust has no prefix increment operator\n-  --> $DIR/increment-notfixed.rs:56:5\n+  --> $DIR/increment-notfixed.rs:58:5\n    |\n LL |     ++foo.bar.qux;\n    |     ^^ not a valid prefix operator"}, {"sha": "d08d74ec1f911e55873e8147624d551797b1a462", "filename": "src/test/ui/parser/issue-104867-inc-dec.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.rs?ref=7c11a53f9ccb4040995b9e054b093a47fef29cc1", "patch": "@@ -0,0 +1,30 @@\n+struct S {\n+    x: i32,\n+}\n+\n+fn test1() {\n+    let mut i = 0;\n+    i++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test2() {\n+    let s = S { x: 0 };\n+    s.x++; //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test3() {\n+    let mut i = 0;\n+    if i++ == 1 {} //~ ERROR Rust has no postfix increment operator\n+}\n+\n+fn test4() {\n+    let mut i = 0;\n+    ++i; //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn test5() {\n+    let mut i = 0;\n+    if ++i == 1 { } //~ ERROR Rust has no prefix increment operator\n+}\n+\n+fn main() {}"}, {"sha": "d45b92bf89904f0064696d716eb2057200d61222", "filename": "src/test/ui/parser/issue-104867-inc-dec.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c11a53f9ccb4040995b9e054b093a47fef29cc1/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-104867-inc-dec.stderr?ref=7c11a53f9ccb4040995b9e054b093a47fef29cc1", "patch": "@@ -0,0 +1,58 @@\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:7:6\n+   |\n+LL |     i++;\n+   |      ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     i += 1;\n+   |       ~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:12:8\n+   |\n+LL |     s.x++;\n+   |        ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     s.x += 1;\n+   |         ~~~~\n+\n+error: Rust has no postfix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:17:9\n+   |\n+LL |     if i++ == 1 {}\n+   |         ^^ not a valid postfix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     if { let tmp = i; i += 1; tmp } == 1 {}\n+   |        +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:22:5\n+   |\n+LL |     ++i;\n+   |     ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL -     ++i;\n+LL +     i += 1;\n+   |\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/issue-104867-inc-dec.rs:27:8\n+   |\n+LL |     if ++i == 1 { }\n+   |        ^^ not a valid prefix operator\n+   |\n+help: use `+= 1` instead\n+   |\n+LL |     if { i += 1; i } == 1 { }\n+   |        ~   +++++++++\n+\n+error: aborting due to 5 previous errors\n+"}]}