{"sha": "54c74345b4cffbe2c490b79cfda5647897084d00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0Yzc0MzQ1YjRjZmZiZTJjNDkwYjc5Y2ZkYTU2NDc4OTcwODRkMDA=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-16T21:59:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-16T21:59:25Z"}, "message": "Rollup merge of #74399 - mark-i-m:ty-err-4, r=eddyb\n\nMove DelaySpanBugEmitted to ty::context\n\nThis makes it even hard to abuse.\n\nr? @eddyb\n\ncc @LeSeulArtichaut as this will probably conflict with your PR :/", "tree": {"sha": "e15d46828dc3da52b9e1c8399be6b832a48cf1fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15d46828dc3da52b9e1c8399be6b832a48cf1fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c74345b4cffbe2c490b79cfda5647897084d00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOaw9CRBK7hj4Ov3rIwAAdHIIAJla6HoX6GKyXtU2vVxqdRv+\n4e84PNUb2Tv0Oq2EvB+mIdCdu6hy1bCiOtgMHGj6B+yV6gm1fptaghNXC0l84Qdx\nFYWJyZjmBeI32wGlx+jY2Czz4AGB8OMCCiiQz1MPLZRyYYtw/2vj2/dlWG23GZUl\nQdyhfEBSYLde34azzcjqXdiNbiBP7L+L91oAhcNV6B0ehWRAKF7iytXtR8sAUbZb\n9ycCVM7iQ0fVCN0R00UVPXywYqokzQqM520XdJdS60RWv5MXd9OxmQ6foc1+UkZB\n4M81vLvmqYVJttbVIXShub/aZdRzctcJecUzqnQwOiqQDKII3H4W70AD2vHdEkk=\n=QYq3\n-----END PGP SIGNATURE-----\n", "payload": "tree e15d46828dc3da52b9e1c8399be6b832a48cf1fe\nparent 3ef2244b41e370285228c7e42d20e2063213ac3b\nparent e1cd1853c8e29e7d951edc603726add1ea64f513\nauthor Tyler Mandry <tmandry@gmail.com> 1597615165 -0700\ncommitter GitHub <noreply@github.com> 1597615165 -0700\n\nRollup merge of #74399 - mark-i-m:ty-err-4, r=eddyb\n\nMove DelaySpanBugEmitted to ty::context\n\nThis makes it even hard to abuse.\n\nr? @eddyb\n\ncc @LeSeulArtichaut as this will probably conflict with your PR :/\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c74345b4cffbe2c490b79cfda5647897084d00", "html_url": "https://github.com/rust-lang/rust/commit/54c74345b4cffbe2c490b79cfda5647897084d00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c74345b4cffbe2c490b79cfda5647897084d00/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef2244b41e370285228c7e42d20e2063213ac3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef2244b41e370285228c7e42d20e2063213ac3b", "html_url": "https://github.com/rust-lang/rust/commit/3ef2244b41e370285228c7e42d20e2063213ac3b"}, {"sha": "e1cd1853c8e29e7d951edc603726add1ea64f513", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cd1853c8e29e7d951edc603726add1ea64f513", "html_url": "https://github.com/rust-lang/rust/commit/e1cd1853c8e29e7d951edc603726add1ea64f513"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "ede28522000afcde48b0b1d645b2db3737845030", "filename": "src/librustc_middle/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs?ref=54c74345b4cffbe2c490b79cfda5647897084d00", "patch": "@@ -34,7 +34,7 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(ty::sty::DelaySpanBugEmitted),\n+    Error(ty::DelaySpanBugEmitted),\n }\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "d7eeaafbf46bfb467ce4aad3f8992b897ab15265", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=54c74345b4cffbe2c490b79cfda5647897084d00", "patch": "@@ -65,6 +65,12 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n+/// A type that is not publicly constructable. This prevents people from making `TyKind::Error`\n+/// except through `tcx.err*()`, which are in this module.\n+#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n+#[derive(TyEncodable, TyDecodable, HashStable)]\n+pub struct DelaySpanBugEmitted(());\n+\n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -1171,18 +1177,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n         self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(super::sty::DelaySpanBugEmitted(())))\n+        self.mk_ty(Error(DelaySpanBugEmitted(())))\n     }\n \n     /// Like `err` but for constants.\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n         self.sess\n             .delay_span_bug(DUMMY_SP, \"ty::ConstKind::Error constructed but no error reported.\");\n-        self.mk_const(ty::Const {\n-            val: ty::ConstKind::Error(super::sty::DelaySpanBugEmitted(())),\n-            ty,\n-        })\n+        self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {"}, {"sha": "3c79fe12255799fc581a5ebdfb78ca9eb3482aab", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=54c74345b4cffbe2c490b79cfda5647897084d00", "patch": "@@ -73,8 +73,8 @@ pub use self::binding::BindingMode::*;\n \n pub use self::context::{tls, FreeRegionInfo, TyCtxt};\n pub use self::context::{\n-    CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, ResolvedOpaqueTy,\n-    UserType, UserTypeAnnotationIndex,\n+    CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n+    DelaySpanBugEmitted, ResolvedOpaqueTy, UserType, UserTypeAnnotationIndex,\n };\n pub use self::context::{\n     CtxtInterners, GeneratorInteriorTypeCause, GlobalCtxt, Lift, TypeckResults,"}, {"sha": "82160681ee8cf374f40d2abcb6e211a645cc4fa4", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c74345b4cffbe2c490b79cfda5647897084d00/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=54c74345b4cffbe2c490b79cfda5647897084d00", "patch": "@@ -10,7 +10,7 @@ use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{\n     self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable, WithConstness,\n };\n-use crate::ty::{List, ParamEnv, TyS};\n+use crate::ty::{DelaySpanBugEmitted, List, ParamEnv, TyS};\n use polonius_engine::Atom;\n use rustc_ast::ast;\n use rustc_data_structures::captures::Captures;\n@@ -212,12 +212,6 @@ impl TyKind<'tcx> {\n     }\n }\n \n-/// A type that is not publicly constructable. This prevents people from making `TyKind::Error`\n-/// except through `tcx.err*()`.\n-#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n-pub struct DelaySpanBugEmitted(pub(super) ());\n-\n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(TyKind<'_>, 24);"}]}