{"sha": "e7a777805a63266292bb715e283db4107fb6e394", "node_id": "C_kwDOAAsO6NoAKGU3YTc3NzgwNWE2MzI2NjI5MmJiNzE1ZTI4M2RiNDEwN2ZiNmUzOTQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-03T05:27:49Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-06T20:43:57Z"}, "message": "Suggest possible clone when we have &T", "tree": {"sha": "52c2d0090e03d6accd6aeea85061c952b749be30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c2d0090e03d6accd6aeea85061c952b749be30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a777805a63266292bb715e283db4107fb6e394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a777805a63266292bb715e283db4107fb6e394", "html_url": "https://github.com/rust-lang/rust/commit/e7a777805a63266292bb715e283db4107fb6e394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a777805a63266292bb715e283db4107fb6e394/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afe58571e53d48a1fc2354271abe5aff60c5c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afe58571e53d48a1fc2354271abe5aff60c5c44", "html_url": "https://github.com/rust-lang/rust/commit/2afe58571e53d48a1fc2354271abe5aff60c5c44"}], "stats": {"total": 214, "additions": 212, "deletions": 2}, "files": [{"sha": "52778747987d3098c2a9c979c81a8576a0f1b836", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -57,6 +57,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty)\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n+            || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n             || self.suggest_floating_point_literal(err, expr, expected);\n         if !suggested {"}, {"sha": "991b0399542bf3037b19024fb9b7e37899c9fe48", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -1014,6 +1014,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn suggest_clone_for_ref(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expr_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if let ty::Ref(_, inner_ty, hir::Mutability::Not) = expr_ty.kind() &&\n+            let Some(clone_trait_def) = self.tcx.lang_items().clone_trait() &&\n+                expected_ty == *inner_ty &&\n+                self\n+                .infcx\n+                .type_implements_trait(\n+                    clone_trait_def,\n+                    [self.tcx.erase_regions(expected_ty)],\n+                    self.param_env\n+                )\n+                .must_apply_modulo_regions() {\n+                    diag.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        \"consider using clone here\",\n+                        \".clone()\",\n+                        Applicability::MachineApplicable,\n+                    );\n+                    return true;\n+                }\n+        false\n+    }\n+\n     pub(crate) fn suggest_copied_or_cloned(\n         &self,\n         diag: &mut Diagnostic,"}, {"sha": "9c098e1a2fc12b6beaee3ce595e38a714b367a41", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -873,6 +873,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n+                        if self.suggest_add_clone_to_arg(&obligation, &mut err, trait_predicate) {\n+                            err.emit();\n+                            return;\n+                        }\n+\n                         if self.suggest_impl_trait(&mut err, span, &obligation, trait_predicate) {\n                             err.emit();\n                             return;"}, {"sha": "d15196a9577aa63bf2552f2028171f5f50a3e100", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -10,7 +10,7 @@ use crate::infer::InferCtxt;\n use crate::traits::{NormalizeExt, ObligationCtxt};\n \n use hir::def::CtorOf;\n-use hir::HirId;\n+use hir::{Expr, HirId};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n@@ -206,11 +206,15 @@ pub trait TypeErrCtxtExt<'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n \n-    fn suggest_add_reference_to_arg(\n+    fn suggest_add_clone_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    );\n+\n+    fn suggest_add_reference_to_arg(\n+        err: &mut Diagnostic,\n         has_custom_message: bool,\n     ) -> bool;\n \n@@ -1102,6 +1106,70 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    fn suggest_add_clone_to_arg(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) -> bool {\n+        let span = obligation.cause.span;\n+        let body_id = obligation.cause.body_id;\n+        let self_ty = self.resolve_vars_if_possible(trait_pred.self_ty());\n+        let ty = self.tcx.erase_late_bound_regions(self_ty);\n+        let owner = self.tcx.hir().get_parent_item(body_id);\n+        if let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() &&\n+            let arg_node = self.tcx.hir().get(*arg_hir_id) &&\n+            let Node::Expr(Expr { kind: hir::ExprKind::Path(_), ..}) = arg_node &&\n+            let Some(generics) = self.tcx.hir().get_generics(owner.def_id) &&\n+            let ty::Ref(_, inner_ty, hir::Mutability::Not) = ty.kind() &&\n+            let ty::Param(param) = inner_ty.kind() &&\n+            let Some(generic_param) =\n+                    generics.params.iter().find(|p| p.name.ident().as_str() == param.name.as_str())\n+        {\n+            let clone_trait = self.tcx.require_lang_item(LangItem::Clone, None);\n+            let has_clone = self\n+                .type_implements_trait(clone_trait, [ty], obligation.param_env)\n+                .must_apply_modulo_regions();\n+\n+            let trait_pred_and_suggested_ty =\n+                trait_pred.map_bound(|trait_pred| (trait_pred, *inner_ty));\n+            let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n+                    obligation.param_env,\n+                    trait_pred_and_suggested_ty,\n+            );\n+\n+            if  has_clone && self.predicate_may_hold(&new_obligation) {\n+                let clone_bound = generics.bounds_for_param(generic_param.def_id)\n+                                                    .flat_map(|bp| bp.bounds)\n+                                                    .any(|bound| {\n+                    if let hir::GenericBound::Trait( hir::PolyTraitRef { trait_ref, ..}, ..) = bound {\n+                            Some(clone_trait) == trait_ref.trait_def_id()\n+                        } else {\n+                            false\n+                        }\n+                    });\n+                if !clone_bound {\n+                    suggest_constraining_type_param(\n+                        self.tcx,\n+                        generics,\n+                        err,\n+                        param.name.as_str(),\n+                        \"Clone\",\n+                        Some(clone_trait)\n+                    );\n+                }\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_hi(),\n+                    \"consider using clone here\",\n+                    \".clone()\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,"}, {"sha": "48efdb82c46ca6bd67688cc3e87047c18923d595", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-arg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -0,0 +1,23 @@\n+#[derive(Clone)]\n+struct S;\n+\n+// without Clone\n+struct T;\n+\n+fn foo(_: S) {}\n+\n+fn test1() {\n+    let s = &S;\n+    foo(s); //~ ERROR mismatched types\n+}\n+\n+fn bar(_: T) {}\n+fn test2() {\n+    let t = &T;\n+    bar(t); //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+}"}, {"sha": "1e66fe3af2414a01a39015fe05c49b4aad931c30", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-arg.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -0,0 +1,35 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:11:9\n+   |\n+LL |     foo(s);\n+   |     --- ^ expected struct `S`, found `&S`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:7:4\n+   |\n+LL | fn foo(_: S) {}\n+   |    ^^^ ----\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:17:9\n+   |\n+LL |     bar(t);\n+   |     --- ^ expected struct `T`, found `&T`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:14:4\n+   |\n+LL | fn bar(_: T) {}\n+   |    ^^^ ----\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4e4d4c044c986f157b31d7c5f7f16f76462179f7", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-bound.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -0,0 +1,20 @@\n+#[derive(Clone)]\n+struct S;\n+\n+trait X {}\n+\n+impl X for S {}\n+\n+fn foo<T: X>(_: T) {}\n+fn bar<T: X>(s: &T)  {\n+    foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n+}\n+\n+fn bar_with_clone<T: X + Clone>(s: &T)  {\n+    foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n+}\n+\n+fn main() {\n+    let s = &S;\n+    bar(s);\n+}"}, {"sha": "22bafc6cc8b90949d569b11d60e73e096973dfff", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-bound.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7a777805a63266292bb715e283db4107fb6e394/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr?ref=e7a777805a63266292bb715e283db4107fb6e394", "patch": "@@ -0,0 +1,29 @@\n+error[E0277]: the trait bound `&T: X` is not satisfied\n+  --> $DIR/issue-106443-sugg-clone-for-bound.rs:10:9\n+   |\n+LL |     foo(s);\n+   |         ^ the trait `X` is not implemented for `&T`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | fn bar<T: X + Clone>(s: &T)  {\n+   |             +++++++\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error[E0277]: the trait bound `&T: X` is not satisfied\n+  --> $DIR/issue-106443-sugg-clone-for-bound.rs:14:9\n+   |\n+LL |     foo(s);\n+   |         ^ the trait `X` is not implemented for `&T`\n+   |\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}