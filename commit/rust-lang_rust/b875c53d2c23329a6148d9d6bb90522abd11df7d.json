{"sha": "b875c53d2c23329a6148d9d6bb90522abd11df7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzVjNTNkMmMyMzMyOWE2MTQ4ZDlkNmJiOTA1MjJhYmQxMWRmN2Q=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-18T02:27:05Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-18T02:27:05Z"}, "message": "rustup https://github.com/rust-lang/rust/pull/69189\n\nrustups https://github.com/rust-lang/rust/pull/69189 which is part of https://github.com/rust-lang/rust/pull/70085\n(at least I think this is the only pr that changes clippy test stdout)", "tree": {"sha": "5b213b4856a4162308925a0635acf4244a19cc20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b213b4856a4162308925a0635acf4244a19cc20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b875c53d2c23329a6148d9d6bb90522abd11df7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b875c53d2c23329a6148d9d6bb90522abd11df7d", "html_url": "https://github.com/rust-lang/rust/commit/b875c53d2c23329a6148d9d6bb90522abd11df7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b875c53d2c23329a6148d9d6bb90522abd11df7d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23549a8c362a403026432f65a6cb398cb10d44b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23549a8c362a403026432f65a6cb398cb10d44b7", "html_url": "https://github.com/rust-lang/rust/commit/23549a8c362a403026432f65a6cb398cb10d44b7"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "4be46161e8b74f2cb88978d5761b1c61509ab377", "filename": "tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=b875c53d2c23329a6148d9d6bb90522abd11df7d", "patch": "@@ -35,21 +35,21 @@ LL |     let _: String = rrrstring.to_string();\n    |\n    = help: `&&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n+error: calling `to_string` on `&&std::borrow::Cow<str>`\n   --> $DIR/inefficient_to_string.rs:29:21\n    |\n LL |     let _: String = rrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n    |\n-   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n+   = help: `&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n+error: calling `to_string` on `&&&std::borrow::Cow<str>`\n   --> $DIR/inefficient_to_string.rs:30:21\n    |\n LL |     let _: String = rrrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`\n    |\n-   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n+   = help: `&&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8582080498f3e4febde7b3ef68d942c6a8eaf3bd", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=b875c53d2c23329a6148d9d6bb90522abd11df7d", "patch": "@@ -1,4 +1,4 @@\n-error: transmute from a type (`&'a T`) to itself\n+error: transmute from a type (`&T`) to itself\n   --> $DIR/transmute.rs:19:20\n    |\n LL |     let _: &'a T = core::intrinsics::transmute(t);"}, {"sha": "61fbea1c164eae8847d100014870f6eb27f96d06", "filename": "tests/ui/transmute_ptr_to_ptr.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ptr.stderr?ref=b875c53d2c23329a6148d9d6bb90522abd11df7d", "patch": "@@ -1,3 +1,17 @@\n+error: transmute from a type (`&T`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:8:5\n+   |\n+LL |     std::mem::transmute::<&'a T, &'static T>(t)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n+\n+error: transmute from a type (`&T`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:13:5\n+   |\n+LL |     std::mem::transmute::<&'a T, &'b T>(t)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: transmute from a pointer to a pointer\n   --> $DIR/transmute_ptr_to_ptr.rs:29:29\n    |\n@@ -36,5 +50,17 @@ error: transmute from a reference to a reference\n LL |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n \n-error: aborting due to 6 previous errors\n+error: transmute from a type (`&LifetimeParam`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:50:47\n+   |\n+LL |     let _: &LifetimeParam<'static> = unsafe { std::mem::transmute(&lp) };\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`&GenericParam<&LifetimeParam>`) to itself\n+  --> $DIR/transmute_ptr_to_ptr.rs:51:62\n+   |\n+LL |     let _: &GenericParam<&LifetimeParam<'static>> = unsafe { std::mem::transmute(&GenericParam { t: &lp }) };\n+   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "df0598a58cd3617cdb539261d29416537215802f", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b875c53d2c23329a6148d9d6bb90522abd11df7d/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=b875c53d2c23329a6148d9d6bb90522abd11df7d", "patch": "@@ -42,13 +42,13 @@ error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:32:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<&u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:34:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };"}]}