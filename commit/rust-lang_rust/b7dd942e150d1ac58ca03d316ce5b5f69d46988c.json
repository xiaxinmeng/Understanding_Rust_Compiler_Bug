{"sha": "b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGQ5NDJlMTUwZDFhYzU4Y2EwM2QzMTZjZTViNWY2OWQ0Njk4OGM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-17T21:40:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T21:40:58Z"}, "message": "Rollup merge of #86202 - a1phyr:spec_io_bytes_size_hint, r=m-ou-se\n\nSpecialize `io::Bytes::size_hint` for more types\n\nImprove the result of `<io::Bytes as Iterator>::size_hint` for some readers. I did not manage to specialize `SizeHint` for `io::Cursor`\n\nSide question: would it be interesting for `io::Read` to have an optional `size_hint` method ?", "tree": {"sha": "2297a4e97f8d7beaca66b51ef7a228563dcbf0c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2297a4e97f8d7beaca66b51ef7a228563dcbf0c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy8FrCRBK7hj4Ov3rIwAAT50IACpfqZEG7e1T3NL5tdHEqFNm\nBo4gVlkcEKkjjrIlCOkmq9kYaxofXurZIs8RSAyFhAeRDbNHxInCnEUNZqlOL0FB\nABKLNhOtXblPRNbfdz7w6aJ34AbfzM2gMf9IVjS44XktF/4CHP2rUn1fook91xIi\nRhEMtmX/wS8k2UM8bzyTI3/caiKljIpu35H2/8NjF6FFdRV/6n3SYuciIzFkPm8o\n07Z+DqSkZ5bw30C4z0A0GlPv//klidHI3y0Um9YBPXwH5fJoarf6CDmmEREidiPN\nXCTe7xyE7NyJ0933auWf9jb8LV/eHHuTvHqGkP2tYsQJAd0eHFBLvXROVI7lFbA=\n=NzHf\n-----END PGP SIGNATURE-----\n", "payload": "tree 2297a4e97f8d7beaca66b51ef7a228563dcbf0c5\nparent fcac47896696899badc9a436d798d48158895ea3\nparent 2cbd5d1df54400b8bd718b7e0dadc4c38c6f9932\nauthor Mara Bos <m-ou.se@m-ou.se> 1623966058 +0200\ncommitter GitHub <noreply@github.com> 1623966058 +0200\n\nRollup merge of #86202 - a1phyr:spec_io_bytes_size_hint, r=m-ou-se\n\nSpecialize `io::Bytes::size_hint` for more types\n\nImprove the result of `<io::Bytes as Iterator>::size_hint` for some readers. I did not manage to specialize `SizeHint` for `io::Cursor`\n\nSide question: would it be interesting for `io::Read` to have an optional `size_hint` method ?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "html_url": "https://github.com/rust-lang/rust/commit/b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcac47896696899badc9a436d798d48158895ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcac47896696899badc9a436d798d48158895ea3", "html_url": "https://github.com/rust-lang/rust/commit/fcac47896696899badc9a436d798d48158895ea3"}, {"sha": "2cbd5d1df54400b8bd718b7e0dadc4c38c6f9932", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbd5d1df54400b8bd718b7e0dadc4c38c6f9932", "html_url": "https://github.com/rust-lang/rust/commit/2cbd5d1df54400b8bd718b7e0dadc4c38c6f9932"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "32d194d9616523c6ae46a426acf602139ade7fbe", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "patch": "@@ -438,7 +438,13 @@ impl<R: Seek> Seek for BufReader<R> {\n }\n \n impl<T> SizeHint for BufReader<T> {\n+    #[inline]\n     fn lower_bound(&self) -> usize {\n-        self.buffer().len()\n+        SizeHint::lower_bound(self.get_ref()) + self.buffer().len()\n+    }\n+\n+    #[inline]\n+    fn upper_bound(&self) -> Option<usize> {\n+        SizeHint::upper_bound(self.get_ref()).and_then(|up| self.buffer().len().checked_add(up))\n     }\n }"}, {"sha": "a25ef8c87a5d23e5eeda8674241957799984e645", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "patch": "@@ -252,6 +252,7 @@\n mod tests;\n \n use crate::cmp;\n+use crate::convert::TryInto;\n use crate::fmt;\n use crate::mem::replace;\n use crate::ops::{Deref, DerefMut};\n@@ -2342,13 +2343,15 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n }\n \n impl<T, U> SizeHint for Chain<T, U> {\n+    #[inline]\n     fn lower_bound(&self) -> usize {\n         SizeHint::lower_bound(&self.first) + SizeHint::lower_bound(&self.second)\n     }\n \n+    #[inline]\n     fn upper_bound(&self) -> Option<usize> {\n         match (SizeHint::upper_bound(&self.first), SizeHint::upper_bound(&self.second)) {\n-            (Some(first), Some(second)) => Some(first + second),\n+            (Some(first), Some(second)) => first.checked_add(second),\n             _ => None,\n         }\n     }\n@@ -2553,6 +2556,21 @@ impl<T: BufRead> BufRead for Take<T> {\n     }\n }\n \n+impl<T> SizeHint for Take<T> {\n+    #[inline]\n+    fn lower_bound(&self) -> usize {\n+        cmp::min(SizeHint::lower_bound(&self.inner) as u64, self.limit) as usize\n+    }\n+\n+    #[inline]\n+    fn upper_bound(&self) -> Option<usize> {\n+        match SizeHint::upper_bound(&self.inner) {\n+            Some(upper_bound) => Some(cmp::min(upper_bound as u64, self.limit) as usize),\n+            None => self.limit.try_into().ok(),\n+        }\n+    }\n+}\n+\n /// An iterator over `u8` values of a reader.\n ///\n /// This struct is generally created by calling [`bytes`] on a reader.\n@@ -2597,15 +2615,53 @@ trait SizeHint {\n }\n \n impl<T> SizeHint for T {\n+    #[inline]\n     default fn lower_bound(&self) -> usize {\n         0\n     }\n \n+    #[inline]\n     default fn upper_bound(&self) -> Option<usize> {\n         None\n     }\n }\n \n+impl<T> SizeHint for &mut T {\n+    #[inline]\n+    fn lower_bound(&self) -> usize {\n+        SizeHint::lower_bound(*self)\n+    }\n+\n+    #[inline]\n+    fn upper_bound(&self) -> Option<usize> {\n+        SizeHint::upper_bound(*self)\n+    }\n+}\n+\n+impl<T> SizeHint for Box<T> {\n+    #[inline]\n+    fn lower_bound(&self) -> usize {\n+        SizeHint::lower_bound(&**self)\n+    }\n+\n+    #[inline]\n+    fn upper_bound(&self) -> Option<usize> {\n+        SizeHint::upper_bound(&**self)\n+    }\n+}\n+\n+impl SizeHint for &[u8] {\n+    #[inline]\n+    fn lower_bound(&self) -> usize {\n+        self.len()\n+    }\n+\n+    #[inline]\n+    fn upper_bound(&self) -> Option<usize> {\n+        Some(self.len())\n+    }\n+}\n+\n /// An iterator over the contents of an instance of `BufRead` split on a\n /// particular byte.\n ///"}, {"sha": "2ee30f5fb4f08cbd7e9f98d3beb61d3dd6327345", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "patch": "@@ -224,6 +224,24 @@ fn empty_size_hint() {\n     assert_eq!(size_hint, (0, Some(0)));\n }\n \n+#[test]\n+fn slice_size_hint() {\n+    let size_hint = (&[1, 2, 3]).bytes().size_hint();\n+    assert_eq!(size_hint, (3, Some(3)));\n+}\n+\n+#[test]\n+fn take_size_hint() {\n+    let size_hint = (&[1, 2, 3]).take(2).bytes().size_hint();\n+    assert_eq!(size_hint, (2, Some(2)));\n+\n+    let size_hint = (&[1, 2, 3]).take(4).bytes().size_hint();\n+    assert_eq!(size_hint, (3, Some(3)));\n+\n+    let size_hint = io::repeat(0).take(3).bytes().size_hint();\n+    assert_eq!(size_hint, (3, Some(3)));\n+}\n+\n #[test]\n fn chain_empty_size_hint() {\n     let chain = io::empty().chain(io::empty());\n@@ -242,7 +260,7 @@ fn chain_size_hint() {\n \n     let chain = buf_reader_1.chain(buf_reader_2);\n     let size_hint = chain.bytes().size_hint();\n-    assert_eq!(size_hint, (testdata.len(), None));\n+    assert_eq!(size_hint, (testdata.len(), Some(testdata.len())));\n }\n \n #[test]"}, {"sha": "f3bff391fb3eaef60cca23ec8b1efb4fd89f7a07", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dd942e150d1ac58ca03d316ce5b5f69d46988c/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=b7dd942e150d1ac58ca03d316ce5b5f69d46988c", "patch": "@@ -83,6 +83,7 @@ impl fmt::Debug for Empty {\n }\n \n impl SizeHint for Empty {\n+    #[inline]\n     fn upper_bound(&self) -> Option<usize> {\n         Some(0)\n     }\n@@ -147,6 +148,18 @@ impl Read for Repeat {\n     }\n }\n \n+impl SizeHint for Repeat {\n+    #[inline]\n+    fn lower_bound(&self) -> usize {\n+        usize::MAX\n+    }\n+\n+    #[inline]\n+    fn upper_bound(&self) -> Option<usize> {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Repeat {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}]}