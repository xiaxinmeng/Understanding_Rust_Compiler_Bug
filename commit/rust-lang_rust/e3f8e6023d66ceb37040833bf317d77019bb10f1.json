{"sha": "e3f8e6023d66ceb37040833bf317d77019bb10f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZjhlNjAyM2Q2NmNlYjM3MDQwODMzYmYzMTdkNzcwMTliYjEwZjE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-09T10:17:47Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-09T10:17:47Z"}, "message": "Merge #1673\n\n1673: Move numeric names inside of `NameRef` r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d4042c35679ca1e4db06fd9976d90d025fca0966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4042c35679ca1e4db06fd9976d90d025fca0966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f8e6023d66ceb37040833bf317d77019bb10f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f8e6023d66ceb37040833bf317d77019bb10f1", "html_url": "https://github.com/rust-lang/rust/commit/e3f8e6023d66ceb37040833bf317d77019bb10f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f8e6023d66ceb37040833bf317d77019bb10f1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5f82012779c374d9f6b518634aefb14ce28e17e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f82012779c374d9f6b518634aefb14ce28e17e6", "html_url": "https://github.com/rust-lang/rust/commit/5f82012779c374d9f6b518634aefb14ce28e17e6"}, {"sha": "f3ee5a15090d8ba6ec220e1f907ed3af27e57734", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ee5a15090d8ba6ec220e1f907ed3af27e57734", "html_url": "https://github.com/rust-lang/rust/commit/f3ee5a15090d8ba6ec220e1f907ed3af27e57734"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "beedac45725b63bc182fffd55837f0c6515ffe19", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -273,8 +273,8 @@ fn name(p: &mut Parser) {\n     name_r(p, TokenSet::empty())\n }\n \n-fn name_ref(p: &mut Parser, allow_numeric_names: bool) {\n-    if p.at(IDENT) || (allow_numeric_names && p.at(INT_NUMBER)) {\n+fn name_ref(p: &mut Parser) {\n+    if p.at(IDENT) {\n         let m = p.start();\n         p.bump();\n         m.complete(p, NAME_REF);\n@@ -287,6 +287,16 @@ fn name_ref(p: &mut Parser, allow_numeric_names: bool) {\n     }\n }\n \n+fn name_ref_or_index(p: &mut Parser) {\n+    if p.at(IDENT) || p.at(INT_NUMBER) {\n+        let m = p.start();\n+        p.bump();\n+        m.complete(p, NAME_REF);\n+    } else {\n+        p.err_and_bump(\"expected identifier\");\n+    }\n+}\n+\n fn error_block(p: &mut Parser, message: &str) {\n     assert!(p.at(T!['{']));\n     let m = p.start();"}, {"sha": "9fd3a235d12fedd472dea88b9dec1e33a08209a8", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -458,7 +458,7 @@ fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]) && p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth(2) == T![::]));\n     let m = lhs.precede(p);\n     p.bump();\n-    name_ref(p, false);\n+    name_ref(p);\n     type_args::opt_type_arg_list(p, true);\n     if p.at(T!['(']) {\n         arg_list(p);\n@@ -484,10 +484,8 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]));\n     let m = lhs.precede(p);\n     p.bump();\n-    if p.at(IDENT) {\n-        name_ref(p, false)\n-    } else if p.at(INT_NUMBER) {\n-        p.bump();\n+    if p.at(IDENT) || p.at(INT_NUMBER) {\n+        name_ref_or_index(p)\n     } else if p.at(FLOAT_NUMBER) {\n         // FIXME: How to recover and instead parse INT + T![.]?\n         p.bump();\n@@ -587,7 +585,7 @@ pub(crate) fn named_field_list(p: &mut Parser) {\n             IDENT | INT_NUMBER | T![#] => {\n                 let m = p.start();\n                 attributes::outer_attributes(p);\n-                name_ref(p, true);\n+                name_ref_or_index(p);\n                 if p.eat(T![:]) {\n                     expr(p);\n                 }"}, {"sha": "543af7c4bb1554d1f0cccbf17c0ffe450b530f48", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -279,7 +279,7 @@ fn extern_crate_item(p: &mut Parser, m: Marker) {\n     p.bump();\n     assert!(p.at(T![crate]));\n     p.bump();\n-    name_ref(p, false);\n+    name_ref(p);\n     opt_alias(p);\n     p.expect(T![;]);\n     m.complete(p, EXTERN_CRATE_ITEM);"}, {"sha": "3537b0da117390bdf8049e06ddb2ffdf2d034bdd", "filename": "crates/ra_parser/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -71,7 +71,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n         }\n         match p.current() {\n             IDENT => {\n-                name_ref(p, false);\n+                name_ref(p);\n                 opt_path_type_args(p, mode);\n             }\n             // test crate_path"}, {"sha": "3db08b280d78fe6d960e4f299100c9184feba08b", "filename": "crates/ra_parser/src/grammar/type_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -38,12 +38,12 @@ fn type_arg(p: &mut Parser) {\n         // test associated_type_bounds\n         // fn print_all<T: Iterator<Item: Display>>(printables: T) {}\n         IDENT if p.nth(1) == T![:] => {\n-            name_ref(p, false);\n+            name_ref(p);\n             type_params::bounds(p);\n             m.complete(p, ASSOC_TYPE_ARG);\n         }\n         IDENT if p.nth(1) == T![=] => {\n-            name_ref(p, false);\n+            name_ref(p);\n             p.bump();\n             types::type_(p);\n             m.complete(p, ASSOC_TYPE_ARG);"}, {"sha": "2bb3c0a03ebab28215f2967feb8c8890ad1e6e66", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -1,13 +1,12 @@\n mod block;\n-mod field_expr;\n \n use ra_rustc_lexer::unescape;\n \n use crate::{\n     algo::visit::{visitor_ctx, VisitorCtx},\n-    ast, SyntaxError, SyntaxErrorKind,\n-    SyntaxKind::{BYTE, BYTE_STRING, CHAR, STRING},\n-    SyntaxNode, TextUnit, T,\n+    ast, AstNode, SyntaxError, SyntaxErrorKind,\n+    SyntaxKind::{BYTE, BYTE_STRING, CHAR, INT_NUMBER, STRING},\n+    SyntaxNode, SyntaxToken, TextUnit, T,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -101,7 +100,8 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n         let _ = visitor_ctx(&mut errors)\n             .visit::<ast::Literal, _>(validate_literal)\n             .visit::<ast::Block, _>(block::validate_block_node)\n-            .visit::<ast::FieldExpr, _>(field_expr::validate_field_expr_node)\n+            .visit::<ast::FieldExpr, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n+            .visit::<ast::NamedField, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n             .accept(&node);\n     }\n     errors\n@@ -189,3 +189,18 @@ pub(crate) fn validate_block_structure(root: &SyntaxNode) {\n         }\n     }\n }\n+\n+fn validate_numeric_name(name_ref: Option<ast::NameRef>, errors: &mut Vec<SyntaxError>) {\n+    if let Some(int_token) = int_token(name_ref) {\n+        if int_token.text().chars().any(|c| !c.is_digit(10)) {\n+            errors.push(SyntaxError::new(\n+                SyntaxErrorKind::InvalidTupleIndexFormat,\n+                int_token.text_range(),\n+            ));\n+        }\n+    }\n+\n+    fn int_token(name_ref: Option<ast::NameRef>) -> Option<SyntaxToken> {\n+        name_ref?.syntax().first_child_or_token()?.into_token().filter(|it| it.kind() == INT_NUMBER)\n+    }\n+}"}, {"sha": "004f199fd537733529488c256cc8d5e741ea8138", "filename": "crates/ra_syntax/src/validation/field_expr.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f82012779c374d9f6b518634aefb14ce28e17e6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f82012779c374d9f6b518634aefb14ce28e17e6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs?ref=5f82012779c374d9f6b518634aefb14ce28e17e6", "patch": "@@ -1,13 +0,0 @@\n-use crate::{\r\n-    ast::{self, FieldKind},\r\n-    SyntaxError,\r\n-    SyntaxErrorKind::*,\r\n-};\r\n-\r\n-pub(crate) fn validate_field_expr_node(node: ast::FieldExpr, errors: &mut Vec<SyntaxError>) {\r\n-    if let Some(FieldKind::Index(idx)) = node.field_access() {\r\n-        if idx.text().chars().any(|c| c < '0' || c > '9') {\r\n-            errors.push(SyntaxError::new(InvalidTupleIndexFormat, idx.text_range()));\r\n-        }\r\n-    }\r\n-}\r"}, {"sha": "465e79e7b28e7d5925ce221ec3f68dd33975046b", "filename": "crates/ra_syntax/test_data/parser/inline/err/0010_bad_tuple_index_expr.txt", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0010_bad_tuple_index_expr.txt?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -30,7 +30,8 @@ SOURCE_FILE@[0; 47)\n                 NAME_REF@[25; 26)\n                   IDENT@[25; 26) \"x\"\n           DOT@[26; 27) \".\"\n-          INT_NUMBER@[27; 31) \"1i32\"\n+          NAME_REF@[27; 31)\n+            INT_NUMBER@[27; 31) \"1i32\"\n         SEMI@[31; 32) \";\"\n       WHITESPACE@[32; 37) \"\\n    \"\n       EXPR_STMT@[37; 44)\n@@ -41,11 +42,11 @@ SOURCE_FILE@[0; 47)\n                 NAME_REF@[37; 38)\n                   IDENT@[37; 38) \"x\"\n           DOT@[38; 39) \".\"\n-          INT_NUMBER@[39; 43) \"0x01\"\n+          NAME_REF@[39; 43)\n+            INT_NUMBER@[39; 43) \"0x01\"\n         SEMI@[43; 44) \";\"\n       WHITESPACE@[44; 45) \"\\n\"\n       R_CURLY@[45; 46) \"}\"\n   WHITESPACE@[46; 47) \"\\n\"\n-error [17; 19): Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix\n error [27; 31): Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix\n error [39; 43): Tuple (struct) field access is only allowed through decimal integers with no underscores or suffix"}, {"sha": "1d2cf2761562e5d510f2b2288fe75a966c31ba59", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0011_field_expr.txt", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.txt?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -32,7 +32,8 @@ SOURCE_FILE@[0; 48)\n                   NAME_REF@[26; 27)\n                     IDENT@[26; 27) \"x\"\n             DOT@[27; 28) \".\"\n-            INT_NUMBER@[28; 29) \"0\"\n+            NAME_REF@[28; 29)\n+              INT_NUMBER@[28; 29) \"0\"\n           DOT@[29; 30) \".\"\n           NAME_REF@[30; 33)\n             IDENT@[30; 33) \"bar\"\n@@ -47,7 +48,8 @@ SOURCE_FILE@[0; 48)\n                   NAME_REF@[39; 40)\n                     IDENT@[39; 40) \"x\"\n             DOT@[40; 41) \".\"\n-            INT_NUMBER@[41; 42) \"0\"\n+            NAME_REF@[41; 42)\n+              INT_NUMBER@[41; 42) \"0\"\n           ARG_LIST@[42; 44)\n             L_PAREN@[42; 43) \"(\"\n             R_PAREN@[43; 44) \")\""}, {"sha": "7adb662de718e1fbdf6aea6d19026f61cd0183ab", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0137_await_expr.txt", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e3f8e6023d66ceb37040833bf317d77019bb10f1/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.txt?ref=e3f8e6023d66ceb37040833bf317d77019bb10f1", "patch": "@@ -31,7 +31,8 @@ SOURCE_FILE@[0; 67)\n                   NAME_REF@[28; 29)\n                     IDENT@[28; 29) \"x\"\n             DOT@[29; 30) \".\"\n-            INT_NUMBER@[30; 31) \"0\"\n+            NAME_REF@[30; 31)\n+              INT_NUMBER@[30; 31) \"0\"\n           DOT@[31; 32) \".\"\n           AWAIT_KW@[32; 37) \"await\"\n         SEMI@[37; 38) \";\"\n@@ -48,7 +49,8 @@ SOURCE_FILE@[0; 67)\n                         NAME_REF@[43; 44)\n                           IDENT@[43; 44) \"x\"\n                   DOT@[44; 45) \".\"\n-                  INT_NUMBER@[45; 46) \"0\"\n+                  NAME_REF@[45; 46)\n+                    INT_NUMBER@[45; 46) \"0\"\n                 ARG_LIST@[46; 48)\n                   L_PAREN@[46; 47) \"(\"\n                   R_PAREN@[47; 48) \")\""}]}