{"sha": "2b58d8c187936567d92ab45be8a34be087071e05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNThkOGMxODc5MzY1NjdkOTJhYjQ1YmU4YTM0YmUwODcwNzFlMDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T16:12:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T16:12:16Z"}, "message": "Misc cleanups", "tree": {"sha": "cb677c7f8dcd5b4204fd18af10017c38fcc51ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb677c7f8dcd5b4204fd18af10017c38fcc51ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b58d8c187936567d92ab45be8a34be087071e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b58d8c187936567d92ab45be8a34be087071e05", "html_url": "https://github.com/rust-lang/rust/commit/2b58d8c187936567d92ab45be8a34be087071e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b58d8c187936567d92ab45be8a34be087071e05/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de713a80cac60164f435a4e6a7ca710f5fdccd45", "url": "https://api.github.com/repos/rust-lang/rust/commits/de713a80cac60164f435a4e6a7ca710f5fdccd45", "html_url": "https://github.com/rust-lang/rust/commit/de713a80cac60164f435a4e6a7ca710f5fdccd45"}], "stats": {"total": 36, "additions": 6, "deletions": 30}, "files": [{"sha": "4847b007a36691f3fdf65f4a279eacc14d1e0897", "filename": "src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b58d8c187936567d92ab45be8a34be087071e05/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b58d8c187936567d92ab45be8a34be087071e05/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=2b58d8c187936567d92ab45be8a34be087071e05", "patch": "@@ -24,7 +24,6 @@ pub(super) fn add_arg_comment<'tcx>(\n     local_field: Option<usize>,\n     params: EmptySinglePair<Value>,\n     arg_abi: &ArgAbi<'tcx, Ty<'tcx>>,\n-    ty: Ty<'tcx>,\n ) {\n     let local = if let Some(local) = local {\n         Cow::Owned(format!(\"{:?}\", local))\n@@ -51,7 +50,7 @@ pub(super) fn add_arg_comment<'tcx>(\n         local_field = local_field,\n         params = params,\n         pass_mode = pass_mode,\n-        ty = ty,\n+        ty = arg_abi.layout.ty,\n     ));\n }\n "}, {"sha": "aec321bd4a0405ee7845a1ab316084f8601ade2d", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2b58d8c187936567d92ab45be8a34be087071e05/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b58d8c187936567d92ab45be8a34be087071e05/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=2b58d8c187936567d92ab45be8a34be087071e05", "patch": "@@ -123,10 +123,7 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n             RustcPassMode::Direct(_) => match &self.layout.abi {\n                 Abi::Scalar(scalar) => (\n                     None,\n-                    vec![AbiParam::new(scalar_to_clif_type(\n-                        tcx,\n-                        scalar.clone(),\n-                    ))],\n+                    vec![AbiParam::new(scalar_to_clif_type(tcx, scalar.clone()))],\n                 ),\n                 // FIXME implement Vector Abi in a cg_llvm compatible way\n                 Abi::Vector { .. } => {\n@@ -139,10 +136,7 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n                 Abi::ScalarPair(a, b) => {\n                     let a = scalar_to_clif_type(tcx, a.clone());\n                     let b = scalar_to_clif_type(tcx, b.clone());\n-                    (\n-                        None,\n-                        vec![AbiParam::new(a), AbiParam::new(b)],\n-                    )\n+                    (None, vec![AbiParam::new(a), AbiParam::new(b)])\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n             },\n@@ -192,11 +186,7 @@ pub(super) fn get_arg_abi<'tcx>(\n             // FIXME implement Vector Abi in a cg_llvm compatible way\n             Abi::Vector { .. } => {\n                 if crate::intrinsics::clif_vector_type(tcx, arg_abi.layout).is_none() {\n-                    arg_abi.mode = RustcPassMode::Indirect {\n-                        attrs: ArgAttributes::new(),\n-                        extra_attrs: None,\n-                        on_stack: false,\n-                    };\n+                    arg_abi.make_indirect();\n                 }\n             }\n             _ => unreachable!(\"{:?}\", arg_abi.layout.abi),\n@@ -206,11 +196,7 @@ pub(super) fn get_arg_abi<'tcx>(\n                 let a = scalar_to_clif_type(tcx, a.clone());\n                 let b = scalar_to_clif_type(tcx, b.clone());\n                 if a == types::I128 && b == types::I128 {\n-                    arg_abi.mode = RustcPassMode::Indirect {\n-                        attrs: ArgAttributes::new(),\n-                        extra_attrs: None,\n-                        on_stack: false,\n-                    };\n+                    arg_abi.make_indirect();\n                 }\n             }\n             _ => unreachable!(\"{:?}\", arg_abi.layout.abi),\n@@ -257,15 +243,7 @@ pub(super) fn cvalue_for_param<'tcx>(\n         clif_types.map(|abi_param| fx.bcx.append_block_param(start_block, abi_param.value_type));\n \n     #[cfg(debug_assertions)]\n-    crate::abi::comments::add_arg_comment(\n-        fx,\n-        \"arg\",\n-        local,\n-        local_field,\n-        block_params,\n-        &arg_abi,\n-        arg_ty,\n-    );\n+    crate::abi::comments::add_arg_comment(fx, \"arg\", local, local_field, block_params, &arg_abi);\n \n     match arg_abi.mode {\n         RustcPassMode::Ignore => None,"}, {"sha": "3a5f61315f832820e22bb7d857132073be0b83b5", "filename": "src/abi/returning.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b58d8c187936567d92ab45be8a34be087071e05/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b58d8c187936567d92ab45be8a34be087071e05/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=2b58d8c187936567d92ab45be8a34be087071e05", "patch": "@@ -69,7 +69,6 @@ pub(super) fn codegen_return_param<'tcx>(\n         None,\n         ret_param,\n         &ret_arg_abi,\n-        ret_layout.ty,\n     );\n \n     ret_place"}]}