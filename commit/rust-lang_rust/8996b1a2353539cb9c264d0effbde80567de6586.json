{"sha": "8996b1a2353539cb9c264d0effbde80567de6586", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OTZiMWEyMzUzNTM5Y2I5YzI2NGQwZWZmYmRlODA1NjdkZTY1ODY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-19T01:07:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-19T11:12:18Z"}, "message": "Replace Projection variant in GenericPredicate with AliasEq", "tree": {"sha": "4702a4384ee97782670c20e597c40e7da61b4fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4702a4384ee97782670c20e597c40e7da61b4fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8996b1a2353539cb9c264d0effbde80567de6586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8996b1a2353539cb9c264d0effbde80567de6586", "html_url": "https://github.com/rust-lang/rust/commit/8996b1a2353539cb9c264d0effbde80567de6586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8996b1a2353539cb9c264d0effbde80567de6586/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86878443b1789cac0e48177f5f2b95ad0d6e912c", "url": "https://api.github.com/repos/rust-lang/rust/commits/86878443b1789cac0e48177f5f2b95ad0d6e912c", "html_url": "https://github.com/rust-lang/rust/commit/86878443b1789cac0e48177f5f2b95ad0d6e912c"}], "stats": {"total": 352, "additions": 221, "deletions": 131}, "files": [{"sha": "5ebd0a3b891ee196179319e01b5962cd35510c30", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -56,9 +56,9 @@ use hir_ty::{\n     primitive::UintTy,\n     to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n-    AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n-    InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substitution,\n-    Ty, TyDefId, TyKind, TyVariableKind,\n+    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex,\n+    GenericPredicate, InEnvironment, Interner, Obligation, ProjectionTy, Scalar, Substitution, Ty,\n+    TyDefId, TyKind, TyVariableKind,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -1786,17 +1786,17 @@ impl Type {\n             .push(self.ty.value.clone())\n             .fill(args.iter().map(|t| t.ty.value.clone()))\n             .build();\n-        let predicate = ProjectionPredicate {\n-            projection_ty: ProjectionTy {\n-                associated_ty_id: to_assoc_type_id(alias.id),\n-                substitution: subst,\n-            },\n-            ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(&Interner),\n-        };\n         let goal = Canonical {\n             value: InEnvironment::new(\n                 self.ty.environment.clone(),\n-                Obligation::Projection(predicate),\n+                Obligation::AliasEq(AliasEq {\n+                    alias: AliasTy::Projection(ProjectionTy {\n+                        associated_ty_id: to_assoc_type_id(alias.id),\n+                        substitution: subst,\n+                    }),\n+                    ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n+                        .intern(&Interner),\n+                }),\n             ),\n             kinds: Arc::new([TyVariableKind::General]),\n         };"}, {"sha": "33b9660263fba3eadf78d9b192bd5539086af75c", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -15,7 +15,8 @@ use crate::{\n     to_assoc_type_id, to_chalk_trait_id,\n     traits::{InEnvironment, Solution},\n     utils::generics,\n-    BoundVar, Canonical, DebruijnIndex, Interner, Obligation, Substitution, TraitRef, Ty, TyKind,\n+    AliasEq, AliasTy, BoundVar, Canonical, DebruijnIndex, Interner, Obligation, ProjectionTy,\n+    Substitution, TraitRef, Ty, TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n@@ -82,16 +83,16 @@ fn deref_by_trait(\n     }\n \n     // Now do the assoc type projection\n-    let projection = super::traits::ProjectionPredicate {\n-        ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, ty.value.kinds.len()))\n-            .intern(&Interner),\n-        projection_ty: super::ProjectionTy {\n+    let projection = AliasEq {\n+        alias: AliasTy::Projection(ProjectionTy {\n             associated_ty_id: to_assoc_type_id(target),\n             substitution: parameters,\n-        },\n+        }),\n+        ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, ty.value.kinds.len()))\n+            .intern(&Interner),\n     };\n \n-    let obligation = super::Obligation::Projection(projection);\n+    let obligation = super::Obligation::AliasEq(projection);\n \n     let in_env = InEnvironment { value: obligation, environment: ty.environment };\n "}, {"sha": "59a1bd9b0da9e93efda06db112472bd205949457", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -18,9 +18,9 @@ use hir_expand::name::Name;\n \n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n-    to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId,\n-    CallableSig, GenericPredicate, ImplTraitId, Interner, Lifetime, Obligation, OpaqueTy,\n-    ProjectionTy, Scalar, Substitution, TraitRef, Ty, TyKind,\n+    to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy,\n+    CallableDefId, CallableSig, GenericPredicate, ImplTraitId, Interner, Lifetime, Obligation,\n+    OpaqueTy, ProjectionTy, Scalar, Substitution, TraitRef, Ty, TyKind,\n };\n \n pub struct HirFormatter<'a> {\n@@ -268,6 +268,16 @@ impl HirDisplay for ProjectionTy {\n     }\n }\n \n+impl HirDisplay for OpaqueTy {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        if f.should_truncate() {\n+            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n+        }\n+\n+        self.substitution[0].hir_fmt(f)\n+    }\n+}\n+\n impl HirDisplay for Ty {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {\n@@ -700,12 +710,12 @@ fn write_bounds_like_dyn_trait(\n                     }\n                 }\n             }\n-            GenericPredicate::Projection(projection_pred) if is_fn_trait => {\n+            GenericPredicate::AliasEq(alias_eq) if is_fn_trait => {\n                 is_fn_trait = false;\n                 write!(f, \" -> \")?;\n-                projection_pred.ty.hir_fmt(f)?;\n+                alias_eq.ty.hir_fmt(f)?;\n             }\n-            GenericPredicate::Projection(projection_pred) => {\n+            GenericPredicate::AliasEq(AliasEq { ty, alias }) => {\n                 // in types in actual Rust, these will always come\n                 // after the corresponding Implemented predicate\n                 if angle_open {\n@@ -714,11 +724,12 @@ fn write_bounds_like_dyn_trait(\n                     write!(f, \"<\")?;\n                     angle_open = true;\n                 }\n-                let type_alias = f.db.type_alias_data(from_assoc_type_id(\n-                    projection_pred.projection_ty.associated_ty_id,\n-                ));\n-                write!(f, \"{} = \", type_alias.name)?;\n-                projection_pred.ty.hir_fmt(f)?;\n+                if let AliasTy::Projection(proj) = alias {\n+                    let type_alias =\n+                        f.db.type_alias_data(from_assoc_type_id(proj.associated_ty_id));\n+                    write!(f, \"{} = \", type_alias.name)?;\n+                }\n+                ty.hir_fmt(f)?;\n             }\n             GenericPredicate::Error => {\n                 if angle_open {\n@@ -775,20 +786,20 @@ impl HirDisplay for GenericPredicate {\n \n         match self {\n             GenericPredicate::Implemented(trait_ref) => trait_ref.hir_fmt(f)?,\n-            GenericPredicate::Projection(projection_pred) => {\n+            GenericPredicate::AliasEq(AliasEq {\n+                alias: AliasTy::Projection(projection_ty),\n+                ty,\n+            }) => {\n                 write!(f, \"<\")?;\n-                projection_pred.projection_ty.trait_ref(f.db).hir_fmt_ext(f, true)?;\n+                projection_ty.trait_ref(f.db).hir_fmt_ext(f, true)?;\n                 write!(\n                     f,\n                     \">::{} = \",\n-                    f.db.type_alias_data(from_assoc_type_id(\n-                        projection_pred.projection_ty.associated_ty_id\n-                    ))\n-                    .name,\n+                    f.db.type_alias_data(from_assoc_type_id(projection_ty.associated_ty_id)).name,\n                 )?;\n-                projection_pred.ty.hir_fmt(f)?;\n+                ty.hir_fmt(f)?;\n             }\n-            GenericPredicate::Error => write!(f, \"{{error}}\")?,\n+            GenericPredicate::AliasEq(_) | GenericPredicate::Error => write!(f, \"{{error}}\")?,\n         }\n         Ok(())\n     }\n@@ -815,11 +826,14 @@ impl HirDisplay for Obligation {\n                 tr.hir_fmt(f)?;\n                 write!(f, \")\")\n             }\n-            Obligation::Projection(proj) => {\n+            Obligation::AliasEq(AliasEq { alias, ty }) => {\n                 write!(f, \"Normalize(\")?;\n-                proj.projection_ty.hir_fmt(f)?;\n+                match alias {\n+                    AliasTy::Projection(projection_ty) => projection_ty.hir_fmt(f)?,\n+                    AliasTy::Opaque(opaque) => opaque.hir_fmt(f)?,\n+                }\n                 write!(f, \" => \")?;\n-                proj.ty.hir_fmt(f)?;\n+                ty.hir_fmt(f)?;\n                 write!(f, \")\")\n             }\n         }"}, {"sha": "82186979ab462439619b349d0718d641ff16f7dc", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -37,12 +37,12 @@ use stdx::impl_from;\n use syntax::SmolStr;\n \n use super::{\n-    traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n+    traits::{Guidance, Obligation, Solution},\n     InEnvironment, ProjectionTy, Substitution, TraitEnvironment, TraitRef, Ty, TypeWalk,\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n-    to_assoc_type_id, to_chalk_trait_id, AliasTy, Interner, TyKind,\n+    to_assoc_type_id, to_chalk_trait_id, AliasEq, AliasTy, Interner, TyKind,\n };\n \n pub(crate) use unify::unify;\n@@ -396,15 +396,15 @@ impl<'a> InferenceContext<'a> {\n                     .build();\n                 let trait_ref =\n                     TraitRef { trait_id: to_chalk_trait_id(trait_), substitution: substs.clone() };\n-                let projection = ProjectionPredicate {\n-                    ty: ty.clone(),\n-                    projection_ty: ProjectionTy {\n+                let alias_eq = AliasEq {\n+                    alias: AliasTy::Projection(ProjectionTy {\n                         associated_ty_id: to_assoc_type_id(res_assoc_ty),\n                         substitution: substs,\n-                    },\n+                    }),\n+                    ty: ty.clone(),\n                 };\n                 self.obligations.push(Obligation::Trait(trait_ref));\n-                self.obligations.push(Obligation::Projection(projection));\n+                self.obligations.push(Obligation::AliasEq(alias_eq));\n                 self.resolve_ty_as_possible(ty)\n             }\n             None => self.err_ty(),\n@@ -429,8 +429,8 @@ impl<'a> InferenceContext<'a> {\n \n     fn normalize_projection_ty(&mut self, proj_ty: ProjectionTy) -> Ty {\n         let var = self.table.new_type_var();\n-        let predicate = ProjectionPredicate { projection_ty: proj_ty, ty: var.clone() };\n-        let obligation = Obligation::Projection(predicate);\n+        let alias_eq = AliasEq { alias: AliasTy::Projection(proj_ty), ty: var.clone() };\n+        let obligation = Obligation::AliasEq(alias_eq);\n         self.obligations.push(obligation);\n         var\n     }"}, {"sha": "4738ec08aca832923e696a3d2abd5d8acd631f38", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -7,8 +7,8 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n \n use super::{InferenceContext, Obligation};\n use crate::{\n-    BoundVar, Canonical, DebruijnIndex, FnPointer, GenericPredicate, InEnvironment, InferenceVar,\n-    Interner, Scalar, Substitution, Ty, TyKind, TypeWalk,\n+    AliasEq, AliasTy, BoundVar, Canonical, DebruijnIndex, FnPointer, GenericPredicate,\n+    InEnvironment, InferenceVar, Interner, Scalar, Substitution, Ty, TyKind, TypeWalk,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -93,8 +93,8 @@ impl<'a, 'b> Canonicalizer<'a, 'b> {\n             Obligation::Trait(tr) => {\n                 Obligation::Trait(self.do_canonicalize(tr, DebruijnIndex::INNERMOST))\n             }\n-            Obligation::Projection(pr) => {\n-                Obligation::Projection(self.do_canonicalize(pr, DebruijnIndex::INNERMOST))\n+            Obligation::AliasEq(alias_eq) => {\n+                Obligation::AliasEq(self.do_canonicalize(alias_eq, DebruijnIndex::INNERMOST))\n             }\n         };\n         self.into_canonicalized(InEnvironment {\n@@ -394,14 +394,25 @@ impl InferenceTable {\n             {\n                 self.unify_substs(&tr1.substitution, &tr2.substitution, depth + 1)\n             }\n-            (GenericPredicate::Projection(proj1), GenericPredicate::Projection(proj2))\n-                if proj1.projection_ty.associated_ty_id == proj2.projection_ty.associated_ty_id =>\n-            {\n-                self.unify_substs(\n-                    &proj1.projection_ty.substitution,\n-                    &proj2.projection_ty.substitution,\n-                    depth + 1,\n-                ) && self.unify_inner(&proj1.ty, &proj2.ty, depth + 1)\n+            (\n+                GenericPredicate::AliasEq(AliasEq { alias: alias1, ty: ty1 }),\n+                GenericPredicate::AliasEq(AliasEq { alias: alias2, ty: ty2 }),\n+            ) => {\n+                let (substitution1, substitution2) = match (alias1, alias2) {\n+                    (AliasTy::Projection(projection_ty1), AliasTy::Projection(projection_ty2))\n+                        if projection_ty1.associated_ty_id == projection_ty2.associated_ty_id =>\n+                    {\n+                        (&projection_ty1.substitution, &projection_ty2.substitution)\n+                    }\n+                    (AliasTy::Opaque(opaque1), AliasTy::Opaque(opaque2))\n+                        if opaque1.opaque_ty_id == opaque2.opaque_ty_id =>\n+                    {\n+                        (&opaque1.substitution, &opaque2.substitution)\n+                    }\n+                    _ => return false,\n+                };\n+                self.unify_substs(&substitution1, &substitution2, depth + 1)\n+                    && self.unify_inner(&ty1, &ty2, depth + 1)\n             }\n             _ => false,\n         }"}, {"sha": "2afcb5413784b6ec92cc032ffc314777c2b2fe01", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -45,7 +45,7 @@ pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n-pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n+pub use traits::{AliasEq, InEnvironment, Obligation, TraitEnvironment};\n \n pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind};\n \n@@ -72,6 +72,20 @@ pub struct OpaqueTy {\n     pub substitution: Substitution,\n }\n \n+impl TypeWalk for OpaqueTy {\n+    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n+        self.substitution.walk(f);\n+    }\n+\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n+        self.substitution.walk_mut_binders(f, binders);\n+    }\n+}\n+\n /// A \"projection\" type corresponds to an (unnormalized)\n /// projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the\n /// trait and all its parameters are fully known.\n@@ -133,6 +147,25 @@ pub enum AliasTy {\n     Opaque(OpaqueTy),\n }\n \n+impl TypeWalk for AliasTy {\n+    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n+        match self {\n+            AliasTy::Projection(it) => it.walk(f),\n+            AliasTy::Opaque(it) => it.walk(f),\n+        }\n+    }\n+\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n+        match self {\n+            AliasTy::Projection(it) => it.walk_mut_binders(f, binders),\n+            AliasTy::Opaque(it) => it.walk_mut_binders(f, binders),\n+        }\n+    }\n+}\n /// A type.\n ///\n /// See also the `TyKind` enum in rustc (librustc/ty/sty.rs), which represents\n@@ -535,7 +568,7 @@ pub enum GenericPredicate {\n     /// The given trait needs to be implemented for its type parameters.\n     Implemented(TraitRef),\n     /// An associated type bindings like in `Iterator<Item = T>`.\n-    Projection(ProjectionPredicate),\n+    AliasEq(AliasEq),\n     /// We couldn't resolve the trait reference. (If some type parameters can't\n     /// be resolved, they will just be Unknown).\n     Error,\n@@ -553,8 +586,10 @@ impl GenericPredicate {\n     pub fn trait_ref(&self, db: &dyn HirDatabase) -> Option<TraitRef> {\n         match self {\n             GenericPredicate::Implemented(tr) => Some(tr.clone()),\n-            GenericPredicate::Projection(proj) => Some(proj.projection_ty.trait_ref(db)),\n-            GenericPredicate::Error => None,\n+            GenericPredicate::AliasEq(AliasEq { alias: AliasTy::Projection(proj), .. }) => {\n+                Some(proj.trait_ref(db))\n+            }\n+            GenericPredicate::AliasEq(_) | GenericPredicate::Error => None,\n         }\n     }\n }\n@@ -563,7 +598,7 @@ impl TypeWalk for GenericPredicate {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         match self {\n             GenericPredicate::Implemented(trait_ref) => trait_ref.walk(f),\n-            GenericPredicate::Projection(projection_pred) => projection_pred.walk(f),\n+            GenericPredicate::AliasEq(alias_eq) => alias_eq.walk(f),\n             GenericPredicate::Error => {}\n         }\n     }\n@@ -575,9 +610,7 @@ impl TypeWalk for GenericPredicate {\n     ) {\n         match self {\n             GenericPredicate::Implemented(trait_ref) => trait_ref.walk_mut_binders(f, binders),\n-            GenericPredicate::Projection(projection_pred) => {\n-                projection_pred.walk_mut_binders(f, binders)\n-            }\n+            GenericPredicate::AliasEq(alias_eq) => alias_eq.walk_mut_binders(f, binders),\n             GenericPredicate::Error => {}\n         }\n     }"}, {"sha": "7d22c3df598cf2959b4fe0ff18cac6efbc1cf64d", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -33,8 +33,8 @@ use crate::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n         variant_data,\n     },\n-    AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig, GenericPredicate,\n-    ImplTraitId, OpaqueTy, PolyFnSig, ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait,\n+    AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig,\n+    GenericPredicate, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, ReturnTypeImplTrait,\n     ReturnTypeImplTraits, Substitution, TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n };\n \n@@ -750,9 +750,9 @@ impl<'a> TyLoweringContext<'a> {\n                 );\n                 if let Some(type_ref) = &binding.type_ref {\n                     let ty = self.lower_ty(type_ref);\n-                    let projection_predicate =\n-                        ProjectionPredicate { projection_ty: projection_ty.clone(), ty };\n-                    preds.push(GenericPredicate::Projection(projection_predicate));\n+                    let alias_eq =\n+                        AliasEq { alias: AliasTy::Projection(projection_ty.clone()), ty };\n+                    preds.push(GenericPredicate::AliasEq(alias_eq));\n                 }\n                 for bound in &binding.bounds {\n                     preds.extend(self.lower_type_bound("}, {"sha": "ac7de7605687a5010a90718a20077fe3a9e15af8", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -8,10 +8,9 @@ use chalk_solve::{logging_db::LoggingRustIrDatabase, Solver};\n use hir_def::{lang_item::LangItemTarget, TraitId};\n use stdx::panic_context;\n \n-use crate::{db::HirDatabase, DebruijnIndex, Substitution};\n-\n-use super::{\n-    Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TyKind, TypeWalk,\n+use crate::{\n+    db::HirDatabase, AliasTy, Canonical, DebruijnIndex, GenericPredicate, HirDisplay, Substitution,\n+    TraitRef, Ty, TyKind, TypeWalk,\n };\n \n use self::chalk::{from_chalk, Interner, ToChalk};\n@@ -93,40 +92,44 @@ pub enum Obligation {\n     /// Prove that a certain type implements a trait (the type is the `Self` type\n     /// parameter to the `TraitRef`).\n     Trait(TraitRef),\n-    Projection(ProjectionPredicate),\n+    AliasEq(AliasEq),\n }\n \n impl Obligation {\n     pub fn from_predicate(predicate: GenericPredicate) -> Option<Obligation> {\n         match predicate {\n             GenericPredicate::Implemented(trait_ref) => Some(Obligation::Trait(trait_ref)),\n-            GenericPredicate::Projection(projection_pred) => {\n-                Some(Obligation::Projection(projection_pred))\n-            }\n+            GenericPredicate::AliasEq(alias_eq) => Some(Obligation::AliasEq(alias_eq)),\n             GenericPredicate::Error => None,\n         }\n     }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct ProjectionPredicate {\n-    pub projection_ty: ProjectionTy,\n+pub struct AliasEq {\n+    pub alias: AliasTy,\n     pub ty: Ty,\n }\n \n-impl TypeWalk for ProjectionPredicate {\n+impl TypeWalk for AliasEq {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.projection_ty.walk(f);\n         self.ty.walk(f);\n+        match &self.alias {\n+            AliasTy::Projection(projection_ty) => projection_ty.walk(f),\n+            AliasTy::Opaque(opaque) => opaque.walk(f),\n+        }\n     }\n \n     fn walk_mut_binders(\n         &mut self,\n         f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n         binders: DebruijnIndex,\n     ) {\n-        self.projection_ty.walk_mut_binders(f, binders);\n         self.ty.walk_mut_binders(f, binders);\n+        match &mut self.alias {\n+            AliasTy::Projection(projection_ty) => projection_ty.walk_mut_binders(f, binders),\n+            AliasTy::Opaque(opaque) => opaque.walk_mut_binders(f, binders),\n+        }\n     }\n }\n \n@@ -138,12 +141,14 @@ pub(crate) fn trait_solve_query(\n ) -> Option<Solution> {\n     let _p = profile::span(\"trait_solve_query\").detail(|| match &goal.value.value {\n         Obligation::Trait(it) => db.trait_data(it.hir_trait_id()).name.to_string(),\n-        Obligation::Projection(_) => \"projection\".to_string(),\n+        Obligation::AliasEq(_) => \"alias_eq\".to_string(),\n     });\n     log::info!(\"trait_solve_query({})\", goal.value.value.display(db));\n \n-    if let Obligation::Projection(pred) = &goal.value.value {\n-        if let TyKind::BoundVar(_) = &pred.projection_ty.substitution[0].interned(&Interner) {\n+    if let Obligation::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), .. }) =\n+        &goal.value.value\n+    {\n+        if let TyKind::BoundVar(_) = &projection_ty.substitution[0].interned(&Interner) {\n             // Hack: don't ask Chalk to normalize with an unknown self type, it'll say that's impossible\n             return Some(Solution::Ambig(Guidance::Unknown));\n         }"}, {"sha": "080764e762362a00b2af2000f3c4060e4426f983", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id, to_chalk_trait_id,\n     utils::generics,\n-    BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId, GenericPredicate,\n-    ProjectionPredicate, ProjectionTy, Substitution, TraitRef, Ty, TyKind,\n+    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, DebruijnIndex, FnDefId,\n+    GenericPredicate, ProjectionTy, Substitution, TraitRef, Ty, TyKind,\n };\n use mapping::{\n     convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n@@ -229,18 +229,18 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                             .intern(&Interner),\n                         ),\n                     });\n-                    let proj_bound = GenericPredicate::Projection(ProjectionPredicate {\n-                        // The parameter of the opaque type.\n-                        ty: TyKind::BoundVar(BoundVar { debruijn: DebruijnIndex::ONE, index: 0 })\n-                            .intern(&Interner),\n-                        projection_ty: ProjectionTy {\n+                    let proj_bound = GenericPredicate::AliasEq(AliasEq {\n+                        alias: AliasTy::Projection(ProjectionTy {\n                             associated_ty_id: to_assoc_type_id(future_output),\n                             // Self type as the first parameter.\n                             substitution: Substitution::single(\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n                                     .intern(&Interner),\n                             ),\n-                        },\n+                        }),\n+                        // The parameter of the opaque type.\n+                        ty: TyKind::BoundVar(BoundVar { debruijn: DebruijnIndex::ONE, index: 0 })\n+                            .intern(&Interner),\n                     });\n                     let bound = OpaqueTyDatumBound {\n                         bounds: make_binders("}, {"sha": "62b779008fb9c4904e4682b61698bc9a6df8a2d9", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 59, "deletions": 33, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8996b1a2353539cb9c264d0effbde80567de6586/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=8996b1a2353539cb9c264d0effbde80567de6586", "patch": "@@ -14,8 +14,8 @@ use crate::{\n     from_assoc_type_id,\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n-    AliasTy, CallableDefId, FnPointer, GenericPredicate, InEnvironment, OpaqueTy,\n-    ProjectionPredicate, ProjectionTy, Scalar, Substitution, TraitRef, Ty,\n+    AliasTy, CallableDefId, FnPointer, GenericPredicate, InEnvironment, OpaqueTy, ProjectionTy,\n+    Scalar, Substitution, TraitRef, Ty,\n };\n \n use super::interner::*;\n@@ -314,12 +314,10 @@ impl ToChalk for GenericPredicate {\n                 let chalk_trait_ref = chalk_trait_ref.shifted_in(&Interner);\n                 make_binders(chalk_ir::WhereClause::Implemented(chalk_trait_ref), 0)\n             }\n-            GenericPredicate::Projection(projection_pred) => {\n-                let ty = projection_pred.ty.to_chalk(db).shifted_in(&Interner);\n-                let projection = projection_pred.projection_ty.to_chalk(db).shifted_in(&Interner);\n-                let alias = chalk_ir::AliasTy::Projection(projection);\n-                make_binders(chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq { alias, ty }), 0)\n-            }\n+            GenericPredicate::AliasEq(alias_eq) => make_binders(\n+                chalk_ir::WhereClause::AliasEq(alias_eq.to_chalk(db).shifted_in(&Interner)),\n+                0,\n+            ),\n             GenericPredicate::Error => panic!(\"tried passing GenericPredicate::Error to Chalk\"),\n         }\n     }\n@@ -338,16 +336,8 @@ impl ToChalk for GenericPredicate {\n             chalk_ir::WhereClause::Implemented(tr) => {\n                 GenericPredicate::Implemented(from_chalk(db, tr))\n             }\n-            chalk_ir::WhereClause::AliasEq(projection_eq) => {\n-                let projection_ty = from_chalk(\n-                    db,\n-                    match projection_eq.alias {\n-                        chalk_ir::AliasTy::Projection(p) => p,\n-                        _ => unimplemented!(),\n-                    },\n-                );\n-                let ty = from_chalk(db, projection_eq.ty);\n-                GenericPredicate::Projection(ProjectionPredicate { projection_ty, ty })\n+            chalk_ir::WhereClause::AliasEq(alias_eq) => {\n+                GenericPredicate::AliasEq(from_chalk(db, alias_eq))\n             }\n \n             chalk_ir::WhereClause::LifetimeOutlives(_) => {\n@@ -383,19 +373,55 @@ impl ToChalk for ProjectionTy {\n         }\n     }\n }\n+impl ToChalk for OpaqueTy {\n+    type Chalk = chalk_ir::OpaqueTy<Interner>;\n+\n+    fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk {\n+        chalk_ir::OpaqueTy {\n+            opaque_ty_id: self.opaque_ty_id,\n+            substitution: self.substitution.to_chalk(db),\n+        }\n+    }\n+\n+    fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n+        OpaqueTy {\n+            opaque_ty_id: chalk.opaque_ty_id,\n+            substitution: from_chalk(db, chalk.substitution),\n+        }\n+    }\n+}\n+\n+impl ToChalk for AliasTy {\n+    type Chalk = chalk_ir::AliasTy<Interner>;\n+\n+    fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk {\n+        match self {\n+            AliasTy::Projection(projection_ty) => {\n+                chalk_ir::AliasTy::Projection(projection_ty.to_chalk(db))\n+            }\n+            AliasTy::Opaque(opaque_ty) => chalk_ir::AliasTy::Opaque(opaque_ty.to_chalk(db)),\n+        }\n+    }\n+\n+    fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n+        match chalk {\n+            chalk_ir::AliasTy::Projection(projection_ty) => {\n+                AliasTy::Projection(from_chalk(db, projection_ty))\n+            }\n+            chalk_ir::AliasTy::Opaque(opaque_ty) => AliasTy::Opaque(from_chalk(db, opaque_ty)),\n+        }\n+    }\n+}\n \n-impl ToChalk for ProjectionPredicate {\n+impl ToChalk for AliasEq {\n     type Chalk = chalk_ir::AliasEq<Interner>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::AliasEq<Interner> {\n-        chalk_ir::AliasEq {\n-            alias: chalk_ir::AliasTy::Projection(self.projection_ty.to_chalk(db)),\n-            ty: self.ty.to_chalk(db),\n-        }\n+        chalk_ir::AliasEq { alias: self.alias.to_chalk(db), ty: self.ty.to_chalk(db) }\n     }\n \n-    fn from_chalk(_db: &dyn HirDatabase, _normalize: chalk_ir::AliasEq<Interner>) -> Self {\n-        unimplemented!()\n+    fn from_chalk(db: &dyn HirDatabase, alias_eq: chalk_ir::AliasEq<Interner>) -> Self {\n+        AliasEq { alias: from_chalk(db, alias_eq.alias), ty: from_chalk(db, alias_eq.ty) }\n     }\n }\n \n@@ -405,7 +431,7 @@ impl ToChalk for Obligation {\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::DomainGoal<Interner> {\n         match self {\n             Obligation::Trait(tr) => tr.to_chalk(db).cast(&Interner),\n-            Obligation::Projection(pr) => pr.to_chalk(db).cast(&Interner),\n+            Obligation::AliasEq(alias_eq) => alias_eq.to_chalk(db).cast(&Interner),\n         }\n     }\n \n@@ -527,29 +553,29 @@ pub(super) fn generic_predicate_to_inline_bound(\n             let trait_bound = rust_ir::TraitBound { trait_id: trait_ref.trait_id, args_no_self };\n             Some(rust_ir::InlineBound::TraitBound(trait_bound))\n         }\n-        GenericPredicate::Projection(proj) => {\n-            if &proj.projection_ty.substitution[0] != self_ty {\n+        GenericPredicate::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n+            if &projection_ty.substitution[0] != self_ty {\n                 return None;\n             }\n-            let trait_ = match from_assoc_type_id(proj.projection_ty.associated_ty_id)\n+            let trait_ = match from_assoc_type_id(projection_ty.associated_ty_id)\n                 .lookup(db.upcast())\n                 .container\n             {\n                 AssocContainerId::TraitId(t) => t,\n                 _ => panic!(\"associated type not in trait\"),\n             };\n-            let args_no_self = proj.projection_ty.substitution[1..]\n+            let args_no_self = projection_ty.substitution[1..]\n                 .iter()\n                 .map(|ty| ty.clone().to_chalk(db).cast(&Interner))\n                 .collect();\n             let alias_eq_bound = rust_ir::AliasEqBound {\n-                value: proj.ty.clone().to_chalk(db),\n+                value: ty.clone().to_chalk(db),\n                 trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n-                associated_ty_id: proj.projection_ty.associated_ty_id,\n+                associated_ty_id: projection_ty.associated_ty_id,\n                 parameters: Vec::new(), // FIXME we don't support generic associated types yet\n             };\n             Some(rust_ir::InlineBound::AliasEqBound(alias_eq_bound))\n         }\n-        GenericPredicate::Error => None,\n+        _ => None,\n     }\n }"}]}