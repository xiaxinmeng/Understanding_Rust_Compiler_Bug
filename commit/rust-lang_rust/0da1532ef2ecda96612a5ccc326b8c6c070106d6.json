{"sha": "0da1532ef2ecda96612a5ccc326b8c6c070106d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTE1MzJlZjJlY2RhOTY2MTJhNWNjYzMyNmI4YzZjMDcwMTA2ZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-17T15:27:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-17T17:10:39Z"}, "message": "Minor code style", "tree": {"sha": "96145829dd132e6716dc77897e8d94a8f937dcef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96145829dd132e6716dc77897e8d94a8f937dcef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da1532ef2ecda96612a5ccc326b8c6c070106d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da1532ef2ecda96612a5ccc326b8c6c070106d6", "html_url": "https://github.com/rust-lang/rust/commit/0da1532ef2ecda96612a5ccc326b8c6c070106d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da1532ef2ecda96612a5ccc326b8c6c070106d6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4368a3bcebca131dd5c7ccecc54e64b3c5bd0c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/4368a3bcebca131dd5c7ccecc54e64b3c5bd0c78", "html_url": "https://github.com/rust-lang/rust/commit/4368a3bcebca131dd5c7ccecc54e64b3c5bd0c78"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "75a2358fa7d8abe44bec7749e4515d063f79e8fb", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0da1532ef2ecda96612a5ccc326b8c6c070106d6/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da1532ef2ecda96612a5ccc326b8c6c070106d6/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=0da1532ef2ecda96612a5ccc326b8c6c070106d6", "patch": "@@ -111,21 +111,17 @@ pub(crate) fn runnable(\n     }\n }\n \n-fn runnable_fn(\n-    sema: &Semantics<RootDatabase>,\n-    fn_def: ast::Fn,\n-    file_id: FileId,\n-) -> Option<Runnable> {\n-    let def = sema.to_def(&fn_def)?;\n-    let name_string = fn_def.name()?.text().to_string();\n+fn runnable_fn(sema: &Semantics<RootDatabase>, func: ast::Fn, file_id: FileId) -> Option<Runnable> {\n+    let def = sema.to_def(&func)?;\n+    let name_string = func.name()?.text().to_string();\n \n     let attrs = def.attrs(sema.db);\n     let kind = if name_string == \"main\" {\n         RunnableKind::Bin\n     } else {\n-        let test_id = match sema.to_def(&fn_def).map(|def| def.module(sema.db)) {\n+        let test_id = match sema.to_def(&func).map(|def| def.module(sema.db)) {\n             Some(module) => {\n-                let def = sema.to_def(&fn_def)?;\n+                let def = sema.to_def(&func)?;\n                 let impl_trait_name = def.as_assoc_item(sema.db).and_then(|assoc_item| {\n                     match assoc_item.container(sema.db) {\n                         hir::AssocItemContainer::Trait(trait_item) => {\n@@ -159,10 +155,10 @@ fn runnable_fn(\n             None => TestId::Name(name_string),\n         };\n \n-        if test_related_attribute(&fn_def).is_some() {\n-            let attr = TestAttr::from_fn(&fn_def);\n+        if test_related_attribute(&func).is_some() {\n+            let attr = TestAttr::from_fn(&func);\n             RunnableKind::Test { test_id, attr }\n-        } else if fn_def.has_atom_attr(\"bench\") {\n+        } else if func.has_atom_attr(\"bench\") {\n             RunnableKind::Bench { test_id }\n         } else if has_runnable_doc_test(&attrs) {\n             RunnableKind::DocTest { test_id }\n@@ -171,35 +167,31 @@ fn runnable_fn(\n         }\n     };\n \n-    let cfg = attrs.cfg();\n-\n     let nav = if let RunnableKind::DocTest { .. } = kind {\n         NavigationTarget::from_doc_commented(\n             sema.db,\n-            InFile::new(file_id.into(), &fn_def),\n-            InFile::new(file_id.into(), &fn_def),\n+            InFile::new(file_id.into(), &func),\n+            InFile::new(file_id.into(), &func),\n         )\n     } else {\n-        NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &fn_def))\n+        NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &func))\n     };\n-    Some(Runnable { nav, kind, cfg })\n+    Some(Runnable { nav, kind, cfg: attrs.cfg() })\n }\n \n fn runnable_struct(\n     sema: &Semantics<RootDatabase>,\n-    struct_def: ast::Struct,\n+    strukt: ast::Struct,\n     file_id: FileId,\n ) -> Option<Runnable> {\n-    let def = sema.to_def(&struct_def)?;\n-    let name_string = struct_def.name()?.text().to_string();\n+    let def = sema.to_def(&strukt)?;\n+    let name_string = strukt.name()?.text().to_string();\n \n     let attrs = def.attrs(sema.db);\n     if !has_runnable_doc_test(&attrs) {\n         return None;\n     }\n-    let cfg = attrs.cfg();\n-\n-    let test_id = match sema.to_def(&struct_def).map(|def| def.module(sema.db)) {\n+    let test_id = match sema.to_def(&strukt).map(|def| def.module(sema.db)) {\n         Some(module) => {\n             let path_iter = module\n                 .path_to_root(sema.db)\n@@ -216,10 +208,10 @@ fn runnable_struct(\n \n     let nav = NavigationTarget::from_doc_commented(\n         sema.db,\n-        InFile::new(file_id.into(), &struct_def),\n-        InFile::new(file_id.into(), &struct_def),\n+        InFile::new(file_id.into(), &strukt),\n+        InFile::new(file_id.into(), &strukt),\n     );\n-    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg })\n+    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg: attrs.cfg() })\n }\n \n #[derive(Debug, Copy, Clone)]"}]}