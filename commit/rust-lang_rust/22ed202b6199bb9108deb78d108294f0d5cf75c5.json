{"sha": "22ed202b6199bb9108deb78d108294f0d5cf75c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZWQyMDJiNjE5OWJiOTEwOGRlYjc4ZDEwODI5NGYwZDVjZjc1YzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-10T23:22:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-10T23:22:22Z"}, "message": "tutorial: Remove memory model section", "tree": {"sha": "ba4a51246e8946d8aa2f0bfc310ae1ed8ca2bc96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba4a51246e8946d8aa2f0bfc310ae1ed8ca2bc96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22ed202b6199bb9108deb78d108294f0d5cf75c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22ed202b6199bb9108deb78d108294f0d5cf75c5", "html_url": "https://github.com/rust-lang/rust/commit/22ed202b6199bb9108deb78d108294f0d5cf75c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22ed202b6199bb9108deb78d108294f0d5cf75c5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0f84823aeaef324eb3bb2d7131c80b9630f370", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0f84823aeaef324eb3bb2d7131c80b9630f370", "html_url": "https://github.com/rust-lang/rust/commit/fe0f84823aeaef324eb3bb2d7131c80b9630f370"}], "stats": {"total": 70, "additions": 0, "deletions": 70}, "files": [{"sha": "bce03c4a5ff74cd7e0f2366bc86dc0818a87ebad", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/22ed202b6199bb9108deb78d108294f0d5cf75c5/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/22ed202b6199bb9108deb78d108294f0d5cf75c5/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=22ed202b6199bb9108deb78d108294f0d5cf75c5", "patch": "@@ -841,76 +841,6 @@ as in this example that unpacks the first value from a tuple and returns it.\n fn first((value, _): (int, float)) -> int { value }\n ~~~\n \n-\n-# The Rust memory model\n-\n-At this junction, let's take a detour to explain the concepts involved\n-in Rust's memory model. We've seen some of Rust's pointer sigils (`@`,\n-`~`, and `&`) float by in a few examples, and we aren't going to get\n-much further without explaining them. Rust has a very particular\n-approach to memory management that plays a significant role in shaping\n-the subjective experience of programming in the\n-language. Understanding the memory landscape will illuminate several\n-of Rust's unique features as we encounter them.\n-\n-Rust has three competing goals that inform its view of memory:\n-\n-* Memory safety: Memory that the Rust language can observe must be\n-  guaranteed to be valid. Under normal circumstances, it must be\n-  impossible for Rust to trigger a segmentation fault or leak memory.\n-* Performance: High-performance low-level code must be able to use\n-  a number of different allocation strategies. Tracing garbage collection must be\n-  optional and, if it is not desired, memory safety must not be compromised.\n-  Less performance-critical, high-level code should be able to employ a single,\n-  garbage-collection-based, heap allocation strategy.\n-* Concurrency: Rust code must be free of in-memory data races. (Note that other\n-  types of races are still possible.)\n-\n-## How performance considerations influence the memory model\n-\n-Most languages that offer strong memory safety guarantees rely on a\n-garbage-collected heap to manage all of the objects. This approach is\n-straightforward both in concept and in implementation, but has\n-significant costs. Languages that follow this path tend to\n-aggressively pursue ways to ameliorate allocation costs (think the\n-Java Virtual Machine). Rust supports this strategy with _managed\n-boxes_: memory allocated on the heap whose lifetime is managed\n-by the garbage collector.\n-\n-By comparison, languages like C++ offer very precise control over\n-where objects are allocated. In particular, it is common to allocate them\n-directly on the stack, avoiding expensive heap allocation. In Rust\n-this is possible as well, and the compiler uses a [clever _pointer\n-lifetime analysis_][borrow] to ensure that no variable can refer to stack\n-objects after they are destroyed.\n-\n-[borrow]: tutorial-borrowed-ptr.html\n-\n-## How concurrency considerations influence the memory model\n-\n-Memory safety in a concurrent environment involves avoiding race\n-conditions between two threads of execution accessing the same\n-memory. Even high-level languages often require programmers to make\n-correct use of locking to ensure that a program is free of races.\n-\n-Rust starts from the position that memory cannot be shared between\n-tasks. Experience in other languages has proven that isolating each\n-task's heap from the others is a reliable strategy and one that is\n-easy for programmers to reason about. Heap isolation has the\n-additional benefit that garbage collection must only be done\n-per-heap. Rust never \"stops the world\" to reclaim memory.\n-\n-Complete isolation of heaps between tasks would, however, mean that\n-any data transferred between tasks must be copied. While this is a\n-fine and useful way to implement communication between tasks, it is\n-also very inefficient for large data structures. To reduce the amount\n-of copying, Rust also uses a global _exchange heap_. Objects allocated\n-in the exchange heap have _ownership semantics_, meaning that there is\n-only a single variable that refers to them. For this reason, they are\n-referred to as _owned boxes_. All tasks may allocate objects on the\n-exchange heap, then transfer ownership of those objects to other\n-tasks, avoiding expensive copies.\n-\n # Boxes and pointers\n \n Many modern languages have a so-called \"uniform representation\" for"}]}