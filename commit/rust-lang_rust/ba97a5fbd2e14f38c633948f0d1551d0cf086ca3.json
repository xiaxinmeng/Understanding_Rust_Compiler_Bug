{"sha": "ba97a5fbd2e14f38c633948f0d1551d0cf086ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOTdhNWZiZDJlMTRmMzhjNjMzOTQ4ZjBkMTU1MWQwY2YwODZjYTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-25T12:24:13Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-25T12:24:13Z"}, "message": "Merge #1436\n\n1436: Method resolution for slices r=sinkuu a=sinkuu\n\n`impl<T> [T]` is separately defined in `core` and `alloc`, so I changed `def_crate` function in `method_resolution.rs` to return multiple crates.\n\nCo-authored-by: Shotaro Yamada <sinkuu@sinkuu.xyz>", "tree": {"sha": "df5e601fe4b82de37c849522a06453925e457d7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5e601fe4b82de37c849522a06453925e457d7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba97a5fbd2e14f38c633948f0d1551d0cf086ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba97a5fbd2e14f38c633948f0d1551d0cf086ca3", "html_url": "https://github.com/rust-lang/rust/commit/ba97a5fbd2e14f38c633948f0d1551d0cf086ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba97a5fbd2e14f38c633948f0d1551d0cf086ca3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "364ac9b9468e1930f39e0dddc454b2eb7d68f360", "url": "https://api.github.com/repos/rust-lang/rust/commits/364ac9b9468e1930f39e0dddc454b2eb7d68f360", "html_url": "https://github.com/rust-lang/rust/commit/364ac9b9468e1930f39e0dddc454b2eb7d68f360"}, {"sha": "9668737d0595874c9cf287c81f8026d320290c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/9668737d0595874c9cf287c81f8026d320290c35", "html_url": "https://github.com/rust-lang/rust/commit/9668737d0595874c9cf287c81f8026d320290c35"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "e023ff25a2dbdaa1f701a1ede86387d6b25790c1", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ba97a5fbd2e14f38c633948f0d1551d0cf086ca3/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba97a5fbd2e14f38c633948f0d1551d0cf086ca3/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=ba97a5fbd2e14f38c633948f0d1551d0cf086ca3", "patch": "@@ -4,6 +4,7 @@\n //! and the corresponding code mostly in librustc_typeck/check/method/probe.rs.\n use std::sync::Arc;\n \n+use arrayvec::ArrayVec;\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -113,19 +114,32 @@ impl CrateImplBlocks {\n     }\n }\n \n-fn def_crate(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<Crate> {\n+fn def_crates(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<ArrayVec<[Crate; 2]>> {\n+    // Types like slice can have inherent impls in several crates, (core and alloc).\n+    // The correspoinding impls are marked with lang items, so we can use them to find the required crates.\n+    macro_rules! lang_item_crate {\n+        ($db:expr, $cur_crate:expr, $($name:expr),+ $(,)?) => {{\n+            let mut v = ArrayVec::<[Crate; 2]>::new();\n+            $(\n+                v.push($db.lang_item($cur_crate, $name.into())?.krate($db)?);\n+            )+\n+            Some(v)\n+        }};\n+    }\n+\n     match ty {\n         Ty::Apply(a_ty) => match a_ty.ctor {\n-            TypeCtor::Adt(def_id) => def_id.krate(db),\n-            TypeCtor::Bool => db.lang_item(cur_crate, \"bool\".into())?.krate(db),\n-            TypeCtor::Char => db.lang_item(cur_crate, \"char\".into())?.krate(db),\n+            TypeCtor::Adt(def_id) => Some(std::iter::once(def_id.krate(db)?).collect()),\n+            TypeCtor::Bool => lang_item_crate!(db, cur_crate, \"bool\"),\n+            TypeCtor::Char => lang_item_crate!(db, cur_crate, \"char\"),\n             TypeCtor::Float(UncertainFloatTy::Known(f)) => {\n-                db.lang_item(cur_crate, f.ty_to_string().into())?.krate(db)\n+                lang_item_crate!(db, cur_crate, f.ty_to_string())\n             }\n             TypeCtor::Int(UncertainIntTy::Known(i)) => {\n-                db.lang_item(cur_crate, i.ty_to_string().into())?.krate(db)\n+                lang_item_crate!(db, cur_crate, i.ty_to_string())\n             }\n-            TypeCtor::Str => db.lang_item(cur_crate, \"str\".into())?.krate(db),\n+            TypeCtor::Str => lang_item_crate!(db, cur_crate, \"str\"),\n+            TypeCtor::Slice => lang_item_crate!(db, cur_crate, \"slice_alloc\", \"slice\"),\n             _ => None,\n         },\n         _ => None,\n@@ -218,19 +232,17 @@ fn iterate_inherent_methods<T>(\n     krate: Crate,\n     mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n ) -> Option<T> {\n-    let krate = match def_crate(db, krate, &ty.value) {\n-        Some(krate) => krate,\n-        None => return None,\n-    };\n-    let impls = db.impls_in_crate(krate);\n+    for krate in def_crates(db, krate, &ty.value)? {\n+        let impls = db.impls_in_crate(krate);\n \n-    for impl_block in impls.lookup_impl_blocks(&ty.value) {\n-        for item in impl_block.items(db) {\n-            if let ImplItem::Method(f) = item {\n-                let data = f.data(db);\n-                if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n-                    if let Some(result) = callback(&ty.value, f) {\n-                        return Some(result);\n+        for impl_block in impls.lookup_impl_blocks(&ty.value) {\n+            for item in impl_block.items(db) {\n+                if let ImplItem::Method(f) = item {\n+                    let data = f.data(db);\n+                    if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n+                        if let Some(result) = callback(&ty.value, f) {\n+                            return Some(result);\n+                        }\n                     }\n                 }\n             }\n@@ -248,13 +260,14 @@ impl Ty {\n         krate: Crate,\n         mut callback: impl FnMut(ImplItem) -> Option<T>,\n     ) -> Option<T> {\n-        let krate = def_crate(db, krate, &self)?;\n-        let impls = db.impls_in_crate(krate);\n+        for krate in def_crates(db, krate, &self)? {\n+            let impls = db.impls_in_crate(krate);\n \n-        for impl_block in impls.lookup_impl_blocks(&self) {\n-            for item in impl_block.items(db) {\n-                if let Some(result) = callback(item) {\n-                    return Some(result);\n+            for impl_block in impls.lookup_impl_blocks(&self) {\n+                for item in impl_block.items(db) {\n+                    if let Some(result) = callback(item) {\n+                        return Some(result);\n+                    }\n                 }\n             }\n         }"}]}