{"sha": "15a5bc9c52fdf8268544efb239bf9455b795c424", "node_id": "C_kwDOAAsO6NoAKDE1YTViYzljNTJmZGY4MjY4NTQ0ZWZiMjM5YmY5NDU1Yjc5NWM0MjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-14T13:56:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-14T13:56:23Z"}, "message": "Rollup merge of #101779 - eholk:drop-tracking-test-output, r=jyn514\n\nUpdate test output for drop tracking\n\n#97334 has a lot of updates to test outputs that makes the PR larger than it needs to be. This PR pulls those changes out so we can keep the other one as simple as possible.\n\nr? `@jyn514`", "tree": {"sha": "a15b9529a3211770abe582f803a89cbbf7ff191b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15b9529a3211770abe582f803a89cbbf7ff191b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a5bc9c52fdf8268544efb239bf9455b795c424", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjId2HCRBK7hj4Ov3rIwAAzDEIAF9tPbD5/Etl9ENjp2dRIMMq\nFvlsboqa/OxA0n0CLkZg9MSB768JJCgrxsfxQbngbokSqZD6Evr5KpRIofYyX3js\nSUSeZ43L86rxR5DDOnD05JJ1mfTXxr7qxVuCZM+j3PldAr8+8cmmYRhROfIeo0Z8\n5vDOQeTtHH6QpVI/cUQ6Lk/S49y1hMdYEV1+OqKm6Ss3gqSjcrB/24xQBemtDNu+\nppHbzAun7z4BiZs6I7lnGLEHbEboRkB+MraMqjE0F+BZ1ETz1F+9l7ezrbguyhQn\nyD/i5cJeug+Ft+5XfAHr7qfVeNTJKwixoyB6BNbFxRaTmBgSNItxRsqT/15cig8=\n=9+zP\n-----END PGP SIGNATURE-----\n", "payload": "tree a15b9529a3211770abe582f803a89cbbf7ff191b\nparent 3cb8806da60447c736296cfdf0adda0817254136\nparent 87bb475ae7f18fe57f081daaf95e5e47520163c8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663163783 +0530\ncommitter GitHub <noreply@github.com> 1663163783 +0530\n\nRollup merge of #101779 - eholk:drop-tracking-test-output, r=jyn514\n\nUpdate test output for drop tracking\n\n#97334 has a lot of updates to test outputs that makes the PR larger than it needs to be. This PR pulls those changes out so we can keep the other one as simple as possible.\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5bc9c52fdf8268544efb239bf9455b795c424", "html_url": "https://github.com/rust-lang/rust/commit/15a5bc9c52fdf8268544efb239bf9455b795c424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a5bc9c52fdf8268544efb239bf9455b795c424/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb8806da60447c736296cfdf0adda0817254136", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb8806da60447c736296cfdf0adda0817254136", "html_url": "https://github.com/rust-lang/rust/commit/3cb8806da60447c736296cfdf0adda0817254136"}, {"sha": "87bb475ae7f18fe57f081daaf95e5e47520163c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87bb475ae7f18fe57f081daaf95e5e47520163c8", "html_url": "https://github.com/rust-lang/rust/commit/87bb475ae7f18fe57f081daaf95e5e47520163c8"}], "stats": {"total": 444, "additions": 372, "deletions": 72}, "files": [{"sha": "3be7f370da3f59cc176d6270805c719250085b9e", "filename": "src/test/ui/async-await/async-await-let-else.drop-tracking.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -0,0 +1,110 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error[E0277]: `Rc<()>` cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL | async fn foo2(x: Option<bool>) {\n+   |                                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_send(foo2(Some(true)));\n+   |     ------- ^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:27:29\n+   |\n+LL |   async fn bar2<T>(_: T) -> ! {\n+   |  _____________________________^\n+LL | |     panic!()\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `ResumeTy`, `Option<bool>`, `impl Future<Output = !>`, `()`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:21:32\n+   |\n+LL |   async fn foo2(x: Option<bool>) {\n+   |  ________________________________^\n+LL | |     let Some(_) = x else {\n+LL | |         bar2(Rc::new(())).await\n+LL | |     };\n+LL | | }\n+   | |_^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |          |\n+   |          has type `Rc<()>` which is not `Send`\n+note: `Rc::new(())` is later dropped here\n+  --> $DIR/async-await-let-else.rs:33:35\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |                                   ^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "435cc845870f626619d5fd90d37acd691b27778d", "filename": "src/test/ui/async-await/async-await-let-else.no-drop-tracking.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:45:13\n+  --> $DIR/async-await-let-else.rs:48:13\n    |\n LL |     is_send(foo(Some(true)));\n    |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:8:14\n+  --> $DIR/async-await-let-else.rs:11:14\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n@@ -15,20 +15,20 @@ LL |         bar().await\n LL |     };\n    |     - `r` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:47:13\n+  --> $DIR/async-await-let-else.rs:50:13\n    |\n LL |     is_send(foo2(Some(true)));\n    |             ^^^^^^^^^^^^^^^^ future returned by `foo2` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:20:26\n+  --> $DIR/async-await-let-else.rs:23:26\n    |\n LL |         bar2(Rc::new(())).await\n    |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n@@ -37,45 +37,45 @@ LL |         bar2(Rc::new(())).await\n LL |     };\n    |      - `Rc::new(())` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:49:13\n+  --> $DIR/async-await-let-else.rs:52:13\n    |\n LL |     is_send(foo3(Some(true)));\n    |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:30:28\n+  --> $DIR/async-await-let-else.rs:33:28\n    |\n LL |         (Rc::new(()), bar().await);\n    |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n    |          |\n    |          has type `Rc<()>` which is not `Send`\n note: `Rc::new(())` is later dropped here\n-  --> $DIR/async-await-let-else.rs:30:35\n+  --> $DIR/async-await-let-else.rs:33:35\n    |\n LL |         (Rc::new(()), bar().await);\n    |                                   ^\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:51:13\n+  --> $DIR/async-await-let-else.rs:54:13\n    |\n LL |     is_send(foo4(Some(true)));\n    |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:38:14\n+  --> $DIR/async-await-let-else.rs:41:14\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n@@ -85,7 +85,7 @@ LL |         bar().await;\n LL |     };\n    |     - `r` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`", "previous_filename": "src/test/ui/async-await/async-await-let-else.stderr"}, {"sha": "4b287159d13e7791cf22ceeb4387de450d069dc0", "filename": "src/test/ui/async-await/async-await-let-else.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,4 +1,7 @@\n // edition:2021\n+// revisions: drop-tracking no-drop-tracking\n+// [drop-tracking] compile-flags: -Zdrop-tracking=yes\n+// [no-drop-tracking] compile-flags: -Zdrop-tracking=no\n #![feature(let_else)]\n use std::rc::Rc;\n \n@@ -43,11 +46,11 @@ async fn foo4(x: Option<bool>) {\n \n fn main() {\n     is_send(foo(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n     is_send(foo2(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n     is_send(foo3(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n     is_send(foo4(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n }"}, {"sha": "f609e36362c440e0e8b5d87995d40027e39f2e19", "filename": "src/test/ui/async-await/issue-64130-4-async-move.drop-tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.drop-tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-4-async-move.rs:15:17\n+  --> $DIR/issue-64130-4-async-move.rs:19:17\n    |\n LL | pub fn foo() -> impl Future + Send {\n    |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:21:31\n+  --> $DIR/issue-64130-4-async-move.rs:25:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n@@ -17,7 +17,7 @@ LL |                 let _x = get().await;\n LL |     }\n    |     - `client` is later dropped here\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-64130-4-async-move.rs:19:15\n+  --> $DIR/issue-64130-4-async-move.rs:23:15\n    |\n LL |         match client.status() {\n    |               ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr"}, {"sha": "f609e36362c440e0e8b5d87995d40027e39f2e19", "filename": "src/test/ui/async-await/issue-64130-4-async-move.no_drop_tracking.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.no_drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -0,0 +1,26 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-64130-4-async-move.rs:19:17\n+   |\n+LL | pub fn foo() -> impl Future + Send {\n+   |                 ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-64130-4-async-move.rs:25:31\n+   |\n+LL |         match client.status() {\n+   |               ------ has type `&Client` which is not `Send`\n+LL |             200 => {\n+LL |                 let _x = get().await;\n+   |                               ^^^^^^ await occurs here, with `client` maybe used later\n+...\n+LL |     }\n+   |     - `client` is later dropped here\n+help: consider moving this into a `let` binding to create a shorter lived borrow\n+  --> $DIR/issue-64130-4-async-move.rs:23:15\n+   |\n+LL |         match client.status() {\n+   |               ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a38428fc00f0bb63be5c6cda36ef22f81cc10536", "filename": "src/test/ui/async-await/issue-64130-4-async-move.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.rs?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,4 +1,8 @@\n // edition:2018\n+// revisions: no_drop_tracking drop_tracking\n+// [drop_tracking] check-pass\n+// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n+// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n use std::any::Any;\n use std::future::Future;\n \n@@ -10,16 +14,16 @@ impl Client {\n     }\n }\n \n-async fn get() { }\n+async fn get() {}\n \n pub fn foo() -> impl Future + Send {\n-    //~^ ERROR future cannot be sent between threads safely\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     let client = Client(Box::new(true));\n     async move {\n         match client.status() {\n             200 => {\n                 let _x = get().await;\n-            },\n+            }\n             _ => (),\n         }\n     }"}, {"sha": "c915164cfce86939c0d902138dc25f0bb80eb7e4", "filename": "src/test/ui/async-await/issue-68112.drop_tracking.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -0,0 +1,79 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:37:18\n+   |\n+LL |     require_send(send_fut);\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:34:17\n+   |\n+LL |         let _ = non_send_fut.await;\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:46:18\n+   |\n+LL |     require_send(send_fut);\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:43:17\n+   |\n+LL |         let _ = make_non_send_future1().await;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:65:18\n+   |\n+LL |     require_send(send_fut);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-68112.rs:50:31\n+   |\n+LL |   async fn ready2<T>(t: T) -> T {\n+   |  _______________________________^\n+LL | |     t\n+LL | | }\n+   | |_^\n+note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:53:31\n+   |\n+LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-68112.rs:60:26\n+   |\n+LL |       let send_fut = async {\n+   |  __________________________^\n+LL | |         let non_send_fut = make_non_send_future2();\n+LL | |         let _ = non_send_fut.await;\n+LL | |         ready(0).await;\n+LL | |     };\n+   | |_____^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "11b7d1aaaa6c72621050a9c7c1337f4d103a7bed", "filename": "src/test/ui/async-await/issue-68112.no_drop_tracking.stderr", "status": "renamed", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,41 +1,41 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:34:18\n+  --> $DIR/issue-68112.rs:37:18\n    |\n LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/issue-68112.rs:31:17\n+  --> $DIR/issue-68112.rs:34:17\n    |\n LL |         let _ = non_send_fut.await;\n    |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:11:25\n+  --> $DIR/issue-68112.rs:14:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:43:18\n+  --> $DIR/issue-68112.rs:46:18\n    |\n LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/issue-68112.rs:40:17\n+  --> $DIR/issue-68112.rs:43:17\n    |\n LL |         let _ = make_non_send_future1().await;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:11:25\n+  --> $DIR/issue-68112.rs:14:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:60:18\n+  --> $DIR/issue-68112.rs:65:18\n    |\n LL |     require_send(send_fut);\n    |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n@@ -45,18 +45,21 @@ LL |     require_send(send_fut);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this `async fn` body\n-  --> $DIR/issue-68112.rs:47:31\n+  --> $DIR/issue-68112.rs:50:31\n    |\n-LL | async fn ready2<T>(t: T) -> T { t }\n-   |                               ^^^^^\n+LL |   async fn ready2<T>(t: T) -> T {\n+   |  _______________________________^\n+LL | |     t\n+LL | | }\n+   | |_^\n note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:48:31\n+  --> $DIR/issue-68112.rs:53:31\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n note: required because it's used within this `async` block\n-  --> $DIR/issue-68112.rs:55:26\n+  --> $DIR/issue-68112.rs:60:26\n    |\n LL |       let send_fut = async {\n    |  __________________________^\n@@ -66,7 +69,7 @@ LL | |         ready(0).await;\n LL | |     };\n    | |_____^\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:11:25\n+  --> $DIR/issue-68112.rs:14:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`", "previous_filename": "src/test/ui/async-await/issue-68112.stderr"}, {"sha": "9c705137a10564580ae16023f193c355ee6672d5", "filename": "src/test/ui/async-await/issue-68112.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,10 +1,13 @@\n // edition:2018\n+// revisions: no_drop_tracking drop_tracking\n+// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n+// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n \n use std::{\n-    future::Future,\n     cell::RefCell,\n-    sync::Arc,\n+    future::Future,\n     pin::Pin,\n+    sync::Arc,\n     task::{Context, Poll},\n };\n \n@@ -44,7 +47,9 @@ fn test1_no_let() {\n     //~^ ERROR future cannot be sent between threads\n }\n \n-async fn ready2<T>(t: T) -> T { t }\n+async fn ready2<T>(t: T) -> T {\n+    t\n+}\n fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n     ready2(Arc::new(RefCell::new(0)))\n }"}, {"sha": "198de7bf79f3668394cd1fbe5f9a1bce88b59bf9", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,26 +1,26 @@\n error[E0277]: `Sender<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-70935-complex-spans.rs:12:45\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n    |\n LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |                                             ^^^^^^^^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n    = note: required for `&Sender<i32>` to implement `Send`\n note: required because it's used within this closure\n-  --> $DIR/issue-70935-complex-spans.rs:16:13\n+  --> $DIR/issue-70935-complex-spans.rs:17:13\n    |\n LL |         baz(|| async{\n    |             ^^\n note: required because it's used within this `async fn` body\n-  --> $DIR/issue-70935-complex-spans.rs:9:67\n+  --> $DIR/issue-70935-complex-spans.rs:10:67\n    |\n LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n LL | | }\n    | |_^\n    = note: required because it captures the following types: `ResumeTy`, `impl for<'r, 's, 't0> Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n-  --> $DIR/issue-70935-complex-spans.rs:15:16\n+  --> $DIR/issue-70935-complex-spans.rs:16:16\n    |\n LL |       async move {\n    |  ________________^"}, {"sha": "34b31198e4f613a16a485e4d1d5a0ea144e7f9e8", "filename": "src/test/ui/async-await/issue-70935-complex-spans.no_drop_tracking.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.no_drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,22 +1,22 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70935-complex-spans.rs:12:45\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n    |\n LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |                                             ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:18:11\n+  --> $DIR/issue-70935-complex-spans.rs:19:11\n    |\n LL |           baz(|| async{\n    |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n    | |         - ^^^^^^ await occurs here, with the value maybe used later\n    | |_________|\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:16:13: 16:15]` which is not `Send`\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:17:13: 17:15]` which is not `Send`\n note: the value is later dropped here\n-  --> $DIR/issue-70935-complex-spans.rs:18:17\n+  --> $DIR/issue-70935-complex-spans.rs:19:17\n    |\n LL |         }).await;\n    |                 ^", "previous_filename": "src/test/ui/async-await/issue-70935-complex-spans.normal.stderr"}, {"sha": "b6d17f93a6675119914d4467741fea2fbcac046e", "filename": "src/test/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,5 +1,6 @@\n // edition:2018\n-// revisions: normal drop_tracking\n+// revisions: no_drop_tracking drop_tracking\n+// [no_drop_tracking]compile-flags:-Zdrop-tracking=no\n // [drop_tracking]compile-flags:-Zdrop-tracking\n // #70935: Check if we do not emit snippet\n // with newlines which lead complex diagnostics.\n@@ -10,7 +11,7 @@ async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n }\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n-    //[normal]~^ ERROR future cannot be sent between threads safely\n+    //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n     //[drop_tracking]~^^ ERROR `Sender<i32>` cannot be shared between threads\n     async move {\n         baz(|| async{"}, {"sha": "a723503776b9dba540788737919ff36e740ba197", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.no_drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:12:17\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:16:17\n    |\n LL |       assert_send(async {\n    |  _________________^\n@@ -10,24 +10,24 @@ LL | |     })\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:35\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:35\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |                 ----------------  ^^^^^^ await occurs here, with `std::ptr::null()` maybe used later\n    |                 |\n    |                 has type `*const u8` which is not `Send`\n note: `std::ptr::null()` is later dropped here\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:41\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:41\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |                                         ^\n help: consider moving this into a `let` binding to create a shorter lived borrow\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:13\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:18:13\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:9:19\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:13:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`", "previous_filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr"}, {"sha": "91edbc10dc0d770adbf874b234f86a8d30f6e2c0", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,4 +1,8 @@\n // edition:2018\n+// revisions: no_drop_tracking drop_tracking\n+// [drop_tracking] check-pass\n+// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n+// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n \n struct Foo(*const u8);\n \n@@ -10,7 +14,7 @@ fn assert_send<T: Send>(_: T) {}\n \n fn main() {\n     assert_send(async {\n-    //~^ ERROR future cannot be sent between threads safely\n+        //[no_drop_tracking]~^ ERROR future cannot be sent between threads safely\n         bar(Foo(std::ptr::null())).await;\n     })\n }"}, {"sha": "17b4ef7bdc671705abd27ca37e8423cb94878cc2", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.drop_tracking.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: `NotSend` cannot be sent between threads safely\n+  --> $DIR/partial-drop-partial-reinit.rs:9:16\n+   |\n+LL |     gimme_send(foo());\n+   |     ---------- ^^^^^ `NotSend` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+...\n+LL | async fn foo() {\n+   |                - within this `impl Future<Output = ()>`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n+   = note: required because it appears within the type `(NotSend,)`\n+   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `()`, `impl Future<Output = ()>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/partial-drop-partial-reinit.rs:31:16\n+   |\n+LL |   async fn foo() {\n+   |  ________________^\n+LL | |\n+LL | |\n+LL | |     let mut x = (NotSend {},);\n+...  |\n+LL | |     bar().await;\n+LL | | }\n+   | |_^\n+note: required by a bound in `gimme_send`\n+  --> $DIR/partial-drop-partial-reinit.rs:17:18\n+   |\n+LL | fn gimme_send<T: Send>(t: T) {\n+   |                  ^^^^ required by this bound in `gimme_send`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "34d8a159f1064bf05c1e448b9be5303830be108f", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.no_drop_tracking.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `NotSend` cannot be sent between threads safely\n-  --> $DIR/partial-drop-partial-reinit.rs:6:16\n+  --> $DIR/partial-drop-partial-reinit.rs:9:16\n    |\n LL |     gimme_send(foo());\n    |     ---------- ^^^^^ `NotSend` cannot be sent between threads safely\n@@ -13,7 +13,7 @@ LL | async fn foo() {\n    = note: required because it appears within the type `(NotSend,)`\n    = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async fn` body\n-  --> $DIR/partial-drop-partial-reinit.rs:28:16\n+  --> $DIR/partial-drop-partial-reinit.rs:31:16\n    |\n LL |   async fn foo() {\n    |  ________________^\n@@ -25,7 +25,7 @@ LL | |     bar().await;\n LL | | }\n    | |_^\n note: required by a bound in `gimme_send`\n-  --> $DIR/partial-drop-partial-reinit.rs:14:18\n+  --> $DIR/partial-drop-partial-reinit.rs:17:18\n    |\n LL | fn gimme_send<T: Send>(t: T) {\n    |                  ^^^^ required by this bound in `gimme_send`", "previous_filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr"}, {"sha": "7d097e72fb49d4d99ee370a87bd65347b7bcb5eb", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,4 +1,7 @@\n // edition:2021\n+// revisions: no_drop_tracking drop_tracking\n+// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n+// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n #![feature(negative_impls)]\n #![allow(unused)]\n \n@@ -12,8 +15,8 @@ fn main() {\n }\n \n fn gimme_send<T: Send>(t: T) {\n-//~^ NOTE required by this bound\n-//~| NOTE required by a bound\n+    //~^ NOTE required by this bound\n+    //~| NOTE required by a bound\n     drop(t);\n }\n \n@@ -26,8 +29,8 @@ impl Drop for NotSend {\n impl !Send for NotSend {}\n \n async fn foo() {\n-//~^ NOTE used within this `async fn` body\n-//~| NOTE within this `impl Future\n+    //~^ NOTE used within this `async fn` body\n+    //~| NOTE within this `impl Future\n     let mut x = (NotSend {},);\n     drop(x.0);\n     x.0 = NotSend {};"}, {"sha": "0157c8b7fe10c98a802f027311308a0ac6bde278", "filename": "src/test/ui/lint/must_not_suspend/ref.drop_tracking.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -0,0 +1,27 @@\n+error: reference to `Umm` held across a suspend point, but should not be\n+  --> $DIR/ref.rs:21:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+LL |\n+LL |         other().await;\n+   |                ------ the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ref.rs:6:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/ref.rs:21:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/ref.rs:21:13\n+   |\n+LL |         let guard = &mut self.u;\n+   |             ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "438e6489e31c41f5d4cb440b060bee0e2f76d25e", "filename": "src/test/ui/lint/must_not_suspend/ref.no_drop_tracking.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.no_drop_tracking.stderr?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,5 +1,5 @@\n error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/ref.rs:18:26\n+  --> $DIR/ref.rs:21:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n@@ -8,17 +8,17 @@ LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n-  --> $DIR/ref.rs:3:9\n+  --> $DIR/ref.rs:6:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n-  --> $DIR/ref.rs:18:26\n+  --> $DIR/ref.rs:21:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/ref.rs:18:26\n+  --> $DIR/ref.rs:21:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^", "previous_filename": "src/test/ui/lint/must_not_suspend/ref.stderr"}, {"sha": "f6b23746fef130f7f6c5afe68762ec24de3b4f39", "filename": "src/test/ui/lint/must_not_suspend/ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5bc9c52fdf8268544efb239bf9455b795c424/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs?ref=15a5bc9c52fdf8268544efb239bf9455b795c424", "patch": "@@ -1,10 +1,13 @@\n // edition:2018\n+// revisions: no_drop_tracking drop_tracking\n+// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n+// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n #![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n \n #[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n struct Umm {\n-    i: i64\n+    i: i64,\n }\n \n struct Bar {\n@@ -19,11 +22,8 @@ impl Bar {\n \n         other().await;\n \n-        *guard = Umm {\n-            i: 2\n-        }\n+        *guard = Umm { i: 2 }\n     }\n }\n \n-fn main() {\n-}\n+fn main() {}"}]}