{"sha": "ba1702a05fb7f787bf070538eafb13ecf7280e1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMTcwMmEwNWZiN2Y3ODdiZjA3MDUzOGVhZmIxM2VjZjcyODBlMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-10T19:03:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-10T19:03:18Z"}, "message": "Auto merge of #4190 - projedi:fix-eta, r=flip1995\n\nFixing eta with respect to lazy evaluation.\n\nThis fixes #4187\n\nchangelog: `redundant_closure`: stop linting on expressions returning a function, which is then directly used by the closure", "tree": {"sha": "b4093ca09320889ca2175137c86b1f281fd8a149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4093ca09320889ca2175137c86b1f281fd8a149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba1702a05fb7f787bf070538eafb13ecf7280e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1702a05fb7f787bf070538eafb13ecf7280e1d", "html_url": "https://github.com/rust-lang/rust/commit/ba1702a05fb7f787bf070538eafb13ecf7280e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba1702a05fb7f787bf070538eafb13ecf7280e1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0dbd34ba99a949ece25c297a4a377685eb89c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0dbd34ba99a949ece25c297a4a377685eb89c7c", "html_url": "https://github.com/rust-lang/rust/commit/c0dbd34ba99a949ece25c297a4a377685eb89c7c"}, {"sha": "41a4ce52dd69659a1da859604eb02ebe7005d54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a4ce52dd69659a1da859604eb02ebe7005d54f", "html_url": "https://github.com/rust-lang/rust/commit/41a4ce52dd69659a1da859604eb02ebe7005d54f"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "b12e3167997acaeeedefd98e11fe7aecfff16853", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba1702a05fb7f787bf070538eafb13ecf7280e1d/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1702a05fb7f787bf070538eafb13ecf7280e1d/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=ba1702a05fb7f787bf070538eafb13ecf7280e1d", "patch": "@@ -82,6 +82,8 @@ fn check_closure(cx: &LateContext<'_, '_>, expr: &Expr) {\n         if_chain!(\n             if let ExprKind::Call(ref caller, ref args) = ex.node;\n \n+            if let ExprKind::Path(_) = caller.node;\n+\n             // Not the same number of arguments, there is no way the closure is the same as the function return;\n             if args.len() == decl.inputs.len();\n "}, {"sha": "0d91bb2cfe71b42301d1858d23c31deff04b4286", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba1702a05fb7f787bf070538eafb13ecf7280e1d/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ba1702a05fb7f787bf070538eafb13ecf7280e1d/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=ba1702a05fb7f787bf070538eafb13ecf7280e1d", "patch": "@@ -20,7 +20,7 @@ use std::path::PathBuf;\n fn main() {\n     let a = Some(1u8).map(foo);\n     meta(foo);\n-    let c = Some(1u8).map({1+2; foo});\n+    let c = Some(1u8).map(|a| {1+2; foo}(a));\n     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n     all(&[1, 2, 3], &2, |x, y| below(x, y)); //is adjusted\n     unsafe {\n@@ -105,7 +105,7 @@ fn test_redundant_closures_containing_method_calls() {\n \n     let mut some = Some(|x| x * x);\n     let arr = [Ok(1), Err(2)];\n-    let _: Vec<_> = arr.iter().map(|x| x.map_err(some.take().unwrap())).collect();\n+    let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n }\n \n struct Thunk<T>(Box<dyn FnMut() -> T>);\n@@ -177,3 +177,10 @@ fn test_redundant_closure_with_another_closure() {\n     let closure = |a| println!(\"{}\", a);\n     let a = Some(1u8).map(closure);\n }\n+\n+fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {\n+    // Currently f is called when result of make_lazy is called.\n+    // If the closure is removed, f will be called when make_lazy itself is\n+    // called. This changes semantics, so the closure must stay.\n+    Box::new(move |x| f()(x))\n+}"}, {"sha": "b2f7592bdb86059f23dae5cb9dfe73847fd132a2", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba1702a05fb7f787bf070538eafb13ecf7280e1d/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1702a05fb7f787bf070538eafb13ecf7280e1d/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=ba1702a05fb7f787bf070538eafb13ecf7280e1d", "patch": "@@ -177,3 +177,10 @@ fn test_redundant_closure_with_another_closure() {\n     let closure = |a| println!(\"{}\", a);\n     let a = Some(1u8).map(|a| closure(a));\n }\n+\n+fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {\n+    // Currently f is called when result of make_lazy is called.\n+    // If the closure is removed, f will be called when make_lazy itself is\n+    // called. This changes semantics, so the closure must stay.\n+    Box::new(move |x| f()(x))\n+}"}, {"sha": "d19d21eec0dbbe26ba15f4128a51912ab1f0564c", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba1702a05fb7f787bf070538eafb13ecf7280e1d/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba1702a05fb7f787bf070538eafb13ecf7280e1d/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=ba1702a05fb7f787bf070538eafb13ecf7280e1d", "patch": "@@ -12,12 +12,6 @@ error: redundant closure found\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n-error: redundant closure found\n-  --> $DIR/eta.rs:23:27\n-   |\n-LL |     let c = Some(1u8).map(|a| {1+2; foo}(a));\n-   |                           ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `{1+2; foo}`\n-\n error: this expression borrows a reference that is immediately dereferenced by the compiler\n   --> $DIR/eta.rs:25:21\n    |\n@@ -70,12 +64,6 @@ error: redundant closure found\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n-error: redundant closure found\n-  --> $DIR/eta.rs:108:50\n-   |\n-LL |     let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n-   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `some.take().unwrap()`\n-\n error: redundant closure found\n   --> $DIR/eta.rs:173:27\n    |\n@@ -88,5 +76,5 @@ error: redundant closure found\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}]}