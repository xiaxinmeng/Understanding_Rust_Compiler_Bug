{"sha": "b354ae95a29a7f78059a1a9fc867dd2e8639671a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNTRhZTk1YTI5YTdmNzgwNTlhMWE5ZmM4NjdkZDJlODYzOTY3MWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-13T17:13:37Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-17T02:50:57Z"}, "message": "rustc: move the SelfSpace before TypeSpace in Substs.", "tree": {"sha": "39d0ac472e0f9220c8ed3f4540bcc39209ee2c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39d0ac472e0f9220c8ed3f4540bcc39209ee2c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b354ae95a29a7f78059a1a9fc867dd2e8639671a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b354ae95a29a7f78059a1a9fc867dd2e8639671a", "html_url": "https://github.com/rust-lang/rust/commit/b354ae95a29a7f78059a1a9fc867dd2e8639671a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b354ae95a29a7f78059a1a9fc867dd2e8639671a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e314636b866a8b1b8a98e45ccac9a2204e72b65a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e314636b866a8b1b8a98e45ccac9a2204e72b65a", "html_url": "https://github.com/rust-lang/rust/commit/e314636b866a8b1b8a98e45ccac9a2204e72b65a"}], "stats": {"total": 164, "additions": 82, "deletions": 82}, "files": [{"sha": "4c8489ff07159209b64af16ef7fbfcd076ea6935", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let rps = self.region_vars_for_defs(obligation.cause.span, rps);\n         let mut substs = subst::Substs::new(\n             subst::VecPerParamSpace::empty(),\n-            subst::VecPerParamSpace::new(rps, Vec::new(), Vec::new()));\n+            subst::VecPerParamSpace::new(Vec::new(), rps, Vec::new()));\n         self.type_vars_for_defs(obligation.cause.span,\n                                 TypeSpace,\n                                 &mut substs,"}, {"sha": "9c7dd7ccd7011aa07b2501dd4d06e4099d5d87fe", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -1602,7 +1602,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 return;\n             }\n         };\n-        let target = obligation.predicate.0.input_types()[0];\n+        let target = obligation.predicate.skip_binder().input_types()[1];\n \n         debug!(\"assemble_candidates_for_unsizing(source={:?}, target={:?})\",\n                source, target);\n@@ -2476,7 +2476,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // regions here. See the comment there for more details.\n         let source = self.infcx.shallow_resolve(\n             tcx.no_late_bound_regions(&obligation.self_ty()).unwrap());\n-        let target = self.infcx.shallow_resolve(obligation.predicate.0.input_types()[0]);\n+        let target = obligation.predicate.skip_binder().input_types()[1];\n+        let target = self.infcx.shallow_resolve(target);\n \n         debug!(\"confirm_builtin_unsize_candidate(source={:?}, target={:?})\",\n                source, target);"}, {"sha": "0fe8d096640080224781028d02246edd19e06e07", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -48,17 +48,17 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                     r: Vec<ty::Region>)\n                     -> Substs<'tcx>\n     {\n-        Substs::new(VecPerParamSpace::new(t, Vec::new(), Vec::new()),\n-                    VecPerParamSpace::new(r, Vec::new(), Vec::new()))\n+        Substs::new(VecPerParamSpace::new(vec![], t, vec![]),\n+                    VecPerParamSpace::new(vec![], r, vec![]))\n     }\n \n     pub fn new_trait(t: Vec<Ty<'tcx>>,\n                      r: Vec<ty::Region>,\n                      s: Ty<'tcx>)\n                     -> Substs<'tcx>\n     {\n-        Substs::new(VecPerParamSpace::new(t, vec!(s), Vec::new()),\n-                    VecPerParamSpace::new(r, Vec::new(), Vec::new()))\n+        Substs::new(VecPerParamSpace::new(vec![s], t, vec![]),\n+                    VecPerParamSpace::new(vec![], r, vec![]))\n     }\n \n     pub fn empty() -> Substs<'tcx> {\n@@ -169,28 +169,28 @@ impl<'tcx> Decodable for &'tcx Substs<'tcx> {\n #[derive(PartialOrd, Ord, PartialEq, Eq, Copy,\n            Clone, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum ParamSpace {\n-    TypeSpace,  // Type parameters attached to a type definition, trait, or impl\n     SelfSpace,  // Self parameter on a trait\n+    TypeSpace,  // Type parameters attached to a type definition, trait, or impl\n     FnSpace,    // Type parameters attached to a method or fn\n }\n \n impl ParamSpace {\n     pub fn all() -> [ParamSpace; 3] {\n-        [TypeSpace, SelfSpace, FnSpace]\n+        [SelfSpace, TypeSpace, FnSpace]\n     }\n \n     pub fn to_uint(self) -> usize {\n         match self {\n-            TypeSpace => 0,\n-            SelfSpace => 1,\n+            SelfSpace => 0,\n+            TypeSpace => 1,\n             FnSpace => 2,\n         }\n     }\n \n     pub fn from_uint(u: usize) -> ParamSpace {\n         match u {\n-            0 => TypeSpace,\n-            1 => SelfSpace,\n+            0 => SelfSpace,\n+            1 => TypeSpace,\n             2 => FnSpace,\n             _ => bug!(\"Invalid ParamSpace: {}\", u)\n         }\n@@ -209,64 +209,64 @@ pub struct VecPerParamSpace<T> {\n     // Here is how the representation corresponds to the abstraction\n     // i.e. the \"abstraction function\" AF:\n     //\n-    // AF(self) = (self.content[..self.type_limit],\n-    //             self.content[self.type_limit..self.self_limit],\n-    //             self.content[self.self_limit..])\n-    type_limit: usize,\n+    // AF(self) = (self.content[..self.self_limit],\n+    //             self.content[self.self_limit..self.type_limit],\n+    //             self.content[self.type_limit..])\n     self_limit: usize,\n+    type_limit: usize,\n     content: Vec<T>,\n }\n \n impl<T: fmt::Debug> fmt::Debug for VecPerParamSpace<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"[{:?};{:?};{:?}]\",\n-               self.get_slice(TypeSpace),\n                self.get_slice(SelfSpace),\n+               self.get_slice(TypeSpace),\n                self.get_slice(FnSpace))\n     }\n }\n \n impl<T> VecPerParamSpace<T> {\n     fn limits(&self, space: ParamSpace) -> (usize, usize) {\n         match space {\n-            TypeSpace => (0, self.type_limit),\n-            SelfSpace => (self.type_limit, self.self_limit),\n-            FnSpace => (self.self_limit, self.content.len()),\n+            SelfSpace => (0, self.self_limit),\n+            TypeSpace => (self.self_limit, self.type_limit),\n+            FnSpace => (self.type_limit, self.content.len()),\n         }\n     }\n \n     pub fn empty() -> VecPerParamSpace<T> {\n         VecPerParamSpace {\n-            type_limit: 0,\n             self_limit: 0,\n+            type_limit: 0,\n             content: Vec::new()\n         }\n     }\n \n-    /// `t` is the type space.\n     /// `s` is the self space.\n+    /// `t` is the type space.\n     /// `f` is the fn space.\n-    pub fn new(t: Vec<T>, s: Vec<T>, f: Vec<T>) -> VecPerParamSpace<T> {\n-        let type_limit = t.len();\n-        let self_limit = type_limit + s.len();\n+    pub fn new(s: Vec<T>, t: Vec<T>, f: Vec<T>) -> VecPerParamSpace<T> {\n+        let self_limit = s.len();\n+        let type_limit = self_limit + t.len();\n \n-        let mut content = t;\n-        content.extend(s);\n+        let mut content = s;\n+        content.extend(t);\n         content.extend(f);\n \n         VecPerParamSpace {\n-            type_limit: type_limit,\n             self_limit: self_limit,\n+            type_limit: type_limit,\n             content: content,\n         }\n     }\n \n-    fn new_internal(content: Vec<T>, type_limit: usize, self_limit: usize)\n+    fn new_internal(content: Vec<T>, self_limit: usize, type_limit: usize)\n                     -> VecPerParamSpace<T>\n     {\n         VecPerParamSpace {\n-            type_limit: type_limit,\n             self_limit: self_limit,\n+            type_limit: type_limit,\n             content: content,\n         }\n     }\n@@ -278,8 +278,8 @@ impl<T> VecPerParamSpace<T> {\n     pub fn push(&mut self, space: ParamSpace, value: T) {\n         let (_, limit) = self.limits(space);\n         match space {\n-            TypeSpace => { self.type_limit += 1; self.self_limit += 1; }\n-            SelfSpace => { self.self_limit += 1; }\n+            SelfSpace => { self.type_limit += 1; self.self_limit += 1; }\n+            TypeSpace => { self.type_limit += 1; }\n             FnSpace => { }\n         }\n         self.content.insert(limit, value);\n@@ -302,8 +302,8 @@ impl<T> VecPerParamSpace<T> {\n             None\n         } else {\n             match space {\n-                TypeSpace => { self.type_limit -= 1; self.self_limit -= 1; }\n-                SelfSpace => { self.self_limit -= 1; }\n+                SelfSpace => { self.type_limit -= 1; self.self_limit -= 1; }\n+                TypeSpace => { self.type_limit -= 1; }\n                 FnSpace => {}\n             }\n             if self.content.is_empty() {\n@@ -388,8 +388,7 @@ impl<T> VecPerParamSpace<T> {\n     pub fn all_vecs<P>(&self, mut pred: P) -> bool where\n         P: FnMut(&[T]) -> bool,\n     {\n-        let spaces = [TypeSpace, SelfSpace, FnSpace];\n-        spaces.iter().all(|&space| { pred(self.get_slice(space)) })\n+        ParamSpace::all().iter().all(|&space| { pred(self.get_slice(space)) })\n     }\n \n     pub fn all<P>(&self, pred: P) -> bool where P: FnMut(&T) -> bool {\n@@ -407,17 +406,17 @@ impl<T> VecPerParamSpace<T> {\n     pub fn map<U, P>(&self, pred: P) -> VecPerParamSpace<U> where P: FnMut(&T) -> U {\n         let result = self.iter().map(pred).collect();\n         VecPerParamSpace::new_internal(result,\n-                                       self.type_limit,\n-                                       self.self_limit)\n+                                       self.self_limit,\n+                                       self.type_limit)\n     }\n \n     pub fn map_enumerated<U, P>(&self, pred: P) -> VecPerParamSpace<U> where\n         P: FnMut((ParamSpace, usize, &T)) -> U,\n     {\n         let result = self.iter_enumerated().map(pred).collect();\n         VecPerParamSpace::new_internal(result,\n-                                       self.type_limit,\n-                                       self.self_limit)\n+                                       self.self_limit,\n+                                       self.type_limit)\n     }\n \n     pub fn with_slice(mut self, space: ParamSpace, slice: &[T])"}, {"sha": "3ea7f0d5eabb949ab4cb02adc8f94fe39c87415c", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -675,8 +675,8 @@ pub fn custom_coerce_unsize_info<'scx, 'tcx>(scx: &SharedCrateContext<'scx, 'tcx\n                                              source_ty: Ty<'tcx>,\n                                              target_ty: Ty<'tcx>)\n                                              -> CustomCoerceUnsized {\n-    let trait_substs = Substs::new(subst::VecPerParamSpace::new(vec![target_ty],\n-                                                                vec![source_ty],\n+    let trait_substs = Substs::new(subst::VecPerParamSpace::new(vec![source_ty],\n+                                                                vec![target_ty],\n                                                                 Vec::new()),\n                                    subst::VecPerParamSpace::empty());\n "}, {"sha": "76b9052af6820d9efcbd4d1cf65e3c7fd5feddce", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -2797,7 +2797,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let rps = self.region_vars_for_defs(span, rps);\n         let mut substs = subst::Substs::new(\n             VecPerParamSpace::empty(),\n-            VecPerParamSpace::new(rps, Vec::new(), Vec::new()));\n+            VecPerParamSpace::new(Vec::new(), rps, Vec::new()));\n         self.type_vars_for_defs(span, ParamSpace::TypeSpace, &mut substs, tps);\n         let substd_ty = self.instantiate_type_scheme(span, &substs, &raw_ty);\n "}, {"sha": "47892781902ea8491fbdb9063236bfc30d14166c", "filename": "src/test/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -37,7 +37,7 @@ impl SomeGenericTrait<u64> for i32 {\n \n     // For the non-generic foo(), we should generate a codegen-item even if it\n     // is not called anywhere\n-    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::foo[0]<u64, i32>\n+    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::foo[0]<i32, u64>\n }\n \n // Non-generic impl of generic trait\n@@ -54,16 +54,16 @@ fn main() {\n     //~ TRANS_ITEM fn trait_method_default_impl::SomeTrait[0]::bar[0]<i8, &str>\n     let _ = 2i8.bar(\"&str\");\n \n-    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u64, i32, char>\n+    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<i32, u64, char>\n     0i32.bar(0u64, 'c');\n \n-    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u64, i32, &str>\n+    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<i32, u64, &str>\n     0i32.bar(0u64, \"&str\");\n \n-    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<i8, u32, &[char; 1]>\n+    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u32, i8, &[char; 1]>\n     0u32.bar(0i8, &['c']);\n \n-    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<i16, u32, ()>\n+    //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u32, i16, ()>\n     0u32.bar(0i16, ());\n }\n "}, {"sha": "a3456b0628b357aec1c0fb5d09db735d31abb710", "filename": "src/test/compile-fail/variance-associated-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -20,12 +20,12 @@ trait Trait<'a> {\n }\n \n #[rustc_variance]\n-struct Foo<'a, T : Trait<'a>> { //~ ERROR ItemVariances(types=[[+];[];[]], regions=[[-];[];[]])\n+struct Foo<'a, T : Trait<'a>> { //~ ERROR ItemVariances(types=[[];[+];[]], regions=[[];[-];[]])\n     field: (T, &'a ())\n }\n \n #[rustc_variance]\n-struct Bar<'a, T : Trait<'a>> { //~ ERROR ItemVariances(types=[[o];[];[]], regions=[[o];[];[]])\n+struct Bar<'a, T : Trait<'a>> { //~ ERROR ItemVariances(types=[[];[o];[]], regions=[[];[o];[]])\n     field: <T as Trait<'a>>::Type\n }\n "}, {"sha": "ffd829c38d3d382c25621bf2c06b25585032a2fe", "filename": "src/test/compile-fail/variance-object-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -18,7 +18,7 @@ use std::cell::Cell;\n // For better or worse, associated types are invariant, and hence we\n // get an invariant result for `'a`.\n #[rustc_variance]\n-struct Foo<'a> { //~ ERROR regions=[[o];[];[]]\n+struct Foo<'a> { //~ ERROR regions=[[];[o];[]]\n     x: Box<Fn(i32) -> &'a i32 + 'static>\n }\n "}, {"sha": "6dd791f2558a7de736f7bb7108076a995bc9da29", "filename": "src/test/compile-fail/variance-region-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -13,7 +13,7 @@\n #![feature(rustc_attrs)]\n \n #[rustc_variance]\n-trait Foo: 'static { //~ ERROR types=[[];[o];[]]\n+trait Foo: 'static { //~ ERROR types=[[o];[];[]]\n }\n \n #[rustc_variance]"}, {"sha": "0c712d3fa0377899b7882e3fa507032976b37b77", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -16,7 +16,7 @@\n // Regions that just appear in normal spots are contravariant:\n \n #[rustc_variance]\n-struct Test2<'a, 'b, 'c> { //~ ERROR regions=[[-, -, -];[];[]]\n+struct Test2<'a, 'b, 'c> { //~ ERROR regions=[[];[-, -, -];[]]\n     x: &'a isize,\n     y: &'b [isize],\n     c: &'c str\n@@ -25,7 +25,7 @@ struct Test2<'a, 'b, 'c> { //~ ERROR regions=[[-, -, -];[];[]]\n // Those same annotations in function arguments become covariant:\n \n #[rustc_variance]\n-struct Test3<'a, 'b, 'c> { //~ ERROR regions=[[+, +, +];[];[]]\n+struct Test3<'a, 'b, 'c> { //~ ERROR regions=[[];[+, +, +];[]]\n     x: extern \"Rust\" fn(&'a isize),\n     y: extern \"Rust\" fn(&'b [isize]),\n     c: extern \"Rust\" fn(&'c str),\n@@ -34,15 +34,15 @@ struct Test3<'a, 'b, 'c> { //~ ERROR regions=[[+, +, +];[];[]]\n // Mutability induces invariance:\n \n #[rustc_variance]\n-struct Test4<'a, 'b:'a> { //~ ERROR regions=[[-, o];[];[]]\n+struct Test4<'a, 'b:'a> { //~ ERROR regions=[[];[-, o];[]]\n     x: &'a mut &'b isize,\n }\n \n // Mutability induces invariance, even when in a\n // contravariant context:\n \n #[rustc_variance]\n-struct Test5<'a, 'b:'a> { //~ ERROR regions=[[+, o];[];[]]\n+struct Test5<'a, 'b:'a> { //~ ERROR regions=[[];[+, o];[]]\n     x: extern \"Rust\" fn(&'a mut &'b isize),\n }\n \n@@ -52,22 +52,22 @@ struct Test5<'a, 'b:'a> { //~ ERROR regions=[[+, o];[];[]]\n // argument list occurs in an invariant context.\n \n #[rustc_variance]\n-struct Test6<'a, 'b:'a> { //~ ERROR regions=[[-, o];[];[]]\n+struct Test6<'a, 'b:'a> { //~ ERROR regions=[[];[-, o];[]]\n     x: &'a mut extern \"Rust\" fn(&'b isize),\n }\n \n // No uses at all is bivariant:\n \n #[rustc_variance]\n-struct Test7<'a> { //~ ERROR regions=[[*];[];[]]\n+struct Test7<'a> { //~ ERROR regions=[[];[*];[]]\n     //~^ ERROR parameter `'a` is never used\n     x: isize\n }\n \n // Try enums too.\n \n #[rustc_variance]\n-enum Test8<'a, 'b, 'c:'b> { //~ ERROR regions=[[+, -, o];[];[]]\n+enum Test8<'a, 'b, 'c:'b> { //~ ERROR regions=[[];[+, -, o];[]]\n     Test8A(extern \"Rust\" fn(&'a isize)),\n     Test8B(&'b [isize]),\n     Test8C(&'b mut &'c str),"}, {"sha": "9bdb05e188dcfe01a34c23bb8d7fbedabda9a9a0", "filename": "src/test/compile-fail/variance-regions-indirect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -15,33 +15,33 @@\n #![feature(rustc_attrs)]\n \n #[rustc_variance]\n-enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR regions=[[+, -, o, *];[];[]]\n+enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR regions=[[];[+, -, o, *];[]]\n     //~^ ERROR parameter `'d` is never used\n     Test8A(extern \"Rust\" fn(&'a isize)),\n     Test8B(&'b [isize]),\n     Test8C(&'b mut &'c str),\n }\n \n #[rustc_variance]\n-struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR regions=[[*, o, -, +];[];[]]\n+struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR regions=[[];[*, o, -, +];[]]\n     //~^ ERROR parameter `'w` is never used\n     f: Base<'z, 'y, 'x, 'w>\n }\n \n #[rustc_variance] // Combine - and + to yield o\n-struct Derived2<'a, 'b:'a, 'c> { //~ ERROR regions=[[o, o, *];[];[]]\n+struct Derived2<'a, 'b:'a, 'c> { //~ ERROR regions=[[];[o, o, *];[]]\n     //~^ ERROR parameter `'c` is never used\n     f: Base<'a, 'a, 'b, 'c>\n }\n \n #[rustc_variance] // Combine + and o to yield o (just pay attention to 'a here)\n-struct Derived3<'a:'b, 'b, 'c> { //~ ERROR regions=[[o, -, *];[];[]]\n+struct Derived3<'a:'b, 'b, 'c> { //~ ERROR regions=[[];[o, -, *];[]]\n     //~^ ERROR parameter `'c` is never used\n     f: Base<'a, 'b, 'a, 'c>\n }\n \n #[rustc_variance] // Combine + and * to yield + (just pay attention to 'a here)\n-struct Derived4<'a, 'b, 'c:'b> { //~ ERROR regions=[[+, -, o];[];[]]\n+struct Derived4<'a, 'b, 'c:'b> { //~ ERROR regions=[[];[+, -, o];[]]\n     f: Base<'a, 'b, 'c, 'a>\n }\n "}, {"sha": "528be50c0b8507891a73fdda577ea6eb12f4718c", "filename": "src/test/compile-fail/variance-trait-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -25,18 +25,18 @@ trait Setter<T> { //~ ERROR types=[[o];[o];[]]\n }\n \n #[rustc_variance]\n-struct TestStruct<U,T:Setter<U>> { //~ ERROR types=[[+, +];[];[]]\n+struct TestStruct<U,T:Setter<U>> { //~ ERROR types=[[];[+, +];[]]\n     t: T, u: U\n }\n \n #[rustc_variance]\n-enum TestEnum<U,T:Setter<U>> {//~ ERROR types=[[*, +];[];[]]\n+enum TestEnum<U,T:Setter<U>> {//~ ERROR types=[[];[*, +];[]]\n     //~^ ERROR parameter `U` is never used\n     Foo(T)\n }\n \n #[rustc_variance]\n-trait TestTrait<U,T:Setter<U>> { //~ ERROR types=[[o, o];[o];[]]\n+trait TestTrait<U,T:Setter<U>> { //~ ERROR types=[[o];[o, o];[]]\n     fn getter(&self, u: U) -> T;\n }\n \n@@ -50,13 +50,13 @@ trait TestTrait3<U> { //~ ERROR types=[[o];[o];[]]\n }\n \n #[rustc_variance]\n-struct TestContraStruct<U,T:Setter<U>> { //~ ERROR types=[[*, +];[];[]]\n+struct TestContraStruct<U,T:Setter<U>> { //~ ERROR types=[[];[*, +];[]]\n     //~^ ERROR parameter `U` is never used\n     t: T\n }\n \n #[rustc_variance]\n-struct TestBox<U,T:Getter<U>+Setter<U>> { //~ ERROR types=[[*, +];[];[]]\n+struct TestBox<U,T:Getter<U>+Setter<U>> { //~ ERROR types=[[];[*, +];[]]\n     //~^ ERROR parameter `U` is never used\n     t: T\n }"}, {"sha": "b58540204986a4019b6a1f90ae46cc3d8b8d2749", "filename": "src/test/compile-fail/variance-trait-object-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -21,7 +21,7 @@ use std::mem;\n trait T { fn foo(&self); }\n \n #[rustc_variance]\n-struct TOption<'a> { //~ ERROR regions=[[-];[];[]]\n+struct TOption<'a> { //~ ERROR regions=[[];[-];[]]\n     v: Option<Box<T + 'a>>,\n }\n "}, {"sha": "d110c402d3b77625be8fca4ce65b3c0ed7ef5e23", "filename": "src/test/compile-fail/variance-types-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-types-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-types-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-types-bounds.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -14,24 +14,24 @@\n #![feature(rustc_attrs)]\n \n #[rustc_variance]\n-struct TestImm<A, B> { //~ ERROR types=[[+, +];[];[]]\n+struct TestImm<A, B> { //~ ERROR types=[[];[+, +];[]]\n     x: A,\n     y: B,\n }\n \n #[rustc_variance]\n-struct TestMut<A, B:'static> { //~ ERROR types=[[+, o];[];[]]\n+struct TestMut<A, B:'static> { //~ ERROR types=[[];[+, o];[]]\n     x: A,\n     y: &'static mut B,\n }\n \n #[rustc_variance]\n-struct TestIndirect<A:'static, B:'static> { //~ ERROR types=[[+, o];[];[]]\n+struct TestIndirect<A:'static, B:'static> { //~ ERROR types=[[];[+, o];[]]\n     m: TestMut<A, B>\n }\n \n #[rustc_variance]\n-struct TestIndirect2<A:'static, B:'static> { //~ ERROR types=[[o, o];[];[]]\n+struct TestIndirect2<A:'static, B:'static> { //~ ERROR types=[[];[o, o];[]]\n     n: TestMut<A, B>,\n     m: TestMut<B, A>\n }\n@@ -68,7 +68,7 @@ trait SetterInTypeBound<A> { //~ ERROR types=[[o];[o];[]]\n }\n \n #[rustc_variance]\n-struct TestObject<A, R> { //~ ERROR types=[[o, o];[];[]]\n+struct TestObject<A, R> { //~ ERROR types=[[];[o, o];[]]\n     n: Box<Setter<A>+Send>,\n     m: Box<Getter<R>+Send>,\n }"}, {"sha": "8c1a544334c2ac3fdf4de9b38f7c5b00bae445a5", "filename": "src/test/compile-fail/variance-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b354ae95a29a7f78059a1a9fc867dd2e8639671a/src%2Ftest%2Fcompile-fail%2Fvariance-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-types.rs?ref=b354ae95a29a7f78059a1a9fc867dd2e8639671a", "patch": "@@ -17,32 +17,32 @@ use std::cell::Cell;\n // not considered bivariant.\n \n #[rustc_variance]\n-struct InvariantMut<'a,A:'a,B:'a> { //~ ERROR types=[[o, o];[];[]], regions=[[-];[];[]]\n+struct InvariantMut<'a,A:'a,B:'a> { //~ ERROR types=[[];[o, o];[]], regions=[[];[-];[]]\n     t: &'a mut (A,B)\n }\n \n #[rustc_variance]\n-struct InvariantCell<A> { //~ ERROR types=[[o];[];[]]\n+struct InvariantCell<A> { //~ ERROR types=[[];[o];[]]\n     t: Cell<A>\n }\n \n #[rustc_variance]\n-struct InvariantIndirect<A> { //~ ERROR types=[[o];[];[]]\n+struct InvariantIndirect<A> { //~ ERROR types=[[];[o];[]]\n     t: InvariantCell<A>\n }\n \n #[rustc_variance]\n-struct Covariant<A> { //~ ERROR types=[[+];[];[]]\n+struct Covariant<A> { //~ ERROR types=[[];[+];[]]\n     t: A, u: fn() -> A\n }\n \n #[rustc_variance]\n-struct Contravariant<A> { //~ ERROR types=[[-];[];[]]\n+struct Contravariant<A> { //~ ERROR types=[[];[-];[]]\n     t: fn(A)\n }\n \n #[rustc_variance]\n-enum Enum<A,B,C> { //~ ERROR types=[[+, -, o];[];[]]\n+enum Enum<A,B,C> { //~ ERROR types=[[];[+, -, o];[]]\n     Foo(Covariant<A>),\n     Bar(Contravariant<B>),\n     Zed(Covariant<C>,Contravariant<C>)"}]}