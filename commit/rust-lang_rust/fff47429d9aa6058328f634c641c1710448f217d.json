{"sha": "fff47429d9aa6058328f634c641c1710448f217d", "node_id": "C_kwDOAAsO6NoAKGZmZjQ3NDI5ZDlhYTYwNTgzMjhmNjM0YzY0MWMxNzEwNDQ4ZjIxN2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T19:24:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-24T19:24:55Z"}, "message": "Auto merge of #2439 - RalfJung:ptr-offset-from-unsigned, r=RalfJung\n\nmore tests for ptr_offset_from_unsinged", "tree": {"sha": "ccef07d60fbfa2efd0d4e5d5df3f3dd1f9eb10e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccef07d60fbfa2efd0d4e5d5df3f3dd1f9eb10e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff47429d9aa6058328f634c641c1710448f217d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff47429d9aa6058328f634c641c1710448f217d", "html_url": "https://github.com/rust-lang/rust/commit/fff47429d9aa6058328f634c641c1710448f217d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff47429d9aa6058328f634c641c1710448f217d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75", "html_url": "https://github.com/rust-lang/rust/commit/a5f0a9b7ed8084ebc27192fe77ecb0e74f1f5f75"}, {"sha": "8f3b594d1ee94e5e908ea6a775560f3c7ab695e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3b594d1ee94e5e908ea6a775560f3c7ab695e7", "html_url": "https://github.com/rust-lang/rust/commit/8f3b594d1ee94e5e908ea6a775560f3c7ab695e7"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "d6413faf74bfa97564a6cc813dd309a88e5b0d35", "filename": "tests/fail/intrinsics/ptr_offset_from_unsigned_neg.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff47429d9aa6058328f634c641c1710448f217d/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff47429d9aa6058328f634c641c1710448f217d/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.rs?ref=fff47429d9aa6058328f634c641c1710448f217d", "patch": "@@ -0,0 +1,9 @@\n+//@error-pattern: first pointer has smaller offset than second: 0 < 4\n+#![feature(ptr_sub_ptr)]\n+\n+fn main() {\n+    let arr = [0u8; 8];\n+    let ptr1 = arr.as_ptr();\n+    let ptr2 = ptr1.wrapping_add(4);\n+    let _val = unsafe { ptr1.sub_ptr(ptr2) };\n+}"}, {"sha": "bb68f9f5c18c5d9cf2d2e5564e0b28dabf971837", "filename": "tests/fail/intrinsics/ptr_offset_from_unsigned_neg.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fff47429d9aa6058328f634c641c1710448f217d/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fff47429d9aa6058328f634c641c1710448f217d/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr?ref=fff47429d9aa6058328f634c641c1710448f217d", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: ptr_offset_from_unsigned called when first pointer has smaller offset than second: 0 < 4\n+  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+   |\n+LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ptr_offset_from_unsigned called when first pointer has smaller offset than second: 0 < 4\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: backtrace:\n+   = note: inside `std::ptr::const_ptr::<impl *const u8>::sub_ptr` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+note: inside `main` at $DIR/ptr_offset_from_unsigned_neg.rs:LL:CC\n+  --> $DIR/ptr_offset_from_unsigned_neg.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { ptr1.sub_ptr(ptr2) };\n+   |                         ^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "6267e6e6bc1118a3d5bca0d1c5b6be933105c4c8", "filename": "tests/pass/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff47429d9aa6058328f634c641c1710448f217d/tests%2Fpass%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff47429d9aa6058328f634c641c1710448f217d/tests%2Fpass%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintrinsics.rs?ref=fff47429d9aa6058328f634c641c1710448f217d", "patch": "@@ -1,6 +1,6 @@\n //@compile-flags: -Zmiri-permissive-provenance\n-#![feature(core_intrinsics, const_raw_ptr_comparison)]\n-#![feature(layout_for_ptr)]\n+#![feature(core_intrinsics, layout_for_ptr)]\n+//! Tests for various intrinsics that do not fit anywhere else.\n \n use std::intrinsics;\n use std::mem::{size_of, size_of_val, size_of_val_raw};\n@@ -39,9 +39,4 @@ fn main() {\n     let _v = intrinsics::discriminant_value(&0);\n     let _v = intrinsics::discriminant_value(&true);\n     let _v = intrinsics::discriminant_value(&vec![1, 2, 3]);\n-\n-    let addr = &13 as *const i32;\n-    let addr2 = (addr as usize).wrapping_add(usize::MAX).wrapping_add(1);\n-    assert!(addr.guaranteed_eq(addr2 as *const _));\n-    assert!(addr.guaranteed_ne(0x100 as *const _));\n }"}, {"sha": "b2e6f4556fa2ec2e64e7979434011439d17c69c3", "filename": "tests/pass/pointers.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fff47429d9aa6058328f634c641c1710448f217d/tests%2Fpass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff47429d9aa6058328f634c641c1710448f217d/tests%2Fpass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fpointers.rs?ref=fff47429d9aa6058328f634c641c1710448f217d", "patch": "@@ -1,4 +1,5 @@\n-#![feature(ptr_metadata)]\n+//@compile-flags: -Zmiri-permissive-provenance\n+#![feature(ptr_metadata, const_raw_ptr_comparison)]\n \n use std::mem::{self, transmute};\n use std::ptr;\n@@ -131,6 +132,12 @@ fn main() {\n     assert!(dangling > 3);\n     assert!(dangling >= 4);\n \n+    // CTFE-specific equality tests, need to also work at runtime.\n+    let addr = &13 as *const i32;\n+    let addr2 = (addr as usize).wrapping_add(usize::MAX).wrapping_add(1);\n+    assert!(addr.guaranteed_eq(addr2 as *const _));\n+    assert!(addr.guaranteed_ne(0x100 as *const _));\n+\n     wide_ptr_ops();\n     metadata_vtable();\n }"}, {"sha": "95eac8522fb4077dccdb975dbc2b151afbe2eb18", "filename": "tests/pass/ptr_offset.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fff47429d9aa6058328f634c641c1710448f217d/tests%2Fpass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff47429d9aa6058328f634c641c1710448f217d/tests%2Fpass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_offset.rs?ref=fff47429d9aa6058328f634c641c1710448f217d", "patch": "@@ -1,14 +1,30 @@\n //@compile-flags: -Zmiri-permissive-provenance\n+#![feature(ptr_sub_ptr)]\n use std::{mem, ptr};\n \n fn main() {\n+    smoke();\n     test_offset_from();\n     test_vec_into_iter();\n     ptr_arith_offset();\n     ptr_arith_offset_overflow();\n     ptr_offset();\n }\n \n+fn smoke() {\n+    // Smoke-test various offsetting operations.\n+    let ptr = &5;\n+    let ptr = ptr as *const i32;\n+    let _val = ptr.wrapping_offset(0);\n+    let _val = unsafe { ptr.offset(0) };\n+    let _val = ptr.wrapping_add(0);\n+    let _val = unsafe { ptr.add(0) };\n+    let _val = ptr.wrapping_sub(0);\n+    let _val = unsafe { ptr.sub(0) };\n+    let _val = unsafe { ptr.offset_from(ptr) };\n+    let _val = unsafe { ptr.sub_ptr(ptr) };\n+}\n+\n fn test_offset_from() {\n     unsafe {\n         let buf = [0u32; 4];\n@@ -17,12 +33,14 @@ fn test_offset_from() {\n         let y = x.offset(12);\n \n         assert_eq!(y.offset_from(x), 12);\n+        assert_eq!(y.sub_ptr(x), 12);\n         assert_eq!(x.offset_from(y), -12);\n         assert_eq!((y as *const u32).offset_from(x as *const u32), 12 / 4);\n         assert_eq!((x as *const u32).offset_from(y as *const u32), -12 / 4);\n \n         let x = (((x as usize) * 2) / 2) as *const u8;\n         assert_eq!(y.offset_from(x), 12);\n+        assert_eq!(y.sub_ptr(x), 12);\n         assert_eq!(x.offset_from(y), -12);\n     }\n }"}]}