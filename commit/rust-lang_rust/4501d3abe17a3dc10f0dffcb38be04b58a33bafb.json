{"sha": "4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "node_id": "C_kwDOAAsO6NoAKDQ1MDFkM2FiZTE3YTNkYzEwZjBkZmZjYjM4YmUwNGI1OGEzM2JhZmI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-01-19T09:24:45Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-02-03T16:33:40Z"}, "message": "Autotrait bounds on dyn-safe trait methods", "tree": {"sha": "94a053116f1036348d12e5f91e8e32e26f1c48b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a053116f1036348d12e5f91e8e32e26f1c48b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmPdN2QACgkQ+boUO5X/\nbYI5bQ/9GmdYUSkVtwuvUEa0kzkBiwXvPEPjZ+60mTAtURsk5PAGqORuSgSu8olv\n6R69LpCijv2eFe0gFPc24f1U+O6ZwjApYD4oWVIUXGeHpkNGj5LgQ0oKs8dFXHlV\nCmbG23pK26dleWUF3+y2ZXS5dBI1Yi/9wpaSHLWHLmkW4P1EqAfu1dLmp6ts9cp+\nKg2h4KIa7tJaUH7J7Xn4IhzD7vOrJqDWajGPzX4G0APXxdUqk+Tj5A/mHZIEMmEo\nfusKn6gS5oplqB5jrwuM4ATN1unVWKEg3uqShLj2XyFDwCFxLKYyWO8+zgbgHMtQ\n94BMrQYsItkjRl6JmQhoOP9XwRc88OAcBrjWP6sCaDHM8qRsb1K/0f0ls2dcT0ul\nGQkBpoIGWD1fPmBRp+Fo5tYlrZyy5o4+wWFPQsI96DtRLWmcNFeXK2CQZ5WcBKqt\nZmf0vdSFYWiboFP45SOOj+L0z5wJRy6d8unI35FwnLp1fShQBcZzlyOAgiKMowjS\nlIyTQ3pcrx/kDflsfkviR6IQMJf/3XaKZPempeWoxPrOs+5Hc5zuQhyVEwmYl9wR\nmhLxzmno+agUA9VYQSsWN2X4ma9GO+1TNxnKH/98PtE0qUb5k4BY2d/wQNyDUf0j\n3p2ktnrV5stup2kl4UHrPZIO/AMsjOWimkfy4Z4AS+m8CzamNso=\n=t9kG\n-----END PGP SIGNATURE-----", "payload": "tree 94a053116f1036348d12e5f91e8e32e26f1c48b9\nparent 9e1c600f74f966ec583f0ac39d0c2a103a2560a7\nauthor David Tolnay <dtolnay@gmail.com> 1674120285 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1675442020 -0800\n\nAutotrait bounds on dyn-safe trait methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "html_url": "https://github.com/rust-lang/rust/commit/4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e1c600f74f966ec583f0ac39d0c2a103a2560a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1c600f74f966ec583f0ac39d0c2a103a2560a7", "html_url": "https://github.com/rust-lang/rust/commit/9e1c600f74f966ec583f0ac39d0c2a103a2560a7"}], "stats": {"total": 120, "additions": 110, "deletions": 10}, "files": [{"sha": "7d381d8902ac2f10ee913ac96fe7c98ec0d01613", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "patch": "@@ -115,6 +115,28 @@ fn do_orphan_check_impl<'tcx>(\n         //     impl MyAuto for dyn Trait {}      // NOT OKAY\n         //     impl<T: ?Sized> MyAuto for T {}   // NOT OKAY\n         //\n+        // With this restriction, it's guaranteed that an auto-trait is\n+        // implemented for a trait object if and only if the auto-trait is one\n+        // of the trait object's trait bounds (or a supertrait of a bound). In\n+        // other words `dyn Trait + AutoTrait` always implements AutoTrait,\n+        // while `dyn Trait` never implements AutoTrait.\n+        //\n+        // This is necessary in order for autotrait bounds on methods of trait\n+        // objects to be sound.\n+        //\n+        //     auto trait AutoTrait {}\n+        //\n+        //     trait ObjectSafeTrait {\n+        //         fn f(&self) where Self: AutoTrait;\n+        //     }\n+        //\n+        // We can allow f to be called on `dyn ObjectSafeTrait + AutoTrait`.\n+        //\n+        // If we didn't deny `impl AutoTrait for dyn Trait`, it would be unsound\n+        // for the ObjectSafeTrait shown above to be object safe because someone\n+        // could take some type implementing ObjectSafeTrait but not AutoTrait,\n+        // unsize it to `dyn ObjectSafeTrait`, and call .f() which has no\n+        // concrete implementation (issue #50781).\n         enum LocalImpl {\n             Allow,\n             Disallow { problematic_kind: &'static str },"}, {"sha": "8f548acfd2eaccc8834f326f04cb201dcefd8e6d", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "patch": "@@ -547,16 +547,56 @@ fn virtual_call_violation_for_method<'tcx>(\n \n     // NOTE: This check happens last, because it results in a lint, and not a\n     // hard error.\n-    if tcx\n-        .predicates_of(method.def_id)\n-        .predicates\n-        .iter()\n-        // A trait object can't claim to live more than the concrete type,\n-        // so outlives predicates will always hold.\n-        .cloned()\n-        .filter(|(p, _)| p.to_opt_type_outlives().is_none())\n-        .any(|pred| contains_illegal_self_type_reference(tcx, trait_def_id, pred))\n-    {\n+    if tcx.predicates_of(method.def_id).predicates.iter().any(|&(pred, span)| {\n+        // dyn Trait is okay:\n+        //\n+        //     trait Trait {\n+        //         fn f(&self) where Self: 'static;\n+        //     }\n+        //\n+        // because a trait object can't claim to live longer than the concrete\n+        // type. If the lifetime bound holds on dyn Trait then it's guaranteed\n+        // to hold as well on the concrete type.\n+        if pred.to_opt_type_outlives().is_some() {\n+            return false;\n+        }\n+\n+        // dyn Trait is okay:\n+        //\n+        //     auto trait AutoTrait {}\n+        //\n+        //     trait Trait {\n+        //         fn f(&self) where Self: AutoTrait;\n+        //     }\n+        //\n+        // because `impl AutoTrait for dyn Trait` is disallowed by coherence.\n+        // Traits with a default impl are implemented for a trait object if and\n+        // only if the autotrait is one of the trait object's trait bounds, like\n+        // in `dyn Trait + AutoTrait`. This guarantees that trait objects only\n+        // implement auto traits if the underlying type does as well.\n+        if let ty::PredicateKind::Clause(ty::Clause::Trait(ty::TraitPredicate {\n+            trait_ref: pred_trait_ref,\n+            constness: ty::BoundConstness::NotConst,\n+            polarity: ty::ImplPolarity::Positive,\n+        })) = pred.kind().skip_binder()\n+            && pred_trait_ref.self_ty() == tcx.types.self_param\n+            && tcx.trait_is_auto(pred_trait_ref.def_id)\n+        {\n+            // Consider bounds like `Self: Bound<Self>`. Auto traits are not\n+            // allowed to have generic parameters so `auto trait Bound<T> {}`\n+            // would already have reported an error at the definition of the\n+            // auto trait.\n+            if pred_trait_ref.substs.len() != 1 {\n+                tcx.sess.diagnostic().delay_span_bug(\n+                    span,\n+                    \"auto traits cannot have generic parameters\",\n+                );\n+            }\n+            return false;\n+        }\n+\n+        contains_illegal_self_type_reference(tcx, trait_def_id, pred.clone())\n+    }) {\n         return Some(MethodViolationCode::WhereClauseReferencesSelf);\n     }\n "}, {"sha": "6cf5ed2e46aecbe526d158afa903146d8e92bd82", "filename": "tests/ui/where-clauses/self-in-where-clause-allowed.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/tests%2Fui%2Fwhere-clauses%2Fself-in-where-clause-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/tests%2Fui%2Fwhere-clauses%2Fself-in-where-clause-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fself-in-where-clause-allowed.rs?ref=4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "patch": "@@ -0,0 +1,23 @@\n+// check-fail\n+\n+#![feature(auto_traits)]\n+#![deny(where_clauses_object_safety)]\n+\n+auto trait AutoTrait {}\n+\n+trait Trait {\n+    fn static_lifetime_bound(&self) where Self: 'static {}\n+\n+    fn arg_lifetime_bound<'a>(&self, _arg: &'a ()) where Self: 'a {}\n+\n+    fn autotrait_bound(&self) where Self: AutoTrait {}\n+}\n+\n+impl Trait for () {}\n+\n+fn main() {\n+    let trait_object = &() as &dyn Trait;\n+    trait_object.static_lifetime_bound();\n+    trait_object.arg_lifetime_bound(&());\n+    trait_object.autotrait_bound(); //~ ERROR: the trait bound `dyn Trait: AutoTrait` is not satisfied\n+}"}, {"sha": "ea51f5084f8755e59cee5dcd91dbfcd15623797e", "filename": "tests/ui/where-clauses/self-in-where-clause-allowed.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/tests%2Fui%2Fwhere-clauses%2Fself-in-where-clause-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4501d3abe17a3dc10f0dffcb38be04b58a33bafb/tests%2Fui%2Fwhere-clauses%2Fself-in-where-clause-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fself-in-where-clause-allowed.stderr?ref=4501d3abe17a3dc10f0dffcb38be04b58a33bafb", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `dyn Trait: AutoTrait` is not satisfied\n+  --> $DIR/self-in-where-clause-allowed.rs:22:18\n+   |\n+LL |     trait_object.autotrait_bound();\n+   |                  ^^^^^^^^^^^^^^^ the trait `AutoTrait` is not implemented for `dyn Trait`\n+   |\n+note: required by a bound in `Trait::autotrait_bound`\n+  --> $DIR/self-in-where-clause-allowed.rs:13:43\n+   |\n+LL |     fn autotrait_bound(&self) where Self: AutoTrait {}\n+   |                                           ^^^^^^^^^ required by this bound in `Trait::autotrait_bound`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}