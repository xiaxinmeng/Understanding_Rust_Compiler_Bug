{"sha": "4a76541cba8427b3c0296361a3b4873486172a54", "node_id": "C_kwDOAAsO6NoAKDRhNzY1NDFjYmE4NDI3YjNjMDI5NjM2MWEzYjQ4NzM0ODYxNzJhNTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-08T10:09:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-08T10:09:00Z"}, "message": "Rollup merge of #91577 - ecstatic-morse:mir-pass-manager-cleanup, r=oli-obk\n\nAddress some FIXMEs left over from #91475\n\nThis shouldn't change behavior, only clarify what we're currently doing. I filed #91576 to see if the treatment of generator drop shims is intentional.\n\ncc #91475", "tree": {"sha": "575f6187185a6e9cd08499efba86c7a5229ada09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/575f6187185a6e9cd08499efba86c7a5229ada09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a76541cba8427b3c0296361a3b4873486172a54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsIQ8CRBK7hj4Ov3rIwAAbcUIAGWlqWE0cuXT2PKw8Brccmfg\nYeYZEOceALw65ztBGuJTVvwFNZsrP1j9sQ9SKUhX6Zmmm/LtmE2+Gs3ZSCo+pihO\nwHH+KF1lz9rIuGqoReQqOMenbd0smwJuC0eX7hHx3INj9zmdF7ve3G7gv6/jhh0o\n5M7AT1OCHsB4S4vcyEIoczM/k5/0MvgxWHzABY8zbSsZypLrqjbUVnk0tO9KG4tt\nPgFgD19saulVuYOKy0nb8tjGQDTIX0ipeQQ+17m75U/uxmkcqVj17mOo63VKPJlA\nIEGkKi4jQ2WjrkNFGYoNSo5Na2pZr2+LemzXTxFI0oitd5n6e7Bklhd1KTM7ws4=\n=62QI\n-----END PGP SIGNATURE-----\n", "payload": "tree 575f6187185a6e9cd08499efba86c7a5229ada09\nparent 87f2c51dcd67553d4106b414621e7d03f1d43b7a\nparent f04b8f2edfff5b4ce57c86ed08462507d5c1e19b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638958140 +0100\ncommitter GitHub <noreply@github.com> 1638958140 +0100\n\nRollup merge of #91577 - ecstatic-morse:mir-pass-manager-cleanup, r=oli-obk\n\nAddress some FIXMEs left over from #91475\n\nThis shouldn't change behavior, only clarify what we're currently doing. I filed #91576 to see if the treatment of generator drop shims is intentional.\n\ncc #91475\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a76541cba8427b3c0296361a3b4873486172a54", "html_url": "https://github.com/rust-lang/rust/commit/4a76541cba8427b3c0296361a3b4873486172a54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a76541cba8427b3c0296361a3b4873486172a54/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87f2c51dcd67553d4106b414621e7d03f1d43b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/87f2c51dcd67553d4106b414621e7d03f1d43b7a", "html_url": "https://github.com/rust-lang/rust/commit/87f2c51dcd67553d4106b414621e7d03f1d43b7a"}, {"sha": "f04b8f2edfff5b4ce57c86ed08462507d5c1e19b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04b8f2edfff5b4ce57c86ed08462507d5c1e19b", "html_url": "https://github.com/rust-lang/rust/commit/f04b8f2edfff5b4ce57c86ed08462507d5c1e19b"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "130688e2d53d451891be61df22130aae933c95b5", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a76541cba8427b3c0296361a3b4873486172a54/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a76541cba8427b3c0296361a3b4873486172a54/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=4a76541cba8427b3c0296361a3b4873486172a54", "patch": "@@ -480,8 +480,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n             &const_prop::ConstProp,\n             //\n-            // FIXME: The old pass manager ran this only at mir-opt-level >= 1, but\n-            // const-prop runs unconditionally. Should this run unconditionally as well?\n+            // Const-prop runs unconditionally, but doesn't mutate the MIR at mir-opt-level=0.\n             &o1(simplify_branches::SimplifyConstCondition::new(\"after-const-prop\")),\n             &early_otherwise_branch::EarlyOtherwiseBranch,\n             &simplify_comparison_integral::SimplifyComparisonIntegral,"}, {"sha": "a913c1f0d5ba8e756534d27efb896554c0284092", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a76541cba8427b3c0296361a3b4873486172a54/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a76541cba8427b3c0296361a3b4873486172a54/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=4a76541cba8427b3c0296361a3b4873486172a54", "patch": "@@ -64,7 +64,19 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n \n             build_call_shim(tcx, instance, Some(Adjustment::RefMut), CallKind::Direct(call_mut))\n         }\n-        ty::InstanceDef::DropGlue(def_id, ty) => build_drop_shim(tcx, def_id, ty),\n+\n+        ty::InstanceDef::DropGlue(def_id, ty) => {\n+            // FIXME(#91576): Drop shims for generators aren't subject to the MIR passes at the end\n+            // of this function. Is this intentional?\n+            if let Some(ty::Generator(gen_def_id, substs, _)) = ty.map(ty::TyS::kind) {\n+                let body = tcx.optimized_mir(*gen_def_id).generator_drop().unwrap();\n+                let body = body.clone().subst(tcx, substs);\n+                debug!(\"make_shim({:?}) = {:?}\", instance, body);\n+                return body;\n+            }\n+\n+            build_drop_shim(tcx, def_id, ty)\n+        }\n         ty::InstanceDef::CloneShim(def_id, ty) => build_clone_shim(tcx, def_id, ty),\n         ty::InstanceDef::Virtual(..) => {\n             bug!(\"InstanceDef::Virtual ({:?}) is for direct calls only\", instance)\n@@ -75,14 +87,6 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n \n-    // In some of the above cases, we seem to be invoking the passes for non-shim MIR bodies.\n-    // If that happens, there's no need to run them again.\n-    //\n-    // FIXME: Is this intentional?\n-    if result.phase >= MirPhase::Const {\n-        return result;\n-    }\n-\n     pm::run_passes(\n         tcx,\n         &mut result,\n@@ -140,11 +144,7 @@ fn local_decls_for_sig<'tcx>(\n fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>) -> Body<'tcx> {\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n-    // Check if this is a generator, if so, return the drop glue for it\n-    if let Some(&ty::Generator(gen_def_id, substs, _)) = ty.map(|ty| ty.kind()) {\n-        let body = tcx.optimized_mir(gen_def_id).generator_drop().unwrap();\n-        return body.clone().subst(tcx, substs);\n-    }\n+    assert!(!matches!(ty, Some(ty) if ty.is_generator()));\n \n     let substs = if let Some(ty) = ty {\n         tcx.intern_substs(&[ty.into()])"}]}