{"sha": "6f88f4dea559157c690688721cff6761172db6c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODhmNGRlYTU1OTE1N2M2OTA2ODg3MjFjZmY2NzYxMTcyZGI2YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-06T03:07:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-06T03:07:59Z"}, "message": "auto merge of #8278 : cmr/rust/workaround, r=brson", "tree": {"sha": "71201a7b0f442ebec6be0987f75f5414d803cc1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71201a7b0f442ebec6be0987f75f5414d803cc1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f88f4dea559157c690688721cff6761172db6c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f88f4dea559157c690688721cff6761172db6c3", "html_url": "https://github.com/rust-lang/rust/commit/6f88f4dea559157c690688721cff6761172db6c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f88f4dea559157c690688721cff6761172db6c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbda3fa9383dba653b20bd064102caceef91897a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbda3fa9383dba653b20bd064102caceef91897a", "html_url": "https://github.com/rust-lang/rust/commit/bbda3fa9383dba653b20bd064102caceef91897a"}, {"sha": "118158729ec694e6d21d94b5a51a7cbb57d9a37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/118158729ec694e6d21d94b5a51a7cbb57d9a37a", "html_url": "https://github.com/rust-lang/rust/commit/118158729ec694e6d21d94b5a51a7cbb57d9a37a"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "625dcd5d9cc49d1a5adb75fea9bd225e150c1cff", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f88f4dea559157c690688721cff6761172db6c3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f88f4dea559157c690688721cff6761172db6c3/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6f88f4dea559157c690688721cff6761172db6c3", "patch": "@@ -3097,7 +3097,7 @@ impl Resolver {\n         let imports: &mut ~[@ImportDirective] = &mut *module_.imports;\n         let import_count = imports.len();\n         if index != import_count {\n-            let sn = self.session.codemap.span_to_snippet(imports[index].span);\n+            let sn = self.session.codemap.span_to_snippet(imports[index].span).unwrap();\n             if sn.contains(\"::\") {\n                 self.session.span_err(imports[index].span, \"unresolved import\");\n             } else {"}, {"sha": "8c70f128d9a09b82408950f3bba087b3189b7d5c", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f88f4dea559157c690688721cff6761172db6c3/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f88f4dea559157c690688721cff6761172db6c3/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=6f88f4dea559157c690688721cff6761172db6c3", "patch": "@@ -369,12 +369,19 @@ impl CodeMap {\n         return @FileLines {file: lo.file, lines: lines};\n     }\n \n-    pub fn span_to_snippet(&self, sp: span) -> ~str {\n+    pub fn span_to_snippet(&self, sp: span) -> Option<~str> {\n         let begin = self.lookup_byte_offset(sp.lo);\n         let end = self.lookup_byte_offset(sp.hi);\n-        assert_eq!(begin.fm.start_pos, end.fm.start_pos);\n-        return begin.fm.src.slice(\n-                          begin.pos.to_uint(), end.pos.to_uint()).to_owned();\n+\n+        // FIXME #8256: this used to be an assert but whatever precondition\n+        // it's testing isn't true for all spans in the AST, so to allow the\n+        // caller to not have to fail (and it can't catch it since the CodeMap\n+        // isn't sendable), return None\n+        if begin.fm.start_pos != end.fm.start_pos {\n+            None\n+        } else {\n+            Some(begin.fm.src.slice( begin.pos.to_uint(), end.pos.to_uint()).to_owned())\n+        }\n     }\n \n     pub fn get_filemap(&self, filename: &str) -> @FileMap {"}]}