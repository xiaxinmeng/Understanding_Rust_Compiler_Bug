{"sha": "8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOGNjMDYxZDlhODJmN2NmZDliOWM5ZDczMTJjOTU1MWM0YjI4NmY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-17T14:45:49Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-10-02T14:55:41Z"}, "message": "syntax: swap from .span_fatal to .span_err in #[deriving(FromPrimitive)]", "tree": {"sha": "21918cfd44eae2f05f639bf0e80107f39270e34f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21918cfd44eae2f05f639bf0e80107f39270e34f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f", "html_url": "https://github.com/rust-lang/rust/commit/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0feaccf5260bc59f7ee4294a2ecc875da669ad30", "url": "https://api.github.com/repos/rust-lang/rust/commits/0feaccf5260bc59f7ee4294a2ecc875da669ad30", "html_url": "https://github.com/rust-lang/rust/commit/0feaccf5260bc59f7ee4294a2ecc875da669ad30"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "65a6572fa5e997c104cc1c5d5789baaae04ee24f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f", "patch": "@@ -136,6 +136,7 @@ pub trait AstBuilder {\n     fn expr_some(&self, sp: Span, expr: @ast::Expr) -> @ast::Expr;\n     fn expr_none(&self, sp: Span) -> @ast::Expr;\n \n+    fn expr_fail(&self, span: Span, msg: @str) -> @ast::Expr;\n     fn expr_unreachable(&self, span: Span) -> @ast::Expr;\n \n     fn pat(&self, span: Span, pat: ast::Pat_) -> @ast::Pat;\n@@ -591,7 +592,7 @@ impl AstBuilder for @ExtCtxt {\n         self.expr_path(none)\n     }\n \n-    fn expr_unreachable(&self, span: Span) -> @ast::Expr {\n+    fn expr_fail(&self, span: Span, msg: @str) -> @ast::Expr {\n         let loc = self.codemap().lookup_char_pos(span.lo);\n         self.expr_call_global(\n             span,\n@@ -602,12 +603,16 @@ impl AstBuilder for @ExtCtxt {\n                 self.ident_of(\"fail_with\"),\n             ],\n             ~[\n-                self.expr_str(span, @\"internal error: entered unreachable code\"),\n+                self.expr_str(span, msg),\n                 self.expr_str(span, loc.file.name),\n                 self.expr_uint(span, loc.line),\n             ])\n     }\n \n+    fn expr_unreachable(&self, span: Span) -> @ast::Expr {\n+        self.expr_fail(span, @\"internal error: entered unreachable code\")\n+    }\n+\n \n     fn pat(&self, span: Span, pat: ast::Pat_) -> @ast::Pat {\n         @ast::Pat { id: ast::DUMMY_NODE_ID, node: pat, span: span }"}, {"sha": "ddf8fc404d40f9d0e7f74f1acd849dbda2389af5", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=8f8cc061d9a82f7cfd9b9c9d7312c9551c4b286f", "patch": "@@ -64,10 +64,15 @@ fn cs_from(name: &str, cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr\n         _ => cx.span_bug(span, \"Incorrect number of arguments in `deriving(FromPrimitive)`\")\n     };\n \n-    return match *substr.fields {\n+    match *substr.fields {\n+        StaticStruct(*) => {\n+            cx.span_err(span, \"`FromPrimitive` cannot be derived for structs\");\n+            return cx.expr_fail(span, @\"\");\n+        }\n         StaticEnum(enum_def, _) => {\n             if enum_def.variants.is_empty() {\n-                cx.span_fatal(span, \"`FromPrimitive` cannot be derived for enums with no variants\");\n+                cx.span_err(span, \"`FromPrimitive` cannot be derived for enums with no variants\");\n+                return cx.expr_fail(span, @\"\");\n             }\n \n             let mut arms = ~[];\n@@ -76,8 +81,9 @@ fn cs_from(name: &str, cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr\n                 match variant.node.kind {\n                     ast::tuple_variant_kind(ref args) => {\n                         if !args.is_empty() {\n-                            cx.span_fatal(span, \"`FromPrimitive` cannot be derived for \\\n-                                                 enum variants with arguments\");\n+                            cx.span_err(span, \"`FromPrimitive` cannot be derived for \\\n+                                               enum variants with arguments\");\n+                            return cx.expr_fail(span, @\"\");\n                         }\n \n                         // expr for `$n == $variant as $name`\n@@ -99,8 +105,9 @@ fn cs_from(name: &str, cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr\n                         arms.push(arm);\n                     }\n                     ast::struct_variant_kind(_) => {\n-                        cx.span_fatal(span, \"`FromPrimitive` cannot be derived for enums \\\n-                                             with struct variants\");\n+                        cx.span_err(span, \"`FromPrimitive` cannot be derived for enums \\\n+                                           with struct variants\");\n+                        return cx.expr_fail(span, @\"\");\n                     }\n                 }\n             }\n@@ -116,5 +123,5 @@ fn cs_from(name: &str, cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr\n             cx.expr_match(span, n, arms)\n         }\n         _ => cx.bug(\"expected StaticEnum in deriving(FromPrimitive)\")\n-    };\n+    }\n }"}]}