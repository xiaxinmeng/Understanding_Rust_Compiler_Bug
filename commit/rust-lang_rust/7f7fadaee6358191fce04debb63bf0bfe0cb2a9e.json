{"sha": "7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmN2ZhZGFlZTYzNTgxOTFmY2UwNGRlYmI2M2JmMGJmZTBjYjJhOWU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-27T11:36:49Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-27T11:36:49Z"}, "message": "Also use smaller spans for unsize adjustments", "tree": {"sha": "de7aced2c345a80900e10cb5062afd1d14289b51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7aced2c345a80900e10cb5062afd1d14289b51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "html_url": "https://github.com/rust-lang/rust/commit/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9309e2ef0706ab31f0507e38ad49281a8c38f6cb", "html_url": "https://github.com/rust-lang/rust/commit/9309e2ef0706ab31f0507e38ad49281a8c38f6cb"}], "stats": {"total": 151, "additions": 62, "deletions": 89}, "files": [{"sha": "40d992048344bfc530c8a384df6f6f3c4329e852", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -199,6 +199,13 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             ExprKind::Use { source: cast_expr.to_ref() }\n         }\n         Adjust::Unsize => {\n+            // See the above comment for Adjust::Deref\n+            if let ExprKind::Block { body } = expr.kind {\n+                if let Some(ref last_expr) = body.expr {\n+                    span = last_expr.span;\n+                    expr.span = span;\n+                }\n+            }\n             ExprKind::Unsize { source: expr.to_ref() }\n         }\n     };"}, {"sha": "19279b53c1c8b5650f18b19dd0dda3dc38c5498e", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.nll.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -11,18 +11,13 @@ LL |     ss.r = b; //~ ERROR 41:12: 41:13: explicit lifetime required in the typ\n    |            ^\n \n error[E0621]: explicit lifetime required in the type of `ss`\n-  --> $DIR/object-lifetime-default-from-box-error.rs:24:48\n+  --> $DIR/object-lifetime-default-from-box-error.rs:28:5\n    |\n-LL |   fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n-   |  _____________---------------____________________^\n-   | |             |\n-   | |             help: add explicit lifetime `'static` to the type of `ss`: `&mut SomeStruct<'static>`\n-LL | |     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n-LL | |     // is illegal.\n-LL | |\n-LL | |     ss.r //~ ERROR explicit lifetime required in the type of `ss` [E0621]\n-LL | | }\n-   | |_^ lifetime `'static` required\n+LL | fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n+   |             --------------- help: add explicit lifetime `'static` to the type of `ss`: `&mut SomeStruct<'static>`\n+...\n+LL |     ss.r //~ ERROR explicit lifetime required in the type of `ss` [E0621]\n+   |     ^^^^ lifetime `'static` required\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/object-lifetime-default-from-box-error.rs:28:5"}, {"sha": "f0def1888b9cdcfc8bcf870966d530aa44bfd382", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -31,43 +31,31 @@ LL |     let x: Box<Foo + 'static> = Box::new(v);\n    |                                 ^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:38\n+  --> $DIR/region-object-lifetime-in-coercion.rs:24:5\n    |\n-LL |   fn b(v: &[u8]) -> Box<Foo + 'static> {\n-   |  _________-----________________________^\n-   | |         |\n-   | |         help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-LL | |     Box::new(v)\n-LL | |         //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n-LL | | }\n-   | |_^ lifetime `'static` required\n+LL | fn b(v: &[u8]) -> Box<Foo + 'static> {\n+   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:28:28\n+  --> $DIR/region-object-lifetime-in-coercion.rs:31:5\n    |\n-LL |   fn c(v: &[u8]) -> Box<Foo> {\n-   |  _________-----______________^\n-   | |         |\n-   | |         help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-LL | |     // same as previous case due to RFC 599\n-LL | |\n-LL | |     Box::new(v)\n-LL | |         //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n-LL | | }\n-   | |_^ lifetime `'static` required\n+LL | fn c(v: &[u8]) -> Box<Foo> {\n+   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+...\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^ lifetime `'static` required\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/region-object-lifetime-in-coercion.rs:35:41\n+  --> $DIR/region-object-lifetime-in-coercion.rs:36:5\n    |\n-LL |   fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n-   |  ______--_--______________________________^\n-   | |      |  |\n-   | |      |  lifetime `'b` defined here\n-   | |      lifetime `'a` defined here\n-LL | |     Box::new(v)\n-LL | |         //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n-LL | | }\n-   | |_^ returning this value requires that `'a` must outlive `'b`\n+LL | fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n+   |      -- -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "85724cfabd814f8ddf0afcb5764b65c0b9118825", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -5,15 +5,12 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |           ^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-2.rs:19:57\n+  --> $DIR/regions-close-object-into-object-2.rs:20:5\n    |\n-LL |   fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n-   |  ______--_________________________________________________^\n-   | |      |\n-   | |      lifetime `'a` defined here\n-LL | |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-LL | | }\n-   | |_^ returning this value requires that `'a` must outlive `'static`\n+LL | fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n+   |      -- lifetime `'a` defined here\n+LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-2.rs:20:11"}, {"sha": "3dc8df3608f06a108d163e056aea13c026cc3862", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -28,17 +28,6 @@ warning: not reporting region error due to nll\n LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |     ^^^^^^^^^^\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-4.rs:19:51\n-   |\n-LL |   fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n-   |  ______--___________________________________________^\n-   | |      |\n-   | |      lifetime `'a` defined here\n-LL | |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-LL | | }\n-   | |_^ returning this value requires that `'a` must outlive `'static`\n-\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:5\n    |\n@@ -47,6 +36,14 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-close-object-into-object-4.rs:20:5\n+   |\n+LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n+   |      -- lifetime `'a` defined here\n+LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:9\n    |"}, {"sha": "f19feed175272661108e4a5a0b7bb1a2a2967062", "filename": "src/test/ui/regions/regions-proc-bound-capture.nll.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -5,16 +5,13 @@ LL |     Box::new(move|| { *x }) //~ ERROR explicit lifetime required in the typ\n    |              ^^^^^^^^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/regions-proc-bound-capture.rs:17:62\n+  --> $DIR/regions-proc-bound-capture.rs:19:5\n    |\n-LL |   fn static_proc(x: &isize) -> Box<FnMut()->(isize) + 'static> {\n-   |  ___________________------_____________________________________^\n-   | |                   |\n-   | |                   help: add explicit lifetime `'static` to the type of `x`: `&'static isize`\n-LL | |     // This is illegal, because the region bound on `proc` is 'static.\n-LL | |     Box::new(move|| { *x }) //~ ERROR explicit lifetime required in the type of `x` [E0621]\n-LL | | }\n-   | |_^ lifetime `'static` required\n+LL | fn static_proc(x: &isize) -> Box<FnMut()->(isize) + 'static> {\n+   |                   ------ help: add explicit lifetime `'static` to the type of `x`: `&'static isize`\n+LL |     // This is illegal, because the region bound on `proc` is 'static.\n+LL |     Box::new(move|| { *x }) //~ ERROR explicit lifetime required in the type of `x` [E0621]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error: aborting due to previous error\n "}, {"sha": "f8e5e3914eb3cc2fcb64216e89a2be526ce97eae", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.nll.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.nll.stderr?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -1,17 +1,12 @@\n error[E0597]: `tmp0` does not live long enough\n   --> $DIR/regions-close-over-type-parameter-2.rs:33:20\n    |\n-LL |       let _ = {\n-   |  _____________-\n-LL | |         let tmp0 = 3;\n-LL | |         let tmp1 = &tmp0;\n-   | |                    ^^^^^ borrowed value does not live long enough\n-LL | |         repeater3(tmp1)\n-LL | |     };\n-   | |     -\n-   | |     |\n-   | |_____`tmp0` dropped here while still borrowed\n-   |       borrow later used here\n+LL |         let tmp1 = &tmp0;\n+   |                    ^^^^^ borrowed value does not live long enough\n+LL |         repeater3(tmp1)\n+   |         --------------- borrow later used here\n+LL |     };\n+   |     - `tmp0` dropped here while still borrowed\n \n error: aborting due to previous error\n "}, {"sha": "58939b0f64f5a99603fabb5d02f1c1dd1544eb6e", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f7fadaee6358191fce04debb63bf0bfe0cb2a9e/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=7f7fadaee6358191fce04debb63bf0bfe0cb2a9e", "patch": "@@ -23,16 +23,13 @@ LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/dyn-trait-underscore.rs:16:52\n+  --> $DIR/dyn-trait-underscore.rs:18:5\n    |\n-LL |   fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |  ________________-___________________________________^\n-   | |                |\n-   | |                let's call the lifetime of this reference `'1`\n-LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-LL | |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n-LL | | }\n-   | |_^ returning this value requires that `'1` must outlive `'static`\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |                - let's call the lifetime of this reference `'1`\n+LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}]}