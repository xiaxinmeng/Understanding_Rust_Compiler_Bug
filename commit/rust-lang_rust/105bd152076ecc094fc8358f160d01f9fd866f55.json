{"sha": "105bd152076ecc094fc8358f160d01f9fd866f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNWJkMTUyMDc2ZWNjMDk0ZmM4MzU4ZjE2MGQwMWY5ZmQ4NjZmNTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-12T18:40:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-12T18:40:45Z"}, "message": "Address the review comments", "tree": {"sha": "670b2558d6869c3c2e9a195e90d7d3231ed00e36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/670b2558d6869c3c2e9a195e90d7d3231ed00e36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/105bd152076ecc094fc8358f160d01f9fd866f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/105bd152076ecc094fc8358f160d01f9fd866f55", "html_url": "https://github.com/rust-lang/rust/commit/105bd152076ecc094fc8358f160d01f9fd866f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/105bd152076ecc094fc8358f160d01f9fd866f55/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ed7b0501a24f4def3aff775c6fbf9481e3c77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ed7b0501a24f4def3aff775c6fbf9481e3c77e", "html_url": "https://github.com/rust-lang/rust/commit/e3ed7b0501a24f4def3aff775c6fbf9481e3c77e"}], "stats": {"total": 84, "additions": 22, "deletions": 62}, "files": [{"sha": "31158901775f35dc911a066aec9a29ebd05e82fa", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 59, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=105bd152076ecc094fc8358f160d01f9fd866f55", "patch": "@@ -171,13 +171,6 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                     attr::mark_used(attr);\n                     self.tcx.sess.span_err(attr.span(), \"stability attributes may not be used \\\n                                                          outside of the standard library\");\n-                } else if tag == \"deprecated\" {\n-                    if !self.tcx.sess.features.borrow().deprecated {\n-                        self.tcx.sess.span_err(attr.span(),\n-                                               \"`#[deprecated]` attribute is unstable\");\n-                        fileline_help!(self.tcx.sess, attr.span(), \"add #![feature(deprecated)] to \\\n-                                                                    the crate features to enable\");\n-                    }\n                 }\n             }\n \n@@ -687,68 +680,20 @@ pub fn lookup_deprecation<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<Depre\n \n fn lookup_stability_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> {\n     debug!(\"lookup(id={:?})\", id);\n-\n-    // is this definition the implementation of a trait method?\n-    match tcx.trait_item_of_item(id) {\n-        Some(ty::MethodTraitItemId(trait_method_id)) if trait_method_id != id => {\n-            debug!(\"lookup: trait_method_id={:?}\", trait_method_id);\n-            return lookup_stability(tcx, trait_method_id)\n-        }\n-        _ => {}\n-    }\n-\n-    let item_stab = if id.is_local() {\n+    if id.is_local() {\n         None // The stability cache is filled partially lazily\n     } else {\n         tcx.sess.cstore.stability(id).map(|st| tcx.intern_stability(st))\n-    };\n-\n-    item_stab.or_else(|| {\n-        if tcx.is_impl(id) {\n-            if let Some(trait_id) = tcx.trait_id_of_impl(id) {\n-                // FIXME (#18969): for the time being, simply use the\n-                // stability of the trait to determine the stability of any\n-                // unmarked impls for it. See FIXME above for more details.\n-\n-                debug!(\"lookup: trait_id={:?}\", trait_id);\n-                return lookup_stability(tcx, trait_id);\n-            }\n-        }\n-        None\n-    })\n+    }\n }\n \n fn lookup_deprecation_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<Deprecation> {\n     debug!(\"lookup(id={:?})\", id);\n-\n-    // is this definition the implementation of a trait method?\n-    match tcx.trait_item_of_item(id) {\n-        Some(ty::MethodTraitItemId(trait_method_id)) if trait_method_id != id => {\n-            debug!(\"lookup: trait_method_id={:?}\", trait_method_id);\n-            return lookup_deprecation(tcx, trait_method_id)\n-        }\n-        _ => {}\n-    }\n-\n-    let item_depr = if id.is_local() {\n+    if id.is_local() {\n         None // The stability cache is filled partially lazily\n     } else {\n         tcx.sess.cstore.deprecation(id)\n-    };\n-\n-    item_depr.or_else(|| {\n-        if tcx.is_impl(id) {\n-            if let Some(trait_id) = tcx.trait_id_of_impl(id) {\n-                // FIXME (#18969): for the time being, simply use the\n-                // stability of the trait to determine the stability of any\n-                // unmarked impls for it. See FIXME above for more details.\n-\n-                debug!(\"lookup: trait_id={:?}\", trait_id);\n-                return lookup_deprecation(tcx, trait_id);\n-            }\n-        }\n-        None\n-    })\n+    }\n }\n \n /// Given the list of enabled features that were not language features (i.e. that"}, {"sha": "e403e6d067af1725254b8e122ea6cecde67e3efc", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=105bd152076ecc094fc8358f160d01f9fd866f55", "patch": "@@ -575,7 +575,7 @@ impl LateLintPass for MissingDebugImplementations {\n declare_lint! {\n     DEPRECATED,\n     Warn,\n-    \"detects use of `#[deprecated]` or `#[rustc_deprecated]` items\"\n+    \"detects use of deprecated items\"\n }\n \n /// Checks for use of items with `#[deprecated]` or `#[rustc_deprecated]` attributes"}, {"sha": "f186aff6d363ac40516cd227a1b10bb5f542986e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=105bd152076ecc094fc8358f160d01f9fd866f55", "patch": "@@ -380,7 +380,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"must_use\", Whitelisted, Ungated),\n     (\"stable\", Whitelisted, Ungated),\n     (\"unstable\", Whitelisted, Ungated),\n-    (\"deprecated\", Whitelisted, Ungated),\n+    (\"deprecated\", Normal, Gated(\"deprecated\", \"`#[deprecated]` attribute is unstable\")),\n \n     (\"rustc_paren_sugar\", Normal, Gated(\"unboxed_closures\",\n                                         \"unboxed_closures are still evolving\")),"}, {"sha": "ff872efb7bdb1049f44ecad65feb2ae398a59f9c", "filename": "src/test/auxiliary/deprecation-lint.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fauxiliary%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fauxiliary%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdeprecation-lint.rs?ref=105bd152076ecc094fc8358f160d01f9fd866f55", "patch": "@@ -31,6 +31,9 @@ pub trait Trait {\n     fn trait_deprecated_text(&self) {}\n }\n \n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n+pub trait DeprecatedTrait { fn dummy(&self) { } }\n+\n impl Trait for MethodTester {}\n \n #[deprecated(since = \"1.0.0\", note = \"text\")]"}, {"sha": "3100aba4b72be3cfa027c52d61feec6bb0f67470", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=105bd152076ecc094fc8358f160d01f9fd866f55", "patch": "@@ -98,6 +98,12 @@ impl Trait for MethodTester {}\n #[unstable(feature = \"test_feature\", issue = \"0\")]\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n+pub trait DeprecatedTrait {\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")] fn dummy(&self) { }\n+}\n+\n #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedStruct {"}, {"sha": "58fa00fb41086d2f09a621bbfb42047dcac29491", "filename": "src/test/compile-fail/deprecation-lint.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs?ref=105bd152076ecc094fc8358f160d01f9fd866f55", "patch": "@@ -78,6 +78,11 @@ mod cross_crate {\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n     }\n \n+    struct S;\n+\n+    impl DeprecatedTrait for S {} //~ ERROR use of deprecated item: text\n+    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item: text\n+\n     pub fn foo() {\n         let x = Stable {\n             override2: 3,"}, {"sha": "414d2a857acc72b0f813ef977a9ffbe8166a1374", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105bd152076ecc094fc8358f160d01f9fd866f55/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=105bd152076ecc094fc8358f160d01f9fd866f55", "patch": "@@ -227,8 +227,9 @@ mod cross_crate {\n     struct S;\n \n     impl UnstableTrait for S { } //~ ERROR use of unstable library feature\n-\n+    impl DeprecatedTrait for S {} //~ ERROR use of deprecated item: text\n     trait LocalTrait : UnstableTrait { } //~ ERROR use of unstable library feature\n+    trait LocalTrait2 : DeprecatedTrait { } //~ ERROR use of deprecated item: text\n \n     impl Trait for S {\n         fn trait_stable(&self) {}"}]}