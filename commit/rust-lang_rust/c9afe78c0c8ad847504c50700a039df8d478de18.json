{"sha": "c9afe78c0c8ad847504c50700a039df8d478de18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWZlNzhjMGM4YWQ4NDc1MDRjNTA3MDBhMDM5ZGY4ZDQ3OGRlMTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-12T01:20:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-12T01:20:25Z"}, "message": "Parse autos", "tree": {"sha": "6c939a5cfafbf725d64696f28247fc1ef412c9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c939a5cfafbf725d64696f28247fc1ef412c9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9afe78c0c8ad847504c50700a039df8d478de18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9afe78c0c8ad847504c50700a039df8d478de18", "html_url": "https://github.com/rust-lang/rust/commit/c9afe78c0c8ad847504c50700a039df8d478de18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9afe78c0c8ad847504c50700a039df8d478de18/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7a0308e32711dce241142dac6c97ccd3a74807", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7a0308e32711dce241142dac6c97ccd3a74807", "html_url": "https://github.com/rust-lang/rust/commit/8a7a0308e32711dce241142dac6c97ccd3a74807"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "f54c95dc2e62ffe9fcec19d047b7cb387d9280d4", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9afe78c0c8ad847504c50700a039df8d478de18/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9afe78c0c8ad847504c50700a039df8d478de18/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=c9afe78c0c8ad847504c50700a039df8d478de18", "patch": "@@ -541,24 +541,26 @@ io fn parse_expr(parser p) -> @ast.expr {\n     }\n }\n \n+io fn parse_initializer(parser p) -> option[@ast.expr] {\n+    if (p.peek() == token.EQ) {\n+        p.bump();\n+        ret some(parse_expr(p));\n+    }\n+\n+    ret none[@ast.expr];\n+}\n+\n io fn parse_let(parser p) -> @ast.decl {\n     auto lo = p.get_span();\n \n     expect(p, token.LET);\n     auto ty = parse_ty(p);\n     auto id = parse_ident(p);\n+    auto init = parse_initializer(p);\n \n-    auto init;\n-    if (p.peek() == token.EQ) {\n-        p.bump();\n-        init = some(parse_expr(p));\n-    } else {\n-        init = none[@ast.expr];\n-    }\n-\n+    auto hi = p.get_span();\n     expect(p, token.SEMI);\n \n-    auto hi = p.get_span();\n     ret @spanned(lo, hi, ast.decl_local(id, some(ty), init));\n }\n \n@@ -580,6 +582,17 @@ io fn parse_stmt(parser p) -> @ast.stmt {\n             ret @spanned(lo, hi, ast.stmt_decl(leht));\n         }\n \n+        case (token.AUTO) {\n+            p.bump();\n+            auto id = parse_ident(p);\n+            auto init = parse_initializer(p);\n+            auto hi = p.get_span();\n+            expect(p, token.SEMI);\n+\n+            auto decl = ast.decl_local(id, none[@ast.ty], init);\n+            ret @spanned(lo, hi, ast.stmt_decl(@spanned(lo, hi, decl)));\n+        }\n+\n         // Handle the (few) block-expr stmts first.\n \n         case (token.IF) {"}]}