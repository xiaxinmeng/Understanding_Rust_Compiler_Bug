{"sha": "254f8796b729810846e2b97620032ecaf103db33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NGY4Nzk2YjcyOTgxMDg0NmUyYjk3NjIwMDMyZWNhZjEwM2RiMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-13T19:49:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-13T19:49:11Z"}, "message": "Auto merge of #52352 - kennytm:rollup, r=kennytm\n\nRollup of 17 pull requests\n\nSuccessful merges:\n\n - #51962 (Provide llvm-strip in llvm-tools component)\n - #52003 (Implement `Option::replace` in the core library)\n - #52156 (Update std::ascii::ASCIIExt deprecation notes)\n - #52280 (llvm-tools-preview: fix build-manifest)\n - #52290 (Deny bare trait objects in src/librustc_save_analysis)\n - #52293 (Deny bare trait objects in librustc_typeck)\n - #52299 (Deny bare trait objects in src/libserialize)\n - #52300 (Deny bare trait objects in librustc_target and libtest)\n - #52302 (Deny bare trait objects in the rest of rust)\n - #52310 (Backport 1.27.1 release notes to master)\n - #52315 (Resolve FIXME(#27942))\n - #52316 (task: remove wrong comments about non-existent LocalWake trait)\n - #52322 (Update llvm-rebuild-trigger in light of LLVM 7 upgrade)\n - #52330 (Don't silently ignore invalid data in target spec)\n - #52333 (CI: Enable core dump on Linux, and print their stack trace on segfault. )\n - #52346 (Fix typo in improper_ctypes suggestion)\n - #52350 (Bump bootstrap compiler to 1.28.0-beta.10)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3f6f72f45ebee9ca520da7781fd1d02a2445f4f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6f72f45ebee9ca520da7781fd1d02a2445f4f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/254f8796b729810846e2b97620032ecaf103db33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/254f8796b729810846e2b97620032ecaf103db33", "html_url": "https://github.com/rust-lang/rust/commit/254f8796b729810846e2b97620032ecaf103db33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/254f8796b729810846e2b97620032ecaf103db33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "html_url": "https://github.com/rust-lang/rust/commit/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d"}, {"sha": "ea9b8dd4bd7e6e8bd563af9a699a572d564d8a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea9b8dd4bd7e6e8bd563af9a699a572d564d8a5d", "html_url": "https://github.com/rust-lang/rust/commit/ea9b8dd4bd7e6e8bd563af9a699a572d564d8a5d"}], "stats": {"total": 327, "additions": 239, "deletions": 88}, "files": [{"sha": "0228fdc994dd769b5512c55a074dafd2dcffddd1", "filename": ".travis.yml", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -3,6 +3,10 @@ sudo: required\n dist: trusty\n services:\n   - docker\n+addons:\n+  apt:\n+    packages:\n+      - gdb\n \n git:\n   depth: 2\n@@ -249,6 +253,8 @@ before_script:\n           export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/run.sh\";\n       else\n           export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/docker/run.sh $IMAGE\";\n+          # Enable core dump on Linux.\n+          sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern';\n       fi\n \n # Log time information from this machine and an external machine for insight into possible\n@@ -274,6 +280,8 @@ after_failure:\n \n   # Random attempt at debugging currently. Just poking around in here to see if\n   # anything shows up.\n+\n+  # Dump backtrace for macOS\n   - ls -lat $HOME/Library/Logs/DiagnosticReports/\n   - find $HOME/Library/Logs/DiagnosticReports\n       -type f\n@@ -284,8 +292,24 @@ after_failure:\n       -exec head -750 {} \\;\n       -exec echo travis_fold\":\"end:crashlog \\; || true\n \n+  # Dump backtrace for Linux\n+  - ln -s . checkout &&\n+    for CORE in obj/cores/core.*; do\n+      EXE=$(echo $CORE | sed 's|obj/cores/core\\.[0-9]*\\.!checkout!\\(.*\\)|\\1|;y|!|/|');\n+      if [ -f \"$EXE\" ]; then\n+        printf travis_fold\":start:crashlog\\n\\033[31;1m%s\\033[0m\\n\" \"$CORE\";\n+        gdb -q -c \"$CORE\" \"$EXE\"\n+          -iex 'set auto-load off'\n+          -iex 'dir src/'\n+          -iex 'set sysroot .'\n+          -ex bt\n+          -ex q;\n+        echo travis_fold\":\"end:crashlog;\n+      fi;\n+    done || true\n+\n   # see #50887\n-  - head -30 ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers || true\n+  - cat ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers || true\n \n   # attempt to debug anything killed by the oom killer on linux, just to see if\n   # it happened"}, {"sha": "503ce7ede0d7d55f05699e04eb37cbbef8c09d4c", "filename": "RELEASES.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -140,6 +140,29 @@ Compatibility Notes\n [`{Any + Send + Sync}::downcast_ref`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref-2\n [`{Any + Send + Sync}::is`]: https://doc.rust-lang.org/std/any/trait.Any.html#method.is-2\n \n+Version 1.27.1 (2018-07-10)\n+===========================\n+\n+Security Notes\n+--------------\n+\n+- rustdoc would execute plugins in the /tmp/rustdoc/plugins directory\n+  when running, which enabled executing code as some other user on a\n+  given machine. This release fixes that vulnerability; you can read\n+  more about this on the [blog][rustdoc-sec]. The associated CVE is [CVE-2018-1000622].\n+\n+  Thank you to Red Hat for responsibily disclosing this vulnerability to us.\n+\n+Compatibility Notes\n+-------------------\n+\n+- The borrow checker was fixed to avoid an additional potential unsoundness when using\n+  match ergonomics: [#51415][51415], [#49534][49534].\n+\n+[51415]: https://github.com/rust-lang/rust/issues/51415\n+[49534]: https://github.com/rust-lang/rust/issues/49534\n+[rustdoc-sec]: https://blog.rust-lang.org/2018/07/06/security-advisory-for-rustdoc.html\n+[CVE-2018-1000622]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=%20CVE-2018-1000622\n \n Version 1.27.0 (2018-06-21)\n =========================="}, {"sha": "1efff19dfb993a69da84014b34587d77ab484499", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -206,7 +206,8 @@ const LLVM_TOOLS: &[&str] = &[\n     \"llvm-objcopy\", // used to transform ELFs into binary format which flashing tools consume\n     \"llvm-objdump\", // used to disassemble programs\n     \"llvm-profdata\", // used to inspect and merge files generated by profiles\n-    \"llvm-size\", // prints the size of the linker sections of a program\n+    \"llvm-size\", // used to prints the size of the linker sections of a program\n+    \"llvm-strip\", // used to discard symbols from binary files to reduce their size\n ];\n \n /// A structure representing a Rust compiler."}, {"sha": "4d767f09689767dbb2b9a1a95c9d6502c00f7d0b", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n use std::fs::File;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};"}, {"sha": "931c28f1ca98e95f3bd944c2123ba91156e0fe8d", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -99,6 +99,7 @@ objdir=$root_dir/obj\n \n mkdir -p $HOME/.cargo\n mkdir -p $objdir/tmp\n+mkdir $objdir/cores\n \n args=\n if [ \"$SCCACHE_BUCKET\" != \"\" ]; then"}, {"sha": "09a0cf3541d8dde8f7dc524db62af022933b2e5b", "filename": "src/ci/run.sh", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -24,6 +24,11 @@ if [ \"$NO_CHANGE_USER\" = \"\" ]; then\n   fi\n fi\n \n+# only enable core dump on Linux\n+if [ -f /proc/sys/kernel/core_pattern ]; then\n+  ulimit -c unlimited\n+fi\n+\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n "}, {"sha": "413b212281b74336383addbec46d46404f0b0038", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -10,6 +10,7 @@\n \n #![no_std]\n #![allow(unused_attributes)]\n+#![deny(bare_trait_objects)]\n #![unstable(feature = \"alloc_jemalloc\",\n             reason = \"implementation detail of std, does not provide any public API\",\n             issue = \"0\")]"}, {"sha": "c6c0abefbab23c6e42de21da4deb861a89978485", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -10,6 +10,7 @@\n \n #![no_std]\n #![allow(unused_attributes)]\n+#![deny(bare_trait_objects)]\n #![unstable(feature = \"alloc_system\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\","}, {"sha": "6f692923c8534c6f367735ef722bcd02228b1d92", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -30,6 +30,7 @@\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]\n+#![deny(bare_trait_objects)]\n \n extern crate alloc;\n extern crate rustc_data_structures;"}, {"sha": "f3e823670aaaba907d3871911e0aa39f1274363a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -845,6 +845,33 @@ impl<T> Option<T> {\n     pub fn take(&mut self) -> Option<T> {\n         mem::replace(self, None)\n     }\n+\n+    /// Replaces the actual value in the option by the value given in parameter,\n+    /// returning the old value if present,\n+    /// leaving a [`Some`] in its place without deinitializing either one.\n+    ///\n+    /// [`Some`]: #variant.Some\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_replace)]\n+    ///\n+    /// let mut x = Some(2);\n+    /// let old = x.replace(5);\n+    /// assert_eq!(x, Some(5));\n+    /// assert_eq!(old, Some(2));\n+    ///\n+    /// let mut x = None;\n+    /// let old = x.replace(3);\n+    /// assert_eq!(x, Some(3));\n+    /// assert_eq!(old, None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_replace\", issue = \"51998\")]\n+    pub fn replace(&mut self, value: T) -> Option<T> {\n+        mem::replace(self, Some(value))\n+    }\n }\n \n impl<'a, T: Clone> Option<&'a T> {"}, {"sha": "d3df8b50ee2ee5e4978b343179cd6663789357cb", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -113,8 +113,8 @@ impl LocalWaker {\n     /// but you otherwise shouldn't call it directly.\n     ///\n     /// If you're working with the standard library then it's recommended to\n-    /// use the `LocalWaker::from` function instead which works with the safe\n-    /// `Rc` type and the safe `LocalWake` trait.\n+    /// use the `local_waker_from_nonlocal` or `local_waker` to convert a `Waker`\n+    /// into a `LocalWaker`.\n     ///\n     /// For this function to be used safely, it must be sound to call `inner.wake_local()`\n     /// on the current thread.\n@@ -197,9 +197,7 @@ impl Drop for LocalWaker {\n /// customization.\n ///\n /// When using `std`, a default implementation of the `UnsafeWake` trait is provided for\n-/// `Arc<T>` where `T: Wake` and `Rc<T>` where `T: LocalWake`.\n-///\n-/// Although the methods on `UnsafeWake` take pointers rather than references,\n+/// `Arc<T>` where `T: Wake`.\n pub unsafe trait UnsafeWake: Send + Sync {\n     /// Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.\n     ///"}, {"sha": "ca7db6e4639a522cd1b9c35b6f686f3fd1f261c4", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -44,6 +44,7 @@\n #![feature(reverse_bits)]\n #![feature(iterator_find_map)]\n #![feature(slice_internals)]\n+#![feature(option_replace)]\n \n extern crate core;\n extern crate test;"}, {"sha": "bc3e61a4f541f71f86d62aaee68119b9888d7102", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -297,3 +297,18 @@ fn test_try() {\n     }\n     assert_eq!(try_option_err(), Err(NoneError));\n }\n+\n+#[test]\n+fn test_replace() {\n+    let mut x = Some(2);\n+    let old = x.replace(5);\n+\n+    assert_eq!(x, Some(5));\n+    assert_eq!(old, Some(2));\n+\n+    let mut x = None;\n+    let old = x.replace(3);\n+\n+    assert_eq!(x, Some(3));\n+    assert_eq!(old, None);\n+}"}, {"sha": "51c3efb41ad97883b577443c61a6e2ecc05c8f83", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -14,6 +14,8 @@\n //! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n //! generated instead.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "9e71ed4063e87e3d2eb56969a4b3303f2b8357d7", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -283,6 +283,8 @@\n //!\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "02ab28507d7d86d13eb73fac44c3aa15a2f64889", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -21,6 +21,7 @@\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![panic_runtime]\n #![allow(unused_features)]\n+#![deny(bare_trait_objects)]\n \n #![feature(core_intrinsics)]\n #![feature(libc)]"}, {"sha": "7c0cf9eaddebee3a7e9469e21898a7473814c6d7", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -22,6 +22,7 @@\n //! See [the book](../book/first-edition/procedural-macros.html) for more.\n \n #![stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+#![deny(bare_trait_objects)]\n #![deny(missing_docs)]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\","}, {"sha": "3d91505cd772aae53c2b1fa9b12132bbcd0260cf", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -15,4 +15,5 @@\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]\n #![allow(unused_features)]\n+#![deny(bare_trait_objects)]\n #![feature(staged_api)]"}, {"sha": "c1849c63a7df34486d42a451f270020f146888ce", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -193,32 +193,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         let scope = region.free_region_binding_scope(self);\n         let node = self.hir.as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n-        let unknown;\n         let tag = match self.hir.find(node) {\n             Some(hir_map::NodeBlock(_)) | Some(hir_map::NodeExpr(_)) => \"body\",\n             Some(hir_map::NodeItem(it)) => Self::item_scope_tag(&it),\n             Some(hir_map::NodeTraitItem(it)) => Self::trait_item_scope_tag(&it),\n             Some(hir_map::NodeImplItem(it)) => Self::impl_item_scope_tag(&it),\n-\n-            // this really should not happen, but it does:\n-            // FIXME(#27942)\n-            Some(_) => {\n-                unknown = format!(\n-                    \"unexpected node ({}) for scope {:?}.  \\\n-                     Please report a bug.\",\n-                    self.hir.node_to_string(node),\n-                    scope\n-                );\n-                &unknown\n-            }\n-            None => {\n-                unknown = format!(\n-                    \"unknown node for scope {:?}.  \\\n-                     Please report a bug.\",\n-                    scope\n-                );\n-                &unknown\n-            }\n+            _ => unreachable!()\n         };\n         let (prefix, span) = match *region {\n             ty::ReEarlyBound(ref br) => {"}, {"sha": "c7cd958016dca5b1d3c140812c66ca6028b4c430", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -40,6 +40,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "7bd1e98f85dc2fa553b1ebd0e3510e9cc3e65462", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "d583a32c43198b40a045ec0a67b9914d2a40a721", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -13,6 +13,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n+#![deny(bare_trait_objects)]\n \n #![feature(from_ref)]\n #![feature(quote)]"}, {"sha": "2ef88041d338f67c5ce4894213f1d3efef14b83b", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -10,6 +10,8 @@\n \n //! Support for serializing the dep-graph and reloading it.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "27c1578e8ed9402a996477a9d28c1cd81d3ae205", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -19,6 +19,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "e5bd6a7f610f3bb40e566ff511484638d5e4e458", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -673,7 +673,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         return FfiUnsafe {\n                             ty: ty,\n                             reason: \"this function pointer has Rust-specific calling convention\",\n-                            help: Some(\"consider using an `fn \\\"extern\\\"(...) -> ...` \\\n+                            help: Some(\"consider using an `extern fn(...) -> ...` \\\n                                         function pointer instead\"),\n                         }\n                     }"}, {"sha": "c60016cde0d1b829de5ca73eae4d6976b74d40a7", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -12,6 +12,7 @@\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n+#![deny(bare_trait_objects)]\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\","}, {"sha": "7bd1e98f85dc2fa553b1ebd0e3510e9cc3e65462", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "d58affbae75ed9ffb5199b4c83734dc7e4ff69c8", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -14,6 +14,8 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n */\n \n+#![deny(bare_trait_objects)]\n+\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(from_ref)]"}, {"sha": "7bd1e98f85dc2fa553b1ebd0e3510e9cc3e65462", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "15d7c0fdaa338673d7877c914ef898bf9ccb66f9", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -14,6 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "92e83fd70fa3a4dc79021183affe22e8114ba04e", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(bad_style)]\n+#![deny(bare_trait_objects)]\n \n pub struct Intrinsic {\n     pub inputs: &'static [&'static Type],"}, {"sha": "b2c492f204f331c27863c025bdb96e69f0350750", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -60,6 +60,8 @@\n //! See the [`plugin` feature](../unstable-book/language-features/plugin.html) of\n //! the Unstable Book for more examples.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "f69e664ea46b333d5110bc6b110ba9dde317ca2c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "2fe7d73de8aa02b3532edeebfa029da9ca32bd1e", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -46,7 +46,7 @@ impl<'b, W: Write> DumpOutput for WriteOutput<'b, W> {\n }\n \n pub struct CallbackOutput<'b> {\n-    callback: &'b mut FnMut(&Analysis),\n+    callback: &'b mut dyn FnMut(&Analysis),\n }\n \n impl<'b> DumpOutput for CallbackOutput<'b> {\n@@ -67,7 +67,7 @@ impl<'b, W: Write> JsonDumper<WriteOutput<'b, W>> {\n \n impl<'b> JsonDumper<CallbackOutput<'b>> {\n     pub fn with_callback(\n-        callback: &'b mut FnMut(&Analysis),\n+        callback: &'b mut dyn FnMut(&Analysis),\n         config: Config,\n     ) -> JsonDumper<CallbackOutput<'b>> {\n         JsonDumper {"}, {"sha": "055fbb236d8fa0a27169ee0d57f8b557d9bcf6ea", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -13,6 +13,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n+#![deny(bare_trait_objects)]\n \n #![recursion_limit=\"256\"]\n \n@@ -1088,7 +1089,7 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n \n /// Call a callback with the results of save-analysis.\n pub struct CallbackHandler<'b> {\n-    pub callback: &'b mut FnMut(&rls_data::Analysis),\n+    pub callback: &'b mut dyn FnMut(&rls_data::Analysis),\n }\n \n impl<'b> SaveHandler for CallbackHandler<'b> {"}, {"sha": "e611d26da56def22e2efcd149aaf4dd10b4d2e42", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -21,6 +21,8 @@\n //! one that doesn't; the one that doesn't might get decent parallel\n //! build speedups.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "9ac6e9835f06fcb4e5acb36c20d957aa3b99b133", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -229,7 +229,7 @@ macro_rules! supported_targets {\n             }\n         }\n \n-        pub fn get_targets() -> Box<Iterator<Item=String>> {\n+        pub fn get_targets() -> Box<dyn Iterator<Item=String>> {\n             Box::new(TARGETS.iter().filter_map(|t| -> Option<String> {\n                 load_specific(t)\n                     .and(Ok(t.to_string()))\n@@ -861,23 +861,27 @@ impl Target {\n             } );\n             ($key_name:ident, link_args) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(obj) = obj.find(&name[..]).and_then(|o| o.as_object()) {\n+                if let Some(val) = obj.find(&name[..]) {\n+                    let obj = val.as_object().ok_or_else(|| format!(\"{}: expected a \\\n+                        JSON object with fields per linker-flavor.\", name))?;\n                     let mut args = LinkArgs::new();\n                     for (k, v) in obj {\n-                        let k = LinkerFlavor::from_str(&k).ok_or_else(|| {\n+                        let flavor = LinkerFlavor::from_str(&k).ok_or_else(|| {\n                             format!(\"{}: '{}' is not a valid value for linker-flavor. \\\n                                      Use 'em', 'gcc', 'ld' or 'msvc'\", name, k)\n                         })?;\n \n-                        let v = v.as_array().map(|a| {\n-                            a\n-                                .iter()\n-                                .filter_map(|o| o.as_string())\n-                                .map(|s| s.to_owned())\n-                                .collect::<Vec<_>>()\n-                        }).unwrap_or(vec![]);\n-\n-                        args.insert(k, v);\n+                        let v = v.as_array().ok_or_else(||\n+                            format!(\"{}.{}: expected a JSON array\", name, k)\n+                        )?.iter().enumerate()\n+                            .map(|(i,s)| {\n+                                let s = s.as_string().ok_or_else(||\n+                                    format!(\"{}.{}[{}]: expected a JSON string\", name, k, i))?;\n+                                Ok(s.to_owned())\n+                            })\n+                            .collect::<Result<Vec<_>, String>>()?;\n+\n+                        args.insert(flavor, v);\n                     }\n                     base.options.$key_name = args;\n                 }"}, {"sha": "cd55b5ddc5bf12c722a2e462ee386e07e8dad817", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -11,6 +11,8 @@\n //! New recursive solver modeled on Chalk's recursive solver. Most of\n //! the guts are broken up into modules; see the comments in those modules.\n \n+#![deny(bare_trait_objects)]\n+\n #![feature(crate_in_paths)]\n #![feature(crate_visibility_modifier)]\n #![feature(extern_prelude)]"}, {"sha": "7bd1e98f85dc2fa553b1ebd0e3510e9cc3e65462", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "5e38c0bbcb4a3c5e6670409ea3ccd864e34109f4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -98,7 +98,7 @@ struct ParamRange {\n /// This type must not appear anywhere in other converted types.\n const TRAIT_OBJECT_DUMMY_SELF: ty::TypeVariants<'static> = ty::TyInfer(ty::FreshTy(0));\n \n-impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n+impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     pub fn ast_region_to_region(&self,\n         lifetime: &hir::Lifetime,\n         def: Option<&ty::GenericParamDef>)"}, {"sha": "f2745d06390e87f469ce7ecc28fdb641af856a86", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -604,7 +604,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// If there is no expected signature, then we will convert the\n     /// types that the user gave into a signature.\n     fn supplied_sig_of_closure(&self, decl: &hir::FnDecl) -> ty::PolyFnSig<'tcx> {\n-        let astconv: &AstConv = self;\n+        let astconv: &dyn AstConv = self;\n \n         // First, convert the types that the user supplied (if any).\n         let supplied_arguments = decl.inputs.iter().map(|a| astconv.ast_ty_to_ty(a));\n@@ -630,7 +630,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// so should yield an error, but returns back a signature where\n     /// all parameters are of type `TyErr`.\n     fn error_sig_of_closure(&self, decl: &hir::FnDecl) -> ty::PolyFnSig<'tcx> {\n-        let astconv: &AstConv = self;\n+        let astconv: &dyn AstConv = self;\n \n         let supplied_arguments = decl.inputs.iter().map(|a| {\n             // Convert the types that the user supplied (if any), but ignore them."}, {"sha": "e3b0b8cccf31c073e069913044ed20d9fd62a88d", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -1071,7 +1071,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n     pub fn coerce_forced_unit<'a>(&mut self,\n                                   fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                                   cause: &ObligationCause<'tcx>,\n-                                  augment_error: &mut FnMut(&mut DiagnosticBuilder),\n+                                  augment_error: &mut dyn FnMut(&mut DiagnosticBuilder),\n                                   label_unit_as_expected: bool)\n     {\n         self.coerce_inner(fcx,\n@@ -1090,7 +1090,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         cause: &ObligationCause<'tcx>,\n                         expression: Option<&'gcx hir::Expr>,\n                         mut expression_ty: Ty<'tcx>,\n-                        augment_error: Option<&mut FnMut(&mut DiagnosticBuilder)>,\n+                        augment_error: Option<&mut dyn FnMut(&mut DiagnosticBuilder)>,\n                         label_expression_as_expected: bool)\n     {\n         // Incorporate whatever type inference information we have"}, {"sha": "b7233217d5f3b8c1c1e7ed8a0f9c37d2546faaf2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -526,7 +526,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn resolve<T>(&self, x: &T, span: &Locatable) -> T::Lifted\n+    fn resolve<T>(&self, x: &T, span: &dyn Locatable) -> T::Lifted\n     where\n         T: TypeFoldable<'tcx> + ty::Lift<'gcx>,\n     {\n@@ -580,14 +580,14 @@ impl Locatable for hir::HirId {\n struct Resolver<'cx, 'gcx: 'cx + 'tcx, 'tcx: 'cx> {\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n-    span: &'cx Locatable,\n+    span: &'cx dyn Locatable,\n     body: &'gcx hir::Body,\n }\n \n impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n     fn new(\n         fcx: &'cx FnCtxt<'cx, 'gcx, 'tcx>,\n-        span: &'cx Locatable,\n+        span: &'cx dyn Locatable,\n         body: &'gcx hir::Body,\n     ) -> Resolver<'cx, 'gcx, 'tcx> {\n         Resolver {"}, {"sha": "393904583ca42560c862b94940110d8337a48aff", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -212,7 +212,7 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n         let cause = ObligationCause::misc(span, impl_node_id);\n         let check_mutbl = |mt_a: ty::TypeAndMut<'gcx>,\n                            mt_b: ty::TypeAndMut<'gcx>,\n-                           mk_ptr: &Fn(Ty<'gcx>) -> Ty<'gcx>| {\n+                           mk_ptr: &dyn Fn(Ty<'gcx>) -> Ty<'gcx>| {\n             if (mt_a.mutbl, mt_b.mutbl) == (hir::MutImmutable, hir::MutMutable) {\n                 infcx.report_mismatched_types(&cause,\n                                              mk_ptr(mt_b.ty),"}, {"sha": "5fa98e3ebe6951b1477271aa40bab9ccb9c87cbb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -1244,7 +1244,7 @@ fn impl_polarity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n // Is it marked with ?Sized\n-fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n+fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &dyn AstConv<'gcx, 'tcx>,\n                                 ast_bounds: &[hir::GenericBound],\n                                 span: Span) -> bool\n {\n@@ -1598,7 +1598,7 @@ pub enum SizedByDefault { Yes, No, }\n /// Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or\n /// a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the\n /// built-in trait (formerly known as kind): Send.\n-pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n+pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &dyn AstConv<'gcx, 'tcx>,\n                                         param_ty: Ty<'tcx>,\n                                         ast_bounds: &[hir::GenericBound],\n                                         sized_by_default: SizedByDefault,\n@@ -1646,7 +1646,7 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n /// because this can be anywhere from 0 predicates (`T:?Sized` adds no\n /// predicates) to 1 (`T:Foo`) to many (`T:Bar<X=i32>` adds `T:Bar`\n /// and `<T as Bar>::X == i32`).\n-fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n+fn predicates_from_bound<'tcx>(astconv: &dyn AstConv<'tcx, 'tcx>,\n                                param_ty: Ty<'tcx>,\n                                bound: &hir::GenericBound)\n                                -> Vec<ty::Predicate<'tcx>>"}, {"sha": "4d957c9aa4520eed64f80847bbf0e9ece29c547a", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -2338,7 +2338,7 @@ Rust does not currently support this. A simple example that causes this error:\n \n ```compile_fail,E0225\n fn main() {\n-    let _: Box<std::io::Read + std::io::Write>;\n+    let _: Box<dyn std::io::Read + std::io::Write>;\n }\n ```\n \n@@ -2348,7 +2348,7 @@ auto traits. For example, the following compiles correctly:\n \n ```\n fn main() {\n-    let _: Box<std::io::Read + Send + Sync>;\n+    let _: Box<dyn std::io::Read + Send + Sync>;\n }\n ```\n \"##,"}, {"sha": "b50f55effad456e1052b5da2ddf9b66d4ea30420", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -70,6 +70,7 @@ This API is completely unstable and subject to change.\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n+#![deny(bare_trait_objects)]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "88cc93731131de7f838cd870a058612618ae6981", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -371,7 +371,7 @@ impl From<fmt::Error> for EncoderError {\n pub type EncodeResult = Result<(), EncoderError>;\n pub type DecodeResult<T> = Result<T, DecoderError>;\n \n-fn escape_str(wr: &mut fmt::Write, v: &str) -> EncodeResult {\n+fn escape_str(wr: &mut dyn fmt::Write, v: &str) -> EncodeResult {\n     wr.write_str(\"\\\"\")?;\n \n     let mut start = 0;\n@@ -433,11 +433,11 @@ fn escape_str(wr: &mut fmt::Write, v: &str) -> EncodeResult {\n     Ok(())\n }\n \n-fn escape_char(writer: &mut fmt::Write, v: char) -> EncodeResult {\n+fn escape_char(writer: &mut dyn fmt::Write, v: char) -> EncodeResult {\n     escape_str(writer, v.encode_utf8(&mut [0; 4]))\n }\n \n-fn spaces(wr: &mut fmt::Write, mut n: usize) -> EncodeResult {\n+fn spaces(wr: &mut dyn fmt::Write, mut n: usize) -> EncodeResult {\n     const BUF: &'static str = \"                \";\n \n     while n >= BUF.len() {\n@@ -461,14 +461,14 @@ fn fmt_number_or_null(v: f64) -> string::String {\n \n /// A structure for implementing serialization to JSON.\n pub struct Encoder<'a> {\n-    writer: &'a mut (fmt::Write+'a),\n+    writer: &'a mut (dyn fmt::Write+'a),\n     is_emitting_map_key: bool,\n }\n \n impl<'a> Encoder<'a> {\n     /// Creates a new JSON encoder whose output will be written to the writer\n     /// specified.\n-    pub fn new(writer: &'a mut fmt::Write) -> Encoder<'a> {\n+    pub fn new(writer: &'a mut dyn fmt::Write) -> Encoder<'a> {\n         Encoder { writer: writer, is_emitting_map_key: false, }\n     }\n }\n@@ -707,15 +707,15 @@ impl<'a> ::Encoder for Encoder<'a> {\n /// Another encoder for JSON, but prints out human-readable JSON instead of\n /// compact data\n pub struct PrettyEncoder<'a> {\n-    writer: &'a mut (fmt::Write+'a),\n+    writer: &'a mut (dyn fmt::Write+'a),\n     curr_indent: usize,\n     indent: usize,\n     is_emitting_map_key: bool,\n }\n \n impl<'a> PrettyEncoder<'a> {\n     /// Creates a new encoder whose output will be written to the specified writer\n-    pub fn new(writer: &'a mut fmt::Write) -> PrettyEncoder<'a> {\n+    pub fn new(writer: &'a mut dyn fmt::Write) -> PrettyEncoder<'a> {\n         PrettyEncoder {\n             writer,\n             curr_indent: 0,\n@@ -2053,7 +2053,7 @@ impl<T: Iterator<Item=char>> Builder<T> {\n }\n \n /// Decodes a json value from an `&mut io::Read`\n-pub fn from_reader(rdr: &mut Read) -> Result<Json, BuilderError> {\n+pub fn from_reader(rdr: &mut dyn Read) -> Result<Json, BuilderError> {\n     let mut contents = Vec::new();\n     match rdr.read_to_end(&mut contents) {\n         Ok(c)  => c,"}, {"sha": "7c1bb69434d5f0110030d529a6cdff9b939bcb3c", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -14,6 +14,8 @@\n Core encoding and decoding interfaces.\n */\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "376410677346cea1be104a402d4334d0e734880f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -163,7 +163,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_alphabetic)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_alphabetic)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphabetic(&self) -> bool { unimplemented!(); }\n@@ -176,7 +178,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_uppercase)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_uppercase)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_uppercase(&self) -> bool { unimplemented!(); }\n@@ -189,7 +193,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_lowercase)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_lowercase)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_lowercase(&self) -> bool { unimplemented!(); }\n@@ -203,7 +209,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_alphanumeric)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_alphanumeric)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphanumeric(&self) -> bool { unimplemented!(); }\n@@ -216,7 +224,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_digit)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_digit)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_digit(&self) -> bool { unimplemented!(); }\n@@ -230,7 +240,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_hexdigit)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_hexdigit)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_hexdigit(&self) -> bool { unimplemented!(); }\n@@ -248,7 +260,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_punctuation)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_punctuation)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_punctuation(&self) -> bool { unimplemented!(); }\n@@ -261,7 +275,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_graphic)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_graphic)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_graphic(&self) -> bool { unimplemented!(); }\n@@ -291,7 +307,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_whitespace)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_whitespace)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_whitespace(&self) -> bool { unimplemented!(); }\n@@ -304,7 +322,9 @@ pub trait AsciiExt {\n     /// # Note\n     ///\n     /// This method will be deprecated in favor of the identically-named\n-    /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n+    /// inherent methods on `u8` and `char`.\n+    /// For `[u8]` use `.iter().all(u8::is_ascii_control)`.\n+    /// For `str` use `.bytes().all(u8::is_ascii_control)`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n     #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_control(&self) -> bool { unimplemented!(); }"}, {"sha": "cc09a944e4ccc1168d46a6c812d841d7178e76de", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -14,6 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "6b547dff9120ed3e97702933bf4dfd4431c78c32", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -26,6 +26,9 @@\n // NB: this is also specified in this crate's Cargo.toml, but libsyntax contains logic specific to\n // this crate, which relies on this attribute (rather than the value of `--crate-name` passed by\n // cargo) to detect this crate.\n+\n+#![deny(bare_trait_objects)]\n+\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -165,8 +168,8 @@ pub trait TDynBenchFn: Send {\n pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n-    DynTestFn(Box<FnBox() + Send>),\n-    DynBenchFn(Box<TDynBenchFn + 'static>),\n+    DynTestFn(Box<dyn FnBox() + Send>),\n+    DynBenchFn(Box<dyn TDynBenchFn + 'static>),\n }\n \n impl TestFn {\n@@ -840,7 +843,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n     fn callback(\n         event: &TestEvent,\n         st: &mut ConsoleTestState,\n-        out: &mut OutputFormatter,\n+        out: &mut dyn OutputFormatter,\n     ) -> io::Result<()> {\n         match (*event).clone() {\n             TeFiltered(ref filtered_tests) => {\n@@ -897,7 +900,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n \n     let is_multithreaded = opts.test_threads.unwrap_or_else(get_concurrency) > 1;\n \n-    let mut out: Box<OutputFormatter> = match opts.format {\n+    let mut out: Box<dyn OutputFormatter> = match opts.format {\n         OutputFormat::Pretty => Box::new(PrettyFormatter::new(\n             output,\n             use_color(opts),\n@@ -1386,7 +1389,7 @@ pub fn run_test(\n         desc: TestDesc,\n         monitor_ch: Sender<MonitorMsg>,\n         nocapture: bool,\n-        testfn: Box<FnBox() + Send>,\n+        testfn: Box<dyn FnBox() + Send>,\n     ) {\n         // Buffer for capturing standard I/O\n         let data = Arc::new(Mutex::new(Vec::new()));\n@@ -1459,7 +1462,7 @@ fn __rust_begin_short_backtrace<F: FnOnce()>(f: F) {\n     f()\n }\n \n-fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> TestResult {\n+fn calc_result(desc: &TestDesc, task_result: Result<(), Box<dyn Any + Send>>) -> TestResult {\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TrOk,\n         (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {"}, {"sha": "ea5eee3cc7d46d60abac92e8bcab9c0804cddc49", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n "}, {"sha": "1722211c9e89f49f5c84c43da135479305481f12", "filename": "src/rustllvm/llvm-rebuild-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Frustllvm%2Fllvm-rebuild-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Frustllvm%2Fllvm-rebuild-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-rebuild-trigger?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be (optionally) cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2018-05-18\n\\ No newline at end of file\n+2018-07-12\n\\ No newline at end of file"}, {"sha": "f2c0e9e3b2aa5fd8ca0cee659434b39d92a481d8", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2018-06-30\n+date: 2018-07-13\n rustc: beta\n cargo: beta\n "}, {"sha": "48040ae3da0ef37223989998078d64bd383f1d5f", "filename": "src/test/run-make-fulldeps/target-specs/my-x86_64-unknown-linux-gnu-platform.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Fmy-x86_64-unknown-linux-gnu-platform.json?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -1,5 +1,5 @@\n {\n-    \"pre-link-args\": [\"-m64\"],\n+    \"pre-link-args\": {\"gcc\": [\"-m64\"]},\n     \"data-layout\": \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\",\n     \"linker-flavor\": \"gcc\",\n     \"llvm-target\": \"x86_64-unknown-linux-gnu\","}, {"sha": "b97e4662660fbd5c5236d5cca266c83a619beda6", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -126,15 +126,15 @@ error: `extern` block uses type `fn()` which is not FFI-safe: this function poin\n LL |     pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n    |                       ^^^^^^\n    |\n-   = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n+   = help: consider using an `extern fn(...) -> ...` function pointer instead\n \n error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n   --> $DIR/lint-ctypes.rs:70:24\n    |\n LL |     pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n    |                        ^^^^\n    |\n-   = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n+   = help: consider using an `extern fn(...) -> ...` function pointer instead\n \n error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:71:28"}, {"sha": "bb20678d4a11ba707fab252518638b751a84def9", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/254f8796b729810846e2b97620032ecaf103db33/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254f8796b729810846e2b97620032ecaf103db33/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=254f8796b729810846e2b97620032ecaf103db33", "patch": "@@ -492,7 +492,7 @@ impl Builder {\n             format!(\"clippy-{}-{}.tar.gz\", self.clippy_release, target)\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target)\n-        } else if component == \"llvm_tools\" {\n+        } else if component == \"llvm-tools\" || component == \"llvm-tools-preview\" {\n             format!(\"llvm-tools-{}-{}.tar.gz\", self.llvm_tools_release, target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)"}]}