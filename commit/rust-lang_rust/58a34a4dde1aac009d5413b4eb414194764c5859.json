{"sha": "58a34a4dde1aac009d5413b4eb414194764c5859", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YTM0YTRkZGUxYWFjMDA5ZDU0MTNiNGViNDE0MTk0NzY0YzU4NTk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-28T16:05:22Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-23T20:57:40Z"}, "message": "Remove is_spotlight field from `Trait`", "tree": {"sha": "796d85f6f5b4c3d8cf17d5c32d79aac7ddcc6374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/796d85f6f5b4c3d8cf17d5c32d79aac7ddcc6374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a34a4dde1aac009d5413b4eb414194764c5859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a34a4dde1aac009d5413b4eb414194764c5859", "html_url": "https://github.com/rust-lang/rust/commit/58a34a4dde1aac009d5413b4eb414194764c5859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a34a4dde1aac009d5413b4eb414194764c5859/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1bf8e05c39bdcc73fc09e246b7209444e389bc", "html_url": "https://github.com/rust-lang/rust/commit/fe1bf8e05c39bdcc73fc09e246b7209444e389bc"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "519ec7216e3866ed7de0d721508b9b9098b4de1d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -195,14 +195,12 @@ crate fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean::Tra\n     let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n-    let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n     let is_auto = cx.tcx.trait_is_auto(did);\n     clean::Trait {\n         unsafety: cx.tcx.trait_def(did).unsafety,\n         generics,\n         items: trait_items,\n         bounds: supertrait_bounds,\n-        is_spotlight,\n         is_auto,\n     }\n }\n@@ -626,6 +624,8 @@ crate fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n     debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);\n \n-    cx.external_traits.borrow_mut().insert(did, trait_);\n+    cx.external_traits\n+        .borrow_mut()\n+        .insert(did, (trait_, clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::spotlight)));\n     cx.active_extern_traits.remove(&did);\n }"}, {"sha": "7aa34333e175dd5f00b209568f75dd1837d400fd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -2003,14 +2003,11 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                         .iter()\n                         .map(|ti| cx.tcx.hir().trait_item(ti.id).clean(cx))\n                         .collect();\n-                    let attrs = item.attrs.clean(cx);\n-                    let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n                     TraitItem(Trait {\n                         unsafety,\n                         items,\n                         generics: generics.clean(cx),\n                         bounds: bounds.clean(cx),\n-                        is_spotlight,\n                         is_auto: is_auto.clean(cx),\n                     })\n                 }"}, {"sha": "0289ee9afb77b0965334584e5142fa9e2f3e6bca", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -57,7 +57,7 @@ crate struct Crate {\n     crate primitives: Vec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n-    crate external_traits: Rc<RefCell<FxHashMap<DefId, Trait>>>,\n+    crate external_traits: Rc<RefCell<FxHashMap<DefId, (Trait, bool)>>>,\n     crate masked_crates: FxHashSet<CrateNum>,\n     crate collapsed: bool,\n }\n@@ -1185,7 +1185,6 @@ crate struct Trait {\n     crate items: Vec<Item>,\n     crate generics: Generics,\n     crate bounds: Vec<GenericBound>,\n-    crate is_spotlight: bool,\n     crate is_auto: bool,\n }\n "}, {"sha": "3473cc6931e83118373a0d0abf78367c26ddbe6a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -7,13 +7,14 @@ use crate::clean::{\n };\n use crate::core::DocContext;\n \n+use rustc_attr::list_contains_name;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Attributes, DefIdTree, Ty, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n \n@@ -520,3 +521,18 @@ crate fn find_nearest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<De\n         None\n     }\n }\n+\n+/// Checks that one attribute is `doc`. For example:\n+///\n+/// ```text\n+/// #[doc(spotlight)]\n+/// ```\n+///\n+/// This function has to exists because it runs on `hir::Attributes` whereas the other runs on\n+/// `clean::Attributes`.\n+crate fn has_doc_flag(attrs: Attributes<'_>, flag: Symbol) -> bool {\n+    attrs.iter().any(|attr| {\n+        attr.has_name(sym::doc)\n+            && attr.meta_item_list().map_or(false, |l| list_contains_name(&l, flag))\n+    })\n+}"}, {"sha": "5f24ec7b3f73ed16c596c5341b8ee544ab34cd1e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -55,7 +55,7 @@ crate struct DocContext<'tcx> {\n     /// Later on moved into `cache`\n     crate renderinfo: RenderInfo,\n     /// Later on moved through `clean::Crate` into `cache`\n-    crate external_traits: Rc<RefCell<FxHashMap<DefId, clean::Trait>>>,\n+    crate external_traits: Rc<RefCell<FxHashMap<DefId, (clean::Trait, bool)>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n     crate active_extern_traits: FxHashSet<DefId>,"}, {"sha": "752233ade37126c5a81b0e4bbfd7775cd829a788", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -91,9 +91,9 @@ crate trait DocFolder: Sized {\n \n         {\n             let external_traits = { std::mem::take(&mut *c.external_traits.borrow_mut()) };\n-            for (k, mut v) in external_traits {\n+            for (k, (mut v, is_spotlight)) in external_traits {\n                 v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n-                c.external_traits.borrow_mut().insert(k, v);\n+                c.external_traits.borrow_mut().insert(k, (v, is_spotlight));\n             }\n         }\n         c"}, {"sha": "a64eeb5bc58229ccca8ddc2660e503223162f47b", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::source_map::FileName;\n+use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n@@ -64,7 +65,9 @@ crate struct Cache {\n     /// Implementations of a crate should inherit the documentation of the\n     /// parent trait if no extra documentation is specified, and default methods\n     /// should show up in documentation about trait implementations.\n-    crate traits: FxHashMap<DefId, clean::Trait>,\n+    ///\n+    /// The `bool` parameter is about if the trait is `spotlight`.\n+    crate traits: FxHashMap<DefId, (clean::Trait, bool)>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n@@ -244,10 +247,13 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             }\n         }\n \n+        let tcx = self.tcx;\n         // Propagate a trait method's documentation to all implementors of the\n         // trait.\n         if let clean::TraitItem(ref t) = *item.kind {\n-            self.cache.traits.entry(item.def_id).or_insert_with(|| t.clone());\n+            self.cache.traits.entry(item.def_id).or_insert_with(|| {\n+                (t.clone(), clean::utils::has_doc_flag(tcx.get_attrs(item.def_id), sym::spotlight))\n+            });\n         }\n \n         // Collect all the implementors of traits."}, {"sha": "ab3c9bab64fbee68f5229d3686f3cdff6c8928f4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -3687,8 +3687,9 @@ fn spotlight_decl(decl: &clean::FnDecl, cache: &Cache) -> String {\n         if let Some(impls) = cache.impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id_full(cache).map_or(false, |d| cache.traits[&d].is_spotlight)\n-                {\n+                if impl_.trait_.def_id().map_or(false, |d| {\n+                    cache.traits.get(&d).map(|(_, is_spotlight)| *is_spotlight).unwrap_or(false)\n+                }) {\n                     if out.is_empty() {\n                         write!(\n                             &mut out,\n@@ -3979,7 +3980,7 @@ fn render_impl(\n             false,\n             outer_version,\n             outer_const_version,\n-            trait_,\n+            trait_.map(|(t, _)| t),\n             show_def_docs,\n         );\n     }\n@@ -4024,7 +4025,7 @@ fn render_impl(\n     // We don't emit documentation for default items if they appear in the\n     // Implementations on Foreign Types or Implementors sections.\n     if show_default_items {\n-        if let Some(t) = trait_ {\n+        if let Some((t, _)) = trait_ {\n             render_default_items(\n                 w,\n                 cx,"}, {"sha": "da09d49a0066a61ecbe6c6a0197fc9619039b1f2", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -408,7 +408,7 @@ impl From<clean::FnDecl> for FnDecl {\n \n impl From<clean::Trait> for Trait {\n     fn from(trait_: clean::Trait) -> Self {\n-        let clean::Trait { unsafety, items, generics, bounds, is_spotlight: _, is_auto } = trait_;\n+        let clean::Trait { unsafety, items, generics, bounds, is_auto } = trait_;\n         Trait {\n             is_auto,\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,"}, {"sha": "aa093ba0a772d3e2bd5c5995555fbcb95bae9906", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a34a4dde1aac009d5413b4eb414194764c5859/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=58a34a4dde1aac009d5413b4eb414194764c5859", "patch": "@@ -84,7 +84,7 @@ impl JsonRenderer<'tcx> {\n         Rc::clone(&self.cache)\n             .traits\n             .iter()\n-            .filter_map(|(&id, trait_item)| {\n+            .filter_map(|(&id, (trait_item, _))| {\n                 // only need to synthesize items for external traits\n                 if !id.is_local() {\n                     trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());"}]}