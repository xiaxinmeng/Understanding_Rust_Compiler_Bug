{"sha": "9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNWJhZWQ0ODJiNjhlMGQ5ODA2ZTE5ZWI5ZTg2NzZkN2ZmM2UxYzI=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-31T22:09:12Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-31T22:09:12Z"}, "message": "Implement suggestions from phansch", "tree": {"sha": "21fddb7a90b0d59135c1751200d5db87294f8b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21fddb7a90b0d59135c1751200d5db87294f8b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "html_url": "https://github.com/rust-lang/rust/commit/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20cb512e81ad03a014b40c377a01fdebaea66963", "url": "https://api.github.com/repos/rust-lang/rust/commits/20cb512e81ad03a014b40c377a01fdebaea66963", "html_url": "https://github.com/rust-lang/rust/commit/20cb512e81ad03a014b40c377a01fdebaea66963"}], "stats": {"total": 81, "additions": 57, "deletions": 24}, "files": [{"sha": "33d8331c2923c4b376b7964217abd9272c18ee4f", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "patch": "@@ -18,15 +18,25 @@ declare_clippy_lint! {\n     /// possible) than to use `Vec::sort_by` and and a more complicated\n     /// closure.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:**\n+    /// If the suggested `Vec::sort_by_key` uses Reverse and it isn't\n+    /// imported by a use statement in the current frame, then a `use`\n+    /// statement that imports it will need to be added (which this lint\n+    /// can't do).\n     ///\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// vec.sort_by(|a, b| a.foo().cmp(b.foo()));\n+    /// # struct A;\n+    /// # impl A { fn foo(&self) {} }\n+    /// # let mut vec: Vec<A> = Vec::new();\n+    /// vec.sort_by(|a, b| a.foo().cmp(&b.foo()));\n     /// ```\n     /// Use instead:\n     /// ```rust\n+    /// # struct A;\n+    /// # impl A { fn foo(&self) {} }\n+    /// # let mut vec: Vec<A> = Vec::new();\n     /// vec.sort_by_key(|a| a.foo());\n     /// ```\n     pub UNNECESSARY_SORT_BY,\n@@ -50,6 +60,7 @@ struct SortByKeyDetection {\n     vec_name: String,\n     closure_arg: String,\n     closure_body: String,\n+    reverse: bool,\n     unstable: bool,\n }\n \n@@ -172,16 +183,16 @@ fn detect_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<LintTrigger>\n         if let ExprKind::MethodCall(method_path, _, [ref left_expr, ref right_expr]) = &closure_body.value.kind;\n         if method_path.ident.name.to_ident_string() == \"cmp\";\n         then {\n-            let (closure_body, closure_arg) = if mirrored_exprs(\n+            let (closure_body, closure_arg, reverse) = if mirrored_exprs(\n                 &cx,\n                 &left_expr,\n                 &left_ident,\n                 &right_expr,\n                 &right_ident\n             ) {\n-                (Sugg::hir(cx, &left_expr, \"..\").to_string(), left_ident.name.to_string())\n+                (Sugg::hir(cx, &left_expr, \"..\").to_string(), left_ident.name.to_string(), false)\n             } else if mirrored_exprs(&cx, &left_expr, &right_ident, &right_expr, &left_ident) {\n-                (format!(\"Reverse({})\", Sugg::hir(cx, &left_expr, \"..\").to_string()), right_ident.name.to_string())\n+                (Sugg::hir(cx, &left_expr, \"..\").to_string(), right_ident.name.to_string(), true)\n             } else {\n                 return None;\n             };\n@@ -196,7 +207,13 @@ fn detect_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<LintTrigger>\n                     Some(LintTrigger::Sort(SortDetection { vec_name, unstable }))\n                 }\n                 else {\n-                    Some(LintTrigger::SortByKey(SortByKeyDetection { vec_name, unstable, closure_arg, closure_body }))\n+                    Some(LintTrigger::SortByKey(SortByKeyDetection {\n+                        vec_name,\n+                        unstable,\n+                        closure_arg,\n+                        closure_body,\n+                        reverse\n+                    }))\n                 }\n             }\n         } else {\n@@ -219,9 +236,17 @@ impl LateLintPass<'_, '_> for UnnecessarySortBy {\n                     trigger.vec_name,\n                     if trigger.unstable { \"_unstable\" } else { \"\" },\n                     trigger.closure_arg,\n-                    trigger.closure_body,\n+                    if trigger.reverse {\n+                        format!(\"Reverse({})\", trigger.closure_body)\n+                    } else {\n+                        trigger.closure_body.to_string()\n+                    },\n                 ),\n-                Applicability::MachineApplicable,\n+                if trigger.reverse {\n+                    Applicability::MaybeIncorrect\n+                } else {\n+                    Applicability::MachineApplicable\n+                },\n             ),\n             Some(LintTrigger::Sort(trigger)) => utils::span_lint_and_sugg(\n                 cx,"}, {"sha": "779fd57707ad4f517e9ec9e6b235c728f5996008", "filename": "tests/ui/unnecessary_sort_by.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/tests%2Fui%2Funnecessary_sort_by.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/tests%2Fui%2Funnecessary_sort_by.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.fixed?ref=9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "patch": "@@ -10,16 +10,17 @@ fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n     // Forward examples\n     vec.sort();\n+    vec.sort_unstable();\n     vec.sort_by_key(|&a| (a + 5).abs());\n-    vec.sort_by_key(|&a| id(-a));\n+    vec.sort_unstable_by_key(|&a| id(-a));\n     // Reverse examples\n     vec.sort_by_key(|&b| Reverse(b));\n     vec.sort_by_key(|&b| Reverse((b + 5).abs()));\n-    vec.sort_by_key(|&b| Reverse(id(-b)));\n+    vec.sort_unstable_by_key(|&b| Reverse(id(-b)));\n     // Negative examples (shouldn't be changed)\n     let c = &7;\n     vec.sort_by(|a, b| (b - a).cmp(&(a - b)));\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n-    vec.sort_by(|a, _| a.cmp(c));\n+    vec.sort_unstable_by(|a, _| a.cmp(c));\n }"}, {"sha": "0485a5630afef682c80e9729bbf2855c9d782b62", "filename": "tests/ui/unnecessary_sort_by.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/tests%2Fui%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/tests%2Fui%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.rs?ref=9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "patch": "@@ -10,16 +10,17 @@ fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n     // Forward examples\n     vec.sort_by(|a, b| a.cmp(b));\n+    vec.sort_unstable_by(|a, b| a.cmp(b));\n     vec.sort_by(|a, b| (a + 5).abs().cmp(&(b + 5).abs()));\n-    vec.sort_by(|a, b| id(-a).cmp(&id(-b)));\n+    vec.sort_unstable_by(|a, b| id(-a).cmp(&id(-b)));\n     // Reverse examples\n     vec.sort_by(|a, b| b.cmp(a));\n     vec.sort_by(|a, b| (b + 5).abs().cmp(&(a + 5).abs()));\n-    vec.sort_by(|a, b| id(-b).cmp(&id(-a)));\n+    vec.sort_unstable_by(|a, b| id(-b).cmp(&id(-a)));\n     // Negative examples (shouldn't be changed)\n     let c = &7;\n     vec.sort_by(|a, b| (b - a).cmp(&(a - b)));\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n-    vec.sort_by(|a, _| a.cmp(c));\n+    vec.sort_unstable_by(|a, _| a.cmp(c));\n }"}, {"sha": "903b6e5099ce8b68c9aa1363a8b7999418ca52ee", "filename": "tests/ui/unnecessary_sort_by.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/tests%2Fui%2Funnecessary_sort_by.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2/tests%2Fui%2Funnecessary_sort_by.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.stderr?ref=9a5baed482b68e0d9806e19eb9e8676d7ff3e1c2", "patch": "@@ -6,35 +6,41 @@ LL |     vec.sort_by(|a, b| a.cmp(b));\n    |\n    = note: `-D clippy::unnecessary-sort-by` implied by `-D warnings`\n \n-error: use Vec::sort_by_key here instead\n+error: use Vec::sort here instead\n   --> $DIR/unnecessary_sort_by.rs:13:5\n    |\n+LL |     vec.sort_unstable_by(|a, b| a.cmp(b));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable()`\n+\n+error: use Vec::sort_by_key here instead\n+  --> $DIR/unnecessary_sort_by.rs:14:5\n+   |\n LL |     vec.sort_by(|a, b| (a + 5).abs().cmp(&(b + 5).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&a| (a + 5).abs())`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:14:5\n+  --> $DIR/unnecessary_sort_by.rs:15:5\n    |\n-LL |     vec.sort_by(|a, b| id(-a).cmp(&id(-b)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&a| id(-a))`\n+LL |     vec.sort_unstable_by(|a, b| id(-a).cmp(&id(-b)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable_by_key(|&a| id(-a))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:16:5\n+  --> $DIR/unnecessary_sort_by.rs:17:5\n    |\n LL |     vec.sort_by(|a, b| b.cmp(a));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse(b))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:17:5\n+  --> $DIR/unnecessary_sort_by.rs:18:5\n    |\n LL |     vec.sort_by(|a, b| (b + 5).abs().cmp(&(a + 5).abs()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse((b + 5).abs()))`\n \n error: use Vec::sort_by_key here instead\n-  --> $DIR/unnecessary_sort_by.rs:18:5\n+  --> $DIR/unnecessary_sort_by.rs:19:5\n    |\n-LL |     vec.sort_by(|a, b| id(-b).cmp(&id(-a)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_by_key(|&b| Reverse(id(-b)))`\n+LL |     vec.sort_unstable_by(|a, b| id(-b).cmp(&id(-a)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.sort_unstable_by_key(|&b| Reverse(id(-b)))`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n "}]}