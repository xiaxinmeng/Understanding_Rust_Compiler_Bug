{"sha": "2701c175a507c52e80e262b65bbe003687d4a96a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MDFjMTc1YTUwN2M1MmU4MGUyNjJiNjViYmUwMDM2ODdkNGE5NmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-24T03:57:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-24T03:57:03Z"}, "message": "Rollup merge of #49829 - ecstatic-morse:os-docs, r=steveklabnik\n\nAdd doc links to `std::os` extension traits\n\nAddresses a small subset of #29367.\n\nThis adds documentation links to the original type for various OS-specific extension traits, and uses a common sentence for introducing such traits (which now consistently ends in a period).", "tree": {"sha": "ffdf83f44501b10f2eda1993bbec923f5e482c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffdf83f44501b10f2eda1993bbec923f5e482c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2701c175a507c52e80e262b65bbe003687d4a96a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa3qsPCRBK7hj4Ov3rIwAAdHIIACo7ybLH9cUmeXx+xJZmySVr\nddFcFpj/nj/VcjwvZp6awiVG/HF2BPSkznFirPuSMMEsrAsv/E7QEdxgfNMo4qdJ\nHRGls5BNHK6fH4GKO0SsapZX17ABNX4P0Wh4+d/fJdpcvPQjak1u/JmaQfdJV+/L\nW7d5pA3LDK3M3S/LTJzMAPO10wu7j00LdLUAeg1NVPPWE7Z4TnAk0sQ8ju/8rb/5\nA/a9F3g7MVk4mgeaQykRBBy4qpVg7cHjSei56dsIaAkIW7tbO9LYql8CWAl2ySxG\nkIG9OtYox5p+pTOKyqn/IKUvKvB0lLY+rA2FHwFp4WpbKUi7S/DfzQKdz0ODcXc=\n=fTfg\n-----END PGP SIGNATURE-----\n", "payload": "tree ffdf83f44501b10f2eda1993bbec923f5e482c7a\nparent b9dbf8e2c4944ac86df858fe60a1eab930e5b732\nparent d5bee64df400126279e71562352936d5e4d14433\nauthor kennytm <kennytm@gmail.com> 1524542223 +0800\ncommitter GitHub <noreply@github.com> 1524542223 +0800\n\nRollup merge of #49829 - ecstatic-morse:os-docs, r=steveklabnik\n\nAdd doc links to `std::os` extension traits\n\nAddresses a small subset of #29367.\n\nThis adds documentation links to the original type for various OS-specific extension traits, and uses a common sentence for introducing such traits (which now consistently ends in a period).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2701c175a507c52e80e262b65bbe003687d4a96a", "html_url": "https://github.com/rust-lang/rust/commit/2701c175a507c52e80e262b65bbe003687d4a96a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2701c175a507c52e80e262b65bbe003687d4a96a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9dbf8e2c4944ac86df858fe60a1eab930e5b732", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9dbf8e2c4944ac86df858fe60a1eab930e5b732", "html_url": "https://github.com/rust-lang/rust/commit/b9dbf8e2c4944ac86df858fe60a1eab930e5b732"}, {"sha": "d5bee64df400126279e71562352936d5e4d14433", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bee64df400126279e71562352936d5e4d14433", "html_url": "https://github.com/rust-lang/rust/commit/d5bee64df400126279e71562352936d5e4d14433"}], "stats": {"total": 195, "additions": 135, "deletions": 60}, "files": [{"sha": "5899dc688e22563bc69dd709f0224dc696b7c9bd", "filename": "src/libstd/os/android/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::android::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "24caf326ab0fd2dba4b6cf69242d2f675667c296", "filename": "src/libstd/os/bitrig/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::bitrig::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "6aea450774ffd39d9bb48a3dc04b1386604f09fb", "filename": "src/libstd/os/dragonfly/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::dragonfly::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "e0e197dc122a1d2aaa9f36e02b67d7a0ad30d64f", "filename": "src/libstd/os/emscripten/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::emscripten::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "5f24cd636d541ab75611244212d9f86a1ba712f3", "filename": "src/libstd/os/freebsd/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::freebsd::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "16802576356d192b24d762642d10c6d1c735da52", "filename": "src/libstd/os/fuchsia/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -13,7 +13,9 @@\n use fs::Metadata;\n use sys_common::AsInner;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"}, {"sha": "453136e0ac864afe4cf42f0a875d20ec2e90fb65", "filename": "src/libstd/os/haiku/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::haiku::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "296ce69ff43620e7f0aa70b01879f01ba1362cf3", "filename": "src/libstd/os/ios/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::ios::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "76fb10da850b16b4044cd86fdfc4284d970dea53", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::linux::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "0b14c05cb5519bffbaf6481ece1af64d52ae18df", "filename": "src/libstd/os/macos/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::macos::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "e9cad33fee61d7fceea55e767dff2e1f6081b832", "filename": "src/libstd/os/netbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::netbsd::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "0f6b83b6e324b56cf8e2f68d907fd4093ac279a9", "filename": "src/libstd/os/openbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::openbsd::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "19dce1ba34c76c98482094cec0ea0ccc117bbf22", "filename": "src/libstd/os/solaris/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::solaris::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "cd88c8f46b3c0c6b3ef78a0342306b7b6a0642a9", "filename": "src/libstd/sys/redox/ext/ffi.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unix-specific extension to the primitives in the `std::ffi` module\n+//! Redox-specific extension to the primitives in the `std::ffi` module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -17,7 +17,9 @@ use mem;\n use sys::os_str::Buf;\n use sys_common::{FromInner, IntoInner, AsInner};\n \n-/// Unix-specific extensions to `OsString`.\n+/// Redox-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an `OsString` from a byte vector.\n@@ -39,7 +41,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Unix-specific extensions to `OsStr`.\n+/// Redox-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c1dba6edda484f66e6f702555d91ce372166f826", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use path::Path;\n use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n \n-/// Redox-specific extensions to `Permissions`\n+/// Redox-specific extensions to [`fs::Permissions`].\n+///\n+/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `mode_t` bits that are the standard Redox\n@@ -95,7 +97,9 @@ impl PermissionsExt for Permissions {\n     }\n }\n \n-/// Redox-specific extensions to `OpenOptions`\n+/// Redox-specific extensions to [`fs::OpenOptions`].\n+///\n+/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -163,13 +167,9 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-// Hm, why are there casts here to the returned type, shouldn't the types always\n-// be the same? Right you are! Turns out, however, on android at least the types\n-// in the raw `stat` structure are not the same as the types being returned. Who\n-// knew!\n-//\n-// As a result to make sure this compiles for all platforms we do the manual\n-// casts and rely on manual lowering to `stat` if the raw type is desired.\n+/// Redox-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -204,6 +204,13 @@ pub trait MetadataExt {\n     fn blocks(&self) -> u64;\n }\n \n+// Hm, why are there casts here to the returned type, shouldn't the types always\n+// be the same? Right you are! Turns out, however, on android at least the types\n+// in the raw `stat` structure are not the same as the types being returned. Who\n+// knew!\n+//\n+// As a result to make sure this compiles for all platforms we do the manual\n+// casts and rely on manual lowering to `stat` if the raw type is desired.\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n impl MetadataExt for fs::Metadata {\n     fn dev(&self) -> u64 {\n@@ -253,7 +260,12 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// Add special Redox types (block/char device, fifo and socket)\n+/// Redox-specific extensions for [`FileType`].\n+///\n+/// Adds support for special Unix file types such as block/character devices,\n+/// pipes, and sockets.\n+///\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n@@ -307,8 +319,10 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n     sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n+/// Redox-specific extensions to [`fs::DirBuilder`].\n+///\n+/// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n-/// An extension trait for `fs::DirBuilder` for Redox-specific options.\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to\n     /// 0o777."}, {"sha": "cfb6d5fc703a614ef84e1c2b363ed8d7bb8b48c5", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unix-specific extensions to primitives in the `std::process` module.\n+//! Redox-specific extensions to primitives in the `std::process` module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -18,7 +18,9 @@ use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n-/// Unix-specific extensions to the `std::process::Command` builder\n+/// Redox-specific extensions to the [`process::Command`] builder,\n+///\n+/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user id. This translates to a\n@@ -107,7 +109,9 @@ impl CommandExt for process::Command {\n     }\n }\n \n-/// Unix-specific extensions to `std::process::ExitStatus`\n+/// Redox-specific extensions to [`process::ExitStatus`].\n+///\n+/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}, {"sha": "71ff0d46b91e31f8553689730f1ccc9d2a519e7b", "filename": "src/libstd/sys/redox/ext/thread.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unix-specific extensions to primitives in the `std::thread` module.\n+//! Redox-specific extensions to primitives in the `std::thread` module.\n \n #![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n \n@@ -19,7 +19,9 @@ use thread::JoinHandle;\n #[allow(deprecated)]\n pub type RawPthread = usize;\n \n-/// Unix-specific extensions to `std::thread::JoinHandle`\n+/// Redox-specific extensions to [`thread::JoinHandle`].\n+///\n+/// [`thread::JoinHandle`]: ../../../../std/thread/struct.JoinHandle.html\n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n pub trait JoinHandleExt {\n     /// Extracts the raw pthread_t without taking ownership"}, {"sha": "8347145db5aaf493a9c8ad3cf379415c5897a5bd", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -17,7 +17,9 @@ use mem;\n use sys::os_str::Buf;\n use sys_common::{FromInner, IntoInner, AsInner};\n \n-/// Unix-specific extensions to `OsString`.\n+/// Unix-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an [`OsString`] from a byte vector.\n@@ -66,7 +68,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Unix-specific extensions to `OsStr`.\n+/// Unix-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4e981012669033ff393d85a44f1511bab82df6a0", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -105,7 +105,9 @@ impl FileExt for fs::File {\n     }\n }\n \n-/// Unix-specific extensions to `Permissions`\n+/// Unix-specific extensions to [`fs::Permissions`].\n+///\n+/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `st_mode` bits that contain the standard\n@@ -180,7 +182,9 @@ impl PermissionsExt for Permissions {\n     }\n }\n \n-/// Unix-specific extensions to `OpenOptions`\n+/// Unix-specific extensions to [`fs::OpenOptions`].\n+///\n+/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -246,13 +250,9 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-// Hm, why are there casts here to the returned type, shouldn't the types always\n-// be the same? Right you are! Turns out, however, on android at least the types\n-// in the raw `stat` structure are not the same as the types being returned. Who\n-// knew!\n-//\n-// As a result to make sure this compiles for all platforms we do the manual\n-// casts and rely on manual lowering to `stat` if the raw type is desired.\n+/// Unix-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the ID of the device containing the file.\n@@ -555,7 +555,12 @@ impl MetadataExt for fs::Metadata {\n     fn blocks(&self) -> u64 { self.st_blocks() }\n }\n \n-/// Add support for special unix types (block/char device, fifo and socket).\n+/// Unix-specific extensions for [`FileType`].\n+///\n+/// Adds support for special Unix file types such as block/character devices,\n+/// pipes, and sockets.\n+///\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n@@ -701,10 +706,10 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n     sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n-#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n-/// An extension trait for [`fs::DirBuilder`] for unix-specific options.\n+/// Unix-specific extensions to [`fs::DirBuilder`].\n ///\n /// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n+#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to\n     /// 0o777."}, {"sha": "21630ae9746fcdcca4aa3a4fe97a1e77fa551600", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -18,7 +18,9 @@ use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n-/// Unix-specific extensions to the `std::process::Command` builder\n+/// Unix-specific extensions to the [`process::Command`] builder.\n+///\n+/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user id. This translates to a\n@@ -117,7 +119,9 @@ impl CommandExt for process::Command {\n     }\n }\n \n-/// Unix-specific extensions to `std::process::ExitStatus`\n+/// Unix-specific extensions to [`process::ExitStatus`].\n+///\n+/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}, {"sha": "8dadf29945c1a816a217cfb12f0634bb4189acf5", "filename": "src/libstd/sys/unix/ext/thread.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -21,7 +21,9 @@ use thread::JoinHandle;\n #[allow(deprecated)]\n pub type RawPthread = pthread_t;\n \n-/// Unix-specific extensions to `std::thread::JoinHandle`\n+/// Unix-specific extensions to [`thread::JoinHandle`].\n+///\n+/// [`thread::JoinHandle`]: ../../../../std/thread/struct.JoinHandle.html\n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n pub trait JoinHandleExt {\n     /// Extracts the raw pthread_t without taking ownership"}, {"sha": "98d4355248990a92ec748b667409e91b1e5a1f2d", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -76,7 +76,9 @@ use sys_common::{FromInner, AsInner};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use sys_common::wtf8::EncodeWide;\n \n-/// Windows-specific extensions to `OsString`.\n+/// Windows-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n@@ -109,7 +111,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Windows-specific extensions to `OsStr`.\n+/// Windows-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     /// Re-encodes an `OsStr` as a wide character sequence, i.e. potentially"}, {"sha": "78c9e95a05501d0821602ab330ecc8cde75ff178", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -103,9 +103,9 @@ impl FileExt for fs::File {\n     }\n }\n \n-/// Windows-specific extensions to [`OpenOptions`].\n+/// Windows-specific extensions to [`fs::OpenOptions`].\n ///\n-/// [`OpenOptions`]: ../../../fs/struct.OpenOptions.html\n+/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n pub trait OpenOptionsExt {\n     /// Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`]\n@@ -281,13 +281,12 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-/// Extension methods for [`fs::Metadata`] to access the raw fields contained\n-/// within.\n+/// Windows-specific extensions to [`fs::Metadata`].\n ///\n /// The data members that this trait exposes correspond to the members\n /// of the [`BY_HANDLE_FILE_INFORMATION`] structure.\n ///\n-/// [`fs::Metadata`]: ../../../fs/struct.Metadata.html\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n /// [`BY_HANDLE_FILE_INFORMATION`]:\n ///     https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -445,8 +444,11 @@ impl MetadataExt for Metadata {\n     fn file_size(&self) -> u64 { self.as_inner().size() }\n }\n \n-/// Add support for the Windows specific fact that a symbolic link knows whether it is a file\n-/// or directory.\n+/// Windows-specific extensions to [`FileType`].\n+///\n+/// On Windows, a symbolic link knows whether it is a file or directory.\n+///\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[unstable(feature = \"windows_file_type_ext\", issue = \"0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a symbolic link that is also a directory."}, {"sha": "a02bcbe0c87c259ad599c2e0d2dbb2b973fe73fd", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2701c175a507c52e80e262b65bbe003687d4a96a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=2701c175a507c52e80e262b65bbe003687d4a96a", "patch": "@@ -82,7 +82,9 @@ impl IntoRawHandle for process::ChildStderr {\n     }\n }\n \n-/// Windows-specific extensions to `std::process::ExitStatus`\n+/// Windows-specific extensions to [`process::ExitStatus`].\n+///\n+/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n@@ -98,7 +100,9 @@ impl ExitStatusExt for process::ExitStatus {\n     }\n }\n \n-/// Windows-specific extensions to the `std::process::Command` builder\n+/// Windows-specific extensions to the [`process::Command`] builder.\n+///\n+/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n pub trait CommandExt {\n     /// Sets the [process creation flags][1] to be passed to `CreateProcess`."}]}