{"sha": "105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNWExNGY1NDczMTU4YjVjNzRlYjVkNGRlMGE5NjU1ZTY2YjdiMWE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-28T21:49:56Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-28T21:49:56Z"}, "message": "Merge pull request #721 from mcarton/while_let_loop\n\nFix wrong suggestion in `WHILE_LET_LOOP`", "tree": {"sha": "cc2a43f73bed63d6a3ccb845848ff86ce43ff72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc2a43f73bed63d6a3ccb845848ff86ce43ff72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "html_url": "https://github.com/rust-lang/rust/commit/105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/105a14f5473158b5c74eb5d4de0a9655e66b7b1a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86", "html_url": "https://github.com/rust-lang/rust/commit/5fe58d5c6ee4e9e7b4a643adc0eb66b1a9c16d86"}, {"sha": "5fadfb3ea6a89512959b0bfa1261ed92bcf47964", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fadfb3ea6a89512959b0bfa1261ed92bcf47964", "html_url": "https://github.com/rust-lang/rust/commit/5fadfb3ea6a89512959b0bfa1261ed92bcf47964"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "e6b28d20e83efc56c9964363c83a89e1076171a1", "filename": "src/loops.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/105a14f5473158b5c74eb5d4de0a9655e66b7b1a/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105a14f5473158b5c74eb5d4de0a9655e66b7b1a/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "patch": "@@ -11,7 +11,7 @@ use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use std::borrow::Cow;\n use std::collections::HashMap;\n \n-use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro, expr_block,\n+use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro,\n             span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, walk_ptrs_ty};\n use utils::{BTREEMAP_PATH, HASHMAP_PATH, LL_PATH, OPTION_PATH, RESULT_PATH, VEC_PATH};\n \n@@ -241,20 +241,6 @@ impl LateLintPass for LoopsPass {\n             // or extract the first expression (if any) from the block\n             if let Some(inner) = inner_stmt_expr.or_else(|| extract_first_expr(block)) {\n                 if let ExprMatch(ref matchexpr, ref arms, ref source) = inner.node {\n-                    // collect the remaining statements below the match\n-                    let mut other_stuff = block.stmts\n-                                               .iter()\n-                                               .skip(1)\n-                                               .map(|stmt| snippet(cx, stmt.span, \"..\"))\n-                                               .collect::<Vec<Cow<_>>>();\n-                    if inner_stmt_expr.is_some() {\n-                        // if we have a statement which has a match,\n-                        if let Some(ref expr) = block.expr {\n-                            // then collect the expression (without semicolon) below it\n-                            other_stuff.push(snippet(cx, expr.span, \"..\"));\n-                        }\n-                    }\n-\n                     // ensure \"if let\" compatible match structure\n                     match *source {\n                         MatchSource::Normal | MatchSource::IfLetDesugar{..} => {\n@@ -264,22 +250,20 @@ impl LateLintPass for LoopsPass {\n                                 if in_external_macro(cx, expr.span) {\n                                     return;\n                                 }\n-                                let loop_body = if inner_stmt_expr.is_some() {\n-                                    // FIXME: should probably be an ellipsis\n-                                    // tabbing and newline is probably a bad idea, especially for large blocks\n-                                    Cow::Owned(format!(\"{{\\n    {}\\n}}\", other_stuff.join(\"\\n    \")))\n-                                } else {\n-                                    expr_block(cx, &arms[0].body, Some(other_stuff.join(\"\\n    \")), \"..\")\n-                                };\n+\n+                                // NOTE: we used to make build a body here instead of using\n+                                // ellipsis, this was removed because:\n+                                // 1) it was ugly with big bodies;\n+                                // 2) it was not indented properly;\n+                                // 3) it wasn\u2019t very smart (see #675).\n                                 span_lint_and_then(cx,\n                                                    WHILE_LET_LOOP,\n                                                    expr.span,\n                                                    \"this loop could be written as a `while let` loop\",\n                                                    |db| {\n-                                                       let sug = format!(\"while let {} = {} {}\",\n+                                                       let sug = format!(\"while let {} = {} {{ .. }}\",\n                                                                          snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                                                         snippet(cx, matchexpr.span, \"..\"),\n-                                                                         loop_body);\n+                                                                         snippet(cx, matchexpr.span, \"..\"));\n                                                        db.span_suggestion(expr.span, \"try\", sug);\n                                                    });\n                             }"}, {"sha": "7c5582ba9bfa80c5edf0d28b5b215313554ad634", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/105a14f5473158b5c74eb5d4de0a9655e66b7b1a/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105a14f5473158b5c74eb5d4de0a9655e66b7b1a/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=105a14f5473158b5c74eb5d4de0a9655e66b7b1a", "patch": "@@ -66,6 +66,19 @@ fn main() {\n         println!(\"{}\", x);\n     }\n \n+    // #675, this used to have a wrong suggestion\n+    loop {\n+    //~^ERROR this loop could be written as a `while let` loop\n+    //~|HELP try\n+    //~|SUGGESTION while let Some(word) = \"\".split_whitespace().next() { .. }\n+        let (e, l) = match \"\".split_whitespace().next() {\n+            Some(word) => (word.is_empty(), word.len()),\n+            None => break\n+        };\n+\n+        let _ = (e, l);\n+    }\n+\n     let mut iter = 1..20;\n     while let Option::Some(x) = iter.next() { //~ERROR this loop could be written as a `for` loop\n         println!(\"{}\", x);"}]}