{"sha": "1280887561ec48f628f3920075918b72142de1ad", "node_id": "C_kwDOAAsO6NoAKDEyODA4ODc1NjFlYzQ4ZjYyOGYzOTIwMDc1OTE4YjcyMTQyZGUxYWQ", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T09:36:00Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T09:36:00Z"}, "message": "do something with library_symbols", "tree": {"sha": "eb69673901a370835165f3dbce9d196c7dd78407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb69673901a370835165f3dbce9d196c7dd78407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1280887561ec48f628f3920075918b72142de1ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1280887561ec48f628f3920075918b72142de1ad", "html_url": "https://github.com/rust-lang/rust/commit/1280887561ec48f628f3920075918b72142de1ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1280887561ec48f628f3920075918b72142de1ad/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176f4da77aedc487b24ea32d69ccf3a3eb069a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/176f4da77aedc487b24ea32d69ccf3a3eb069a90", "html_url": "https://github.com/rust-lang/rust/commit/176f4da77aedc487b24ea32d69ccf3a3eb069a90"}], "stats": {"total": 99, "additions": 36, "deletions": 63}, "files": [{"sha": "66b3a1ca426e71412e83c13f0425fd11c4cb6624", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1280887561ec48f628f3920075918b72142de1ad/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1280887561ec48f628f3920075918b72142de1ad/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=1280887561ec48f628f3920075918b72142de1ad", "patch": "@@ -102,7 +102,7 @@ fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHas\n             let root_file = graph[krate].root_file_id;\n             db.file_source_root(root_file) == id\n         })\n-        .collect::<FxHashSet<_>>();\n+        .collect();\n     Arc::new(res)\n }\n "}, {"sha": "9f589c1ea1a344a8c3ea5a539f23c506978d0cf5", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1280887561ec48f628f3920075918b72142de1ad/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1280887561ec48f628f3920075918b72142de1ad/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=1280887561ec48f628f3920075918b72142de1ad", "patch": "@@ -11,7 +11,6 @@ use ide_db::{\n };\n use itertools::Itertools;\n use profile::{memory_usage, Bytes};\n-use rustc_hash::FxHashMap;\n use std::env;\n use stdx::format_to;\n use syntax::{ast, Parse, SyntaxNode};\n@@ -149,20 +148,16 @@ impl fmt::Display for LibrarySymbolsStats {\n     }\n }\n \n-impl FromIterator<TableEntry<(), Arc<FxHashMap<SourceRootId, SymbolIndex>>>>\n-    for LibrarySymbolsStats\n-{\n+impl FromIterator<TableEntry<SourceRootId, Arc<SymbolIndex>>> for LibrarySymbolsStats {\n     fn from_iter<T>(iter: T) -> LibrarySymbolsStats\n     where\n-        T: IntoIterator<Item = TableEntry<(), Arc<FxHashMap<SourceRootId, SymbolIndex>>>>,\n+        T: IntoIterator<Item = TableEntry<SourceRootId, Arc<SymbolIndex>>>,\n     {\n         let mut res = LibrarySymbolsStats::default();\n         for entry in iter {\n-            let value = entry.value.unwrap();\n-            for symbols in value.values() {\n-                res.total += symbols.len();\n-                res.size += symbols.memory_size();\n-            }\n+            let symbols = entry.value.unwrap();\n+            res.total += symbols.len();\n+            res.size += symbols.memory_size();\n         }\n         res\n     }"}, {"sha": "6f9e8bf0ed43891054e586570864c8c705b87945", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 30, "deletions": 52, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1280887561ec48f628f3920075918b72142de1ad/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1280887561ec48f628f3920075918b72142de1ad/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=1280887561ec48f628f3920075918b72142de1ad", "patch": "@@ -30,7 +30,7 @@ use std::{\n \n use base_db::{\n     salsa::{self, ParallelDatabase},\n-    CrateId, FileId, FileRange, SourceDatabaseExt, SourceRootId, Upcast,\n+    CrateId, FileRange, SourceDatabaseExt, SourceRootId, Upcast,\n };\n use either::Either;\n use fst::{self, Streamer};\n@@ -41,11 +41,8 @@ use hir::{\n     Semantics, TraitId,\n };\n use rayon::prelude::*;\n-use rustc_hash::{FxHashMap, FxHashSet};\n-use syntax::{\n-    ast::{self, HasName},\n-    AstNode, Parse, SmolStr, SourceFile, SyntaxNode, SyntaxNodePtr,\n-};\n+use rustc_hash::FxHashSet;\n+use syntax::{ast::HasName, AstNode, SmolStr, SyntaxNode, SyntaxNodePtr};\n \n use crate::RootDatabase;\n \n@@ -98,7 +95,7 @@ impl Query {\n #[salsa::query_group(SymbolsDatabaseStorage)]\n pub trait SymbolsDatabase: HirDatabase + SourceDatabaseExt + Upcast<dyn HirDatabase> {\n     fn module_symbols(&self, module_id: ModuleId) -> Arc<SymbolIndex>;\n-    fn library_symbols(&self) -> Arc<FxHashMap<SourceRootId, SymbolIndex>>;\n+    fn library_symbols(&self, source_root_id: SourceRootId) -> Arc<SymbolIndex>;\n     /// The set of \"local\" (that is, from the current workspace) roots.\n     /// Files in local roots are assumed to change frequently.\n     #[salsa::input]\n@@ -109,28 +106,23 @@ pub trait SymbolsDatabase: HirDatabase + SourceDatabaseExt + Upcast<dyn HirDatab\n     fn library_roots(&self) -> Arc<FxHashSet<SourceRootId>>;\n }\n \n-fn library_symbols(db: &dyn SymbolsDatabase) -> Arc<FxHashMap<SourceRootId, SymbolIndex>> {\n+fn library_symbols(db: &dyn SymbolsDatabase, source_root_id: SourceRootId) -> Arc<SymbolIndex> {\n     let _p = profile::span(\"library_symbols\");\n \n-    let roots = db.library_roots();\n-    let res = roots\n+    // todo: this could be parallelized, once I figure out how to do that...\n+    let symbols = db\n+        .source_root_crates(source_root_id)\n         .iter()\n-        .map(|&root_id| {\n-            let root = db.source_root(root_id);\n-            let files = root\n-                .iter()\n-                .map(|it| (it, SourceDatabaseExt::file_text(db, it)))\n-                .collect::<Vec<_>>();\n-            let symbol_index = SymbolIndex::for_files(\n-                files.into_par_iter().map(|(file, text)| (file, SourceFile::parse(&text))),\n-            );\n-            (root_id, symbol_index)\n-        })\n+        .flat_map(|&krate| module_ids_for_crate(db.upcast(), krate))\n+        .map(|module_id| SymbolCollector::collect(db, module_id))\n+        .flatten()\n         .collect();\n-    Arc::new(res)\n+\n+    Arc::new(SymbolIndex::new(symbols))\n }\n \n fn module_symbols(db: &dyn SymbolsDatabase, module_id: ModuleId) -> Arc<SymbolIndex> {\n+    let _p = profile::span(\"module_symbols\");\n     let symbols = SymbolCollector::collect(db, module_id);\n     Arc::new(SymbolIndex::new(symbols))\n }\n@@ -172,11 +164,13 @@ impl<DB: ParallelDatabase> Clone for Snap<salsa::Snapshot<DB>> {\n pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     let _p = profile::span(\"world_symbols\").detail(|| query.query.clone());\n \n-    let tmp1;\n-    let tmp2;\n-    let buf: Vec<&SymbolIndex> = if query.libs {\n-        tmp1 = db.library_symbols();\n-        tmp1.values().collect()\n+    let snap = Snap(db.snapshot());\n+\n+    let indices = if query.libs {\n+        db.library_roots()\n+            .par_iter()\n+            .map_with(snap, |snap, &root| snap.0.library_symbols(root))\n+            .collect()\n     } else {\n         let mut module_ids = Vec::new();\n \n@@ -187,31 +181,29 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n             }\n         }\n \n-        let snap = Snap(db.snapshot());\n-        tmp2 = module_ids\n+        module_ids\n             .par_iter()\n             .map_with(snap, |snap, &module_id| snap.0.module_symbols(module_id))\n-            .collect::<Vec<_>>();\n-        tmp2.iter().map(|it| &**it).collect()\n+            .collect()\n     };\n-    query.search(&buf)\n+\n+    query.search(indices)\n }\n \n pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<FileSymbol> {\n     let _p = profile::span(\"crate_symbols\").detail(|| format!(\"{:?}\", query));\n \n     let module_ids = module_ids_for_crate(db, krate);\n     let snap = Snap(db.snapshot());\n-    let buf: Vec<_> = module_ids\n+    let indices: Vec<_> = module_ids\n         .par_iter()\n         .map_with(snap, |snap, &module_id| snap.0.module_symbols(module_id))\n         .collect();\n \n-    let buf = buf.iter().map(|it| &**it).collect::<Vec<_>>();\n-    query.search(&buf)\n+    query.search(indices)\n }\n \n-fn module_ids_for_crate(db: &RootDatabase, krate: CrateId) -> Vec<ModuleId> {\n+fn module_ids_for_crate(db: &dyn DefDatabase, krate: CrateId) -> Vec<ModuleId> {\n     let def_map = db.crate_def_map(krate);\n     def_map.modules().map(|(id, _)| def_map.module_id(id)).collect()\n }\n@@ -292,15 +284,6 @@ impl SymbolIndex {\n         self.map.as_fst().size() + self.symbols.len() * mem::size_of::<FileSymbol>()\n     }\n \n-    pub(crate) fn for_files(\n-        files: impl ParallelIterator<Item = (FileId, Parse<ast::SourceFile>)>,\n-    ) -> SymbolIndex {\n-        let symbols = files\n-            .flat_map(|(file_id, file)| source_file_to_file_symbols(&file.tree(), file_id))\n-            .collect::<Vec<_>>();\n-        SymbolIndex::new(symbols)\n-    }\n-\n     fn range_to_map_value(start: usize, end: usize) -> u64 {\n         debug_assert![start <= (std::u32::MAX as usize)];\n         debug_assert![end <= (std::u32::MAX as usize)];\n@@ -316,10 +299,10 @@ impl SymbolIndex {\n }\n \n impl Query {\n-    pub(crate) fn search(self, indices: &[&SymbolIndex]) -> Vec<FileSymbol> {\n+    pub(crate) fn search(self, indices: Vec<Arc<SymbolIndex>>) -> Vec<FileSymbol> {\n         let _p = profile::span(\"symbol_index::Query::search\");\n         let mut op = fst::map::OpBuilder::new();\n-        for file_symbols in indices.iter() {\n+        for file_symbols in &indices {\n             let automaton = fst::automaton::Subsequence::new(&self.lowercased);\n             op = op.add(file_symbols.map.search(automaton))\n         }\n@@ -432,11 +415,6 @@ impl FileSymbolKind {\n     }\n }\n \n-fn source_file_to_file_symbols(_source_file: &SourceFile, _file_id: FileId) -> Vec<FileSymbol> {\n-    // todo: delete this.\n-    vec![]\n-}\n-\n /// Represents an outstanding module that the symbol collector must collect symbols from.\n struct SymbolCollectorWork {\n     module_id: ModuleId,"}]}