{"sha": "c8d435aade4db3e51eb2414293a8e0d7934bd17a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZDQzNWFhZGU0ZGIzZTUxZWIyNDE0MjkzYThlMGQ3OTM0YmQxN2E=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-13T14:16:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-13T14:24:14Z"}, "message": "Put allocator shim in a different object file", "tree": {"sha": "58f25e31c8536242fd7316e008df898d70c926b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f25e31c8536242fd7316e008df898d70c926b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8d435aade4db3e51eb2414293a8e0d7934bd17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d435aade4db3e51eb2414293a8e0d7934bd17a", "html_url": "https://github.com/rust-lang/rust/commit/c8d435aade4db3e51eb2414293a8e0d7934bd17a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8d435aade4db3e51eb2414293a8e0d7934bd17a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77e36125812c257c68a89d56e6dad30e6c081ebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e36125812c257c68a89d56e6dad30e6c081ebe", "html_url": "https://github.com/rust-lang/rust/commit/77e36125812c257c68a89d56e6dad30e6c081ebe"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "1cc45a7d93bbd8131583ef662a0c4b2d594f665a", "filename": "src/allocator.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8d435aade4db3e51eb2414293a8e0d7934bd17a/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d435aade4db3e51eb2414293a8e0d7934bd17a/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=c8d435aade4db3e51eb2414293a8e0d7934bd17a", "patch": "@@ -13,7 +13,8 @@ use crate::prelude::*;\n use rustc::middle::allocator::AllocatorKind;\n use rustc_allocator::{AllocatorTy, ALLOCATOR_METHODS};\n \n-pub fn codegen(sess: &Session, module: &mut Module<impl Backend + 'static>) {\n+/// Returns whether an allocator shim was created\n+pub fn codegen(sess: &Session, module: &mut Module<impl Backend + 'static>) -> bool {\n     let any_dynamic_crate = sess\n         .dependency_formats\n         .borrow()\n@@ -23,8 +24,12 @@ pub fn codegen(sess: &Session, module: &mut Module<impl Backend + 'static>) {\n             list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n         });\n     if any_dynamic_crate {\n+        false\n     } else if let Some(kind) = *sess.allocator_kind.get() {\n         codegen_inner(module, kind);\n+        true\n+    } else {\n+        false\n     }\n }\n "}, {"sha": "a1628b8b08db4ec074f807d3a023f6b19db1c3a6", "filename": "src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8d435aade4db3e51eb2414293a8e0d7934bd17a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d435aade4db3e51eb2414293a8e0d7934bd17a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c8d435aade4db3e51eb2414293a8e0d7934bd17a", "patch": "@@ -258,14 +258,21 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             let mut faerie_module = new_module(\"some_file\".to_string());\n \n             codegen_cgus(tcx, &mut faerie_module, &mut log);\n-            crate::allocator::codegen(tcx.sess, &mut faerie_module);\n \n             tcx.sess.abort_if_errors();\n \n+            let mut allocator_module = new_module(\"allocator_shim.o\".to_string());\n+            let created_alloc_shim =\n+                crate::allocator::codegen(tcx.sess, &mut allocator_module);\n+\n             return Box::new(CodegenResults {\n                 crate_name: tcx.crate_name(LOCAL_CRATE),\n                 modules: vec![emit_module(\"dummy_name\", ModuleKind::Regular, faerie_module)],\n-                allocator_module: None,\n+                allocator_module: if created_alloc_shim {\n+                    Some(emit_module(\"allocator_shim\", ModuleKind::Allocator, allocator_module))\n+                } else {\n+                    None\n+                },\n                 metadata_module: CompiledModule {\n                     name: \"dummy_metadata\".to_string(),\n                     kind: ModuleKind::Metadata,"}]}