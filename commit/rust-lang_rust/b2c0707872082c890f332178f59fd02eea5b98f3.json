{"sha": "b2c0707872082c890f332178f59fd02eea5b98f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzA3MDc4NzIwODJjODkwZjMzMjE3OGY1OWZkMDJlZWE1Yjk4ZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-13T10:50:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-13T10:50:23Z"}, "message": "Auto merge of #43158 - PlasmaPower:thread-local-try-with, r=alexcrichton\n\nThread local try with\n\nhttps://github.com/rust-lang/rfcs/pull/2030 was turned into this PR (the RFC was closed, but it looks like just a PR should be good).\n\nSee also: state stabilization issue: #27716\n\n`try_with` is used in two places in std: stdio and thread_info. In stdio, it would be better if the result was passed to the closure, but in thread_info, it's better as is where the result is returned from the function call. I'm not sure which is better, but I prefer the current way as it better represents the scope.", "tree": {"sha": "e6c9eaa93dfbb471c9aaa96965d6265c1a3965de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6c9eaa93dfbb471c9aaa96965d6265c1a3965de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c0707872082c890f332178f59fd02eea5b98f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c0707872082c890f332178f59fd02eea5b98f3", "html_url": "https://github.com/rust-lang/rust/commit/b2c0707872082c890f332178f59fd02eea5b98f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c0707872082c890f332178f59fd02eea5b98f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ffdeb7816ae62175febdfa18534290bf5ad573", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ffdeb7816ae62175febdfa18534290bf5ad573", "html_url": "https://github.com/rust-lang/rust/commit/06ffdeb7816ae62175febdfa18534290bf5ad573"}, {"sha": "a301f84b6afc30c58dede5ddd804890f7a6f20a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a301f84b6afc30c58dede5ddd804890f7a6f20a5", "html_url": "https://github.com/rust-lang/rust/commit/a301f84b6afc30c58dede5ddd804890f7a6f20a5"}], "stats": {"total": 113, "additions": 95, "deletions": 18}, "files": [{"sha": "2abb8afa82848a5a8db1cddbc8c4c61589b06ba9", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=b2c0707872082c890f332178f59fd02eea5b98f3", "patch": "@@ -12,7 +12,6 @@\n \n use cell::RefCell;\n use thread::Thread;\n-use thread::LocalKeyState;\n \n struct ThreadInfo {\n     stack_guard: Option<usize>,\n@@ -23,19 +22,15 @@ thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(N\n \n impl ThreadInfo {\n     fn with<R, F>(f: F) -> Option<R> where F: FnOnce(&mut ThreadInfo) -> R {\n-        if THREAD_INFO.state() == LocalKeyState::Destroyed {\n-            return None\n-        }\n-\n-        THREAD_INFO.with(move |c| {\n+        THREAD_INFO.try_with(move |c| {\n             if c.borrow().is_none() {\n                 *c.borrow_mut() = Some(ThreadInfo {\n                     stack_guard: None,\n                     thread: Thread::new(None),\n                 })\n             }\n-            Some(f(c.borrow_mut().as_mut().unwrap()))\n-        })\n+            f(c.borrow_mut().as_mut().unwrap())\n+        }).ok()\n     }\n }\n "}, {"sha": "28e8f72ac64167e8a17a5c6504b08e52e4aa6a41", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=b2c0707872082c890f332178f59fd02eea5b98f3", "patch": "@@ -232,6 +232,32 @@ pub enum LocalKeyState {\n     Destroyed,\n }\n \n+/// An error returned by [`LocalKey::try_with`](struct.LocalKey.html#method.try_with).\n+#[unstable(feature = \"thread_local_state\",\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n+pub struct AccessError {\n+    _private: (),\n+}\n+\n+#[unstable(feature = \"thread_local_state\",\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n+impl fmt::Debug for AccessError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"AccessError\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"thread_local_state\",\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n+impl fmt::Display for AccessError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(\"already destroyed\", f)\n+    }\n+}\n+\n impl<T: 'static> LocalKey<T> {\n     #[doc(hidden)]\n     #[unstable(feature = \"thread_local_internals\",\n@@ -258,15 +284,8 @@ impl<T: 'static> LocalKey<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with<F, R>(&'static self, f: F) -> R\n                       where F: FnOnce(&T) -> R {\n-        unsafe {\n-            let slot = (self.inner)();\n-            let slot = slot.expect(\"cannot access a TLS value during or \\\n-                                    after it is destroyed\");\n-            f(match *slot.get() {\n-                Some(ref inner) => inner,\n-                None => self.init(slot),\n-            })\n-        }\n+        self.try_with(f).expect(\"cannot access a TLS value during or \\\n+                                 after it is destroyed\")\n     }\n \n     unsafe fn init(&self, slot: &UnsafeCell<Option<T>>) -> &T {\n@@ -331,6 +350,32 @@ impl<T: 'static> LocalKey<T> {\n             }\n         }\n     }\n+\n+    /// Acquires a reference to the value in this TLS key.\n+    ///\n+    /// This will lazily initialize the value if this thread has not referenced\n+    /// this key yet. If the key has been destroyed (which may happen if this is called\n+    /// in a destructor), this function will return a ThreadLocalError.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will still `panic!()` if the key is uninitialized and the\n+    /// key's initializer panics.\n+    #[unstable(feature = \"thread_local_state\",\n+               reason = \"state querying was recently added\",\n+               issue = \"27716\")]\n+    pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>\n+                      where F: FnOnce(&T) -> R {\n+        unsafe {\n+            let slot = (self.inner)().ok_or(AccessError {\n+                _private: (),\n+            })?;\n+            Ok(f(match *slot.get() {\n+                Some(ref inner) => inner,\n+                None => self.init(slot),\n+            }))\n+        }\n+    }\n }\n \n #[doc(hidden)]"}, {"sha": "07a3a01ce8666074adebb1ccff2d506c0303f1d3", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b2c0707872082c890f332178f59fd02eea5b98f3", "patch": "@@ -159,7 +159,7 @@ use time::Duration;\n #[macro_use] mod local;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::local::{LocalKey, LocalKeyState};\n+pub use self::local::{LocalKey, LocalKeyState, AccessError};\n \n // The types used by the thread_local! macro to access TLS keys. Note that there\n // are two types, the \"OS\" type and the \"fast\" type. The OS thread local key"}, {"sha": "c072ec0679d73d9c081dfcf53e645adee71e22f5", "filename": "src/test/run-pass/tls-try-with.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Ftest%2Frun-pass%2Ftls-try-with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c0707872082c890f332178f59fd02eea5b98f3/src%2Ftest%2Frun-pass%2Ftls-try-with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftls-try-with.rs?ref=b2c0707872082c890f332178f59fd02eea5b98f3", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten no threads support\n+\n+#![feature(thread_local_state)]\n+\n+use std::thread;\n+\n+static mut DROP_RUN: bool = false;\n+\n+struct Foo;\n+\n+thread_local!(static FOO: Foo = Foo {});\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        assert!(FOO.try_with(|_| panic!(\"`try_with` closure run\")).is_err());\n+        unsafe { DROP_RUN = true; }\n+    }\n+}\n+\n+fn main() {\n+    thread::spawn(|| {\n+        assert_eq!(FOO.try_with(|_| {\n+            132\n+        }).expect(\"`try_with` failed\"), 132);\n+    }).join().unwrap();\n+    assert!(unsafe { DROP_RUN });\n+}"}]}