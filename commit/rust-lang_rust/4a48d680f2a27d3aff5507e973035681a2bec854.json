{"sha": "4a48d680f2a27d3aff5507e973035681a2bec854", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNDhkNjgwZjJhMjdkM2FmZjU1MDdlOTczMDM1NjgxYTJiZWM4NTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-17T08:57:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-17T09:07:26Z"}, "message": "Simplify based on eddyb's comment", "tree": {"sha": "302c26cce078c451f08817e041e4e1ddc2b0b658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302c26cce078c451f08817e041e4e1ddc2b0b658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a48d680f2a27d3aff5507e973035681a2bec854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a48d680f2a27d3aff5507e973035681a2bec854", "html_url": "https://github.com/rust-lang/rust/commit/4a48d680f2a27d3aff5507e973035681a2bec854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a48d680f2a27d3aff5507e973035681a2bec854/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bf75fbfc8812ed0c7dc827def29c9d65a438eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf75fbfc8812ed0c7dc827def29c9d65a438eac", "html_url": "https://github.com/rust-lang/rust/commit/0bf75fbfc8812ed0c7dc827def29c9d65a438eac"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "fd35915f6440ebacfeee58c78e7b8ac97e9c5da0", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4a48d680f2a27d3aff5507e973035681a2bec854/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a48d680f2a27d3aff5507e973035681a2bec854/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=4a48d680f2a27d3aff5507e973035681a2bec854", "patch": "@@ -55,28 +55,16 @@ pub(super) fn mangle(\n \n     let hash = get_symbol_hash(tcx, instance, instance_ty, instantiating_crate);\n \n-    if let ty::InstanceDef::DropGlue(_drop_in_place, ty) = instance.def {\n-        // Use `{{drop}}::<$TYPE>::$hash` as name for the drop glue instead of\n-        // `core::mem::drop_in_place::$hash`.\n-        let mut printer =\n-            SymbolPrinter { tcx, path: SymbolPath::new(), keep_within_component: false };\n-        printer.write_str(\"{{drop}}\").unwrap();\n-        printer.path.finalize_pending_component();\n-        let printer = printer\n-            .generic_delimiters(|mut printer| {\n-                if let Some(ty) = ty {\n-                    printer.print_type(ty)\n-                } else {\n-                    printer.write_str(\"_\")?;\n-                    Ok(printer)\n-                }\n-            })\n-            .unwrap();\n-        return printer.path.finish(hash);\n-    }\n-\n     let mut printer = SymbolPrinter { tcx, path: SymbolPath::new(), keep_within_component: false }\n-        .print_def_path(def_id, &[])\n+        .print_def_path(\n+            def_id,\n+            if let ty::InstanceDef::DropGlue(_, _) = instance.def {\n+                // Add the name of the dropped type to the symbol name\n+                &*instance.substs\n+            } else {\n+                &[]\n+            },\n+        )\n         .unwrap();\n \n     if let ty::InstanceDef::VtableShim(..) = instance.def {"}]}