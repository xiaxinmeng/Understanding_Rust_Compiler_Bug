{"sha": "b0d1fc57eb64ae9cc879902531ae5e287077eb7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDFmYzU3ZWI2NGFlOWNjODc5OTAyNTMxYWU1ZTI4NzA3N2ViN2U=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-13T19:03:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-13T19:03:36Z"}, "message": "Rollup merge of #69973 - tspiteri:const-int-conversion-since, r=dtolnay\n\nUpdate stable-since version for const_int_conversion\n\nSince #69373 was not merged in time for 1.43.0 beta, update to `since = \"1.44.0\"`.", "tree": {"sha": "f7ade9628629e33f02f4cd782f2736c662b6de83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ade9628629e33f02f4cd782f2736c662b6de83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d1fc57eb64ae9cc879902531ae5e287077eb7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJea9kICRBK7hj4Ov3rIwAAdHIIAJtfQGLHH8c5QtMoGaDRJ50m\n/IOku1miVT8XGwQfSS76ryCDls0TnPA06RA08r+G51PsHABmFSRJKWGVzaHf7jcl\n3dJ02ekJ/OLUbUzNM5LjccgXzgqGv1Doxf4nlVL1sKfYyo5KjLUof1AT8g6YPEnk\ngcYBkBOerHjCSMy/OgxhvvepMYCkZk1HNwGLaPc45Ca7qNHPOp6czc+pKmRsFPA4\nlgM5MgZs3wOPhK9hzTa+BsEyCU3G3B+BdIWJq2Cf2U+pV0xXxzT6d0yDLQjWiKI+\nbrjRwxOaS1KiDIDPFf3C6XvIut2m4xW0PHcxx3P1AbX+fIS2+BzWRnK7Z9+FcqM=\n=vBBP\n-----END PGP SIGNATURE-----\n", "payload": "tree f7ade9628629e33f02f4cd782f2736c662b6de83\nparent 93da9d7fe107c8a67b51f16f5bdac10e459fdeba\nparent 08a7fa6dd8418ce6876bdd83fb3dd605950d56fa\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1584126216 +0900\ncommitter GitHub <noreply@github.com> 1584126216 +0900\n\nRollup merge of #69973 - tspiteri:const-int-conversion-since, r=dtolnay\n\nUpdate stable-since version for const_int_conversion\n\nSince #69373 was not merged in time for 1.43.0 beta, update to `since = \"1.44.0\"`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d1fc57eb64ae9cc879902531ae5e287077eb7e", "html_url": "https://github.com/rust-lang/rust/commit/b0d1fc57eb64ae9cc879902531ae5e287077eb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d1fc57eb64ae9cc879902531ae5e287077eb7e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93da9d7fe107c8a67b51f16f5bdac10e459fdeba", "url": "https://api.github.com/repos/rust-lang/rust/commits/93da9d7fe107c8a67b51f16f5bdac10e459fdeba", "html_url": "https://github.com/rust-lang/rust/commit/93da9d7fe107c8a67b51f16f5bdac10e459fdeba"}, {"sha": "08a7fa6dd8418ce6876bdd83fb3dd605950d56fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa", "html_url": "https://github.com/rust-lang/rust/commit/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "853092dd85ee94436fb3433c35ce4b4b181aa71b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0d1fc57eb64ae9cc879902531ae5e287077eb7e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d1fc57eb64ae9cc879902531ae5e287077eb7e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b0d1fc57eb64ae9cc879902531ae5e287077eb7e", "patch": "@@ -2154,7 +2154,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2174,7 +2174,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2209,7 +2209,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n             #[allow_internal_unstable(const_fn_union)]\n@@ -2251,7 +2251,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2284,7 +2284,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2327,7 +2327,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n             #[allow_internal_unstable(const_fn_union)]\n@@ -4115,7 +4115,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -4135,7 +4135,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -4170,7 +4170,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n             #[allow_internal_unstable(const_fn_union)]\n@@ -4212,7 +4212,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4245,7 +4245,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4288,7 +4288,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n             #[allow_internal_unstable(const_fn_union)]"}]}