{"sha": "b914e0e74cd2e32f063cc5f90c066d55eaf88619", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTRlMGU3NGNkMmUzMmYwNjNjYzVmOTBjMDY2ZDU1ZWFmODg2MTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-28T22:04:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-28T22:04:48Z"}, "message": "Revert \"rustboot: Emit an error instead of asserting in trans when a T is passed by value\" due to test failures\n\nThis reverts commit ee901858a27bf00c7dd66e7cfecb9dd97029dba8.", "tree": {"sha": "6315b0e2de71df510087f7b840467dd2fb4ee6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6315b0e2de71df510087f7b840467dd2fb4ee6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b914e0e74cd2e32f063cc5f90c066d55eaf88619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b914e0e74cd2e32f063cc5f90c066d55eaf88619", "html_url": "https://github.com/rust-lang/rust/commit/b914e0e74cd2e32f063cc5f90c066d55eaf88619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b914e0e74cd2e32f063cc5f90c066d55eaf88619/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "html_url": "https://github.com/rust-lang/rust/commit/ee901858a27bf00c7dd66e7cfecb9dd97029dba8"}], "stats": {"total": 23, "additions": 2, "deletions": 21}, "files": [{"sha": "2ff5e1286d77ccfa0528168cd5e4089c901968d1", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b914e0e74cd2e32f063cc5f90c066d55eaf88619/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b914e0e74cd2e32f063cc5f90c066d55eaf88619/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=b914e0e74cd2e32f063cc5f90c066d55eaf88619", "patch": "@@ -1308,23 +1308,6 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n         Common.err (Some item_id) \"this function must return a value\"\n     in\n \n-    let check_fn_ty_validity item_id (ty_sig, _) =\n-      let check_input_slot i slot =\n-        match slot with\n-            {\n-              Ast.slot_ty = Some (Ast.TY_param _);\n-              Ast.slot_mode = Ast.MODE_local\n-            } ->\n-              Common.err\n-                (Some item_id)\n-                \"parameter %d of this type-parametric function must be \\\n-                passed by reference, not by value\"\n-                (i + 1)\n-          | _ -> ()\n-      in\n-      Array.iteri check_input_slot ty_sig.Ast.sig_input_slots\n-    in\n-\n     let visit_mod_item_pre _ _ item =\n       let { Common.node = item; Common.id = item_id } = item in\n       match item.Ast.decl_item with\n@@ -1333,9 +1316,7 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n             let fn_ty = Hashtbl.find cx.Semant.ctxt_all_item_types item_id in\n             begin\n               match fn_ty with\n-                  Ast.TY_fn ty_fn ->\n-                    check_fn_ty_validity item_id ty_fn;\n-                    push_fn_ctx_of_ty_fn ty_fn\n+                  Ast.TY_fn ty_fn -> push_fn_ctx_of_ty_fn ty_fn\n                 | _ ->\n                   Common.bug ()\n                     \"Type.visit_mod_item_pre: fn item didn't have a fn type\""}, {"sha": "7b8613151e79989155eaedca085d461dbf728d93", "filename": "src/lib/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b914e0e74cd2e32f063cc5f90c066d55eaf88619/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b914e0e74cd2e32f063cc5f90c066d55eaf88619/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=b914e0e74cd2e32f063cc5f90c066d55eaf88619", "patch": "@@ -12,7 +12,7 @@ tag list[T] {\n     nil;\n }\n \n-fn foldl[T,U](&list[T] ls, &U u, fn(&T t, U u) -> U f) -> U {\n+fn foldl[T,U](&list[T] ls, U u, fn(&T t, U u) -> U f) -> U {\n   alt(ls) {\n     case (cons[T](?hd, ?tl)) {\n       auto u_ = f(hd, u);"}]}