{"sha": "9028330f39d28a8719b0b63dc5edcc1a70a69f02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMjgzMzBmMzlkMjhhODcxOWIwYjYzZGM1ZWRjYzFhNzBhNjlmMDI=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-11-25T18:22:21Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-11-25T18:22:21Z"}, "message": "Take &Pat in visit_pat", "tree": {"sha": "401345519a4790c560f8ddabe80a1a0149b169cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401345519a4790c560f8ddabe80a1a0149b169cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9028330f39d28a8719b0b63dc5edcc1a70a69f02", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9028330f39d28a8719b0b63dc5edcc1a70a69f02", "html_url": "https://github.com/rust-lang/rust/commit/9028330f39d28a8719b0b63dc5edcc1a70a69f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9028330f39d28a8719b0b63dc5edcc1a70a69f02/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13", "html_url": "https://github.com/rust-lang/rust/commit/eb5cbfebfd2a1524a2c366dc220a8de0d4f08b13"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "781aaa5c6163b8d6f9cfe0f417cb5fc3354ebdc3", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -51,7 +51,7 @@ impl<'self> Visitor<()> for CheckLoanCtxt<'self> {\n     fn visit_block(&mut self, b:&ast::Block, _:()) {\n         check_loans_in_block(self, b);\n     }\n-    fn visit_pat(&mut self, p:@ast::Pat, _:()) {\n+    fn visit_pat(&mut self, p:&ast::Pat, _:()) {\n         check_loans_in_pat(self, p);\n     }\n     fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&ast::fn_decl,\n@@ -847,7 +847,7 @@ fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,\n }\n \n fn check_loans_in_pat<'a>(this: &mut CheckLoanCtxt<'a>,\n-                          pat: @ast::Pat)\n+                          pat: &ast::Pat)\n {\n     this.check_for_conflicting_loans(pat.id);\n     this.check_move_out_from_id(pat.id, pat.span);"}, {"sha": "239890415329f7b0d6ea49e320b6028d4db08d48", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -87,7 +87,7 @@ impl<'self> visit::Visitor<()> for GatherLoanCtxt<'self> {\n     fn visit_stmt(&mut self, s:@Stmt, _:()) {\n         add_stmt_to_map(self, s);\n     }\n-    fn visit_pat(&mut self, p:@Pat, _:()) {\n+    fn visit_pat(&mut self, p:&Pat, _:()) {\n         add_pat_to_id_range(self, p);\n     }\n     fn visit_local(&mut self, l:@Local, _:()) {\n@@ -119,7 +119,7 @@ pub fn gather_loans(bccx: &BorrowckCtxt,\n }\n \n fn add_pat_to_id_range(this: &mut GatherLoanCtxt,\n-                       p: @ast::Pat) {\n+                       p: &ast::Pat) {\n     // NB: This visitor function just adds the pat ids into the id\n     // range. We gather loans that occur in patterns using the\n     // `gather_pat()` method below. Eventually these two should be"}, {"sha": "3048bfb1d2caabe268be364b35d72978983b1eee", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -33,7 +33,7 @@ impl Visitor<bool> for CheckCrateVisitor {\n     fn visit_item(&mut self, i:@item, env:bool) {\n         check_item(self, self.sess, self.ast_map, self.def_map, i, env);\n     }\n-    fn visit_pat(&mut self, p:@Pat, env:bool) {\n+    fn visit_pat(&mut self, p:&Pat, env:bool) {\n         check_pat(self, p, env);\n     }\n     fn visit_expr(&mut self, ex:@Expr, env:bool) {\n@@ -81,7 +81,7 @@ pub fn check_item(v: &mut CheckCrateVisitor,\n     }\n }\n \n-pub fn check_pat(v: &mut CheckCrateVisitor, p: @Pat, _is_const: bool) {\n+pub fn check_pat(v: &mut CheckCrateVisitor, p: &Pat, _is_const: bool) {\n     fn is_str(e: @Expr) -> bool {\n         match e.node {\n             ExprVstore("}, {"sha": "473b7025cbf95a91506b0264972ae01ad8c15e00", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -900,7 +900,7 @@ fn check_unsafe_block(cx: &Context, e: &ast::Expr) {\n     }\n }\n \n-fn check_unused_mut_pat(cx: &Context, p: @ast::Pat) {\n+fn check_unused_mut_pat(cx: &Context, p: &ast::Pat) {\n     match p.node {\n         ast::PatIdent(ast::BindByValue(ast::MutMutable),\n                       ref path, _) if pat_util::pat_is_binding(cx.tcx.def_map, p)=> {\n@@ -1119,7 +1119,7 @@ impl<'self> Visitor<()> for Context<'self> {\n         }\n     }\n \n-    fn visit_pat(&mut self, p: @ast::Pat, _: ()) {\n+    fn visit_pat(&mut self, p: &ast::Pat, _: ()) {\n         check_pat_non_uppercase_statics(self, p);\n         check_unused_mut_pat(self, p);\n "}, {"sha": "90bbbaeaf6f748d7620c34fa498cb3b63ed9d48f", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -739,7 +739,7 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n         }\n     }\n \n-    fn visit_pat(&mut self, pattern: @ast::Pat, _: ()) {\n+    fn visit_pat(&mut self, pattern: &ast::Pat, _: ()) {\n         match pattern.node {\n             ast::PatStruct(_, ref fields, _) => {\n                 match ty::get(ty::pat_ty(self.tcx, pattern)).sty {"}, {"sha": "b0568834ed4b68decbd46dc7d6b7189d07810969", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -340,7 +340,7 @@ fn resolve_arm(visitor: &mut RegionResolutionVisitor,\n }\n \n fn resolve_pat(visitor: &mut RegionResolutionVisitor,\n-               pat: @ast::Pat,\n+               pat: &ast::Pat,\n                cx: Context) {\n     assert_eq!(cx.var_parent, cx.parent);\n     parent_to_expr(visitor, cx, pat.id, pat.span);\n@@ -480,7 +480,7 @@ impl Visitor<Context> for RegionResolutionVisitor {\n     fn visit_arm(&mut self, a:&Arm, cx:Context) {\n         resolve_arm(self, a, cx);\n     }\n-    fn visit_pat(&mut self, p:@Pat, cx:Context) {\n+    fn visit_pat(&mut self, p:&Pat, cx:Context) {\n         resolve_pat(self, p, cx);\n     }\n     fn visit_stmt(&mut self, s:@Stmt, cx:Context) {"}, {"sha": "4da4de7b7577d0799b74079dec31d5ca08ea5739", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -375,7 +375,7 @@ impl Visitor<()> for GatherLocalsVisitor {\n \n     }\n         // Add pattern bindings.\n-    fn visit_pat(&mut self, p:@ast::Pat, _:()) {\n+    fn visit_pat(&mut self, p:&ast::Pat, _:()) {\n             match p.node {\n               ast::PatIdent(_, ref path, _)\n                   if pat_util::pat_is_binding(self.fcx.ccx.tcx.def_map, p) => {"}, {"sha": "93438cacdd602f9a6255a1134dad6e330e248a23", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -278,7 +278,7 @@ fn visit_block(b: &ast::Block, wbcx: &mut WbCtxt) {\n     visit::walk_block(wbcx, b, ());\n }\n \n-fn visit_pat(p: @ast::Pat, wbcx: &mut WbCtxt) {\n+fn visit_pat(p: &ast::Pat, wbcx: &mut WbCtxt) {\n     if !wbcx.success {\n         return;\n     }\n@@ -323,7 +323,7 @@ impl Visitor<()> for WbCtxt {\n     fn visit_stmt(&mut self, s:@ast::Stmt, _:()) { visit_stmt(s, self); }\n     fn visit_expr(&mut self, ex:@ast::Expr, _:()) { visit_expr(ex, self); }\n     fn visit_block(&mut self, b:&ast::Block, _:()) { visit_block(b, self); }\n-    fn visit_pat(&mut self, p:@ast::Pat, _:()) { visit_pat(p, self); }\n+    fn visit_pat(&mut self, p:&ast::Pat, _:()) { visit_pat(p, self); }\n     fn visit_local(&mut self, l:@ast::Local, _:()) { visit_local(l, self); }\n }\n "}, {"sha": "f0be7057c70bf5dcc5ccc0f21514a9e816a1ab6e", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -242,7 +242,7 @@ impl Ctx {\n         visit::walk_block(self, b, ());\n     }\n \n-    fn map_pat(&mut self, pat: @Pat) {\n+    fn map_pat(&mut self, pat: &Pat) {\n         match pat.node {\n             PatIdent(_, ref path, _) => {\n                 // Note: this is at least *potentially* a pattern...\n@@ -345,7 +345,7 @@ impl Visitor<()> for Ctx {\n         self.path.pop();\n     }\n \n-    fn visit_pat(&mut self, pat: @Pat, _: ()) {\n+    fn visit_pat(&mut self, pat: &Pat, _: ()) {\n         self.map_pat(pat);\n         visit::walk_pat(self, pat, ())\n     }"}, {"sha": "16846823e0c6fe29f86c6edebbd28d829aa0d3f5", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -497,7 +497,7 @@ impl<'self, O: IdVisitingOperation> Visitor<()> for IdVisitor<'self, O> {\n         visit::walk_stmt(self, statement, env)\n     }\n \n-    fn visit_pat(&mut self, pattern: @Pat, env: ()) {\n+    fn visit_pat(&mut self, pattern: &Pat, env: ()) {\n         self.operation.visit_id(pattern.id);\n         visit::walk_pat(self, pattern, env)\n     }"}, {"sha": "9b6f2a275eebb2ce21f56f9d593bf4bb307c7487", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -612,7 +612,7 @@ struct NewNameFinderContext {\n }\n \n impl Visitor<()> for NewNameFinderContext {\n-    fn visit_pat(&mut self, pattern: @ast::Pat, _: ()) {\n+    fn visit_pat(&mut self, pattern: &ast::Pat, _: ()) {\n         match *pattern {\n             // we found a pat_ident!\n             ast::Pat {"}, {"sha": "4691d8f591247f86c04207c7798f173b6f52004d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9028330f39d28a8719b0b63dc5edcc1a70a69f02/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9028330f39d28a8719b0b63dc5edcc1a70a69f02", "patch": "@@ -78,7 +78,7 @@ pub trait Visitor<E:Clone> {\n     fn visit_block(&mut self, b:&Block, e:E) { walk_block(self, b, e) }\n     fn visit_stmt(&mut self, s:@Stmt, e:E) { walk_stmt(self, s, e) }\n     fn visit_arm(&mut self, a:&Arm, e:E) { walk_arm(self, a, e) }\n-    fn visit_pat(&mut self, p:@Pat, e:E) { walk_pat(self, p, e) }\n+    fn visit_pat(&mut self, p:&Pat, e:E) { walk_pat(self, p, e) }\n     fn visit_decl(&mut self, d:@Decl, e:E) { walk_decl(self, d, e) }\n     fn visit_expr(&mut self, ex:@Expr, e:E) { walk_expr(self, ex, e) }\n     fn visit_expr_post(&mut self, _ex:@Expr, _e:E) { }"}]}