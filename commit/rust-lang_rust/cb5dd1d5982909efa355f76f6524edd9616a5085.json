{"sha": "cb5dd1d5982909efa355f76f6524edd9616a5085", "node_id": "C_kwDOAAsO6NoAKGNiNWRkMWQ1OTgyOTA5ZWZhMzU1Zjc2ZjY1MjRlZGQ5NjE2YTUwODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-21T14:02:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-21T14:02:59Z"}, "message": "Rollup merge of #111745 - Badel2:emitter-add-overflow, r=compiler-errors\n\nFix overflow in error emitter\n\nFix #109854\nClose #94171 (was already fixed before but missing test)\n\nThis bug happens when a multipart suggestion spans more than one line.\n\nThe fix is to update the `acc` variable, which didn't handle the case when the text to remove spans multiple lines but the text to add spans only one line.\n\nAlso, use `usize::try_from` instead of  `as usize` to detect overflows earlier in the future, and point to the source of the overflow (the original issue points to a different place where this value is used, not where the overflow had happened).\n\nAnd finally add an `if start != end` check to avoid doing any extra work in case of empty ranges.\n\nLong explanation:\n\nGiven this test case:\n\n```rust\nfn generate_setter() {\n    String::with_capacity(\n    //~^ ERROR this function takes 1 argument but 3 arguments were supplied\n    generate_setter,\n    r#\"\npub(crate) struct Person<T: Clone> {}\n\"#,\n     r#\"\"#,\n    );\n}\n```\n\nThe compiler will try to convert that code into the following:\n\n```rust\nfn generate_setter() {\n    String::with_capacity(\n    //~^ ERROR this function takes 1 argument but 3 arguments were supplied\n    /* usize */,\n    );\n}\n```\n\nSo it creates a suggestion with 3 separate parts:\n\n```\n// Replace \"generate_setter\" with \"/* usize */\"\nSubstitutionPart { span: fuzz_input.rs:4:5: 4:20 (#0), snippet: \"/* usize */\" }\n// Remove second arg (multiline string)\nSubstitutionPart { span: fuzz_input.rs:4:20: 7:3 (#0), snippet: \"\" }\n// Remove third arg (r#\"\"#)\nSubstitutionPart { span: fuzz_input.rs:7:3: 8:11 (#0), snippet: \"\" }\n```\n\nEach of this parts gets a separate `SubstitutionHighlight` (this marks the relevant text green in a terminal, the values are 0-indexed so `start: 4` means column 5):\n\n```\nSubstitutionHighlight { start: 4, end: 15 }\nSubstitutionHighlight { start: 15, end: 15 }\nSubstitutionHighlight { start: 18446744073709551614, end: 18446744073709551614 }\n```\n\nThe 2nd and 3rd suggestion are empty (start = end) because they only remove text, so there are no additions to highlight. But the 3rd span has overflowed because the compiler assumes that the 3rd suggestion is on the same line as the first suggestion. The 2nd span starts at column 20 and the highlight starts at column 16 (15+1), so that suggestion is good. But since the 3rd span starts at column 3, the result is `3 - 4`, or column -1, which turns into -2 with 0-indexed, and that's equivalent to `18446744073709551614 as isize`.\n\nWith this fix, the resulting `SubstitutionHighlight` are:\n\n```\nSubstitutionHighlight { start: 4, end: 15 }\nSubstitutionHighlight { start: 15, end: 15 }\nSubstitutionHighlight { start: 15, end: 15 }\n```\n\nAs expected. I guess ideally we shouldn't emit empty highlights when removing text, but I am too scared to change that.", "tree": {"sha": "414f1234d78391a671efb975235425a98e3b0bf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414f1234d78391a671efb975235425a98e3b0bf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5dd1d5982909efa355f76f6524edd9616a5085", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkaiSTCRBK7hj4Ov3rIwAAX3kIAHKcUoX5dYm2pbWunsmuoIU5\n6aNP2EN5ffqIbghX4J741Fj+M61LP5Zhk8u4wf5LVKObQb85Iu69b6ocQG5v6QUY\nG2HTBmtkvthIfM7ieIVgqk/a6pBrX8AMYblEi8ZZNApp/K7Qr/fvyF0QqD+QtuhO\nli70OdgwzxZmXCo+0pFAQ3uYUxP62dlVGK0XUAzp5r0ByVhiE+zolhqrPpKm1mdX\nvvuWq1nuooBtKZTV1AhLq+WEPjt8NNRth6KBohxyMCGZaP9Z9pVp5rB16UubBfVA\nqRg8nl0a9P0YG4obm+gyQ8Wdl5lH/6YnkFYCn7SlRQ9C4BU2TkrodIGXU3/dCgk=\n=Epb0\n-----END PGP SIGNATURE-----\n", "payload": "tree 414f1234d78391a671efb975235425a98e3b0bf1\nparent d77014a608a97884e547d4215517ccd4babb2088\nparent cbb41008fd43b512ffdbd35cebee2e4518b2181e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684677779 +0200\ncommitter GitHub <noreply@github.com> 1684677779 +0200\n\nRollup merge of #111745 - Badel2:emitter-add-overflow, r=compiler-errors\n\nFix overflow in error emitter\n\nFix #109854\nClose #94171 (was already fixed before but missing test)\n\nThis bug happens when a multipart suggestion spans more than one line.\n\nThe fix is to update the `acc` variable, which didn't handle the case when the text to remove spans multiple lines but the text to add spans only one line.\n\nAlso, use `usize::try_from` instead of  `as usize` to detect overflows earlier in the future, and point to the source of the overflow (the original issue points to a different place where this value is used, not where the overflow had happened).\n\nAnd finally add an `if start != end` check to avoid doing any extra work in case of empty ranges.\n\nLong explanation:\n\nGiven this test case:\n\n```rust\nfn generate_setter() {\n    String::with_capacity(\n    //~^ ERROR this function takes 1 argument but 3 arguments were supplied\n    generate_setter,\n    r#\"\npub(crate) struct Person<T: Clone> {}\n\"#,\n     r#\"\"#,\n    );\n}\n```\n\nThe compiler will try to convert that code into the following:\n\n```rust\nfn generate_setter() {\n    String::with_capacity(\n    //~^ ERROR this function takes 1 argument but 3 arguments were supplied\n    /* usize */,\n    );\n}\n```\n\nSo it creates a suggestion with 3 separate parts:\n\n```\n// Replace \"generate_setter\" with \"/* usize */\"\nSubstitutionPart { span: fuzz_input.rs:4:5: 4:20 (#0), snippet: \"/* usize */\" }\n// Remove second arg (multiline string)\nSubstitutionPart { span: fuzz_input.rs:4:20: 7:3 (#0), snippet: \"\" }\n// Remove third arg (r#\"\"#)\nSubstitutionPart { span: fuzz_input.rs:7:3: 8:11 (#0), snippet: \"\" }\n```\n\nEach of this parts gets a separate `SubstitutionHighlight` (this marks the relevant text green in a terminal, the values are 0-indexed so `start: 4` means column 5):\n\n```\nSubstitutionHighlight { start: 4, end: 15 }\nSubstitutionHighlight { start: 15, end: 15 }\nSubstitutionHighlight { start: 18446744073709551614, end: 18446744073709551614 }\n```\n\nThe 2nd and 3rd suggestion are empty (start = end) because they only remove text, so there are no additions to highlight. But the 3rd span has overflowed because the compiler assumes that the 3rd suggestion is on the same line as the first suggestion. The 2nd span starts at column 20 and the highlight starts at column 16 (15+1), so that suggestion is good. But since the 3rd span starts at column 3, the result is `3 - 4`, or column -1, which turns into -2 with 0-indexed, and that's equivalent to `18446744073709551614 as isize`.\n\nWith this fix, the resulting `SubstitutionHighlight` are:\n\n```\nSubstitutionHighlight { start: 4, end: 15 }\nSubstitutionHighlight { start: 15, end: 15 }\nSubstitutionHighlight { start: 15, end: 15 }\n```\n\nAs expected. I guess ideally we shouldn't emit empty highlights when removing text, but I am too scared to change that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5dd1d5982909efa355f76f6524edd9616a5085", "html_url": "https://github.com/rust-lang/rust/commit/cb5dd1d5982909efa355f76f6524edd9616a5085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5dd1d5982909efa355f76f6524edd9616a5085/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77014a608a97884e547d4215517ccd4babb2088", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77014a608a97884e547d4215517ccd4babb2088", "html_url": "https://github.com/rust-lang/rust/commit/d77014a608a97884e547d4215517ccd4babb2088"}, {"sha": "cbb41008fd43b512ffdbd35cebee2e4518b2181e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb41008fd43b512ffdbd35cebee2e4518b2181e", "html_url": "https://github.com/rust-lang/rust/commit/cbb41008fd43b512ffdbd35cebee2e4518b2181e"}], "stats": {"total": 130, "additions": 108, "deletions": 22}, "files": [{"sha": "3e38d6afb0b8eed4b383bef78fbf05dd54db2d3e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cb5dd1d5982909efa355f76f6524edd9616a5085/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5dd1d5982909efa355f76f6524edd9616a5085/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=cb5dd1d5982909efa355f76f6524edd9616a5085", "patch": "@@ -2303,22 +2303,25 @@ impl EmitterWriter {\n \n         // Colorize addition/replacements with green.\n         for &SubstitutionHighlight { start, end } in highlight_parts {\n-            // Account for tabs when highlighting (#87972).\n-            let tabs: usize = line_to_add\n-                .chars()\n-                .take(start)\n-                .map(|ch| match ch {\n-                    '\\t' => 3,\n-                    _ => 0,\n-                })\n-                .sum();\n-            buffer.set_style_range(\n-                *row_num,\n-                max_line_num_len + 3 + start + tabs,\n-                max_line_num_len + 3 + end + tabs,\n-                Style::Addition,\n-                true,\n-            );\n+            // This is a no-op for empty ranges\n+            if start != end {\n+                // Account for tabs when highlighting (#87972).\n+                let tabs: usize = line_to_add\n+                    .chars()\n+                    .take(start)\n+                    .map(|ch| match ch {\n+                        '\\t' => 3,\n+                        _ => 0,\n+                    })\n+                    .sum();\n+                buffer.set_style_range(\n+                    *row_num,\n+                    max_line_num_len + 3 + start + tabs,\n+                    max_line_num_len + 3 + end + tabs,\n+                    Style::Addition,\n+                    true,\n+                );\n+            }\n         }\n         *row_num += 1;\n     }"}, {"sha": "5a80024f19bf5ed517a86b5bc6544b301eeadbab", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb5dd1d5982909efa355f76f6524edd9616a5085/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5dd1d5982909efa355f76f6524edd9616a5085/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=cb5dd1d5982909efa355f76f6524edd9616a5085", "patch": "@@ -330,12 +330,11 @@ impl CodeSuggestion {\n                     });\n                     buf.push_str(&part.snippet);\n                     let cur_hi = sm.lookup_char_pos(part.span.hi());\n-                    if cur_hi.line == cur_lo.line && !part.snippet.is_empty() {\n-                        // Account for the difference between the width of the current code and the\n-                        // snippet being suggested, so that the *later* suggestions are correctly\n-                        // aligned on the screen.\n-                        acc += len - (cur_hi.col.0 - cur_lo.col.0) as isize;\n-                    }\n+                    // Account for the difference between the width of the current code and the\n+                    // snippet being suggested, so that the *later* suggestions are correctly\n+                    // aligned on the screen. Note that cur_hi and cur_lo can be on different\n+                    // lines, so cur_hi.col can be smaller than cur_lo.col\n+                    acc += len - (cur_hi.col.0 as isize - cur_lo.col.0 as isize);\n                     prev_hi = cur_hi;\n                     prev_line = sf.get_line(prev_hi.line - 1);\n                     for line in part.snippet.split('\\n').skip(1) {"}, {"sha": "dd4542dd71f7024ab1655493224c710328006d76", "filename": "tests/ui/suggestions/issue-109854.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-109854.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-109854.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109854.rs?ref=cb5dd1d5982909efa355f76f6524edd9616a5085", "patch": "@@ -0,0 +1,12 @@\n+fn generate_setter() {\n+    String::with_capacity(\n+    //~^ ERROR this function takes 1 argument but 3 arguments were supplied\n+    generate_setter,\n+    r#\"\n+pub(crate) struct Person<T: Clone> {}\n+\"#,\n+     r#\"\"#,\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "621a3897165b812fac5e31e7702323672726d65f", "filename": "tests/ui/suggestions/issue-109854.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-109854.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-109854.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109854.stderr?ref=cb5dd1d5982909efa355f76f6524edd9616a5085", "patch": "@@ -0,0 +1,31 @@\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109854.rs:2:5\n+   |\n+LL |       String::with_capacity(\n+   |       ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     r#\"\n+LL | | pub(crate) struct Person<T: Clone> {}\n+LL | | \"#,\n+   | |__- unexpected argument of type `&'static str`\n+LL |        r#\"\"#,\n+   |        ----- unexpected argument of type `&'static str`\n+   |\n+note: expected `usize`, found fn item\n+  --> $DIR/issue-109854.rs:4:5\n+   |\n+LL |     generate_setter,\n+   |     ^^^^^^^^^^^^^^^\n+   = note: expected type `usize`\n+           found fn item `fn() {generate_setter}`\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/string.rs:LL:COL\n+help: remove the extra arguments\n+   |\n+LL -     generate_setter,\n+LL +     /* usize */,\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "cbb9f9cec721142def77ecc4eb61d772b474d6b4", "filename": "tests/ui/suggestions/issue-94171.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-94171.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-94171.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-94171.rs?ref=cb5dd1d5982909efa355f76f6524edd9616a5085", "patch": "@@ -0,0 +1,5 @@\n+fn L(]{match\n+(; {`\n+//~^^ ERROR mismatched closing delimiter\n+//~^^ ERROR unknown start of token\n+//~ ERROR this file contains an unclosed delimiter"}, {"sha": "b3440e46e8acd7a98bf785863c8539f311a5d407", "filename": "tests/ui/suggestions/issue-94171.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-94171.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb5dd1d5982909efa355f76f6524edd9616a5085/tests%2Fui%2Fsuggestions%2Fissue-94171.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-94171.stderr?ref=cb5dd1d5982909efa355f76f6524edd9616a5085", "patch": "@@ -0,0 +1,36 @@\n+error: unknown start of token: `\n+  --> $DIR/issue-94171.rs:2:5\n+   |\n+LL | (; {`\n+   |     ^\n+   |\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+   |\n+LL | (; {'\n+   |     ~\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-94171.rs:1:5\n+   |\n+LL | fn L(]{match\n+   |     ^^ mismatched closing delimiter\n+   |     |\n+   |     unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-94171.rs:5:52\n+   |\n+LL | fn L(]{match\n+   |      -- unclosed delimiter\n+   |      |\n+   |      missing open `[` for this delimiter\n+LL | (; {`\n+   | -  - unclosed delimiter\n+   | |\n+   | unclosed delimiter\n+...\n+LL |\n+   |                                                    ^\n+\n+error: aborting due to 3 previous errors\n+"}]}