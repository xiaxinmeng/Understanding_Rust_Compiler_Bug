{"sha": "343852d8b24a199b4f2ad4e1149214724b4526db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Mzg1MmQ4YjI0YTE5OWI0ZjJhZDRlMTE0OTIxNDcyNGI0NTI2ZGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-23T14:57:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-23T14:57:41Z"}, "message": "simiplify", "tree": {"sha": "a187da1781d5e10e56d4d7183103feb4cd2712f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a187da1781d5e10e56d4d7183103feb4cd2712f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343852d8b24a199b4f2ad4e1149214724b4526db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343852d8b24a199b4f2ad4e1149214724b4526db", "html_url": "https://github.com/rust-lang/rust/commit/343852d8b24a199b4f2ad4e1149214724b4526db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343852d8b24a199b4f2ad4e1149214724b4526db/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d853e9b1ef54be586d8e5b0c43519b5f74e090ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/d853e9b1ef54be586d8e5b0c43519b5f74e090ef", "html_url": "https://github.com/rust-lang/rust/commit/d853e9b1ef54be586d8e5b0c43519b5f74e090ef"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "dd3aa6d7310d9c7d1fe1565fd5241f1ef413ece6", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/343852d8b24a199b4f2ad4e1149214724b4526db/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343852d8b24a199b4f2ad4e1149214724b4526db/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=343852d8b24a199b4f2ad4e1149214724b4526db", "patch": "@@ -62,14 +62,26 @@ impl Submodule {\n             file_items: &SourceFileItems,\n             root: &impl ast::ModuleItemOwner,\n         ) -> Vec<Submodule> {\n-            modules(root)\n-                .map(|(name, m)| Submodule {\n-                    name,\n-                    is_declaration: m.has_semi(),\n-                    source: SourceItemId {\n-                        file_id,\n-                        item_id: Some(file_items.id_of(file_id, m.syntax())),\n-                    },\n+            root.items()\n+                .filter_map(|item| match item.kind() {\n+                    ast::ModuleItemKind::Module(m) => Some(m),\n+                    _ => None,\n+                })\n+                .filter_map(|module| {\n+                    let name = module.name()?.as_name();\n+                    if !module.has_semi() && module.item_list().is_none() {\n+                        tested_by!(name_res_works_for_broken_modules);\n+                        return None;\n+                    }\n+                    let sub = Submodule {\n+                        name,\n+                        is_declaration: module.has_semi(),\n+                        source: SourceItemId {\n+                            file_id,\n+                            item_id: Some(file_items.id_of(file_id, module.syntax())),\n+                        },\n+                    };\n+                    Some(sub)\n                 })\n                 .collect()\n         }\n@@ -209,22 +221,6 @@ impl LinkId {\n     }\n }\n \n-fn modules(root: &impl ast::ModuleItemOwner) -> impl Iterator<Item = (Name, &ast::Module)> {\n-    root.items()\n-        .filter_map(|item| match item.kind() {\n-            ast::ModuleItemKind::Module(m) => Some(m),\n-            _ => None,\n-        })\n-        .filter_map(|module| {\n-            let name = module.name()?.as_name();\n-            if !module.has_semi() && module.item_list().is_none() {\n-                tested_by!(name_res_works_for_broken_modules);\n-                return None;\n-            }\n-            Some((name, module))\n-        })\n-}\n-\n fn create_module_tree<'a>(db: &impl HirDatabase, source_root: SourceRootId) -> ModuleTree {\n     let mut tree = ModuleTree::default();\n "}]}