{"sha": "34f1de8395629aa6cc67997a08c48e2a0ff56e5e", "node_id": "C_kwDOAAsO6NoAKDM0ZjFkZTgzOTU2MjlhYTZjYzY3OTk3YTA4YzQ4ZTJhMGZmNTZlNWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-25T09:44:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-25T09:44:39Z"}, "message": "Rollup merge of #104841 - compiler-errors:fishy-bound-var, r=jackh726\n\nAssert that we don't capture escaping bound vars in `Fn` trait selection\n\nFixes #104825", "tree": {"sha": "5bf9d167b84c32b237e352084bc9d7c3acca9e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf9d167b84c32b237e352084bc9d7c3acca9e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f1de8395629aa6cc67997a08c48e2a0ff56e5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjgI6HCRBK7hj4Ov3rIwAAz/IIAGxElrKPymnBUHjheV+cWSaE\nJ9agLNKLiPvzbBafQs3mBQijy7EjbWlk0GCOvCF5Q7MBjjo7+l3CVhL7tt2j4ufK\nkMHrBwJQqLMs/JKlOHoSopwCTpF12/Am5ajh/PmIGl2kfOYW6jscEpNemJZu00Yv\nHEU6t07UAWiXRu8SCUsYfkBz5BFjjbAHMnI84nn5dv99bHseCOLbl8nSET+LoJ3A\n0cIDeiy3KX2kwpEEoaocUufBnkmUXuHe+hDB4FSxbx0Jx3LSWGBlQedVAZ/f/Ewm\n8/saIlWVQdUCWBDDRffqXQM4ZBlRD7RJjaDubN/TmrwBo8fWaaywW+sn3SAHAFs=\n=sCrk\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bf9d167b84c32b237e352084bc9d7c3acca9e05\nparent f00c3f05bcdfdc835bc2ea6723cc17601cb218ee\nparent d945967779f8f4c72cb50e0793b039e36ecb9213\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669369479 +0100\ncommitter GitHub <noreply@github.com> 1669369479 +0100\n\nRollup merge of #104841 - compiler-errors:fishy-bound-var, r=jackh726\n\nAssert that we don't capture escaping bound vars in `Fn` trait selection\n\nFixes #104825\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f1de8395629aa6cc67997a08c48e2a0ff56e5e", "html_url": "https://github.com/rust-lang/rust/commit/34f1de8395629aa6cc67997a08c48e2a0ff56e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f1de8395629aa6cc67997a08c48e2a0ff56e5e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00c3f05bcdfdc835bc2ea6723cc17601cb218ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00c3f05bcdfdc835bc2ea6723cc17601cb218ee", "html_url": "https://github.com/rust-lang/rust/commit/f00c3f05bcdfdc835bc2ea6723cc17601cb218ee"}, {"sha": "d945967779f8f4c72cb50e0793b039e36ecb9213", "url": "https://api.github.com/repos/rust-lang/rust/commits/d945967779f8f4c72cb50e0793b039e36ecb9213", "html_url": "https://github.com/rust-lang/rust/commit/d945967779f8f4c72cb50e0793b039e36ecb9213"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "e46441001b54d06edc556a4cd07e406e04d2f70b", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34f1de8395629aa6cc67997a08c48e2a0ff56e5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f1de8395629aa6cc67997a08c48e2a0ff56e5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=34f1de8395629aa6cc67997a08c48e2a0ff56e5e", "patch": "@@ -605,8 +605,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     {\n         debug!(?obligation, \"confirm_fn_pointer_candidate\");\n \n-        // Okay to skip binder; it is reintroduced below.\n-        let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n+        let self_ty = self\n+            .infcx\n+            .shallow_resolve(obligation.self_ty().no_bound_vars())\n+            .expect(\"fn pointer should not capture bound vars from predicate\");\n         let sig = self_ty.fn_sig(self.tcx());\n         let trait_ref = closure_trait_ref_and_return_type(\n             self.tcx(),\n@@ -621,15 +623,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // Confirm the `type Output: Sized;` bound that is present on `FnOnce`\n         let cause = obligation.derived_cause(BuiltinDerivedObligation);\n-        // The binder on the Fn obligation is \"less\" important than the one on\n-        // the signature, as evidenced by how we treat it during projection.\n-        // The safe thing to do here is to liberate it, though, which should\n-        // have no worse effect than skipping the binder here.\n-        let liberated_fn_ty =\n-            self.infcx.replace_bound_vars_with_placeholders(obligation.predicate.rebind(self_ty));\n-        let output_ty = self\n-            .infcx\n-            .replace_bound_vars_with_placeholders(liberated_fn_ty.fn_sig(self.tcx()).output());\n+        let output_ty = self.infcx.replace_bound_vars_with_placeholders(sig.output());\n         let output_ty = normalize_with_depth_to(\n             self,\n             obligation.param_env,\n@@ -693,16 +687,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let gen_sig = substs.as_generator().poly_sig();\n \n-        // (1) Feels icky to skip the binder here, but OTOH we know\n-        // that the self-type is an generator type and hence is\n+        // NOTE: The self-type is a generator type and hence is\n         // in fact unparameterized (or at least does not reference any\n-        // regions bound in the obligation). Still probably some\n-        // refactoring could make this nicer.\n+        // regions bound in the obligation).\n+        let self_ty = obligation\n+            .predicate\n+            .self_ty()\n+            .no_bound_vars()\n+            .expect(\"unboxed closure type should not capture bound vars from the predicate\");\n \n         let trait_ref = super::util::generator_trait_ref_and_outputs(\n             self.tcx(),\n             obligation.predicate.def_id(),\n-            obligation.predicate.skip_binder().self_ty(), // (1)\n+            self_ty,\n             gen_sig,\n         )\n         .map_bound(|(trait_ref, ..)| trait_ref);"}, {"sha": "2a1494e8952a1c1a2c8080da83ff4e34d1960d49", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34f1de8395629aa6cc67997a08c48e2a0ff56e5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f1de8395629aa6cc67997a08c48e2a0ff56e5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=34f1de8395629aa6cc67997a08c48e2a0ff56e5e", "patch": "@@ -2271,15 +2271,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?closure_sig);\n \n-        // (1) Feels icky to skip the binder here, but OTOH we know\n-        // that the self-type is an unboxed closure type and hence is\n+        // NOTE: The self-type is an unboxed closure type and hence is\n         // in fact unparameterized (or at least does not reference any\n-        // regions bound in the obligation). Still probably some\n-        // refactoring could make this nicer.\n+        // regions bound in the obligation).\n+        let self_ty = obligation\n+            .predicate\n+            .self_ty()\n+            .no_bound_vars()\n+            .expect(\"unboxed closure type should not capture bound vars from the predicate\");\n+\n         closure_trait_ref_and_return_type(\n             self.tcx(),\n             obligation.predicate.def_id(),\n-            obligation.predicate.skip_binder().self_ty(), // (1)\n+            self_ty,\n             closure_sig,\n             util::TupleArgumentsFlag::No,\n         )"}, {"sha": "a496cea0b005bfafbbb6b901f466fa6dcb22fd2e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34f1de8395629aa6cc67997a08c48e2a0ff56e5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f1de8395629aa6cc67997a08c48e2a0ff56e5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=34f1de8395629aa6cc67997a08c48e2a0ff56e5e", "patch": "@@ -298,11 +298,11 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n     sig: ty::PolyFnSig<'tcx>,\n     tuple_arguments: TupleArgumentsFlag,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let arguments_tuple = match tuple_arguments {\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n     };\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n@@ -313,7 +313,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n@@ -324,7 +324,7 @@ pub fn future_trait_ref_and_outputs<'tcx>(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n-    debug_assert!(!self_ty.has_escaping_bound_vars());\n+    assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.return_ty))\n }"}]}