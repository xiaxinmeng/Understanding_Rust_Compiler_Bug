{"sha": "1199dbdcf5f651060c1cf1ab089c3feafcd54100", "node_id": "C_kwDOAAsO6NoAKDExOTlkYmRjZjVmNjUxMDYwYzFjZjFhYjA4OWMzZmVhZmNkNTQxMDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-17T10:33:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-17T10:33:02Z"}, "message": "Rollup merge of #100661 - PunkyMunky64:patch-1, r=thomcc\n\nFixed a few documentation errors\n\nQuick pull request; IEEE-754, not IEEE-745. May save someone a quick second some time.", "tree": {"sha": "099d3858d3f4e681d153efb1761fb8951b08afa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099d3858d3f4e681d153efb1761fb8951b08afa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1199dbdcf5f651060c1cf1ab089c3feafcd54100", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/MPeCRBK7hj4Ov3rIwAAlM0IAKLrkjBBXLhIfMFps3lsF+wQ\n2bYxVEzU/dk0D1/N5nEc5LsmycepTezIuDqBZ3Nn9hwxdNH/7z5cKpEI9YOucxSW\nl1PICdiXxrJXp6ZhmzHe3Sco0K07U3nZaek4so41cMIvQZl7VuXFKknmEBn2GyqP\nWfZibvpUAabHW1L/XJK9uIzWcc9JXXqpvwCPASzS5pFZjExkGZwMUARcMQReTLXZ\nT9Qazj8FEPAyIcaqb7wl+9dHmFzpm1VurRsKk48QJi6C9I6LXW9zNwouZZSW1qOI\nPW3AbEfO1H0wV8G9j/RSwH4tnssMLksXWBurnSP+RYwpbEjDmiprjrzsP6Rdx/I=\n=5+f0\n-----END PGP SIGNATURE-----\n", "payload": "tree 099d3858d3f4e681d153efb1761fb8951b08afa5\nparent bd8aa6dffea121b3633b544a58cdaa9820612483\nparent 89d9a35b3e3f0a4f3b0f9215c26b315b7cef6f5f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660732382 +0200\ncommitter GitHub <noreply@github.com> 1660732382 +0200\n\nRollup merge of #100661 - PunkyMunky64:patch-1, r=thomcc\n\nFixed a few documentation errors\n\nQuick pull request; IEEE-754, not IEEE-745. May save someone a quick second some time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1199dbdcf5f651060c1cf1ab089c3feafcd54100", "html_url": "https://github.com/rust-lang/rust/commit/1199dbdcf5f651060c1cf1ab089c3feafcd54100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1199dbdcf5f651060c1cf1ab089c3feafcd54100/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8aa6dffea121b3633b544a58cdaa9820612483", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8aa6dffea121b3633b544a58cdaa9820612483", "html_url": "https://github.com/rust-lang/rust/commit/bd8aa6dffea121b3633b544a58cdaa9820612483"}, {"sha": "89d9a35b3e3f0a4f3b0f9215c26b315b7cef6f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d9a35b3e3f0a4f3b0f9215c26b315b7cef6f5f", "html_url": "https://github.com/rust-lang/rust/commit/89d9a35b3e3f0a4f3b0f9215c26b315b7cef6f5f"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "23c46f1a74a314f9fc9f5b2fe21aaee46564b130", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1199dbdcf5f651060c1cf1ab089c3feafcd54100/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1199dbdcf5f651060c1cf1ab089c3feafcd54100/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=1199dbdcf5f651060c1cf1ab089c3feafcd54100", "patch": "@@ -394,7 +394,7 @@ impl f32 {\n \n     /// Not a Number (NaN).\n     ///\n-    /// Note that IEEE-745 doesn't define just a single NaN value;\n+    /// Note that IEEE-754 doesn't define just a single NaN value;\n     /// a plethora of bit patterns are considered to be NaN.\n     /// Furthermore, the standard makes a difference\n     /// between a \"signaling\" and a \"quiet\" NaN,\n@@ -632,7 +632,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n-    /// positive sign bit and positive infinity. Note that IEEE-745 doesn't assign any\n+    /// positive sign bit and positive infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n@@ -654,7 +654,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n-    /// negative sign bit and negative infinity. Note that IEEE-745 doesn't assign any\n+    /// negative sign bit and negative infinity. Note that IEEE-754 doesn't assign any\n     /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n     /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n     /// `is_sign_negative` on a NaN might produce an unexpected result in some cases."}]}