{"sha": "c2d2f6fd14059225d616064196aca3f16d270e68", "node_id": "C_kwDOAAsO6NoAKGMyZDJmNmZkMTQwNTkyMjVkNjE2MDY0MTk2YWNhM2YxNmQyNzBlNjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-06T18:08:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-06T18:08:37Z"}, "message": "Rollup merge of #94659 - RalfJung:signed-shift, r=oli-obk\n\nexplain why shift with signed offset works the way it does\n\nI was worried for a bit here that Miri/CTFE would be inconsistent with codegen, but I *think* everything is all right, actually.\n\nCc `@oli-obk` `@eddyb`", "tree": {"sha": "018b9066290262f1d05fc8b68931088cca0191eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/018b9066290262f1d05fc8b68931088cca0191eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d2f6fd14059225d616064196aca3f16d270e68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJPilCRBK7hj4Ov3rIwAATEkIACi8D1ezuNuGAPJ4OIoLHwx1\ngww92rEE5YFFEWzTxH5GuCznohfbiCstHACdWXTAB78FtUzKhi62hiV7JFY4VgMz\nEjk/FSaYnlKeBP4yOpD7hXlCYUYn4HLYJYv2+IHHIr4+YllUv4dzxSz/oAPj0FN0\nsEXlg5fK+MLeLjpcZd8eprnPVekMe5QIpVfnOTXiCTxSDBXHse4tErT425RC12kk\nC1Oe4zghWyR/uoHWSJGVvmJOK2WcimTop8VWmUsJ68dP3h860zzEkVbcaIu/mEWO\nm16pCECqI9Ghousvdb90BFuaEX5j8fyycZ99i8Zt6s8FQnNysuBKGSc3Mmw3NH0=\n=tfFz\n-----END PGP SIGNATURE-----\n", "payload": "tree 018b9066290262f1d05fc8b68931088cca0191eb\nparent a64180f67f148c0d13f30a8137dc4b8cc2b28757\nparent dfc43df9377683e823ad6b07ea7f24538cd6e0c7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646590117 +0100\ncommitter GitHub <noreply@github.com> 1646590117 +0100\n\nRollup merge of #94659 - RalfJung:signed-shift, r=oli-obk\n\nexplain why shift with signed offset works the way it does\n\nI was worried for a bit here that Miri/CTFE would be inconsistent with codegen, but I *think* everything is all right, actually.\n\nCc `@oli-obk` `@eddyb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d2f6fd14059225d616064196aca3f16d270e68", "html_url": "https://github.com/rust-lang/rust/commit/c2d2f6fd14059225d616064196aca3f16d270e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d2f6fd14059225d616064196aca3f16d270e68/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64180f67f148c0d13f30a8137dc4b8cc2b28757", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64180f67f148c0d13f30a8137dc4b8cc2b28757", "html_url": "https://github.com/rust-lang/rust/commit/a64180f67f148c0d13f30a8137dc4b8cc2b28757"}, {"sha": "dfc43df9377683e823ad6b07ea7f24538cd6e0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc43df9377683e823ad6b07ea7f24538cd6e0c7", "html_url": "https://github.com/rust-lang/rust/commit/dfc43df9377683e823ad6b07ea7f24538cd6e0c7"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "6dae9dc72b7b4668df706aa5dc605f0e2c3a7ea4", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2f6fd14059225d616064196aca3f16d270e68/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2f6fd14059225d616064196aca3f16d270e68/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=c2d2f6fd14059225d616064196aca3f16d270e68", "patch": "@@ -127,17 +127,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Shift ops can have an RHS with a different numeric type.\n         if bin_op == Shl || bin_op == Shr {\n-            let signed = left_layout.abi.is_signed();\n             let size = u128::from(left_layout.size.bits());\n+            // Even if `r` is signed, we treat it as if it was unsigned (i.e., we use its\n+            // zero-extended form). This matches the codegen backend:\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/base.rs#L315-L317>.\n+            // The overflow check is also ignorant to the sign:\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L728>.\n+            // This would behave rather strangely if we had integer types of size 256: a shift by\n+            // -1i8 would actually shift by 255, but that would *not* be considered overflowing. A\n+            // shift by -1i16 though would be considered overflowing. If we had integers of size\n+            // 512, then a shift by -1i8 would even produce a different result than one by -1i16:\n+            // the first shifts by 255, the latter by u16::MAX % 512 = 511. Lucky enough, our\n+            // integers are maximally 128bits wide, so negative shifts *always* overflow and we have\n+            // consistent results for the same value represented at different bit widths.\n+            assert!(size <= 128);\n             let overflow = r >= size;\n             // The shift offset is implicitly masked to the type size, to make sure this operation\n             // is always defined. This is the one MIR operator that does *not* directly map to a\n             // single LLVM operation. See\n-            // <https://github.com/rust-lang/rust/blob/a3b9405ae7bb6ab4e8103b414e75c44598a10fd2/compiler/rustc_codegen_ssa/src/common.rs#L131-L158>\n+            // <https://github.com/rust-lang/rust/blob/c274e4969f058b1c644243181ece9f829efa7594/compiler/rustc_codegen_ssa/src/common.rs#L131-L158>\n             // for the corresponding truncation in our codegen backends.\n             let r = r % size;\n             let r = u32::try_from(r).unwrap(); // we masked so this will always fit\n-            let result = if signed {\n+            let result = if left_layout.abi.is_signed() {\n                 let l = self.sign_extend(l, left_layout) as i128;\n                 let result = match bin_op {\n                     Shl => l.checked_shl(r).unwrap(),"}]}