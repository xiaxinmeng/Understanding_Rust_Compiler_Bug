{"sha": "df0c13d2ea1bcbf999ea161e69707ccaad1c0771", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMGMxM2QyZWExYmNiZjk5OWVhMTYxZTY5NzA3Y2NhYWQxYzA3NzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T02:09:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:34Z"}, "message": "librustc: De-`@mut` the encoding stats", "tree": {"sha": "f398e8fdb2c45a9ba680cca98b1d0523894c968e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f398e8fdb2c45a9ba680cca98b1d0523894c968e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0c13d2ea1bcbf999ea161e69707ccaad1c0771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0c13d2ea1bcbf999ea161e69707ccaad1c0771", "html_url": "https://github.com/rust-lang/rust/commit/df0c13d2ea1bcbf999ea161e69707ccaad1c0771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0c13d2ea1bcbf999ea161e69707ccaad1c0771/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c95e096075f3720c2461f2c61d5b73646b22f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c95e096075f3720c2461f2c61d5b73646b22f7", "html_url": "https://github.com/rust-lang/rust/commit/75c95e096075f3720c2461f2c61d5b73646b22f7"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "eaf1054231f64c1a6fa4ad7e609b1574dcfa6d28", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 46, "deletions": 49, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/df0c13d2ea1bcbf999ea161e69707ccaad1c0771/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0c13d2ea1bcbf999ea161e69707ccaad1c0771/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=df0c13d2ea1bcbf999ea161e69707ccaad1c0771", "patch": "@@ -22,7 +22,7 @@ use middle::typeck;\n use middle;\n \n use std::cast;\n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::hashmap::{HashMap, HashSet};\n use std::io::mem::MemWriter;\n use std::io::{Writer, Seek, Decorator};\n@@ -69,25 +69,23 @@ pub struct EncodeParams<'a> {\n }\n \n struct Stats {\n-    inline_bytes: u64,\n-    attr_bytes: u64,\n-    dep_bytes: u64,\n-    lang_item_bytes: u64,\n-    native_lib_bytes: u64,\n-    impl_bytes: u64,\n-    misc_bytes: u64,\n-    item_bytes: u64,\n-    index_bytes: u64,\n-    zero_bytes: u64,\n-    total_bytes: u64,\n-\n-    n_inlines: uint\n+    inline_bytes: Cell<u64>,\n+    attr_bytes: Cell<u64>,\n+    dep_bytes: Cell<u64>,\n+    lang_item_bytes: Cell<u64>,\n+    native_lib_bytes: Cell<u64>,\n+    impl_bytes: Cell<u64>,\n+    misc_bytes: Cell<u64>,\n+    item_bytes: Cell<u64>,\n+    index_bytes: Cell<u64>,\n+    zero_bytes: Cell<u64>,\n+    total_bytes: Cell<u64>,\n }\n \n pub struct EncodeContext<'a> {\n     diag: @mut span_handler,\n     tcx: ty::ctxt,\n-    stats: @mut Stats,\n+    stats: @Stats,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n     non_inlineable_statics: &'a RefCell<HashSet<ast::NodeId>>,\n@@ -1796,18 +1794,17 @@ pub static metadata_encoding_version : &'static [u8] =\n pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     let mut wr = MemWriter::new();\n     let stats = Stats {\n-        inline_bytes: 0,\n-        attr_bytes: 0,\n-        dep_bytes: 0,\n-        lang_item_bytes: 0,\n-        native_lib_bytes: 0,\n-        impl_bytes: 0,\n-        misc_bytes: 0,\n-        item_bytes: 0,\n-        index_bytes: 0,\n-        zero_bytes: 0,\n-        total_bytes: 0,\n-        n_inlines: 0\n+        inline_bytes: Cell::new(0),\n+        attr_bytes: Cell::new(0),\n+        dep_bytes: Cell::new(0),\n+        lang_item_bytes: Cell::new(0),\n+        native_lib_bytes: Cell::new(0),\n+        impl_bytes: Cell::new(0),\n+        misc_bytes: Cell::new(0),\n+        item_bytes: Cell::new(0),\n+        index_bytes: Cell::new(0),\n+        zero_bytes: Cell::new(0),\n+        total_bytes: Cell::new(0),\n     };\n     let EncodeParams {\n         item_symbols,\n@@ -1822,7 +1819,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         ..\n     } = parms;\n     let type_abbrevs = @RefCell::new(HashMap::new());\n-    let stats = @mut stats;\n+    let stats = @stats;\n     let ecx = EncodeContext {\n         diag: diag,\n         tcx: tcx,\n@@ -1844,65 +1841,65 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     let mut i = ebml_w.writer.tell();\n     let crate_attrs = synthesize_crate_attrs(&ecx, crate);\n     encode_attributes(&mut ebml_w, crate_attrs);\n-    ecx.stats.attr_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.attr_bytes.set(ebml_w.writer.tell() - i);\n \n     i = ebml_w.writer.tell();\n     encode_crate_deps(&ecx, &mut ebml_w, ecx.cstore);\n-    ecx.stats.dep_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.dep_bytes.set(ebml_w.writer.tell() - i);\n \n     // Encode the language items.\n     i = ebml_w.writer.tell();\n     encode_lang_items(&ecx, &mut ebml_w);\n-    ecx.stats.lang_item_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.lang_item_bytes.set(ebml_w.writer.tell() - i);\n \n     // Encode the native libraries used\n     i = ebml_w.writer.tell();\n     encode_native_libraries(&ecx, &mut ebml_w);\n-    ecx.stats.native_lib_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.native_lib_bytes.set(ebml_w.writer.tell() - i);\n \n     // Encode the def IDs of impls, for coherence checking.\n     i = ebml_w.writer.tell();\n     encode_impls(&ecx, crate, &mut ebml_w);\n-    ecx.stats.impl_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.impl_bytes.set(ebml_w.writer.tell() - i);\n \n     // Encode miscellaneous info.\n     i = ebml_w.writer.tell();\n     encode_misc_info(&ecx, crate, &mut ebml_w);\n-    ecx.stats.misc_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.misc_bytes.set(ebml_w.writer.tell() - i);\n \n     // Encode and index the items.\n     ebml_w.start_tag(tag_items);\n     i = ebml_w.writer.tell();\n     let items_index = encode_info_for_items(&ecx, &mut ebml_w, crate);\n-    ecx.stats.item_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.item_bytes.set(ebml_w.writer.tell() - i);\n \n     i = ebml_w.writer.tell();\n     let items_buckets = create_index(items_index);\n     encode_index(&mut ebml_w, items_buckets, write_i64);\n-    ecx.stats.index_bytes = ebml_w.writer.tell() - i;\n+    ecx.stats.index_bytes.set(ebml_w.writer.tell() - i);\n     ebml_w.end_tag();\n \n-    ecx.stats.total_bytes = ebml_w.writer.tell();\n+    ecx.stats.total_bytes.set(ebml_w.writer.tell());\n \n     if (tcx.sess.meta_stats()) {\n         for e in ebml_w.writer.inner_ref().iter() {\n             if *e == 0 {\n-                ecx.stats.zero_bytes += 1;\n+                ecx.stats.zero_bytes.set(ecx.stats.zero_bytes.get() + 1);\n             }\n         }\n \n         println(\"metadata stats:\");\n-        println!(\"    inline bytes: {}\", ecx.stats.inline_bytes);\n-        println!(\" attribute bytes: {}\", ecx.stats.attr_bytes);\n-        println!(\"       dep bytes: {}\", ecx.stats.dep_bytes);\n-        println!(\" lang item bytes: {}\", ecx.stats.lang_item_bytes);\n-        println!(\"    native bytes: {}\", ecx.stats.native_lib_bytes);\n-        println!(\"      impl bytes: {}\", ecx.stats.impl_bytes);\n-        println!(\"      misc bytes: {}\", ecx.stats.misc_bytes);\n-        println!(\"      item bytes: {}\", ecx.stats.item_bytes);\n-        println!(\"     index bytes: {}\", ecx.stats.index_bytes);\n-        println!(\"      zero bytes: {}\", ecx.stats.zero_bytes);\n-        println!(\"     total bytes: {}\", ecx.stats.total_bytes);\n+        println!(\"    inline bytes: {}\", ecx.stats.inline_bytes.get());\n+        println!(\" attribute bytes: {}\", ecx.stats.attr_bytes.get());\n+        println!(\"       dep bytes: {}\", ecx.stats.dep_bytes.get());\n+        println!(\" lang item bytes: {}\", ecx.stats.lang_item_bytes.get());\n+        println!(\"    native bytes: {}\", ecx.stats.native_lib_bytes.get());\n+        println!(\"      impl bytes: {}\", ecx.stats.impl_bytes.get());\n+        println!(\"      misc bytes: {}\", ecx.stats.misc_bytes.get());\n+        println!(\"      item bytes: {}\", ecx.stats.item_bytes.get());\n+        println!(\"     index bytes: {}\", ecx.stats.index_bytes.get());\n+        println!(\"      zero bytes: {}\", ecx.stats.zero_bytes.get());\n+        println!(\"     total bytes: {}\", ecx.stats.total_bytes.get());\n     }\n \n     // Pad this, since something (LLVM, presumably) is cutting off the"}]}