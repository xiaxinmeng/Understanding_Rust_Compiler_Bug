{"sha": "d71410757d1e44dbcfb83ad2cfe75d687c695b91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MTQxMDc1N2QxZTQ0ZGJjZmI4M2FkMmNmZTc1ZDY4N2M2OTViOTE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-17T19:59:00Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-23T11:44:23Z"}, "message": "Add VecMap::get_value_matching and assert if > 1 element\n\nOtherwise is a bug that we want to uncover.", "tree": {"sha": "d2513ff08f27d9e965ef97b7ba46f3d4c40e476c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2513ff08f27d9e965ef97b7ba46f3d4c40e476c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d71410757d1e44dbcfb83ad2cfe75d687c695b91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmD6q5cACgkQgTGiTgx5\n769atQ/+KFgZU3szEsog/7JSxMv1/G1iC2DCEu0DuhjW/w2/VRaOx0I8wT/figdh\nIl294lW4/gZI8xQTIDVIy00e6NXStTn8yErls9p/G0MFqn4R8UbWQECTl3PgltY3\n9HJPPbSkMqY1ywFn0Mpjmjr5Hp1wXPVYO11roCFVGOmvIuIOYUgGbQNKR0MCP257\nPQG3KMBBDN3VeV1d7AgS3pQnTdaDsQxGZSASqli9Y5PAaP6hQD3FSEvXU1jbZLBp\nZywyIBarbctedjcyGcr6/9OQuMybz5SRWihwPVpC7A+CIef0b37pPumWnP/L0bey\nfwu9aeXNEAztaFuiL3rRAk1VV1cX2kZXk91tXpZF+5+dIPO615AlXzsJnXHVDfIG\nc7YA4ZK7yc7jO0KkoxLPNN5dKBDh8wiWnnHl/lXm2n2mJxfjeBeou2bi2Vxow/k9\n5gVkXCgw26AaDuAeXRMK1AibXpQnZ4TcPG8Qvt6126IdX61syLxMnwB0ZHvUmsZS\nItdN5QrY/Ydjhqzb3dDl+srQU0xOMqWcALyiPMidr9d0ea8J4p0RnX0sVXXEW6QC\nUlxvrI4fKB71+ailBTEIBVpPvwaoHyAjzJr24ILh/cic7rAGSdy/dFhcYVjMxXG0\nVIKSutfLy6oPOY1M+FUVROPKw0Ae/sCYzp6CW+wv4yoJuZGycbM=\n=lRtb\n-----END PGP SIGNATURE-----", "payload": "tree d2513ff08f27d9e965ef97b7ba46f3d4c40e476c\nparent b2b7c859c1aae39d26884e760201f5e6c7feeff9\nauthor Santiago Pastorino <spastorino@gmail.com> 1623959940 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1627040663 -0300\n\nAdd VecMap::get_value_matching and assert if > 1 element\n\nOtherwise is a bug that we want to uncover.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d71410757d1e44dbcfb83ad2cfe75d687c695b91", "html_url": "https://github.com/rust-lang/rust/commit/d71410757d1e44dbcfb83ad2cfe75d687c695b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d71410757d1e44dbcfb83ad2cfe75d687c695b91/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b7c859c1aae39d26884e760201f5e6c7feeff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b7c859c1aae39d26884e760201f5e6c7feeff9", "html_url": "https://github.com/rust-lang/rust/commit/b2b7c859c1aae39d26884e760201f5e6c7feeff9"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "cc7ec9432faed31803376bbc5113cebd642229ca", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d71410757d1e44dbcfb83ad2cfe75d687c695b91/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71410757d1e44dbcfb83ad2cfe75d687c695b91/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=d71410757d1e44dbcfb83ad2cfe75d687c695b91", "patch": "@@ -1,4 +1,5 @@\n use std::borrow::Borrow;\n+use std::fmt::Debug;\n use std::iter::FromIterator;\n use std::slice::Iter;\n use std::vec::IntoIter;\n@@ -12,7 +13,8 @@ pub struct VecMap<K, V>(Vec<(K, V)>);\n \n impl<K, V> VecMap<K, V>\n where\n-    K: PartialEq,\n+    K: Debug + PartialEq,\n+    V: Debug,\n {\n     pub fn new() -> Self {\n         VecMap(Default::default())\n@@ -37,14 +39,31 @@ where\n         self.0.iter().find(|(key, _)| k == key.borrow()).map(|elem| &elem.1)\n     }\n \n-    /// Returns the value corresponding to the supplied predicate filter.\n+    /// Returns the any value corresponding to the supplied predicate filter.\n     ///\n     /// The supplied predicate will be applied to each (key, value) pair and it will return a\n     /// reference to the values where the predicate returns `true`.\n-    pub fn get_by(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n+    pub fn any_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n         self.0.iter().find(|kv| predicate(kv)).map(|elem| &elem.1)\n     }\n \n+    /// Returns the value corresponding to the supplied predicate filter. It crashes if there's\n+    /// more than one matching element.\n+    ///\n+    /// The supplied predicate will be applied to each (key, value) pair and it will return a\n+    /// reference to the value where the predicate returns `true`.\n+    pub fn get_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n+        let mut filter = self.0.iter().filter(|kv| predicate(kv));\n+        let (_, value) = filter.next()?;\n+        // This should return just one element, otherwise it's a bug\n+        assert!(\n+            filter.next().is_none(),\n+            \"Collection {:?} should have just one matching element\",\n+            self\n+        );\n+        Some(value)\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type,\n@@ -131,7 +150,7 @@ impl<K, V> IntoIterator for VecMap<K, V> {\n     }\n }\n \n-impl<K: PartialEq, V> Extend<(K, V)> for VecMap<K, V> {\n+impl<K: PartialEq + Debug, V: Debug> Extend<(K, V)> for VecMap<K, V> {\n     fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iter: I) {\n         for (k, v) in iter {\n             self.insert(k, v);"}, {"sha": "8029a7dc0e3dddacb908d21203dacb9d6cf5d0ff", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d71410757d1e44dbcfb83ad2cfe75d687c695b91/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71410757d1e44dbcfb83ad2cfe75d687c695b91/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=d71410757d1e44dbcfb83ad2cfe75d687c695b91", "patch": "@@ -364,7 +364,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner.expect_local())\n                         .concrete_opaque_types\n-                        .get_by(|(key, _)| key.def_id == def_id.to_def_id())\n+                        .get_value_matching(|(key, _)| key.def_id == def_id.to_def_id())\n                         .map(|concrete_ty| *concrete_ty)\n                         .unwrap_or_else(|| {\n                             tcx.sess.delay_span_bug(\n@@ -531,7 +531,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 .tcx\n                 .typeck(def_id)\n                 .concrete_opaque_types\n-                .get_by(|(key, _)| key.def_id == self.def_id)\n+                .any_value_matching(|(key, _)| key.def_id == self.def_id)\n                 .is_none()\n             {\n                 debug!(\"no constraints in typeck results\");"}]}