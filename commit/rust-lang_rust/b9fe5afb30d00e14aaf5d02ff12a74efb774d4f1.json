{"sha": "b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "node_id": "C_kwDOAAsO6NoAKGI5ZmU1YWZiMzBkMDBlMTRhYWY1ZDAyZmYxMmE3NGVmYjc3NGQ0ZjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-23T12:10:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-23T12:24:42Z"}, "message": "Add a 'open server logs' button to the error notification", "tree": {"sha": "88b5937a91eeaea0eb80c66aa881412bcf3f55cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b5937a91eeaea0eb80c66aa881412bcf3f55cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "html_url": "https://github.com/rust-lang/rust/commit/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84239a14543b5a22a9662bc926c9ae033067c977", "url": "https://api.github.com/repos/rust-lang/rust/commits/84239a14543b5a22a9662bc926c9ae033067c977", "html_url": "https://github.com/rust-lang/rust/commit/84239a14543b5a22a9662bc926c9ae033067c977"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "8ea161dbdc4f366284fffc1dd42423a0d1863c56", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "patch": "@@ -989,6 +989,10 @@ impl Config {\n         self.experimental(\"codeActionGroup\")\n     }\n \n+    pub fn open_server_logs(&self) -> bool {\n+        self.experimental(\"openServerLogs\")\n+    }\n+\n     pub fn server_status_notification(&self) -> bool {\n         self.experimental(\"serverStatusNotification\")\n     }"}, {"sha": "08b2c837de370bf9adc86a0ba48efae98fbd3050", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "patch": "@@ -151,6 +151,13 @@ impl Notification for ClearFlycheck {\n     const METHOD: &'static str = \"rust-analyzer/clearFlycheck\";\n }\n \n+pub enum OpenServerLogs {}\n+\n+impl Notification for OpenServerLogs {\n+    type Params = ();\n+    const METHOD: &'static str = \"rust-analyzer/openServerLogs\";\n+}\n+\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct RunFlycheckParams {"}, {"sha": "baa77a005e226545ec8ae5ce8bcb38c64d05182c", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "patch": "@@ -2,12 +2,13 @@\n use std::{mem, ops::Range, sync::Arc};\n \n use lsp_server::Notification;\n+use lsp_types::request::Request;\n \n use crate::{\n     from_proto,\n     global_state::GlobalState,\n     line_index::{LineEndings, LineIndex, PositionEncoding},\n-    LspError,\n+    lsp_ext, LspError,\n };\n \n pub(crate) fn invalid_params_error(message: String) -> LspError {\n@@ -46,20 +47,47 @@ impl GlobalState {\n     /// If `additional_info` is [`Some`], appends a note to the notification telling to check the logs.\n     /// This will always log `message` + `additional_info` to the server's error log.\n     pub(crate) fn show_and_log_error(&mut self, message: String, additional_info: Option<String>) {\n-        let mut message = message;\n         match additional_info {\n             Some(additional_info) => {\n-                tracing::error!(\"{}\\n\\n{}\", &message, &additional_info);\n-                if tracing::enabled!(tracing::Level::ERROR) {\n-                    message.push_str(\"\\n\\nCheck the server logs for additional info.\");\n+                tracing::error!(\"{}:\\n{}\", &message, &additional_info);\n+                match self.config.open_server_logs() && tracing::enabled!(tracing::Level::ERROR) {\n+                    true => self.send_request::<lsp_types::request::ShowMessageRequest>(\n+                        lsp_types::ShowMessageRequestParams {\n+                            typ: lsp_types::MessageType::ERROR,\n+                            message,\n+                            actions: Some(vec![lsp_types::MessageActionItem {\n+                                title: \"Open server logs\".to_owned(),\n+                                properties: Default::default(),\n+                            }]),\n+                        },\n+                        |this, resp| {\n+                            let lsp_server::Response { error: None, result: Some(result), .. } = resp\n+                            else { return };\n+                            if let Ok(Some(_item)) = crate::from_json::<\n+                                <lsp_types::request::ShowMessageRequest as lsp_types::request::Request>::Result,\n+                            >(\n+                                lsp_types::request::ShowMessageRequest::METHOD, &result\n+                            ) {\n+                                this.send_notification::<lsp_ext::OpenServerLogs>(());\n+                            }\n+                        },\n+                    ),\n+                    false => self.send_notification::<lsp_types::notification::ShowMessage>(\n+                        lsp_types::ShowMessageParams {\n+                            typ: lsp_types::MessageType::ERROR,\n+                            message,\n+                        },\n+                    ),\n                 }\n             }\n-            None => tracing::error!(\"{}\", &message),\n-        }\n+            None => {\n+                tracing::error!(\"{}\", &message);\n \n-        self.send_notification::<lsp_types::notification::ShowMessage>(\n-            lsp_types::ShowMessageParams { typ: lsp_types::MessageType::ERROR, message },\n-        )\n+                self.send_notification::<lsp_types::notification::ShowMessage>(\n+                    lsp_types::ShowMessageParams { typ: lsp_types::MessageType::ERROR, message },\n+                );\n+            }\n+        }\n     }\n \n     /// rust-analyzer is resilient -- if it fails, this doesn't usually affect\n@@ -77,7 +105,7 @@ impl GlobalState {\n         let from_source_build = option_env!(\"POKE_RA_DEVS\").is_some();\n         let profiling_enabled = std::env::var(\"RA_PROFILE\").is_ok();\n         if from_source_build || profiling_enabled {\n-            self.show_message(lsp_types::MessageType::ERROR, message)\n+            self.show_and_log_error(message, None);\n         }\n     }\n "}, {"sha": "a794e866181df7fb120f1e76381a07abdaad6c52", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: d296ce1226e3568d\n+lsp_ext.rs hash: ec29403e67dfd15b\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "9335e9abb30dd030318e2d8cd46222b20c8fd607", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "patch": "@@ -316,6 +316,7 @@ class ExperimentalFeatures implements lc.StaticFeature {\n         caps.hoverActions = true;\n         caps.serverStatusNotification = true;\n         caps.colorDiagnosticOutput = true;\n+        caps.openServerLogs = true;\n         caps.commands = {\n             commands: [\n                 \"rust-analyzer.runSingle\","}, {"sha": "1860924c6de4e9ad9e400b00c868ca32b5838987", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "patch": "@@ -187,6 +187,11 @@ export class Ctx {\n                     this.setServerStatus(params)\n                 )\n             );\n+            this.pushClientCleanup(\n+                this._client.onNotification(ra.openServerLogs, () => {\n+                    this.outputChannel!.show();\n+                })\n+            );\n         }\n         return this._client;\n     }"}, {"sha": "6ddf83799c03a280dc7f1d690b89439967435e42", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=b9fe5afb30d00e14aaf5d02ff12a74efb774d4f1", "patch": "@@ -21,6 +21,7 @@ export interface ServerStatusParams {\n export const serverStatus = new lc.NotificationType<ServerStatusParams>(\n     \"experimental/serverStatus\"\n );\n+export const openServerLogs = new lc.NotificationType0(\"rust-analyzer/openServerLogs\");\n \n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n "}]}