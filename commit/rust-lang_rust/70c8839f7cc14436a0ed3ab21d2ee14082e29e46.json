{"sha": "70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzg4MzlmN2NjMTQ0MzZhMGVkM2FiMjFkMmVlMTQwODJlMjllNDY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-07-31T23:40:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T01:44:36Z"}, "message": "Fix fallout after rebase", "tree": {"sha": "b076067c0f2d8709d6e7d3aa77b80bac51b5060e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b076067c0f2d8709d6e7d3aa77b80bac51b5060e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "html_url": "https://github.com/rust-lang/rust/commit/70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "html_url": "https://github.com/rust-lang/rust/commit/c28ce3e4ca021aea5ca25227c0e46d9b47095db6"}], "stats": {"total": 601, "additions": 50, "deletions": 551}, "files": [{"sha": "b3577bea31381ee239b5ea4e3d7a555794d5b379", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -1207,7 +1207,7 @@ pub fn may_define_opaque_type(\n     // Syntactically, we are allowed to define the concrete type if:\n     let res = hir_id == scope;\n     trace!(\n-        \"may_define_existential_type(def={:?}, opaque_node={:?}) = {}\",\n+        \"may_define_opaque_type(def={:?}, opaque_node={:?}) = {}\",\n         tcx.hir().get(hir_id),\n         tcx.hir().get(opaque_hir_id),\n         res"}, {"sha": "45ca5cfebfcf1c77650afa6a980883707000c81b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -221,7 +221,7 @@ impl AssocItem {\n                 tcx.fn_sig(self.def_id).skip_binder().to_string()\n             }\n             ty::AssocKind::Type => format!(\"type {};\", self.ident),\n-            // FIXME(trait_alias_impl_trait): we should print bounds here too.\n+            // FIXME(type_alias_impl_trait): we should print bounds here too.\n             ty::AssocKind::OpaqueTy => format!(\"type {};\", self.ident),\n             ty::AssocKind::Const => {\n                 format!(\"const {}: {:?};\", self.ident, tcx.type_of(self.def_id))"}, {"sha": "abb0bcad0dd610336ed368edfa8b189a1f1f4502", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -1713,7 +1713,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             // For example, this code:\n             // ```\n             // fn foo() {\n-            //     existential type Blah: Debug;\n+            //     type Blah = impl Debug;\n             //     let my_closure = || -> Blah { true };\n             // }\n             // ```"}, {"sha": "cf51a4eb5a5be862e799e720c645d61d99b9e463", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -144,7 +144,7 @@ impl ItemType {\n             ItemType::AssocConst      => \"associatedconstant\",\n             ItemType::ForeignType     => \"foreigntype\",\n             ItemType::Keyword         => \"keyword\",\n-            ItemType::OpaqueTy     => \"opaque\",\n+            ItemType::OpaqueTy        => \"opaque\",\n             ItemType::ProcAttribute   => \"attr\",\n             ItemType::ProcDerive      => \"derive\",\n             ItemType::TraitAlias      => \"traitalias\","}, {"sha": "05176848b01fa5403606f075043f7d2669d0d236", "filename": "src/test/ui/async-await/await-macro.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,230 +0,0 @@\n-// run-pass\n-\n-// edition:2018\n-// aux-build:arc_wake.rs\n-\n-#![feature(async_await, async_closure, await_macro)]\n-\n-extern crate arc_wake;\n-\n-use std::pin::Pin;\n-use std::future::Future;\n-use std::sync::{\n-    Arc,\n-    atomic::{self, AtomicUsize},\n-};\n-use std::task::{Context, Poll};\n-use arc_wake::ArcWake;\n-\n-struct Counter {\n-    wakes: AtomicUsize,\n-}\n-\n-impl ArcWake for Counter {\n-    fn wake(self: Arc<Self>) {\n-        Self::wake_by_ref(&self)\n-    }\n-    fn wake_by_ref(arc_self: &Arc<Self>) {\n-        arc_self.wakes.fetch_add(1, atomic::Ordering::SeqCst);\n-    }\n-}\n-\n-struct WakeOnceThenComplete(bool);\n-\n-fn wake_and_yield_once() -> WakeOnceThenComplete { WakeOnceThenComplete(false) }\n-\n-impl Future for WakeOnceThenComplete {\n-    type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n-        if self.0 {\n-            Poll::Ready(())\n-        } else {\n-            cx.waker().wake_by_ref();\n-            self.0 = true;\n-            Poll::Pending\n-        }\n-    }\n-}\n-\n-fn async_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(wake_and_yield_once());\n-        x\n-    }\n-}\n-\n-fn async_block_with_borrow_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        let future = async {\n-            await!(wake_and_yield_once());\n-            x\n-        };\n-        await!(future)\n-    }\n-}\n-\n-fn async_closure(x: u8) -> impl Future<Output = u8> {\n-    (async move |x: u8| -> u8 {\n-        await!(wake_and_yield_once());\n-        x\n-    })(x)\n-}\n-\n-fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    (unsafe {\n-        async move |x: u8| unsafe_fn(await!(unsafe_async_fn(x)))\n-    })(x)\n-}\n-\n-async fn async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn generic_async_fn<T>(x: T) -> T {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn async_fn_with_borrow(x: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-async fn async_fn_with_borrow_named_lifetime<'a>(x: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_impl_future_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-/* FIXME(cramertj) support when `type T<'a, 'b> = impl;` works\n-async fn async_fn_multiple_args(x: &u8, _y: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-*/\n-\n-async fn async_fn_multiple_args_named_lifetime<'a>(x: &'a u8, _y: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(async_fn_with_borrow_named_lifetime(&y))\n-    }\n-}\n-\n-async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-unsafe fn unsafe_fn(x: u8) -> u8 {\n-    x\n-}\n-\n-fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    unsafe {\n-        async move {\n-            unsafe_fn(await!(unsafe_async_fn(x)))\n-        }\n-    }\n-}\n-\n-struct Foo;\n-\n-trait Bar {\n-    fn foo() {}\n-}\n-\n-impl Foo {\n-    async fn async_assoc_item(x: u8) -> u8 {\n-        unsafe {\n-            await!(unsafe_async_fn(x))\n-        }\n-    }\n-\n-    async unsafe fn async_unsafe_assoc_item(x: u8) -> u8 {\n-        await!(unsafe_async_fn(x))\n-    }\n-}\n-\n-fn test_future_yields_once_then_returns<F, Fut>(f: F)\n-where\n-    F: FnOnce(u8) -> Fut,\n-    Fut: Future<Output = u8>,\n-{\n-    let mut fut = Box::pin(f(9));\n-    let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n-    let waker = ArcWake::into_waker(counter.clone());\n-    let mut cx = Context::from_waker(&waker);\n-    assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Pending, fut.as_mut().poll(&mut cx));\n-    assert_eq!(1, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Ready(9), fut.as_mut().poll(&mut cx));\n-}\n-\n-fn main() {\n-    macro_rules! test {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns($fn_name);\n-        )* }\n-    }\n-\n-    macro_rules! test_with_borrow {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns(|x| {\n-                async move {\n-                    await!($fn_name(&x))\n-                }\n-            });\n-        )* }\n-    }\n-\n-    test! {\n-        async_block,\n-        async_nonmove_block,\n-        async_closure,\n-        async_closure_in_unsafe_block,\n-        async_fn,\n-        generic_async_fn,\n-        async_fn_with_internal_borrow,\n-        async_block_in_unsafe_block,\n-        Foo::async_assoc_item,\n-        |x| {\n-            async move {\n-                unsafe { await!(unsafe_async_fn(x)) }\n-            }\n-        },\n-        |x| {\n-            async move {\n-                unsafe { await!(Foo::async_unsafe_assoc_item(x)) }\n-            }\n-        },\n-    }\n-    test_with_borrow! {\n-        async_block_with_borrow_named_lifetime,\n-        async_fn_with_borrow,\n-        async_fn_with_borrow_named_lifetime,\n-        async_fn_with_impl_future_named_lifetime,\n-        |x| {\n-            async move {\n-                await!(async_fn_multiple_args_named_lifetime(x, x))\n-            }\n-        },\n-    }\n-}"}, {"sha": "b2bbc1f1549985e135fe1a6713fba5806edd97a7", "filename": "src/test/ui/existential-type/issue-52843-closure-constrain.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential-type%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential-type%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential-type%2Fissue-52843-closure-constrain.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,12 +0,0 @@\n-// Checks to ensure that we properly detect when a closure constrains an existential type\n-#![feature(existential_type)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {\n-    existential type Existential: Debug;\n-    fn _unused() -> Existential { String::new() }\n-    //~^ ERROR: concrete type differs from previous defining existential type use\n-    let null = || -> Existential { 0 };\n-    println!(\"{:?}\", null());\n-}"}, {"sha": "424d65a193c92de7c77729ce454df3ab4ca3c5c9", "filename": "src/test/ui/existential-type/issue-52843-closure-constrain.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential-type%2Fissue-52843-closure-constrain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential-type%2Fissue-52843-closure-constrain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential-type%2Fissue-52843-closure-constrain.stderr?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,20 +0,0 @@\n-error: concrete type differs from previous defining existential type use\n-  --> $DIR/issue-52843-closure-constrain.rs:8:5\n-   |\n-LL |     fn _unused() -> Existential { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, got `std::string::String`\n-   |\n-note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:6:1\n-   |\n-LL | / fn main() {\n-LL | |     existential type Existential: Debug;\n-LL | |     fn _unused() -> Existential { String::new() }\n-LL | |\n-LL | |     let null = || -> Existential { 0 };\n-LL | |     println!(\"{:?}\", null());\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "165e320be5e9a1a0fd0b6b14528b20cbca7e14ec", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,14 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {}\n-\n-// test that unused generic parameters are ok\n-type Two<T, U> = impl Debug;\n-//~^ could not find defining uses\n-\n-fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR defining opaque type use restricts opaque type\n-    t\n-}"}, {"sha": "e1794034e20dd420e6dc594af5c8922e574e2f43", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,17 +0,0 @@\n-error: defining opaque type use restricts opaque type by using the generic parameter `T` twice\n-  --> $DIR/generic_duplicate_param_use.rs:11:1\n-   |\n-LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |\n-LL | |     t\n-LL | | }\n-   | |_^\n-\n-error: could not find defining uses\n-  --> $DIR/generic_duplicate_param_use.rs:8:1\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "0adce817c5c3759c7a3652195a93eb3a52122b1b", "filename": "src/test/ui/existential_types/generic_duplicate_param_use2.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,17 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {}\n-\n-// test that unused generic parameters are ok\n-type Two<T, U> = impl Debug;\n-\n-fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ defining opaque type use restricts opaque type\n-    t\n-}\n-\n-fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-    t\n-}"}, {"sha": "8d3e7f9f424979f154e41a547049322a920a6769", "filename": "src/test/ui/existential_types/generic_duplicate_param_use3.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,22 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {}\n-\n-// test that unused generic parameters are ok\n-type Two<T, U> = impl Debug;\n-\n-fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ defining opaque type use restricts opaque type\n-    t\n-}\n-\n-fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-    t\n-}\n-\n-fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n-//~^ concrete type's generic parameters differ from previous defining use\n-    u\n-}"}, {"sha": "65f7d7f485d495803fccae67f24d283d77f25473", "filename": "src/test/ui/existential_types/generic_duplicate_param_use4.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,17 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {}\n-\n-// test that unused generic parameters are ok\n-type Two<T, U> = impl Debug;\n-\n-fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR defining opaque type use restricts opaque type\n-    t\n-}\n-\n-fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n-    u\n-}"}, {"sha": "92ba50ae6cf1fe4901e0ebec50dee96eef04254e", "filename": "src/test/ui/existential_types/issue-58887.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,23 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-trait UnwrapItemsExt {\n-    type Iter;\n-    fn unwrap_items(self) -> Self::Iter;\n-}\n-\n-impl<I, T, E> UnwrapItemsExt for I\n-where\n-    I: Iterator<Item = Result<T, E>>,\n-    E: std::fmt::Debug,\n-{\n-    type Iter = impl Iterator<Item = T>;\n-    //~^ ERROR: could not find defining uses\n-\n-    fn unwrap_items(self) -> Self::Iter {\n-    //~^ ERROR: type parameter `T` is part of concrete type\n-    //~| ERROR: type parameter `E` is part of concrete type\n-        self.map(|x| x.unwrap())\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "7e2895711d34550f44fba1094e38f97adcded536", "filename": "src/test/ui/existential_types/issue-58887.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.stderr?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,30 +0,0 @@\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-58887.rs:16:41\n-   |\n-LL |       fn unwrap_items(self) -> Self::Iter {\n-   |  _________________________________________^\n-LL | |\n-LL | |\n-LL | |         self.map(|x| x.unwrap())\n-LL | |     }\n-   | |_____^\n-\n-error: type parameter `E` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-58887.rs:16:41\n-   |\n-LL |       fn unwrap_items(self) -> Self::Iter {\n-   |  _________________________________________^\n-LL | |\n-LL | |\n-LL | |         self.map(|x| x.unwrap())\n-LL | |     }\n-   | |_____^\n-\n-error: could not find defining uses\n-  --> $DIR/issue-58887.rs:13:5\n-   |\n-LL |     type Iter = impl Iterator<Item = T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "50b9d1ac7933c8754775452911e27f4a957b7c8a", "filename": "src/test/ui/existential_types/issue-60371.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,15 +0,0 @@\n-trait Bug {\n-    type Item: Bug;\n-\n-    const FUN: fn() -> Self::Item;\n-}\n-\n-impl Bug for &() {\n-    type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n-    //~^ ERROR the trait bound `(): Bug` is not satisfied\n-    //~^^ ERROR could not find defining uses\n-\n-    const FUN: fn() -> Self::Item = || ();\n-}\n-\n-fn main() {}"}, {"sha": "1e9b12ebc39aaeff3c121c50a196b3172833792d", "filename": "src/test/ui/existential_types/issue-60371.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.stderr?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,29 +0,0 @@\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-60371.rs:8:5\n-   |\n-LL |     type Item = impl Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:8:5\n-   |\n-LL |     type Item = impl Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Bug` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <&() as Bug>\n-   = note: the return type of a function must have a statically known size\n-\n-error: could not find defining uses\n-  --> $DIR/issue-60371.rs:8:5\n-   |\n-LL |     type Item = impl Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0277, E0658.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "c9ca504f780979c8631c7239339cf6d6008fc3e5", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,13 +0,0 @@\n-// Issue 52985: user code provides no use case that allows a type alias `impl Trait`\n-// We now emit a 'could not find defining uses' error\n-\n-#![feature(type_alias_impl_trait)]\n-\n-type Foo = impl Copy; //~ could not find defining uses\n-\n-// make compiler happy about using 'Foo'\n-fn bar(x: Foo) -> Foo { x }\n-\n-fn main() {\n-    let _: Foo = std::mem::transmute(0u8);\n-}"}, {"sha": "444e6e8214ff283026b8b9864591f73493fae681", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:6:1\n-   |\n-LL | type Foo = impl Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "ca00e582d3442ffef85e0f5ce863992bd19c0f9a", "filename": "src/test/ui/existential_types/not_a_defining_use.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,40 +0,0 @@\n-#![feature(type_alias_impl_trait)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {}\n-\n-type Two<T, U> = impl Debug;\n-\n-fn two<T: Debug>(t: T) -> Two<T, u32> {\n-    //~^ ERROR defining opaque type use does not fully define opaque type\n-    (t, 4i8)\n-}\n-\n-fn three<T: Debug, U>(t: T) -> Two<T, U> {\n-    (t, 5i8)\n-}\n-\n-trait Bar {\n-    type Blub: Debug;\n-    const FOO: Self::Blub;\n-}\n-\n-impl Bar for u32 {\n-    type Blub = i32;\n-    const FOO: i32 = 42;\n-}\n-\n-// this should work! But it requires `two` and `three` not to be defining uses,\n-// just restricting uses\n-fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> { //~ concrete type differs from previous\n-    (t, <U as Bar>::FOO)\n-}\n-\n-fn is_sync<T: Sync>() {}\n-\n-fn asdfl() {\n-    //FIXME(oli-obk): these currently cause cycle errors\n-    //is_sync::<Two<i32, u32>>();\n-    //is_sync::<Two<i32, *const i32>>();\n-}"}, {"sha": "7bb8939ccf5a282480fb8863e54125e2dbe22034", "filename": "src/test/ui/existential_types/not_a_defining_use.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28ce3e4ca021aea5ca25227c0e46d9b47095db6/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr?ref=c28ce3e4ca021aea5ca25227c0e46d9b47095db6", "patch": "@@ -1,27 +0,0 @@\n-error: defining opaque type use does not fully define opaque type\n-  --> $DIR/not_a_defining_use.rs:9:1\n-   |\n-LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n-LL | |\n-LL | |     (t, 4i8)\n-LL | | }\n-   | |_^\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/not_a_defining_use.rs:30:1\n-   |\n-LL | / fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n-LL | |     (t, <U as Bar>::FOO)\n-LL | | }\n-   | |_^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n-   |\n-note: previous use here\n-  --> $DIR/not_a_defining_use.rs:14:1\n-   |\n-LL | / fn three<T: Debug, U>(t: T) -> Two<T, U> {\n-LL | |     (t, 5i8)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "5b634e3106e3b85ff2eb0e77ceaaa7f795ac5831", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -81,9 +81,9 @@ mod impl_trait_in_bindings {\n }\n \n /////////////////////////////////////////////\n-// The same applied to `existential type`s\n+// The same applied to `type Foo = impl Bar`s\n \n-mod existential_types {\n+mod opaque_types {\n     trait Implemented {\n         type Assoc;\n     }"}, {"sha": "15e942970048ffc83584394480f49e00f312c760", "filename": "src/test/ui/traits/trait-bounds-in-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-in-arc.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(unused_must_use)]\n-// Tests that a heterogeneous list of existential types can be put inside an Arc\n+// Tests that a heterogeneous list of opaque types can be put inside an Arc\n // and shared between threads as long as all types fulfill Send.\n \n // ignore-emscripten no threads support"}, {"sha": "a102d16078bed605d43bf140fb6de1dceff3ed55", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -0,0 +1,13 @@\n+// Checks to ensure that we properly detect when a closure constrains an opaque type\n+\n+#![feature(type_alias_impl_trait)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {\n+    type Opaque = impl Debug;\n+    fn _unused() -> Opaque { String::new() }\n+    //~^ ERROR: concrete type differs from previous defining opaque type use\n+    let null = || -> Opaque { 0 };\n+    println!(\"{:?}\", null());\n+}"}, {"sha": "c994eb5986cb2c90defd8a78feaeb3948ebcb252", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -0,0 +1,20 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-52843-closure-constrain.rs:9:5\n+   |\n+LL |     fn _unused() -> Opaque { String::new() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, got `std::string::String`\n+   |\n+note: previous use here\n+  --> $DIR/issue-52843-closure-constrain.rs:7:1\n+   |\n+LL | / fn main() {\n+LL | |     type Opaque = impl Debug;\n+LL | |     fn _unused() -> Opaque { String::new() }\n+LL | |\n+LL | |     let null = || -> Opaque { 0 };\n+LL | |     println!(\"{:?}\", null());\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e7f93732430e7e4542684add6f4793fe5d59bde8", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -1,10 +1,10 @@\n // check-pass\n \n-#![feature(const_fn, generators, generator_trait, existential_type)]\n+#![feature(const_fn, generators, generator_trait, type_alias_impl_trait)]\n \n use std::ops::Generator;\n \n-existential type GenOnce<Y, R>: Generator<Yield = Y, Return = R>;\n+type GenOnce<Y, R> = impl Generator<Yield = Y, Return = R>;\n \n const fn const_generator<Y, R>(yielding: Y, returning: R) -> GenOnce<Y, R> {\n     move || {", "previous_filename": "src/test/ui/existential_types/issue-53678-generator-and-const-fn.rs"}, {"sha": "7d462f057cb84eefc7b8702e9af92fb8bd85f5ad", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -1,8 +1,8 @@\n // check-pass\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n-existential type Debuggable: core::fmt::Debug;\n+type Debuggable = impl core::fmt::Debug;\n \n static mut TEST: Option<Debuggable> = None;\n ", "previous_filename": "src/test/ui/existential_types/issue-60407.rs"}, {"sha": "91c4576597ea469117248c86f19bbcd5edc16cad", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -1,11 +1,11 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n trait IterBits {\n     type BitsIter: Iterator<Item = u8>;\n     fn iter_bits(self, n: u8) -> Self::BitsIter;\n }\n \n-existential type IterBitsIter<T, E, I>: std::iter::Iterator<Item = I>;\n+type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n //~^ ERROR could not find defining uses\n \n impl<T, E> IterBits for T", "previous_filename": "src/test/ui/existential_types/issue-60564.rs"}, {"sha": "ebb13fca1da9231a074d1f06322a96bd86a18fa4", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -2,7 +2,7 @@ error[E0601]: `main` function not found in crate `issue_60564`\n    |\n    = note: consider adding a `main` function to `$DIR/issue-60564.rs`\n \n-error: type parameter `E` is part of concrete type but not used in parameter list for existential type\n+error: type parameter `E` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-60564.rs:20:49\n    |\n LL |       fn iter_bits(self, n: u8) -> Self::BitsIter {\n@@ -17,8 +17,8 @@ LL | |     }\n error: could not find defining uses\n   --> $DIR/issue-60564.rs:8:1\n    |\n-LL | existential type IterBitsIter<T, E, I>: std::iter::Iterator<Item = I>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n ", "previous_filename": "src/test/ui/existential_types/issue-60564.stderr"}, {"sha": "c9ca504f780979c8631c7239339cf6d6008fc3e5", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "patch": "@@ -1,4 +1,4 @@\n-// Issue 52985: user code provides no use case that allows an existential type\n+// Issue 52985: user code provides no use case that allows a type alias `impl Trait`\n // We now emit a 'could not find defining uses' error\n \n #![feature(type_alias_impl_trait)]"}, {"sha": "209134acf01f9723d50d9421bdf0caeb0074c306", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c8839f7cc14436a0ed3ab21d2ee14082e29e46/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-pass.rs?ref=70c8839f7cc14436a0ed3ab21d2ee14082e29e46", "previous_filename": "src/test/ui/existential_types/existential_type-pass.rs"}]}