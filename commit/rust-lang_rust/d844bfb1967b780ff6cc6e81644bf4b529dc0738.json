{"sha": "d844bfb1967b780ff6cc6e81644bf4b529dc0738", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDRiZmIxOTY3Yjc4MGZmNmNjNmU4MTY0NGJmNGI1MjlkYzA3Mzg=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T16:57:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::Visibility variants", "tree": {"sha": "c3eb4db434f5c328758aa63bac750dd7646f0d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3eb4db434f5c328758aa63bac750dd7646f0d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d844bfb1967b780ff6cc6e81644bf4b529dc0738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d844bfb1967b780ff6cc6e81644bf4b529dc0738", "html_url": "https://github.com/rust-lang/rust/commit/d844bfb1967b780ff6cc6e81644bf4b529dc0738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d844bfb1967b780ff6cc6e81644bf4b529dc0738/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe35da6b83f64bb7553b19649839512a3c301ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe35da6b83f64bb7553b19649839512a3c301ce", "html_url": "https://github.com/rust-lang/rust/commit/dfe35da6b83f64bb7553b19649839512a3c301ce"}], "stats": {"total": 91, "additions": 45, "deletions": 46}, "files": [{"sha": "fda538df5b3515d9401e198f29696bacb279f492", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -1565,8 +1565,8 @@ pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::Captu\n \n pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibility {\n     match v {\n-        Public => hir::Public,\n-        Inherited => hir::Inherited,\n+        Visibility::Public => hir::Public,\n+        Visibility::Inherited => hir::Inherited,\n     }\n }\n "}, {"sha": "79b465a02b83dcce77cc3bb26c06b920d0dff974", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -17,7 +17,6 @@ pub use self::StructFieldKind::*;\n pub use self::TyParamBound::*;\n pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n-pub use self::Visibility::*;\n pub use self::PathParameters::*;\n \n use attr::ThinAttributes;\n@@ -1851,8 +1850,8 @@ pub enum Visibility {\n impl Visibility {\n     pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility {\n         match *self {\n-            Inherited => parent_visibility,\n-            Public => *self\n+            Visibility::Inherited => parent_visibility,\n+            Visibility::Public => *self\n         }\n     }\n }"}, {"sha": "43b4a201afc184fb3c401d35513e5dab137cdc9c", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -230,7 +230,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n                 ty,\n                 expr,\n             ),\n-            vis: ast::Public,\n+            vis: ast::Visibility::Public,\n             span: span,\n         })\n     ]))"}, {"sha": "0f1f92f3fb8300e5ebe3ad08436dd907920ee2cd", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -962,7 +962,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             attrs: attrs,\n             id: ast::DUMMY_NODE_ID,\n             node: node,\n-            vis: ast::Inherited,\n+            vis: ast::Visibility::Inherited,\n             span: span\n         })\n     }\n@@ -1005,7 +1005,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let fields: Vec<_> = tys.into_iter().map(|ty| {\n             Spanned { span: ty.span, node: ast::StructField_ {\n                 ty: ty,\n-                kind: ast::UnnamedField(ast::Inherited),\n+                kind: ast::UnnamedField(ast::Visibility::Inherited),\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n             }}"}, {"sha": "d8099ff004b8c4aa79778d6eacfe381b10051d6a", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -906,7 +906,7 @@ fn expand_wrapper(cx: &ExtCtxt,\n     let stmts = imports.iter().map(|path| {\n         // make item: `use ...;`\n         let path = path.iter().map(|s| s.to_string()).collect();\n-        cx.stmt_item(sp, cx.item_use_glob(sp, ast::Inherited, ids_ext(path)))\n+        cx.stmt_item(sp, cx.item_use_glob(sp, ast::Visibility::Inherited, ids_ext(path)))\n     }).chain(Some(stmt_let_ext_cx)).collect();\n \n     cx.expr_block(cx.block_all(sp, stmts, Some(expr)))"}, {"sha": "7cbb3439551e76a5b5ff64de71079b18c93e18d1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -1023,7 +1023,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, config, mut exported_mac\n         ident: token::special_idents::invalid,\n         attrs: attrs,\n         id: ast::DUMMY_NODE_ID,\n-        vis: ast::Public,\n+        vis: ast::Visibility::Public,\n         span: span,\n         node: ast::ItemKind::Mod(module),\n     })).into_iter();"}, {"sha": "f7060296f1a7b3f29ad7f2e6c8088de72fc36f42", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -983,7 +983,7 @@ mod tests {\n                                         rules: ast::BlockCheckMode::Default, // no idea\n                                         span: sp(15,21),\n                                     })),\n-                            vis: ast::Inherited,\n+                            vis: ast::Visibility::Inherited,\n                             span: sp(0,21)})));\n     }\n "}, {"sha": "a13c79bdda10bd7d9d42c158c8acc2fe3ebc8f91", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -23,7 +23,7 @@ use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, ExprKind};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n-use ast::{Ident, Inherited, ImplItem, Item, ItemKind};\n+use ast::{Ident, ImplItem, Item, ItemKind};\n use ast::{Lit, LitKind, UintTy};\n use ast::Local;\n use ast::MacStmtStyle;\n@@ -3631,8 +3631,8 @@ impl<'a> Parser<'a> {\n     fn parse_name_and_ty(&mut self, pr: Visibility,\n                          attrs: Vec<Attribute> ) -> PResult<'a, StructField> {\n         let lo = match pr {\n-            Inherited => self.span.lo,\n-            Public => self.last_span.lo,\n+            Visibility::Inherited => self.span.lo,\n+            Visibility::Public => self.last_span.lo,\n         };\n         if !self.token.is_plain_ident() {\n             return Err(self.fatal(\"expected ident\"));\n@@ -3749,7 +3749,7 @@ impl<'a> Parser<'a> {\n                             lo, hi, id /*id is good here*/,\n                             ItemKind::Mac(spanned(lo, hi,\n                                             Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT })),\n-                            Inherited, attrs)))),\n+                            Visibility::Inherited, attrs)))),\n                     ast::DUMMY_NODE_ID))\n             }\n         } else {\n@@ -4686,7 +4686,7 @@ impl<'a> Parser<'a> {\n \n     fn complain_if_pub_macro(&mut self, visa: Visibility, span: Span) {\n         match visa {\n-            Public => {\n+            Visibility::Public => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid, _) => sid.name == intern(\"macro_rules\"),\n                     _ => false,\n@@ -4704,7 +4704,7 @@ impl<'a> Parser<'a> {\n                                      .emit();\n                 }\n             }\n-            Inherited => (),\n+            Visibility::Inherited => (),\n         }\n     }\n \n@@ -4974,7 +4974,7 @@ impl<'a> Parser<'a> {\n                         if parse_pub == ParsePub::Yes {\n                             try!(p.parse_visibility())\n                         } else {\n-                            Inherited\n+                            Visibility::Inherited\n                         }\n                     ),\n                     id: ast::DUMMY_NODE_ID,\n@@ -5020,16 +5020,16 @@ impl<'a> Parser<'a> {\n                 let span = self.last_span;\n                 self.span_err(span, \"`pub` is not allowed here\");\n             }\n-            return self.parse_single_struct_field(Public, attrs);\n+            return self.parse_single_struct_field(Visibility::Public, attrs);\n         }\n \n-        return self.parse_single_struct_field(Inherited, attrs);\n+        return self.parse_single_struct_field(Visibility::Inherited, attrs);\n     }\n \n     /// Parse visibility: PUB or nothing\n     fn parse_visibility(&mut self) -> PResult<'a, Visibility> {\n-        if self.eat_keyword(keywords::Pub) { Ok(Public) }\n-        else { Ok(Inherited) }\n+        if self.eat_keyword(keywords::Pub) { Ok(Visibility::Public) }\n+        else { Ok(Visibility::Inherited) }\n     }\n \n     /// Given a termination token, parse all of the items in a module\n@@ -5304,7 +5304,7 @@ impl<'a> Parser<'a> {\n \n         let last_span = self.last_span;\n \n-        if visibility == ast::Public {\n+        if visibility == ast::Visibility::Public {\n             self.span_warn(mk_sp(lo, last_span.hi),\n                            \"`pub extern crate` does not work as expected and should not be used. \\\n                             Likely to become an error. Prefer `extern crate` and `pub use`.\");\n@@ -5819,8 +5819,8 @@ impl<'a> Parser<'a> {\n \n         // FAILURE TO PARSE ITEM\n         match visibility {\n-            Inherited => {}\n-            Public => {\n+            Visibility::Inherited => {}\n+            Visibility::Public => {\n                 let last_span = self.last_span;\n                 return Err(self.span_fatal(last_span, \"unmatched visibility `pub`\"));\n             }"}, {"sha": "78a4bbd962f8eb8d79a56c82b279038805811698", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -388,7 +388,7 @@ pub fn fun_to_string(decl: &ast::FnDecl,\n     to_string(|s| {\n         try!(s.head(\"\"));\n         try!(s.print_fn(decl, unsafety, constness, Abi::Rust, Some(name),\n-                        generics, opt_explicit_self, ast::Inherited));\n+                        generics, opt_explicit_self, ast::Visibility::Inherited));\n         try!(s.end()); // Close the head box\n         s.end() // Close the outer box\n     })\n@@ -434,8 +434,8 @@ pub fn mac_to_string(arg: &ast::Mac) -> String {\n \n pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> String {\n     match vis {\n-        ast::Public => format!(\"pub {}\", s),\n-        ast::Inherited => s.to_string()\n+        ast::Visibility::Public => format!(\"pub {}\", s),\n+        ast::Visibility::Inherited => s.to_string()\n     }\n }\n \n@@ -1388,8 +1388,8 @@ impl<'a> State<'a> {\n \n     pub fn print_visibility(&mut self, vis: ast::Visibility) -> io::Result<()> {\n         match vis {\n-            ast::Public => self.word_nbsp(\"pub\"),\n-            ast::Inherited => Ok(())\n+            ast::Visibility::Public => self.word_nbsp(\"pub\"),\n+            ast::Visibility::Inherited => Ok(())\n         }\n     }\n \n@@ -1555,13 +1555,13 @@ impl<'a> State<'a> {\n             ast::TraitItemKind::Const(ref ty, ref default) => {\n                 try!(self.print_associated_const(ti.ident, &ty,\n                                                  default.as_ref().map(|expr| &**expr),\n-                                                 ast::Inherited));\n+                                                 ast::Visibility::Inherited));\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n                 if body.is_some() {\n                     try!(self.head(\"\"));\n                 }\n-                try!(self.print_method_sig(ti.ident, sig, ast::Inherited));\n+                try!(self.print_method_sig(ti.ident, sig, ast::Visibility::Inherited));\n                 if let Some(ref body) = *body {\n                     try!(self.nbsp());\n                     try!(self.print_block_with_attrs(body, &ti.attrs));\n@@ -3030,7 +3030,7 @@ impl<'a> State<'a> {\n                            name,\n                            &generics,\n                            opt_explicit_self,\n-                           ast::Inherited));\n+                           ast::Visibility::Inherited));\n         self.end()\n     }\n "}, {"sha": "9049b21d8b4bbc511cc4fb71772754dde6e70180", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -90,7 +90,7 @@ impl fold::Folder for CrateInjector {\n                 attr::mk_attr_outer(attr::mk_attr_id(), attr::mk_word_item(\n                         InternedString::new(\"macro_use\")))),\n             node: ast::ItemKind::ExternCrate(Some(self.crate_name)),\n-            vis: ast::Inherited,\n+            vis: ast::Visibility::Inherited,\n             span: DUMMY_SP\n         }));\n \n@@ -162,7 +162,7 @@ impl fold::Folder for PreludeInjector {\n                     is_sugared_doc: false,\n                 },\n             }],\n-            vis: ast::Inherited,\n+            vis: ast::Visibility::Inherited,\n             span: self.span,\n         }));\n "}, {"sha": "6b4f94641906197e6a563004e060b47dd85cb0f5", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -147,7 +147,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                     // the module (note that the tests are re-exported and must\n                     // be made public themselves to avoid privacy errors).\n                     i.map(|mut i| {\n-                        i.vis = ast::Public;\n+                        i.vis = ast::Visibility::Public;\n                         i\n                     })\n                 }\n@@ -245,11 +245,11 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n     let super_ = token::str_to_ident(\"super\");\n \n     let items = tests.into_iter().map(|r| {\n-        cx.ext_cx.item_use_simple(DUMMY_SP, ast::Public,\n+        cx.ext_cx.item_use_simple(DUMMY_SP, ast::Visibility::Public,\n                                   cx.ext_cx.path(DUMMY_SP, vec![super_, r]))\n     }).chain(tested_submods.into_iter().map(|(r, sym)| {\n         let path = cx.ext_cx.path(DUMMY_SP, vec![super_, r, sym]);\n-        cx.ext_cx.item_use_simple_(DUMMY_SP, ast::Public, r, path)\n+        cx.ext_cx.item_use_simple_(DUMMY_SP, ast::Visibility::Public, r, path)\n     }));\n \n     let reexport_mod = ast::Mod {\n@@ -263,7 +263,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ItemKind::Mod(reexport_mod),\n-        vis: ast::Public,\n+        vis: ast::Visibility::Public,\n         span: DUMMY_SP,\n     });\n \n@@ -456,9 +456,9 @@ fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n         (ast::ItemKind::Use(\n             P(nospan(ast::ViewPathSimple(id_test,\n                                          path_node(vec!(id_test)))))),\n-         ast::Public, token::special_idents::invalid)\n+         ast::Visibility::Public, token::special_idents::invalid)\n     } else {\n-        (ast::ItemKind::ExternCrate(None), ast::Inherited, id_test)\n+        (ast::ItemKind::ExternCrate(None), ast::Visibility::Inherited, id_test)\n     };\n     P(ast::Item {\n         id: ast::DUMMY_NODE_ID,\n@@ -505,7 +505,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n         attrs: vec![main_attr],\n         id: ast::DUMMY_NODE_ID,\n         node: main,\n-        vis: ast::Public,\n+        vis: ast::Visibility::Public,\n         span: sp\n     });\n \n@@ -535,7 +535,7 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n         ident: mod_ident,\n         attrs: vec![],\n         node: item_,\n-        vis: ast::Public,\n+        vis: ast::Visibility::Public,\n         span: DUMMY_SP,\n     });\n     let reexport = cx.reexport_test_harness_main.as_ref().map(|s| {\n@@ -551,7 +551,7 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n             ident: token::special_idents::invalid,\n             attrs: vec![],\n             node: ast::ItemKind::Use(P(use_path)),\n-            vis: ast::Inherited,\n+            vis: ast::Visibility::Inherited,\n             span: DUMMY_SP\n         })\n     });"}, {"sha": "1e4babfac1e5660551bc2160ae579ddb6c80e3f4", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d844bfb1967b780ff6cc6e81644bf4b529dc0738/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d844bfb1967b780ff6cc6e81644bf4b529dc0738", "patch": "@@ -475,7 +475,7 @@ impl<'a> TraitDef<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n                 ident: ident,\n-                vis: ast::Inherited,\n+                vis: ast::Visibility::Inherited,\n                 attrs: Vec::new(),\n                 node: ast::ImplItemKind::Type(type_def.to_ty(cx,\n                     self.span,\n@@ -892,7 +892,7 @@ impl<'a> MethodDef<'a> {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             span: trait_.span,\n-            vis: ast::Inherited,\n+            vis: ast::Visibility::Inherited,\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {\n                 generics: fn_generics,"}]}