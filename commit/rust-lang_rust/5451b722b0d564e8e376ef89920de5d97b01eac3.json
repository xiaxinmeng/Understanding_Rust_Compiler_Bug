{"sha": "5451b722b0d564e8e376ef89920de5d97b01eac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NTFiNzIyYjBkNTY0ZThlMzc2ZWY4OTkyMGRlNWQ5N2IwMWVhYzM=", "commit": {"author": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-22T22:31:18Z"}, "committer": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-25T18:51:47Z"}, "message": "Expand the introduction to the ffi module.\n\nWe describe the representation of C strings, and the purpose of\nOsString/OsStr.\n\nPart of https://github.com/rust-lang/rust/issues/29354", "tree": {"sha": "de42f8488c329bf283f1039593f2c7aaa0faa613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de42f8488c329bf283f1039593f2c7aaa0faa613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5451b722b0d564e8e376ef89920de5d97b01eac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5451b722b0d564e8e376ef89920de5d97b01eac3", "html_url": "https://github.com/rust-lang/rust/commit/5451b722b0d564e8e376ef89920de5d97b01eac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5451b722b0d564e8e376ef89920de5d97b01eac3/comments", "author": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee409a489eebab8a28078bb04c29d13442b74ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee409a489eebab8a28078bb04c29d13442b74ee5", "html_url": "https://github.com/rust-lang/rust/commit/ee409a489eebab8a28078bb04c29d13442b74ee5"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "6c8ddfc394496ee99d955933b0c946aa4a07b879", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5451b722b0d564e8e376ef89920de5d97b01eac3/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5451b722b0d564e8e376ef89920de5d97b01eac3/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=5451b722b0d564e8e376ef89920de5d97b01eac3", "patch": "@@ -8,7 +8,106 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Utilities related to FFI bindings.\n+//! This module provides utilities to handle C-like strings.  It is\n+//! mainly of use for FFI (Foreign Function Interface) bindings and\n+//! code that needs to exchange C-like strings with other languages.\n+//!\n+//! # Overview\n+//!\n+//! Rust represents owned strings with the [`String`] type, and\n+//! borrowed slices of strings with the [`str`] primitive.  Both are\n+//! always in UTF-8 encoding, and may contain nul bytes in the middle,\n+//! i.e. if you look at the bytes that make up the string, there may\n+//! be a `0` among them.  Both `String` and `str` know their length;\n+//! there are no nul terminators at the end of strings like in C.\n+//!\n+//! C strings are different from Rust strings:\n+//!\n+//! * **Encodings** - C strings may have different encodings.  If\n+//! you are bringing in strings from C APIs, you should check what\n+//! encoding you are getting.  Rust strings are always UTF-8.\n+//!\n+//! * **Character width** - C strings may use \"normal\" or \"wide\"\n+//! characters, i.e. `char` or `wchar_t`, respectively.  The C\n+//! standard leaves the actual sizes of those types open to\n+//! interpretation, but defines different APIs for strings made up of\n+//! each character type.  Rust strings are always UTF-8, so different\n+//! Unicode characters will be encoded in a variable number of bytes\n+//! each.  The Rust type [`char`] represents a '[Unicode\n+//! scalar value]', which is similar to, but not the same as, a\n+//! '[Unicode code point]'.\n+//!\n+//! * **Nul terminators and implicit string lengths** - Often, C\n+//! strings are nul-terminated, i.e. they have a `0` character at the\n+//! end.  The length of a string buffer is not known *a priori*;\n+//! instead, to compute the length of a string, C code must manually\n+//! call a function like `strlen()` for `char`-based strings, or\n+//! `wcslen()` for `wchar_t`-based ones.  Those functions return the\n+//! number of characters in the string excluding the nul terminator,\n+//! so the buffer length is really `len+1` characters.  Rust strings\n+//! don't have a nul terminator, and they always know their length.\n+//!\n+//! * **No nul characters in the middle of the string** - When C\n+//! strings have a nul terminator character, this usually means that\n+//! they cannot have nul characters in the middle \u2014 a nul character\n+//! would essentially truncate the string.  Rust strings *can* have\n+//! nul characters in the middle, since they don't use nul\n+//! terminators.\n+//!\n+//! # Representations of non-Rust strings\n+//!\n+//! [`CString`] and [`CStr`] are useful when you need to transfer\n+//! UTF-8 strings to and from C, respectively:\n+//!\n+//! * **From Rust to C:** [`CString`] represents an owned, C-friendly\n+//! UTF-8 string:  it is valid UTF-8, it is nul-terminated, and has no\n+//! nul characters in the middle.  Rust code can create a `CString`\n+//! out of a normal string (provided that the string doesn't have nul\n+//! characters in the middle), and then use a variety of methods to\n+//! obtain a raw `*mut u8` that can then be passed as an argument to C\n+//! functions.\n+//!\n+//! * **From C to Rust:** [`CStr`] represents a borrowed C string; it\n+//! is what you would use to wrap a raw `*const u8` that you got from\n+//! a C function.  A `CStr` is just guaranteed to be a nul-terminated\n+//! array of bytes; the UTF-8 validation step only happens when you\n+//! request to convert it to a `&str`.\n+//!\n+//! [`OsString`] and [`OsStr`] are useful when you need to transfer\n+//! strings to and from operating system calls.  If you need Rust\n+//! strings out of them, they can take care of conversion to and from\n+//! the operating system's preferred form for strings \u2014 of course, it\n+//! may not be possible to convert all valid operating system strings\n+//! into valid UTF-8; the `OsString` and `OsStr` functions let you know\n+//! when this is the case.\n+//!\n+//! * [`OsString`] represents an owned string in whatever\n+//! representation the operating system prefers.  In the Rust standard\n+//! library, various APIs that transfer strings to/from the operating\n+//! system use `OsString` instead of plain strings.  For example,\n+//! [`env::var_os()`] is used to query environment variables; it\n+//! returns an `Option<OsString>`.  If the environment variable exists\n+//! you will get a `Some(os_string)`, which you can *then* try to\n+//! convert to a Rust string.  This yields a [`Result<>`], so that\n+//! your code can detect errors in case the environment variable did\n+//! not in fact contain valid Unicode data.\n+//!\n+//! * [`OsStr`] represents a borrowed reference to a string in a format that\n+//! can be passed to the operating system.  It can be converted into\n+//! an UTF-8 Rust string slice in a similar way to `OsString`.\n+//!\n+//! [`String`]: ../string/struct.String.html\n+//! [`str`]: ../primitive.str.html\n+//! [`char`]: ../primitive.char.html\n+//! [Unicode scalar value]: http://www.unicode.org/glossary/#unicode_scalar_value\n+//! [Unicode code point]: http://www.unicode.org/glossary/#code_point\n+//! [`CString`]: struct.CString.html\n+//! [`CStr`]: struct.CStr.html\n+//! [`OsString`]: struct.OsString.html\n+//! [`OsStr`]: struct.OsStr.html\n+//! [`env::set_var()`]: ../env/fn.set_var.html\n+//! [`env::var_os()`]: ../env/fn.var_os.html\n+//! [`Result<>`]: ../result/enum.Result.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}