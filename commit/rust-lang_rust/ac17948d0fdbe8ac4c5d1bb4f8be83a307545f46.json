{"sha": "ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMTc5NDhkMGZkYmU4YWM0YzVkMWJiNGY4YmU4M2EzMDc1NDVmNDY=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-06T14:32:22Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:15Z"}, "message": "Mark non-defaulted params as TyError to avoid a custom visitor.", "tree": {"sha": "a4e20503e84fdf6a8e3b79957c96a13f0fe40031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4e20503e84fdf6a8e3b79957c96a13f0fe40031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46", "html_url": "https://github.com/rust-lang/rust/commit/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ab26c99a4775c613ff30e18fe0ee01661a635e", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ab26c99a4775c613ff30e18fe0ee01661a635e", "html_url": "https://github.com/rust-lang/rust/commit/81ab26c99a4775c613ff30e18fe0ee01661a635e"}], "stats": {"total": 20, "additions": 4, "deletions": 16}, "files": [{"sha": "21660d817b213f901cd4b2ad54a56f73add8ce86", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ac17948d0fdbe8ac4c5d1bb4f8be83a307545f46", "patch": "@@ -399,37 +399,25 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         // For more examples see tests `defaults-well-formedness.rs` and `type-check-defaults.rs`.\n         //\n         // First we build the defaulted substitution.\n-        let mut defaulted_params = Vec::new();\n         let substs = ty::subst::Substs::for_item(fcx.tcx, def_id, |def, _| {\n                 // All regions are identity.\n                 fcx.tcx.mk_region(ty::ReEarlyBound(def.to_early_bound_region_data()))\n             }, |def, _| {\n                 if !is_our_default(def) {\n-                    // Identity substitution.\n-                    fcx.tcx.mk_param_from_def(def)\n+                    // We don't want to use non-defaulted params in a substitution, mark as err.\n+                    fcx.tcx.types.err\n                 } else  {\n                     // Substitute with default.\n-                    defaulted_params.push(def.index);\n                     fcx.tcx.type_of(def.def_id)\n                 }\n             });\n-        let defaulted_params = &defaulted_params;\n         // Now we build the substituted predicates.\n         for &pred in predicates.predicates.iter() {\n-            struct HasNonDefaulted<'a> { defaulted_params: &'a Vec<u32> }\n-            impl<'tcx, 'a> ty::fold::TypeVisitor<'tcx> for HasNonDefaulted<'a> {\n-                fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-                    match t.sty {\n-                        ty::TyParam(p) => !self.defaulted_params.contains(&p.idx),\n-                        _ => t.super_visit_with(self)\n-                    }\n-                }\n-            }\n+            let substituted_pred = pred.subst(fcx.tcx, substs);\n             // If there is a non-defaulted param in the predicate, don't check it.\n-            if pred.visit_with(&mut HasNonDefaulted { defaulted_params }) {\n+            if substituted_pred.references_error() {\n                 continue;\n             }\n-            let substituted_pred = pred.subst(fcx.tcx, substs);\n             // In trait defs, don't check `Self: Sized` when `Self` is the default.\n             if let ty::Predicate::Trait(trait_pred) = substituted_pred {\n                 // `skip_binder()` is ok, we're only inspecting for `has_self_ty()`."}]}