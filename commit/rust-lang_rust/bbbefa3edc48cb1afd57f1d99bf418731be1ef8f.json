{"sha": "bbbefa3edc48cb1afd57f1d99bf418731be1ef8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYmVmYTNlZGM0OGNiMWFmZDU3ZjFkOTliZjQxODczMWJlMWVmOGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-06T20:59:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-10T09:17:37Z"}, "message": "Allow doc alias attributes to use both list and value", "tree": {"sha": "487c0758a826ae64fb4eaf22423b079a69915b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487c0758a826ae64fb4eaf22423b079a69915b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f", "html_url": "https://github.com/rust-lang/rust/commit/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "html_url": "https://github.com/rust-lang/rust/commit/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07"}], "stats": {"total": 116, "additions": 107, "deletions": 9}, "files": [{"sha": "0257a63e50faba0cb0ffe3baef373a82e972d565", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=bbbefa3edc48cb1afd57f1d99bf418731be1ef8f", "patch": "@@ -390,10 +390,25 @@ impl CheckAttrVisitor<'tcx> {\n             .emit();\n     }\n \n-    fn check_doc_alias(&self, meta: &NestedMetaItem, hir_id: HirId, target: Target) -> bool {\n-        let doc_alias = meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n+    fn check_doc_alias_value(\n+        &self,\n+        meta: &NestedMetaItem,\n+        doc_alias: &str,\n+        hir_id: HirId,\n+        target: Target,\n+        is_list: bool,\n+    ) -> bool {\n         if doc_alias.is_empty() {\n-            self.doc_attr_str_error(meta, \"alias\");\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                    &format!(\n+                        \"`#[doc(alias{})]` attribute cannot have empty value\",\n+                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                    ),\n+                )\n+                .emit();\n             return false;\n         }\n         if let Some(c) =\n@@ -403,7 +418,11 @@ impl CheckAttrVisitor<'tcx> {\n                 .sess\n                 .struct_span_err(\n                     meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    &format!(\"{:?} character isn't allowed in `#[doc(alias = \\\"...\\\")]`\", c),\n+                    &format!(\n+                        \"{:?} character isn't allowed in `#[doc(alias{})]`\",\n+                        c,\n+                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                    ),\n                 )\n                 .emit();\n             return false;\n@@ -413,7 +432,10 @@ impl CheckAttrVisitor<'tcx> {\n                 .sess\n                 .struct_span_err(\n                     meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    \"`#[doc(alias = \\\"...\\\")]` cannot start or end with ' '\",\n+                    &format!(\n+                        \"`#[doc(alias{})]` cannot start or end with ' '\",\n+                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                    ),\n                 )\n                 .emit();\n             return false;\n@@ -446,7 +468,11 @@ impl CheckAttrVisitor<'tcx> {\n                 .sess\n                 .struct_span_err(\n                     meta.span(),\n-                    &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", err),\n+                    &format!(\n+                        \"`#[doc(alias{})]` isn't allowed on {}\",\n+                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                        err,\n+                    ),\n                 )\n                 .emit();\n             return false;\n@@ -457,14 +483,67 @@ impl CheckAttrVisitor<'tcx> {\n                 .sess\n                 .struct_span_err(\n                     meta.span(),\n-                    &format!(\"`#[doc(alias = \\\"...\\\")]` is the same as the item's name\"),\n+                    &format!(\n+                        \"`#[doc(alias{})]` is the same as the item's name\",\n+                        if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                    ),\n                 )\n                 .emit();\n             return false;\n         }\n         true\n     }\n \n+    fn check_doc_alias(&self, meta: &NestedMetaItem, hir_id: HirId, target: Target) -> bool {\n+        if let Some(values) = meta.meta_item_list() {\n+            let mut errors = 0;\n+            for v in values {\n+                match v.literal() {\n+                    Some(l) => match l.kind {\n+                        LitKind::Str(s, _) => {\n+                            if !self.check_doc_alias_value(v, &s.as_str(), hir_id, target, true) {\n+                                errors += 1;\n+                            }\n+                        }\n+                        _ => {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    v.span(),\n+                                    \"`#[doc(alias(\\\"a\\\")]` expects string literals\",\n+                                )\n+                                .emit();\n+                            errors += 1;\n+                        }\n+                    },\n+                    None => {\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(\n+                                v.span(),\n+                                \"`#[doc(alias(\\\"a\\\")]` expects string literals\",\n+                            )\n+                            .emit();\n+                        errors += 1;\n+                    }\n+                }\n+            }\n+            errors == 0\n+        } else if let Some(doc_alias) = meta.value_str().map(|s| s.to_string()) {\n+            self.check_doc_alias_value(meta, &doc_alias, hir_id, target, false)\n+        } else {\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    meta.span(),\n+                    \"doc alias attribute expects a string `#[doc(alias = \\\"a\\\")]` or a list of \\\n+                     strings: `#[doc(alias(\\\"a\\\", \\\"b\\\")]`\",\n+                )\n+                .emit();\n+            false\n+        }\n+    }\n+\n     fn check_doc_keyword(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n         let doc_keyword = meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n         if doc_keyword.is_empty() {"}, {"sha": "6147bd0a97a968e7234517d271405a290243ee60", "filename": "src/doc/rustdoc/src/advanced-features.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md?ref=bbbefa3edc48cb1afd57f1d99bf418731be1ef8f", "patch": "@@ -81,3 +81,10 @@ Then, when looking for it through the `rustdoc` search, if you enter \"x\" or\n \"big\", search will show the `BigX` struct first.\n \n There are some limitations on the doc alias names though: you can't use `\"` or whitespace.\n+\n+You can add multiple aliases at the same time by using a list:\n+\n+```rust,no_run\n+#[doc(alias(\"x\", \"big\"))]\n+pub struct BigX;\n+```"}, {"sha": "b67af48451038a8cc844eeebf29e303895288fd6", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbefa3edc48cb1afd57f1d99bf418731be1ef8f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=bbbefa3edc48cb1afd57f1d99bf418731be1ef8f", "patch": "@@ -914,8 +914,20 @@ impl Attributes {\n         self.other_attrs\n             .lists(sym::doc)\n             .filter(|a| a.has_name(sym::alias))\n-            .filter_map(|a| a.value_str().map(|s| s.to_string()))\n-            .filter(|v| !v.is_empty())\n+            .map(|a| {\n+                if let Some(values) = a.meta_item_list() {\n+                    values\n+                        .iter()\n+                        .map(|l| match l.literal().unwrap().kind {\n+                            ast::LitKind::Str(s, _) => s.as_str().to_string(),\n+                            _ => unreachable!(),\n+                        })\n+                        .collect::<Vec<_>>()\n+                } else {\n+                    vec![a.value_str().map(|s| s.to_string()).unwrap()]\n+                }\n+            })\n+            .flatten()\n             .collect::<FxHashSet<_>>()\n     }\n }"}]}