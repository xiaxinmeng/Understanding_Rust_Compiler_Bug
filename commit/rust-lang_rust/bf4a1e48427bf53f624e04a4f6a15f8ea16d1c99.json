{"sha": "bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99", "node_id": "C_kwDOAAsO6NoAKGJmNGExZTQ4NDI3YmY1M2Y2MjRlMDRhNGY2YTE1ZjhlYTE2ZDFjOTk", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-24T09:06:37Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-24T09:06:37Z"}, "message": "use pat_id instead of name in const eval stack", "tree": {"sha": "38ac0d6259d2c5b4546a276788527056a1d7f1fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ac0d6259d2c5b4546a276788527056a1d7f1fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99", "html_url": "https://github.com/rust-lang/rust/commit/bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22eaee25b8e8849aedc3454646cf9d9ca7195487", "url": "https://api.github.com/repos/rust-lang/rust/commits/22eaee25b8e8849aedc3454646cf9d9ca7195487", "html_url": "https://github.com/rust-lang/rust/commit/22eaee25b8e8849aedc3454646cf9d9ca7195487"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "009ea008fcbcb777d99262eff48f39b560690878", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=bf4a1e48427bf53f624e04a4f6a15f8ea16d1c99", "patch": "@@ -8,13 +8,12 @@ use std::{\n \n use chalk_ir::{BoundVar, DebruijnIndex, GenericArgData, IntTy, Scalar};\n use hir_def::{\n-    expr::{ArithOp, BinaryOp, Expr, ExprId, Literal, Pat},\n+    expr::{ArithOp, BinaryOp, Expr, ExprId, Literal, Pat, PatId},\n     path::ModPath,\n     resolver::{resolver_for_expr, ResolveValueResult, Resolver, ValueNs},\n     type_ref::ConstScalar,\n     ConstId, DefWithBodyId,\n };\n-use hir_expand::name::Name;\n use la_arena::{Arena, Idx};\n use stdx::never;\n \n@@ -57,7 +56,7 @@ pub struct ConstEvalCtx<'a> {\n     pub owner: DefWithBodyId,\n     pub exprs: &'a Arena<Expr>,\n     pub pats: &'a Arena<Pat>,\n-    pub local_data: HashMap<Name, ComputedExpr>,\n+    pub local_data: HashMap<PatId, ComputedExpr>,\n     infer: &'a InferenceResult,\n }\n \n@@ -266,13 +265,13 @@ pub fn eval_const(\n             }\n         }\n         Expr::Block { statements, tail, .. } => {\n-            let mut prev_values = HashMap::<Name, Option<ComputedExpr>>::default();\n+            let mut prev_values = HashMap::<PatId, Option<ComputedExpr>>::default();\n             for statement in &**statements {\n                 match *statement {\n-                    hir_def::expr::Statement::Let { pat, initializer, .. } => {\n-                        let pat = &ctx.pats[pat];\n-                        let name = match pat {\n-                            Pat::Bind { name, subpat, .. } if subpat.is_none() => name.clone(),\n+                    hir_def::expr::Statement::Let { pat: pat_id, initializer, .. } => {\n+                        let pat = &ctx.pats[pat_id];\n+                        match pat {\n+                            Pat::Bind { subpat, .. } if subpat.is_none() => (),\n                             _ => {\n                                 return Err(ConstEvalError::NotSupported(\"complex patterns in let\"))\n                             }\n@@ -281,11 +280,11 @@ pub fn eval_const(\n                             Some(x) => eval_const(x, ctx)?,\n                             None => continue,\n                         };\n-                        if !prev_values.contains_key(&name) {\n-                            let prev = ctx.local_data.insert(name.clone(), value);\n-                            prev_values.insert(name, prev);\n+                        if !prev_values.contains_key(&pat_id) {\n+                            let prev = ctx.local_data.insert(pat_id, value);\n+                            prev_values.insert(pat_id, prev);\n                         } else {\n-                            ctx.local_data.insert(name, value);\n+                            ctx.local_data.insert(pat_id, value);\n                         }\n                     }\n                     hir_def::expr::Statement::Expr { .. } => {\n@@ -330,12 +329,10 @@ pub fn eval_const(\n                 }\n             };\n             match pr {\n-                ValueNs::LocalBinding(_) => {\n-                    let name =\n-                        p.mod_path().as_ident().ok_or(ConstEvalError::NotSupported(\"big paths\"))?;\n+                ValueNs::LocalBinding(pat_id) => {\n                     let r = ctx\n                         .local_data\n-                        .get(name)\n+                        .get(&pat_id)\n                         .ok_or(ConstEvalError::NotSupported(\"Unexpected missing local\"))?;\n                     Ok(r.clone())\n                 }"}]}