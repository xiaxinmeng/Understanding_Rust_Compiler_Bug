{"sha": "fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZDljZGM4NzkyZDhmYTRhNjQ5NTZjN2QzMjYzZmE1Y2UxOGUzMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T01:42:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T01:42:14Z"}, "message": "Auto merge of #50966 - leodasvacas:self-in-where-clauses-is-not-object-safe, r=nikomatsakis\n\n`Self` in where clauses may not be object safe\n\nNeeds crater, virtually certain to cause regressions.\n\nIn #50781 it was discovered that our object safety rules are not sound because we allow `Self` in where clauses without restrain. This PR is a direct fix to the rules so that we disallow methods with unsound where clauses.\n\nThis currently uses hard error to measure impact, but we will want to downgrade it to a future compat error.\n\nPart of #50781.\n\nr? @nikomatsakis", "tree": {"sha": "34deb6049374a320b66e7ded0ce3704334bfcd32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34deb6049374a320b66e7ded0ce3704334bfcd32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "html_url": "https://github.com/rust-lang/rust/commit/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1c4eec40527de45b9d9b81672c8b9220d554fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1c4eec40527de45b9d9b81672c8b9220d554fc", "html_url": "https://github.com/rust-lang/rust/commit/2a1c4eec40527de45b9d9b81672c8b9220d554fc"}, {"sha": "cc60e01581d3bb290a2299a6c2474aa29bf6a15f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc60e01581d3bb290a2299a6c2474aa29bf6a15f", "html_url": "https://github.com/rust-lang/rust/commit/cc60e01581d3bb290a2299a6c2474aa29bf6a15f"}], "stats": {"total": 156, "additions": 115, "deletions": 41}, "files": [{"sha": "1f8c7f0064ed9570381249c26b95f9ec2d3194bb", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -304,6 +304,12 @@ declare_lint! {\n     \"warn about documentation intra links resolution failure\"\n }\n \n+declare_lint! {\n+    pub WHERE_CLAUSES_OBJECT_SAFETY,\n+    Warn,\n+    \"checks the object safety of where clauses\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -358,6 +364,7 @@ impl LintPass for HardwiredLints {\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n             DUPLICATE_MACRO_EXPORTS,\n             INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+            WHERE_CLAUSES_OBJECT_SAFETY,\n         )\n     }\n }"}, {"sha": "85bd5853d18a74c8b6420ccbc1c0194d635fa9c1", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -20,14 +20,16 @@\n use super::elaborate_predicates;\n \n use hir::def_id::DefId;\n+use lint;\n use traits;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::subst::Substs;\n use ty::util::ExplicitSelf;\n use std::borrow::Cow;\n use syntax::ast;\n+use syntax_pos::Span;\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n     /// Self : Sized declared on the trait\n     SizedSelf,\n@@ -56,6 +58,9 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>\n                 format!(\"method `{}` references the `Self` type \\\n                          in its arguments or return type\", name).into(),\n+            ObjectSafetyViolation::Method(name,\n+                                            MethodViolationCode::WhereClauseReferencesSelf(_)) =>\n+                format!(\"method `{}` references the `Self` type in where clauses\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::NonStandardSelfType) =>\n@@ -75,6 +80,9 @@ pub enum MethodViolationCode {\n     /// e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`\n     ReferencesSelf,\n \n+    /// e.g. `fn foo(&self) where Self: Clone`\n+    WhereClauseReferencesSelf(Span),\n+\n     /// e.g., `fn foo<A>()`\n     Generic,\n \n@@ -123,6 +131,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             .filter_map(|item| {\n                 self.object_safety_violation_for_method(trait_def_id, &item)\n                     .map(|code| ObjectSafetyViolation::Method(item.name, code))\n+            }).filter(|violation| {\n+                if let ObjectSafetyViolation::Method(_,\n+                                MethodViolationCode::WhereClauseReferencesSelf(span)) = violation {\n+                    // Using`CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n+                    // It's also hard to get a use site span, so we use the method definition span.\n+                    self.lint_node_note(\n+                        lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY,\n+                        ast::CRATE_NODE_ID,\n+                        *span,\n+                        &format!(\"the trait `{}` cannot be made into an object\",\n+                                self.item_path_str(trait_def_id)),\n+                        &violation.error_msg());\n+                    false\n+                } else {\n+                    true\n+                }\n             }).collect();\n \n         // Check the trait itself.\n@@ -245,7 +269,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return false;\n         }\n \n-        self.virtual_call_violation_for_method(trait_def_id, method).is_none()\n+        match self.virtual_call_violation_for_method(trait_def_id, method) {\n+            None | Some(MethodViolationCode::WhereClauseReferencesSelf(_)) => true,\n+            Some(_) => false,\n+        }\n     }\n \n     /// Returns `Some(_)` if this method cannot be called on a trait\n@@ -288,6 +315,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return Some(MethodViolationCode::Generic);\n         }\n \n+        if self.predicates_of(method.def_id).predicates.into_iter()\n+                // A trait object can't claim to live more than the concrete type,\n+                // so outlives predicates will always hold.\n+                .filter(|p| p.to_opt_type_outlives().is_none())\n+                .collect::<Vec<_>>()\n+                // Do a shallow visit so that `contains_illegal_self_type_reference`\n+                // may apply it's custom visiting.\n+                .visit_tys_shallow(|t| self.contains_illegal_self_type_reference(trait_def_id, t)) {\n+            let span = self.def_span(method.def_id);\n+            return Some(MethodViolationCode::WhereClauseReferencesSelf(span));\n+        }\n+\n         None\n     }\n "}, {"sha": "307e1b238386c0e912675295010249613e24e73a", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -136,6 +136,20 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_late_bound_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n     }\n+\n+    /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n+    fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> bool) -> bool {\n+\n+        pub struct Visitor<F>(F);\n+\n+        impl<'tcx, F: FnMut(Ty<'tcx>) -> bool> TypeVisitor<'tcx> for Visitor<F> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+                self.0(ty)\n+            }\n+        }\n+\n+        self.visit_with(&mut Visitor(visit))\n+    }\n }\n \n /// The TypeFolder trait defines the actual *folding*. There is a"}, {"sha": "1d443258dc6423dd93c715aaff3f0e1149e8a761", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -292,6 +292,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue TBD\",\n             edition: Some(Edition::Edition2018),\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(WHERE_CLAUSES_OBJECT_SAFETY),\n+            reference: \"issue #51443 <https://github.com/rust-lang/rust/issues/51443>\",\n+            edition: None,\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(DUPLICATE_ASSOCIATED_TYPE_BINDINGS),\n             reference: \"issue #50589 <https://github.com/rust-lang/rust/issues/50589>\","}, {"sha": "1e6366e068a890631cd9c74ff2ba1319eec7d23e", "filename": "src/test/compile-fail/issue-43431.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fcompile-fail%2Fissue-43431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fcompile-fail%2Fissue-43431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43431.rs?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -11,7 +11,7 @@\n #![feature(fn_traits)]\n \n trait CallSingle<A, B> {\n-    fn call(&self, a: A) -> B where Self: Fn(A) -> B;\n+    fn call(&self, a: A) -> B where Self: Sized, Self: Fn(A) -> B;\n }\n \n impl<A, B, F: Fn(A) -> B> CallSingle<A, B> for F {"}, {"sha": "f46a54504a0b5cd7c50835eb4dacf0165d0ad412", "filename": "src/test/compile-fail/wf-trait-fn-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-trait-fn-where-clause.rs?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -17,7 +17,7 @@\n struct Bar<T:Eq+?Sized> { value: Box<T> }\n \n trait Foo {\n-    fn bar(&self) where Bar<Self>: Copy;\n+    fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n         //~^ ERROR E0277\n         //\n         // Here, Eq ought to be implemented."}, {"sha": "9b727826e6dc76b3e43df8b5cdbb42d85a773612", "filename": "src/test/run-pass/issue-23435.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2a1c4eec40527de45b9d9b81672c8b9220d554fc/src%2Ftest%2Frun-pass%2Fissue-23435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1c4eec40527de45b9d9b81672c8b9220d554fc/src%2Ftest%2Frun-pass%2Fissue-23435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23435.rs?ref=2a1c4eec40527de45b9d9b81672c8b9220d554fc", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we do not ICE when a default method implementation has\n-// requirements (in this case, `Self : Baz`) that do not hold for some\n-// specific impl (in this case, `Foo : Bar`). This causes problems\n-// only when building a vtable, because that goes along and\n-// instantiates all the methods, even those that could not otherwise\n-// be called.\n-\n-// pretty-expanded FIXME #23616\n-\n-struct Foo {\n-    x: i32\n-}\n-\n-trait Bar {\n-    fn bar(&self) where Self : Baz { self.baz(); }\n-}\n-\n-trait Baz {\n-    fn baz(&self);\n-}\n-\n-impl Bar for Foo {\n-}\n-\n-fn main() {\n-    let x: &Bar = &Foo { x: 22 };\n-}"}, {"sha": "43830869da7f2e01fc76f79964fd406aaadab5f3", "filename": "src/test/ui/issue-50781.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fui%2Fissue-50781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fui%2Fissue-50781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50781.rs?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(where_clauses_object_safety)]\n+\n+trait Trait {}\n+\n+trait X {\n+    fn foo(&self) where Self: Trait; //~ ERROR the trait `X` cannot be made into an object\n+    //~^ WARN this was previously accepted by the compiler but is being phased out\n+}\n+\n+impl X for () {\n+    fn foo(&self) {}\n+}\n+\n+impl Trait for dyn X {}\n+\n+pub fn main() {\n+    // Check that this does not segfault.\n+    <X as X>::foo(&());\n+}"}, {"sha": "047b847e67e817c6cdcab01244878e3b322907a4", "filename": "src/test/ui/issue-50781.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fui%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335/src%2Ftest%2Fui%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50781.stderr?ref=fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "patch": "@@ -0,0 +1,17 @@\n+error: the trait `X` cannot be made into an object\n+  --> $DIR/issue-50781.rs:16:5\n+   |\n+LL |     fn foo(&self) where Self: Trait; //~ ERROR the trait `X` cannot be made into an object\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-50781.rs:11:9\n+   |\n+LL | #![deny(where_clauses_object_safety)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n+   = note: method `foo` references the `Self` type in where clauses\n+\n+error: aborting due to previous error\n+"}]}