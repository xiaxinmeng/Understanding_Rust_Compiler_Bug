{"sha": "1c0fa3431052e8b6d944891dc20a1dd614bedd13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMGZhMzQzMTA1MmU4YjZkOTQ0ODkxZGMyMGExZGQ2MTRiZWRkMTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T09:57:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T20:42:54Z"}, "message": "Update borrowck to use `repr::*` instead of a mix\n\nWe should probably settle on some conventions here. In MIR code, I have\ngenerally been importing `*`, but perhaps borrowck does not want to do\nthat.", "tree": {"sha": "da0ecd10b923bcdb475c54e69ff1caa079d28bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da0ecd10b923bcdb475c54e69ff1caa079d28bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c0fa3431052e8b6d944891dc20a1dd614bedd13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0fa3431052e8b6d944891dc20a1dd614bedd13", "html_url": "https://github.com/rust-lang/rust/commit/1c0fa3431052e8b6d944891dc20a1dd614bedd13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c0fa3431052e8b6d944891dc20a1dd614bedd13/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b96cfb14375def79676a969ded1b00a44aa74c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b96cfb14375def79676a969ded1b00a44aa74c4", "html_url": "https://github.com/rust-lang/rust/commit/2b96cfb14375def79676a969ded1b00a44aa74c4"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "46eb3d3ca03e5297c4aeeffe997d7477006bb533", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1c0fa3431052e8b6d944891dc20a1dd614bedd13/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0fa3431052e8b6d944891dc20a1dd614bedd13/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=1c0fa3431052e8b6d944891dc20a1dd614bedd13", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n \n-use rustc::middle::ty;\n-use rustc::mir::repr::{self, Mir, BasicBlock, Lvalue, Rvalue};\n-use rustc::mir::repr::{StatementKind, TerminatorKind};\n+use rustc::middle::ty::TyCtxt;\n+use rustc::mir::repr::*;\n use rustc::util::nodemap::FnvHashMap;\n \n use std::cell::{Cell};\n@@ -361,7 +360,7 @@ impl<'tcx> MovePathLookup<'tcx> {\n     }\n \n     fn lookup_proj(&mut self,\n-                   proj: &repr::LvalueProjection<'tcx>,\n+                   proj: &LvalueProjection<'tcx>,\n                    base: MovePathIndex) -> Lookup<MovePathIndex> {\n         let MovePathLookup { ref mut projections,\n                              ref mut next_index, .. } = *self;\n@@ -484,7 +483,7 @@ impl<'a, 'tcx> MovePathDataBuilder<'a, 'tcx> {\n }\n \n impl<'tcx> MoveData<'tcx> {\n-    pub fn gather_moves(mir: &Mir<'tcx>, tcx: &ty::TyCtxt<'tcx>) -> Self {\n+    pub fn gather_moves(mir: &Mir<'tcx>, tcx: &TyCtxt<'tcx>) -> Self {\n         gather_moves(mir, tcx)\n     }\n }\n@@ -495,7 +494,7 @@ enum StmtKind {\n     Aggregate, Drop, CallFn, CallArg, Return,\n }\n \n-fn gather_moves<'tcx>(mir: &Mir<'tcx>, tcx: &ty::TyCtxt<'tcx>) -> MoveData<'tcx> {\n+fn gather_moves<'tcx>(mir: &Mir<'tcx>, tcx: &TyCtxt<'tcx>) -> MoveData<'tcx> {\n     use self::StmtKind as SK;\n \n     let bbs = mir.all_basic_blocks();\n@@ -554,9 +553,9 @@ fn gather_moves<'tcx>(mir: &Mir<'tcx>, tcx: &ty::TyCtxt<'tcx>) -> MoveData<'tcx>\n                         Rvalue::Box(ref _ty) => {\n                             // this is creating uninitialized\n                             // memory that needs to be initialized.\n-                            let deref_lval = Lvalue::Projection(Box::new( repr::Projection {\n+                            let deref_lval = Lvalue::Projection(Box::new(Projection {\n                                 base: lval.clone(),\n-                                elem: repr::ProjectionElem::Deref,\n+                                elem: ProjectionElem::Deref,\n                             }));\n                             bb_ctxt.on_move_out_lval(SK::Box, &deref_lval, source);\n                         }\n@@ -668,7 +667,7 @@ fn gather_moves<'tcx>(mir: &Mir<'tcx>, tcx: &ty::TyCtxt<'tcx>) -> MoveData<'tcx>\n }\n \n struct BlockContext<'b, 'a: 'b, 'tcx: 'a> {\n-    tcx: &'b ty::TyCtxt<'tcx>,\n+    tcx: &'b TyCtxt<'tcx>,\n     moves: &'b mut Vec<MoveOut>,\n     builder: MovePathDataBuilder<'a, 'tcx>,\n     path_map: &'b mut Vec<Vec<MoveOutIndex>>,\n@@ -678,7 +677,7 @@ struct BlockContext<'b, 'a: 'b, 'tcx: 'a> {\n impl<'b, 'a: 'b, 'tcx: 'a> BlockContext<'b, 'a, 'tcx> {\n     fn on_move_out_lval(&mut self,\n                         stmt_kind: StmtKind,\n-                        lval: &repr::Lvalue<'tcx>,\n+                        lval: &Lvalue<'tcx>,\n                         source: Location) {\n         let tcx = self.tcx;\n         let lval_ty = self.builder.mir.lvalue_ty(tcx, lval);\n@@ -724,10 +723,10 @@ impl<'b, 'a: 'b, 'tcx: 'a> BlockContext<'b, 'a, 'tcx> {\n         self.loc_map_bb[i].push(index);\n     }\n \n-    fn on_operand(&mut self, stmt_kind: StmtKind, operand: &repr::Operand<'tcx>, source: Location) {\n+    fn on_operand(&mut self, stmt_kind: StmtKind, operand: &Operand<'tcx>, source: Location) {\n         match *operand {\n-            repr::Operand::Constant(..) => {} // not-a-move\n-            repr::Operand::Consume(ref lval) => { // a move\n+            Operand::Constant(..) => {} // not-a-move\n+            Operand::Consume(ref lval) => { // a move\n                 self.on_move_out_lval(stmt_kind, lval, source);\n             }\n         }"}]}