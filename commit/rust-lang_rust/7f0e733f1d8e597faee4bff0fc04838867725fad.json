{"sha": "7f0e733f1d8e597faee4bff0fc04838867725fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMGU3MzNmMWQ4ZTU5N2ZhZWU0YmZmMGZjMDQ4Mzg4Njc3MjVmYWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-30T15:56:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-17T03:25:51Z"}, "message": "rustc_trans: Update LLVMBuildLandingPad signature\n\nThe C API of this function changed so it no longer takes a personality function.\nA shim was introduced to call the right LLVM function (depending on which\nversion we're compiled against) to set the personality function on the outer\nfunction.\n\nThe compiler only ever sets one personality function for all generated\nfunctions, so this should be equivalent.", "tree": {"sha": "4d0fbbc0f4de4c599a865b22ba6a00bcc736798e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d0fbbc0f4de4c599a865b22ba6a00bcc736798e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0e733f1d8e597faee4bff0fc04838867725fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0e733f1d8e597faee4bff0fc04838867725fad", "html_url": "https://github.com/rust-lang/rust/commit/7f0e733f1d8e597faee4bff0fc04838867725fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0e733f1d8e597faee4bff0fc04838867725fad/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55d3f1ba1e78466d2f5703a9e291f4849ddcc94", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55d3f1ba1e78466d2f5703a9e291f4849ddcc94", "html_url": "https://github.com/rust-lang/rust/commit/c55d3f1ba1e78466d2f5703a9e291f4849ddcc94"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "05f82b86ebbc9c17ec2d9725d35de8e083d95a39", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=7f0e733f1d8e597faee4bff0fc04838867725fad", "patch": "@@ -1136,12 +1136,13 @@ extern {\n                            Catch: BasicBlockRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildLandingPad(B: BuilderRef,\n-                               Ty: TypeRef,\n-                               PersFn: ValueRef,\n-                               NumClauses: c_uint,\n-                               Name: *const c_char)\n-                               -> ValueRef;\n+    pub fn LLVMRustBuildLandingPad(B: BuilderRef,\n+                                   Ty: TypeRef,\n+                                   PersFn: ValueRef,\n+                                   NumClauses: c_uint,\n+                                   Name: *const c_char,\n+                                   F: ValueRef)\n+                                   -> ValueRef;\n     pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;\n     pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n "}, {"sha": "3e4452a23b9f7c893460421590bb25c506cbfdea", "filename": "src/librustc_trans/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuild.rs?ref=7f0e733f1d8e597faee4bff0fc04838867725fad", "patch": "@@ -1039,7 +1039,7 @@ pub fn LandingPad(cx: Block, ty: Type, pers_fn: ValueRef,\n                   num_clauses: usize) -> ValueRef {\n     check_not_terminated(cx);\n     assert!(!cx.unreachable.get());\n-    B(cx).landing_pad(ty, pers_fn, num_clauses)\n+    B(cx).landing_pad(ty, pers_fn, num_clauses, cx.fcx.llfn)\n }\n \n pub fn SetCleanup(cx: Block, landing_pad: ValueRef) {"}, {"sha": "e39fc18dc7bf1140c70c5738f011b4cb37c8be69", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=7f0e733f1d8e597faee4bff0fc04838867725fad", "patch": "@@ -927,11 +927,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef, num_clauses: usize) -> ValueRef {\n+    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,\n+                       num_clauses: usize,\n+                       llfn: ValueRef) -> ValueRef {\n         self.count_insn(\"landingpad\");\n         unsafe {\n-            llvm::LLVMBuildLandingPad(\n-                self.llbuilder, ty.to_ref(), pers_fn, num_clauses as c_uint, noname())\n+            llvm::LLVMRustBuildLandingPad(self.llbuilder, ty.to_ref(), pers_fn,\n+                                          num_clauses as c_uint, noname(), llfn)\n         }\n     }\n "}, {"sha": "163e95b890f4b25ab2a513a9d3774cd98e679fbc", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7f0e733f1d8e597faee4bff0fc04838867725fad/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=7f0e733f1d8e597faee4bff0fc04838867725fad", "patch": "@@ -942,3 +942,18 @@ extern \"C\" void LLVMWriteSMDiagnosticToString(LLVMSMDiagnosticRef d, RustStringR\n     raw_rust_string_ostream os(str);\n     unwrap(d)->print(\"\", os);\n }\n+\n+extern \"C\" LLVMValueRef\n+LLVMRustBuildLandingPad(LLVMBuilderRef Builder,\n+                        LLVMTypeRef Ty,\n+                        LLVMValueRef PersFn,\n+                        unsigned NumClauses,\n+                        const char* Name,\n+                        LLVMValueRef F) {\n+#if LLVM_VERSION_MINOR >= 7\n+    unwrap<Function>(F)->setPersonalityFn(unwrap<Constant>(PersFn));\n+    return LLVMBuildLandingPad(Builder, Ty, NumClauses, Name);\n+#else\n+    return LLVMBuildLandingPad(Builder, Ty, PersFn, NumClauses, Name);\n+#endif\n+}"}]}