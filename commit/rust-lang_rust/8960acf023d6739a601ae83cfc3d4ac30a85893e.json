{"sha": "8960acf023d6739a601ae83cfc3d4ac30a85893e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NjBhY2YwMjNkNjczOWE2MDFhZTgzY2ZjM2Q0YWMzMGE4NTg5M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T10:11:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T10:11:37Z"}, "message": "Auto merge of #66277 - peter-wilkins:impl-from-wider-non-zeros, r=SimonSapin\n\nFrom<NonZero*> impls for wider NonZero types\n\nCloses: https://github.com/rust-lang/rust/issues/66291", "tree": {"sha": "fb6c3b1132bc1fcc29eec77c18578ef2a750cc93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb6c3b1132bc1fcc29eec77c18578ef2a750cc93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8960acf023d6739a601ae83cfc3d4ac30a85893e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8960acf023d6739a601ae83cfc3d4ac30a85893e", "html_url": "https://github.com/rust-lang/rust/commit/8960acf023d6739a601ae83cfc3d4ac30a85893e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8960acf023d6739a601ae83cfc3d4ac30a85893e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883b6aacba85b524a194577a24a47f115106ecc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/883b6aacba85b524a194577a24a47f115106ecc8", "html_url": "https://github.com/rust-lang/rust/commit/883b6aacba85b524a194577a24a47f115106ecc8"}, {"sha": "8f6a06285efe12d778ff7f44067aebeed7b14428", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6a06285efe12d778ff7f44067aebeed7b14428", "html_url": "https://github.com/rust-lang/rust/commit/8f6a06285efe12d778ff7f44067aebeed7b14428"}], "stats": {"total": 262, "additions": 177, "deletions": 85}, "files": [{"sha": "6f5ee756f58f6f350d5bf2e18a75f1738a8cac7b", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=8960acf023d6739a601ae83cfc3d4ac30a85893e", "patch": "@@ -366,3 +366,84 @@ mod ptr_try_from_impls {\n     rev!(try_from_unbounded, isize, i32, i64);\n     rev!(try_from_both_bounded, isize, i128);\n }\n+\n+// Conversion traits for non-zero integer types\n+use crate::num::NonZeroI128;\n+use crate::num::NonZeroI16;\n+use crate::num::NonZeroI32;\n+use crate::num::NonZeroI64;\n+use crate::num::NonZeroI8;\n+use crate::num::NonZeroIsize;\n+use crate::num::NonZeroU128;\n+use crate::num::NonZeroU16;\n+use crate::num::NonZeroU32;\n+use crate::num::NonZeroU64;\n+use crate::num::NonZeroU8;\n+use crate::num::NonZeroUsize;\n+\n+macro_rules! nzint_impl_from {\n+    ($Small: ty, $Large: ty, #[$attr:meta], $doc: expr) => {\n+        #[$attr]\n+        #[doc = $doc]\n+        impl From<$Small> for $Large {\n+            #[inline]\n+            fn from(small: $Small) -> $Large {\n+                // SAFETY: input type guarantees the value is non-zero\n+                unsafe {\n+                    <$Large>::new_unchecked(small.get().into())\n+                }\n+            }\n+        }\n+    };\n+    ($Small: ty, $Large: ty, #[$attr:meta]) => {\n+        nzint_impl_from!($Small,\n+                   $Large,\n+                   #[$attr],\n+                   concat!(\"Converts `\",\n+                           stringify!($Small),\n+                           \"` to `\",\n+                           stringify!($Large),\n+                           \"` losslessly.\"));\n+    }\n+}\n+\n+// Non-zero Unsigned -> Non-zero Unsigned\n+nzint_impl_from! { NonZeroU8, NonZeroU16, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroU32, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroU64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroU128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroUsize, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU16, NonZeroU32, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU16, NonZeroU64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU16, NonZeroU128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU16, NonZeroUsize, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU32, NonZeroU64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU32, NonZeroU128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU64, NonZeroU128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+\n+// Non-zero Signed -> Non-zero Signed\n+nzint_impl_from! { NonZeroI8, NonZeroI16, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI8, NonZeroI32, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI8, NonZeroI64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI8, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI8, NonZeroIsize, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI16, NonZeroI32, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI16, NonZeroI64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI16, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI16, NonZeroIsize, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI32, NonZeroI64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI32, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroI64, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+\n+// NonZero UnSigned -> Non-zero Signed\n+nzint_impl_from! { NonZeroU8, NonZeroI16, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroI32, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroI64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU8, NonZeroIsize, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU16, NonZeroI32, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU16, NonZeroI64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU16, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU32, NonZeroI64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU32, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+nzint_impl_from! { NonZeroU64, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }"}, {"sha": "d1f518d52dd72735577a5450cbe8efed76ebb866", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 96, "deletions": 85, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8960acf023d6739a601ae83cfc3d4ac30a85893e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8960acf023d6739a601ae83cfc3d4ac30a85893e", "patch": "@@ -131,7 +131,7 @@ macro_rules! from_str_radix_nzint_impl {\n }\n \n from_str_radix_nzint_impl! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize\n-                             NonZeroI8 NonZeroI16 NonZeroI32 NonZeroI64 NonZeroI128 NonZeroIsize }\n+NonZeroI8 NonZeroI16 NonZeroI32 NonZeroI64 NonZeroI128 NonZeroIsize }\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n@@ -162,8 +162,7 @@ from_str_radix_nzint_impl! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]\n #[repr(transparent)]\n-pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-                       pub T);\n+pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for Wrapping<T> {\n@@ -208,30 +207,33 @@ impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n }\n \n // All these modules are technically private and only exposed for coretests:\n-pub mod flt2dec;\n-pub mod dec2flt;\n pub mod bignum;\n+pub mod dec2flt;\n pub mod diy_float;\n+pub mod flt2dec;\n \n mod wrapping;\n \n macro_rules! usize_isize_to_xe_bytes_doc {\n-    () => {\"\n+    () => {\n+        \"\n \n **Note**: This function returns an array of length 2, 4 or 8 bytes\n depending on the target pointer size.\n \n-\"}\n+\"\n+    };\n }\n \n-\n macro_rules! usize_isize_from_xe_bytes_doc {\n-    () => {\"\n+    () => {\n+        \"\n \n **Note**: This function takes an array of length 2, 4 or 8 bytes\n depending on the target pointer size.\n \n-\"}\n+\"\n+    };\n }\n \n macro_rules! int_impl {\n@@ -2238,67 +2240,67 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n #[lang = \"i8\"]\n impl i8 {\n     int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n-        \"[0x12]\", \"[0x12]\", \"\", \"\" }\n+    \"[0x12]\", \"[0x12]\", \"\", \"\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n     int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n-        \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n+    \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n     int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n-        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n+    \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n+    \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n     int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\", 12,\n-         \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n-         \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n+    \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n+    \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n-        170141183460469231731687303715884105727, \"\", \"\", 16,\n-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n-        \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n-          0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\" }\n+    170141183460469231731687303715884105727, \"\", \"\", 16,\n+    \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+    \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+    \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+      0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n-        \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n-        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78]\",\n-        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n+    \"[0x12, 0x34, 0x56, 0x78]\",\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n-        12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n-         \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-         usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n+     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n macro_rules! uint_impl {\n@@ -4060,8 +4062,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n #[lang = \"u8\"]\n impl u8 {\n     uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n-        \"[0x12]\", \"\", \"\" }\n-\n+    \"[0x12]\", \"\", \"\" }\n \n     /// Checks if the value is within the ASCII range.\n     ///\n@@ -4227,7 +4228,7 @@ impl u8 {\n     pub fn is_ascii_alphabetic(&self) -> bool {\n         match *self {\n             b'A'..=b'Z' | b'a'..=b'z' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4262,7 +4263,7 @@ impl u8 {\n     pub fn is_ascii_uppercase(&self) -> bool {\n         match *self {\n             b'A'..=b'Z' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4297,7 +4298,7 @@ impl u8 {\n     pub fn is_ascii_lowercase(&self) -> bool {\n         match *self {\n             b'a'..=b'z' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4335,7 +4336,7 @@ impl u8 {\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n         match *self {\n             b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4370,7 +4371,7 @@ impl u8 {\n     pub fn is_ascii_digit(&self) -> bool {\n         match *self {\n             b'0'..=b'9' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4408,7 +4409,7 @@ impl u8 {\n     pub fn is_ascii_hexdigit(&self) -> bool {\n         match *self {\n             b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4447,7 +4448,7 @@ impl u8 {\n     pub fn is_ascii_punctuation(&self) -> bool {\n         match *self {\n             b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4482,7 +4483,7 @@ impl u8 {\n     pub fn is_ascii_graphic(&self) -> bool {\n         match *self {\n             b'!'..=b'~' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4534,7 +4535,7 @@ impl u8 {\n     pub fn is_ascii_whitespace(&self) -> bool {\n         match *self {\n             b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n \n@@ -4571,67 +4572,67 @@ impl u8 {\n     pub fn is_ascii_control(&self) -> bool {\n         match *self {\n             b'\\0'..=b'\\x1F' | b'\\x7F' => true,\n-            _ => false\n+            _ => false,\n         }\n     }\n }\n \n #[lang = \"u16\"]\n impl u16 {\n     uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-        \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n+    \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n     uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n+    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n     uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n-        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n-        \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-        \"\", \"\"}\n+    \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n+    \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+    \"\", \"\"}\n }\n \n #[lang = \"u128\"]\n impl u128 {\n     uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n-        \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n-          0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n-         \"\", \"\"}\n+    \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+    \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+    \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+      0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n+     \"\", \"\"}\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n     uint_impl! { usize, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-        \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n     uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n-        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n     uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n-        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n-        \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n+    \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n /// A classification of floating point numbers.\n@@ -4703,10 +4704,12 @@ from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n pub struct TryFromIntError(pub(crate) ());\n \n impl TryFromIntError {\n-    #[unstable(feature = \"int_error_internals\",\n-               reason = \"available through Error trait and this method should \\\n-                         not be exposed publicly\",\n-               issue = \"0\")]\n+    #[unstable(\n+        feature = \"int_error_internals\",\n+        reason = \"available through Error trait and this method should \\\n+                  not be exposed publicly\",\n+        issue = \"0\"\n+    )]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {\n         \"out of range integral type conversion attempted\"\n@@ -4765,9 +4768,11 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n     use self::IntErrorKind::*;\n     use self::ParseIntError as PIE;\n \n-    assert!(radix >= 2 && radix <= 36,\n-           \"from_str_radix_int: must lie in the range `[2, 36]` - found {}\",\n-           radix);\n+    assert!(\n+        radix >= 2 && radix <= 36,\n+        \"from_str_radix_int: must lie in the range `[2, 36]` - found {}\",\n+        radix\n+    );\n \n     if src.is_empty() {\n         return Err(PIE { kind: Empty });\n@@ -4848,10 +4853,12 @@ pub struct ParseIntError {\n }\n \n /// Enum to store the various types of errors that can cause parsing an integer to fail.\n-#[unstable(feature = \"int_error_matching\",\n-           reason = \"it can be useful to match errors when making error messages \\\n-                     for integer parsing\",\n-           issue = \"22639\")]\n+#[unstable(\n+    feature = \"int_error_matching\",\n+    reason = \"it can be useful to match errors when making error messages \\\n+              for integer parsing\",\n+    issue = \"22639\"\n+)]\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[non_exhaustive]\n pub enum IntErrorKind {\n@@ -4877,17 +4884,21 @@ pub enum IntErrorKind {\n \n impl ParseIntError {\n     /// Outputs the detailed cause of parsing an integer failing.\n-    #[unstable(feature = \"int_error_matching\",\n-               reason = \"it can be useful to match errors when making error messages \\\n-                         for integer parsing\",\n-               issue = \"22639\")]\n+    #[unstable(\n+        feature = \"int_error_matching\",\n+        reason = \"it can be useful to match errors when making error messages \\\n+                  for integer parsing\",\n+        issue = \"22639\"\n+    )]\n     pub fn kind(&self) -> &IntErrorKind {\n         &self.kind\n     }\n-    #[unstable(feature = \"int_error_internals\",\n-               reason = \"available through Error trait and this method should \\\n-                         not be exposed publicly\",\n-               issue = \"0\")]\n+    #[unstable(\n+        feature = \"int_error_internals\",\n+        reason = \"available through Error trait and this method should \\\n+                  not be exposed publicly\",\n+        issue = \"0\"\n+    )]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {\n         match self.kind {"}]}