{"sha": "5d25b8fc45f66cdd1b19c87cce38eda86141dcf8", "node_id": "C_kwDOAAsO6NoAKDVkMjViOGZjNDVmNjZjZGQxYjE5Yzg3Y2NlMzhlZGE4NjE0MWRjZjg", "commit": {"author": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-23T14:39:27Z"}, "committer": {"name": "yvt", "email": "i@yvt.jp", "date": "2022-04-24T16:55:36Z"}, "message": "Convert inline assembly `sym` operands into GCC input operands\n\nThis commit updates `<Builder as AsmBuilderMethods>::codegen_inline_asm`\nto convert `sym` operands into `\"X\" (&func_or_static)` input operands\nto indicate the dependency on the referenced symbols and prevent them\nfrom being eliminated.\n\nWe follow the suit of the LLVM codegen with a mixture of its differing\ntechniques for `asm!` and `global_asm!`. The codegen module generates\ninput operands for the `sym` operands (as in `asm!` in cg_llvm).\nHowever, the codegen module replaces all placeholders with mangled\nsymbol names before passing the assembly template string to the backend\n(as in `global_asm!` in cg_llvm), which means these input operands are\nnever referenced in the final assembly template string.\n\nUnlike the LLVM codegen, the input operand constraint must be `X`\ninstead of `s`. If the `s` constraint is used, GCC will employ checks to\nmake sure that the operand can really be represented by a simple\nsymbolic constant, thus rejecting symbols requiring GOT, etc. to\nresolve. Such checks are unnecessary for Rust `sym` as it's up to\nprogrammers to handle such complex cases, e.g., by manually appending\nGOT addressing modifiers to the substituted symbol names.\n\nUsing the `X` constraint doesn't seem to generate any extra code, so\nthis will not compromise the property of naked functions.", "tree": {"sha": "0bccf321647bdd0a339c86a0824f2f66b701cbc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bccf321647bdd0a339c86a0824f2f66b701cbc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8", "html_url": "https://github.com/rust-lang/rust/commit/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8/comments", "author": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yvt", "id": 5253988, "node_id": "MDQ6VXNlcjUyNTM5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/5253988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yvt", "html_url": "https://github.com/yvt", "followers_url": "https://api.github.com/users/yvt/followers", "following_url": "https://api.github.com/users/yvt/following{/other_user}", "gists_url": "https://api.github.com/users/yvt/gists{/gist_id}", "starred_url": "https://api.github.com/users/yvt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yvt/subscriptions", "organizations_url": "https://api.github.com/users/yvt/orgs", "repos_url": "https://api.github.com/users/yvt/repos", "events_url": "https://api.github.com/users/yvt/events{/privacy}", "received_events_url": "https://api.github.com/users/yvt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4210fd49cbea8ef241138a2fb77612f43e0b87a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4210fd49cbea8ef241138a2fb77612f43e0b87a7", "html_url": "https://github.com/rust-lang/rust/commit/4210fd49cbea8ef241138a2fb77612f43e0b87a7"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "053a6c595e97e34797c282b521c1f1f89c28db87", "filename": "src/asm.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d25b8fc45f66cdd1b19c87cce38eda86141dcf8/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=5d25b8fc45f66cdd1b19c87cce38eda86141dcf8", "patch": "@@ -13,6 +13,7 @@ use std::borrow::Cow;\n use crate::builder::Builder;\n use crate::context::CodegenCx;\n use crate::type_of::LayoutGccExt;\n+use crate::callee::get_fn;\n \n \n // Rust asm! and GCC Extended Asm semantics differ substantially.\n@@ -343,9 +344,24 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     // processed in the previous pass\n                 }\n \n-                InlineAsmOperandRef::Const { .. }\n-                | InlineAsmOperandRef::SymFn { .. }\n-                | InlineAsmOperandRef::SymStatic { .. } => {\n+                InlineAsmOperandRef::SymFn { instance } => {\n+                    inputs.push(AsmInOperand {\n+                        constraint: \"X\".into(),\n+                        rust_idx,\n+                        val: self.cx.rvalue_as_function(get_fn(self.cx, instance))\n+                            .get_address(None),\n+                    });\n+                }\n+\n+                InlineAsmOperandRef::SymStatic { def_id } => {\n+                    inputs.push(AsmInOperand {\n+                        constraint: \"X\".into(),\n+                        rust_idx,\n+                        val: self.cx.get_static(def_id).get_address(None),\n+                    });\n+                }\n+\n+                InlineAsmOperandRef::Const { .. } => {\n                     // processed in the previous pass\n                 }\n             }"}]}