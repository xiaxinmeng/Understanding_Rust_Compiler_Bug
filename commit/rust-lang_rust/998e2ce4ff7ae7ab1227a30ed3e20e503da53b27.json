{"sha": "998e2ce4ff7ae7ab1227a30ed3e20e503da53b27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OGUyY2U0ZmY3YWU3YWIxMjI3YTMwZWQzZTIwZTUwM2RhNTNiMjc=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-05-29T01:12:36Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-05-29T02:16:49Z"}, "message": "Remove passes that were causing bad optmizations", "tree": {"sha": "8886f78ade931e7dd69f989e5a74333424498ad7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8886f78ade931e7dd69f989e5a74333424498ad7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/998e2ce4ff7ae7ab1227a30ed3e20e503da53b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/998e2ce4ff7ae7ab1227a30ed3e20e503da53b27", "html_url": "https://github.com/rust-lang/rust/commit/998e2ce4ff7ae7ab1227a30ed3e20e503da53b27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/998e2ce4ff7ae7ab1227a30ed3e20e503da53b27/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4988c89e86d7120d5c9b0d5ccabba4e8763e1fe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4988c89e86d7120d5c9b0d5ccabba4e8763e1fe7", "html_url": "https://github.com/rust-lang/rust/commit/4988c89e86d7120d5c9b0d5ccabba4e8763e1fe7"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "ba4170fde56855f2c35343e2bb6b4236a062bd05", "filename": "src/librustc/back/passes.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/998e2ce4ff7ae7ab1227a30ed3e20e503da53b27/src%2Flibrustc%2Fback%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/998e2ce4ff7ae7ab1227a30ed3e20e503da53b27/src%2Flibrustc%2Fback%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fpasses.rs?ref=998e2ce4ff7ae7ab1227a30ed3e20e503da53b27", "patch": "@@ -55,12 +55,13 @@ impl PassManager {\n \n pub fn populatePassManager(pm: &mut PassManager, level:session::OptLevel) {\n     unsafe {\n+        // We add a lot of normally-unused prototypes, so always strip them\n+        // straight away, later passes will get rid of any that are optimized\n+        // away\n+        pm.addPass(llvm::LLVMCreateStripDeadPrototypesPass());\n         if level == session::No {\n             pm.addPass(llvm::LLVMCreateAlwaysInlinerPass());\n \n-            // We add a lot of unused prototypes, so strip them no matter\n-            // what\n-            pm.addPass(llvm::LLVMCreateStripDeadPrototypesPass());\n             return;\n         }\n \n@@ -81,6 +82,13 @@ pub fn populatePassManager(pm: &mut PassManager, level:session::OptLevel) {\n \n         pm.addPass(llvm::LLVMCreatePruneEHPass());\n \n+        if level == session::Aggressive {\n+            // Do this before inlining, since inlining might\n+            // make minor changes to functions that mean they\n+            // can't be merged, despite being almost identical\n+            pm.addPass(llvm::LLVMCreateMergeFunctionsPass());\n+        }\n+\n         match level {\n             session::Less       => pm.addPass(llvm::LLVMCreateFunctionInliningPass(200)),\n             session::Default    => pm.addPass(llvm::LLVMCreateFunctionInliningPass(225)),\n@@ -94,8 +102,6 @@ pub fn populatePassManager(pm: &mut PassManager, level:session::OptLevel) {\n             pm.addPass(llvm::LLVMCreateArgumentPromotionPass());\n         }\n \n-        pm.addPass(llvm::LLVMCreateSROAPass());\n-\n         pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n         pm.addPass(llvm::LLVMCreateSimplifyLibCallsPass());\n         pm.addPass(llvm::LLVMCreateJumpThreadingPass());\n@@ -109,8 +115,6 @@ pub fn populatePassManager(pm: &mut PassManager, level:session::OptLevel) {\n         pm.addPass(llvm::LLVMCreateLoopRotatePass());\n         pm.addPass(llvm::LLVMCreateLICMPass());\n \n-        pm.addPass(llvm::LLVMCreateLoopUnswitchPass());\n-\n         pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n         pm.addPass(llvm::LLVMCreateIndVarSimplifyPass());\n         pm.addPass(llvm::LLVMCreateLoopIdiomPass());\n@@ -134,16 +138,17 @@ pub fn populatePassManager(pm: &mut PassManager, level:session::OptLevel) {\n \n         pm.addPass(llvm::LLVMCreateBBVectorizePass());\n         pm.addPass(llvm::LLVMCreateInstructionCombiningPass());\n+        pm.addPass(llvm::LLVMCreateEarlyCSEPass());\n+\n+        pm.addPass(llvm::LLVMCreateLoopUnrollPass());\n+\n+        pm.addPass(llvm::LLVMCreateAggressiveDCEPass());\n+        pm.addPass(llvm::LLVMCreateCFGSimplificationPass());\n+        pm.addPass(llvm::LLVMCreateInstructionSimplifierPass());\n+\n         if level != session::Less {\n             pm.addPass(llvm::LLVMCreateGlobalDCEPass());\n             pm.addPass(llvm::LLVMCreateConstantMergePass());\n         }\n-\n-        if level == session::Aggressive {\n-            pm.addPass(llvm::LLVMCreateMergeFunctionsPass());\n-        }\n-\n-        pm.addPass(llvm::LLVMCreateStripDeadPrototypesPass());\n-\n     }\n }"}]}