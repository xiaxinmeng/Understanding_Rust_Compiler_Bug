{"sha": "a76943be47cfa3931c09a79cd741c383d8b76a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Njk0M2JlNDdjZmEzOTMxYzA5YTc5Y2Q3NDFjMzgzZDhiNzZhNWI=", "commit": {"author": {"name": "Sangeun Kim", "email": "sammy.kim@samsung.com", "date": "2013-07-26T04:53:29Z"}, "committer": {"name": "Sangeun Kim", "email": "sammy.kim@samsung.com", "date": "2013-08-06T05:45:02Z"}, "message": "Move EnumSet into libextra", "tree": {"sha": "2f1aed55e05e9a416512ed76e89f5ad040a280c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1aed55e05e9a416512ed76e89f5ad040a280c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a76943be47cfa3931c09a79cd741c383d8b76a5b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a76943be47cfa3931c09a79cd741c383d8b76a5b", "html_url": "https://github.com/rust-lang/rust/commit/a76943be47cfa3931c09a79cd741c383d8b76a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a76943be47cfa3931c09a79cd741c383d8b76a5b/comments", "author": {"login": "sammykim", "id": 3492634, "node_id": "MDQ6VXNlcjM0OTI2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3492634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammykim", "html_url": "https://github.com/sammykim", "followers_url": "https://api.github.com/users/sammykim/followers", "following_url": "https://api.github.com/users/sammykim/following{/other_user}", "gists_url": "https://api.github.com/users/sammykim/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammykim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammykim/subscriptions", "organizations_url": "https://api.github.com/users/sammykim/orgs", "repos_url": "https://api.github.com/users/sammykim/repos", "events_url": "https://api.github.com/users/sammykim/events{/privacy}", "received_events_url": "https://api.github.com/users/sammykim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sammykim", "id": 3492634, "node_id": "MDQ6VXNlcjM0OTI2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3492634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammykim", "html_url": "https://github.com/sammykim", "followers_url": "https://api.github.com/users/sammykim/followers", "following_url": "https://api.github.com/users/sammykim/following{/other_user}", "gists_url": "https://api.github.com/users/sammykim/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammykim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammykim/subscriptions", "organizations_url": "https://api.github.com/users/sammykim/orgs", "repos_url": "https://api.github.com/users/sammykim/repos", "events_url": "https://api.github.com/users/sammykim/events{/privacy}", "received_events_url": "https://api.github.com/users/sammykim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbda3fa9383dba653b20bd064102caceef91897a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbda3fa9383dba653b20bd064102caceef91897a", "html_url": "https://github.com/rust-lang/rust/commit/bbda3fa9383dba653b20bd064102caceef91897a"}], "stats": {"total": 96, "additions": 30, "deletions": 66}, "files": [{"sha": "25501faa02e12dd000cc8f1a5201251c1a5d939b", "filename": "src/libextra/enum_set.rs", "status": "renamed", "additions": 16, "deletions": 46, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=a76943be47cfa3931c09a79cd741c383d8b76a5b", "patch": "@@ -11,14 +11,18 @@\n use std::iterator::Iterator;\n \n #[deriving(Clone, Eq, IterBytes, ToStr)]\n+/// A specialized Set implementation to use enum types.\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n     // for which no variant exists\n     priv bits: uint\n }\n \n+/// An iterface for casting C-like enum to uint and back.\n pub trait CLike {\n+    /// Converts C-like enum to uint.\n     pub fn to_uint(&self) -> uint;\n+    /// Converts uint to C-like enum.\n     pub fn from_uint(uint) -> Self;\n }\n \n@@ -27,54 +31,47 @@ fn bit<E:CLike>(e: E) -> uint {\n }\n \n impl<E:CLike> EnumSet<E> {\n+    /// Returns an empty EnumSet.\n     pub fn empty() -> EnumSet<E> {\n         EnumSet {bits: 0}\n     }\n \n+    /// Returns true if an EnumSet is empty.\n     pub fn is_empty(&self) -> bool {\n         self.bits == 0\n     }\n \n+    /// Returns true if an EnumSet contains any enum of a given EnumSet\n     pub fn intersects(&self, e: EnumSet<E>) -> bool {\n         (self.bits & e.bits) != 0\n     }\n \n+    /// Returns an intersection of both EnumSets.\n     pub fn intersection(&self, e: EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits & e.bits}\n     }\n \n+    /// Returns true if a given EnumSet is included in an EnumSet.\n     pub fn contains(&self, e: EnumSet<E>) -> bool {\n         (self.bits & e.bits) == e.bits\n     }\n \n+    /// Returns a union of both EnumSets.\n     pub fn union(&self, e: EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits | e.bits}\n     }\n \n+    /// Add an enum to an EnumSet\n     pub fn add(&mut self, e: E) {\n         self.bits |= bit(e);\n     }\n \n+    /// Returns true if an EnumSet contains a given enum\n     pub fn contains_elem(&self, e: E) -> bool {\n         (self.bits & bit(e)) != 0\n     }\n \n-    pub fn each(&self, f: &fn(E) -> bool) -> bool {\n-        let mut bits = self.bits;\n-        let mut index = 0;\n-        while bits != 0 {\n-            if (bits & 1) != 0 {\n-                let e = CLike::from_uint(index);\n-                if !f(e) {\n-                    return false;\n-                }\n-            }\n-            index += 1;\n-            bits >>= 1;\n-        }\n-        return true;\n-    }\n-\n+    /// Returns an iterator over an EnumSet\n     pub fn iter(&self) -> EnumSetIterator<E> {\n         EnumSetIterator::new(self.bits)\n     }\n@@ -98,6 +95,7 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n     }\n }\n \n+/// An iterator over an EnumSet\n pub struct EnumSetIterator<E> {\n     priv index: uint,\n     priv bits: uint,\n@@ -136,7 +134,7 @@ mod test {\n \n     use std::cast;\n \n-    use util::enum_set::*;\n+    use enum_set::*;\n \n     #[deriving(Eq)]\n     enum Foo {\n@@ -236,7 +234,7 @@ mod test {\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n-    // iter / each\n+    // iter\n \n     #[test]\n     fn test_iterator() {\n@@ -262,34 +260,6 @@ mod test {\n         assert_eq!(~[A,B,C], elems)\n     }\n \n-    #[test]\n-    fn test_each() {\n-        let mut e1: EnumSet<Foo> = EnumSet::empty();\n-\n-        assert_eq!(~[], collect(e1))\n-\n-        e1.add(A);\n-        assert_eq!(~[A], collect(e1))\n-\n-        e1.add(C);\n-        assert_eq!(~[A,C], collect(e1))\n-\n-        e1.add(C);\n-        assert_eq!(~[A,C], collect(e1))\n-\n-        e1.add(B);\n-        assert_eq!(~[A,B,C], collect(e1))\n-    }\n-\n-    fn collect(e: EnumSet<Foo>) -> ~[Foo] {\n-        let mut elems = ~[];\n-        e.each(|elem| {\n-           elems.push(elem);\n-           true\n-        });\n-        elems\n-    }\n-\n     ///////////////////////////////////////////////////////////////////////////\n     // operators\n ", "previous_filename": "src/librustc/util/enum_set.rs"}, {"sha": "58929778a59e20f6afb11105979894b771755207", "filename": "src/libextra/extra.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibextra%2Fextra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibextra%2Fextra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fextra.rs?ref=a76943be47cfa3931c09a79cd741c383d8b76a5b", "patch": "@@ -91,6 +91,7 @@ pub mod par;\n pub mod base64;\n pub mod rl;\n pub mod workcache;\n+pub mod enum_set;\n #[path=\"num/bigint.rs\"]\n pub mod bigint;\n #[path=\"num/rational.rs\"]"}, {"sha": "ffd79433b76930fe7186c138a71fdaaed995436a", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=a76943be47cfa3931c09a79cd741c383d8b76a5b", "patch": "@@ -413,15 +413,14 @@ fn enc_fn_sig(w: @io::Writer, cx: @ctxt, fsig: &ty::FnSig) {\n }\n \n fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: &ty::ParamBounds) {\n-    do bs.builtin_bounds.each |bound| {\n+    for bound in bs.builtin_bounds.iter() {\n         match bound {\n             ty::BoundSend => w.write_char('S'),\n             ty::BoundFreeze => w.write_char('K'),\n             ty::BoundStatic => w.write_char('O'),\n             ty::BoundSized => w.write_char('Z'),\n         }\n-        true\n-    };\n+    }\n \n     for &tp in bs.trait_bounds.iter() {\n         w.write_char('I');"}, {"sha": "84eb371d7b34ac49a51b99bbde139804bd918fbc", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=a76943be47cfa3931c09a79cd741c383d8b76a5b", "patch": "@@ -338,12 +338,11 @@ pub fn check_builtin_bounds(cx: Context, ty: ty::t, bounds: ty::BuiltinBounds,\n {\n     let kind = ty::type_contents(cx.tcx, ty);\n     let mut missing = ty::EmptyBuiltinBounds();\n-    do bounds.each |bound| {\n+    for bound in bounds.iter() {\n         if !kind.meets_bound(cx.tcx, bound) {\n             missing.add(bound);\n         }\n-        true\n-    };\n+    }\n     if !missing.is_empty() {\n         any_missing(missing);\n     }"}, {"sha": "a53bdff85f9dc2cb4903f2ef47d67b2b69969ce0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a76943be47cfa3931c09a79cd741c383d8b76a5b", "patch": "@@ -25,7 +25,6 @@ use util::ppaux::{note_and_explain_region, bound_region_ptr_to_str};\n use util::ppaux::{trait_store_to_str, ty_to_str, vstore_to_str};\n use util::ppaux::{Repr, UserString};\n use util::common::{indenter};\n-use util::enum_set::{EnumSet, CLike};\n \n use std::cast;\n use std::cmp;\n@@ -48,6 +47,7 @@ use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n use syntax::abi::AbiSet;\n use syntax;\n+use extra::enum_set::{EnumSet, CLike};\n \n pub static INITIAL_DISCRIMINANT_VALUE: uint = 0;\n \n@@ -2287,7 +2287,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         // This is like with typarams below, but less \"pessimistic\" and also\n         // dependent on the trait store.\n         let mut bt = TC_NONE;\n-        do (AllBuiltinBounds() - bounds).each |bound| {\n+        for bound in (AllBuiltinBounds() - bounds).iter() {\n             bt = bt + match bound {\n                 BoundStatic if bounds.contains_elem(BoundSend)\n                             => TC_NONE, // Send bound implies static bound.\n@@ -2296,8 +2296,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 BoundFreeze => TC_MUTABLE,\n                 BoundSized  => TC_NONE, // don't care if interior is sized\n             };\n-            true\n-        };\n+        }\n         st + mt + bt\n     }\n \n@@ -2308,7 +2307,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         let _i = indenter();\n \n         let mut tc = TC_ALL;\n-        do type_param_def.bounds.builtin_bounds.each |bound| {\n+        for bound in type_param_def.bounds.builtin_bounds.iter() {\n             debug!(\"tc = %s, bound = %?\", tc.to_str(), bound);\n             tc = tc - match bound {\n                 BoundStatic => TypeContents::nonstatic(cx),\n@@ -2317,8 +2316,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 // The dynamic-size bit can be removed at pointer-level, etc.\n                 BoundSized => TypeContents::dynamically_sized(cx),\n             };\n-            true\n-        };\n+        }\n \n         debug!(\"result = %s\", tc.to_str());\n         return tc;"}, {"sha": "46414a7a5e23e0cc13e0e886d94db7c872a2c20c", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=a76943be47cfa3931c09a79cd741c383d8b76a5b", "patch": "@@ -96,7 +96,6 @@ pub mod driver;\n pub mod util {\n     pub mod common;\n     pub mod ppaux;\n-    pub mod enum_set;\n }\n \n pub mod lib {"}, {"sha": "8329ad2cdf1de34ca864f5919f6681ed36b90ecf", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76943be47cfa3931c09a79cd741c383d8b76a5b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=a76943be47cfa3931c09a79cd741c383d8b76a5b", "patch": "@@ -589,15 +589,14 @@ impl Repr for ty::RegionSubsts {\n impl Repr for ty::ParamBounds {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         let mut res = ~[];\n-        do self.builtin_bounds.each |b| {\n+        for b in self.builtin_bounds.iter() {\n             res.push(match b {\n                 ty::BoundStatic => ~\"'static\",\n                 ty::BoundSend => ~\"Send\",\n                 ty::BoundFreeze => ~\"Freeze\",\n                 ty::BoundSized => ~\"Sized\",\n             });\n-            true\n-        };\n+        }\n         for t in self.trait_bounds.iter() {\n             res.push(t.repr(tcx));\n         }\n@@ -833,10 +832,9 @@ impl UserString for ty::BuiltinBounds {\n     fn user_string(&self, tcx: ctxt) -> ~str {\n         if self.is_empty() { ~\"<no-bounds>\" } else {\n             let mut result = ~[];\n-            do self.each |bb| {\n+            for bb in self.iter() {\n                 result.push(bb.user_string(tcx));\n-                true\n-            };\n+            }\n             result.connect(\"+\")\n         }\n     }"}]}