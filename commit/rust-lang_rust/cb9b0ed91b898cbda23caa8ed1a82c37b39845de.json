{"sha": "cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOWIwZWQ5MWI4OThjYmRhMjNjYWE4ZWQxYTgyYzM3YjM5ODQ1ZGU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-24T03:36:37Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-24T10:23:37Z"}, "message": "Disable old trans access via -Z orbit, #[rustc_no_mir] or --disable-orbit.", "tree": {"sha": "6c63d0df923fda6adf374e0d2be44f64c80c2087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c63d0df923fda6adf374e0d2be44f64c80c2087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "html_url": "https://github.com/rust-lang/rust/commit/cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "html_url": "https://github.com/rust-lang/rust/commit/a66fa96d1871ee71cc382a276a3e52f6f6e56e01"}], "stats": {"total": 490, "additions": 68, "deletions": 422}, "files": [{"sha": "a48ff6a76109c37a618dbd9179181f87737cfa15", "filename": "configure", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/configure", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -733,8 +733,6 @@ if [ -n \"$CFG_ENABLE_DEBUG_ASSERTIONS\" ]; then putvar CFG_ENABLE_DEBUG_ASSERTION\n if [ -n \"$CFG_ENABLE_DEBUGINFO\" ]; then putvar CFG_ENABLE_DEBUGINFO; fi\n if [ -n \"$CFG_ENABLE_DEBUG_JEMALLOC\" ]; then putvar CFG_ENABLE_DEBUG_JEMALLOC; fi\n \n-if [ -n \"$CFG_DISABLE_ORBIT\" ]; then putvar CFG_DISABLE_ORBIT; fi\n-\n step_msg \"looking for build programs\"\n \n probe_need CFG_CURL curl"}, {"sha": "428d9d16182abd52df65e641c7866b35ad371579", "filename": "mk/main.mk", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -162,12 +162,6 @@ ifdef CFG_ENABLE_DEBUGINFO\n   CFG_RUSTC_FLAGS += -g\n endif\n \n-ifdef CFG_DISABLE_ORBIT\n-  $(info cfg: HOLD HOLD HOLD (CFG_DISABLE_ORBIT))\n-  RUSTFLAGS_STAGE1 += -Z orbit=off\n-  RUSTFLAGS_STAGE2 += -Z orbit=off\n-endif\n-\n ifdef SAVE_TEMPS\n   CFG_RUSTC_FLAGS += -C save-temps\n endif"}, {"sha": "852ff091259d16831ccb725a69651fe7cd5e42ce", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -605,8 +605,6 @@ macro_rules! options {\n         pub const parse_bool: Option<&'static str> = None;\n         pub const parse_opt_bool: Option<&'static str> =\n             Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n-        pub const parse_all_bool: Option<&'static str> =\n-            Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n         pub const parse_string: Option<&'static str> = Some(\"a string\");\n         pub const parse_opt_string: Option<&'static str> = Some(\"a string\");\n         pub const parse_list: Option<&'static str> = Some(\"a space-separated list of strings\");\n@@ -656,25 +654,6 @@ macro_rules! options {\n             }\n         }\n \n-        fn parse_all_bool(slot: &mut bool, v: Option<&str>) -> bool {\n-            match v {\n-                Some(s) => {\n-                    match s {\n-                        \"n\" | \"no\" | \"off\" => {\n-                            *slot = false;\n-                        }\n-                        \"y\" | \"yes\" | \"on\" => {\n-                            *slot = true;\n-                        }\n-                        _ => { return false; }\n-                    }\n-\n-                    true\n-                },\n-                None => { *slot = true; true }\n-            }\n-        }\n-\n         fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = Some(s.to_string()); true },\n@@ -930,8 +909,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"dump MIR state at various points in translation\"),\n     dump_mir_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"the directory the MIR is dumped into\"),\n-    orbit: bool = (true, parse_all_bool, [UNTRACKED],\n-          \"get MIR where it belongs - everywhere; most importantly, in orbit\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1324,15 +1301,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         })\n     });\n \n-    let mut debugging_opts = build_debugging_options(matches, error_format);\n-\n-    // Incremental compilation only works reliably when translation is done via\n-    // MIR, so let's enable -Z orbit if necessary (see #34973).\n-    if debugging_opts.incremental.is_some() && !debugging_opts.orbit {\n-        early_warn(error_format, \"Automatically enabling `-Z orbit` because \\\n-                                  `-Z incremental` was specified\");\n-        debugging_opts.orbit = true;\n-    }\n+    let debugging_opts = build_debugging_options(matches, error_format);\n \n     let mir_opt_level = debugging_opts.mir_opt_level.unwrap_or(1);\n \n@@ -2424,8 +2393,6 @@ mod tests {\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.dump_mir_dir = Some(String::from(\"abc\"));\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-        opts.debugging_opts.orbit = false;\n-        assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         // Make sure changing a [TRACKED] option changes the hash\n         opts = reference.clone();"}, {"sha": "a1f3e4e5b59c624087994eb1adcec95204a59cb3", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -1424,26 +1424,17 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n             false\n         };\n \n-        let check_attrs = |attrs: &[ast::Attribute]| {\n-            let default_to_mir = ccx.sess().opts.debugging_opts.orbit;\n-            let invert = if default_to_mir { \"rustc_no_mir\" } else { \"rustc_mir\" };\n-            (default_to_mir ^ attrs.iter().any(|item| item.check_name(invert)),\n-             attrs.iter().any(|item| item.check_name(\"no_debug\")))\n-        };\n-\n-        let (use_mir, no_debug) = if let Some(id) = local_id {\n-            check_attrs(ccx.tcx().map.attrs(id))\n+        let no_debug = if let Some(id) = local_id {\n+            ccx.tcx().map.attrs(id)\n+               .iter().any(|item| item.check_name(\"no_debug\"))\n         } else if let Some(def_id) = def_id {\n-            check_attrs(&ccx.sess().cstore.item_attrs(def_id))\n+            ccx.sess().cstore.item_attrs(def_id)\n+               .iter().any(|item| item.check_name(\"no_debug\"))\n         } else {\n-            check_attrs(&[])\n+            false\n         };\n \n-        let mir = if use_mir {\n-            def_id.and_then(|id| ccx.get_mir(id))\n-        } else {\n-            None\n-        };\n+        let mir = def_id.and_then(|id| ccx.get_mir(id));\n \n         let debug_context = if let (false, Some(definition)) = (no_debug, definition) {\n             let (instance, sig, abi, _) = definition;\n@@ -1846,6 +1837,8 @@ pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     if fcx.mir.is_some() {\n         return mir::trans_mir(&fcx);\n+    } else {\n+        span_bug!(body.span, \"attempted translation of `{}` w/o MIR\", instance);\n     }\n \n     debuginfo::fill_scope_map_for_function(&fcx, decl, body, inlined_id);"}, {"sha": "e0fa8df1100ac4008e11eba94a5e1e99451ecc03", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -181,16 +181,6 @@ fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     llfn\n }\n \n-fn translating_closure_body_via_mir_will_fail(ccx: &CrateContext,\n-                                              closure_def_id: DefId)\n-                                              -> bool {\n-    let default_to_mir = ccx.sess().opts.debugging_opts.orbit;\n-    let invert = if default_to_mir { \"rustc_no_mir\" } else { \"rustc_mir\" };\n-    let use_mir = default_to_mir ^ ccx.tcx().has_attr(closure_def_id, invert);\n-\n-    !use_mir\n-}\n-\n pub fn trans_closure_body_via_mir<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                             closure_def_id: DefId,\n                                             closure_substs: ty::ClosureSubsts<'tcx>) {\n@@ -362,15 +352,6 @@ pub fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n                                closure_def_id,\n                                substs);\n         } else {\n-            // If the closure is defined in an upstream crate, we can only\n-            // translate it if MIR-trans is active.\n-\n-            if translating_closure_body_via_mir_will_fail(ccx, closure_def_id) {\n-                ccx.sess().fatal(\"You have run into a known limitation of the \\\n-                                  MingW toolchain. Either compile with -Zorbit or \\\n-                                  with -Ccodegen-units=1 to work around it.\");\n-            }\n-\n             trans_closure_body_via_mir(ccx, closure_def_id, substs);\n         }\n     }"}, {"sha": "7382d5f0130cd687be2416f6e011700ccaf5c5ef", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -1150,12 +1150,7 @@ pub fn trans_static(ccx: &CrateContext,\n         let def_id = ccx.tcx().map.local_def_id(id);\n         let datum = get_static(ccx, def_id);\n \n-        let check_attrs = |attrs: &[ast::Attribute]| {\n-            let default_to_mir = ccx.sess().opts.debugging_opts.orbit;\n-            let invert = if default_to_mir { \"rustc_no_mir\" } else { \"rustc_mir\" };\n-            default_to_mir ^ attrs.iter().any(|item| item.check_name(invert))\n-        };\n-        let use_mir = check_attrs(ccx.tcx().map.attrs(id));\n+        let use_mir = true;\n \n         let v = if use_mir {\n             ::mir::trans_static_initializer(ccx, def_id)"}, {"sha": "fe90d7f2725ae2adfae4bf4dda77815e53313191", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> LocalRef<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n \n pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n-    let bcx = fcx.init(false, None).build();\n+    let bcx = fcx.init(true, None).build();\n     let mir = bcx.mir();\n \n     // Analyze the temps to determine which must be lvalues"}, {"sha": "05a485cefab7e7ca6fed482cb538d7e532b9b9ca", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -517,11 +517,6 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_no_mir\", Whitelisted, Gated(\"rustc_attrs\",\n-                                        \"the `#[rustc_no_mir]` attribute \\\n-                                         is just used to make tests pass \\\n-                                         and will never be stable\",\n-                                        cfg_fn!(rustc_attrs))),\n     (\"rustc_inherit_overflow_checks\", Whitelisted, Gated(\"rustc_attrs\",\n                                                          \"the `#[rustc_inherit_overflow_checks]` \\\n                                                           attribute is just used to control \\"}, {"sha": "40603845da2b00b0d60e651bd57aad369719a805", "filename": "src/test/codegen/adjustments.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]])\n@@ -21,13 +20,12 @@ fn helper(_: usize) {\n \n // CHECK-LABEL: @no_op_slice_adjustment\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn no_op_slice_adjustment(x: &[u8]) -> &[u8] {\n     // We used to generate an extra alloca and memcpy for the block's trailing expression value, so\n     // check that we copy directly to the return value slot\n-// CHECK: [[SRC:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %x to\n-// CHECK: [[DST:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %sret_slot to i8*\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* [[DST]], i8* [[SRC]],\n+// CHECK: %2 = insertvalue { i8*, [[USIZE]] } undef, i8* %0, 0\n+// CHECK: %3 = insertvalue { i8*, [[USIZE]] } %2, [[USIZE]] %1, 1\n+// CHECK: ret { i8*, [[USIZE]] } %3\n     { x }\n }\n "}, {"sha": "c8c9f5b407c421b11458d6b6c514f54ac64afbaf", "filename": "src/test/codegen/coercions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fcoercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fcoercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcoercions.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,22 +11,19 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n static X: i32 = 5;\n \n // CHECK-LABEL: @raw_ptr_to_raw_ptr_noop\n // CHECK-NOT: alloca\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn raw_ptr_to_raw_ptr_noop() -> *const i32{\n     &X as *const i32\n }\n \n // CHECK-LABEL: @reference_to_raw_ptr_noop\n // CHECK-NOT: alloca\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn reference_to_raw_ptr_noop() -> *const i32 {\n     &X\n }"}, {"sha": "36a582ca73709bb35b3e9ad14ecd96ab9743ef1b", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n // Below, these constants are defined as enum variants that by itself would\n // have a lower alignment than the enum type. Ensure that we mark them\n@@ -20,11 +19,12 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @const{{[0-9]+}} = {{.*}}, align 2\n+// CHECK: @ref{{[0-9]+}} = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: @const{{[0-9]+}} = {{.*}}, align 4\n+// CHECK: [[LOW_HIGH:@ref[0-9]+]] = {{.*}}, align 4\n+// CHECK: [[LOW_HIGH_REF:@const[0-9]+]] = {{.*}} [[LOW_HIGH]]\n \n #[derive(Copy, Clone)]\n \n@@ -40,32 +40,28 @@ pub static STATIC: E<i16, i32> = E::A(0);\n \n // CHECK-LABEL: @static_enum_const\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn static_enum_const() -> E<i16, i32> {\n    STATIC\n }\n \n // CHECK-LABEL: @inline_enum_const\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn inline_enum_const() -> E<i8, i16> {\n-    E::A(0)\n+    *&E::A(0)\n }\n \n // CHECK-LABEL: @low_align_const\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{[0-9]+}}, i8* {{.*}} [[LOW_HIGH:@const[0-9]+]]\n-    E::A(0)\n+// CHECK: load {{.*}} bitcast ({ i16, i16, [4 x i8] }** [[LOW_HIGH_REF]]\n+    *&E::A(0)\n }\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn high_align_const() -> E<i16, i32> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{[0-9]}}, i8* {{.*}} [[LOW_HIGH]]\n-    E::A(0)\n+// CHECK: load {{.*}} bitcast ({ i16, i16, [4 x i8] }** [[LOW_HIGH_REF]]\n+    *&E::A(0)\n }"}, {"sha": "a4bd5cf2c158e3d3dcd6de4a36ede21ce28cb5d3", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n struct SomeUniqueName;\n \n@@ -25,19 +24,20 @@ pub fn possibly_unwinding() {\n \n // CHECK-LABEL: @droppy\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn droppy() {\n // Check that there are exactly 6 drop calls. The cleanups for the unwinding should be reused, so\n // that's one new drop call per call to possibly_unwinding(), and finally 3 drop calls for the\n // regular function exit. We used to have problems with quadratic growths of drop calls in such\n // functions.\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK-NOT: invoke{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n // CHECK-NOT: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: invoke{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: invoke{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: invoke{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK-NOT: {{(call|invoke).*}}drop{{.*}}SomeUniqueName\n // The next line checks for the } that ends the function definition\n // CHECK-LABEL: {{^[}]}}\n     let _s = SomeUniqueName;"}, {"sha": "def5269e07a02b1c345a897e5677c65ba9fa9276", "filename": "src/test/codegen/loads.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Floads.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n pub struct Bytes {\n   a: u8,\n@@ -22,15 +21,14 @@ pub struct Bytes {\n \n // CHECK-LABEL: @borrow\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn borrow(x: &i32) -> &i32 {\n // CHECK: load {{(i32\\*, )?}}i32** %x{{.*}}, !nonnull\n+    &x; // keep variable in an alloca\n     x\n }\n \n // CHECK-LABEL: @_box\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn _box(x: Box<i32>) -> i32 {\n // CHECK: load {{(i32\\*, )?}}i32** %x{{.*}}, !nonnull\n     *x"}, {"sha": "a2cedc853a1e6dbf6a41beb9fce51950a096733b", "filename": "src/test/codegen/mir_zst_stores.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fmir_zst_stores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fmir_zst_stores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmir_zst_stores.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: -C no-prepopulate-passes\n \n-#![feature(rustc_attrs)]\n #![crate_type = \"lib\"]\n use std::marker::PhantomData;\n \n@@ -19,7 +18,6 @@ struct Zst { phantom: PhantomData<Zst> }\n \n // CHECK-LABEL: @mir\n #[no_mangle]\n-#[rustc_mir]\n fn mir(){\n     // CHECK-NOT: getelementptr\n     // CHECK-NOT: store{{.*}}undef"}, {"sha": "9de74f72005e359a20f35cf2d8a5fcbaa2532cbd", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -13,7 +13,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(naked_functions, rustc_attrs)]\n+#![feature(naked_functions)]\n \n // CHECK: Function Attrs: naked uwtable\n // CHECK-NEXT: define internal void @naked_empty()\n@@ -26,11 +26,11 @@ fn naked_empty() {\n // CHECK: Function Attrs: naked uwtable\n #[no_mangle]\n #[naked]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n // CHECK-NEXT: define internal void @naked_with_args(i{{[0-9]+}})\n fn naked_with_args(a: isize) {\n     // CHECK: %a = alloca i{{[0-9]+}}\n     // CHECK: ret void\n+    &a; // keep variable in an alloca\n }\n \n // CHECK: Function Attrs: naked uwtable\n@@ -46,10 +46,10 @@ fn naked_with_return() -> isize {\n // CHECK-NEXT: define internal i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}})\n #[no_mangle]\n #[naked]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n fn naked_with_args_and_return(a: isize) -> isize {\n     // CHECK: %a = alloca i{{[0-9]+}}\n     // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n+    &a; // keep variable in an alloca\n     a\n }\n "}, {"sha": "49ed2229fcd2b721bcb865a468a718095d10515b", "filename": "src/test/codegen/refs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]])\n@@ -21,12 +20,14 @@ fn helper(_: usize) {\n \n // CHECK-LABEL: @ref_dst\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn ref_dst(s: &[u8]) {\n     // We used to generate an extra alloca and memcpy to ref the dst, so check that we copy\n     // directly to the alloca for \"x\"\n-// CHECK: [[SRC:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %s to i8*\n-// CHECK: [[DST:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %x to i8*\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* [[DST]], i8* [[SRC]],\n+// CHECK: [[X0:%[0-9]+]] = getelementptr {{.*}} { i8*, [[USIZE]] }* %x, i32 0, i32 0\n+// CHECK: store i8* %0, i8** [[X0]]\n+// CHECK: [[X1:%[0-9]+]] = getelementptr {{.*}} { i8*, [[USIZE]] }* %x, i32 0, i32 1\n+// CHECK: store [[USIZE]] %1, [[USIZE]]* [[X1]]\n+\n     let x = &*s;\n+    &x; // keep variable in an alloca\n }"}, {"sha": "9141b7245e35aa0d89465e01ce1b9ef887522cec", "filename": "src/test/codegen/stores.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(rustc_attrs)]\n \n pub struct Bytes {\n   a: u8,\n@@ -24,12 +23,11 @@ pub struct Bytes {\n // The array is stored as i32, but its alignment is lower, go with 1 byte to avoid target\n // dependent alignment\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn small_array_alignment(x: &mut [i8; 4], y: [i8; 4]) {\n-// CHECK: %y = alloca [4 x i8]\n+// CHECK: %arg1 = alloca [4 x i8]\n // CHECK: [[TMP:%.+]] = alloca i32\n // CHECK: store i32 %1, i32* [[TMP]]\n-// CHECK: [[Y8:%[0-9]+]] = bitcast [4 x i8]* %y to i8*\n+// CHECK: [[Y8:%[0-9]+]] = bitcast [4 x i8]* %arg1 to i8*\n // CHECK: [[TMP8:%[0-9]+]] = bitcast i32* [[TMP]] to i8*\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* [[Y8]], i8* [[TMP8]], i{{[0-9]+}} 4, i32 1, i1 false)\n     *x = y;\n@@ -39,12 +37,11 @@ pub fn small_array_alignment(x: &mut [i8; 4], y: [i8; 4]) {\n // The struct is stored as i32, but its alignment is lower, go with 1 byte to avoid target\n // dependent alignment\n #[no_mangle]\n-#[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn small_struct_alignment(x: &mut Bytes, y: Bytes) {\n-// CHECK: %y = alloca %Bytes\n+// CHECK: %arg1 = alloca %Bytes\n // CHECK: [[TMP:%.+]] = alloca i32\n // CHECK: store i32 %1, i32* [[TMP]]\n-// CHECK: [[Y8:%[0-9]+]] = bitcast %Bytes* %y to i8*\n+// CHECK: [[Y8:%[0-9]+]] = bitcast %Bytes* %arg1 to i8*\n // CHECK: [[TMP8:%[0-9]+]] = bitcast i32* [[TMP]] to i8*\n // CHECK: call void @llvm.memcpy.{{.*}}(i8* [[Y8]], i8* [[TMP8]], i{{[0-9]+}} 4, i32 1, i1 false)\n     *x = y;"}, {"sha": "eec6bad731e33aeda2be019e80ed30138a5162db", "filename": "src/test/compile-fail/enable-orbit-for-incr-comp.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Ftest%2Fcompile-fail%2Fenable-orbit-for-incr-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Ftest%2Fcompile-fail%2Fenable-orbit-for-incr-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenable-orbit-for-incr-comp.rs?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-pretty\n-// compile-flags:-Zincremental=tmp/cfail-tests/enable-orbit-for-incr-comp -Zorbit=off\n-// error-pattern:Automatically enabling `-Z orbit` because `-Z incremental` was specified\n-\n-#![deny(warnings)]\n-\n-fn main() {\n-    FAIL! // We just need some compilation error. What we really care about is\n-          // that the error pattern above is checked.\n-}"}, {"sha": "7bd9adcba9bd1eebd3ef3fceb2d73d1f3237860d", "filename": "src/test/run-fail/issue-30380.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fissue-30380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fissue-30380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-30380.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n // check that panics in destructors during assignment do not leave\n // destroyed values lying around for other destructors to observe.\n \n@@ -35,7 +33,6 @@ impl<'a> Drop for Observer<'a> {\n     }\n }\n \n-#[rustc_mir]\n fn foo(b: &mut Observer) {\n     *b.0 = FilledOnDrop(1);\n }"}, {"sha": "98311525ad0f26b77a61c473654fdd7996b82bb3", "filename": "src/test/run-fail/mir_drop_panics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n \n // error-pattern:panic 1\n // error-pattern:drop 2\n@@ -24,7 +23,6 @@ impl Drop for Droppable {\n     }\n }\n \n-#[rustc_mir]\n fn mir() {\n     let x = Droppable(2);\n     let y = Droppable(1);"}, {"sha": "6cf2851d93d472b664a1e6999e74b9c963252cdd", "filename": "src/test/run-fail/mir_dynamic_drops_1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_1.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n // error-pattern:drop 1\n // error-pattern:drop 2\n use std::io::{self, Write};\n@@ -26,7 +25,6 @@ impl<'a> Drop for Droppable<'a> {\n     }\n }\n \n-#[rustc_mir]\n fn mir() {\n     let (mut xv, mut yv) = (false, false);\n     let x = Droppable(&mut xv, 1);"}, {"sha": "7a90298e4225323ab81633d0796bb61b68db9fc1", "filename": "src/test/run-fail/mir_dynamic_drops_2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_2.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n // error-pattern:drop 1\n use std::io::{self, Write};\n \n@@ -25,7 +25,6 @@ impl<'a> Drop for Droppable<'a> {\n     }\n }\n \n-#[rustc_mir]\n fn mir<'a>(d: Droppable<'a>) {\n     loop {\n         let x = d;"}, {"sha": "79ecbbb35bc56cc7f2082bc73759d9577c5c2cbf", "filename": "src/test/run-fail/mir_dynamic_drops_3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_dynamic_drops_3.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n // error-pattern:unwind happens\n // error-pattern:drop 3\n // error-pattern:drop 2\n@@ -32,7 +32,6 @@ fn may_panic<'a>() -> Droppable<'a> {\n     panic!(\"unwind happens\");\n }\n \n-#[rustc_mir]\n fn mir<'a>(d: Droppable<'a>) {\n     let (mut a, mut b) = (false, false);\n     let y = Droppable(&mut a, 2);"}, {"sha": "41ff466f810ea262d8cd9237e50b0f7172c4e9ac", "filename": "src/test/run-fail/mir_indexing_oob_1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n // error-pattern:index out of bounds: the len is 5 but the index is 10\n-#![feature(rustc_attrs)]\n \n const C: [u32; 5] = [0; 5];\n \n-#[rustc_mir]\n fn test() -> u32 {\n     C[10]\n }"}, {"sha": "c5c823428bc94edfcf26095d60614c990252e7f1", "filename": "src/test/run-fail/mir_indexing_oob_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n // error-pattern:index out of bounds: the len is 5 but the index is 10\n-#![feature(rustc_attrs)]\n \n const C: &'static [u8; 5] = b\"hello\";\n \n-#[rustc_mir]\n fn test() -> u8 {\n     C[10]\n }"}, {"sha": "9bc4b0025e55ad46f604fddd34a0438430a48d85", "filename": "src/test/run-fail/mir_indexing_oob_3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n // error-pattern:index out of bounds: the len is 5 but the index is 10\n-#![feature(rustc_attrs)]\n \n const C: &'static [u8; 5] = b\"hello\";\n \n-#[rustc_mir]\n fn mir() -> u8 {\n     C[10]\n }"}, {"sha": "7a7526c5fc1d37d220ab8c8d6aa98cbd8602b03e", "filename": "src/test/run-fail/mir_trans_calls_converging_drops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n // error-pattern:converging_fn called\n // error-pattern:0 dropped\n // error-pattern:exit\n@@ -27,7 +25,6 @@ fn converging_fn() {\n     write!(io::stderr(), \"converging_fn called\\n\");\n }\n \n-#[rustc_mir]\n fn mir(d: Droppable) {\n     converging_fn();\n }"}, {"sha": "1301630cc85ea64b52ff3653fd8256e4d792c792", "filename": "src/test/run-fail/mir_trans_calls_converging_drops_2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n // error-pattern:complex called\n // error-pattern:dropped\n // error-pattern:exit\n@@ -30,7 +28,6 @@ fn complex() -> u64 {\n }\n \n \n-#[rustc_mir]\n fn mir() -> u64 {\n     let x = Droppable;\n     return complex();"}, {"sha": "9dbf7de0d2d4988d6a9dc0e5c01641107a3b66e2", "filename": "src/test/run-fail/mir_trans_calls_diverging.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,14 +7,13 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n // error-pattern:diverging_fn called\n \n fn diverging_fn() -> ! {\n     panic!(\"diverging_fn called\")\n }\n \n-#[rustc_mir]\n fn mir() {\n     diverging_fn();\n }"}, {"sha": "c191870492969628b96bcc86bf39c1254b6bbdd1", "filename": "src/test/run-fail/mir_trans_calls_diverging_drops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n // error-pattern:diverging_fn called\n // error-pattern:0 dropped\n \n@@ -26,7 +24,6 @@ fn diverging_fn() -> ! {\n     panic!(\"diverging_fn called\")\n }\n \n-#[rustc_mir]\n fn mir(d: Droppable) {\n     diverging_fn();\n }"}, {"sha": "dacb039d89dc5c0e6694b84a65899ca152ca08a4", "filename": "src/test/run-fail/mir_trans_no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n // compile-flags: -Z no-landing-pads\n // error-pattern:converging_fn called\n use std::io::{self, Write};\n@@ -23,7 +23,6 @@ fn converging_fn() {\n     panic!(\"converging_fn called\")\n }\n \n-#[rustc_mir]\n fn mir(d: Droppable) {\n     let x = Droppable;\n     converging_fn();"}, {"sha": "87037c1efed9e02e3db69003f8e6f72f3189fa13", "filename": "src/test/run-fail/mir_trans_no_landing_pads_diverging.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n+\n // compile-flags: -Z no-landing-pads\n // error-pattern:diverging_fn called\n use std::io::{self, Write};\n@@ -23,7 +23,6 @@ fn diverging_fn() -> ! {\n     panic!(\"diverging_fn called\")\n }\n \n-#[rustc_mir]\n fn mir(d: Droppable) {\n     let x = Droppable;\n     diverging_fn();"}, {"sha": "8ac4bf9733757cc25a1af1da68c0d3b9d14f8300", "filename": "src/test/run-pass-fulldeps/mir-pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmir-pass.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,10 +11,9 @@\n // aux-build:dummy_mir_pass.rs\n // ignore-stage1\n \n-#![feature(plugin, rustc_attrs)]\n+#![feature(plugin)]\n #![plugin(dummy_mir_pass)]\n \n-#[rustc_mir]\n fn math() -> i32 {\n     11\n }"}, {"sha": "7cf75924a28c0c7fd67bcb941694986bdeeda972", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -13,7 +13,7 @@\n // no-prefer-dynamic\n \n #![allow(dead_code)]\n-#![feature(const_fn, rustc_attrs)]\n+#![feature(const_fn)]\n \n // check dtor calling order when casting enums.\n \n@@ -38,13 +38,12 @@ impl Drop for E {\n     }\n }\n \n-#[rustc_no_mir] // FIXME #27840 MIR miscompiles this.\n fn main() {\n     assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n     {\n         let e = E::C;\n         assert_eq!(e as u32, 2);\n         assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n     }\n-    assert_eq!(FLAG.load(Ordering::SeqCst), 1);\n+    assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n }"}, {"sha": "2b016dfb33ecaf33f69e7003ae40ad70ae009116", "filename": "src/test/run-pass/dynamic-drop.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -74,15 +74,13 @@ impl<'a> Drop for Ptr<'a> {\n     }\n }\n \n-#[rustc_mir]\n fn dynamic_init(a: &Allocator, c: bool) {\n     let _x;\n     if c {\n         _x = Some(a.alloc());\n     }\n }\n \n-#[rustc_mir]\n fn dynamic_drop(a: &Allocator, c: bool) {\n     let x = a.alloc();\n     if c {\n@@ -92,7 +90,6 @@ fn dynamic_drop(a: &Allocator, c: bool) {\n     };\n }\n \n-#[rustc_mir]\n fn assignment2(a: &Allocator, c0: bool, c1: bool) {\n     let mut _v = a.alloc();\n     let mut _w = a.alloc();\n@@ -105,7 +102,6 @@ fn assignment2(a: &Allocator, c0: bool, c1: bool) {\n     }\n }\n \n-#[rustc_mir]\n fn assignment1(a: &Allocator, c0: bool) {\n     let mut _v = a.alloc();\n     let mut _w = a.alloc();"}, {"sha": "27bcab43229c52ade34099809fdd634f1d698917", "filename": "src/test/run-pass/exhaustive-bool-match-sanity.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fexhaustive-bool-match-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fexhaustive-bool-match-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexhaustive-bool-match-sanity.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -15,9 +15,6 @@\n // sanity in that we generate an if-else chain giving the correct\n // results.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn foo(x: bool, y: bool) -> u32 {\n     match (x, y) {\n         (false, _) => 0,"}, {"sha": "e1b94179764bf8fbe6bfa3ad3516e603955ad1c9", "filename": "src/test/run-pass/issue-16648.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16648.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n \n-#![feature(slice_patterns, rustc_attrs)]\n+#![feature(slice_patterns)]\n \n-#[rustc_mir]\n fn main() {\n     let x: (isize, &[isize]) = (2, &[1, 2]);\n     assert_eq!(match x {"}, {"sha": "a70c2b3ae1b7ba03dea6fb1220116a9a63f885e7", "filename": "src/test/run-pass/issue-28950.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-28950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-28950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28950.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -9,19 +9,23 @@\n // except according to those terms.\n \n // ignore-emscripten\n-// compile-flags: -Z orbit=off\n-// (blows the stack with MIR trans and no optimizations)\n+// compile-flags: -O\n \n // Tests that the `vec!` macro does not overflow the stack when it is\n // given data larger than the stack.\n \n+// FIXME(eddyb) Improve unoptimized codegen to avoid the temporary,\n+// and thus run successfully even when compiled at -C opt-level=0.\n+\n const LEN: usize = 1 << 15;\n \n use std::thread::Builder;\n \n fn main() {\n     assert!(Builder::new().stack_size(LEN / 2).spawn(|| {\n-        let vec = vec![[0; LEN]];\n+        // FIXME(eddyb) this can be vec![[0: LEN]] pending\n+        // https://llvm.org/bugs/show_bug.cgi?id=28987\n+        let vec = vec![unsafe { std::mem::zeroed::<[u8; LEN]>() }];\n         assert_eq!(vec.len(), 1);\n     }).unwrap().join().is_ok());\n }"}, {"sha": "b7ff63b75ce88df7cc2c4f9490f396951a60dc18", "filename": "src/test/run-pass/issue-32805.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-32805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-32805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-32805.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,19 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn const_mir() -> f32 { 9007199791611905.0 }\n \n-#[rustc_no_mir]\n-fn const_old() -> f32 { 9007199791611905.0 }\n-\n fn main() {\n     let original = \"9007199791611905.0\"; // (1<<53)+(1<<29)+1\n     let expected = \"9007200000000000\";\n \n     assert_eq!(const_mir().to_string(), expected);\n-    assert_eq!(const_old().to_string(), expected);\n     assert_eq!(original.parse::<f32>().unwrap().to_string(), expected);\n }"}, {"sha": "d30e88b3968c7ab242d22800ff86fee7e82ff377", "filename": "src/test/run-pass/issue-33387.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33387.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -24,17 +24,14 @@ impl Foo for [u8; 2] {\n \n struct Bar<T: ?Sized>(T);\n \n-#[rustc_mir]\n fn unsize_fat_ptr<'a>(x: &'a Bar<Foo + Send + 'a>) -> &'a Bar<Foo + 'a> {\n     x\n }\n \n-#[rustc_mir]\n fn unsize_nested_fat_ptr(x: Arc<Foo + Send>) -> Arc<Foo> {\n     x\n }\n \n-#[rustc_mir]\n fn main() {\n     let x: Box<Bar<Foo + Send>> = Box::new(Bar([1,2]));\n     assert_eq!(unsize_fat_ptr(&*x).0.get(), [1, 2]);"}, {"sha": "badc013cd621f6297af82991af69264dc35b0073", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,7 +11,6 @@\n \n #![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n-#![feature(rustc_attrs)]\n \n use std::ops::Add;\n \n@@ -22,7 +21,6 @@ fn bar(a: &'static str, b: &'static str) -> [&'static str; 4] {\n     [a, b, b, a]\n }\n \n-#[rustc_mir]\n fn main() {\n     assert_eq!(foo([1, 2, 3]), (1, 3, 6));\n "}, {"sha": "fa609593c24b631807873967526c5c30238b803e", "filename": "src/test/run-pass/match-vec-alternatives.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,9 +11,7 @@\n \n #![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n-#![feature(rustc_attrs)]\n \n-#[rustc_mir]\n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     match (l1, l2) {\n         (&[], &[]) => \"both empty\",\n@@ -22,7 +20,6 @@ fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     }\n }\n \n-#[rustc_mir]\n fn match_vecs_cons<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     match (l1, l2) {\n         (&[], &[]) => \"both empty\",\n@@ -31,7 +28,6 @@ fn match_vecs_cons<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     }\n }\n \n-#[rustc_mir]\n fn match_vecs_snoc<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     match (l1, l2) {\n         (&[], &[]) => \"both empty\",\n@@ -40,7 +36,6 @@ fn match_vecs_snoc<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {\n     }\n }\n \n-#[rustc_mir]\n fn match_nested_vecs_cons<'a, T>(l1: Option<&'a [T]>, l2: Result<&'a [T], ()>) -> &'static str {\n     match (l1, l2) {\n         (Some(&[]), Ok(&[])) => \"Some(empty), Ok(empty)\",\n@@ -51,7 +46,6 @@ fn match_nested_vecs_cons<'a, T>(l1: Option<&'a [T]>, l2: Result<&'a [T], ()>) -\n     }\n }\n \n-#[rustc_mir]\n fn match_nested_vecs_snoc<'a, T>(l1: Option<&'a [T]>, l2: Result<&'a [T], ()>) -> &'static str {\n     match (l1, l2) {\n         (Some(&[]), Ok(&[])) => \"Some(empty), Ok(empty)\","}, {"sha": "dae843bba9fa6e6ba5d343fc8f70b4243915e438", "filename": "src/test/run-pass/mir_adt_construction.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_adt_construction.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n #[repr(C, u32)]\n enum CEnum {\n     Hello = 30,\n     World = 60\n }\n \n-#[rustc_mir]\n fn test1(c: CEnum) -> i32 {\n   let c2 = CEnum::Hello;\n   match (c, c2) {\n@@ -40,26 +37,22 @@ impl Drop for Pakd {\n     fn drop(&mut self) {}\n }\n \n-#[rustc_mir]\n fn test2() -> Pakd {\n     Pakd { a: 42, b: 42, c: 42, d: 42, e: () }\n }\n \n #[derive(PartialEq, Debug)]\n struct TupleLike(u64, u32);\n \n-#[rustc_mir]\n fn test3() -> TupleLike {\n     TupleLike(42, 42)\n }\n \n-#[rustc_mir]\n fn test4(x: fn(u64, u32) -> TupleLike) -> (TupleLike, TupleLike) {\n     let y = TupleLike;\n     (x(42, 84), y(42, 84))\n }\n \n-#[rustc_mir]\n fn test5(x: fn(u32) -> Option<u32>) -> (Option<u32>, Option<u32>) {\n     let y = Some;\n     (x(42), y(42))"}, {"sha": "bc1013429aa59252aa3ddeb7ff1763b9b5a27b81", "filename": "src/test/run-pass/mir_ascription_coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_ascription_coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_ascription_coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_ascription_coercion.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -10,9 +10,8 @@\n \n // Tests that the result of type ascription has adjustments applied\n \n-#![feature(rustc_attrs, type_ascription)]\n+#![feature(type_ascription)]\n \n-#[rustc_mir]\n fn main() {\n     let x = [1, 2, 3];\n     // The RHS should coerce to &[i32]"}, {"sha": "bb90f25fce5f405200a6490a5152621bb7368812", "filename": "src/test/run-pass/mir_augmented_assignments.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_augmented_assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_augmented_assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_augmented_assignments.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n use std::mem;\n use std::ops::{\n     AddAssign, BitAndAssign, BitOrAssign, BitXorAssign, DivAssign, MulAssign, RemAssign,\n@@ -33,7 +31,6 @@ fn main() {\n     main_mir();\n }\n \n-#[rustc_mir]\n fn main_mir() {\n     let mut x = Int(1);\n \n@@ -92,91 +89,78 @@ fn main_mir() {\n }\n \n impl AddAssign for Int {\n-    #[rustc_mir]\n     fn add_assign(&mut self, rhs: Int) {\n         self.0 += rhs.0;\n     }\n }\n \n impl BitAndAssign for Int {\n-    #[rustc_mir]\n     fn bitand_assign(&mut self, rhs: Int) {\n         self.0 &= rhs.0;\n     }\n }\n \n impl BitOrAssign for Int {\n-    #[rustc_mir]\n     fn bitor_assign(&mut self, rhs: Int) {\n         self.0 |= rhs.0;\n     }\n }\n \n impl BitXorAssign for Int {\n-    #[rustc_mir]\n     fn bitxor_assign(&mut self, rhs: Int) {\n         self.0 ^= rhs.0;\n     }\n }\n \n impl DivAssign for Int {\n-    #[rustc_mir]\n     fn div_assign(&mut self, rhs: Int) {\n         self.0 /= rhs.0;\n     }\n }\n \n impl MulAssign for Int {\n-    #[rustc_mir]\n     fn mul_assign(&mut self, rhs: Int) {\n         self.0 *= rhs.0;\n     }\n }\n \n impl RemAssign for Int {\n-    #[rustc_mir]\n     fn rem_assign(&mut self, rhs: Int) {\n         self.0 %= rhs.0;\n     }\n }\n \n impl ShlAssign<u8> for Int {\n-    #[rustc_mir]\n     fn shl_assign(&mut self, rhs: u8) {\n         self.0 <<= rhs;\n     }\n }\n \n impl ShlAssign<u16> for Int {\n-    #[rustc_mir]\n     fn shl_assign(&mut self, rhs: u16) {\n         self.0 <<= rhs;\n     }\n }\n \n impl ShrAssign<u8> for Int {\n-    #[rustc_mir]\n     fn shr_assign(&mut self, rhs: u8) {\n         self.0 >>= rhs;\n     }\n }\n \n impl ShrAssign<u16> for Int {\n-    #[rustc_mir]\n     fn shr_assign(&mut self, rhs: u16) {\n         self.0 >>= rhs;\n     }\n }\n \n impl SubAssign for Int {\n-    #[rustc_mir]\n     fn sub_assign(&mut self, rhs: Int) {\n         self.0 -= rhs.0;\n     }\n }\n \n impl AddAssign<i32> for Slice {\n-    #[rustc_mir]\n     fn add_assign(&mut self, rhs: i32) {\n         for lhs in &mut self.0 {\n             *lhs += rhs;"}, {"sha": "f0032fee2835eff90350ccde03ae68622262fa2c", "filename": "src/test/run-pass/mir_autoderef.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_autoderef.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n use std::ops::{Deref, DerefMut};\n \n pub struct MyRef(u32);\n@@ -24,12 +22,10 @@ impl DerefMut for MyRef {\n }\n \n \n-#[rustc_mir]\n fn deref(x: &MyRef) -> &u32 {\n     x\n }\n \n-#[rustc_mir]\n fn deref_mut(x: &mut MyRef) -> &mut u32 {\n     x\n }"}, {"sha": "1c5134755d7aa1465eacbcf7939abdb52ee5d655", "filename": "src/test/run-pass/mir_boxing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_boxing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_boxing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_boxing.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, box_syntax)]\n+#![feature(box_syntax)]\n \n-#[rustc_mir]\n fn test() -> Box<i32> {\n     box 42\n }"}, {"sha": "b195ff63412af4dcc960fbf7869ad9e742cbdfb3", "filename": "src/test/run-pass/mir_build_match_comparisons.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_build_match_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_build_match_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_build_match_comparisons.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn test1(x: i8) -> i32 {\n   match x {\n     1...10 => 0,\n@@ -21,15 +18,13 @@ fn test1(x: i8) -> i32 {\n const U: Option<i8> = Some(10);\n const S: &'static str = \"hello\";\n \n-#[rustc_mir]\n fn test2(x: i8) -> i32 {\n   match Some(x) {\n     U => 0,\n     _ => 1,\n   }\n }\n \n-#[rustc_mir]\n fn test3(x: &'static str) -> i32 {\n   match x {\n     S => 0,\n@@ -42,7 +37,6 @@ enum Opt<T> {\n     None\n }\n \n-#[rustc_mir]\n fn test4(x: u64) -> i32 {\n   let opt = Opt::Some{ v: x };\n   match opt {"}, {"sha": "935d0e58985d7c683160a10dbc6c7614ed1e1dc1", "filename": "src/test/run-pass/mir_call_with_associated_type.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n trait Trait {\n     type Type;\n }\n@@ -18,12 +16,10 @@ impl<'a> Trait for &'a () {\n     type Type = u32;\n }\n \n-#[rustc_mir]\n fn foo<'a>(t: <&'a () as Trait>::Type) -> <&'a () as Trait>::Type {\n     t\n }\n \n-#[rustc_mir]\n fn main() {\n     assert_eq!(foo(4), 4);\n }"}, {"sha": "311d5451eb6dd5012d56247e316072e19a6c1b82", "filename": "src/test/run-pass/mir_cast_fn_ret.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_cast_fn_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_cast_fn_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_cast_fn_ret.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n pub extern \"C\" fn tuple2() -> (u16, u8) {\n     (1, 2)\n }\n@@ -18,12 +16,10 @@ pub extern \"C\" fn tuple3() -> (u8, u8, u8) {\n     (1, 2, 3)\n }\n \n-#[rustc_mir]\n pub fn test2() -> u8 {\n     tuple2().1\n }\n \n-#[rustc_mir]\n pub fn test3() -> u8 {\n     tuple3().2\n }"}, {"sha": "2be2854fac959cc582065264633a927c4c0b7a2e", "filename": "src/test/run-pass/mir_coercion_casts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_coercion_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_coercion_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_coercion_casts.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -10,9 +10,6 @@\n \n // Tests the coercion casts are handled properly\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn main() {\n     // This should produce only a reification of f,\n     // not a fn -> fn cast as well"}, {"sha": "79d1cfde7cd581b831aa46417d12df41545e6347", "filename": "src/test/run-pass/mir_coercions.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_coercions.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,24 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, coerce_unsized, unsize)]\n+#![feature(coerce_unsized, unsize)]\n \n use std::ops::CoerceUnsized;\n use std::marker::Unsize;\n \n-#[rustc_mir]\n fn identity_coercion(x: &(Fn(u32)->u32 + Send)) -> &Fn(u32)->u32 {\n     x\n }\n-#[rustc_mir]\n fn fn_coercions(f: &fn(u32) -> u32) ->\n     (unsafe fn(u32) -> u32,\n      &(Fn(u32) -> u32+Send))\n {\n     (*f, f)\n }\n \n-#[rustc_mir]\n fn simple_array_coercion(x: &[u8; 3]) -> &[u8] { x }\n \n fn square(a: u32) -> u32 { a * a }\n@@ -39,23 +36,19 @@ struct TrivPtrWrapper<'a, T: 'a+?Sized>(&'a T);\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized>\n     CoerceUnsized<TrivPtrWrapper<'a, U>> for TrivPtrWrapper<'a, T> {}\n \n-#[rustc_mir]\n fn coerce_ptr_wrapper(p: PtrWrapper<[u8; 3]>) -> PtrWrapper<[u8]> {\n     p\n }\n \n-#[rustc_mir]\n fn coerce_triv_ptr_wrapper(p: TrivPtrWrapper<[u8; 3]>) -> TrivPtrWrapper<[u8]> {\n     p\n }\n \n-#[rustc_mir]\n fn coerce_fat_ptr_wrapper(p: PtrWrapper<Fn(u32) -> u32+Send>)\n                           -> PtrWrapper<Fn(u32) -> u32> {\n     p\n }\n \n-#[rustc_mir]\n fn coerce_ptr_wrapper_poly<'a, T, Trait: ?Sized>(p: PtrWrapper<'a, T>)\n                                                  -> PtrWrapper<'a, Trait>\n     where PtrWrapper<'a, T>: CoerceUnsized<PtrWrapper<'a, Trait>>"}, {"sha": "696ff8a7e600fe16756eaa6ab6aab5924f3d6806", "filename": "src/test/run-pass/mir_constval_adts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_constval_adts.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n \n #[derive(PartialEq, Debug)]\n struct Point {\n@@ -23,7 +22,6 @@ const TUPLE1: (i32, i32) = (42, 42);\n const TUPLE2: (&'static str, &'static str) = (\"hello\",\"world\");\n const PAIR_NEWTYPE: (Newtype<i32>, Newtype<i32>) = (Newtype(42), Newtype(42));\n \n-#[rustc_mir]\n fn mir() -> (Point, (i32, i32), (&'static str, &'static str), (Newtype<i32>, Newtype<i32>)) {\n     let struct1 = STRUCT;\n     let tuple1 = TUPLE1;\n@@ -34,7 +32,6 @@ fn mir() -> (Point, (i32, i32), (&'static str, &'static str), (Newtype<i32>, New\n \n const NEWTYPE: Newtype<&'static str> = Newtype(\"foobar\");\n \n-#[rustc_mir]\n fn test_promoted_newtype_str_ref() {\n     let x = &NEWTYPE;\n     assert_eq!(x, &Newtype(\"foobar\"));"}, {"sha": "2cb975b98d2dc5b17c718f312acbb34de5f03644", "filename": "src/test/run-pass/mir_cross_crate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_cross_crate.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z orbit\n-// Tests that -Z orbit affects functions from other crates.\n+// Tests that MIR trans is used for functions from other crates.\n \n #![feature(unsafe_no_drop_flag)]\n "}, {"sha": "e5c9e3577d1c302a1cd6458eccf6019e01e1845b", "filename": "src/test/run-pass/mir_fat_ptr.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_fat_ptr.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -10,46 +10,37 @@\n \n // test that ordinary fat pointer operations work.\n \n-#![feature(rustc_attrs)]\n-\n struct Wrapper<T: ?Sized>(u32, T);\n \n struct FatPtrContainer<'a> {\n     ptr: &'a [u8]\n }\n \n-#[rustc_mir]\n fn fat_ptr_project(a: &Wrapper<[u8]>) -> &[u8] {\n     &a.1\n }\n \n-#[rustc_mir]\n fn fat_ptr_simple(a: &[u8]) -> &[u8] {\n     a\n }\n \n-#[rustc_mir]\n fn fat_ptr_via_local(a: &[u8]) -> &[u8] {\n     let x = a;\n     x\n }\n \n-#[rustc_mir]\n fn fat_ptr_from_struct(s: FatPtrContainer) -> &[u8] {\n     s.ptr\n }\n \n-#[rustc_mir]\n fn fat_ptr_to_struct(a: &[u8]) -> FatPtrContainer {\n     FatPtrContainer { ptr: a }\n }\n \n-#[rustc_mir]\n fn fat_ptr_store_to<'a>(a: &'a [u8], b: &mut &'a [u8]) {\n     *b = a;\n }\n \n-#[rustc_mir]\n fn fat_ptr_constant() -> &'static str {\n     \"HELLO\"\n }"}, {"sha": "64e68c78c3ca6b77a201049d6f131e6f354a7846", "filename": "src/test/run-pass/mir_fat_ptr_drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_fat_ptr_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_fat_ptr_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_fat_ptr_drop.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -27,7 +27,6 @@ impl Drop for DropMe {\n     }\n }\n \n-#[rustc_mir]\n fn fat_ptr_move_then_drop(a: Box<[DropMe]>) {\n     let b = a;\n }"}, {"sha": "487999e6ed62bbf0978e44f21347fa726d2d474a", "filename": "src/test/run-pass/mir_match_arm_guard.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_match_arm_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_match_arm_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_match_arm_guard.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -10,9 +10,6 @@\n \n // #30527 - We were not generating arms with guards in certain cases.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn match_with_guard(x: Option<i8>) -> i8 {\n     match x {\n         Some(xyz) if xyz > 100 => 0,"}, {"sha": "ae719ac2800eeefb8a1e59983d494456ada45ce3", "filename": "src/test/run-pass/mir_misc_casts.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_misc_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_misc_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_misc_casts.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(libc, rustc_attrs)]\n+#![feature(libc)]\n \n extern crate libc;\n \n@@ -17,7 +17,6 @@ fn func(){}\n const STR: &'static str = \"hello\";\n const BSTR: &'static [u8; 5] = b\"hello\";\n \n-#[rustc_mir]\n fn from_ptr()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, *const ()) {\n     let f = 1_usize as *const libc::FILE;\n@@ -35,7 +34,6 @@ fn from_ptr()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11)\n }\n \n-#[rustc_mir]\n fn from_1()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1 as isize;\n@@ -54,7 +52,6 @@ fn from_1()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1usize()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_usize as isize;\n@@ -73,7 +70,6 @@ fn from_1usize()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1isize()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_isize as isize;\n@@ -92,7 +88,6 @@ fn from_1isize()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1u8()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_u8 as isize;\n@@ -111,7 +106,6 @@ fn from_1u8()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1i8()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_i8 as isize;\n@@ -130,7 +124,6 @@ fn from_1i8()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1u16()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_u16 as isize;\n@@ -149,7 +142,6 @@ fn from_1u16()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1i16()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_i16 as isize;\n@@ -168,7 +160,6 @@ fn from_1i16()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1u32()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_u32 as isize;\n@@ -187,7 +178,6 @@ fn from_1u32()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1i32()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_i32 as isize;\n@@ -206,7 +196,6 @@ fn from_1i32()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1u64()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_u64 as isize;\n@@ -225,7 +214,6 @@ fn from_1u64()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_1i64()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, *const libc::FILE) {\n     let c1 = 1_i64 as isize;\n@@ -244,7 +232,6 @@ fn from_1i64()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13)\n }\n \n-#[rustc_mir]\n fn from_bool()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64) {\n     let c1 = true as isize;\n@@ -260,7 +247,6 @@ fn from_bool()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10)\n }\n \n-#[rustc_mir]\n fn from_1f32()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64) {\n     let c1 = 1.0_f32 as isize;\n@@ -278,7 +264,6 @@ fn from_1f32()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12)\n }\n \n-#[rustc_mir]\n fn from_1f64()\n -> (isize, usize, i8, i16, i32, i64, u8, u16, u32, u64, f32, f64) {\n     let c1 = 1.0f64 as isize;\n@@ -296,7 +281,6 @@ fn from_1f64()\n     (c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12)\n }\n \n-#[rustc_mir]\n fn other_casts()\n -> (*const u8, *const isize, *const u8, *const u8) {\n     let c1 = func as *const u8;"}, {"sha": "0db1e7b4563c18907e89fa840131fc583fb2d111", "filename": "src/test/run-pass/mir_overflow_off.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z force-overflow-checks=off -Z orbit\n+// compile-flags: -Z force-overflow-checks=off\n \n // Test that with MIR trans, overflow checks can be\n // turned off, even when they're from core::ops::*."}, {"sha": "c9fd88f2fb3cfba15dac2d00005680145de62c5b", "filename": "src/test/run-pass/mir_raw_fat_ptr.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n // ignore-pretty : (#23623) problems when  ending with // comments\n \n // check raw fat pointer ops in mir\n@@ -54,7 +52,6 @@ const GT: ComparisonResults = ComparisonResults {\n     ne: true\n };\n \n-#[rustc_mir]\n fn compare_su8(a: *const S<[u8]>, b: *const S<[u8]>) -> ComparisonResults {\n     ComparisonResults {\n         lt: a < b,\n@@ -66,7 +63,6 @@ fn compare_su8(a: *const S<[u8]>, b: *const S<[u8]>) -> ComparisonResults {\n     }\n }\n \n-#[rustc_mir]\n fn compare_au8(a: *const [u8], b: *const [u8]) -> ComparisonResults {\n     ComparisonResults {\n         lt: a < b,\n@@ -78,7 +74,6 @@ fn compare_au8(a: *const [u8], b: *const [u8]) -> ComparisonResults {\n     }\n }\n \n-#[rustc_mir]\n fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults {\n     ComparisonResults {\n         lt: a < b,\n@@ -90,7 +85,6 @@ fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults\n     }\n }\n \n-#[rustc_mir]\n fn simple_eq<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> bool {\n     let result = a == b;\n     result"}, {"sha": "df90fe2b7918d43740e740c9a2411be2769f66d4", "filename": "src/test/run-pass/mir_refs_correct.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_refs_correct.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,9 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n-// aux-build:mir_external_refs.rs\n \n+// aux-build:mir_external_refs.rs\n \n extern crate mir_external_refs as ext;\n \n@@ -78,128 +77,103 @@ fn parametric<T>(u: T) -> T {\n     u\n }\n \n-#[rustc_mir]\n fn t1() -> fn()->u8 {\n     regular\n }\n \n-#[rustc_mir]\n fn t2() -> fn(u8)->E {\n     E::U\n }\n \n-#[rustc_mir]\n fn t3() -> fn(u8)->S {\n     S\n }\n \n-#[rustc_mir]\n fn t4() -> fn()->u8 {\n     S::hey\n }\n \n-#[rustc_mir]\n fn t5() -> fn(&S)-> u8 {\n     <S as X>::hoy\n }\n \n \n-#[rustc_mir]\n fn t6() -> fn()->u8{\n     ext::regular_fn\n }\n \n-#[rustc_mir]\n fn t7() -> fn(u8)->ext::E {\n     ext::E::U\n }\n \n-#[rustc_mir]\n fn t8() -> fn(u8)->ext::S {\n     ext::S\n }\n \n-#[rustc_mir]\n fn t9() -> fn()->u8 {\n     ext::S::hey\n }\n \n-#[rustc_mir]\n fn t10() -> fn(&ext::S)->u8 {\n     <ext::S as ext::X>::hoy\n }\n \n-#[rustc_mir]\n fn t11() -> fn(u8)->u8 {\n     parametric\n }\n \n-#[rustc_mir]\n fn t12() -> u8 {\n     C\n }\n \n-#[rustc_mir]\n fn t13() -> [u8; 5] {\n     C2\n }\n \n-#[rustc_mir]\n fn t13_2() -> [u8; 3] {\n     C3\n }\n \n-#[rustc_mir]\n fn t14() -> fn()-> u8 {\n     <S as X>::hoy2\n }\n \n-#[rustc_mir]\n fn t15() -> fn(&S)-> u8 {\n     S::hey2\n }\n \n-#[rustc_mir]\n fn t16() -> fn(u32, u32)->u64 {\n     F::f\n }\n \n-#[rustc_mir]\n fn t17() -> fn(u32, u64)->u64 {\n     F::f\n }\n \n-#[rustc_mir]\n fn t18() -> fn(u64, u64)->u64 {\n     F::f\n }\n \n-#[rustc_mir]\n fn t19() -> fn(u64, u32)->u64 {\n     F::f\n }\n \n-#[rustc_mir]\n fn t20() -> fn(u64, u32)->(u64, u32) {\n     <u32 as T<_, _>>::staticmeth\n }\n \n-#[rustc_mir]\n fn t21() -> Unit {\n     Unit\n }\n \n-#[rustc_mir]\n fn t22() -> Option<u8> {\n     None\n }\n \n-#[rustc_mir]\n fn t23() -> (CEnum, CEnum) {\n     (CEnum::A, CEnum::B)\n }\n \n-#[rustc_mir]\n fn t24() -> fn(u8) -> S {\n     C4\n }"}, {"sha": "639a585ae0013f60ecfbead13fdaa0d05530c617", "filename": "src/test/run-pass/mir_small_agg_arg.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_small_agg_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_small_agg_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_small_agg_arg.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn foo((x, y): (i8, i8)) {\n }\n "}, {"sha": "7b2514c27c8cba1b852ac0583848e57b6a265583", "filename": "src/test/run-pass/mir_struct_with_assoc_ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_struct_with_assoc_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_struct_with_assoc_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_struct_with_assoc_ty.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n use std::marker::PhantomData;\n \n pub trait DataBind {\n@@ -26,7 +24,6 @@ pub struct Data {\n     pub offsets: <Global<[u32; 2]> as DataBind>::Data,\n }\n \n-#[rustc_mir]\n fn create_data() -> Data {\n     let mut d = Data { offsets: [1, 2] };\n     d.offsets[0] = 3;"}, {"sha": "4865e955091f8eac6754f179fdf3da20296a9cc5", "filename": "src/test/run-pass/mir_temp_promotions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_temp_promotions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_temp_promotions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_temp_promotions.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn test1(f: f32) -> bool {\n     // test that we properly promote temporaries to allocas when a temporary is assigned to\n     // multiple times (assignment is still happening once \u2200 possible dataflows)."}, {"sha": "b7f247012ce129da0bb7f694698a792d31ff0bd5", "filename": "src/test/run-pass/mir_trans_array.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_array.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,9 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n \n-#[rustc_mir]\n fn into_inner() -> [u64; 1024] {\n     let mut x = 10 + 20;\n     [x; 1024]"}, {"sha": "c7133fb0c0e4923b5447bc4732fb3b8b72579dd2", "filename": "src/test/run-pass/mir_trans_array_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_array_2.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,9 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n \n-#[rustc_mir]\n fn into_inner(x: u64) -> [u64; 1024] {\n     [x; 2*4*8*16]\n }"}, {"sha": "7d420bb86c6077968714deba37f25d3cede35739", "filename": "src/test/run-pass/mir_trans_call_converging.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_call_converging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_call_converging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_call_converging.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -7,13 +7,11 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(rustc_attrs)]\n \n fn converging_fn() -> u64 {\n     43\n }\n \n-#[rustc_mir]\n fn mir() -> u64 {\n     let x;\n     loop {"}, {"sha": "d429c681bbe4ac317271c7c479416dba951e9556", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, fn_traits)]\n+#![feature(fn_traits)]\n \n-#[rustc_mir]\n fn test1(a: isize, b: (i32, i32), c: &[i32]) -> (isize, (i32, i32), &[i32]) {\n     // Test passing a number of arguments including a fat pointer.\n     // Also returning via an out pointer\n@@ -20,7 +19,6 @@ fn test1(a: isize, b: (i32, i32), c: &[i32]) -> (isize, (i32, i32), &[i32]) {\n     callee(a, b, c)\n }\n \n-#[rustc_mir]\n fn test2(a: isize) -> isize {\n     // Test passing a single argument.\n     // Not using out pointer.\n@@ -36,7 +34,6 @@ impl Foo {\n     fn inherent_method(&self, a: isize) -> isize { a }\n }\n \n-#[rustc_mir]\n fn test3(x: &Foo, a: isize) -> isize {\n     // Test calling inherent method\n     x.inherent_method(a)\n@@ -47,19 +44,16 @@ trait Bar {\n }\n impl Bar for Foo {}\n \n-#[rustc_mir]\n fn test4(x: &Foo, a: isize) -> isize {\n     // Test calling extension method\n     x.extension_method(a)\n }\n \n-#[rustc_mir]\n fn test5(x: &Bar, a: isize) -> isize {\n     // Test calling method on trait object\n     x.extension_method(a)\n }\n \n-#[rustc_mir]\n fn test6<T: Bar>(x: &T, a: isize) -> isize {\n     // Test calling extension method on generic callee\n     x.extension_method(a)\n@@ -72,7 +66,6 @@ impl One for isize {\n     fn one() -> isize { 1 }\n }\n \n-#[rustc_mir]\n fn test7() -> isize {\n     // Test calling trait static method\n     <isize as One>::one()\n@@ -83,7 +76,6 @@ impl Two {\n     fn two() -> isize { 2 }\n }\n \n-#[rustc_mir]\n fn test8() -> isize {\n     // Test calling impl static method\n     Two::two()\n@@ -93,53 +85,45 @@ extern fn simple_extern(x: u32, y: (u32, u32)) -> u32 {\n     x + y.0 * y.1\n }\n \n-#[rustc_mir]\n fn test9() -> u32 {\n     simple_extern(41, (42, 43))\n }\n \n-#[rustc_mir]\n fn test_closure<F>(f: &F, x: i32, y: i32) -> i32\n     where F: Fn(i32, i32) -> i32\n {\n     f(x, y)\n }\n \n-#[rustc_mir]\n fn test_fn_object(f: &Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n     f(x, y)\n }\n \n-#[rustc_mir]\n fn test_fn_impl(f: &&Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n     // This call goes through the Fn implementation for &Fn provided in\n     // core::ops::impls. It expands to a static Fn::call() that calls the\n     // Fn::call() implementation of the object shim underneath.\n     f(x, y)\n }\n \n-#[rustc_mir]\n fn test_fn_direct_call<F>(f: &F, x: i32, y: i32) -> i32\n     where F: Fn(i32, i32) -> i32\n {\n     f.call((x, y))\n }\n \n-#[rustc_mir]\n fn test_fn_const_call<F>(f: &F) -> i32\n     where F: Fn(i32, i32) -> i32\n {\n     f.call((100, -1))\n }\n \n-#[rustc_mir]\n fn test_fn_nil_call<F>(f: &F) -> i32\n     where F: Fn() -> i32\n {\n     f()\n }\n \n-#[rustc_mir]\n fn test_fn_transmute_zst(x: ()) -> [(); 1] {\n     fn id<T>(x: T) -> T {x}\n \n@@ -148,30 +132,24 @@ fn test_fn_transmute_zst(x: ()) -> [(); 1] {\n     })\n }\n \n-#[rustc_mir]\n fn test_fn_ignored_pair() -> ((), ()) {\n     ((), ())\n }\n \n-#[rustc_mir]\n fn test_fn_ignored_pair_0() {\n     test_fn_ignored_pair().0\n }\n \n-#[rustc_mir]\n fn id<T>(x: T) -> T { x }\n \n-#[rustc_mir]\n fn ignored_pair_named() -> (Foo, Foo) {\n     (Foo, Foo)\n }\n \n-#[rustc_mir]\n fn test_fn_ignored_pair_named() -> (Foo, Foo) {\n     id(ignored_pair_named())\n }\n \n-#[rustc_mir]\n fn test_fn_nested_pair(x: &((f32, f32), u32)) -> (f32, f32) {\n     let y = *x;\n     let z = y.0;"}, {"sha": "4e06738da4fd5e5a1d2b63591a393f04a9ef34c7", "filename": "src/test/run-pass/mir_trans_calls_variadic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,14 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n #[link(name = \"rust_test_helpers\")]\n extern {\n     fn rust_interesting_average(_: i64, ...) -> f64;\n }\n \n-#[rustc_mir]\n fn test<T, U>(a: i64, b: i64, c: i64, d: i64, e: i64, f: T, g: U) -> i64 {\n     unsafe {\n         rust_interesting_average(6, a, a as f64,"}, {"sha": "f6fe19c43097aed253c460c77715be4d1f799961", "filename": "src/test/run-pass/mir_trans_critical_edge.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_critical_edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_critical_edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_critical_edge.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -29,7 +29,6 @@ impl<A, B> Foo<A, B>\n where A: Iterator, B: Iterator<Item=A::Item>\n {\n     // This is the function we care about\n-    #[rustc_mir]\n     fn next(&mut self) -> Option<A::Item> {\n         match self.state {\n             State::Both => match self.a.next() {"}, {"sha": "8474e841e01ad91d794f285142d6ee38b6eb54e8", "filename": "src/test/run-pass/mir_trans_spike1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_spike1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_spike1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_spike1.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -10,9 +10,6 @@\n \n // A simple spike test for MIR version of trans.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn sum(x: i32, y: i32) -> i32 {\n     x + y\n }"}, {"sha": "b097bf46ad3708210eebf151ad60077439553971", "filename": "src/test/run-pass/mir_trans_switch.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_switch.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,16 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n enum Abc {\n     A(u8),\n     B(i8),\n     C,\n     D,\n }\n \n-#[rustc_mir]\n fn foo(x: Abc) -> i32 {\n     match x {\n         Abc::C => 3,\n@@ -27,7 +24,6 @@ fn foo(x: Abc) -> i32 {\n     }\n }\n \n-#[rustc_mir]\n fn foo2(x: Abc) -> bool {\n     match x {\n         Abc::D => true,"}, {"sha": "537734596a5214f42de7ba2b8b94cd5e8b486a2b", "filename": "src/test/run-pass/mir_trans_switchint.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_switchint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_trans_switchint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_switchint.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n pub fn foo(x: i8) -> i32 {\n   match x {\n     1 => 0,"}, {"sha": "78cb9fb39d6a6cf28fc9bcb093abca0beffe2d91", "filename": "src/test/run-pass/mir_void_return.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_void_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_void_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_void_return.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n-#[rustc_mir]\n fn mir() -> (){\n     let x = 1;\n     let mut y = 0;"}, {"sha": "fc9e3d5e3b535d1a74faf62fb283dc3012bc3ce0", "filename": "src/test/run-pass/mir_void_return_2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_void_return_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fmir_void_return_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_void_return_2.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n fn nil() {}\n \n-#[rustc_mir]\n fn mir(){\n     nil()\n }"}, {"sha": "ac80a4211ada627fbfc0c0a2eb50dfda3d31f570", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,11 +11,9 @@\n \n #![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n-#![feature(rustc_attrs)]\n \n use std::fmt::Debug;\n \n-#[rustc_mir(graphviz=\"mir.gv\")]\n fn foldl<T, U, F>(values: &[T],\n                   initial: U,\n                   mut function: F)\n@@ -32,7 +30,6 @@ fn foldl<T, U, F>(values: &[T],\n     }\n }\n \n-#[rustc_mir]\n fn foldr<T, U, F>(values: &[T],\n                   initial: U,\n                   mut function: F)"}, {"sha": "eecc3e7afdbb45d0549903076547343060a974c9", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns, rustc_attrs)]\n+#![feature(slice_patterns)]\n \n-#[rustc_mir]\n pub fn main() {\n     let x = &[1, 2, 3, 4, 5];\n     let x: &[isize] = &[1, 2, 3, 4, 5];"}, {"sha": "97006f54cd9551f07feb03256ae448f993202aae", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,9 +11,7 @@\n \n #![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n-#![feature(rustc_attrs)]\n \n-#[rustc_mir]\n fn a() {\n     let x = [1];\n     match x {\n@@ -23,7 +21,6 @@ fn a() {\n     }\n }\n \n-#[rustc_mir]\n fn b() {\n     let x = [1, 2, 3];\n     match x {\n@@ -60,7 +57,6 @@ fn b() {\n }\n \n \n-#[rustc_mir]\n fn b_slice() {\n     let x : &[_] = &[1, 2, 3];\n     match x {\n@@ -100,7 +96,6 @@ fn b_slice() {\n     }\n }\n \n-#[rustc_mir]\n fn c() {\n     let x = [1];\n     match x {\n@@ -109,7 +104,6 @@ fn c() {\n     }\n }\n \n-#[rustc_mir]\n fn d() {\n     let x = [1, 2, 3];\n     let branch = match x {\n@@ -121,7 +115,6 @@ fn d() {\n     assert_eq!(branch, 1);\n }\n \n-#[rustc_mir]\n fn e() {\n     let x: &[isize] = &[1, 2, 3];\n     let a = match *x {"}, {"sha": "d123eb36a7d4d0d2a762b0ddf2dc733e68e6f6b9", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -11,13 +11,11 @@\n \n \n #![feature(slice_patterns)]\n-#![feature(rustc_attrs)]\n \n struct Foo {\n     string: &'static str\n }\n \n-#[rustc_mir]\n pub fn main() {\n     let x = [\n         Foo { string: \"foo\" },"}, {"sha": "e36ae6b11b3c782cae7b781cdfc2345943584e6d", "filename": "src/test/run-pass/zero-size-type-destructors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzero-size-type-destructors.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, unsafe_no_drop_flag)]\n+#![feature(unsafe_no_drop_flag)]\n \n // ignore-pretty : (#23623) problems when  ending with // comments\n \n static mut destructions : isize = 3;\n \n-#[rustc_no_mir] // FIXME #29855 MIR doesn't handle all drops correctly.\n pub fn foo() {\n     #[unsafe_no_drop_flag]\n     struct Foo;"}, {"sha": "d399ef72976f1ae818c3f45a8980069970ada7ab", "filename": "src/test/run-pass/zero_sized_subslice_match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9b0ed91b898cbda23caa8ed1a82c37b39845de/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzero_sized_subslice_match.rs?ref=cb9b0ed91b898cbda23caa8ed1a82c37b39845de", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n #![feature(slice_patterns)]\n \n-#[rustc_mir]\n fn main() {\n     let x = [(), ()];\n "}]}