{"sha": "e8aef7cae14bc7a56859408c90253e9bcc07fcff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YWVmN2NhZTE0YmM3YTU2ODU5NDA4YzkwMjUzZTliY2MwN2ZjZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-30T11:38:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-30T11:38:31Z"}, "message": "Auto merge of #55502 - kennytm:rollup, r=kennytm\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #54885 (Don't lint 'unused_parens` on `if (break _) { .. }`)\n - #55205 (Improve a few cases of collecting to an FxHash(Map/Set))\n - #55450 (msp430: remove the whole Atomic* API)\n - #55459 (Add UI test for #49296)\n - #55472 (Use opt.take() instead of mem::replace(opt, None))\n - #55473 (Take advantage of impl Iterator in (transitive/elaborate)_bounds)\n - #55474 (Fix validation false positive)\n - #55476 (Change a flat_map with 0/1-element vecs to a filter_map)\n - #55487 (Adjust Ids of path segments in visibility modifiers)\n - #55493 (Doc fixes)\n - #55494 (borrowck=migrate must look at parents of closures)\n - #55496 (Update clippy)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "01369c637678ec513ba6f874aa1e05ce8e88dbbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01369c637678ec513ba6f874aa1e05ce8e88dbbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8aef7cae14bc7a56859408c90253e9bcc07fcff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8aef7cae14bc7a56859408c90253e9bcc07fcff", "html_url": "https://github.com/rust-lang/rust/commit/e8aef7cae14bc7a56859408c90253e9bcc07fcff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8aef7cae14bc7a56859408c90253e9bcc07fcff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1ca3907e00211b2f645133af3574ca22e4f4f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ca3907e00211b2f645133af3574ca22e4f4f4d", "html_url": "https://github.com/rust-lang/rust/commit/b1ca3907e00211b2f645133af3574ca22e4f4f4d"}, {"sha": "c16ff6e7e86e01d7e5408d28f40a255546f37c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c16ff6e7e86e01d7e5408d28f40a255546f37c6e", "html_url": "https://github.com/rust-lang/rust/commit/c16ff6e7e86e01d7e5408d28f40a255546f37c6e"}], "stats": {"total": 583, "additions": 444, "deletions": 139}, "files": [{"sha": "8ef815842df727009f6d5916ba88d61b708b3583", "filename": "src/Cargo.lock", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -326,7 +326,7 @@ dependencies = [\n  \"clippy-mini-macro-test 0.2.0\",\n  \"clippy_dev 0.0.1\",\n  \"clippy_lints 0.0.212\",\n- \"compiletest_rs 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -443,7 +443,7 @@ dependencies = [\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.3.13\"\n+version = \"0.3.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -452,6 +452,7 @@ dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1289,7 +1290,7 @@ dependencies = [\n  \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vergen 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3202,7 +3203,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiletest_rs 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3064bc712922596dd5ab449fca9261d411893356581fe5297b96aa8f53bb1b8\"\n+\"checksum compiletest_rs 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75e809f56d6aa9575b67924b0af686c4f4c1380314f47947e235e9ff7fa94bed\"\n \"checksum core-foundation 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cc3532ec724375c7cb7ff0a097b714fde180bb1f6ed2ab27cfcd99ffca873cd2\"\n \"checksum core-foundation-sys 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a3fb15cdbdd9cf8b82d97d0296bb5cd3631bba58d6e31650a002a8e7fb5721f9\"\n \"checksum crossbeam 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24ce9782d4d5c53674646a6a4c1863a21a8fc0cb649b3c94dfc16e45071dea19\""}, {"sha": "88e76033f273ed5ae7fed104539ef46a17412b5b", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -36,6 +36,8 @@ use vec::Vec;\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1\n+#[cfg(target_pointer_width = \"16\")]\n+const MAXIMUM_ZST_CAPACITY: usize = 1 << (16 - 1); // Largest possible power of two\n #[cfg(target_pointer_width = \"32\")]\n const MAXIMUM_ZST_CAPACITY: usize = 1 << (32 - 1); // Largest possible power of two\n #[cfg(target_pointer_width = \"64\")]"}, {"sha": "c3c65816b2615309e7080a187f043f2c16be7cab", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -3022,8 +3022,14 @@ impl<'a> LoweringContext<'a> {\n                             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n                             hir::VisibilityKind::Restricted { ref path, id: _, hir_id: _ } => {\n                                 let id = this.next_id();\n+                                let mut path = path.clone();\n+                                for seg in path.segments.iter_mut() {\n+                                    if seg.id.is_some() {\n+                                        seg.id = Some(this.next_id().node_id);\n+                                    }\n+                                }\n                                 hir::VisibilityKind::Restricted {\n-                                    path: path.clone(),\n+                                    path,\n                                     id: id.node_id,\n                                     hir_id: id.hir_id,\n                                 }"}, {"sha": "4fbcd83adb555c70ce811bf61d24afbc7a62a824", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 };\n \n                 bug!(\"inconsistent DepNode for `{}`: \\\n-                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?}) {}\",\n+                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?}){}\",\n                     node_str,\n                     self.definitions\n                         .def_path(self.current_dep_node_owner)"}, {"sha": "a210d63f129e31e6527389b8b4274917f50e0ab2", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -230,10 +230,7 @@ impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     type Node = Node;\n     type Edge = Edge<'tcx>;\n     fn nodes(&self) -> dot::Nodes<'_, Node> {\n-        let mut set = FxHashSet::default();\n-        for node in self.node_ids.keys() {\n-            set.insert(*node);\n-        }\n+        let set = self.node_ids.keys().cloned().collect::<FxHashSet<_>>();\n         debug!(\"constraint graph has {} nodes\", set.len());\n         set.into_iter().collect()\n     }"}, {"sha": "e3f9c51a1235ee934e046c90e09046d9689097d8", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -94,12 +94,11 @@ pub enum Linkage {\n \n pub fn calculate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n-    let mut fmts = FxHashMap::default();\n-    for &ty in sess.crate_types.borrow().iter() {\n+    let fmts = sess.crate_types.borrow().iter().map(|&ty| {\n         let linkage = calculate_type(tcx, ty);\n         verify_ok(tcx, &linkage);\n-        fmts.insert(ty, linkage);\n-    }\n+        (ty, linkage)\n+    }).collect::<FxHashMap<_, _>>();\n     sess.abort_if_errors();\n     sess.dependency_formats.set(fmts);\n }"}, {"sha": "940cf736012ec0c0e2a9bde0ffdce2c34b5a0270", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -103,11 +103,10 @@ pub fn elaborate_trait_ref<'cx, 'gcx, 'tcx>(\n \n pub fn elaborate_trait_refs<'cx, 'gcx, 'tcx>(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    trait_refs: &[ty::PolyTraitRef<'tcx>])\n+    trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n     -> Elaborator<'cx, 'gcx, 'tcx>\n {\n-    let predicates = trait_refs.iter()\n-                               .map(|trait_ref| trait_ref.to_predicate())\n+    let predicates = trait_refs.map(|trait_ref| trait_ref.to_predicate())\n                                .collect();\n     elaborate_predicates(tcx, predicates)\n }\n@@ -271,7 +270,7 @@ pub fn supertraits<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n }\n \n pub fn transitive_bounds<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-                                          bounds: &[ty::PolyTraitRef<'tcx>])\n+                                          bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>)\n                                           -> Supertraits<'cx, 'gcx, 'tcx>\n {\n     elaborate_trait_refs(tcx, bounds).filter_to_traits()"}, {"sha": "3dc31c517169f2a0f9708186e3315cc797e74793", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -174,10 +174,13 @@ impl<'sess> OnDiskCache<'sess> {\n         tcx.dep_graph.with_ignore(|| {\n             // Allocate SourceFileIndices\n             let (file_to_file_index, file_index_to_stable_id) = {\n-                let mut file_to_file_index = FxHashMap::default();\n-                let mut file_index_to_stable_id = FxHashMap::default();\n+                let files = tcx.sess.source_map().files();\n+                let mut file_to_file_index = FxHashMap::with_capacity_and_hasher(\n+                    files.len(), Default::default());\n+                let mut file_index_to_stable_id = FxHashMap::with_capacity_and_hasher(\n+                    files.len(), Default::default());\n \n-                for (index, file) in tcx.sess.source_map().files().iter().enumerate() {\n+                for (index, file) in files.iter().enumerate() {\n                     let index = SourceFileIndex(index as u32);\n                     let file_ptr: *const SourceFile = &**file as *const _;\n                     file_to_file_index.insert(file_ptr, index);"}, {"sha": "fc3353e339b4d77a27dbad8f0ce933cc656b44bc", "filename": "src/librustc/ty/steal.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use rustc_data_structures::sync::{RwLock, ReadGuard, MappedReadGuard};\n-use std::mem;\n \n /// The `Steal` struct is intended to used as the value for a query.\n /// Specifically, we sometimes have queries (*cough* MIR *cough*)\n@@ -51,7 +50,7 @@ impl<T> Steal<T> {\n \n     pub fn steal(&self) -> T {\n         let value_ref = &mut *self.value.try_write().expect(\"stealing value which is locked\");\n-        let value = mem::replace(value_ref, None);\n+        let value = value_ref.take();\n         value.expect(\"attempt to read from stolen value\")\n     }\n }"}, {"sha": "9dbf0ea9f438cb19b5b5ff4970ddf45b604e73a8", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -22,8 +22,6 @@\n //! If you expect to store more than 1 element in the common case, steer clear\n //! and use a `Vec<T>`, `Box<[T]>`, or a `SmallVec<T>`.\n \n-use std::mem;\n-\n #[derive(Clone, Hash, Debug, PartialEq)]\n pub struct TinyList<T: PartialEq> {\n     head: Option<Element<T>>\n@@ -52,15 +50,15 @@ impl<T: PartialEq> TinyList<T> {\n     pub fn insert(&mut self, data: T) {\n         self.head = Some(Element {\n             data,\n-            next: mem::replace(&mut self.head, None).map(Box::new),\n+            next: self.head.take().map(Box::new)\n         });\n     }\n \n     #[inline]\n     pub fn remove(&mut self, data: &T) -> bool {\n         self.head = match self.head {\n             Some(ref mut head) if head.data == *data => {\n-                mem::replace(&mut head.next, None).map(|x| *x)\n+                head.next.take().map(|x| *x)\n             }\n             Some(ref mut head) => return head.remove_next(data),\n             None => return false,\n@@ -100,7 +98,7 @@ impl<T: PartialEq> Element<T> {\n             if next.data != *data {\n                 return next.remove_next(data)\n             } else {\n-                mem::replace(&mut next.next, None)\n+                next.next.take()\n             }\n         } else {\n             return false"}, {"sha": "5950e19b0ee1d449562e8007ead16b09df8603dc", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -278,10 +278,9 @@ impl UnusedParens {\n                                 msg: &str,\n                                 followed_by_block: bool) {\n         if let ast::ExprKind::Paren(ref inner) = value.node {\n-            let necessary = followed_by_block && if let ast::ExprKind::Ret(_) = inner.node {\n-                true\n-            } else {\n-                parser::contains_exterior_struct_lit(&inner)\n+            let necessary = followed_by_block && match inner.node {\n+                ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n+                _ => parser::contains_exterior_struct_lit(&inner),\n             };\n             if !necessary {\n                 let expr_text = if let Ok(snippet) = cx.sess().source_map()"}, {"sha": "8d10c0395f5083fac7316a777e154ad5421cbf78", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -346,7 +346,33 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n \n         if tcx.migrate_borrowck() {\n-            match tcx.borrowck(def_id).signalled_any_error {\n+            // When borrowck=migrate, check if AST-borrowck would\n+            // error on the given code.\n+\n+            // rust-lang/rust#55492: loop over parents to ensure that\n+            // errors that AST-borrowck only detects in some parent of\n+            // a closure still allows NLL to signal an error.\n+            let mut curr_def_id = def_id;\n+            let signalled_any_error = loop {\n+                match tcx.borrowck(curr_def_id).signalled_any_error {\n+                    SignalledError::NoErrorsSeen => {\n+                        // keep traversing (and borrow-checking) parents\n+                    }\n+                    SignalledError::SawSomeError => {\n+                        // stop search here\n+                        break SignalledError::SawSomeError;\n+                    }\n+                }\n+\n+                if tcx.is_closure(curr_def_id) {\n+                    curr_def_id = tcx.parent_def_id(curr_def_id)\n+                        .expect(\"a closure must have a parent_def_id\");\n+                } else {\n+                    break SignalledError::NoErrorsSeen;\n+                }\n+            };\n+\n+            match signalled_any_error {\n                 SignalledError::NoErrorsSeen => {\n                     // if AST-borrowck signalled no errors, then\n                     // downgrade all the buffered MIR-borrowck errors"}, {"sha": "38ab21b7c8c85bcf5728b46f2dc4ec4ab19162d8", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -576,7 +576,11 @@ pub fn const_eval_provider<'a, 'tcx>(\n         key.param_env.reveal = Reveal::UserFacing;\n         match tcx.const_eval(key) {\n             // try again with reveal all as requested\n-            Err(ErrorHandled::TooGeneric) => {},\n+            Err(ErrorHandled::TooGeneric) => {\n+                // Promoteds should never be \"too generic\" when getting evaluated.\n+                // They either don't get evaluated, or we are in a monomorphic context\n+                assert!(key.value.promoted.is_none());\n+            },\n             // dedupliate calls\n             other => return other,\n         }"}, {"sha": "9d86e737dd5b6aa8acd953ce895f6f055beb1896", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -303,7 +303,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         let (lo, hi) = layout.valid_range.clone().into_inner();\n         let max_hi = u128::max_value() >> (128 - size.bits()); // as big as the size fits\n         assert!(hi <= max_hi);\n-        if lo == 0 && hi == max_hi {\n+        // We could also write `(hi + 1) % (max_hi + 1) == lo` but `max_hi + 1` overflows for `u128`\n+        if (lo == 0 && hi == max_hi) || (hi + 1 == lo) {\n             // Nothing to check\n             return Ok(());\n         }"}, {"sha": "d9ab23844918d02c2d0e719f1c22e7eae403c53d", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -35,9 +35,14 @@ pub fn target() -> TargetResult {\n             no_integrated_as: true,\n \n             // There are no atomic CAS instructions available in the MSP430\n-            // instruction set\n-            max_atomic_width: Some(16),\n+            // instruction set, and the LLVM backend doesn't currently support\n+            // compiler fences so the Atomic* API is missing on this target.\n+            // When the LLVM backend gains support for compile fences uncomment\n+            // the `singlethread: true` line and set `max_atomic_width` to\n+            // `Some(16)`.\n+            max_atomic_width: Some(0),\n             atomic_cas: false,\n+            // singlethread: true,\n \n             // Because these devices have very little resources having an\n             // unwinder is too onerous so we default to \"abort\" because the"}, {"sha": "cde08f6832ace274442b89c18e51996c782ed491", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -159,14 +159,14 @@ fn implied_bounds_from_components(\n ) -> Vec<OutlivesBound<'tcx>> {\n     sup_components\n         .into_iter()\n-        .flat_map(|component| {\n+        .filter_map(|component| {\n             match component {\n                 Component::Region(r) =>\n-                    vec![OutlivesBound::RegionSubRegion(sub_region, r)],\n+                    Some(OutlivesBound::RegionSubRegion(sub_region, r)),\n                 Component::Param(p) =>\n-                    vec![OutlivesBound::RegionSubParam(sub_region, p)],\n+                    Some(OutlivesBound::RegionSubParam(sub_region, p)),\n                 Component::Projection(p) =>\n-                    vec![OutlivesBound::RegionSubProjection(sub_region, p)],\n+                    Some(OutlivesBound::RegionSubProjection(sub_region, p)),\n                 Component::EscapingProjection(_) =>\n                 // If the projection has escaping regions, don't\n                 // try to infer any implied bounds even for its\n@@ -176,9 +176,9 @@ fn implied_bounds_from_components(\n                 // idea is that the WAY that the caller proves\n                 // that may change in the future and we want to\n                 // give ourselves room to get smarter here.\n-                    vec![],\n+                    None,\n                 Component::UnresolvedInferenceVariable(..) =>\n-                    vec![],\n+                    None,\n             }\n         })\n         .collect()"}, {"sha": "7ddc56974d816157abbf594c8c15c24f7d52765e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -1112,12 +1112,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     {\n         let tcx = self.tcx();\n \n-        let bounds: Vec<_> = self.get_type_parameter_bounds(span, ty_param_def_id)\n-            .predicates.into_iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref()).collect();\n+        let bounds = self.get_type_parameter_bounds(span, ty_param_def_id)\n+            .predicates.into_iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref());\n \n         // Check that there is exactly one way to find an associated type with the\n         // correct name.\n-        let suitable_bounds = traits::transitive_bounds(tcx, &bounds)\n+        let suitable_bounds = traits::transitive_bounds(tcx, bounds)\n             .filter(|b| self.trait_defines_associated_type_named(b.def_id(), assoc_name));\n \n         let param_node_id = tcx.hir.as_local_node_id(ty_param_def_id).unwrap();"}, {"sha": "5a8a9632350f2621959bd8d811a3a36b98574c24", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -31,6 +31,7 @@ use rustc::middle::stability;\n use syntax::ast;\n use syntax::util::lev_distance::{lev_distance, find_best_match_for_name};\n use syntax_pos::{Span, symbol::Symbol};\n+use std::iter;\n use std::mem;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -627,7 +628,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         // itself. Hence, a `&self` method will wind up with an\n         // argument type like `&Trait`.\n         let trait_ref = principal.with_self_ty(self.tcx, self_ty);\n-        self.elaborate_bounds(&[trait_ref], |this, new_trait_ref, item| {\n+        self.elaborate_bounds(iter::once(trait_ref), |this, new_trait_ref, item| {\n             let new_trait_ref = this.erase_late_bound_regions(&new_trait_ref);\n \n             let (xform_self_ty, xform_ret_ty) =\n@@ -645,7 +646,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                                                param_ty: ty::ParamTy) {\n         // FIXME -- Do we want to commit to this behavior for param bounds?\n \n-        let bounds: Vec<_> = self.param_env\n+        let bounds = self.param_env\n             .caller_bounds\n             .iter()\n             .filter_map(|predicate| {\n@@ -667,10 +668,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                     ty::Predicate::TypeOutlives(..) |\n                     ty::Predicate::ConstEvaluatable(..) => None,\n                 }\n-            })\n-            .collect();\n+            });\n \n-        self.elaborate_bounds(&bounds, |this, poly_trait_ref, item| {\n+        self.elaborate_bounds(bounds, |this, poly_trait_ref, item| {\n             let trait_ref = this.erase_late_bound_regions(&poly_trait_ref);\n \n             let (xform_self_ty, xform_ret_ty) =\n@@ -693,15 +693,16 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n     // Do a search through a list of bounds, using a callback to actually\n     // create the candidates.\n-    fn elaborate_bounds<F>(&mut self, bounds: &[ty::PolyTraitRef<'tcx>], mut mk_cand: F)\n+    fn elaborate_bounds<F>(&mut self,\n+                           bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n+                           mut mk_cand: F)\n         where F: for<'b> FnMut(&mut ProbeContext<'b, 'gcx, 'tcx>,\n                                ty::PolyTraitRef<'tcx>,\n                                ty::AssociatedItem)\n     {\n-        debug!(\"elaborate_bounds(bounds={:?})\", bounds);\n-\n         let tcx = self.tcx;\n         for bound_trait_ref in traits::transitive_bounds(tcx, bounds) {\n+            debug!(\"elaborate_bounds(bound_trait_ref={:?})\", bound_trait_ref);\n             for item in self.impl_or_trait_item(bound_trait_ref.def_id()) {\n                 if !self.has_applicable_self(&item) {\n                     self.record_static_candidate(TraitSource(bound_trait_ref.def_id()));\n@@ -831,7 +832,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         }\n \n         let static_candidates = mem::replace(&mut self.static_candidates, vec![]);\n-        let private_candidate = mem::replace(&mut self.private_candidate, None);\n+        let private_candidate = self.private_candidate.take();\n         let unsatisfied_predicates = mem::replace(&mut self.unsatisfied_predicates, vec![]);\n \n         // things failed, so lets look at all traits, for diagnostic purposes now:"}, {"sha": "4851938653b53d33eeebd38b78dd083c3a76234d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -3510,10 +3510,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\")\n         };\n \n-        let mut remaining_fields = FxHashMap::default();\n-        for (i, field) in variant.fields.iter().enumerate() {\n-            remaining_fields.insert(field.ident.modern(), (i, field));\n-        }\n+        let mut remaining_fields = variant.fields.iter().enumerate().map(|(i, field)|\n+            (field.ident.modern(), (i, field))\n+        ).collect::<FxHashMap<_, _>>();\n \n         let mut seen_fields = FxHashMap::default();\n \n@@ -5051,10 +5050,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // provided (if any) into their appropriate spaces. We'll also report\n         // errors if type parameters are provided in an inappropriate place.\n \n-        let mut generic_segs = FxHashSet::default();\n-        for PathSeg(_, index) in &path_segs {\n-            generic_segs.insert(index);\n-        }\n+        let generic_segs = path_segs.iter().map(|PathSeg(_, index)| index)\n+            .collect::<FxHashSet<_>>();\n         AstConv::prohibit_generics(self, segments.iter().enumerate().filter_map(|(index, seg)| {\n             if !generic_segs.contains(&index) {\n                 Some(seg)"}, {"sha": "b31100716397b81e581e0b94ac195a82967953b4", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -2088,7 +2088,7 @@\n         return wrapper;\n     }\n \n-    var hideItemDeclarations = getCurrentValue('rustdoc-item-declarations') === \"false\";\n+    var showItemDeclarations = getCurrentValue('rustdoc-item-declarations') === \"false\";\n     function buildToggleWrapper(e) {\n         if (hasClass(e, 'autohide')) {\n             var wrap = e.previousElementSibling;\n@@ -2117,7 +2117,7 @@\n             if (hasClass(e, \"type-decl\")) {\n                 fontSize = \"20px\";\n                 otherMessage = '&nbsp;Show&nbsp;declaration';\n-                if (hideItemDeclarations === false) {\n+                if (showItemDeclarations === false) {\n                     extraClass = 'collapsed';\n                 }\n             } else if (hasClass(e, \"sub-variant\")) {\n@@ -2136,12 +2136,13 @@\n                 extraClass = \"marg-left\";\n             }\n \n-            e.parentNode.insertBefore(createToggle(otherMessage,\n-                                                   fontSize,\n-                                                   extraClass,\n-                                                   hideItemDeclarations),\n-                                      e);\n-            if (otherMessage.length > 0 && hideItemDeclarations === true) {\n+            e.parentNode.insertBefore(\n+                createToggle(otherMessage,\n+                             fontSize,\n+                             extraClass,\n+                             hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n+                e);\n+            if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n                 collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n             }\n         }"}, {"sha": "ad6cdfd3e733b131b13f7c9891629f490c40ebbc", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -282,8 +282,11 @@ nav.sub {\n \tpadding-left: 0;\n }\n \n-.example-wrap {\n+body:not(.source) .example-wrap {\n \tdisplay: inline-flex;\n+}\n+\n+.example-wrap {\n \twidth: 100%;\n }\n \n@@ -296,7 +299,7 @@ nav.sub {\n \ttext-align: right;\n }\n \n-.example-wrap > pre.rust {\n+body:not(.source) .example-wrap > pre.rust {\n \twidth: 100%;\n }\n "}, {"sha": "9c7256fd26fed6c8b96e2a7e84ddf3eb69db6594", "filename": "src/test/run-pass/issue-55376.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Frun-pass%2Fissue-55376.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Frun-pass%2Fissue-55376.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-55376.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that paths in `pub(...)` don't fail HIR verification.\n+\n+#![allow(unused_imports)]\n+#![allow(dead_code)]\n+\n+pub(self) use self::my_mod::Foo;\n+\n+mod my_mod {\n+    pub(super) use self::Foo as Bar;\n+    pub(in super::my_mod) use self::Foo as Baz;\n+\n+    pub struct Foo;\n+}\n+\n+fn main() {}"}, {"sha": "231ae53fe82bf97484dfbf112c1372e557d6b38a", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -40,19 +40,15 @@ LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x`\n LL |     c1;\n    |     -- first borrow later used here\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/borrowck-closures-unique.rs:57:38\n    |\n LL | fn e(x: &'static mut isize) {\n    |      - help: consider changing this to be mutable: `mut x`\n LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n    |                                      ^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0500, E0524, E0594.\n For more information about an error, try `rustc --explain E0500`."}, {"sha": "c3aba793f190e617191eaf215608c30deac7d85f", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -20,7 +20,7 @@ LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than o\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n-warning: captured variable cannot escape `FnMut` closure body\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/borrowck-describe-lvalue.rs:305:16\n    |\n LL |              || {\n@@ -36,9 +36,6 @@ LL | |                 }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:53:9\n@@ -382,7 +379,7 @@ LL |                 drop(x); //[ast]~ ERROR use of moved value: `x`\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 30 previous errors\n \n Some errors occurred: E0382, E0499, E0502, E0503.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "3180823f64327b153df962041009e6ec37f39390", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.ast.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.ast.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,55 @@\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:22\n+   |\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |         x\n+   |\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:29:22\n+   |\n+LL |         let mut c1 = |z: &'static mut isize| {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |         x\n+   |\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:9\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: make this binding mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:9\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: make this binding mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:9\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: make this binding mutable: `mut x`\n+LL |         || { &mut x; };\n+   |         ^^ cannot borrow mutably\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:9\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: make this binding mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |         ^^ cannot borrow mutably\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0595`."}, {"sha": "0ccddf0a67d6fa0809861708cece0a573f3b51ae", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.migrate.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.migrate.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,54 @@\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:46\n+   |\n+LL |     pub fn e(x: &'static mut isize) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |         static mut Y: isize = 3;\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                                              ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+   |\n+LL |     pub fn ee(x: &'static mut isize) {\n+   |               - help: consider changing this to be mutable: `mut x`\n+...\n+LL |             let mut c2 = |y: &'static mut isize| x = y;\n+   |                                                  ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: consider changing this to be mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |              ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: consider changing this to be mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |              ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x; };\n+   |              ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |              ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "0ccddf0a67d6fa0809861708cece0a573f3b51ae", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.nll.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.nll.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,54 @@\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:21:46\n+   |\n+LL |     pub fn e(x: &'static mut isize) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |         static mut Y: isize = 3;\n+LL |         let mut c1 = |y: &'static mut isize| x = y;\n+   |                                              ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:30:50\n+   |\n+LL |     pub fn ee(x: &'static mut isize) {\n+   |               - help: consider changing this to be mutable: `mut x`\n+...\n+LL |             let mut c2 = |y: &'static mut isize| x = y;\n+   |                                                  ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:40:14\n+   |\n+LL |     pub fn capture_assign_whole(x: (i32,)) {\n+   |                                 - help: consider changing this to be mutable: `mut x`\n+LL |         || { x = (1,); };\n+   |              ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:43:14\n+   |\n+LL |     pub fn capture_assign_part(x: (i32,)) {\n+   |                                - help: consider changing this to be mutable: `mut x`\n+LL |         || { x.0 = 1; };\n+   |              ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:46:14\n+   |\n+LL |     pub fn capture_reborrow_whole(x: (i32,)) {\n+   |                                   - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x; };\n+   |              ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/issue-55492-borrowck-migrate-scans-parents.rs:49:14\n+   |\n+LL |     pub fn capture_reborrow_part(x: (i32,)) {\n+   |                                  - help: consider changing this to be mutable: `mut x`\n+LL |         || { &mut x.0; };\n+   |              ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "25ad66a5d9b4a6cb9367e5da03bc9f782bb2b2fd", "filename": "src/test/ui/borrowck/issue-55492-borrowck-migrate-scans-parents.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-55492-borrowck-migrate-scans-parents.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,61 @@\n+// rust-lang/rust#55492: errors detected during MIR-borrowck's\n+// analysis of a closure body may only be caught when AST-borrowck\n+// looks at some parent.\n+\n+// revisions: ast migrate nll\n+\n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[ast]compile-flags: -Z borrowck=ast\n+//[migrate]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+\n+\n+// transcribed from borrowck-closures-unique.rs\n+mod borrowck_closures_unique {\n+    pub fn e(x: &'static mut isize) {\n+        static mut Y: isize = 3;\n+        let mut c1 = |y: &'static mut isize| x = y;\n+        unsafe { c1(&mut Y); }\n+    }\n+}\n+\n+mod borrowck_closures_unique_grandparent {\n+    pub fn ee(x: &'static mut isize) {\n+        static mut Z: isize = 3;\n+        let mut c1 = |z: &'static mut isize| {\n+            let mut c2 = |y: &'static mut isize| x = y;\n+            c2(z);\n+        };\n+        unsafe { c1(&mut Z); }\n+    }\n+}\n+\n+// adapted from mutability_errors.rs\n+mod mutability_errors {\n+    pub fn capture_assign_whole(x: (i32,)) {\n+        || { x = (1,); };\n+    }\n+    pub fn capture_assign_part(x: (i32,)) {\n+        || { x.0 = 1; };\n+    }\n+    pub fn capture_reborrow_whole(x: (i32,)) {\n+        || { &mut x; };\n+    }\n+    pub fn capture_reborrow_part(x: (i32,)) {\n+        || { &mut x.0; };\n+    }\n+}\n+\n+fn main() {\n+    static mut X: isize = 2;\n+    unsafe { borrowck_closures_unique::e(&mut X); }\n+\n+    mutability_errors::capture_assign_whole((1000,));\n+    mutability_errors::capture_assign_part((2000,));\n+    mutability_errors::capture_reborrow_whole((3000,));\n+    mutability_errors::capture_reborrow_part((4000,));\n+}"}, {"sha": "14c41bb81b2c65594af40320298f4e157a95e47b", "filename": "src/test/ui/borrowck/mutability-errors.nll.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -277,57 +277,41 @@ LL |     &mut x; //~ ERROR\n LL |     &mut x.0; //~ ERROR\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:70:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     || { //~ ERROR\n LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:71:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:72:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:73:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:76:9\n@@ -389,7 +373,7 @@ error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n LL |     &mut X.0; //~ ERROR\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 38 previous errors\n \n Some errors occurred: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "a7c3c5318d4306b21c33e06af02eac8c66c21131", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,23 @@\n+// issue-49296: Unsafe shenigans in constants can result in missing errors\n+\n+#![feature(const_fn)]\n+#![feature(const_fn_union)]\n+\n+const unsafe fn transmute<T: Copy, U: Copy>(t: T) -> U {\n+    union Transmute<T: Copy, U: Copy> {\n+        from: T,\n+        to: U,\n+    }\n+\n+    Transmute { from: t }.to\n+}\n+\n+const fn wat(x: u64) -> &'static u64 {\n+    unsafe { transmute(&x) }\n+}\n+const X: u64 = *wat(42);\n+//~^ ERROR any use of this value will cause an error\n+\n+fn main() {\n+    println!(\"{}\", X);\n+}"}, {"sha": "37462db4c965e4308533e658cf064d91f2f39c7f", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,12 @@\n+error: any use of this value will cause an error\n+  --> $DIR/issue-49296.rs:18:1\n+   |\n+LL | const X: u64 = *wat(42);\n+   | ^^^^^^^^^^^^^^^--------^\n+   |                |\n+   |                dangling pointer was dereferenced\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "def4062339f9635ce253c8f6bd19478b1520ea73", "filename": "src/test/ui/consts/const-validation-fail-55455.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fconst-validation-fail-55455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fconst-validation-fail-55455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-validation-fail-55455.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,9 @@\n+// https://github.com/rust-lang/rust/issues/55454\n+// compile-pass\n+\n+struct This<T>(T);\n+\n+const C: This<Option<&i32>> = This(Some(&1));\n+\n+fn main() {\n+}"}, {"sha": "5e193b1b7de0bcaa283b7a8bcaa5bc5e31471129", "filename": "src/test/ui/consts/promoted-validation-55454.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fpromoted-validation-55454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Fconsts%2Fpromoted-validation-55454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted-validation-55454.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -0,0 +1,9 @@\n+// https://github.com/rust-lang/rust/issues/55454\n+// compile-pass\n+\n+#[derive(PartialEq)]\n+struct This<T>(T);\n+\n+fn main() {\n+    This(Some(&1)) == This(Some(&1));\n+}"}, {"sha": "9eda59614f45828074ccfdd1a2b30e6b2801b0b2", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -23,4 +23,13 @@ fn main() {\n     // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not\n     // the malformed `1 / (2 + 3`\n     let _a = (1 / (2 + 3));\n+    f();\n+}\n+\n+fn f() -> bool {\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n }"}, {"sha": "084d7ff3bcd61f85d26f3db6a4c7bc4c87908e32", "filename": "src/test/ui/unboxed-closures/unboxed-closure-immutable-capture.nll.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -33,59 +33,43 @@ LL |     let x = 0;\n LL |     move || set(&mut x); //~ ERROR cannot borrow\n    |                 ^^^^^^ cannot borrow as mutable\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:23:8\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |        ^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:25:12\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |            ^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:26:8\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |        ^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:28:12\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |            ^^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors occurred: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "718c3a19938c4a8735ea1cffe8f973501520884d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -1,15 +1,11 @@\n-warning[E0596]: cannot borrow `tick1` as mutable, as it is not declared as mutable\n+error[E0596]: cannot borrow `tick1` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:27:9\n    |\n LL |     let tick1 = || {\n    |         ----- help: consider changing this to be mutable: `mut tick1`\n ...\n LL |         tick1();\n    |         ^^^^^ cannot borrow as mutable\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0596]: cannot borrow `tick2` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:30:5\n@@ -20,6 +16,6 @@ LL |     let tick2 = || { //~ ERROR closure cannot assign to immutable local var\n LL |     tick2(); //~ ERROR cannot borrow\n    |     ^^^^^ cannot borrow as mutable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "f765f207303d2dd1b9bc74ee926c75820baf9469", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.nll.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8aef7cae14bc7a56859408c90253e9bcc07fcff/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -1,15 +1,11 @@\n-warning[E0594]: cannot assign to `n`, as it is not declared as mutable\n+error[E0594]: cannot assign to `n`, as it is not declared as mutable\n   --> $DIR/unboxed-closures-mutate-upvar.rs:25:9\n    |\n LL |     let n = 0;\n    |         - help: consider changing this to be mutable: `mut n`\n LL |     let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign\n LL |         n += 1;\n    |         ^^^^^^ cannot assign\n-   |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n \n error[E0594]: cannot assign to `n`, as it is not declared as mutable\n   --> $DIR/unboxed-closures-mutate-upvar.rs:42:9\n@@ -44,6 +40,6 @@ LL | |         n += 1; //~ ERROR cannot assign\n LL | |     });\n    | |_____^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0594`."}, {"sha": "481f7880df428020480eb343c209072c6db10503", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=e8aef7cae14bc7a56859408c90253e9bcc07fcff", "patch": "@@ -1 +1 @@\n-Subproject commit b1d0343749bdc87e5cbbe7f1aeaa9d2a2c9dbc5b\n+Subproject commit 481f7880df428020480eb343c209072c6db10503"}]}