{"sha": "2d17b5a550fd204892ed3e757b044d5cbcb595dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTdiNWE1NTBmZDIwNDg5MmVkM2U3NTdiMDQ0ZDVjYmNiNTk1ZGQ=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-23T18:35:08Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-24T17:09:10Z"}, "message": "Use `miri` inside the target directory used by rustc as Miri's target directory", "tree": {"sha": "7c9f1be2ef260415bc66777b8ed37f67c537c138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9f1be2ef260415bc66777b8ed37f67c537c138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d17b5a550fd204892ed3e757b044d5cbcb595dd", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYNS8NhUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLhMoQD+Ob8FDHQju6YvRRhaYobqqwAB6On8\nptNQ6yjbT8vprHcA/RWEkghasi0boLQKWZ55VDJ5XTICyR1SrCiZJnmDBhwC\n=RA5e\n-----END PGP SIGNATURE-----", "payload": "tree 7c9f1be2ef260415bc66777b8ed37f67c537c138\nparent 5b7f1f919b9d16e414c9d31142c18578b43ab1c5\nauthor hyd-dev <yd-huang@outlook.com> 1624473308 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1624554550 +0800\n\nUse `miri` inside the target directory used by rustc as Miri's target directory\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d17b5a550fd204892ed3e757b044d5cbcb595dd", "html_url": "https://github.com/rust-lang/rust/commit/2d17b5a550fd204892ed3e757b044d5cbcb595dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d17b5a550fd204892ed3e757b044d5cbcb595dd/comments", "author": null, "committer": null, "parents": [{"sha": "5b7f1f919b9d16e414c9d31142c18578b43ab1c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7f1f919b9d16e414c9d31142c18578b43ab1c5", "html_url": "https://github.com/rust-lang/rust/commit/5b7f1f919b9d16e414c9d31142c18578b43ab1c5"}], "stats": {"total": 137, "additions": 119, "deletions": 18}, "files": [{"sha": "28cab45be405742338829a4d05cae71f3ad93e87", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d17b5a550fd204892ed3e757b044d5cbcb595dd/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2d17b5a550fd204892ed3e757b044d5cbcb595dd/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=2d17b5a550fd204892ed3e757b044d5cbcb595dd", "patch": "@@ -83,6 +83,12 @@ jobs:\n             --host ${{ matrix.host_target }}\n           rustup default master\n \n+      # We need a nightly Cargo to run tests that depend on unstable Cargo features.\n+      - name: Install latest nightly\n+        uses: actions-rs/toolchain@v1\n+        with:\n+          toolchain: nightly\n+\n       - name: Show Rust version\n         run: |\n           rustup show"}, {"sha": "6195a917cb8dbec9caeba7f8b8dbd18235d121c7", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 89, "deletions": 18, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/2d17b5a550fd204892ed3e757b044d5cbcb595dd/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d17b5a550fd204892ed3e757b044d5cbcb595dd/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=2d17b5a550fd204892ed3e757b044d5cbcb595dd", "patch": "@@ -6,7 +6,7 @@ use std::io::{self, BufRead, BufReader, BufWriter, Read, Write};\n use std::iter::TakeWhile;\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n \n use serde::{Deserialize, Serialize};\n \n@@ -112,40 +112,60 @@ fn has_arg_flag(name: &str) -> bool {\n     args.any(|val| val == name)\n }\n \n-/// Yields all values of command line flag `name`.\n-struct ArgFlagValueIter<'a> {\n-    args: TakeWhile<env::Args, fn(&String) -> bool>,\n+/// Yields all values of command line flag `name` as `Ok(arg)`, and all other arguments except\n+/// the flag as `Err(arg)`.\n+struct ArgFlagValueWithOtherArgsIter<'a, I> {\n+    args: TakeWhile<I, fn(&String) -> bool>,\n     name: &'a str,\n }\n \n-impl<'a> ArgFlagValueIter<'a> {\n-    fn new(name: &'a str) -> Self {\n+impl<'a, I: Iterator<Item = String>> ArgFlagValueWithOtherArgsIter<'a, I> {\n+    fn new(args: I, name: &'a str) -> Self {\n         Self {\n             // Stop searching at `--`.\n-            args: env::args().take_while(|val| val != \"--\"),\n+            args: args.take_while(|val| val != \"--\"),\n             name,\n         }\n     }\n }\n \n-impl Iterator for ArgFlagValueIter<'_> {\n-    type Item = String;\n+impl<I: Iterator<Item = String>> Iterator for ArgFlagValueWithOtherArgsIter<'_, I> {\n+    type Item = Result<String, String>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        loop {\n-            let arg = self.args.next()?;\n-            if !arg.starts_with(self.name) {\n-                continue;\n-            }\n+        let arg = self.args.next()?;\n+        if arg.starts_with(self.name) {\n             // Strip leading `name`.\n             let suffix = &arg[self.name.len()..];\n             if suffix.is_empty() {\n                 // This argument is exactly `name`; the next one is the value.\n-                return self.args.next();\n+                return self.args.next().map(Ok);\n             } else if suffix.starts_with('=') {\n                 // This argument is `name=value`; get the value.\n                 // Strip leading `=`.\n-                return Some(suffix[1..].to_owned());\n+                return Some(Ok(suffix[1..].to_owned()));\n+            }\n+        }\n+        Some(Err(arg))\n+    }\n+}\n+\n+/// Yields all values of command line flag `name`.\n+struct ArgFlagValueIter<'a>(ArgFlagValueWithOtherArgsIter<'a, env::Args>);\n+\n+impl<'a> ArgFlagValueIter<'a> {\n+    fn new(name: &'a str) -> Self {\n+        Self(ArgFlagValueWithOtherArgsIter::new(env::args(), name))\n+    }\n+}\n+\n+impl Iterator for ArgFlagValueIter<'_> {\n+    type Item = String;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        loop {\n+            if let Ok(value) = self.0.next()? {\n+                return Some(value);\n             }\n         }\n     }\n@@ -510,8 +530,59 @@ fn phase_cargo_miri(mut args: env::Args) {\n         &host\n     };\n \n-    // Forward all further arguments to cargo.\n-    cmd.args(args);\n+    let mut target_dir = None;\n+\n+    // Forward all arguments before `--` other than `--target-dir` and its value to Cargo.\n+    for arg in ArgFlagValueWithOtherArgsIter::new(&mut args, \"--target-dir\") {\n+        match arg {\n+            Ok(value) => target_dir = Some(value.into()),\n+            Err(arg) => drop(cmd.arg(arg)),\n+        }\n+    }\n+\n+    // Detect the target directory if it's not specified via `--target-dir`.\n+    let target_dir = target_dir.get_or_insert_with(|| {\n+        #[derive(Deserialize)]\n+        struct Metadata {\n+            target_directory: PathBuf,\n+        }\n+        let mut cmd = cargo();\n+        // `-Zunstable-options` is required by `--config`.\n+        cmd.args([\"metadata\", \"--no-deps\", \"--format-version=1\", \"-Zunstable-options\"]);\n+        // The `build.target-dir` config can by passed by `--config` flags, so forward them to\n+        // `cargo metadata`.\n+        let config_flag = \"--config\";\n+        for arg in ArgFlagValueWithOtherArgsIter::new(\n+            env::args().skip(3), // skip the program name, \"miri\" and \"run\" / \"test\"\n+            config_flag,\n+        ) {\n+            if let Ok(config) = arg {\n+                cmd.arg(config_flag).arg(config);\n+            }\n+        }\n+        let mut child = cmd\n+            .stdin(Stdio::null())\n+            .stdout(Stdio::piped())\n+            .spawn()\n+            .expect(\"failed ro run `cargo metadata`\");\n+        // Check this `Result` after `status.success()` is checked, so we don't print the error\n+        // to stderr if `cargo metadata` is also printing to stderr.\n+        let metadata: Result<Metadata, _> = serde_json::from_reader(child.stdout.take().unwrap());\n+        let status = child.wait().expect(\"failed to wait `cargo metadata` to exit\");\n+        if !status.success() {\n+            std::process::exit(status.code().unwrap_or(-1));\n+        }\n+        metadata\n+            .unwrap_or_else(|e| show_error(format!(\"invalid `cargo metadata` output: {}\", e)))\n+            .target_directory\n+    });\n+\n+    // Set `--target-dir` to `miri` inside the original target directory.\n+    target_dir.push(\"miri\");\n+    cmd.arg(\"--target-dir\").arg(target_dir);\n+\n+    // Forward all further arguments after `--` to cargo.\n+    cmd.arg(\"--\").args(args);\n \n     // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n     // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish"}, {"sha": "af5854e0c3fd91b6c7e4c7ad2b62b03be0bbdecf", "filename": "test-cargo-miri/.gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d17b5a550fd204892ed3e757b044d5cbcb595dd/test-cargo-miri%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/2d17b5a550fd204892ed3e757b044d5cbcb595dd/test-cargo-miri%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2F.gitignore?ref=2d17b5a550fd204892ed3e757b044d5cbcb595dd", "patch": "@@ -1 +1,4 @@\n *.real\n+custom-run\n+custom-test\n+config-cli"}, {"sha": "369941787a14ff69d801fa8327cc5c4c9a00b37a", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d17b5a550fd204892ed3e757b044d5cbcb595dd/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/2d17b5a550fd204892ed3e757b044d5cbcb595dd/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=2d17b5a550fd204892ed3e757b044d5cbcb595dd", "patch": "@@ -101,6 +101,11 @@ def test_cargo_miri_run():\n         \"run.subcrate.stdout.ref\", \"run.subcrate.stderr.ref\",\n         env={'MIRIFLAGS': \"-Zmiri-disable-isolation\"},\n     )\n+    test(\"`cargo miri run` (custom target dir)\",\n+        # Attempt to confuse the argument parser.\n+        cargo_miri(\"run\") + [\"--target-dir=custom-run\", \"--\", \"--target-dir=target/custom-run\"],\n+        \"run.args.stdout.ref\", \"run.custom-target-dir.stderr.ref\",\n+    )\n \n def test_cargo_miri_test():\n     # rustdoc is not run on foreign targets\n@@ -144,8 +149,18 @@ def test_cargo_miri_test():\n         cargo_miri(\"test\") + [\"-p\", \"subcrate\", \"--doc\"],\n         \"test.stdout-empty.ref\", \"test.stderr-proc-macro-doctest.ref\",\n     )\n+    test(\"`cargo miri test` (custom target dir)\",\n+        cargo_miri(\"test\") + [\"--target-dir=custom-test\"],\n+        default_ref, \"test.stderr-empty.ref\",\n+    )\n+    del os.environ[\"CARGO_TARGET_DIR\"] # this overrides `build.target-dir` passed by `--config`, so unset it\n+    test(\"`cargo miri test` (config-cli)\",\n+        cargo_miri(\"test\") + [\"--config=build.target-dir=\\\"config-cli\\\"\", \"-Zunstable-options\"],\n+        default_ref, \"test.stderr-empty.ref\",\n+    )\n \n os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+os.environ[\"CARGO_TARGET_DIR\"] = \"target\" # this affects the location of the target directory that we need to check\n os.environ[\"RUST_TEST_NOCAPTURE\"] = \"0\" # this affects test output, so make sure it is not set\n os.environ[\"RUST_TEST_THREADS\"] = \"1\" # avoid non-deterministic output due to concurrent test runs\n \n@@ -158,6 +173,10 @@ def test_cargo_miri_test():\n     subprocess.run(cargo_miri(\"setup\"), check=True)\n test_cargo_miri_run()\n test_cargo_miri_test()\n+for target_dir in [\"target\", \"custom-run\", \"custom-test\", \"config-cli\"]:\n+    if os.listdir(target_dir) != [\"miri\"]:\n+        fail(f\"`{target_dir}` contains unexpected files\")\n+    os.access(os.path.join(target_dir, \"miri\", \"debug\", \"deps\"), os.F_OK)\n \n print(\"\\nTEST SUCCESSFUL!\")\n sys.exit(0)"}, {"sha": "4395ff8879b96386f4b0f3a81348f32b3c0e98ec", "filename": "test-cargo-miri/run.custom-target-dir.stderr.ref", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d17b5a550fd204892ed3e757b044d5cbcb595dd/test-cargo-miri%2Frun.custom-target-dir.stderr.ref", "raw_url": "https://github.com/rust-lang/rust/raw/2d17b5a550fd204892ed3e757b044d5cbcb595dd/test-cargo-miri%2Frun.custom-target-dir.stderr.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun.custom-target-dir.stderr.ref?ref=2d17b5a550fd204892ed3e757b044d5cbcb595dd", "patch": "@@ -0,0 +1,2 @@\n+main\n+--target-dir=target/custom-run"}]}