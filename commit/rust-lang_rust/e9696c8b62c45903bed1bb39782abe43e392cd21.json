{"sha": "e9696c8b62c45903bed1bb39782abe43e392cd21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Njk2YzhiNjJjNDU5MDNiZWQxYmIzOTc4MmFiZTQzZTM5MmNkMjE=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-26T13:39:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-04-20T13:30:21Z"}, "message": "Implement a lint that highlights all moves larger than 1000 bytes", "tree": {"sha": "097ccb758ca72c4538f599bd6cea1217f07850a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097ccb758ca72c4538f599bd6cea1217f07850a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9696c8b62c45903bed1bb39782abe43e392cd21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9696c8b62c45903bed1bb39782abe43e392cd21", "html_url": "https://github.com/rust-lang/rust/commit/e9696c8b62c45903bed1bb39782abe43e392cd21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9696c8b62c45903bed1bb39782abe43e392cd21/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af1e632a974b78b62895e8cb918b889cf613882", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af1e632a974b78b62895e8cb918b889cf613882", "html_url": "https://github.com/rust-lang/rust/commit/6af1e632a974b78b62895e8cb918b889cf613882"}], "stats": {"total": 167, "additions": 153, "deletions": 14}, "files": [{"sha": "e29005c0c897d5e4cf52966e6f225ec3a0f66dd7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e9696c8b62c45903bed1bb39782abe43e392cd21", "patch": "@@ -2877,6 +2877,39 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `large_assigments` lint detects when objects of large\n+    /// types are being moved around.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (can crash on some platforms)\n+    /// let x = [0; 50000];\n+    /// let y = x;\n+    /// ```\n+    ///\n+    /// produces:\n+    ///\n+    /// ```text\n+    /// warning: moving a large value\n+    ///   --> $DIR/move-large.rs:1:3\n+    ///   let y = x;\n+    ///           - Copied large value here\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// When using a large type in a plain assignment or in a function\n+    /// argument, idiomatic code can be inefficient.\n+    /// Ideally appropriate optimizations would resolve this, but such\n+    /// optimizations are only done in a best-effort manner.\n+    /// This lint will trigger on all sites of large moves and thus allow the\n+    /// user to resolve them in code.\n+    pub LARGE_ASSIGNMENTS,\n+    Allow,\n+    \"detects large moves or copies\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -2962,6 +2995,7 @@ declare_lint_pass! {\n         LEGACY_DERIVE_HELPERS,\n         PROC_MACRO_BACK_COMPAT,\n         OR_PATTERNS_BACK_COMPAT,\n+        LARGE_ASSIGNMENTS,\n     ]\n }\n "}, {"sha": "1ebb3dbe7c634f161b6ae83f8261023d2a3315c7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e9696c8b62c45903bed1bb39782abe43e392cd21", "patch": "@@ -12,10 +12,10 @@ use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n-use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, GeneratorKind};\n+use rustc_hir::{self as hir, HirId};\n use rustc_target::abi::{Size, VariantIdx};\n \n use polonius_engine::Atom;\n@@ -1948,6 +1948,26 @@ rustc_index::newtype_index! {\n     }\n }\n \n+impl SourceScope {\n+    /// Finds the original HirId this MIR item came from.\n+    /// This is necessary after MIR optimizations, as otherwise we get a HirId\n+    /// from the function that was inlined instead of the function call site.\n+    pub fn lint_root(self, source_scopes: &IndexVec<SourceScope, SourceScopeData<'tcx>>) -> Option<HirId> {\n+        let mut data = &source_scopes[self];\n+        // FIXME(oli-obk): we should be able to just walk the `inlined_parent_scope`, but it\n+        // does not work as I thought it would. Needs more investigation and documentation.\n+        while data.inlined.is_some() {\n+            trace!(?data);\n+            data = &source_scopes[data.parent_scope.unwrap()];\n+        }\n+        trace!(?data);\n+        match &data.local_data {\n+            ClearCrossCrate::Set(data) => Some(data.lint_root),\n+            ClearCrossCrate::Clear => None,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub struct SourceScopeData<'tcx> {\n     pub span: Span,"}, {"sha": "8ff3edac65fbe05c884bfa09f4865af4d722888c", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=e9696c8b62c45903bed1bb39782abe43e392cd21", "patch": "@@ -198,7 +198,9 @@ use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n+use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n+use rustc_target::abi::Size;\n use smallvec::SmallVec;\n use std::iter;\n use std::ops::Range;\n@@ -753,6 +755,41 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_terminator(terminator, location);\n     }\n \n+    fn visit_operand(&mut self, operand: &mir::Operand<'tcx>, location: Location) {\n+        self.super_operand(operand, location);\n+        let ty = operand.ty(self.body, self.tcx);\n+        let ty = self.monomorphize(ty);\n+        let layout = self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty));\n+        if let Ok(layout) = layout {\n+            if layout.size > Size::from_bytes(1000) {\n+                debug!(?layout);\n+                let source_info = self.body.source_info(location);\n+                debug!(?source_info);\n+                let lint_root = source_info.scope.lint_root(&self.body.source_scopes);\n+                debug!(?lint_root);\n+                let lint_root = match lint_root {\n+                    Some(lint_root) => lint_root,\n+                    // This happens when the issue is in a function from a foreign crate that\n+                    // we monomorphized in the current crate. We can't get a `HirId` for things\n+                    // in other crates.\n+                    // FIXME: Find out where to report the lint on. Maybe simply crate-level lint root\n+                    // but correct span? This would make the lint at least accept crate-level lint attributes.\n+                    None => return,\n+                };\n+                self.tcx.struct_span_lint_hir(\n+                    LARGE_ASSIGNMENTS,\n+                    lint_root,\n+                    source_info.span,\n+                    |lint| {\n+                        let mut err = lint.build(&format!(\"moving {} bytes\", layout.size.bytes()));\n+                        err.span_label(source_info.span, \"value moved from here\");\n+                        err.emit()\n+                    },\n+                );\n+            }\n+        }\n+    }\n+\n     fn visit_local(\n         &mut self,\n         _place_local: &Local,"}, {"sha": "0d48ff6530e5be8290e1d2bcdca7feca3ce6b399", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9696c8b62c45903bed1bb39782abe43e392cd21/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=e9696c8b62c45903bed1bb39782abe43e392cd21", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc_middle::mir::{\n-    AssertKind, BasicBlock, BinOp, Body, ClearCrossCrate, Constant, ConstantKind, Local, LocalDecl,\n+    AssertKind, BasicBlock, BinOp, Body, Constant, ConstantKind, Local, LocalDecl,\n     LocalKind, Location, Operand, Place, Rvalue, SourceInfo, SourceScope, SourceScopeData,\n     Statement, StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n@@ -440,18 +440,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n-        let mut data = &self.source_scopes[source_info.scope];\n-        // FIXME(oli-obk): we should be able to just walk the `inlined_parent_scope`, but it\n-        // does not work as I thought it would. Needs more investigation and documentation.\n-        while data.inlined.is_some() {\n-            trace!(?data);\n-            data = &self.source_scopes[data.parent_scope.unwrap()];\n-        }\n-        trace!(?data);\n-        match &data.local_data {\n-            ClearCrossCrate::Set(data) => Some(data.lint_root),\n-            ClearCrossCrate::Clear => None,\n-        }\n+        source_info.scope.lint_root(&self.source_scopes)\n     }\n \n     fn use_ecx<F, T>(&mut self, f: F) -> Option<T>"}, {"sha": "7e6819d6d139092dc08216f9b2b401966cca3ec0", "filename": "src/test/ui/async-await/large_moves.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9696c8b62c45903bed1bb39782abe43e392cd21/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9696c8b62c45903bed1bb39782abe43e392cd21/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs?ref=e9696c8b62c45903bed1bb39782abe43e392cd21", "patch": "@@ -0,0 +1,21 @@\n+#![deny(large_assignments)]\n+// build-fail\n+\n+// edition:2018\n+\n+fn main() {\n+    let x = async { //~ ERROR large_assignments\n+        let y = [0; 9999];\n+        dbg!(y);\n+        thing(&y).await;\n+        dbg!(y);\n+    };\n+    let z = (x, 42); //~ ERROR large_assignments\n+    //~^ ERROR large_assignments\n+    let a = z.0; //~ ERROR large_assignments\n+    let b = z.1;\n+}\n+\n+async fn thing(y: &[u8]) {\n+    dbg!(y);\n+}\n\\ No newline at end of file"}, {"sha": "d395d2ae8696d123a223b5b00ab76861d664f4fb", "filename": "src/test/ui/async-await/large_moves.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e9696c8b62c45903bed1bb39782abe43e392cd21/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9696c8b62c45903bed1bb39782abe43e392cd21/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr?ref=e9696c8b62c45903bed1bb39782abe43e392cd21", "patch": "@@ -0,0 +1,38 @@\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:7:13\n+   |\n+LL |       let x = async {\n+   |  _____________^\n+LL | |         let y = [0; 9999];\n+LL | |         dbg!(y);\n+LL | |         thing(&y).await;\n+LL | |         dbg!(y);\n+LL | |     };\n+   | |_____^ value moved from here\n+   |\n+note: the lint level is defined here\n+  --> $DIR/large_moves.rs:1:9\n+   |\n+LL | #![deny(large_assignments)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:13:14\n+   |\n+LL |     let z = (x, 42);\n+   |              ^ value moved from here\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:13:13\n+   |\n+LL |     let z = (x, 42);\n+   |             ^^^^^^^ value moved from here\n+\n+error: moving 10024 bytes\n+  --> $DIR/large_moves.rs:15:13\n+   |\n+LL |     let a = z.0;\n+   |             ^^^ value moved from here\n+\n+error: aborting due to 4 previous errors\n+"}]}