{"sha": "be7f619870085121bdd7911aa882c35e70aedb8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlN2Y2MTk4NzAwODUxMjFiZGQ3OTExYWE4ODJjMzVlNzBhZWRiOGE=", "commit": {"author": {"name": "moxian", "email": "moxian@google.com", "date": "2018-06-04T11:00:12Z"}, "committer": {"name": "moxian", "email": "moxian@google.com", "date": "2018-06-28T21:57:08Z"}, "message": "Change traits to bare FnMut where possible.", "tree": {"sha": "045ec8b6247650bad7a2442717937eb284ac8b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045ec8b6247650bad7a2442717937eb284ac8b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be7f619870085121bdd7911aa882c35e70aedb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be7f619870085121bdd7911aa882c35e70aedb8a", "html_url": "https://github.com/rust-lang/rust/commit/be7f619870085121bdd7911aa882c35e70aedb8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be7f619870085121bdd7911aa882c35e70aedb8a/comments", "author": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d426ac387f2d42c998349c76ac1c2aea044e0ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d426ac387f2d42c998349c76ac1c2aea044e0ec", "html_url": "https://github.com/rust-lang/rust/commit/9d426ac387f2d42c998349c76ac1c2aea044e0ec"}], "stats": {"total": 178, "additions": 67, "deletions": 111}, "files": [{"sha": "c8b946bf13ad1d899fee77824cc790db3ed50fb0", "filename": "src/libstd/sys/windows/backtrace/printing/msvc.rs", "status": "modified", "additions": 67, "deletions": 111, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/be7f619870085121bdd7911aa882c35e70aedb8a/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be7f619870085121bdd7911aa882c35e70aedb8a/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs?ref=be7f619870085121bdd7911aa882c35e70aedb8a", "patch": "@@ -69,24 +69,48 @@ where\n     F: FnOnce(Option<&str>) -> io::Result<()>,\n {\n     match context.StackWalkVariant {\n-        StackWalkVariant::StackWalkEx(_, ref fns) => {\n-            resolve_symname_internal(fns.resolve_symname, frame, callback, context)\n-        }\n-        StackWalkVariant::StackWalk64(_, ref fns) => {\n-            resolve_symname_internal(fns.resolve_symname, frame, callback, context)\n-        }\n+        StackWalkVariant::StackWalkEx(_, ref fns) => resolve_symname_internal(\n+            |process: c::HANDLE,\n+             symbol_address: u64,\n+             inline_context: c::ULONG,\n+             info: *mut c::SYMBOL_INFO| unsafe {\n+                let mut displacement = 0u64;\n+                (fns.resolve_symname)(\n+                    process,\n+                    symbol_address,\n+                    inline_context,\n+                    &mut displacement,\n+                    info,\n+                )\n+            },\n+            frame,\n+            callback,\n+            context,\n+        ),\n+        StackWalkVariant::StackWalk64(_, ref fns) => resolve_symname_internal(\n+            |process: c::HANDLE,\n+             symbol_address: u64,\n+             _inline_context: c::ULONG,\n+             info: *mut c::SYMBOL_INFO| unsafe {\n+                let mut displacement = 0u64;\n+                (fns.resolve_symname)(process, symbol_address, &mut displacement, info)\n+            },\n+            frame,\n+            callback,\n+            context,\n+        ),\n     }\n }\n \n fn resolve_symname_internal<F, R>(\n-    symbol_resolver: R,\n+    mut symbol_resolver: R,\n     frame: Frame,\n     callback: F,\n     context: &BacktraceContext,\n ) -> io::Result<()>\n where\n     F: FnOnce(Option<&str>) -> io::Result<()>,\n-    R: SymbolResolver,\n+    R: FnMut(c::HANDLE, u64, c::ULONG, *mut c::SYMBOL_INFO) -> c::BOOL,\n {\n     unsafe {\n         let mut info: c::SYMBOL_INFO = mem::zeroed();\n@@ -96,7 +120,7 @@ where\n         // due to struct alignment.\n         info.SizeOfStruct = 88;\n \n-        let ret = symbol_resolver.resolve_symbol(\n+        let ret = symbol_resolver(\n             context.handle,\n             frame.symbol_addr as u64,\n             frame.inline_context,\n@@ -121,52 +145,6 @@ where\n     }\n }\n \n-trait SymbolResolver {\n-    fn resolve_symbol(\n-        &self,\n-        process: c::HANDLE,\n-        symbol_address: u64,\n-        inline_context: c::ULONG,\n-        info: *mut c::SYMBOL_INFO,\n-    ) -> c::BOOL;\n-}\n-\n-impl SymbolResolver for SymFromAddrFn {\n-    fn resolve_symbol(\n-        &self,\n-        process: c::HANDLE,\n-        symbol_address: u64,\n-        _inline_context: c::ULONG,\n-        info: *mut c::SYMBOL_INFO,\n-    ) -> c::BOOL {\n-        unsafe {\n-            let mut displacement = 0u64;\n-            self(process, symbol_address, &mut displacement, info)\n-        }\n-    }\n-}\n-\n-impl SymbolResolver for SymFromInlineContextFn {\n-    fn resolve_symbol(\n-        &self,\n-        process: c::HANDLE,\n-        symbol_address: u64,\n-        inline_context: c::ULONG,\n-        info: *mut c::SYMBOL_INFO,\n-    ) -> c::BOOL {\n-        unsafe {\n-            let mut displacement = 0u64;\n-            self(\n-                process,\n-                symbol_address,\n-                inline_context,\n-                &mut displacement,\n-                info,\n-            )\n-        }\n-    }\n-}\n-\n pub fn foreach_symbol_fileline<F>(\n     frame: Frame,\n     callback: F,\n@@ -176,30 +154,55 @@ where\n     F: FnMut(&[u8], u32) -> io::Result<()>,\n {\n     match context.StackWalkVariant {\n-        StackWalkVariant::StackWalkEx(_, ref fns) => {\n-            foreach_symbol_fileline_iternal(fns.sym_get_line, frame, callback, context)\n-        }\n-        StackWalkVariant::StackWalk64(_, ref fns) => {\n-            foreach_symbol_fileline_iternal(fns.sym_get_line, frame, callback, context)\n-        }\n+        StackWalkVariant::StackWalkEx(_, ref fns) => foreach_symbol_fileline_iternal(\n+            |process: c::HANDLE,\n+             frame_address: u64,\n+             inline_context: c::ULONG,\n+             line: *mut c::IMAGEHLP_LINE64| unsafe {\n+                let mut displacement = 0u32;\n+                (fns.sym_get_line)(\n+                    process,\n+                    frame_address,\n+                    inline_context,\n+                    0,\n+                    &mut displacement,\n+                    line,\n+                )\n+            },\n+            frame,\n+            callback,\n+            context,\n+        ),\n+        StackWalkVariant::StackWalk64(_, ref fns) => foreach_symbol_fileline_iternal(\n+            |process: c::HANDLE,\n+             frame_address: u64,\n+             _inline_context: c::ULONG,\n+             line: *mut c::IMAGEHLP_LINE64| unsafe {\n+                let mut displacement = 0u32;\n+                (fns.sym_get_line)(process, frame_address, &mut displacement, line)\n+            },\n+            frame,\n+            callback,\n+            context,\n+        ),\n     }\n }\n \n fn foreach_symbol_fileline_iternal<F, G>(\n-    line_getter: G,\n+    mut line_getter: G,\n     frame: Frame,\n     mut callback: F,\n     context: &BacktraceContext,\n ) -> io::Result<bool>\n where\n     F: FnMut(&[u8], u32) -> io::Result<()>,\n-    G: LineGetter,\n+    G: FnMut(c::HANDLE, u64, c::ULONG, *mut c::IMAGEHLP_LINE64) -> c::BOOL,\n {\n     unsafe {\n         let mut line: c::IMAGEHLP_LINE64 = mem::zeroed();\n         line.SizeOfStruct = ::mem::size_of::<c::IMAGEHLP_LINE64>() as u32;\n \n-        let ret = line_getter.get_line(\n+        let ret = line_getter(\n             context.handle,\n             frame.exact_position as u64,\n             frame.inline_context,\n@@ -212,50 +215,3 @@ where\n         Ok(false)\n     }\n }\n-\n-trait LineGetter {\n-    fn get_line(\n-        &self,\n-        process: c::HANDLE,\n-        frame_address: u64,\n-        inline_context: c::ULONG,\n-        line: *mut c::IMAGEHLP_LINE64,\n-    ) -> c::BOOL;\n-}\n-\n-impl LineGetter for SymGetLineFromAddr64Fn {\n-    fn get_line(\n-        &self,\n-        process: c::HANDLE,\n-        frame_address: u64,\n-        _inline_context: c::ULONG,\n-        line: *mut c::IMAGEHLP_LINE64,\n-    ) -> c::BOOL {\n-        unsafe {\n-            let mut displacement = 0u32;\n-            self(process, frame_address, &mut displacement, line)\n-        }\n-    }\n-}\n-\n-impl LineGetter for SymGetLineFromInlineContextFn {\n-    fn get_line(\n-        &self,\n-        process: c::HANDLE,\n-        frame_address: u64,\n-        inline_context: c::ULONG,\n-        line: *mut c::IMAGEHLP_LINE64,\n-    ) -> c::BOOL {\n-        unsafe {\n-            let mut displacement = 0u32;\n-            self(\n-                process,\n-                frame_address,\n-                inline_context,\n-                0,\n-                &mut displacement,\n-                line,\n-            )\n-        }\n-    }\n-}"}]}