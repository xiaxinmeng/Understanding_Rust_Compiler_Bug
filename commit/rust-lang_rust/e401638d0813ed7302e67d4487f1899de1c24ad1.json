{"sha": "e401638d0813ed7302e67d4487f1899de1c24ad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MDE2MzhkMDgxM2VkNzMwMmU2N2Q0NDg3ZjE4OTlkZTFjMjRhZDE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-14T15:59:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-14T15:59:04Z"}, "message": "Rollup merge of #53112 - fukatani:pretty-print-btreeset, r=michaelwoerister\n\npretty print BTreeSet\n\nI want pretty printing for BTreeSet.\n```rust\nuse std::collections::*;\n\nfn main() {\n  let mut s = BTreeSet::new();\n  s.insert(5);\n  s.insert(3);\n  s.insert(7);\n  s.remove(&3);\n  println!(\"{:?}\", s);\n}\n```\n\n```\n(gdb) b 9\n(gdb) p s\n$1 = BTreeSet<i32> with 2 elements = {[0] = 5, [1] = 7}\n```\nThis is analogy of pretty printing for C++ std::set.", "tree": {"sha": "0337dfbff4f88852c91c22b847e11aa4970022d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0337dfbff4f88852c91c22b847e11aa4970022d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e401638d0813ed7302e67d4487f1899de1c24ad1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcvxICRBK7hj4Ov3rIwAAdHIIADPUu2+HArDsOsnWUU5JxodU\n6jx5/6gsZ75yC2STNmU4o8ETCULEGAUHo1+8D+bH/BvsSN1K7yRAQp3bNcTjzUIc\n677H46+30H0ROOSdSbMP1jC0E+Ff1SMk+XvpOZ/Kg1/0vty+yu9/h3blHa3BApOw\nFqmXQn3a6aBk0YTS6ZXaM7xR8iqRv+mHuqav2mPYh7uzoAPnuxLf68LfwzplTjFz\nY9RdqFZI3YNH0ukpu9XeyQkCoRmI+YcOQnVKV70MGZlgS+qrNvbW/bGgf9vqvI8H\nS9TU3G1drRjPfORT6CDB9wKgxgvEJQtG69Wl/VxNJi2iKHnmvW/YCNlVVlIQs6E=\n=823f\n-----END PGP SIGNATURE-----\n", "payload": "tree 0337dfbff4f88852c91c22b847e11aa4970022d4\nparent f45f52532a394d2d607fc5693364ad820049376d\nparent 6e562d24c6a2849516745da540fdebe832c114ee\nauthor kennytm <kennytm@gmail.com> 1534262344 +0800\ncommitter GitHub <noreply@github.com> 1534262344 +0800\n\nRollup merge of #53112 - fukatani:pretty-print-btreeset, r=michaelwoerister\n\npretty print BTreeSet\n\nI want pretty printing for BTreeSet.\n```rust\nuse std::collections::*;\n\nfn main() {\n  let mut s = BTreeSet::new();\n  s.insert(5);\n  s.insert(3);\n  s.insert(7);\n  s.remove(&3);\n  println!(\"{:?}\", s);\n}\n```\n\n```\n(gdb) b 9\n(gdb) p s\n$1 = BTreeSet<i32> with 2 elements = {[0] = 5, [1] = 7}\n```\nThis is analogy of pretty printing for C++ std::set.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e401638d0813ed7302e67d4487f1899de1c24ad1", "html_url": "https://github.com/rust-lang/rust/commit/e401638d0813ed7302e67d4487f1899de1c24ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e401638d0813ed7302e67d4487f1899de1c24ad1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f45f52532a394d2d607fc5693364ad820049376d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f45f52532a394d2d607fc5693364ad820049376d", "html_url": "https://github.com/rust-lang/rust/commit/f45f52532a394d2d607fc5693364ad820049376d"}, {"sha": "6e562d24c6a2849516745da540fdebe832c114ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e562d24c6a2849516745da540fdebe832c114ee", "html_url": "https://github.com/rust-lang/rust/commit/6e562d24c6a2849516745da540fdebe832c114ee"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "e64d863717da0019773a6eb0c861ebfd15d32aa1", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e401638d0813ed7302e67d4487f1899de1c24ad1/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/e401638d0813ed7302e67d4487f1899de1c24ad1/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=e401638d0813ed7302e67d4487f1899de1c24ad1", "patch": "@@ -48,6 +48,7 @@\n TYPE_KIND_REGULAR_UNION     = 17\n TYPE_KIND_OS_STRING         = 18\n TYPE_KIND_STD_VECDEQUE      = 19\n+TYPE_KIND_STD_BTREESET      = 20\n \n ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\"\n@@ -71,6 +72,9 @@\n                             STD_VECDEQUE_FIELD_NAME_HEAD,\n                             STD_VECDEQUE_FIELD_NAME_BUF]\n \n+# std::collections::BTreeSet<> related constants\n+STD_BTREESET_FIELD_NAMES = [\"map\"]\n+\n # std::String related constants\n STD_STRING_FIELD_NAMES = [\"vec\"]\n \n@@ -175,6 +179,11 @@ def __classify_struct(self):\n             self.__conforms_to_field_layout(STD_VECDEQUE_FIELD_NAMES)):\n             return TYPE_KIND_STD_VECDEQUE\n \n+        # STD COLLECTION BTREESET\n+        if (unqualified_type_name.startswith(\"BTreeSet<\") and\n+                self.__conforms_to_field_layout(STD_BTREESET_FIELD_NAMES)):\n+            return TYPE_KIND_STD_BTREESET\n+\n         # STD STRING\n         if (unqualified_type_name.startswith(\"String\") and\n             self.__conforms_to_field_layout(STD_STRING_FIELD_NAMES)):\n@@ -358,6 +367,19 @@ def extract_tail_head_ptr_and_cap_from_std_vecdeque(vec_val):\n     return (tail, head, data_ptr, capacity)\n \n \n+def extract_length_and_ptr_from_std_btreeset(vec_val):\n+    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_BTREESET\n+    map = vec_val.get_child_at_index(0)\n+    root = map.get_child_at_index(0)\n+    length = map.get_child_at_index(1).as_integer()\n+    node = root.get_child_at_index(0)\n+    ptr = node.get_child_at_index(0)\n+    unique_ptr_val = ptr.get_child_at_index(0)\n+    data_ptr = unique_ptr_val.get_child_at_index(0)\n+    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n+    return (length, data_ptr)\n+\n+\n def extract_length_and_ptr_from_slice(slice_val):\n     assert (slice_val.type.get_type_kind() == TYPE_KIND_SLICE or\n             slice_val.type.get_type_kind() == TYPE_KIND_STR_SLICE)"}, {"sha": "fae1fd0cac30dde40b36f28e31a5b1a9215d340c", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e401638d0813ed7302e67d4487f1899de1c24ad1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/e401638d0813ed7302e67d4487f1899de1c24ad1/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=e401638d0813ed7302e67d4487f1899de1c24ad1", "patch": "@@ -127,6 +127,9 @@ def rust_pretty_printer_lookup_function(gdb_val):\n     if type_kind == rustpp.TYPE_KIND_STD_VECDEQUE:\n         return RustStdVecDequePrinter(val)\n \n+    if type_kind == rustpp.TYPE_KIND_STD_BTREESET:\n+        return RustStdBTreeSetPrinter(val)\n+\n     if type_kind == rustpp.TYPE_KIND_STD_STRING:\n         return RustStdStringPrinter(val)\n \n@@ -299,6 +302,29 @@ def children(self):\n             yield (str(index), (gdb_ptr + index).dereference())\n \n \n+class RustStdBTreeSetPrinter(object):\n+    def __init__(self, val):\n+        self.__val = val\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"array\"\n+\n+    def to_string(self):\n+        (length, data_ptr) = \\\n+            rustpp.extract_length_and_ptr_from_std_btreeset(self.__val)\n+        return (self.__val.type.get_unqualified_type_name() +\n+                (\"(len: %i)\" % length))\n+\n+    def children(self):\n+        (length, data_ptr) = \\\n+            rustpp.extract_length_and_ptr_from_std_btreeset(self.__val)\n+        val = GdbValue(data_ptr.get_wrapped_value().dereference()).get_child_at_index(3)\n+        gdb_ptr = val.get_wrapped_value()\n+        for index in xrange(length):\n+            yield (str(index), gdb_ptr[index])\n+\n+\n class RustStdStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val"}, {"sha": "18d73bf5677bce950c35c9dece69f5837e0cc0ce", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e401638d0813ed7302e67d4487f1899de1c24ad1/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e401638d0813ed7302e67d4487f1899de1c24ad1/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=e401638d0813ed7302e67d4487f1899de1c24ad1", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows failing on win32 bot\n+// ignore-freebsd: gdb package too new\n+// ignore-android: FIXME(#10381)\n+// compile-flags:-g\n+// min-gdb-version 7.7\n+// min-lldb-version: 310\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command: run\n+\n+// gdb-command: print btree_set\n+// gdb-check:$1 = BTreeSet<i32>(len: 3) = {3, 5, 7}\n+\n+// gdb-command: print vec_deque\n+// gdb-check:$2 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n+\n+#![allow(unused_variables)]\n+use std::collections::BTreeSet;\n+use std::collections::VecDeque;\n+\n+\n+fn main() {\n+\n+    // BTreeSet\n+    let mut btree_set = BTreeSet::new();\n+    btree_set.insert(5);\n+    btree_set.insert(3);\n+    btree_set.insert(7);\n+\n+    // VecDeque\n+    let mut vec_deque = VecDeque::new();\n+    vec_deque.push_back(5);\n+    vec_deque.push_back(3);\n+    vec_deque.push_back(7);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}