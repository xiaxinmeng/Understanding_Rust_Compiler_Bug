{"sha": "f3ebafac913472e81c85574fc3d6645070d4e5bf", "node_id": "C_kwDOAAsO6NoAKGYzZWJhZmFjOTEzNDcyZTgxYzg1NTc0ZmMzZDY2NDUwNzBkNGU1YmY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-18T17:07:22Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-18T17:11:04Z"}, "message": "Extract obligations_satisfiable fn", "tree": {"sha": "d5f2da17649b423cd6956071480f117708fc21df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f2da17649b423cd6956071480f117708fc21df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ebafac913472e81c85574fc3d6645070d4e5bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmI0vSgACgkQgTGiTgx5\n76/wAw/+KLpOszfuA+wqP/7Ts40xjz5AcOz5tJxT2PSfgdkNoqwDWuzwSMLYzzCD\nnl9M4qzI2fbPiPy3uZlLoWOgunER23iiiAnNzJmNF4qUvPh8zo7ls3Os4H8gUxRA\nEcKOKDQQDSqC8lLIk54w/N8x5CnKngzm21Zj/5GfMhgAWdMrUY1boUXSDqH2UzUk\ne0WXI6hHo704oTLXfO1IpH9cRQVn8oA+hrOEE1Nmp8o4ZMAVC2NdXLAGRWwfLp5H\n+Czn/U+s3LTFn9j6Fz8Nqqs4y+KyKtXihG2AZNOGTNNGG4puAyfyztNJ+rR7yUZ4\nhuOu1HyzO3eLWE3NJ7S0SZ2H8d9UCie0cuoCtT9XWrB3/PcwI9QFwtRLnWYJc3MU\n94DCJOX1505SkQyOPdO1BkMG2lkJmn+3oLikqQyZwkCk3l0TOWrFq5N7hjra2x9u\n4wlFJVzPcqQJhhQfp/bqZEmZ1Gsczts4vej2JupUlXkUTwq9lYgBjTmbedUMc2UJ\nVuPuTxjpFxe/Nu8KdkcLssGN9379OcDqvnV9O3jlIxkpBd5RA9SY0JNU92XV8iwG\n7fbMML5HwjqpdptpxT+DIHQ1L2Ek2bxR8s1hRXpBQwVBqcFis6A5sPMjcTMkCEga\ndbu2RXLe0V6yce0XzD3Fzd7HYFsP4GuUMFwR99XadhTRRSDgtfQ=\n=vCYi\n-----END PGP SIGNATURE-----", "payload": "tree d5f2da17649b423cd6956071480f117708fc21df\nparent 89fdb62331df00cf3f0fbd064b159d49d4d0fb48\nauthor Santiago Pastorino <spastorino@gmail.com> 1647623242 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1647623464 -0300\n\nExtract obligations_satisfiable fn\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ebafac913472e81c85574fc3d6645070d4e5bf", "html_url": "https://github.com/rust-lang/rust/commit/f3ebafac913472e81c85574fc3d6645070d4e5bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ebafac913472e81c85574fc3d6645070d4e5bf/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89fdb62331df00cf3f0fbd064b159d49d4d0fb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/89fdb62331df00cf3f0fbd064b159d49d4d0fb48", "html_url": "https://github.com/rust-lang/rust/commit/89fdb62331df00cf3f0fbd064b159d49d4d0fb48"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "5e97818a52688a9ad9ac7aa6a8adf909e5129e38", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f3ebafac913472e81c85574fc3d6645070d4e5bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ebafac913472e81c85574fc3d6645070d4e5bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f3ebafac913472e81c85574fc3d6645070d4e5bf", "patch": "@@ -17,6 +17,7 @@ use crate::traits::{\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::CRATE_HIR_ID;\n+use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::{util, TraitEngine};\n use rustc_middle::traits::specialization_graph::OverlapMode;\n@@ -26,6 +27,7 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n+use std::fmt::Debug;\n use std::iter;\n \n /// Whether we do the orphan check relative to this crate or\n@@ -327,56 +329,56 @@ fn negative_impl<'cx, 'tcx>(\n             let (impl2_trait_ref, obligations) =\n                 impl_trait_ref_and_oblig(selcx, impl1_env, impl2_def_id, impl2_substs);\n \n-            // do the impls unify? If not, not disjoint.\n-            let Ok(InferOk { obligations: more_obligations, .. }) = infcx\n-            .at(&ObligationCause::dummy(), impl1_env)\n-            .eq(impl1_trait_ref, impl2_trait_ref) else {\n-                debug!(\n-                    \"explicit_disjoint: {:?} does not unify with {:?}\",\n-                    impl1_trait_ref, impl2_trait_ref\n-                );\n-                return false;\n-            };\n-\n-            let opt_failing_obligation = obligations\n-                .into_iter()\n-                .chain(more_obligations)\n-                .find(|o| negative_impl_exists(selcx, impl1_env, impl1_def_id, o));\n-\n-            if let Some(failing_obligation) = opt_failing_obligation {\n-                debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n-                true\n-            } else {\n-                false\n-            }\n+            !obligations_satisfiable(\n+                &infcx,\n+                impl1_env,\n+                impl1_def_id,\n+                impl1_trait_ref,\n+                impl2_trait_ref,\n+                obligations,\n+            )\n         } else {\n             let ty1 = tcx.type_of(impl1_def_id);\n             let ty2 = tcx.type_of(impl2_def_id);\n \n-            let Ok(InferOk { obligations, .. }) = infcx\n-            .at(&ObligationCause::dummy(), impl1_env)\n-            .eq(ty1, ty2) else {\n-                debug!(\n-                    \"explicit_disjoint: {:?} does not unify with {:?}\",\n-                    ty1, ty2\n-                );\n-                return false;\n-            };\n-\n-            let opt_failing_obligation = obligations\n-                .into_iter()\n-                .find(|o| negative_impl_exists(selcx, impl1_env, impl1_def_id, o));\n-\n-            if let Some(failing_obligation) = opt_failing_obligation {\n-                debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n-                true\n-            } else {\n-                false\n-            }\n+            !obligations_satisfiable(&infcx, impl1_env, impl1_def_id, ty1, ty2, iter::empty())\n         }\n     })\n }\n \n+fn obligations_satisfiable<'cx, 'tcx, T: Debug + ToTrace<'tcx>>(\n+    infcx: &InferCtxt<'cx, 'tcx>,\n+    impl1_env: ty::ParamEnv<'tcx>,\n+    impl1_def_id: DefId,\n+    impl1: T,\n+    impl2: T,\n+    obligations: impl Iterator<Item = PredicateObligation<'tcx>>,\n+) -> bool {\n+    // do the impls unify? If not, not disjoint.\n+    let Ok(InferOk { obligations: more_obligations, .. }) = infcx\n+        .at(&ObligationCause::dummy(), impl1_env)\n+        .eq(impl1, impl2) else {\n+            debug!(\n+                \"explicit_disjoint: {:?} does not unify with {:?}\",\n+                impl1, impl2\n+            );\n+            return true;\n+        };\n+\n+    let selcx = &mut SelectionContext::new(&infcx);\n+    let opt_failing_obligation = obligations\n+        .into_iter()\n+        .chain(more_obligations)\n+        .find(|o| negative_impl_exists(selcx, impl1_env, impl1_def_id, o));\n+\n+    if let Some(failing_obligation) = opt_failing_obligation {\n+        debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n+        false\n+    } else {\n+        true\n+    }\n+}\n+\n /// Try to prove that a negative impl exist for the given obligation and their super predicates.\n #[instrument(level = \"debug\", skip(selcx))]\n fn negative_impl_exists<'cx, 'tcx>("}]}