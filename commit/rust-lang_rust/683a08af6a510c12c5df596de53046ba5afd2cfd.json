{"sha": "683a08af6a510c12c5df596de53046ba5afd2cfd", "node_id": "C_kwDOAAsO6NoAKDY4M2EwOGFmNmE1MTBjMTJjNWRmNTk2ZGU1MzA0NmJhNWFmZDJjZmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-23T04:55:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T04:55:31Z"}, "message": "Rollup merge of #100893 - thinety:master, r=scottmcm\n\nRemove out-of-context comment in `mem::MaybeUninit` documentation\n\nReverted the comment to an earlier version to avoid confusion: neither raw pointer assignment nor `ptr::write` is used inside the for loop.", "tree": {"sha": "f812ea83bd14af6c964f4befc96e261f6f0ca62c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f812ea83bd14af6c964f4befc96e261f6f0ca62c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683a08af6a510c12c5df596de53046ba5afd2cfd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBF3DCRBK7hj4Ov3rIwAAgyYIAGFRPluklL7nQoIubU8fPwj0\nwKhzwLTY2pH3gOaG+PcerNLgdod+viUutT7qMNMIcQlO84P57mpAh8dvlbA5zcFQ\npVRCH7pD9dey6nTIKXDvCE+6MDoqHn+YPLM4qbA4N5XNrMeunhvK77cQLMsBFq7X\nk59cAROXSWGv97kNcWSLL8XOkA0en22Of0/zP9+AW+3GIH+ALlK18r1xp9wF+lu2\nw/wMCKUIQyxvkfWeke3mJhqkHX2W/MVdnwYRBbtqwXFPr17CBpb+zvTV6NjSvPSj\nbtr3UjlcO9eugrV/NGGlDQD8X7hTQQ/MMi/8mcc0JpD4qX2l/D0VryMijQlGvJE=\n=OSek\n-----END PGP SIGNATURE-----\n", "payload": "tree f812ea83bd14af6c964f4befc96e261f6f0ca62c\nparent 234e0f27c22eb3ab21363574c755f3f5bc0d6795\nparent 3d2b61c1af3442b24786e8152af75ae7cfdeae6a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661230531 +0200\ncommitter GitHub <noreply@github.com> 1661230531 +0200\n\nRollup merge of #100893 - thinety:master, r=scottmcm\n\nRemove out-of-context comment in `mem::MaybeUninit` documentation\n\nReverted the comment to an earlier version to avoid confusion: neither raw pointer assignment nor `ptr::write` is used inside the for loop.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683a08af6a510c12c5df596de53046ba5afd2cfd", "html_url": "https://github.com/rust-lang/rust/commit/683a08af6a510c12c5df596de53046ba5afd2cfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683a08af6a510c12c5df596de53046ba5afd2cfd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234e0f27c22eb3ab21363574c755f3f5bc0d6795", "url": "https://api.github.com/repos/rust-lang/rust/commits/234e0f27c22eb3ab21363574c755f3f5bc0d6795", "html_url": "https://github.com/rust-lang/rust/commit/234e0f27c22eb3ab21363574c755f3f5bc0d6795"}, {"sha": "3d2b61c1af3442b24786e8152af75ae7cfdeae6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2b61c1af3442b24786e8152af75ae7cfdeae6a", "html_url": "https://github.com/rust-lang/rust/commit/3d2b61c1af3442b24786e8152af75ae7cfdeae6a"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "997494c769ec7eabe630cdaabba62eb54b919a50", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/683a08af6a510c12c5df596de53046ba5afd2cfd/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683a08af6a510c12c5df596de53046ba5afd2cfd/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=683a08af6a510c12c5df596de53046ba5afd2cfd", "patch": "@@ -130,11 +130,8 @@ use crate::slice;\n ///         MaybeUninit::uninit().assume_init()\n ///     };\n ///\n-///     // Dropping a `MaybeUninit` does nothing. Thus using raw pointer\n-///     // assignment instead of `ptr::write` does not cause the old\n-///     // uninitialized value to be dropped. Also if there is a panic during\n-///     // this loop, we have a memory leak, but there is no memory safety\n-///     // issue.\n+///     // Dropping a `MaybeUninit` does nothing, so if there is a panic during this loop,\n+///     // we have a memory leak, but there is no memory safety issue.\n ///     for elem in &mut data[..] {\n ///         elem.write(vec![42]);\n ///     }"}]}