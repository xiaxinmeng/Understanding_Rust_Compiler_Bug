{"sha": "6048d294009f0f58593747e0870aa174e29a32af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDhkMjk0MDA5ZjBmNTg1OTM3NDdlMDg3MGFhMTc0ZTI5YTMyYWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-23T15:24:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-23T15:57:18Z"}, "message": "xtask: don't depend on itertools\n\nxtask should be fast to compiler, as it's a gateway to rust-analyzer", "tree": {"sha": "3af21aaefe1efdabafeb5702959e1094504813e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3af21aaefe1efdabafeb5702959e1094504813e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6048d294009f0f58593747e0870aa174e29a32af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6048d294009f0f58593747e0870aa174e29a32af", "html_url": "https://github.com/rust-lang/rust/commit/6048d294009f0f58593747e0870aa174e29a32af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6048d294009f0f58593747e0870aa174e29a32af/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a669049ef327db5be04f076eff83932ac1f95d91", "url": "https://api.github.com/repos/rust-lang/rust/commits/a669049ef327db5be04f076eff83932ac1f95d91", "html_url": "https://github.com/rust-lang/rust/commit/a669049ef327db5be04f076eff83932ac1f95d91"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "61fd24ef7f87b6e078f56fb72b24de140e3feade", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6048d294009f0f58593747e0870aa174e29a32af/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6048d294009f0f58593747e0870aa174e29a32af/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6048d294009f0f58593747e0870aa174e29a32af", "patch": "@@ -1771,7 +1771,6 @@ dependencies = [\n name = \"xtask\"\n version = \"0.1.0\"\n dependencies = [\n- \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pico-args 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "023f6a859fd6030a2157e738f444d99e447d8ce8", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6048d294009f0f58593747e0870aa174e29a32af/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6048d294009f0f58593747e0870aa174e29a32af/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=6048d294009f0f58593747e0870aa174e29a32af", "patch": "@@ -7,7 +7,6 @@ publish = false\n \n [dependencies]\n walkdir = \"2.1.3\"\n-itertools = \"0.8.0\"\n pico-args = \"0.3.0\"\n quote = \"1.0.2\"\n proc-macro2 = \"1.0.1\""}, {"sha": "0f550d94884d304cca58c02ce037fe36ecf00e43", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6048d294009f0f58593747e0870aa174e29a32af/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6048d294009f0f58593747e0870aa174e29a32af/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=6048d294009f0f58593747e0870aa174e29a32af", "patch": "@@ -7,8 +7,6 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use itertools::Itertools;\n-\n use crate::{\n     codegen::{self, update, Mode},\n     project_root, Result,\n@@ -61,38 +59,45 @@ struct Tests {\n fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n     let mut res = vec![];\n     let prefix = \"// \";\n-    let comment_blocks = s\n-        .lines()\n-        .map(str::trim_start)\n-        .enumerate()\n-        .group_by(|(_idx, line)| line.starts_with(prefix));\n+    let lines = s.lines().map(str::trim_start).enumerate();\n \n-    'outer: for (is_comment, block) in comment_blocks.into_iter() {\n-        if !is_comment {\n-            continue;\n+    let mut block = vec![];\n+    for (line_idx, line) in lines {\n+        let is_comment = line.starts_with(prefix);\n+        if is_comment {\n+            block.push((line_idx, &line[prefix.len()..]));\n+        } else {\n+            process_block(&mut res, &block);\n+            block.clear();\n         }\n-        let mut block = block.map(|(idx, line)| (idx, &line[prefix.len()..]));\n+    }\n+    process_block(&mut res, &block);\n+    return res;\n \n+    fn process_block(acc: &mut Vec<(usize, Test)>, block: &[(usize, &str)]) {\n+        if block.is_empty() {\n+            return;\n+        }\n         let mut ok = true;\n+        let mut block = block.iter();\n         let (start_line, name) = loop {\n             match block.next() {\n-                Some((idx, line)) if line.starts_with(\"test \") => {\n+                Some(&(idx, line)) if line.starts_with(\"test \") => {\n                     break (idx, line[\"test \".len()..].to_string());\n                 }\n-                Some((idx, line)) if line.starts_with(\"test_err \") => {\n+                Some(&(idx, line)) if line.starts_with(\"test_err \") => {\n                     ok = false;\n                     break (idx, line[\"test_err \".len()..].to_string());\n                 }\n                 Some(_) => (),\n-                None => continue 'outer,\n+                None => return,\n             }\n         };\n         let text: String =\n-            itertools::join(block.map(|(_, line)| line).chain(::std::iter::once(\"\")), \"\\n\");\n+            block.map(|(_, line)| *line).chain(std::iter::once(\"\")).collect::<Vec<_>>().join(\"\\n\");\n         assert!(!text.trim().is_empty() && text.ends_with('\\n'));\n-        res.push((start_line, Test { name, text, ok }))\n+        acc.push((start_line, Test { name, text, ok }))\n     }\n-    res\n }\n \n fn tests_from_dir(dir: &Path) -> Result<Tests> {"}]}