{"sha": "38e8f35855efac144373c1b5aab3af050e47e594", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZThmMzU4NTVlZmFjMTQ0MzczYzFiNWFhYjNhZjA1MGU0N2U1OTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-18T19:43:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-18T19:43:12Z"}, "message": "Merge #4501\n\n4501: Querify `importable_locations_in_crate` r=jonas-schievink a=jonas-schievink\n\nThis brings the time needed to compute the `add_missing_impl_members` assist down from ~5 minutes to 20 seconds on my test workload (which is editing within an impl of a MIR [`MutVisitor`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/visit/trait.MutVisitor.html))\r\n\r\ncc #4498\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "c38f57b1ae73c677b74df0de1d6f316a56ac8255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38f57b1ae73c677b74df0de1d6f316a56ac8255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e8f35855efac144373c1b5aab3af050e47e594", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewuVQCRBK7hj4Ov3rIwAAdHIIAKHxrTfHBmP/+Q+ZHVfQMvxQ\n0ETK7S0Lb5CGbBIHtpt3H5Tr/JWnEjI7T7IHxJU5OrysWOLaCNXaxdroEGSk6wvR\nq0Xiw4ReAxOrHJRWUlGF+gmo/EEhtFpwlIRZ0GiwGzkTBtNTvpWkovewWx6fFd8a\nWpDF7GIGjXhj3JsPg1QkFOyepXIEZ1tQBAbDrcNcDZ3Dh+jzZwToNapzUzIoLn+z\n4EhoRInGIaT/hJWW5Ytv9+li/VsToam1H8u0kevMzLP8nJtEbySQIHFN/qOKmjRW\n2lNSfckm1jt3f9iXwap02008gkmOTP/zbaqGE9p+KleGXRhXiJ0AbHtDjzJy9zM=\n=P7xc\n-----END PGP SIGNATURE-----\n", "payload": "tree c38f57b1ae73c677b74df0de1d6f316a56ac8255\nparent 9bdedbbcaf0c2142f004739d2edf91858ad91a10\nparent 8f80df111722a1f1685a8aea02a2612f642ea8f6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589830992 +0000\ncommitter GitHub <noreply@github.com> 1589830992 +0000\n\nMerge #4501\n\n4501: Querify `importable_locations_in_crate` r=jonas-schievink a=jonas-schievink\n\nThis brings the time needed to compute the `add_missing_impl_members` assist down from ~5 minutes to 20 seconds on my test workload (which is editing within an impl of a MIR [`MutVisitor`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/visit/trait.MutVisitor.html))\r\n\r\ncc #4498\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e8f35855efac144373c1b5aab3af050e47e594", "html_url": "https://github.com/rust-lang/rust/commit/38e8f35855efac144373c1b5aab3af050e47e594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e8f35855efac144373c1b5aab3af050e47e594/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bdedbbcaf0c2142f004739d2edf91858ad91a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdedbbcaf0c2142f004739d2edf91858ad91a10", "html_url": "https://github.com/rust-lang/rust/commit/9bdedbbcaf0c2142f004739d2edf91858ad91a10"}, {"sha": "8f80df111722a1f1685a8aea02a2612f642ea8f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f80df111722a1f1685a8aea02a2612f642ea8f6", "html_url": "https://github.com/rust-lang/rust/commit/8f80df111722a1f1685a8aea02a2612f642ea8f6"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "498a4c9172496820e60e951f6f0c9a6607872ab5", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38e8f35855efac144373c1b5aab3af050e47e594/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e8f35855efac144373c1b5aab3af050e47e594/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=38e8f35855efac144373c1b5aab3af050e47e594", "patch": "@@ -1,7 +1,7 @@\n //! Defines database & queries for name resolution.\n use std::sync::Arc;\n \n-use hir_expand::{db::AstDatabase, HirFileId};\n+use hir_expand::{db::AstDatabase, name::Name, HirFileId};\n use ra_db::{salsa, CrateId, SourceDatabase, Upcast};\n use ra_prof::profile;\n use ra_syntax::SmolStr;\n@@ -12,9 +12,12 @@ use crate::{\n     body::{scope::ExprScopes, Body, BodySourceMap},\n     data::{ConstData, FunctionData, ImplData, StaticData, TraitData, TypeAliasData},\n     docs::Documentation,\n+    find_path,\n     generics::GenericParams,\n+    item_scope::ItemInNs,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::{raw::RawItems, CrateDefMap},\n+    visibility::Visibility,\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n     TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n@@ -108,6 +111,13 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     // Remove this query completely, in favor of `Attrs::docs` method\n     #[salsa::invoke(Documentation::documentation_query)]\n     fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n+\n+    #[salsa::invoke(find_path::importable_locations_in_crate)]\n+    fn importable_locations_of(\n+        &self,\n+        item: ItemInNs,\n+        krate: CrateId,\n+    ) -> Arc<[(ModuleId, Name, Visibility)]>;\n }\n \n fn crate_def_map_wait(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {"}, {"sha": "1ca20fabd043057cd6e9104bedcfad495a299d32", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38e8f35855efac144373c1b5aab3af050e47e594/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e8f35855efac144373c1b5aab3af050e47e594/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=38e8f35855efac144373c1b5aab3af050e47e594", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     CrateId, ModuleDefId, ModuleId,\n };\n use hir_expand::name::{known, AsName, Name};\n+use std::sync::Arc;\n use test_utils::tested_by;\n \n const MAX_PATH_LEN: usize = 15;\n@@ -45,6 +46,7 @@ impl ModPath {\n /// Find a path that can be used to refer to a certain item. This can depend on\n /// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n+    let _p = ra_prof::profile(\"find_path\");\n     find_path_inner(db, item, from, MAX_PATH_LEN)\n }\n \n@@ -198,7 +200,7 @@ fn find_importable_locations(\n         .chain(crate_graph[from.krate].dependencies.iter().map(|dep| dep.crate_id))\n     {\n         result.extend(\n-            importable_locations_in_crate(db, item, krate)\n+            db.importable_locations_of(item, krate)\n                 .iter()\n                 .filter(|(_, _, vis)| vis.is_visible_from(db, from))\n                 .map(|(m, n, _)| (*m, n.clone())),\n@@ -213,11 +215,11 @@ fn find_importable_locations(\n ///\n /// Note that the crate doesn't need to be the one in which the item is defined;\n /// it might be re-exported in other crates.\n-fn importable_locations_in_crate(\n+pub(crate) fn importable_locations_in_crate(\n     db: &dyn DefDatabase,\n     item: ItemInNs,\n     krate: CrateId,\n-) -> Vec<(ModuleId, Name, Visibility)> {\n+) -> Arc<[(ModuleId, Name, Visibility)]> {\n     let def_map = db.crate_def_map(krate);\n     let mut result = Vec::new();\n     for (local_id, data) in def_map.modules.iter() {\n@@ -243,7 +245,8 @@ fn importable_locations_in_crate(\n             result.push((ModuleId { krate, local_id }, name.clone(), vis));\n         }\n     }\n-    result\n+\n+    Arc::from(result)\n }\n \n #[cfg(test)]"}]}