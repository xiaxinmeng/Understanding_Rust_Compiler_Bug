{"sha": "367858aedc1e1dbee5560676c00618a386ed8e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Nzg1OGFlZGMxZTFkYmVlNTU2MDY3NmMwMDYxOGEzODZlZDhlMzc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-18T23:17:25Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-24T21:53:29Z"}, "message": "Add test for generator debuginfo", "tree": {"sha": "53f8b97cbb6ba53605db170d15f4f25aa7e1f4db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53f8b97cbb6ba53605db170d15f4f25aa7e1f4db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/367858aedc1e1dbee5560676c00618a386ed8e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/367858aedc1e1dbee5560676c00618a386ed8e37", "html_url": "https://github.com/rust-lang/rust/commit/367858aedc1e1dbee5560676c00618a386ed8e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/367858aedc1e1dbee5560676c00618a386ed8e37/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb726c0fcec3f9d12a6a9990c5c041478e1e7187", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb726c0fcec3f9d12a6a9990c5c041478e1e7187", "html_url": "https://github.com/rust-lang/rust/commit/eb726c0fcec3f9d12a6a9990c5c041478e1e7187"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "3007099393ffea6020d051370eb29d3e7d74c9e4", "filename": "src/test/codegen/generator-debug.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/367858aedc1e1dbee5560676c00618a386ed8e37/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367858aedc1e1dbee5560676c00618a386ed8e37/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=367858aedc1e1dbee5560676c00618a386ed8e37", "patch": "@@ -0,0 +1,94 @@\n+// Verify debuginfo for generators:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+\n+#![feature(generators, generator_trait)]\n+use std::ops::Generator;\n+\n+fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n+    || {\n+        yield 0;\n+        let s = String::from(\"foo\");\n+        yield 1;\n+    }\n+}\n+\n+async fn foo() {}\n+async fn async_fn_test() {\n+    foo().await;\n+    let s = String::from(\"foo\");\n+    foo().await;\n+}\n+\n+// FIXME: We need \"checksum\" to prevent matching with the wrong (duplicate) file\n+//        metadata, even when -C codegen-units=1.\n+// CHECK:      [[FILE:!.*]] = !DIFile(filename: \"{{.*}}/generator-debug.rs\", {{.*}}, checksum:\n+\n+// CHECK:      [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[FN:![0-9]*]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[FN]] = !DINamespace(name: \"generator_test\"\n+// CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 13,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 17,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 17,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 16,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+// CHECK:      [[DISC]] = !DIDerivedType(tag: DW_TAG_member, name: \"__state\", scope: [[FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+\n+// CHECK:      [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[FN:![0-9]*]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[FN]] = !DINamespace(name: \"async_fn_test\"\n+// CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 21,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 25,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 25,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 22,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 24,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+// CHECK:      [[DISC]] = !DIDerivedType(tag: DW_TAG_member, name: \"__state\", scope: [[FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+\n+fn main() {\n+    let _dummy = generator_test();\n+    let _dummy = async_fn_test();\n+}"}]}