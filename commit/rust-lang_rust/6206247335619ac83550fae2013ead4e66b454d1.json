{"sha": "6206247335619ac83550fae2013ead4e66b454d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDYyNDczMzU2MTlhYzgzNTUwZmFlMjAxM2VhZDRlNjZiNDU0ZDE=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-07T21:16:03Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-07T21:16:03Z"}, "message": "Suggest a trailing comma if a 1-tuple is expected", "tree": {"sha": "1e322b2bf3216a8e5f409d93a01d5e30b101b0c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e322b2bf3216a8e5f409d93a01d5e30b101b0c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6206247335619ac83550fae2013ead4e66b454d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6206247335619ac83550fae2013ead4e66b454d1", "html_url": "https://github.com/rust-lang/rust/commit/6206247335619ac83550fae2013ead4e66b454d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6206247335619ac83550fae2013ead4e66b454d1/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a60327063e82413eed50a10df3b7d19b77bda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a60327063e82413eed50a10df3b7d19b77bda0", "html_url": "https://github.com/rust-lang/rust/commit/e4a60327063e82413eed50a10df3b7d19b77bda0"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "e3a79fe2653305da6414187b0301b48d9f660ad0", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6206247335619ac83550fae2013ead4e66b454d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6206247335619ac83550fae2013ead4e66b454d1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6206247335619ac83550fae2013ead4e66b454d1", "patch": "@@ -64,6 +64,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Item, ItemKind, Node};\n+use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n@@ -1965,7 +1966,33 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 struct_span_err!(self.tcx.sess, span, E0580, \"{}\", failure_str)\n             }\n             FailureCode::Error0308(failure_str) => {\n-                struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str)\n+                let mut err = struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str);\n+                if let ValuePairs::Types(ty::error::ExpectedFound { expected, found }) =\n+                    trace.values\n+                {\n+                    // If a tuple of length one was expected and the found expression has\n+                    // parentheses around it, perhaps the user meant to write `(expr,)` to\n+                    // build a tuple (issue #86100)\n+                    match (expected.kind(), found.kind()) {\n+                        (ty::Tuple(_), ty::Tuple(_)) => {}\n+                        (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n+                                if let Some(code) =\n+                                    code.strip_prefix('(').and_then(|s| s.strip_suffix(')'))\n+                                {\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"use a trailing comma to create a tuple with one element\",\n+                                        format!(\"({},)\", code),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                err\n             }\n             FailureCode::Error0644(failure_str) => {\n                 struct_span_err!(self.tcx.sess, span, E0644, \"{}\", failure_str)"}, {"sha": "fa9d1a88928cdf727a3a344910fa001668a559d0", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6206247335619ac83550fae2013ead4e66b454d1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6206247335619ac83550fae2013ead4e66b454d1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.rs?ref=6206247335619ac83550fae2013ead4e66b454d1", "patch": "@@ -0,0 +1,25 @@\n+// Tests that a suggestion is issued for type mismatch errors when a\n+// 1-tuple is expected and a parenthesized expression of non-tuple\n+// type is supplied.\n+\n+fn foo<T>(_t: (T,)) {}\n+struct S { _s: (String,) }\n+\n+fn main() {\n+    let _x: (i32,) = (5);\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: use a trailing comma to create a tuple with one element\n+\n+    foo((Some(3)));\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: use a trailing comma to create a tuple with one element\n+\n+    let _s = S { _s: (\"abc\".to_string()) };\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: use a trailing comma to create a tuple with one element\n+\n+    // Do not issue the suggestion if the found type is already a tuple.\n+    let t = (1, 2);\n+    let _x: (i32,) = (t);\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "575379690b46f1b877c1bb47e2f13bef3a360055", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6206247335619ac83550fae2013ead4e66b454d1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6206247335619ac83550fae2013ead4e66b454d1/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr?ref=6206247335619ac83550fae2013ead4e66b454d1", "patch": "@@ -0,0 +1,55 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:9:22\n+   |\n+LL |     let _x: (i32,) = (5);\n+   |             ------   ^^^ expected tuple, found integer\n+   |             |\n+   |             expected due to this\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _x: (i32,) = (5,);\n+   |                      ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:13:9\n+   |\n+LL |     foo((Some(3)));\n+   |         ^^^^^^^^^ expected tuple, found enum `Option`\n+   |\n+   = note: expected tuple `(_,)`\n+               found enum `Option<{integer}>`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     foo((Some(3),));\n+   |         ^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:17:22\n+   |\n+LL |     let _s = S { _s: (\"abc\".to_string()) };\n+   |                      ^^^^^^^^^^^^^^^^^^^ expected tuple, found struct `String`\n+   |\n+   = note: expected tuple `(String,)`\n+             found struct `String`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _s = S { _s: (\"abc\".to_string(),) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-86100-tuple-paren-comma.rs:23:22\n+   |\n+LL |     let _x: (i32,) = (t);\n+   |             ------   ^^^ expected a tuple with 1 element, found one with 2 elements\n+   |             |\n+   |             expected due to this\n+   |\n+   = note: expected tuple `(i32,)`\n+              found tuple `({integer}, {integer})`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}