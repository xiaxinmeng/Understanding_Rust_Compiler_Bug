{"sha": "4ecab09cbc835976efe6e64780bffdec99562ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlY2FiMDljYmM4MzU5NzZlZmU2ZTY0NzgwYmZmZGVjOTk1NjJkZGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-29T18:36:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-29T18:36:01Z"}, "message": "Merge #6093\n\n6093: Add panic_context module for better panic messages r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0f965a835c179637f6df293cef010134f283cfea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f965a835c179637f6df293cef010134f283cfea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ecab09cbc835976efe6e64780bffdec99562ddb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfc36RCRBK7hj4Ov3rIwAAdHIIAGozQe/XUrpepyMDz8tQMzFS\nk1PnJ1B7ngxduxuyR48w8vqEehbSDkmkSfMovsarEKhO1ZHY39uYOpWC9WWQoLCd\nRfFPbHYoRt4pzN644R2+sePJd0Jp6LZaTFUiw6PvahIb0sPI+h6V3JBVb+f399c0\n6Xeu+/NBwKaoh23f9hx7RLR0DudcX1CGmmf7g1Aj3KkrzjyjOxa5xCvXjspiiQ68\nbVDrfIDG9P1Q9oy+G/CAoc5/9oIpH3mPWqsXy9WMWcTSILqBVWa/hvp7jJG8xNCs\n6pRCkYXJiSxSp5QgL4OyPJMC3CN2tO2zBCHfXS+oNHYQ5pSehQ+4rcSYqfOHBJU=\n=q8RU\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f965a835c179637f6df293cef010134f283cfea\nparent e315fd9bb0e0647ab8b0e118d264d2103e271586\nparent d3a2b21a8c34c7b7eea0a001a1412992e3ed2cb7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601404561 +0000\ncommitter GitHub <noreply@github.com> 1601404561 +0000\n\nMerge #6093\n\n6093: Add panic_context module for better panic messages r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecab09cbc835976efe6e64780bffdec99562ddb", "html_url": "https://github.com/rust-lang/rust/commit/4ecab09cbc835976efe6e64780bffdec99562ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ecab09cbc835976efe6e64780bffdec99562ddb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e315fd9bb0e0647ab8b0e118d264d2103e271586", "url": "https://api.github.com/repos/rust-lang/rust/commits/e315fd9bb0e0647ab8b0e118d264d2103e271586", "html_url": "https://github.com/rust-lang/rust/commit/e315fd9bb0e0647ab8b0e118d264d2103e271586"}, {"sha": "d3a2b21a8c34c7b7eea0a001a1412992e3ed2cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a2b21a8c34c7b7eea0a001a1412992e3ed2cb7", "html_url": "https://github.com/rust-lang/rust/commit/d3a2b21a8c34c7b7eea0a001a1412992e3ed2cb7"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "36f0c1d520e2de407660872231f1a7832bfb7757", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ecab09cbc835976efe6e64780bffdec99562ddb/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecab09cbc835976efe6e64780bffdec99562ddb/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=4ecab09cbc835976efe6e64780bffdec99562ddb", "patch": "@@ -1,5 +1,5 @@\n //! A visitor for downcasting arbitrary request (JSON) into a specific type.\n-use std::panic;\n+use std::{fmt, panic};\n \n use serde::{de::DeserializeOwned, Serialize};\n \n@@ -49,7 +49,7 @@ impl<'a> RequestDispatcher<'a> {\n     ) -> Result<&mut Self>\n     where\n         R: lsp_types::request::Request + 'static,\n-        R::Params: DeserializeOwned + Send + 'static,\n+        R::Params: DeserializeOwned + Send + fmt::Debug + 'static,\n         R::Result: Serialize + 'static,\n     {\n         let (id, params) = match self.parse::<R>() {\n@@ -61,7 +61,10 @@ impl<'a> RequestDispatcher<'a> {\n \n         self.global_state.task_pool.handle.spawn({\n             let world = self.global_state.snapshot();\n+\n             move || {\n+                let _ctx =\n+                    stdx::panic_context::enter(format!(\"request: {} {:#?}\", R::METHOD, params));\n                 let result = f(world, params);\n                 Task::Response(result_to_response::<R>(id, result))\n             }"}, {"sha": "011935cade9caebce60ff64f8e0f94f3ff3009e2", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ecab09cbc835976efe6e64780bffdec99562ddb/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecab09cbc835976efe6e64780bffdec99562ddb/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=4ecab09cbc835976efe6e64780bffdec99562ddb", "patch": "@@ -5,6 +5,7 @@ use std::{\n };\n \n mod macros;\n+pub mod panic_context;\n \n #[inline(always)]\n pub fn is_ci() -> bool {"}, {"sha": "fd232e0cce5b3d24f613aba630b469859dcc3423", "filename": "crates/stdx/src/panic_context.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4ecab09cbc835976efe6e64780bffdec99562ddb/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecab09cbc835976efe6e64780bffdec99562ddb/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fpanic_context.rs?ref=4ecab09cbc835976efe6e64780bffdec99562ddb", "patch": "@@ -0,0 +1,49 @@\n+//! A micro-crate to enhance panic messages with context info.\n+//!\n+//! FIXME: upstream to https://github.com/kriomant/panic-context ?\n+\n+use std::{cell::RefCell, panic, sync::Once};\n+\n+pub fn enter(context: String) -> impl Drop {\n+    static ONCE: Once = Once::new();\n+    ONCE.call_once(PanicContext::init);\n+\n+    with_ctx(|ctx| ctx.push(context));\n+    PanicContext { _priv: () }\n+}\n+\n+#[must_use]\n+struct PanicContext {\n+    _priv: (),\n+}\n+\n+impl PanicContext {\n+    fn init() {\n+        let default_hook = panic::take_hook();\n+        let hook = move |panic_info: &panic::PanicInfo<'_>| {\n+            with_ctx(|ctx| {\n+                if !ctx.is_empty() {\n+                    eprintln!(\"Panic context:\");\n+                    for frame in ctx.iter() {\n+                        eprintln!(\"> {}\\n\", frame)\n+                    }\n+                }\n+                default_hook(panic_info)\n+            })\n+        };\n+        panic::set_hook(Box::new(hook))\n+    }\n+}\n+\n+impl Drop for PanicContext {\n+    fn drop(&mut self) {\n+        with_ctx(|ctx| assert!(ctx.pop().is_some()))\n+    }\n+}\n+\n+fn with_ctx(f: impl FnOnce(&mut Vec<String>)) {\n+    thread_local! {\n+        static CTX: RefCell<Vec<String>> = RefCell::new(Vec::new());\n+    }\n+    CTX.with(|ctx| f(&mut *ctx.borrow_mut()))\n+}"}]}