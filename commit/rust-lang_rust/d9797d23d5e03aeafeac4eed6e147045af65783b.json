{"sha": "d9797d23d5e03aeafeac4eed6e147045af65783b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Nzk3ZDIzZDVlMDNhZWFmZWFjNGVlZDZlMTQ3MDQ1YWY2NTc4M2I=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-01T08:19:58Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-09T05:21:28Z"}, "message": "Remove unused query", "tree": {"sha": "c5f260c6ae61e9f9ecb78b2c8696cd0cf0ea428e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f260c6ae61e9f9ecb78b2c8696cd0cf0ea428e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9797d23d5e03aeafeac4eed6e147045af65783b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmE5mdgACgkQAn35M4hi\nrd0p9A//SxxGf8xVM4D+zuv/lKYUQ8esd1/PhsxZIi0iLbss9J8aFBOl24ZYIFjR\nFgRcHBinMYwhAGBBCifqGAkT+/Kzw0jdAfYv8G9Z4tmnQCNoxY2OUqGaQ5DOrmvl\n4lC60isz3klXb3kXgf4eDbkEKm3Q+EWO+osm/+bKrfEYmejLgw7fRDqp3L3JYgk3\ngbXLcRTFemKRPN9mJ3KfQ6DjG39efKEeaXdoUMR6E6IcHrzVapfABXAGOEVzSq6E\nn+axpM87q8+7IDBlaR5X04NkUmDosuMTwClKRwK/LmWwi1E+MY5gLrf1pd47EQJk\nl9hF2FGLYXL0wEhh8oyea5DCw/wrey4oU01AT4nrvO9CUE8YU9pMLANKxjS0S77f\nxD8sHTw8W7TWxbdvtu4Kos7M4uIFexuhj1ugyBTz0VWRLFmPqT38bGU73SpSnGI8\np9loprcrC7ouaTPmNYJmNKYsF/xBz2rkgzdDTKayN/eysdK6iYbkPxKcaTnWaQm9\n/BQLRURbL1aLCR3zd/kvLJNM8KrC5/rtbRS8Hi+BSZuJThfBsVCZq62Fy4a+w0qQ\n+X5cakNe2g04CU6i4HZyHi4aaWK+wW1WDvzabcweGjGYJsdMsl2pd0h3ikg1hUQk\nMbsoMubEs88OXtqNOGu+8DhOb2HVW5bPsvyRHCrTHDC2bFbbnPs=\n=bMdK\n-----END PGP SIGNATURE-----", "payload": "tree c5f260c6ae61e9f9ecb78b2c8696cd0cf0ea428e\nparent 9c1a91628bb502deec644173d21830822a0f786a\nauthor Deadbeef <ent3rm4n@gmail.com> 1630484398 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631164888 +0000\n\nRemove unused query\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9797d23d5e03aeafeac4eed6e147045af65783b", "html_url": "https://github.com/rust-lang/rust/commit/d9797d23d5e03aeafeac4eed6e147045af65783b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9797d23d5e03aeafeac4eed6e147045af65783b/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1a91628bb502deec644173d21830822a0f786a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1a91628bb502deec644173d21830822a0f786a", "html_url": "https://github.com/rust-lang/rust/commit/9c1a91628bb502deec644173d21830822a0f786a"}], "stats": {"total": 40, "additions": 10, "deletions": 30}, "files": [{"sha": "10afd9560fa956da688e68238a35b12d5c9a435e", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d9797d23d5e03aeafeac4eed6e147045af65783b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9797d23d5e03aeafeac4eed6e147045af65783b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=d9797d23d5e03aeafeac4eed6e147045af65783b", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -34,8 +34,14 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n }\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n-    let parent_id = tcx.hir().get_parent_did(hir_id);\n-    if !parent_id.is_top_level_module() { is_const_impl_raw(tcx, parent_id) } else { false }\n+    let parent_id = tcx.hir().get_parent_node(hir_id);\n+    matches!(\n+        tcx.hir().get(parent_id),\n+        hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n+            ..\n+        })\n+    )\n }\n \n /// Checks whether the function has a `const` modifier or, in case it is an intrinsic, whether\n@@ -70,19 +76,6 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-/// Checks whether the given item is an `impl` that has a `const` modifier.\n-fn is_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let node = tcx.hir().get(hir_id);\n-    matches!(\n-        node,\n-        hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n-            ..\n-        })\n-    )\n-}\n-\n fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     is_const_fn(tcx, def_id)\n         && match tcx.lookup_const_stability(def_id) {\n@@ -103,10 +96,5 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n pub fn provide(providers: &mut Providers) {\n-    *providers = Providers {\n-        is_const_fn_raw,\n-        is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),\n-        is_promotable_const_fn,\n-        ..*providers\n-    };\n+    *providers = Providers { is_const_fn_raw, is_promotable_const_fn, ..*providers };\n }"}, {"sha": "dd5753e95d0770ef23102bb24c28887372ee9214", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9797d23d5e03aeafeac4eed6e147045af65783b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9797d23d5e03aeafeac4eed6e147045af65783b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d9797d23d5e03aeafeac4eed6e147045af65783b", "patch": "@@ -544,14 +544,6 @@ rustc_queries! {\n         desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n     }\n \n-    /// Returns `true` if this is a const `impl`. **Do not call this function manually.**\n-    ///\n-    /// This query caches the base data for the `is_const_impl` helper function, which also\n-    /// takes into account stability attributes (e.g., `#[rustc_const_unstable]`).\n-    query is_const_impl_raw(key: DefId) -> bool {\n-        desc { |tcx| \"checking if item is const impl: `{}`\", tcx.def_path_str(key) }\n-    }\n-\n     query asyncness(key: DefId) -> hir::IsAsync {\n         desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n     }"}]}