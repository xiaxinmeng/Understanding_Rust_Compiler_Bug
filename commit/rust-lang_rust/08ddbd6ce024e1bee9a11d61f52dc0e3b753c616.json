{"sha": "08ddbd6ce024e1bee9a11d61f52dc0e3b753c616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGRiZDZjZTAyNGUxYmVlOWExMWQ2MWY1MmRjMGUzYjc1M2M2MTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-21T20:38:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-21T20:38:06Z"}, "message": "prepare Dlsym system for dynamic symbols on Windows", "tree": {"sha": "fc8402d7da6da9ddea2f8075e30acfddf52093bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc8402d7da6da9ddea2f8075e30acfddf52093bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616", "html_url": "https://github.com/rust-lang/rust/commit/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2423d32037eff58157967186e268659ad2c97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2423d32037eff58157967186e268659ad2c97f", "html_url": "https://github.com/rust-lang/rust/commit/5d2423d32037eff58157967186e268659ad2c97f"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "1416db346cd03fafdb61c2cd3b90c58c8957b9d6", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=08ddbd6ce024e1bee9a11d61f52dc0e3b753c616", "patch": "@@ -11,12 +11,21 @@ pub enum Dlsym {\n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n-    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+    pub fn from_str(name: &[u8], target_os: &str) -> InterpResult<'static, Option<Dlsym>> {\n         use self::Dlsym::*;\n-        Ok(match name {\n-            \"getentropy\" => Some(GetEntropy),\n-            \"__pthread_get_minstack\" => None,\n-            _ => throw_unsup_format!(\"unsupported dlsym: {}\", name),\n+        let name = String::from_utf8_lossy(name);\n+        Ok(match target_os {\n+            \"linux\" | \"macos\" => match &*name {\n+                \"getentropy\" => Some(GetEntropy),\n+                \"__pthread_get_minstack\" => None,\n+                _ => throw_unsup_format!(\"unsupported dlsym: {}\", name),\n+            }\n+            \"windows\" => match &*name {\n+                \"SetThreadStackGuarantee\" => None,\n+                \"AcquireSRWLockExclusive\" => None,\n+                _ => throw_unsup_format!(\"unsupported dlsym: {}\", name),\n+            }\n+            os => bug!(\"dlsym not implemented for target_os {}\", os),\n         })\n     }\n }"}, {"sha": "39b00feec1943042c1518952708762bbe77081de", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=08ddbd6ce024e1bee9a11d61f52dc0e3b753c616", "patch": "@@ -173,9 +173,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.read_scalar(handle)?.not_undef()?;\n                 let symbol = this.read_scalar(symbol)?.not_undef()?;\n                 let symbol_name = this.memory.read_c_str(symbol)?;\n-                let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n-                let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n-                if let Some(dlsym) = Dlsym::from_str(symbol_name)? {\n+                if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.target.target_os)? {\n                     let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n                     this.write_scalar(Scalar::from(ptr), dest)?;\n                 } else {"}, {"sha": "a11e3b8aa6a019c72a468792b6e5110f2559c396", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ddbd6ce024e1bee9a11d61f52dc0e3b753c616/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=08ddbd6ce024e1bee9a11d61f52dc0e3b753c616", "patch": "@@ -260,9 +260,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"GetProcAddress\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n-                let &[_hModule, _lpProcName] = check_arg_count(args)?;\n-                // Pretend this does not exist / nothing happened, by returning zero.\n-                this.write_null(dest)?;\n+                let &[_hModule, lpProcName] = check_arg_count(args)?;\n+                let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.not_undef()?)?;\n+                if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.target.target_os)? {\n+                    let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n+                    this.write_scalar(Scalar::from(ptr), dest)?;\n+                } else {\n+                    this.write_null(dest)?;\n+                }\n             }\n             \"SetConsoleTextAttribute\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]"}]}