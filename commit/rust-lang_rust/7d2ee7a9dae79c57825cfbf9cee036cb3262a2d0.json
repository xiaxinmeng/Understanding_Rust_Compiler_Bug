{"sha": "7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMmVlN2E5ZGFlNzljNTc4MjVjZmJmOWNlZTAzNmNiMzI2MmEyZDA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-13T12:41:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-13T12:41:07Z"}, "message": "Rollup merge of #23307 - michaelwoerister:lldb-vec-pp-bug, r=alexcrichton\n\n Fixes #22656. Also adds a nice pretty printer for `Vec`.", "tree": {"sha": "fc2edb5694be31b4ea7f44d05b0bdf74d002d004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc2edb5694be31b4ea7f44d05b0bdf74d002d004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "html_url": "https://github.com/rust-lang/rust/commit/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79dd393a4f144fa5e6f81c720c782de3175810d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/79dd393a4f144fa5e6f81c720c782de3175810d7", "html_url": "https://github.com/rust-lang/rust/commit/79dd393a4f144fa5e6f81c720c782de3175810d7"}, {"sha": "07240d6026e9de5da5f061aa00563f91b42163eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/07240d6026e9de5da5f061aa00563f91b42163eb", "html_url": "https://github.com/rust-lang/rust/commit/07240d6026e9de5da5f061aa00563f91b42163eb"}], "stats": {"total": 155, "additions": 134, "deletions": 21}, "files": [{"sha": "20f9b1ce66c967410d07dfce57d3d191803f56b4", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 77, "deletions": 21, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "patch": "@@ -40,31 +40,12 @@ def print_struct_val(val, internal_dict):\n \n     if is_vec_slice(val):\n         return print_vec_slice_val(val, internal_dict)\n+    elif is_std_vec(val):\n+        return print_std_vec_val(val, internal_dict)\n     else:\n         return print_struct_val_starting_from(0, val, internal_dict)\n \n \n-def print_vec_slice_val(val, internal_dict):\n-    length = val.GetChildAtIndex(1).GetValueAsUnsigned()\n-\n-    data_ptr_val = val.GetChildAtIndex(0)\n-    data_ptr_type = data_ptr_val.GetType()\n-    assert data_ptr_type.IsPointerType()\n-\n-    element_type = data_ptr_type.GetPointeeType()\n-    element_type_size = element_type.GetByteSize()\n-\n-    start_address = data_ptr_val.GetValueAsUnsigned()\n-\n-    def render_element(i):\n-        address = start_address + i * element_type_size\n-        element_val = val.CreateValueFromAddress(val.GetName() +\n-                                                 (\"[%s]\" % i), address, element_type)\n-        return print_val(element_val, internal_dict)\n-\n-    return \"&[%s]\" % (', '.join([render_element(i) for i in range(length)]))\n-\n-\n def print_struct_val_starting_from(field_start_index, val, internal_dict):\n     '''\n     Prints a struct, tuple, or tuple struct value with Rust syntax.\n@@ -100,6 +81,16 @@ def render_child(child_index):\n             this += field_name + \": \"\n \n         field_val = val.GetChildAtIndex(child_index)\n+\n+        if not field_val.IsValid():\n+            field = t.GetFieldAtIndex(child_index)\n+            # LLDB is not good at handling zero-sized values, so we have to help\n+            # it a little\n+            if field.GetType().GetByteSize() == 0:\n+                return this + extract_type_name(field.GetType().GetName())\n+            else:\n+                return this + \"<invalid value>\"\n+\n         return this + print_val(field_val, internal_dict)\n \n     body = separator.join([render_child(idx) for idx in range(field_start_index, num_children)])\n@@ -195,6 +186,30 @@ def print_fixed_size_vec_val(val, internal_dict):\n     return output\n \n \n+def print_vec_slice_val(val, internal_dict):\n+    length = val.GetChildAtIndex(1).GetValueAsUnsigned()\n+\n+    data_ptr_val = val.GetChildAtIndex(0)\n+    data_ptr_type = data_ptr_val.GetType()\n+\n+    return \"&[%s]\" % print_array_of_values(val.GetName(),\n+                                           data_ptr_val,\n+                                           length,\n+                                           internal_dict)\n+\n+\n+def print_std_vec_val(val, internal_dict):\n+    length = val.GetChildAtIndex(1).GetValueAsUnsigned()\n+\n+    # Vec<> -> Unique<> -> NonZero<> -> *T\n+    data_ptr_val = val.GetChildAtIndex(0).GetChildAtIndex(0).GetChildAtIndex(0)\n+    data_ptr_type = data_ptr_val.GetType()\n+\n+    return \"vec![%s]\" % print_array_of_values(val.GetName(),\n+                                              data_ptr_val,\n+                                              length,\n+                                              internal_dict)\n+\n #=--------------------------------------------------------------------------------------------------\n # Helper Functions\n #=--------------------------------------------------------------------------------------------------\n@@ -243,3 +258,44 @@ def is_vec_slice(val):\n \n     type_name = extract_type_name(ty.GetName()).replace(\"&'static\", \"&\").replace(\" \", \"\")\n     return type_name.startswith(\"&[\") and type_name.endswith(\"]\")\n+\n+def is_std_vec(val):\n+    ty = val.GetType()\n+    if ty.GetTypeClass() != lldb.eTypeClassStruct:\n+        return False\n+\n+    if ty.GetNumberOfFields() != 3:\n+        return False\n+\n+    if ty.GetFieldAtIndex(0).GetName() != \"ptr\":\n+        return False\n+\n+    if ty.GetFieldAtIndex(1).GetName() != \"len\":\n+        return False\n+\n+    if ty.GetFieldAtIndex(2).GetName() != \"cap\":\n+        return False\n+\n+    return ty.GetName().startswith(\"collections::vec::Vec<\")\n+\n+\n+def print_array_of_values(array_name, data_ptr_val, length, internal_dict):\n+    '''Prints a contigous memory range, interpreting it as values of the\n+       pointee-type of data_ptr_val.'''\n+\n+    data_ptr_type = data_ptr_val.GetType()\n+    assert data_ptr_type.IsPointerType()\n+\n+    element_type = data_ptr_type.GetPointeeType()\n+    element_type_size = element_type.GetByteSize()\n+\n+    start_address = data_ptr_val.GetValueAsUnsigned()\n+\n+    def render_element(i):\n+        address = start_address + i * element_type_size\n+        element_val = data_ptr_val.CreateValueFromAddress(array_name + (\"[%s]\" % i),\n+                                                          address,\n+                                                          element_type)\n+        return print_val(element_val, internal_dict)\n+\n+    return ', '.join([render_element(i) for i in range(length)])"}, {"sha": "af518797d19df1f2ea56fa12d9dc7d004046666f", "filename": "src/test/debuginfo/issue22656.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0/src%2Ftest%2Fdebuginfo%2Fissue22656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0/src%2Ftest%2Fdebuginfo%2Fissue22656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue22656.rs?ref=7d2ee7a9dae79c57825cfbf9cee036cb3262a2d0", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test makes sure that the LLDB pretty printer does not throw an exception\n+// when trying to handle a Vec<> or anything else that contains zero-sized\n+// fields.\n+\n+// min-lldb-version: 310\n+// ignore-gdb\n+// ignore-tidy-linelength\n+\n+// compile-flags:-g\n+\n+// === LLDB TESTS ==================================================================================\n+// lldb-command:run\n+\n+// lldb-command:print v\n+// lldb-check:[...]$0 = vec![1, 2, 3]\n+// lldb-command:print zs\n+// lldb-check:[...]$1 = StructWithZeroSizedField { x: ZeroSizedStruct, y: 123, z: ZeroSizedStruct, w: 456 }\n+// lldb-command:continue\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+struct ZeroSizedStruct;\n+\n+struct StructWithZeroSizedField {\n+    x: ZeroSizedStruct,\n+    y: u32,\n+    z: ZeroSizedStruct,\n+    w: u64\n+}\n+\n+fn main() {\n+    let v = vec![1,2,3];\n+\n+    let zs = StructWithZeroSizedField {\n+        x: ZeroSizedStruct,\n+        y: 123,\n+        z: ZeroSizedStruct,\n+        w: 456\n+    };\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}