{"sha": "04784540efe156398eee4fba535f5a24b8bd649e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Nzg0NTQwZWZlMTU2Mzk4ZWVlNGZiYTUzNWY1YTI0YjhiZDY0OWU=", "commit": {"author": {"name": "Yuri Kunde Schlesner", "email": "yuriks@yuriks.net", "date": "2014-04-18T06:39:25Z"}, "committer": {"name": "Yuri Kunde Schlesner", "email": "yuriks@yuriks.net", "date": "2014-04-18T06:39:25Z"}, "message": "Remove redundant variable in LruCache::put", "tree": {"sha": "11321c2009fdce87f821e39994b875183b85eb03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11321c2009fdce87f821e39994b875183b85eb03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04784540efe156398eee4fba535f5a24b8bd649e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04784540efe156398eee4fba535f5a24b8bd649e", "html_url": "https://github.com/rust-lang/rust/commit/04784540efe156398eee4fba535f5a24b8bd649e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04784540efe156398eee4fba535f5a24b8bd649e/comments", "author": {"login": "yuriks", "id": 341401, "node_id": "MDQ6VXNlcjM0MTQwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuriks", "html_url": "https://github.com/yuriks", "followers_url": "https://api.github.com/users/yuriks/followers", "following_url": "https://api.github.com/users/yuriks/following{/other_user}", "gists_url": "https://api.github.com/users/yuriks/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuriks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuriks/subscriptions", "organizations_url": "https://api.github.com/users/yuriks/orgs", "repos_url": "https://api.github.com/users/yuriks/repos", "events_url": "https://api.github.com/users/yuriks/events{/privacy}", "received_events_url": "https://api.github.com/users/yuriks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yuriks", "id": 341401, "node_id": "MDQ6VXNlcjM0MTQwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuriks", "html_url": "https://github.com/yuriks", "followers_url": "https://api.github.com/users/yuriks/followers", "following_url": "https://api.github.com/users/yuriks/following{/other_user}", "gists_url": "https://api.github.com/users/yuriks/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuriks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuriks/subscriptions", "organizations_url": "https://api.github.com/users/yuriks/orgs", "repos_url": "https://api.github.com/users/yuriks/repos", "events_url": "https://api.github.com/users/yuriks/events{/privacy}", "received_events_url": "https://api.github.com/users/yuriks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c23140aaf16515227b0403538eb4361dec54ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c23140aaf16515227b0403538eb4361dec54ae3", "html_url": "https://github.com/rust-lang/rust/commit/0c23140aaf16515227b0403538eb4361dec54ae3"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "84553782104d64725864d889fb1b9b8ae39f5271", "filename": "src/libcollections/lru_cache.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04784540efe156398eee4fba535f5a24b8bd649e/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04784540efe156398eee4fba535f5a24b8bd649e/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=04784540efe156398eee4fba535f5a24b8bd649e", "patch": "@@ -114,10 +114,8 @@ impl<K: Hash + TotalEq, V> LruCache<K, V> {\n \n     /// Put a key-value pair into cache.\n     pub fn put(&mut self, k: K, v: V) {\n-        let mut key_existed = false;\n         let (node_ptr, node_opt) = match self.map.find_mut(&KeyRef{k: &k}) {\n             Some(node) => {\n-                key_existed = true;\n                 node.value = Some(v);\n                 let node_ptr: *mut LruEntry<K, V> = &mut **node;\n                 (node_ptr, None)\n@@ -128,15 +126,18 @@ impl<K: Hash + TotalEq, V> LruCache<K, V> {\n                 (node_ptr, Some(node))\n             }\n         };\n-        if key_existed {\n-            self.detach(node_ptr);\n-            self.attach(node_ptr);\n-        } else {\n-            let keyref = unsafe { (*node_ptr).key.as_ref().unwrap() };\n-            self.map.swap(KeyRef{k: keyref}, node_opt.unwrap());\n-            self.attach(node_ptr);\n-            if self.len() > self.capacity() {\n-                self.remove_lru();\n+        match node_opt {\n+            None => {\n+                self.detach(node_ptr);\n+                self.attach(node_ptr);\n+            }\n+            Some(node) => {\n+                let keyref = unsafe { (*node_ptr).key.as_ref().unwrap() };\n+                self.map.swap(KeyRef{k: keyref}, node);\n+                self.attach(node_ptr);\n+                if self.len() > self.capacity() {\n+                    self.remove_lru();\n+                }\n             }\n         }\n     }"}]}