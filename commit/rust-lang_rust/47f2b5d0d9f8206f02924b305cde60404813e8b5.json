{"sha": "47f2b5d0d9f8206f02924b305cde60404813e8b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjJiNWQwZDlmODIwNmYwMjkyNGIzMDVjZGU2MDQwNDgxM2U4YjU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-12T18:39:14Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-12T18:39:14Z"}, "message": "Map first and last node in original_range", "tree": {"sha": "18c9c250534d1dae0b0f59254ec78d068d49b68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c9c250534d1dae0b0f59254ec78d068d49b68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f2b5d0d9f8206f02924b305cde60404813e8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f2b5d0d9f8206f02924b305cde60404813e8b5", "html_url": "https://github.com/rust-lang/rust/commit/47f2b5d0d9f8206f02924b305cde60404813e8b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f2b5d0d9f8206f02924b305cde60404813e8b5/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5202b0ecbaab2d44e886828f0e30dee67fad0c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5202b0ecbaab2d44e886828f0e30dee67fad0c5c", "html_url": "https://github.com/rust-lang/rust/commit/5202b0ecbaab2d44e886828f0e30dee67fad0c5c"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "661628ae46682370bd7dfd9df4c886ac59cd8a00", "filename": "crates/ra_ide/src/expand.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/47f2b5d0d9f8206f02924b305cde60404813e8b5/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f2b5d0d9f8206f02924b305cde60404813e8b5/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand.rs?ref=47f2b5d0d9f8206f02924b305cde60404813e8b5", "patch": "@@ -3,7 +3,7 @@ use std::iter::successors;\n \n use hir::InFile;\n use ra_db::FileId;\n-use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken};\n+use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken, TextRange};\n \n use crate::{db::RootDatabase, FileRange};\n \n@@ -17,26 +17,45 @@ pub(crate) fn original_range(db: &RootDatabase, node: InFile<&SyntaxNode>) -> Fi\n         }\n         Some(it) => it,\n     };\n-    // FIXME: the following completely wrong.\n-    //\n-    // *First*, we should try to map first and last tokens of node, and, if that\n-    // fails, return the range of the overall macro expansions.\n-    //\n-    // *Second*, we should handle recurside macro expansions\n-\n-    let token = node\n-        .value\n-        .descendants_with_tokens()\n-        .filter_map(|it| it.into_token())\n-        .find_map(|it| expansion.map_token_up(node.with_value(&it)));\n-\n-    match token {\n-        Some(it) => {\n-            FileRange { file_id: it.file_id.original_file(db), range: it.value.text_range() }\n+    // FIXME: We should handle recurside macro expansions\n+\n+    let range = node.value.descendants_with_tokens().find_map(|it| {\n+        match it.as_token() {\n+            // FIXME: Remove this branch after all `tt::TokenTree`s have a proper `TokenId`,\n+            // and return the range of the overall macro expansions if mapping first and last tokens fails.\n+            Some(token) => {\n+                let token = expansion.map_token_up(node.with_value(&token))?;\n+                Some(token.with_value(token.value.text_range()))\n+            }\n+            None => {\n+                // Try to map first and last tokens of node, and, if success, return the union range of mapped tokens\n+                let n = it.into_node()?;\n+                let first = expansion.map_token_up(node.with_value(&n.first_token()?))?;\n+                let last = expansion.map_token_up(node.with_value(&n.last_token()?))?;\n+\n+                // FIXME: Is is possible ?\n+                if first.file_id != last.file_id {\n+                    return None;\n+                }\n+\n+                // FIXME: Add union method in TextRange\n+                let range = union_range(first.value.text_range(), last.value.text_range());\n+                Some(first.with_value(range))\n+            }\n         }\n+    });\n+\n+    return match range {\n+        Some(it) => FileRange { file_id: it.file_id.original_file(db), range: it.value },\n         None => {\n             FileRange { file_id: node.file_id.original_file(db), range: node.value.text_range() }\n         }\n+    };\n+\n+    fn union_range(a: TextRange, b: TextRange) -> TextRange {\n+        let start = a.start().min(b.start());\n+        let end = a.end().max(b.end());\n+        TextRange::from_to(start, end)\n     }\n }\n "}]}