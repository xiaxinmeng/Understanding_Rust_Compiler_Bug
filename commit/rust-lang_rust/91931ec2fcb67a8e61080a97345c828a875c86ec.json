{"sha": "91931ec2fcb67a8e61080a97345c828a875c86ec", "node_id": "C_kwDOAAsO6NoAKDkxOTMxZWMyZmNiNjdhOGU2MTA4MGE5NzM0NWM4MjhhODc1Yzg2ZWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T12:48:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T12:48:15Z"}, "message": "Auto merge of #98354 - camsteffen:is-some-and-by-value, r=m-ou-se\n\nChange `is_some_and` to take by value\n\nConsistent with other function-accepting `Option` methods.\n\nTracking issue: #93050\n\nr? `@m-ou-se`", "tree": {"sha": "b07cb305febd020fc9096b38026c3c6243366d9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b07cb305febd020fc9096b38026c3c6243366d9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91931ec2fcb67a8e61080a97345c828a875c86ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91931ec2fcb67a8e61080a97345c828a875c86ec", "html_url": "https://github.com/rust-lang/rust/commit/91931ec2fcb67a8e61080a97345c828a875c86ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91931ec2fcb67a8e61080a97345c828a875c86ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756e7be5eb923ec955dfd8dec2a0d3ac81cfdf55", "url": "https://api.github.com/repos/rust-lang/rust/commits/756e7be5eb923ec955dfd8dec2a0d3ac81cfdf55", "html_url": "https://github.com/rust-lang/rust/commit/756e7be5eb923ec955dfd8dec2a0d3ac81cfdf55"}, {"sha": "4f12de0660bb26eefac258b03ffb6c43d2debda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f12de0660bb26eefac258b03ffb6c43d2debda7", "html_url": "https://github.com/rust-lang/rust/commit/4f12de0660bb26eefac258b03ffb6c43d2debda7"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "c7ea7de8f4ead2f5d013192f79aea6010fa4898f", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -7,7 +7,7 @@\n #![feature(box_patterns)]\n #![feature(decl_macro)]\n #![feature(if_let_guard)]\n-#![feature(is_some_with)]\n+#![feature(is_some_and)]\n #![feature(is_sorted)]\n #![feature(let_chains)]\n #![feature(proc_macro_internals)]"}, {"sha": "ebdaf61e43905ea8629635083dc07022cb1951fc", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -20,7 +20,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(yeet_expr)]\n-#![feature(is_some_with)]\n+#![feature(is_some_and)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "d31b9b7ae46b4babf25dec076cf243906fa17259", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -70,7 +70,7 @@ This API is completely unstable and subject to change.\n #![feature(once_cell)]\n #![feature(slice_partition_dedup)]\n #![feature(try_blocks)]\n-#![feature(is_some_with)]\n+#![feature(is_some_and)]\n #![feature(type_alias_impl_trait)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "4b57371096e9ab670f3c99e35e8220a47600c972", "filename": "library/core/src/option.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -559,22 +559,25 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(is_some_with)]\n+    /// #![feature(is_some_and)]\n     ///\n     /// let x: Option<u32> = Some(2);\n-    /// assert_eq!(x.is_some_and(|&x| x > 1), true);\n+    /// assert_eq!(x.is_some_and(|x| x > 1), true);\n     ///\n     /// let x: Option<u32> = Some(0);\n-    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|x| x > 1), false);\n     ///\n     /// let x: Option<u32> = None;\n-    /// assert_eq!(x.is_some_and(|&x| x > 1), false);\n+    /// assert_eq!(x.is_some_and(|x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_some_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n-        matches!(self, Some(x) if f(x))\n+    #[unstable(feature = \"is_some_and\", issue = \"93050\")]\n+    pub fn is_some_and(self, f: impl FnOnce(T) -> bool) -> bool {\n+        match self {\n+            None => false,\n+            Some(x) => f(x),\n+        }\n     }\n \n     /// Returns `true` if the option is a [`None`] value."}, {"sha": "3f33c5fd6ca36fd7d78d04536cfe47c49cf9e0a1", "filename": "library/core/src/result.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -548,22 +548,25 @@ impl<T, E> Result<T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(is_some_with)]\n+    /// #![feature(is_some_and)]\n     ///\n     /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.is_ok_and(|&x| x > 1), true);\n+    /// assert_eq!(x.is_ok_and(|x| x > 1), true);\n     ///\n     /// let x: Result<u32, &str> = Ok(0);\n-    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|x| x > 1), false);\n     ///\n     /// let x: Result<u32, &str> = Err(\"hey\");\n-    /// assert_eq!(x.is_ok_and(|&x| x > 1), false);\n+    /// assert_eq!(x.is_ok_and(|x| x > 1), false);\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_ok_and(&self, f: impl FnOnce(&T) -> bool) -> bool {\n-        matches!(self, Ok(x) if f(x))\n+    #[unstable(feature = \"is_some_and\", issue = \"93050\")]\n+    pub fn is_ok_and(self, f: impl FnOnce(T) -> bool) -> bool {\n+        match self {\n+            Err(_) => false,\n+            Ok(x) => f(x),\n+        }\n     }\n \n     /// Returns `true` if the result is [`Err`].\n@@ -592,7 +595,7 @@ impl<T, E> Result<T, E> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(is_some_with)]\n+    /// #![feature(is_some_and)]\n     /// use std::io::{Error, ErrorKind};\n     ///\n     /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::NotFound, \"!\"));\n@@ -606,9 +609,12 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[unstable(feature = \"is_some_with\", issue = \"93050\")]\n-    pub fn is_err_and(&self, f: impl FnOnce(&E) -> bool) -> bool {\n-        matches!(self, Err(x) if f(x))\n+    #[unstable(feature = \"is_some_and\", issue = \"93050\")]\n+    pub fn is_err_and(self, f: impl FnOnce(E) -> bool) -> bool {\n+        match self {\n+            Ok(_) => false,\n+            Err(e) => f(e),\n+        }\n     }\n \n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "2700659d4e9694bfdb86f1a5d8e3836bbdf3e843", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -292,7 +292,7 @@\n #![feature(hasher_prefixfree_extras)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n-#![feature(is_some_with)]\n+#![feature(is_some_and)]\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_write_slice)]\n #![feature(nonnull_slice_from_raw_parts)]"}, {"sha": "d07610b19d754176a3f0be6240e0475ad95b5355", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -7,7 +7,7 @@\n #![feature(int_log)]\n #![feature(variant_count)]\n #![feature(yeet_expr)]\n-#![feature(is_some_with)]\n+#![feature(is_some_and)]\n #![feature(nonzero_ops)]\n #![feature(local_key_cell_methods)]\n #![cfg_attr(bootstrap, feature(let_else))]"}, {"sha": "97632af785db587c17ea6122b481f4a6aeb72eb0", "filename": "src/tools/miri/src/stacked_borrows/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91931ec2fcb67a8e61080a97345c828a875c86ec/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91931ec2fcb67a8e61080a97345c828a875c86ec/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs?ref=91931ec2fcb67a8e61080a97345c828a875c86ec", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> Stack {\n         }\n \n         // Couldn't find it in the stack; but if there is an unknown bottom it might be there.\n-        let found = self.unknown_bottom.is_some_and(|&unknown_limit| {\n+        let found = self.unknown_bottom.is_some_and(|unknown_limit| {\n             tag.0 < unknown_limit.0 // unknown_limit is an upper bound for what can be in the unknown bottom.\n         });\n         if found { Ok(None) } else { Err(()) }"}]}