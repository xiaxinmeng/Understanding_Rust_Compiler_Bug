{"sha": "db62154062534a61b618f46d4c8715479ce150af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNjIxNTQwNjI1MzRhNjFiNjE4ZjQ2ZDRjODcxNTQ3OWNlMTUwYWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-17T06:40:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-17T19:37:17Z"}, "message": "rt: Don't take the lock when reallocing in the kernel memory region", "tree": {"sha": "cacec91e18aba300f88fb958cff43f07b578f6fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cacec91e18aba300f88fb958cff43f07b578f6fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db62154062534a61b618f46d4c8715479ce150af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db62154062534a61b618f46d4c8715479ce150af", "html_url": "https://github.com/rust-lang/rust/commit/db62154062534a61b618f46d4c8715479ce150af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db62154062534a61b618f46d4c8715479ce150af/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23cd8f52fbfb41844b27c5e65cb620c34c7af59", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23cd8f52fbfb41844b27c5e65cb620c34c7af59", "html_url": "https://github.com/rust-lang/rust/commit/d23cd8f52fbfb41844b27c5e65cb620c34c7af59"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "29099fb14f271b865bbcc1ddfe88201490a9197c", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db62154062534a61b618f46d4c8715479ce150af/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/db62154062534a61b618f46d4c8715479ce150af/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=db62154062534a61b618f46d4c8715479ce150af", "patch": "@@ -60,7 +60,6 @@ void memory_region::free(void *mem) {\n \n void *\n memory_region::realloc(void *mem, size_t orig_size) {\n-    if (_synchronized) { _lock.lock(); }\n     if (!mem) {\n         add_alloc();\n     }\n@@ -79,6 +78,7 @@ memory_region::realloc(void *mem, size_t orig_size) {\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 2\n+    if (_synchronized) { _lock.lock(); }\n     if (_allocation_list[newMem->index] != alloc) {\n         printf(\"at index %d, found %p, expected %p\\n\",\n                alloc->index, _allocation_list[alloc->index], alloc);\n@@ -91,9 +91,9 @@ memory_region::realloc(void *mem, size_t orig_size) {\n         // printf(\"realloc: stored %p at index %d, replacing %p\\n\",\n         //        newMem, index, mem);\n     }\n+    if (_synchronized) { _lock.unlock(); }\n #   endif\n \n-    if (_synchronized) { _lock.unlock(); }\n     return get_data(newMem);\n }\n "}]}