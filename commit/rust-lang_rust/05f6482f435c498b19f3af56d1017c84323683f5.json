{"sha": "05f6482f435c498b19f3af56d1017c84323683f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjY0ODJmNDM1YzQ5OGIxOWYzYWY1NmQxMDE3Yzg0MzIzNjgzZjU=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-02-20T19:29:40Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-07T00:14:51Z"}, "message": "mir-interpret: add method Memory::read wide_string", "tree": {"sha": "3c31a823b1892fc5ed2caca0600fac2a94d0a65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c31a823b1892fc5ed2caca0600fac2a94d0a65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f6482f435c498b19f3af56d1017c84323683f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f6482f435c498b19f3af56d1017c84323683f5", "html_url": "https://github.com/rust-lang/rust/commit/05f6482f435c498b19f3af56d1017c84323683f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f6482f435c498b19f3af56d1017c84323683f5/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0d5813fd7fe4696b6eb61acf473a7f7a5f9b5a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d5813fd7fe4696b6eb61acf473a7f7a5f9b5a0", "html_url": "https://github.com/rust-lang/rust/commit/b0d5813fd7fe4696b6eb61acf473a7f7a5f9b5a0"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "8a02f47accb5d3b7a05b0707a3b0889b892caa10", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05f6482f435c498b19f3af56d1017c84323683f5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f6482f435c498b19f3af56d1017c84323683f5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=05f6482f435c498b19f3af56d1017c84323683f5", "patch": "@@ -590,6 +590,11 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         self.not_undef()?.to_u8()\n     }\n \n+    #[inline(always)]\n+    pub fn to_u16(self) -> InterpResult<'tcx, u16> {\n+        self.not_undef()?.to_u16()\n+    }\n+\n     #[inline(always)]\n     pub fn to_u32(self) -> InterpResult<'tcx, u32> {\n         self.not_undef()?.to_u32()\n@@ -610,6 +615,11 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         self.not_undef()?.to_i8()\n     }\n \n+    #[inline(always)]\n+    pub fn to_i16(self) -> InterpResult<'tcx, i16> {\n+        self.not_undef()?.to_i16()\n+    }\n+\n     #[inline(always)]\n     pub fn to_i32(self) -> InterpResult<'tcx, i32> {\n         self.not_undef()?.to_i32()"}, {"sha": "4b668500e7c93aa1670862444a57db9095f22ce7", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05f6482f435c498b19f3af56d1017c84323683f5/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f6482f435c498b19f3af56d1017c84323683f5/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=05f6482f435c498b19f3af56d1017c84323683f5", "patch": "@@ -791,6 +791,33 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get_raw(ptr.alloc_id)?.read_c_str(self, ptr)\n     }\n \n+    /// Reads a 0x0000-terminated u16-sequence from memory. Returns them as a Vec<u16>.\n+    /// Terminator 0x0000 is not included in the returned Vec<u16>.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn read_wide_str(&self, ptr: Scalar<M::PointerTag>) -> InterpResult<'tcx, Vec<u16>> {\n+        let size_2bytes = Size::from_bytes(2);\n+        let align_2bytes = Align::from_bytes(2).unwrap();\n+        // We need to read at least 2 bytes, so we *need* a ptr.\n+        let mut ptr = self.force_ptr(ptr)?;\n+        let allocation = self.get_raw(ptr.alloc_id)?;\n+        let mut u16_seq = Vec::new();\n+\n+        loop {\n+            ptr = self\n+                .check_ptr_access(ptr.into(), size_2bytes, align_2bytes)?\n+                .expect(\"cannot be a ZST\");\n+            let single_u16 = allocation.read_scalar(self, ptr, size_2bytes)?.to_u16()?;\n+            if single_u16 != 0x0000 {\n+                u16_seq.push(single_u16);\n+                ptr = ptr.offset(size_2bytes, self)?;\n+            } else {\n+                break;\n+            }\n+        }\n+        Ok(u16_seq)\n+    }\n+\n     /// Writes the given stream of bytes into memory.\n     ///\n     /// Performs appropriate bounds checks."}]}