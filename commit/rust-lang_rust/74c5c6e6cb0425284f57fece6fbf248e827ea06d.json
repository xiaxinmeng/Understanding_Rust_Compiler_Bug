{"sha": "74c5c6e6cb0425284f57fece6fbf248e827ea06d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YzVjNmU2Y2IwNDI1Mjg0ZjU3ZmVjZTZmYmYyNDhlODI3ZWEwNmQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-03-04T02:29:30Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-03-04T02:44:44Z"}, "message": "Move process::ExitCode internals to sys\n\nNow begins the saga of fixing compilation errors on other platforms...", "tree": {"sha": "d6c4863688aedf2527b3fa2dd806704b5ae0c33e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6c4863688aedf2527b3fa2dd806704b5ae0c33e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c5c6e6cb0425284f57fece6fbf248e827ea06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c5c6e6cb0425284f57fece6fbf248e827ea06d", "html_url": "https://github.com/rust-lang/rust/commit/74c5c6e6cb0425284f57fece6fbf248e827ea06d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c5c6e6cb0425284f57fece6fbf248e827ea06d/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce2b40ee5f847f02d6da1b81f3303b8e8b23531", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce2b40ee5f847f02d6da1b81f3303b8e8b23531", "html_url": "https://github.com/rust-lang/rust/commit/2ce2b40ee5f847f02d6da1b81f3303b8e8b23531"}], "stats": {"total": 96, "additions": 72, "deletions": 24}, "files": [{"sha": "d5ac2d19e831f81c6fa4b7c15d1c6800493277ab", "filename": "src/libstd/process.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=74c5c6e6cb0425284f57fece6fbf248e827ea06d", "patch": "@@ -1098,38 +1098,26 @@ impl fmt::Display for ExitStatus {\n ///\n /// [RFC #1937]: https://github.com/rust-lang/rfcs/pull/1937\n #[derive(Clone, Copy, Debug)]\n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n-pub struct ExitCode(pub i32);\n+#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+pub struct ExitCode(imp::ExitCode);\n \n-#[cfg(target_arch = \"wasm32\")]\n-mod rawexit {\n-    pub const SUCCESS: i32 = 0;\n-    pub const FAILURE: i32 = 1;\n-}\n-#[cfg(not(target_arch = \"wasm32\"))]\n-mod rawexit {\n-    use libc;\n-    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n-    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n-}\n-\n-#[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n+#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n impl ExitCode {\n     /// The canonical ExitCode for successful termination on this platform.\n     ///\n     /// Note that a `()`-returning `main` implicitly results in a successful\n     /// termination, so there's no need to return this from `main` unless\n     /// you're also returning other possible codes.\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n-    pub const SUCCESS: ExitCode = ExitCode(rawexit::SUCCESS);\n+    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    pub const SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);\n \n     /// The canonical ExitCode for unsuccessful termination on this platform.\n     ///\n     /// If you're only returning this and `SUCCESS` from `main`, consider\n     /// instead returning `Err(_)` and `Ok(())` respectively, which will\n     /// return the same codes (but will also `eprintln!` the error).\n-    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"43301\")]\n-    pub const FAILURE: ExitCode = ExitCode(rawexit::FAILURE);\n+    #[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+    pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n }\n \n impl Child {\n@@ -1494,8 +1482,7 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for ExitCode {\n     fn report(self) -> i32 {\n-        let ExitCode(code) = self;\n-        code\n+        self.0.as_i32()\n     }\n }\n "}, {"sha": "fcd40c15c1708bf77e63559d5103f9461aa3c132", "filename": "src/libstd/sys/cloudabi/shims/process.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs?ref=74c5c6e6cb0425284f57fece6fbf248e827ea06d", "patch": "@@ -126,6 +126,18 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitCode(bool);\n+\n+impl ExitCode {\n+    pub const SUCCESS: ExitCode = ExitCode(false);\n+    pub const FAILURE: ExitCode = ExitCode(true);\n+\n+    pub fn as_i32(&self) -> i32 {\n+        self.0 as i32\n+    }\n+}\n+\n pub struct Process(Void);\n \n impl Process {"}, {"sha": "d0b94e14f54e93e1c4bd14ee117ca523b604a45c", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=74c5c6e6cb0425284f57fece6fbf248e827ea06d", "patch": "@@ -13,6 +13,7 @@ use ffi::OsStr;\n use os::unix::ffi::OsStrExt;\n use fmt;\n use io::{self, Error, ErrorKind};\n+use libc::{EXIT_SUCCESS, EXIT_FAILURE};\n use path::{Path, PathBuf};\n use sys::fd::FileDesc;\n use sys::fs::{File, OpenOptions};\n@@ -480,6 +481,18 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitCode(u8);\n+\n+impl ExitCode {\n+    pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);\n+    pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);\n+\n+    pub fn as_i32(&self) -> i32 {\n+        self.0 as i32\n+    }\n+}\n+\n /// The unique id of the process (this should never be negative).\n pub struct Process {\n     pid: usize,"}, {"sha": "d8ac26c45b172982e07543a570e8189237b2f632", "filename": "src/libstd/sys/unix/process/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=74c5c6e6cb0425284f57fece6fbf248e827ea06d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::process_common::{Command, ExitStatus, Stdio, StdioPipes};\n+pub use self::process_common::{Command, ExitStatus, ExitCode, Stdio, StdioPipes};\n pub use self::process_inner::Process;\n \n mod process_common;"}, {"sha": "d0486f06a143af2598f3987ed18054583f4bd552", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=74c5c6e6cb0425284f57fece6fbf248e827ea06d", "patch": "@@ -13,7 +13,7 @@ use os::unix::prelude::*;\n use ffi::{OsString, OsStr, CString, CStr};\n use fmt;\n use io;\n-use libc::{self, c_int, gid_t, uid_t, c_char};\n+use libc::{self, c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n use ptr;\n use sys::fd::FileDesc;\n use sys::fs::{File, OpenOptions};\n@@ -393,6 +393,18 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitCode(u8);\n+\n+impl ExitCode {\n+    pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);\n+    pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);\n+\n+    pub fn as_i32(&self) -> i32 {\n+        self.0 as i32\n+    }\n+}\n+\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use super::*;"}, {"sha": "433e9cec7c8accf78195af2536c004396268f89d", "filename": "src/libstd/sys/wasm/process.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs?ref=74c5c6e6cb0425284f57fece6fbf248e827ea06d", "patch": "@@ -129,6 +129,18 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitCode(bool);\n+\n+impl ExitCode {\n+    pub const SUCCESS: ExitCode = ExitCode(false);\n+    pub const FAILURE: ExitCode = ExitCode(true);\n+\n+    pub fn as_i32(&self) -> i32 {\n+        self.0 as i32\n+    }\n+}\n+\n pub struct Process(Void);\n \n impl Process {"}, {"sha": "f1ab9c4760965e38efcf59dbb4b98ebd603dcca9", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c5c6e6cb0425284f57fece6fbf248e827ea06d/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=74c5c6e6cb0425284f57fece6fbf248e827ea06d", "patch": "@@ -18,7 +18,7 @@ use ffi::{OsString, OsStr};\n use fmt;\n use fs;\n use io::{self, Error, ErrorKind};\n-use libc::c_void;\n+use libc::{c_void, EXIT_SUCCESS, EXIT_FAILURE};\n use mem;\n use os::windows::ffi::OsStrExt;\n use path::Path;\n@@ -408,6 +408,18 @@ impl fmt::Display for ExitStatus {\n     }\n }\n \n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitCode(c::DWORD);\n+\n+impl ExitCode {\n+    pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);\n+    pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);\n+\n+    pub fn as_i32(&self) -> i32 {\n+        self.0 as i32\n+    }\n+}\n+\n fn zeroed_startupinfo() -> c::STARTUPINFO {\n     c::STARTUPINFO {\n         cb: 0,"}]}