{"sha": "e7e6bc1126884fb20233b1be104af6458cad7c76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTZiYzExMjY4ODRmYjIwMjMzYjFiZTEwNGFmNjQ1OGNhZDdjNzY=", "commit": {"author": {"name": "Joey Hain", "email": "jmhain@protonmail.com", "date": "2020-06-04T02:16:29Z"}, "committer": {"name": "Joey Hain", "email": "jmhain@protonmail.com", "date": "2020-06-05T20:52:34Z"}, "message": "properly handle feature gated lints\n\n- lint: add `feature_gate` field, allow specifying it in `declare_lint!`\n\n- generalize the lint feature gate check\n\n- librustdoc: generalize whitelisting of feature-gated lints", "tree": {"sha": "5b66f581643a44a579fd78f8c6642a21e3001161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b66f581643a44a579fd78f8c6642a21e3001161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e6bc1126884fb20233b1be104af6458cad7c76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e6bc1126884fb20233b1be104af6458cad7c76", "html_url": "https://github.com/rust-lang/rust/commit/e7e6bc1126884fb20233b1be104af6458cad7c76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e6bc1126884fb20233b1be104af6458cad7c76/comments", "author": {"login": "OddCoincidence", "id": 45985108, "node_id": "MDQ6VXNlcjQ1OTg1MTA4", "avatar_url": "https://avatars.githubusercontent.com/u/45985108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OddCoincidence", "html_url": "https://github.com/OddCoincidence", "followers_url": "https://api.github.com/users/OddCoincidence/followers", "following_url": "https://api.github.com/users/OddCoincidence/following{/other_user}", "gists_url": "https://api.github.com/users/OddCoincidence/gists{/gist_id}", "starred_url": "https://api.github.com/users/OddCoincidence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OddCoincidence/subscriptions", "organizations_url": "https://api.github.com/users/OddCoincidence/orgs", "repos_url": "https://api.github.com/users/OddCoincidence/repos", "events_url": "https://api.github.com/users/OddCoincidence/events{/privacy}", "received_events_url": "https://api.github.com/users/OddCoincidence/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OddCoincidence", "id": 45985108, "node_id": "MDQ6VXNlcjQ1OTg1MTA4", "avatar_url": "https://avatars.githubusercontent.com/u/45985108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OddCoincidence", "html_url": "https://github.com/OddCoincidence", "followers_url": "https://api.github.com/users/OddCoincidence/followers", "following_url": "https://api.github.com/users/OddCoincidence/following{/other_user}", "gists_url": "https://api.github.com/users/OddCoincidence/gists{/gist_id}", "starred_url": "https://api.github.com/users/OddCoincidence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OddCoincidence/subscriptions", "organizations_url": "https://api.github.com/users/OddCoincidence/orgs", "repos_url": "https://api.github.com/users/OddCoincidence/repos", "events_url": "https://api.github.com/users/OddCoincidence/events{/privacy}", "received_events_url": "https://api.github.com/users/OddCoincidence/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56daaf669ebc3d5083db5cded719f780dc31104e", "url": "https://api.github.com/repos/rust-lang/rust/commits/56daaf669ebc3d5083db5cded719f780dc31104e", "html_url": "https://github.com/rust-lang/rust/commit/56daaf669ebc3d5083db5cded719f780dc31104e"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "05e7c9a0c780de86898cb28e32a1118872a05495", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=e7e6bc1126884fb20233b1be104af6458cad7c76", "patch": "@@ -214,9 +214,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintSource::Node(name, li.span(), reason);\n-                        for id in ids {\n-                            self.check_gated_lint(*id, attr.span);\n-                            specs.insert(*id, (level, src));\n+                        for &id in ids {\n+                            self.check_gated_lint(id, attr.span);\n+                            specs.insert(id, (level, src));\n                         }\n                     }\n \n@@ -386,17 +386,18 @@ impl<'s> LintLevelsBuilder<'s> {\n         BuilderPush { prev, changed: prev != self.cur }\n     }\n \n-    fn check_gated_lint(&self, id: LintId, span: Span) {\n-        if id == LintId::of(builtin::UNSAFE_OP_IN_UNSAFE_FN)\n-            && !self.sess.features_untracked().unsafe_block_in_unsafe_fn\n-        {\n-            feature_err(\n-                &self.sess.parse_sess,\n-                sym::unsafe_block_in_unsafe_fn,\n-                span,\n-                \"the `unsafe_op_in_unsafe_fn` lint is unstable\",\n-            )\n-            .emit();\n+    /// Checks if the lint is gated on a feature that is not enabled.\n+    fn check_gated_lint(&self, lint_id: LintId, span: Span) {\n+        if let Some(feature) = lint_id.lint.feature_gate {\n+            if !self.sess.features_untracked().enabled(feature) {\n+                feature_err(\n+                    &self.sess.parse_sess,\n+                    feature,\n+                    span,\n+                    &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower()),\n+                )\n+                .emit();\n+            }\n         }\n     }\n "}, {"sha": "ffb45793090750926b7dc798751ca57e90675bd2", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=e7e6bc1126884fb20233b1be104af6458cad7c76", "patch": "@@ -85,6 +85,9 @@ pub struct Lint {\n     pub future_incompatible: Option<FutureIncompatibleInfo>,\n \n     pub is_plugin: bool,\n+\n+    /// `Some` if this lint is feature gated, otherwise `None`.\n+    pub feature_gate: Option<Symbol>,\n }\n \n /// Extra information for a future incompatibility lint.\n@@ -107,6 +110,7 @@ impl Lint {\n             is_plugin: false,\n             report_in_external_macro: false,\n             future_incompatible: None,\n+            feature_gate: None,\n         }\n     }\n \n@@ -276,7 +280,9 @@ macro_rules! declare_lint {\n         );\n     );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n+     $(@future_incompatible = $fi:expr;)?\n+     $(@feature_gate = $gate:expr;)?\n+     $($v:ident),*) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n@@ -285,6 +291,7 @@ macro_rules! declare_lint {\n             is_plugin: false,\n             $($v: true,)*\n             $(future_incompatible: Some($fi),)*\n+            $(feature_gate: Some($gate),)*\n             ..$crate::lint::Lint::default_fields_for_macro()\n         };\n     );\n@@ -328,6 +335,7 @@ macro_rules! declare_tool_lint {\n             report_in_external_macro: $external,\n             future_incompatible: None,\n             is_plugin: true,\n+            feature_gate: None,\n         };\n     );\n }"}, {"sha": "bb0d6e1a47eaddb5f06458999fa5f67b39afbede", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=e7e6bc1126884fb20233b1be104af6458cad7c76", "patch": "@@ -7,6 +7,7 @@\n use crate::lint::FutureIncompatibleInfo;\n use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n+use rustc_span::symbol::sym;\n \n declare_lint! {\n     pub ILL_FORMED_ATTRIBUTE_INPUT,\n@@ -530,6 +531,7 @@ declare_lint! {\n     pub UNSAFE_OP_IN_UNSAFE_FN,\n     Allow,\n     \"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\",\n+    @feature_gate = sym::unsafe_block_in_unsafe_fn;\n }\n \n declare_lint_pass! {"}, {"sha": "1690b946bb625050fde5de6d9a8c5c7926c412f1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e6bc1126884fb20233b1be104af6458cad7c76/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e7e6bc1126884fb20233b1be104af6458cad7c76", "patch": "@@ -225,11 +225,6 @@ where\n {\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n \n-    // Whitelist feature-gated lints to avoid feature errors when trying to\n-    // allow all lints.\n-    // FIXME(#72694): handle feature-gated lints properly.\n-    let unsafe_op_in_unsafe_fn_name = rustc_lint::builtin::UNSAFE_OP_IN_UNSAFE_FN.name;\n-\n     whitelisted_lints.push(warnings_lint_name.to_owned());\n     whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n \n@@ -241,7 +236,9 @@ where\n \n     let lint_opts = lints()\n         .filter_map(|lint| {\n-            if lint.name == warnings_lint_name || lint.name == unsafe_op_in_unsafe_fn_name {\n+            // Whitelist feature-gated lints to avoid feature errors when trying to\n+            // allow all lints.\n+            if lint.name == warnings_lint_name || lint.feature_gate.is_some() {\n                 None\n             } else {\n                 filter_call(lint)"}]}