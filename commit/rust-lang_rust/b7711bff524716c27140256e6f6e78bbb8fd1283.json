{"sha": "b7711bff524716c27140256e6f6e78bbb8fd1283", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NzExYmZmNTI0NzE2YzI3MTQwMjU2ZTZmNmU3OGJiYjhmZDEyODM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-30T23:08:01Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-30T23:08:01Z"}, "message": "Rename is_range_literal to is_lit", "tree": {"sha": "6f2164925da69c968ac7ef6936d64d4daa21c38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f2164925da69c968ac7ef6936d64d4daa21c38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7711bff524716c27140256e6f6e78bbb8fd1283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7711bff524716c27140256e6f6e78bbb8fd1283", "html_url": "https://github.com/rust-lang/rust/commit/b7711bff524716c27140256e6f6e78bbb8fd1283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7711bff524716c27140256e6f6e78bbb8fd1283/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80f90d866b24e1a8aadda87f58414a5ad80d5c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/80f90d866b24e1a8aadda87f58414a5ad80d5c6f", "html_url": "https://github.com/rust-lang/rust/commit/80f90d866b24e1a8aadda87f58414a5ad80d5c6f"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0366d1e5c24e9d4777f8b0d256ce81aba442a313", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7711bff524716c27140256e6f6e78bbb8fd1283/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7711bff524716c27140256e6f6e78bbb8fd1283/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b7711bff524716c27140256e6f6e78bbb8fd1283", "patch": "@@ -5423,7 +5423,7 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n \n     // Check whether a span corresponding to a range expression is a\n     // range literal, rather than an explicit struct or `new()` call.\n-    fn is_range_literal(sess: &Session, span: &Span) -> bool {\n+    fn is_lit(sess: &Session, span: &Span) -> bool {\n         let source_map = sess.source_map();\n         let end_point = source_map.end_point(*span);\n \n@@ -5438,21 +5438,21 @@ pub fn is_range_literal(sess: &Session, expr: &hir::Expr) -> bool {\n         // All built-in range literals but `..=` and `..` desugar to `Struct`s.\n         ExprKind::Struct(ref qpath, _, _) => {\n             if let QPath::Resolved(None, ref path) = **qpath {\n-                return is_range_path(&path) && is_range_literal(sess, &expr.span);\n+                return is_range_path(&path) && is_lit(sess, &expr.span);\n             }\n         }\n \n         // `..` desugars to its struct path.\n         ExprKind::Path(QPath::Resolved(None, ref path)) => {\n-            return is_range_path(&path) && is_range_literal(sess, &expr.span);\n+            return is_range_path(&path) && is_lit(sess, &expr.span);\n         }\n \n         // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n         ExprKind::Call(ref func, _) => {\n             if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.node {\n                 if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.node {\n                     let new_call = segment.ident.as_str() == \"new\";\n-                    return is_range_path(&path) && is_range_literal(sess, &expr.span) && new_call;\n+                    return is_range_path(&path) && is_lit(sess, &expr.span) && new_call;\n                 }\n             }\n         }"}]}