{"sha": "902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMjQzM2I1YmY0ZjQyNzE0ZWQ4ZDViNmJiZjBkNTc0ZDgzYTRmMGY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-29T20:08:50Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:55:14Z"}, "message": "rustc: take a PolyFnSig instead of an FnSig in FnAbi::of_fn_ptr.", "tree": {"sha": "02ae839ea543ecc2a9f8f3392d6bdc366f2669ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ae839ea543ecc2a9f8f3392d6bdc366f2669ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "html_url": "https://github.com/rust-lang/rust/commit/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b921d51d750cdb2892fff1cf0681481f4e5e3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b921d51d750cdb2892fff1cf0681481f4e5e3f6", "html_url": "https://github.com/rust-lang/rust/commit/2b921d51d750cdb2892fff1cf0681481f4e5e3f6"}], "stats": {"total": 57, "additions": 25, "deletions": 32}, "files": [{"sha": "d34ad7fb26a27ea8a567b447906eae1b34650547", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "patch": "@@ -2347,11 +2347,11 @@ where\n         + HasTyCtxt<'tcx>\n         + HasParamEnv<'tcx>,\n {\n-    fn of_fn_ptr(cx: &C, sig: ty::FnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n+    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n     fn new_internal(\n         cx: &C,\n-        sig: ty::FnSig<'tcx>,\n+        sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self;\n@@ -2366,15 +2366,12 @@ where\n         + HasTyCtxt<'tcx>\n         + HasParamEnv<'tcx>,\n {\n-    fn of_fn_ptr(cx: &C, sig: ty::FnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n+    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n         call::FnAbi::new_internal(cx, sig, extra_args, |ty, _| ArgAbi::new(cx.layout_of(ty)))\n     }\n \n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n         let sig = instance.fn_sig(cx.tcx());\n-        let sig = cx\n-            .tcx()\n-            .normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n         call::FnAbi::new_internal(cx, sig, extra_args, |ty, arg_idx| {\n             let mut layout = cx.layout_of(ty);\n@@ -2432,12 +2429,16 @@ where\n \n     fn new_internal(\n         cx: &C,\n-        sig: ty::FnSig<'tcx>,\n+        sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self {\n         debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n \n+        let sig = cx\n+            .tcx()\n+            .normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+\n         use rustc_target::spec::abi::Abi::*;\n         let conv = match cx.tcx().sess.target.target.adjust_abi(sig.abi) {\n             RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::C,"}, {"sha": "39ea1f6f5dccf0be55a8dc59f7064befd9fcb99e", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "patch": "@@ -413,13 +413,13 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             return llfn;\n         }\n \n-        let sig = tcx.mk_fn_sig(\n+        let sig = ty::Binder::bind(tcx.mk_fn_sig(\n             iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n             tcx.types.never,\n             false,\n             hir::Unsafety::Unsafe,\n             Abi::C\n-        );\n+        ));\n \n         let fn_abi = FnAbi::of_fn_ptr(self, sig, &[]);\n         let llfn = self.declare_fn(\"rust_eh_unwind_resume\", &fn_abi);"}, {"sha": "3201767c860150b88754cb64a20a56cf199c3670", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "patch": "@@ -1005,13 +1005,13 @@ fn gen_fn<'ll, 'tcx>(\n     output: Ty<'tcx>,\n     codegen: &mut dyn FnMut(Builder<'_, 'll, 'tcx>),\n ) -> &'ll Value {\n-    let rust_fn_sig = cx.tcx.mk_fn_sig(\n+    let rust_fn_sig = ty::Binder::bind(cx.tcx.mk_fn_sig(\n         inputs.into_iter(),\n         output,\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust\n-    );\n+    ));\n     let fn_abi = FnAbi::of_fn_ptr(cx, rust_fn_sig, &[]);\n     let llfn = cx.declare_fn(name, &fn_abi);\n     // FIXME(eddyb) find a nicer way to do this."}, {"sha": "d77bbb279216a79e77b8905cea153cc020b75c54", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "patch": "@@ -235,10 +235,6 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                     cx.type_ptr_to(cx.layout_of(self.ty.boxed_ty()).llvm_type(cx))\n                 }\n                 ty::FnPtr(sig) => {\n-                    let sig = cx.tcx.normalize_erasing_late_bound_regions(\n-                        ty::ParamEnv::reveal_all(),\n-                        &sig,\n-                    );\n                     cx.fn_ptr_backend_type(&FnAbi::of_fn_ptr(cx, sig, &[]))\n                 }\n                 _ => self.scalar_llvm_type_at(cx, scalar, Size::ZERO)"}, {"sha": "6dccf329c9f645cae71dc6c41c183ae00b9b5783", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=902433b5bf4f42714ed8d5b6bbf0d574d83a4f0f", "patch": "@@ -488,11 +488,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // available - right now `sig` is only needed for getting the `abi`\n         // and figuring out how many extra args were passed to a C-variadic `fn`.\n         let sig = callee.layout.ty.fn_sig(bx.tcx());\n-        let sig = bx.tcx().normalize_erasing_late_bound_regions(\n-            ty::ParamEnv::reveal_all(),\n-            &sig,\n-        );\n-        let abi = sig.abi;\n+        let abi = sig.abi();\n \n         // Handle intrinsics old codegen wants Expr's for, ourselves.\n         let intrinsic = match def {\n@@ -502,6 +498,17 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         };\n         let intrinsic = intrinsic.as_ref().map(|s| &s[..]);\n \n+        let extra_args = &args[sig.inputs().skip_binder().len()..];\n+        let extra_args = extra_args.iter().map(|op_arg| {\n+            let op_ty = op_arg.ty(*self.mir, bx.tcx());\n+            self.monomorphize(&op_ty)\n+        }).collect::<Vec<_>>();\n+\n+        let fn_abi = match instance {\n+            Some(instance) => FnAbi::of_instance(&bx, instance, &extra_args),\n+            None => FnAbi::of_fn_ptr(&bx, sig, &extra_args)\n+        };\n+\n         if intrinsic == Some(\"transmute\") {\n             if let Some(destination_ref) = destination.as_ref() {\n                 let &(ref dest, target) = destination_ref;\n@@ -515,23 +522,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // we can do what we like. Here, we declare that transmuting\n                 // into an uninhabited type is impossible, so anything following\n                 // it must be unreachable.\n-                assert_eq!(bx.layout_of(sig.output()).abi, layout::Abi::Uninhabited);\n+                assert_eq!(fn_abi.ret.layout.abi, layout::Abi::Uninhabited);\n                 bx.unreachable();\n             }\n             return;\n         }\n \n-        let extra_args = &args[sig.inputs().len()..];\n-        let extra_args = extra_args.iter().map(|op_arg| {\n-            let op_ty = op_arg.ty(*self.mir, bx.tcx());\n-            self.monomorphize(&op_ty)\n-        }).collect::<Vec<_>>();\n-\n-        let fn_abi = match instance {\n-            Some(instance) => FnAbi::of_instance(&bx, instance, &extra_args),\n-            None => FnAbi::of_fn_ptr(&bx, sig, &extra_args)\n-        };\n-\n         // For normal codegen, this Miri-specific intrinsic is just a NOP.\n         if intrinsic == Some(\"miri_start_panic\") {\n             let target = destination.as_ref().unwrap().1;"}]}