{"sha": "bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZDdhY2ZlMDQ2MzU2ZTgxMDdhNGYyZGYyYzVmMDZiYzBhYmQyMTk=", "commit": {"author": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2018-11-21T20:35:56Z"}, "committer": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2019-01-03T21:26:44Z"}, "message": "Add some tests\n\nThis copies and adjusts the existing coherence tests to ensure that\nthey continue to work using the new implementation.", "tree": {"sha": "d1f74844dd4ca01eb8c7e6647d08819595295aa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f74844dd4ca01eb8c7e6647d08819595295aa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAlwufhQACgkQqHvO5SBc\n5ImoQgf/Yrt09u4Er/O8Cax8IRiF4QgH6FR4pz9bPIAsLkpcCacB4x69zqIdztUI\niZ8phaIEx93O5dUVpqbsFxfeUpi2TLaZkOxDA4Yv/YtgDhl2j9qbl7n7Ow7oWHdy\nPsm0e3HwMS8ZBkA/gWz/ayCggpiXzrhXU+7oe9NzPgnUDDWb1Mx3TdIvOUtGlOzP\nPJu1XkQ2PMyIfgFHAjnQS9OUaVWnOVc6hg/qvjMFbeBoY/Z4gv0+KyhDIm3RxOT9\n7aMEFw6zGqgKUQfqG5BJJEjQ93D79w/598ec5hY5qNFoyt+9GKY5gqePHUWQnMZA\npJg46+f/em9wFI2skXlf2CDzhue/7w==\n=UUJy\n-----END PGP SIGNATURE-----", "payload": "tree d1f74844dd4ca01eb8c7e6647d08819595295aa6\nparent 757d7ba9c9e66320f8ff22d435ad30d6048585e1\nauthor Georg Semmler <georg_semmler_05@web.de> 1542832556 +0100\ncommitter Georg Semmler <georg_semmler_05@web.de> 1546550804 +0100\n\nAdd some tests\n\nThis copies and adjusts the existing coherence tests to ensure that\nthey continue to work using the new implementation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "html_url": "https://github.com/rust-lang/rust/commit/bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757d7ba9c9e66320f8ff22d435ad30d6048585e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/757d7ba9c9e66320f8ff22d435ad30d6048585e1", "html_url": "https://github.com/rust-lang/rust/commit/757d7ba9c9e66320f8ff22d435ad30d6048585e1"}], "stats": {"total": 3144, "additions": 3144, "deletions": 0}, "files": [{"sha": "d3d389c6a8bd52da51a2579ea7bf4c6408ee2c69", "filename": "src/test/run-pass/re_rebalance_coherence/auxiliary/coherence_copy_like_lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(fundamental)]\n+\n+pub trait MyCopy { }\n+impl MyCopy for i32 { }\n+\n+pub struct MyStruct<T>(T);\n+\n+#[fundamental]\n+pub struct MyFundamentalStruct<T>(T);"}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/run-pass/re_rebalance_coherence/auxiliary/coherence_lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Remote {\n+    fn foo(&self) { }\n+}\n+\n+pub trait Remote1<T> {\n+    fn foo(&self, t: T) { }\n+}\n+\n+pub trait Remote2<T, U> {\n+    fn foo(&self, t: T, u: U) { }\n+}\n+\n+pub struct Pair<T,U>(T,U);"}, {"sha": "c8d027b25c7486dedf9ca2aec24f832d8def828b", "filename": "src/test/run-pass/re_rebalance_coherence/auxiliary/re_rebalance_coherence_lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fauxiliary%2Fre_rebalance_coherence_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,23 @@\n+\n+pub trait Backend{}\n+pub trait SupportsDefaultKeyword {}\n+\n+impl SupportsDefaultKeyword for Postgres {}\n+\n+pub struct Postgres;\n+\n+impl Backend for Postgres {}\n+\n+pub struct AstPass<DB>(::std::marker::PhantomData<DB>);\n+\n+pub trait QueryFragment<DB: Backend> {}\n+\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct BatchInsert<'a, T: 'a, Tab> {\n+    _marker: ::std::marker::PhantomData<(&'a T, Tab)>,\n+}\n+\n+impl<'a, T:'a, Tab, DB> QueryFragment<DB> for BatchInsert<'a, T, Tab>\n+where DB: SupportsDefaultKeyword + Backend,\n+{}"}, {"sha": "c436901a34f08a8e9bd7a7f7ff7508e4c973120a", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-bigint-int.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-bigint-int.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// aux-build:coherence_lib.rs\n+\n+// pretty-expanded FIXME #23616\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote1;\n+\n+pub struct BigInt;\n+\n+impl Remote1<BigInt> for isize { }\n+\n+fn main() { }"}, {"sha": "67fb9d1d335cbf50a7a14b5397aa80949efd3a64", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-bigint-vecint.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-bigint-vecint.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// aux-build:coherence_lib.rs\n+\n+// pretty-expanded FIXME #23616\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote1;\n+\n+pub struct BigInt;\n+\n+impl Remote1<BigInt> for Vec<isize> { }\n+\n+fn main() { }"}, {"sha": "7f8f27f39b1b12e42cd1989bcf5018f1bccf580f", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-blanket.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-blanket.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(unused_imports)]\n+#![feature(re_rebalance_coherence)]\n+// aux-build:coherence_lib.rs\n+\n+// pretty-expanded FIXME #23616\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote1;\n+\n+pub trait Local {\n+    fn foo(&self) { }\n+}\n+\n+impl<T> Local for T { }\n+\n+fn main() { }"}, {"sha": "5e0d61884f91762667209d70c1d63dbeaf2e692c", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-covered-type-parameter.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-covered-type-parameter.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+// aux-build:coherence_lib.rs\n+\n+// pretty-expanded FIXME #23616\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote;\n+\n+struct Foo<T>(T);\n+\n+impl<T> Remote for Foo<T> { }\n+\n+fn main() { }"}, {"sha": "2f8cbc032f2fb00fcb710eb46382571eeb562b12", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-impl-in-fn.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-impl-in-fn.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(dead_code)]\n+#![allow(non_camel_case_types)]\n+#![feature(re_rebalance_coherence)]\n+\n+pub fn main() {\n+    #[derive(Copy, Clone)]\n+    enum x { foo }\n+    impl ::std::cmp::PartialEq for x {\n+        fn eq(&self, other: &x) -> bool {\n+            (*self) as isize == (*other) as isize\n+        }\n+        fn ne(&self, other: &x) -> bool { !(*self).eq(other) }\n+    }\n+}"}, {"sha": "b19bede74410627b186187aba8e81c8a4d198f7f", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-iterator-vec-any-elem.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-iterator-vec-any-elem.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+// aux-build:coherence_lib.rs\n+\n+// pretty-expanded FIXME #23616\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote1;\n+\n+struct Foo<T>(T);\n+\n+impl<T,U> Remote1<U> for Foo<T> { }\n+\n+fn main() { }"}, {"sha": "5ce71f5d422738a5059d80931a80671cec559fde", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-iterator-vec.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-iterator-vec.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+// aux-build:coherence_lib.rs\n+\n+// pretty-expanded FIXME #23616\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote1;\n+\n+struct Foo<T>(T);\n+\n+impl<T> Remote1<T> for Foo<T> { }\n+\n+fn main() { }"}, {"sha": "6dc1da3376b15eec3957a43a7e2fb80727372733", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-multidispatch-tuple.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-multidispatch-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-multidispatch-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-multidispatch-tuple.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(unused_imports)]\n+#![feature(re_rebalance_coherence)]\n+// pretty-expanded FIXME #23616\n+\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+// Test that an impl for homogeneous pairs does not conflict with a\n+// heterogeneous pair.\n+\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for (T,T) {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+impl MyTrait for (usize,isize) {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+fn main() {\n+}"}, {"sha": "5e1a0e39e234e7ac6a46cbf3d53a981ba49c119f", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-negative-impls-safe.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(dead_code)]\n+// pretty-expanded FIXME #23616\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+use std::marker::Send;\n+\n+struct TestType;\n+\n+impl !Send for TestType {}\n+\n+fn main() {}"}, {"sha": "651e595bde1202ca9a5598f72ed1ff35b4bbc78b", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-rfc447-constrained.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-rfc447-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-rfc447-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-rfc447-constrained.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// check that trait matching can handle impls whose types are only\n+// constrained by a projection.\n+\n+trait IsU32 {}\n+impl IsU32 for u32 {}\n+\n+trait Mirror { type Image: ?Sized; }\n+impl<T: ?Sized> Mirror for T { type Image = T; }\n+\n+trait Bar {}\n+impl<U: Mirror, V: Mirror<Image=L>, L: Mirror<Image=U>> Bar for V\n+    where U::Image: IsU32 {}\n+\n+trait Foo { fn name() -> &'static str; }\n+impl Foo for u64 { fn name() -> &'static str { \"u64\" } }\n+impl<T: Bar> Foo for T { fn name() -> &'static str { \"Bar\" }}\n+\n+fn main() {\n+    assert_eq!(<u64 as Foo>::name(), \"u64\");\n+    assert_eq!(<u32 as Foo>::name(), \"Bar\");\n+}"}, {"sha": "d9a9f580cfaf6433300860805109ca6b1bfddc2a", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-subtyping.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-subtyping.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// Test that two distinct impls which match subtypes of one another\n+// yield coherence errors (or not) depending on the variance.\n+\n+trait Contravariant {\n+    fn foo(&self) { }\n+}\n+\n+impl Contravariant for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n+}\n+\n+impl Contravariant for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+trait Covariant {\n+    fn foo(&self) { }\n+}\n+\n+impl Covariant for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n+}\n+\n+impl Covariant for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+trait Invariant {\n+    fn foo(&self) { }\n+}\n+\n+impl Invariant for for<'a,'b> fn(&'a u8, &'b u8) -> &'a u8 {\n+}\n+\n+impl Invariant for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n+}\n+\n+fn main() { }"}, {"sha": "a7d3602a3cc6bbefabae9b71cfd23511a29518cf", "filename": "src/test/run-pass/re_rebalance_coherence/coherence-where-clause.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence-where-clause.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+trait MyTrait {\n+    fn get(&self) -> Self;\n+}\n+\n+impl<T> MyTrait for T\n+    where T : Default\n+{\n+    fn get(&self) -> T {\n+        Default::default()\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+struct MyType {\n+    dummy: usize\n+}\n+\n+impl MyTrait for MyType {\n+    fn get(&self) -> MyType { (*self).clone() }\n+}\n+\n+fn test_eq<M>(m: M, n: M)\n+where M : MyTrait + Debug + PartialEq\n+{\n+    assert_eq!(m.get(), n);\n+}\n+\n+pub fn main() {\n+    test_eq(0_usize, 0_usize);\n+\n+    let value = MyType { dummy: 256 + 22 };\n+    test_eq(value, value);\n+}"}, {"sha": "221095b148e0cffab90ca81903c14f6b4ca2e341", "filename": "src/test/run-pass/re_rebalance_coherence/coherence_copy_like.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence_copy_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence_copy_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fcoherence_copy_like.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait { }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+impl MyTrait for MyType { }\n+impl<'a> MyTrait for &'a MyType { }\n+impl MyTrait for Box<MyType> { }\n+impl<'a> MyTrait for &'a Box<MyType> { }\n+\n+fn main() { }"}, {"sha": "33ad4e9753661e43a751da07236968fe7d21cb06", "filename": "src/test/run-pass/re_rebalance_coherence/re-rebalance-coherence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fre-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fre-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fre_rebalance_coherence%2Fre-rebalance-coherence.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+#![feature(re_rebalance_coherence)]\n+\n+// run-pass\n+// aux-build:re_rebalance_coherence_lib.rs\n+\n+extern crate re_rebalance_coherence_lib as lib;\n+use lib::*;\n+\n+struct Oracle;\n+impl Backend for Oracle {}\n+impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+\n+fn main() {}"}, {"sha": "c8d027b25c7486dedf9ca2aec24f832d8def828b", "filename": "src/test/ui/feature-gates/auxiliary/re_rebalance_coherence_lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fre_rebalance_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fre_rebalance_coherence_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,23 @@\n+\n+pub trait Backend{}\n+pub trait SupportsDefaultKeyword {}\n+\n+impl SupportsDefaultKeyword for Postgres {}\n+\n+pub struct Postgres;\n+\n+impl Backend for Postgres {}\n+\n+pub struct AstPass<DB>(::std::marker::PhantomData<DB>);\n+\n+pub trait QueryFragment<DB: Backend> {}\n+\n+\n+#[derive(Debug, Clone, Copy)]\n+pub struct BatchInsert<'a, T: 'a, Tab> {\n+    _marker: ::std::marker::PhantomData<(&'a T, Tab)>,\n+}\n+\n+impl<'a, T:'a, Tab, DB> QueryFragment<DB> for BatchInsert<'a, T, Tab>\n+where DB: SupportsDefaultKeyword + Backend,\n+{}"}, {"sha": "7031e6061edd338b314fa78a09b2c13f16805176", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+// Test that the use of the box syntax is gated by `box_syntax` feature gate.\n+\n+// aux-build:re_rebalance_coherence_lib.rs\n+\n+extern crate re_rebalance_coherence_lib as lib;\n+use lib::*;\n+\n+struct Oracle;\n+impl Backend for Oracle {}\n+impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+// ~^ ERROR E0210\n+\n+fn main() {}"}, {"sha": "7a79d0b1f2a636be64030e68a9e17cd6d705b409", "filename": "src/test/ui/feature-gates/feature-gate-re-rebalance-coherence.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-re-rebalance-coherence.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct<T>`)\n+  --> $DIR/feature-gate-re-rebalance-coherence.rs:10:1\n+   |\n+LL | impl<'a, T:'a, Tab> QueryFragment<Oracle> for BatchInsert<'a, T, Tab> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "d3d389c6a8bd52da51a2579ea7bf4c6408ee2c69", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_copy_like_lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_copy_like_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+#![feature(fundamental)]\n+\n+pub trait MyCopy { }\n+impl MyCopy for i32 { }\n+\n+pub struct MyStruct<T>(T);\n+\n+#[fundamental]\n+pub struct MyFundamentalStruct<T>(T);"}, {"sha": "0458636a401ef5be00402a224e8dd09c6673ae5d", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_inherent_cc_lib.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_inherent_cc_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_inherent_cc_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_inherent_cc_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// See coherence_inherent_cc.rs\n+\n+pub trait TheTrait {\n+    fn the_fn(&self);\n+}\n+\n+pub struct TheStruct;\n+\n+impl TheTrait for TheStruct {\n+    fn the_fn(&self) {}\n+}"}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Remote {\n+    fn foo(&self) { }\n+}\n+\n+pub trait Remote1<T> {\n+    fn foo(&self, t: T) { }\n+}\n+\n+pub trait Remote2<T, U> {\n+    fn foo(&self, t: T, u: U) { }\n+}\n+\n+pub struct Pair<T,U>(T,U);"}, {"sha": "b22d12300c7d1297a05884baba7349503dc7923a", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/coherence_orphan_lib.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_orphan_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_orphan_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fcoherence_orphan_lib.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait TheTrait<T> {\n+    fn the_fn(&self);\n+}"}, {"sha": "044bb606b40e224b15a0dd6766a72f4e1fec9155", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/go_trait.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fgo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fgo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Fgo_trait.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Common code used for tests that model the Fn/FnMut/FnOnce hierarchy.\n+\n+pub trait Go {\n+    fn go(&self, arg: isize);\n+}\n+\n+pub fn go<G:Go>(this: &G, arg: isize) {\n+    this.go(arg)\n+}\n+\n+pub trait GoMut {\n+    fn go_mut(&mut self, arg: isize);\n+}\n+\n+pub fn go_mut<G:GoMut>(this: &mut G, arg: isize) {\n+    this.go_mut(arg)\n+}\n+\n+pub trait GoOnce {\n+    fn go_once(self, arg: isize);\n+}\n+\n+pub fn go_once<G:GoOnce>(this: G, arg: isize) {\n+    this.go_once(arg)\n+}\n+\n+impl<G> GoMut for G\n+    where G : Go\n+{\n+    default fn go_mut(&mut self, arg: isize) {\n+        go(&*self, arg)\n+    }\n+}\n+\n+impl<G> GoOnce for G\n+    where G : GoMut\n+{\n+    default fn go_once(mut self, arg: isize) {\n+        go_mut(&mut self, arg)\n+    }\n+}"}, {"sha": "3190ce430ad67ca41fc32553745bc6b016e52678", "filename": "src/test/ui/re_rebalance_coherence/auxiliary/trait_impl_conflict.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    fn foo() {}\n+}\n+\n+impl Foo for isize {\n+}"}, {"sha": "0769518b36beba5806336033f5aab4b7df9f15ac", "filename": "src/test/ui/re_rebalance_coherence/coherence-all-remote.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence_lib.rs\n+\n+#![feature(re_rebalance_coherence)]\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote1;\n+\n+impl<T> Remote1<T> for isize { }\n+//~^ ERROR E0210\n+\n+fn main() { }"}, {"sha": "a6d5105cdc0ea25866c8b1e4778594d817e79be9", "filename": "src/test/ui/re_rebalance_coherence/coherence-all-remote.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-all-remote.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct<T>`)\n+  --> $DIR/coherence-all-remote.rs:18:1\n+   |\n+LL | impl<T> Remote1<T> for isize { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "712fe9bdb4c758d2c8fdea6fd0c247c4fd7440dd", "filename": "src/test/ui/re_rebalance_coherence/coherence-bigint-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote1;\n+\n+pub struct BigInt;\n+\n+impl<T> Remote1<BigInt> for T { }\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+\n+fn main() { }"}, {"sha": "ed1540a303e689646179f01f5aff8227c2b163bd", "filename": "src/test/ui/re_rebalance_coherence/coherence-bigint-param.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-bigint-param.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct<T>`)\n+  --> $DIR/coherence-bigint-param.rs:20:1\n+   |\n+LL | impl<T> Remote1<BigInt> for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "da0221c3e0af1ba2399f55738fcfedbac7271fcb", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+// Test that two blanket impls conflict (at least without negative\n+// bounds).  After all, some other crate could implement Even or Odd\n+// for the same type (though this crate doesn't).\n+\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+trait Even { }\n+\n+trait Odd { }\n+\n+impl Even for isize { }\n+\n+impl Odd for usize { }\n+\n+impl<T:Even> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+fn main() { }"}, {"sha": "8d5d4787780751cd5ebabc910a86432e7f14c2d7", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-implemented.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:36:1\n+   |\n+LL | impl<T:Even> MyTrait for T {\n+   | -------------------------- first implementation here\n+...\n+LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "5e407588e2aff126958876423304bd7b627fc7ec", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+// Test that two blanket impls conflict (at least without negative\n+// bounds).  After all, some other crate could implement Even or Odd\n+// for the same type (though this crate doesn't implement them at all).\n+\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+trait Even {}\n+\n+trait Odd {}\n+\n+impl<T:Even> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+fn main() { }"}, {"sha": "6e7df5e6ed3bf47c83ec7737634ce12120803bd6", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-blanket-unimplemented.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:32:1\n+   |\n+LL | impl<T:Even> MyTrait for T {\n+   | -------------------------- first implementation here\n+...\n+LL | impl<T:Odd> MyTrait for T { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "9d1caf929222e9ae5b061e91b2fffe53fff896e9", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// aux-build:go_trait.rs\n+\n+extern crate go_trait;\n+\n+use go_trait::{Go,GoMut};\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+struct MyThingy;\n+\n+impl Go for MyThingy {\n+    fn go(&self, arg: isize) { }\n+}\n+\n+impl GoMut for MyThingy { //~ ERROR conflicting implementations\n+    fn go_mut(&mut self, arg: isize) { }\n+}\n+\n+fn main() { }"}, {"sha": "30656fa41b4f84f133f1f98e2948131c843a7041", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:27:1\n+   |\n+LL | impl GoMut for MyThingy { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `go_trait`:\n+           - impl<G> go_trait::GoMut for G\n+             where G: go_trait::Go;\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "f866465bd081d1c5bb267bdd713638d2921295a7", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+// Test that a blank impl for all T conflicts with an impl for some\n+// specific T, even when there are multiple type parameters involved.\n+\n+trait MyTrait<T> {\n+    fn get(&self) -> T;\n+}\n+\n+impl<T> MyTrait<T> for T {\n+    fn get(&self) -> T {\n+        panic!()\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct MyType {\n+    dummy: usize\n+}\n+\n+impl MyTrait<MyType> for MyType { //~ ERROR E0119\n+    fn get(&self) -> usize { (*self).clone() }\n+}\n+\n+fn main() { }"}, {"sha": "f68e1fd94f0c20e49cbc9aead357c9abb2db8e2e", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-multidispatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:34:1\n+   |\n+LL | impl<T> MyTrait<T> for T {\n+   | ------------------------ first implementation here\n+...\n+LL | impl MyTrait<MyType> for MyType { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "74b458b838e04d2167e91ff1193d8ed895d49535", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-trait.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that a blank impl for all T:PartialEq conflicts with an impl for some\n+// specific T when T:PartialEq.\n+\n+trait OtherTrait {\n+    fn noop(&self);\n+}\n+\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T:OtherTrait> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct MyType {\n+    dummy: usize\n+}\n+\n+impl MyTrait for MyType { //~ ERROR E0119\n+    fn get(&self) -> usize { self.dummy }\n+}\n+\n+impl OtherTrait for MyType {\n+    fn noop(&self) { }\n+}\n+\n+fn main() { }"}, {"sha": "bafeadcfcbefbb7e67f35d55daf58042620a94eb", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific-trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:32:1\n+   |\n+LL | impl<T:OtherTrait> MyTrait for T {\n+   | -------------------------------- first implementation here\n+...\n+LL | impl MyTrait for MyType { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "51de0e33034c87ae1c22dc15e32ab3bbe7d43a32", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+// Test that a blank impl for all T conflicts with an impl for some\n+// specific T.\n+\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct MyType {\n+    dummy: usize\n+}\n+\n+impl MyTrait for MyType { //~ ERROR E0119\n+    fn get(&self) -> usize { self.dummy }\n+}\n+\n+fn main() { }"}, {"sha": "efc32d1236402af15abc5171c65a507d963bdeb3", "filename": "src/test/ui/re_rebalance_coherence/coherence-blanket-conflicts-with-specific.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-blanket-conflicts-with-specific.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+  --> $DIR/coherence-blanket-conflicts-with-specific.rs:31:1\n+   |\n+LL | impl<T> MyTrait for T {\n+   | --------------------- first implementation here\n+...\n+LL | impl MyTrait for MyType { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "c2db97c68e8ec605a39485ee908a8bbf8bb66032", "filename": "src/test/ui/re_rebalance_coherence/coherence-conflicting-negative-trait-impl.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(overlapping_marker_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+trait MyTrait {}\n+\n+struct TestType<T>(::std::marker::PhantomData<T>);\n+\n+unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n+\n+impl<T: MyTrait> !Send for TestType<T> {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Send`\n+\n+unsafe impl<T:'static> Send for TestType<T> {}\n+\n+impl !Send for TestType<i32> {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Send`\n+\n+fn main() {}"}, {"sha": "7555e9996cf29b2560256590281aa426675184bd", "filename": "src/test/ui/re_rebalance_coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:21:1\n+   |\n+LL | unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n+   | ---------------------------------------------------- first implementation here\n+LL | \n+LL | impl<T: MyTrait> !Send for TestType<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<i32>`:\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:26:1\n+   |\n+LL | unsafe impl<T:'static> Send for TestType<T> {}\n+   | ------------------------------------------- first implementation here\n+LL | \n+LL | impl !Send for TestType<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<i32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "09cc9801c14a1954878245e21c5b5ccfe6480b54", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.a.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.a.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:28:1\n+   |\n+LL | impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "7bb8378ee4ba8b480e52281aec9b9f1030fe9e8c", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.b.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.b.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:31:1\n+   |\n+LL | impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "6dbf0a44f02b87175c0b08445863c29657947706", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.c.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.c.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-cow.rs:34:1\n+   |\n+LL | impl<T,U> Remote for Pair<Cover<T>,U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "da69d56a25a56dce1792d751fc3f356bee97f0fb", "filename": "src/test/ui/re_rebalance_coherence/coherence-cow.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cow.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// revisions: a b c\n+\n+// aux-build:coherence_lib.rs\n+\n+// Test that the `Pair` type reports an error if it contains type\n+// parameters, even when they are covered by local types. This test\n+// was originally intended to test the opposite, but the rules changed\n+// with RFC 1023 and this became illegal.\n+\n+extern crate coherence_lib as lib;\n+use lib::{Remote,Pair};\n+\n+pub struct Cover<T>(T);\n+\n+#[cfg(a)]\n+impl<T> Remote for Pair<T,Cover<T>> { } //[a]~ ERROR E0117\n+\n+#[cfg(b)]\n+impl<T> Remote for Pair<Cover<T>,T> { } //[b]~ ERROR E0117\n+\n+#[cfg(c)]\n+impl<T,U> Remote for Pair<Cover<T>,U> { }\n+//[c]~^ ERROR E0117\n+\n+fn main() { }"}, {"sha": "02624c70dc9d871561b66e69347e1834a3085a56", "filename": "src/test/ui/re_rebalance_coherence/coherence-cross-crate-conflict.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// The error here is strictly due to orphan rules; the impl here\n+// generalizes the one upstream\n+\n+// aux-build:trait_impl_conflict.rs\n+extern crate trait_impl_conflict;\n+use trait_impl_conflict::Foo;\n+\n+impl<A> Foo for A {\n+    //~^ ERROR type parameter `A` must be used as the type parameter for some local type\n+    //~| ERROR conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n+}\n+\n+fn main() {\n+}"}, {"sha": "e4f8ba9868e4e5038aff14e73f59020804261145", "filename": "src/test/ui/re_rebalance_coherence/coherence-cross-crate-conflict.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-cross-crate-conflict.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n+  --> $DIR/coherence-cross-crate-conflict.rs:20:1\n+   |\n+LL | impl<A> Foo for A {\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `trait_impl_conflict`:\n+           - impl trait_impl_conflict::Foo for isize;\n+\n+error[E0210]: type parameter `A` must be used as the type parameter for some local type (e.g. `MyStruct<A>`)\n+  --> $DIR/coherence-cross-crate-conflict.rs:20:1\n+   |\n+LL | impl<A> Foo for A {\n+   | ^^^^^^^^^^^^^^^^^ type parameter `A` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0119, E0210.\n+For more information about an error, try `rustc --explain E0119`."}, {"sha": "86dd0e4f74fbda2b6a12e5c9cdd890f5e230ddef", "filename": "src/test/ui/re_rebalance_coherence/coherence-default-trait-impl.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+auto trait MySafeTrait {}\n+\n+struct Foo;\n+\n+unsafe impl MySafeTrait for Foo {}\n+//~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n+\n+unsafe auto trait MyUnsafeTrait {}\n+\n+impl MyUnsafeTrait for Foo {}\n+//~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+\n+fn main() {}"}, {"sha": "6c3d79cf53c1ce6a5bd87e4ea4dc2f4d2f7a82d8", "filename": "src/test/ui/re_rebalance_coherence/coherence-default-trait-impl.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-default-trait-impl.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,16 @@\n+error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n+  --> $DIR/coherence-default-trait-impl.rs:18:1\n+   |\n+LL | unsafe impl MySafeTrait for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+  --> $DIR/coherence-default-trait-impl.rs:23:1\n+   |\n+LL | impl MyUnsafeTrait for Foo {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0199, E0200.\n+For more information about an error, try `rustc --explain E0199`."}, {"sha": "24df1a1ee01f844a8f2acd617509ffaf48c53d62", "filename": "src/test/ui/re_rebalance_coherence/coherence-error-suppression.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// check that error types in coherence do not cause error cascades.\n+\n+trait Foo {}\n+\n+impl Foo for i8 {}\n+impl Foo for i16 {}\n+impl Foo for i32 {}\n+impl Foo for i64 {}\n+impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+impl Foo for u8 {}\n+impl Foo for u16 {}\n+impl Foo for u32 {}\n+impl Foo for u64 {}\n+\n+fn main() {}"}, {"sha": "97ed46c71bd53f2928a3dc5aa6c1e65b39a67647", "filename": "src/test/ui/re_rebalance_coherence/coherence-error-suppression.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-error-suppression.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `DoesNotExist` in this scope\n+  --> $DIR/coherence-error-suppression.rs:21:14\n+   |\n+LL | impl Foo for DoesNotExist {} //~ ERROR cannot find type `DoesNotExist` in this scope\n+   |              ^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "9e9a00af903dd6c901d298eabbf463c4df4f00d0", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait-object-safe.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that we give suitable error messages when the user attempts to\n+// impl a trait `Trait` for its own object type.\n+\n+// If the trait is not object-safe, we give a more tailored message\n+// because we're such schnuckels:\n+trait NotObjectSafe { fn eq(&self, other: Self); }\n+impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n+\n+fn main() { }"}, {"sha": "0f4f33e4eb9a8167cc9cedc3edc27b3699ad898d", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:19:6\n+   |\n+LL | impl NotObjectSafe for NotObjectSafe { } //~ ERROR E0038\n+   |      ^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |\n+   = note: method `eq` references the `Self` type in its arguments or return type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "0ed88058f1fb09c725fabcf6c6cf690b2fed6480", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that we give suitable error messages when the user attempts to\n+// impl a trait `Trait` for its own object type.\n+\n+trait Foo { fn dummy(&self) { } }\n+trait Bar: Foo { }\n+trait Baz: Bar { }\n+\n+// Supertraits of Baz are not legal:\n+impl Foo for Baz { }   //~ ERROR E0371\n+impl Bar for Baz { }   //~ ERROR E0371\n+impl Baz for Baz { }   //~ ERROR E0371\n+\n+// But other random traits are:\n+trait Other { }\n+impl Other for Baz { } // OK, Other not a supertrait of Baz\n+\n+fn main() { }"}, {"sha": "d529e86f8fc012e14b06b79446fcb59eed78005d", "filename": "src/test/ui/re_rebalance_coherence/coherence-impl-trait-for-trait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impl-trait-for-trait.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Foo`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:21:1\n+   |\n+LL | impl Foo for Baz { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Foo`\n+\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Bar`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:22:1\n+   |\n+LL | impl Bar for Baz { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Bar`\n+\n+error[E0371]: the object type `(dyn Baz + 'static)` automatically implements the trait `Baz`\n+  --> $DIR/coherence-impl-trait-for-trait.rs:23:1\n+   |\n+LL | impl Baz for Baz { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^ `(dyn Baz + 'static)` automatically implements trait `Baz`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0371`."}, {"sha": "9f58d13efc2a4d0051069f859d64b21b8250b7c1", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-copy.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+use std::marker::Copy;\n+\n+impl Copy for i32 {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+\n+enum TestE {\n+  A\n+}\n+\n+struct MyType;\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+impl Copy for TestE {}\n+impl Clone for TestE { fn clone(&self) -> Self { *self } }\n+\n+impl Copy for MyType {}\n+\n+impl Copy for &'static mut MyType {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+impl Clone for MyType { fn clone(&self) -> Self { *self } }\n+\n+impl Copy for (MyType, MyType) {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+\n+impl Copy for &'static NotSync {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+\n+impl Copy for [MyType] {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+\n+impl Copy for &'static [NotSync] {}\n+//~^ ERROR conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n+\n+fn main() {\n+}"}, {"sha": "80e2d203aaaab988258b529b5314093927ad5927", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-copy.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-copy.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,87 @@\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+  --> $DIR/coherence-impls-copy.rs:16:1\n+   |\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl std::marker::Copy for i32;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+  --> $DIR/coherence-impls-copy.rs:42:1\n+   |\n+LL | impl Copy for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::marker::Copy for &T\n+             where T: ?Sized;\n+\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+  --> $DIR/coherence-impls-copy.rs:49:1\n+   |\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::marker::Copy for &T\n+             where T: ?Sized;\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:34:15\n+   |\n+LL | impl Copy for &'static mut MyType {}\n+   |               ^^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:38:15\n+   |\n+LL | impl Copy for (MyType, MyType) {}\n+   |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0206]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/coherence-impls-copy.rs:45:15\n+   |\n+LL | impl Copy for [MyType] {}\n+   |               ^^^^^^^^ type is not a structure or enumeration\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:16:1\n+   |\n+LL | impl Copy for i32 {}\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:38:1\n+   |\n+LL | impl Copy for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:45:1\n+   |\n+LL | impl Copy for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-copy.rs:49:1\n+   |\n+LL | impl Copy for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors occurred: E0117, E0119, E0206.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "11b92d5254c440136ec6b23ceaca929eb5bf560f", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-send.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(overlapping_marker_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+use std::marker::Copy;\n+\n+enum TestE {\n+  A\n+}\n+\n+struct MyType;\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+unsafe impl Send for TestE {}\n+unsafe impl Send for MyType {}\n+unsafe impl Send for (MyType, MyType) {}\n+//~^ ERROR E0117\n+\n+unsafe impl Send for &'static NotSync {}\n+//~^ ERROR E0321\n+\n+unsafe impl Send for [MyType] {}\n+//~^ ERROR E0117\n+\n+unsafe impl Send for &'static [NotSync] {}\n+//~^ ERROR E0117\n+\n+fn main() {\n+}"}, {"sha": "8f09deeeb930304996167110cd920ceb7a30528c", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-send.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-send.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,37 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:28:1\n+   |\n+LL | unsafe impl Send for (MyType, MyType) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static NotSync`\n+  --> $DIR/coherence-impls-send.rs:31:1\n+   |\n+LL | unsafe impl Send for &'static NotSync {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:34:1\n+   |\n+LL | unsafe impl Send for [MyType] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-send.rs:37:1\n+   |\n+LL | unsafe impl Send for &'static [NotSync] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0117, E0321.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "3f7970f34fc5e53ad708c904100e8bce786cdfee", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-sized.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+use std::marker::Copy;\n+\n+enum TestE {\n+  A\n+}\n+\n+struct MyType;\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+impl Sized for TestE {} //~ ERROR E0322\n+//~^ impl of 'Sized' not allowed\n+\n+impl Sized for MyType {} //~ ERROR E0322\n+//~^ impl of 'Sized' not allowed\n+\n+impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+//~^ impl of 'Sized' not allowed\n+//~| ERROR E0117\n+\n+impl Sized for &'static NotSync {} //~ ERROR E0322\n+//~^ impl of 'Sized' not allowed\n+\n+impl Sized for [MyType] {} //~ ERROR E0322\n+//~^ impl of 'Sized' not allowed\n+//~| ERROR E0117\n+\n+impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+//~^ impl of 'Sized' not allowed\n+//~| ERROR E0117\n+\n+fn main() {\n+}"}, {"sha": "92b165bdc3b74d4e4fddb267968b765ff349ad94", "filename": "src/test/ui/re_rebalance_coherence/coherence-impls-sized.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-impls-sized.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,67 @@\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:25:1\n+   |\n+LL | impl Sized for TestE {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:28:1\n+   |\n+LL | impl Sized for MyType {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:31:1\n+   |\n+LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:35:1\n+   |\n+LL | impl Sized for &'static NotSync {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:38:1\n+   |\n+LL | impl Sized for [MyType] {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0322]: explicit impls for the `Sized` trait are not permitted\n+  --> $DIR/coherence-impls-sized.rs:42:1\n+   |\n+LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'Sized' not allowed\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:31:1\n+   |\n+LL | impl Sized for (MyType, MyType) {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:38:1\n+   |\n+LL | impl Sized for [MyType] {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impls-sized.rs:42:1\n+   |\n+LL | impl Sized for &'static [NotSync] {} //~ ERROR E0322\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors occurred: E0117, E0322.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "a2cfb11fdc2344ff6ca91b08bcf74c692c52d4d4", "filename": "src/test/ui/re_rebalance_coherence/coherence-inherited-assoc-ty-cycle-err.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Formerly this ICEd with the following message:\n+// Tried to project an inherited associated type during coherence checking,\n+// which is currently not supported.\n+//\n+// No we expect to run into a more user-friendly cycle error instead.\n+\n+#![feature(specialization)]\n+#![feature(re_rebalance_coherence)]\n+\n+trait Trait<T> { type Assoc; }\n+//~^ cycle detected\n+\n+impl<T> Trait<T> for Vec<T> {\n+    type Assoc = ();\n+}\n+\n+impl Trait<u8> for Vec<u8> {}\n+\n+impl<T> Trait<T> for String {\n+    type Assoc = ();\n+}\n+\n+impl Trait<<Vec<u8> as Trait<u8>>::Assoc> for String {}\n+\n+fn main() {}"}, {"sha": "aca2d64b6231b9b5352b33bf32c7bc187e5265ba", "filename": "src/test/ui/re_rebalance_coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,16 @@\n+error[E0391]: cycle detected when processing `Trait`\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:20:1\n+   |\n+LL | trait Trait<T> { type Assoc; }\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: ...which again requires processing `Trait`, completing the cycle\n+note: cycle used when coherence checking all impls of trait `Trait`\n+  --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:20:1\n+   |\n+LL | trait Trait<T> { type Assoc; }\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "8d3551beb5fcd70752afcb00e0d09dc65fcd77b6", "filename": "src/test/ui/re_rebalance_coherence/coherence-lone-type-parameter.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote;\n+\n+impl<T> Remote for T { }\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+\n+fn main() { }"}, {"sha": "60ec7fb67defe13724b8e864c1f83196acade321", "filename": "src/test/ui/re_rebalance_coherence/coherence-lone-type-parameter.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-lone-type-parameter.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,11 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct<T>`)\n+  --> $DIR/coherence-lone-type-parameter.rs:18:1\n+   |\n+LL | impl<T> Remote for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0210`."}, {"sha": "40f7ebfd25025cbd28b6070b4707c65b799e3a1a", "filename": "src/test/ui/re_rebalance_coherence/coherence-negative-impls-safe.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+use std::marker::Send;\n+\n+struct TestType;\n+\n+unsafe impl !Send for TestType {}\n+//~^ ERROR negative impls cannot be unsafe\n+\n+fn main() {}"}, {"sha": "70a879efa27c380336196a67d76f6f7c8a56016a", "filename": "src/test/ui/re_rebalance_coherence/coherence-negative-impls-safe.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-negative-impls-safe.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,9 @@\n+error[E0198]: negative impls cannot be unsafe\n+  --> $DIR/coherence-negative-impls-safe.rs:18:1\n+   |\n+LL | unsafe impl !Send for TestType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0198`."}, {"sha": "838bc71d3afeb8449bb75998f3a218cebbd8a089", "filename": "src/test/ui/re_rebalance_coherence/coherence-no-direct-lifetime-dispatch.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that you cannot *directly* dispatch on lifetime requirements\n+\n+trait MyTrait { fn foo() {} }\n+\n+impl<T> MyTrait for T {}\n+impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n+\n+fn main() {}"}, {"sha": "aa6427ba24f957691044759e31177f62c33503bb", "filename": "src/test/ui/re_rebalance_coherence/coherence-no-direct-lifetime-dispatch.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-no-direct-lifetime-dispatch.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/coherence-no-direct-lifetime-dispatch.rs:18:1\n+   |\n+LL | impl<T> MyTrait for T {}\n+   | --------------------- first implementation here\n+LL | impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "dbe26a8898d4dd09bc8bc1779bb66b320f2fb75f", "filename": "src/test/ui/re_rebalance_coherence/coherence-orphan.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence_orphan_lib.rs\n+\n+#![feature(optin_builtin_traits)]\n+#![feature(re_rebalance_coherence)]\n+\n+extern crate coherence_orphan_lib as lib;\n+\n+use lib::TheTrait;\n+\n+struct TheType;\n+\n+impl TheTrait<usize> for isize { }\n+//~^ ERROR E0117\n+\n+impl TheTrait<TheType> for isize { }\n+\n+impl TheTrait<isize> for TheType { }\n+\n+impl !Send for Vec<isize> { }\n+//~^ ERROR E0117\n+\n+fn main() { }"}, {"sha": "6e5e734401f4105d653f32fbd94d6fa8f3763f69", "filename": "src/test/ui/re_rebalance_coherence/coherence-orphan.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-orphan.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-orphan.rs:22:1\n+   |\n+LL | impl TheTrait<usize> for isize { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-orphan.rs:29:1\n+   |\n+LL | impl !Send for Vec<isize> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "13604d9e4952a04162fd442657f632bb7ad8582b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-all-t-and-tuple.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Check that we detect an overlap here in the case where:\n+//\n+//    for some type X:\n+//      T = (X,)\n+//      T11 = X, U11 = X\n+//\n+// Seems pretty basic, but then there was issue #24241. :)\n+\n+trait From<U> {\n+    fn foo() {}\n+}\n+\n+impl <T> From<T> for T {\n+}\n+\n+impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n+}\n+\n+fn main() { }"}, {"sha": "dc052931ed14e4b6a6858e14c97f3e092f7e0c92", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-all-t-and-tuple.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-all-t-and-tuple.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n+  --> $DIR/coherence-overlap-all-t-and-tuple.rs:28:1\n+   |\n+LL | impl <T> From<T> for T {\n+   | ---------------------- first implementation here\n+...\n+LL | impl <T11, U11> From<(U11,)> for (T11,) { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_,)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "1f0ca50b60fca2563349ddb8542ae5b74471942e", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream-inherent.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n+// though no impls are found.\n+\n+struct Sweet<X>(X);\n+pub trait Sugar {}\n+pub trait Fruit {}\n+impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n+//~^ ERROR E0592\n+impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+\n+trait Bar<X> {}\n+struct A<T, X>(T, X);\n+impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+//~^ ERROR E0592\n+impl<X> A<i32, X> { fn f(&self) {} }\n+\n+fn main() {}"}, {"sha": "8a817fcb440676c8408b60e69ed6e0e964bb373d", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream-inherent.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream-inherent.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,23 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:19:26\n+   |\n+LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n+   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+LL | //~^ ERROR E0592\n+LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n+   |                          ------------------- other definition for `dummy`\n+\n+error[E0592]: duplicate definitions with name `f`\n+  --> $DIR/coherence-overlap-downstream-inherent.rs:25:38\n+   |\n+LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n+   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n+LL | //~^ ERROR E0592\n+LL | impl<X> A<i32, X> { fn f(&self) {} }\n+   |                     -------------- other definition for `f`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "7a2b28f49b549eebe980ce327081d10c9dbcb84b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Tests that we consider `T: Sugar + Fruit` to be ambiguous, even\n+// though no impls are found.\n+\n+pub trait Sugar {}\n+pub trait Fruit {}\n+pub trait Sweet {}\n+impl<T:Sugar> Sweet for T { }\n+impl<T:Fruit> Sweet for T { }\n+//~^ ERROR E0119\n+\n+pub trait Foo<X> {}\n+pub trait Bar<X> {}\n+impl<X, T> Foo<X> for T where T: Bar<X> {}\n+impl<X> Foo<X> for i32 {}\n+//~^ ERROR E0119\n+\n+fn main() { }"}, {"sha": "ce08ae15df1315113700e4bab2aeb91fd50bcb92", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-downstream.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-downstream.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,21 @@\n+error[E0119]: conflicting implementations of trait `Sweet`:\n+  --> $DIR/coherence-overlap-downstream.rs:20:1\n+   |\n+LL | impl<T:Sugar> Sweet for T { }\n+   | ------------------------- first implementation here\n+LL | impl<T:Fruit> Sweet for T { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n+  --> $DIR/coherence-overlap-downstream.rs:26:1\n+   |\n+LL | impl<X, T> Foo<X> for T where T: Bar<X> {}\n+   | --------------------------------------- first implementation here\n+LL | impl<X> Foo<X> for i32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: downstream crates may implement trait `Bar<_>` for type `i32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "ff6af49dfb2ef5e533be853b1d6f5160c0d8438b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516-inherent.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Tests that we consider `Box<U>: !Sugar` to be ambiguous, even\n+// though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n+// error is reported for the following pair of impls (#23516).\n+\n+pub trait Sugar {}\n+\n+struct Cake<X>(X);\n+\n+impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n+//~^ ERROR E0592\n+impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+\n+fn main() { }"}, {"sha": "26b59fbe71bd7be326f82629f3512aef8aaa3b1d", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516-inherent.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-issue-23516-inherent.rs:21:25\n+   |\n+LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n+   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+LL | //~^ ERROR E0592\n+LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n+   |                              ------------------- other definition for `dummy`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "2e45572e4eccd7ff6999a2369fd5794a944a0771", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Tests that we consider `Box<U>: !Sugar` to be ambiguous, even\n+// though we see no impl of `Sugar` for `Box`. Therefore, an overlap\n+// error is reported for the following pair of impls (#23516).\n+\n+pub trait Sugar { fn dummy(&self) { } }\n+pub trait Sweet { fn dummy(&self) { } }\n+impl<T:Sugar> Sweet for T { }\n+impl<U:Sugar> Sweet for Box<U> { }\n+//~^ ERROR E0119\n+\n+fn main() { }"}, {"sha": "9d3d564b8a91cbcd534d01e0d7111bfc81cc980b", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-issue-23516.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-issue-23516.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n+  --> $DIR/coherence-overlap-issue-23516.rs:20:1\n+   |\n+LL | impl<T:Sugar> Sweet for T { }\n+   | ------------------------- first implementation here\n+LL | impl<U:Sugar> Sweet for Box<U> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   |\n+   = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "1474fbd700c7706891faa00ddb4f9da535b4b166", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-messages.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+trait Foo { fn foo() {} }\n+\n+impl<T> Foo for T {}\n+impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n+\n+trait Bar { fn bar() {} }\n+\n+impl<T> Bar for (T, u8) {}\n+impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+\n+trait Baz<T> { fn baz() {} }\n+\n+impl<T> Baz<u8> for T {}\n+impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+\n+trait Quux<U, V> { fn quux() {} }\n+\n+impl<T, U, V> Quux<U, V> for T {}\n+impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+\n+fn main() {}"}, {"sha": "c7b24e7bf6dee452f0a8e9c9eb704ae2d096b959", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-messages.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-messages.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,44 @@\n+error[E0119]: conflicting implementations of trait `Foo`:\n+  --> $DIR/coherence-overlap-messages.rs:16:1\n+   |\n+LL | impl<T> Foo for T {}\n+   | ----------------- first implementation here\n+LL | impl<U> Foo for U {} //~ ERROR conflicting implementations of trait `Foo`:\n+   | ^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+  --> $DIR/coherence-overlap-messages.rs:21:1\n+   |\n+LL | impl<T> Bar for (T, u8) {}\n+   | ----------------------- first implementation here\n+LL | impl<T> Bar for (u8, T) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n+\n+error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n+  --> $DIR/coherence-overlap-messages.rs:26:1\n+   |\n+LL | impl<T> Baz<u8> for T {}\n+   | --------------------- first implementation here\n+LL | impl<T> Baz<T> for u8 {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n+   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n+\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+  --> $DIR/coherence-overlap-messages.rs:31:1\n+   |\n+LL | impl<T, U, V> Quux<U, V> for T {}\n+   | ------------------------------ first implementation here\n+LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+  --> $DIR/coherence-overlap-messages.rs:32:1\n+   |\n+LL | impl<T, U, V> Quux<U, V> for T {}\n+   | ------------------------------ first implementation here\n+LL | impl<T, U> Quux<U, U> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+LL | impl<T, V> Quux<T, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "e802c0113ad82b5e3f0d60558b88de23180b24db", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream-inherent.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Tests that we consider `i16: Remote` to be ambiguous, even\n+// though the upstream crate doesn't implement it for now.\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib;\n+\n+use coherence_lib::Remote;\n+\n+struct A<X>(X);\n+impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n+//~^ ERROR E0592\n+impl A<i16> { fn dummy(&self) { } }\n+\n+fn main() {}"}, {"sha": "70b19ddb429a5703f82213a6a274b5e2a32fd2f8", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream-inherent.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream-inherent.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,14 @@\n+error[E0592]: duplicate definitions with name `dummy`\n+  --> $DIR/coherence-overlap-upstream-inherent.rs:23:32\n+   |\n+LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n+   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+LL | //~^ ERROR E0592\n+LL | impl A<i16> { fn dummy(&self) { } }\n+   |               ------------------- other definition for `dummy`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "afbc69cac330fb800dedbf978a092dfb93c4cd41", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Tests that we consider `i16: Remote` to be ambiguous, even\n+// though the upstream crate doesn't implement it for now.\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib;\n+\n+use coherence_lib::Remote;\n+\n+trait Foo {}\n+impl<T> Foo for T where T: Remote {}\n+impl Foo for i16 {}\n+//~^ ERROR E0119\n+\n+fn main() {}"}, {"sha": "88bea02b3481651368ed2b77e7606bc789c5389c", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlap-upstream.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlap-upstream.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n+  --> $DIR/coherence-overlap-upstream.rs:24:1\n+   |\n+LL | impl<T> Foo for T where T: Remote {}\n+   | --------------------------------- first implementation here\n+LL | impl Foo for i16 {}\n+   | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n+   |\n+   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "25d8e3197f42a9b897e949a943b0eae12f5c1058", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlapping-pairs.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote;\n+\n+struct Foo;\n+\n+impl<T> Remote for lib::Pair<T,Foo> { }\n+//~^ ERROR E0117\n+\n+fn main() { }"}, {"sha": "2629a017b7933708c86fd82420c005d63c046b38", "filename": "src/test/ui/re_rebalance_coherence/coherence-overlapping-pairs.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-overlapping-pairs.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-overlapping-pairs.rs:20:1\n+   |\n+LL | impl<T> Remote for lib::Pair<T,Foo> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "4edfd5e122704b9ce753411162b36e238fb58768", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered-1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that the same coverage rules apply even if the local type appears in the\n+// list of type parameters, not the self type.\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::{Remote1, Pair};\n+\n+pub struct Local<T>(T);\n+\n+impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n+\n+fn main() { }"}, {"sha": "197056746b9c54b42870543fc9fb4cae683f865d", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered-1.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-pair-covered-uncovered-1.rs:23:1\n+   |\n+LL | impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "9b0d7177ffcce66cf5688c171d4a7605f6bfa712", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::{Remote, Pair};\n+\n+struct Local<T>(T);\n+\n+impl<T,U> Remote for Pair<T,Local<U>> { }\n+//~^ ERROR E0117\n+\n+fn main() { }"}, {"sha": "b9e2eced94b18a84c11b902734a65718a62a97a1", "filename": "src/test/ui/re_rebalance_coherence/coherence-pair-covered-uncovered.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-pair-covered-uncovered.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-pair-covered-uncovered.rs:20:1\n+   |\n+LL | impl<T,U> Remote for Pair<T,Local<U>> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "e3f945504feba4a6a81e559779a30e82b52a0307", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-orphan.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![feature(re_rebalance_coherence)]\n+\n+// Here we expect a coherence conflict because, even though `i32` does\n+// not implement `Iterator`, we cannot rely on that negative reasoning\n+// due to the orphan rules. Therefore, `A::Item` may yet turn out to\n+// be `i32`.\n+\n+pub trait Foo<P> { fn foo() {} }\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+impl Foo<i32> for i32 { }\n+\n+impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n+\n+fn main() {}"}, {"sha": "81b1343837348aa026e0f5fb88b951438b733497", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-orphan.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-orphan.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+  --> $DIR/coherence-projection-conflict-orphan.rs:27:1\n+   |\n+LL | impl Foo<i32> for i32 { }\n+   | --------------------- first implementation here\n+LL | \n+LL | impl<A:Iterator> Foo<A::Item> for A { }  //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   |\n+   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `i32` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "cb5c94a18a7286de58c020b48055d8dd3a5025a5", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-ty-param.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Coherence error results because we do not know whether `T: Foo<P>` or not\n+// for the second impl.\n+\n+use std::marker::PhantomData;\n+\n+pub trait Foo<P> { fn foo() {} }\n+\n+impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n+\n+impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n+\n+fn main() {}"}, {"sha": "fe5a66ef9ea24e816277a45e324e35ddcd67e26a", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict-ty-param.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n+  --> $DIR/coherence-projection-conflict-ty-param.rs:22:1\n+   |\n+LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n+   | ---------------------------------------- first implementation here\n+LL | \n+LL | impl<T, U> Foo<T> for Option<U> { } //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "73adba0819e69f095d5316fa4ecc7d24cac12f39", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait Foo<P> { fn foo() {} }\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+impl Foo<i32> for i32 { }\n+\n+impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n+\n+impl Bar for i32 {\n+    type Output = i32;\n+}\n+\n+fn main() {}"}, {"sha": "7f5ff3de17864532e8695632236faf0d6e00065e", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-conflict.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-conflict.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+  --> $DIR/coherence-projection-conflict.rs:23:1\n+   |\n+LL | impl Foo<i32> for i32 { }\n+   | --------------------- first implementation here\n+LL | \n+LL | impl<A:Bar> Foo<A::Output> for A { } //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b02289dc68e522261eb315d7fc872a37866203a0", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-ok-orphan.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok-orphan.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// skip-codegen\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+// Here we do not get a coherence conflict because `Baz: Iterator`\n+// does not hold and (due to the orphan rules), we can rely on that.\n+\n+pub trait Foo<P> {}\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+struct Baz;\n+impl Foo<i32> for Baz { }\n+\n+impl<A:Iterator> Foo<A::Item> for A { }\n+\n+\n+fn main() {}"}, {"sha": "9c797b61a43b2f9a63ff7b676c6b6262f5560b80", "filename": "src/test/ui/re_rebalance_coherence/coherence-projection-ok.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-projection-ok.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-pass\n+// skip-codegen\n+pub trait Foo<P> {}\n+\n+pub trait Bar {\n+    type Output: 'static;\n+}\n+\n+impl Foo<i32> for i32 { }\n+\n+impl<A:Bar> Foo<A::Output> for A { }\n+\n+impl Bar for i32 {\n+    type Output = u32;\n+}\n+\n+\n+fn main() {}"}, {"sha": "c6dda7f277316f6fa65906c977a96f74410316ba", "filename": "src/test/ui/re_rebalance_coherence/coherence-tuple-conflict.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+// Test that a blank impl for all T conflicts with an impl for some\n+// specific T.\n+\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for (T,T) {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n+    fn get(&self) -> usize { self.dummy }\n+}\n+\n+fn main() { }"}, {"sha": "bd4f2908cdfe72db937fe234b1babf55d6615992", "filename": "src/test/ui/re_rebalance_coherence/coherence-tuple-conflict.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-tuple-conflict.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n+  --> $DIR/coherence-tuple-conflict.rs:27:1\n+   |\n+LL | impl<T> MyTrait for (T,T) {\n+   | ------------------------- first implementation here\n+...\n+LL | impl<A,B> MyTrait for (A,B) { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(_, _)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "6849f004c635d3227a61d9908b0dbf2ec64b5fe5", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that a local, generic type appearing within a\n+// *non-fundamental* remote type like `Vec` is not considered local.\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote;\n+\n+struct Local<T>(T);\n+\n+impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0117\n+\n+fn main() { }"}, {"sha": "d507edbb0bde998b30c9419dce3bc5b467bdd9e7", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local-2.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-vec-local-2.rs:23:1\n+   |\n+LL | impl<T> Remote for Vec<Local<T>> { } //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "24a00febfd8f4c1e050c5b24553394eb6555fa6a", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that a local type (with no type parameters) appearing within a\n+// *non-fundamental* remote type like `Vec` is not considered local.\n+\n+// aux-build:coherence_lib.rs\n+\n+extern crate coherence_lib as lib;\n+use lib::Remote;\n+\n+struct Local;\n+\n+impl Remote for Vec<Local> { } //~ ERROR E0117\n+\n+fn main() { }"}, {"sha": "fc400da71155172391ab213f2784d05a66232565", "filename": "src/test/ui/re_rebalance_coherence/coherence-vec-local.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence-vec-local.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-vec-local.rs:23:1\n+   |\n+LL | impl Remote for Vec<Local> { } //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "5e09cf69a61affa458bc08581e8ac282d09e17ab", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+// compile-pass\n+// skip-codgen\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait { fn foo() {} }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+\n+// `MyFundamentalStruct` is declared fundamental, so we can test that\n+//\n+//    MyFundamentalStruct<MyTrait>: !MyTrait\n+//\n+// Huzzah.\n+impl MyTrait for lib::MyFundamentalStruct<MyType> { }\n+\n+\n+fn main() { }"}, {"sha": "8e5d2bf4cf7b60cc353a1c5008d52961e8ab358a", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+// compile-pass\n+// skip-codegen\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait { fn foo() {} }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+\n+// `MyFundamentalStruct` is declared fundamental, so we can test that\n+//\n+//    MyFundamentalStruct<&MyTrait>: !MyTrait\n+//\n+// Huzzah.\n+impl<'a> MyTrait for lib::MyFundamentalStruct<&'a MyType> { }\n+\n+\n+fn main() { }"}, {"sha": "e7a8edbd221479063a2d14d0cb139f374c84dd1c", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait { fn foo() {} }\n+\n+impl<T: lib::MyCopy> MyTrait for T { }\n+\n+// Tuples are not fundamental.\n+impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n+\n+\n+fn main() { }"}, {"sha": "e6adc08c28c37a3d196a393096a8e5758e9ea789", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n+  --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:29:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { } //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "3f91750104b9a5c6c8b91adee35999bfabc59d76", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_struct.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait { fn foo() {} }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+\n+// `MyStruct` is not declared fundamental, therefore this would\n+// require that\n+//\n+//     MyStruct<MyType>: !MyTrait\n+//\n+// which we cannot approve.\n+impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n+\n+fn main() { }"}, {"sha": "a40ae4fc4488d88050fddd5745aed5daa234afd5", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_struct.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_struct.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n+  --> $DIR/coherence_copy_like_err_struct.rs:31:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for lib::MyStruct<MyType> { } //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "0e7eef6fe6de2e0ab0c8dd4ffa84f4faad1fb127", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_tuple.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+trait MyTrait { fn foo() {} }\n+impl<T: lib::MyCopy> MyTrait for T { }\n+\n+// Tuples are not fundamental, therefore this would require that\n+//\n+//     (MyType,): !MyTrait\n+//\n+// which we cannot approve.\n+impl MyTrait for (MyType,) { } //~ ERROR E0119\n+\n+fn main() { }"}, {"sha": "82e43f6d721eb395850a8944de51a9dbbba1fb37", "filename": "src/test/ui/re_rebalance_coherence/coherence_copy_like_err_tuple.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_copy_like_err_tuple.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,14 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n+  --> $DIR/coherence_copy_like_err_tuple.rs:30:1\n+   |\n+LL | impl<T: lib::MyCopy> MyTrait for T { }\n+   | ---------------------------------- first implementation here\n+...\n+LL | impl MyTrait for (MyType,) { } //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n+   |\n+   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "d4d29326e4f789a0c541f35ef425320d4223b885", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// Tests that methods that implement a trait cannot be invoked\n+// unless the trait is imported.\n+\n+mod Lib {\n+    pub trait TheTrait {\n+        fn the_fn(&self);\n+    }\n+\n+    pub struct TheStruct;\n+\n+    impl TheTrait for TheStruct {\n+        fn the_fn(&self) {}\n+    }\n+}\n+\n+mod Import {\n+    // Trait is in scope here:\n+    use Lib::TheStruct;\n+    use Lib::TheTrait;\n+\n+    fn call_the_fn(s: &TheStruct) {\n+        s.the_fn();\n+    }\n+}\n+\n+mod NoImport {\n+    // Trait is not in scope here:\n+    use Lib::TheStruct;\n+\n+    fn call_the_fn(s: &TheStruct) {\n+        s.the_fn(); //~ ERROR no method named `the_fn` found\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9294899bfee549a2a4bee1eea8da4f8a175190bc", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `the_fn` found for type `&Lib::TheStruct` in the current scope\n+  --> $DIR/coherence_inherent.rs:43:11\n+   |\n+LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use Lib::TheTrait;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "beb60f57a2a2c10df1b5e76922f74cd6741dae8d", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent_cc.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(re_rebalance_coherence)]\n+\n+// aux-build:coherence_inherent_cc_lib.rs\n+\n+// Tests that methods that implement a trait cannot be invoked\n+// unless the trait is imported.\n+\n+extern crate coherence_inherent_cc_lib;\n+\n+mod Import {\n+    // Trait is in scope here:\n+    use coherence_inherent_cc_lib::TheStruct;\n+    use coherence_inherent_cc_lib::TheTrait;\n+\n+    fn call_the_fn(s: &TheStruct) {\n+        s.the_fn();\n+    }\n+}\n+\n+mod NoImport {\n+    // Trait is not in scope here:\n+    use coherence_inherent_cc_lib::TheStruct;\n+\n+    fn call_the_fn(s: &TheStruct) {\n+        s.the_fn(); //~ ERROR no method named `the_fn` found\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bf67313879b7ebb4c71afcd025136b7fc19b7573", "filename": "src/test/ui/re_rebalance_coherence/coherence_inherent_cc.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_inherent_cc.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,13 @@\n+error[E0599]: no method named `the_fn` found for type `&coherence_inherent_cc_lib::TheStruct` in the current scope\n+  --> $DIR/coherence_inherent_cc.rs:35:11\n+   |\n+LL |         s.the_fn(); //~ ERROR no method named `the_fn` found\n+   |           ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           `use coherence_inherent_cc_lib::TheTrait;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "7f72ff7af8887886d1c071df02f3277a009f7a5c", "filename": "src/test/ui/re_rebalance_coherence/coherence_local.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+// compile-pass\n+// skip-codegen\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// These are all legal because they are all fundamental types:\n+\n+impl lib::MyCopy for MyType { }\n+impl<'a> lib::MyCopy for &'a MyType { }\n+impl<'a> lib::MyCopy for &'a Box<MyType> { }\n+impl lib::MyCopy for Box<MyType> { }\n+impl lib::MyCopy for lib::MyFundamentalStruct<MyType> { }\n+impl lib::MyCopy for lib::MyFundamentalStruct<Box<MyType>> { }\n+\n+\n+fn main() { }"}, {"sha": "3d7145e489d18cc89a6ce9d1a84e2edfad67e103", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_struct.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(re_rebalance_coherence)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// These are all legal because they are all fundamental types:\n+\n+// MyStruct is not fundamental.\n+impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n+\n+\n+fn main() { }"}, {"sha": "c35e95040de1523cce18986743a4c0783076fb33", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_struct.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_struct.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence_local_err_struct.rs:26:1\n+   |\n+LL | impl lib::MyCopy for lib::MyStruct<MyType> { } //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "f2c9008dd8ca9cacc0e5a1d4ec76d8f195b77d90", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_tuple.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+\n+#![feature(re_rebalance_coherence)]\n+#![allow(dead_code)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// These are all legal because they are all fundamental types:\n+\n+// Tuples are not fundamental, so this is not a local impl.\n+impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n+\n+\n+fn main() { }"}, {"sha": "a3f9f2d32b8f9249f7b046bf12f5bda5bfde8602", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_err_tuple.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_err_tuple.stderr?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,12 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence_local_err_tuple.rs:26:1\n+   |\n+LL | impl lib::MyCopy for (MyType,) { } //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference any types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "b15a5cc245bf45e43183af8dd6176b544d1793e6", "filename": "src/test/ui/re_rebalance_coherence/coherence_local_ref.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd7acfe046356e8107a4f2df2c5f06bc0abd219/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fre_rebalance_coherence%2Fcoherence_local_ref.rs?ref=bcd7acfe046356e8107a4f2df2c5f06bc0abd219", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to introduce a negative constraint that\n+// `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n+\n+// aux-build:coherence_copy_like_lib.rs\n+// compile-pass\n+// skip-codegen\n+#![allow(dead_code)]\n+#![feature(re_rebalance_coherence)]\n+\n+extern crate coherence_copy_like_lib as lib;\n+\n+struct MyType { x: i32 }\n+\n+// naturally, legal\n+impl lib::MyCopy for MyType { }\n+\n+\n+fn main() { }"}]}