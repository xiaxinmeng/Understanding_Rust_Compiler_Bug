{"sha": "3f5aee2d5241139d808f4fdece0026603489afd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNWFlZTJkNTI0MTEzOWQ4MDhmNGZkZWNlMDAyNjYwMzQ4OWFmZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-12T17:38:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-12T17:38:15Z"}, "message": "Auto merge of #81744 - rylev:overlapping-early-exit2, r=lcnr\n\nTry fast_reject::simplify_type in coherence before doing full check\n\nThis is a reattempt at landing #69010 (by `@jonas-schievink).` The change adds a fast path for coherence checking to see if there's no way for types to unify since full coherence checking can be somewhat expensive.\n\nThis has big effects on code generated by the [`windows`](https://github.com/microsoft/windows-rs) which in some cases spends as much as 20% of compilation time in the `specialization_graph_of` query. In local benchmarks this took a compilation that previously took ~500 seconds down to ~380 seconds.\n\nThis is surely not going to make a difference on much smaller crates, so the question is whether it will have a negative impact. #69010 was closed because some of the perf suite crates did show small regressions.\n\nAdditional discussion of this issue is happening [here](https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/windows-rs.20perf).", "tree": {"sha": "56e1255305fa265608cd98f0bad33b0fa7098879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56e1255305fa265608cd98f0bad33b0fa7098879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f5aee2d5241139d808f4fdece0026603489afd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5aee2d5241139d808f4fdece0026603489afd1", "html_url": "https://github.com/rust-lang/rust/commit/3f5aee2d5241139d808f4fdece0026603489afd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f5aee2d5241139d808f4fdece0026603489afd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "html_url": "https://github.com/rust-lang/rust/commit/d416093209d0dd77a4cdeb5a2f1b5de1316787ec"}, {"sha": "0cc35f54e87d7abab5d0299003396b3b7f44955f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc35f54e87d7abab5d0299003396b3b7f44955f", "html_url": "https://github.com/rust-lang/rust/commit/0cc35f54e87d7abab5d0299003396b3b7f44955f"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "04cc4db0bcf649a822ec27d0d92d0f5523f4d5d0", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f5aee2d5241139d808f4fdece0026603489afd1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5aee2d5241139d808f4fdece0026603489afd1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=3f5aee2d5241139d808f4fdece0026603489afd1", "patch": "@@ -1845,6 +1845,15 @@ impl<'tcx> TyS<'tcx> {\n         )\n     }\n \n+    /// Get the mutability of the reference or `None` when not a reference\n+    #[inline]\n+    pub fn ref_mutability(&self) -> Option<hir::Mutability> {\n+        match self.kind() {\n+            Ref(_, _, mutability) => Some(*mutability),\n+            _ => None,\n+        }\n+    }\n+\n     #[inline]\n     pub fn is_unsafe_ptr(&self) -> bool {\n         matches!(self.kind(), RawPtr(_))"}, {"sha": "e8ae1f44a3671a159a09ab61b68e4eeae430ef19", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f5aee2d5241139d808f4fdece0026603489afd1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f5aee2d5241139d808f4fdece0026603489afd1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=3f5aee2d5241139d808f4fdece0026603489afd1", "patch": "@@ -11,7 +11,7 @@ use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionCont\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, fast_reject, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use std::iter;\n@@ -67,6 +67,34 @@ where\n            impl2_def_id={:?})\",\n         impl1_def_id, impl2_def_id,\n     );\n+    // Before doing expensive operations like entering an inference context, do\n+    // a quick check via fast_reject to tell if the impl headers could possibly\n+    // unify.\n+    let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n+    let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n+\n+    // Check if any of the input types definitely do not unify.\n+    if impl1_ref\n+        .iter()\n+        .flat_map(|tref| tref.substs.types())\n+        .zip(impl2_ref.iter().flat_map(|tref| tref.substs.types()))\n+        .any(|(ty1, ty2)| {\n+            let t1 = fast_reject::simplify_type(tcx, ty1, false);\n+            let t2 = fast_reject::simplify_type(tcx, ty2, false);\n+            if let (Some(t1), Some(t2)) = (t1, t2) {\n+                // Simplified successfully\n+                // Types cannot unify if they differ in their reference mutability or simplify to different types\n+                t1 != t2 || ty1.ref_mutability() != ty2.ref_mutability()\n+            } else {\n+                // Types might unify\n+                false\n+            }\n+        })\n+    {\n+        // Some types involved are definitely different, so the impls couldn't possibly overlap.\n+        debug!(\"overlapping_impls: fast_reject early-exit\");\n+        return no_overlap();\n+    }\n \n     let overlaps = tcx.infer_ctxt().enter(|infcx| {\n         let selcx = &mut SelectionContext::intercrate(&infcx);"}]}