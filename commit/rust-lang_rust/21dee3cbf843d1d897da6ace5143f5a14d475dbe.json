{"sha": "21dee3cbf843d1d897da6ace5143f5a14d475dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZGVlM2NiZjg0M2QxZDg5N2RhNmFjZTUxNDNmNWExNGQ0NzVkYmU=", "commit": {"author": {"name": "marcusdunn", "email": "marcus.s.dunn@gmail.com", "date": "2021-05-15T01:23:18Z"}, "committer": {"name": "marcusdunn", "email": "marcus.s.dunn@gmail.com", "date": "2021-06-04T16:41:55Z"}, "message": "removed conditional check on bindings_after_at and resulting dead code", "tree": {"sha": "b7aae2717f2e726edb2398f0dc2e0511bacac067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7aae2717f2e726edb2398f0dc2e0511bacac067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21dee3cbf843d1d897da6ace5143f5a14d475dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21dee3cbf843d1d897da6ace5143f5a14d475dbe", "html_url": "https://github.com/rust-lang/rust/commit/21dee3cbf843d1d897da6ace5143f5a14d475dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21dee3cbf843d1d897da6ace5143f5a14d475dbe/comments", "author": {"login": "MarcusDunn", "id": 51931484, "node_id": "MDQ6VXNlcjUxOTMxNDg0", "avatar_url": "https://avatars.githubusercontent.com/u/51931484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcusDunn", "html_url": "https://github.com/MarcusDunn", "followers_url": "https://api.github.com/users/MarcusDunn/followers", "following_url": "https://api.github.com/users/MarcusDunn/following{/other_user}", "gists_url": "https://api.github.com/users/MarcusDunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcusDunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcusDunn/subscriptions", "organizations_url": "https://api.github.com/users/MarcusDunn/orgs", "repos_url": "https://api.github.com/users/MarcusDunn/repos", "events_url": "https://api.github.com/users/MarcusDunn/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcusDunn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MarcusDunn", "id": 51931484, "node_id": "MDQ6VXNlcjUxOTMxNDg0", "avatar_url": "https://avatars.githubusercontent.com/u/51931484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcusDunn", "html_url": "https://github.com/MarcusDunn", "followers_url": "https://api.github.com/users/MarcusDunn/followers", "following_url": "https://api.github.com/users/MarcusDunn/following{/other_user}", "gists_url": "https://api.github.com/users/MarcusDunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcusDunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcusDunn/subscriptions", "organizations_url": "https://api.github.com/users/MarcusDunn/orgs", "repos_url": "https://api.github.com/users/MarcusDunn/repos", "events_url": "https://api.github.com/users/MarcusDunn/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcusDunn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a32d2b43a2ac802a3fc4c601e07828a4eace89a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32d2b43a2ac802a3fc4c601e07828a4eace89a8", "html_url": "https://github.com/rust-lang/rust/commit/a32d2b43a2ac802a3fc4c601e07828a4eace89a8"}], "stats": {"total": 49, "additions": 1, "deletions": 48}, "files": [{"sha": "a11620c8a1d51a2fbe4746f7329f171ec2ed4277", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/21dee3cbf843d1d897da6ace5143f5a14d475dbe/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21dee3cbf843d1d897da6ace5143f5a14d475dbe/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=21dee3cbf843d1d897da6ace5143f5a14d475dbe", "patch": "@@ -16,9 +16,8 @@ use rustc_middle::thir::PatKind;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::builtin::BINDINGS_WITH_VARIANT_NAME;\n use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERNS};\n-use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::{sym, Span};\n+use rustc_span::{Span};\n use std::slice;\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -123,9 +122,6 @@ impl PatCtxt<'_, '_> {\n impl<'tcx> MatchVisitor<'_, 'tcx> {\n     fn check_patterns(&mut self, pat: &Pat<'_>) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n-        if !self.tcx.features().bindings_after_at {\n-            check_legality_of_bindings_in_at_patterns(self, pat);\n-        }\n         check_for_bindings_named_same_as_variants(self, pat);\n     }\n \n@@ -740,46 +736,3 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat<'_\n         err.emit();\n     }\n }\n-\n-/// Forbids bindings in `@` patterns. This used to be is necessary for memory safety,\n-/// because of the way rvalues were handled in the borrow check. (See issue #14587.)\n-fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat<'_>) {\n-    AtBindingPatternVisitor { cx, bindings_allowed: true }.visit_pat(pat);\n-\n-    struct AtBindingPatternVisitor<'a, 'b, 'tcx> {\n-        cx: &'a MatchVisitor<'b, 'tcx>,\n-        bindings_allowed: bool,\n-    }\n-\n-    impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        type Map = intravisit::ErasedMap<'v>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n-        fn visit_pat(&mut self, pat: &Pat<'_>) {\n-            match pat.kind {\n-                hir::PatKind::Binding(.., ref subpat) => {\n-                    if !self.bindings_allowed {\n-                        feature_err(\n-                            &self.cx.tcx.sess.parse_sess,\n-                            sym::bindings_after_at,\n-                            pat.span,\n-                            \"pattern bindings after an `@` are unstable\",\n-                        )\n-                        .emit();\n-                    }\n-\n-                    if subpat.is_some() {\n-                        let bindings_were_allowed = self.bindings_allowed;\n-                        self.bindings_allowed = false;\n-                        intravisit::walk_pat(self, pat);\n-                        self.bindings_allowed = bindings_were_allowed;\n-                    }\n-                }\n-                _ => intravisit::walk_pat(self, pat),\n-            }\n-        }\n-    }\n-}"}]}