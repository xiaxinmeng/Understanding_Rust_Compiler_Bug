{"sha": "e209e85e39b4851c3ec122a45ddeabe318b2d522", "node_id": "C_kwDOAAsO6NoAKGUyMDllODVlMzliNDg1MWMzZWMxMjJhNDVkZGVhYmUzMThiMmQ1MjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T14:53:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T14:53:24Z"}, "message": "Auto merge of #95183 - ibraheemdev:arc-count-acquire, r=Amanieu\n\nWeaken needlessly restrictive orderings on `Arc::*_count`\n\nThere is no apparent reason for these to be `SeqCst`. For reference, [the Boost C++ implementation relies on acquire semantics](https://github.com/boostorg/smart_ptr/blob/f2cc84a23c64b8a73c9b72b34799d0854d7e0787/include/boost/smart_ptr/detail/sp_counted_base_std_atomic.hpp#L137-L140).", "tree": {"sha": "e5089db5d51b424ee8d297d4b6053dc8a81a802c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5089db5d51b424ee8d297d4b6053dc8a81a802c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e209e85e39b4851c3ec122a45ddeabe318b2d522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e209e85e39b4851c3ec122a45ddeabe318b2d522", "html_url": "https://github.com/rust-lang/rust/commit/e209e85e39b4851c3ec122a45ddeabe318b2d522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e209e85e39b4851c3ec122a45ddeabe318b2d522/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a251644fa2adde5f46eea8d342b7e60e4716039", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a251644fa2adde5f46eea8d342b7e60e4716039", "html_url": "https://github.com/rust-lang/rust/commit/9a251644fa2adde5f46eea8d342b7e60e4716039"}, {"sha": "7e9303272695b04c6c84a63aa447fa572c768f13", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9303272695b04c6c84a63aa447fa572c768f13", "html_url": "https://github.com/rust-lang/rust/commit/7e9303272695b04c6c84a63aa447fa572c768f13"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "06aecd9cc1efdbd958cbce4a4248485980582ba4", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e209e85e39b4851c3ec122a45ddeabe318b2d522/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e209e85e39b4851c3ec122a45ddeabe318b2d522/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=e209e85e39b4851c3ec122a45ddeabe318b2d522", "patch": "@@ -25,7 +25,7 @@ use core::ptr::{self, NonNull};\n #[cfg(not(no_global_oom_handling))]\n use core::slice::from_raw_parts_mut;\n use core::sync::atomic;\n-use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n+use core::sync::atomic::Ordering::{Acquire, Relaxed, Release};\n \n #[cfg(not(no_global_oom_handling))]\n use crate::alloc::handle_alloc_error;\n@@ -984,7 +984,7 @@ impl<T: ?Sized> Arc<T> {\n     #[must_use]\n     #[stable(feature = \"arc_counts\", since = \"1.15.0\")]\n     pub fn weak_count(this: &Self) -> usize {\n-        let cnt = this.inner().weak.load(SeqCst);\n+        let cnt = this.inner().weak.load(Acquire);\n         // If the weak count is currently locked, the value of the\n         // count was 0 just before taking the lock.\n         if cnt == usize::MAX { 0 } else { cnt - 1 }\n@@ -1014,7 +1014,7 @@ impl<T: ?Sized> Arc<T> {\n     #[must_use]\n     #[stable(feature = \"arc_counts\", since = \"1.15.0\")]\n     pub fn strong_count(this: &Self) -> usize {\n-        this.inner().strong.load(SeqCst)\n+        this.inner().strong.load(Acquire)\n     }\n \n     /// Increments the strong reference count on the `Arc<T>` associated with the\n@@ -1976,7 +1976,7 @@ impl<T: ?Sized> Weak<T> {\n     #[must_use]\n     #[stable(feature = \"weak_counts\", since = \"1.41.0\")]\n     pub fn strong_count(&self) -> usize {\n-        if let Some(inner) = self.inner() { inner.strong.load(SeqCst) } else { 0 }\n+        if let Some(inner) = self.inner() { inner.strong.load(Acquire) } else { 0 }\n     }\n \n     /// Gets an approximation of the number of `Weak` pointers pointing to this\n@@ -1995,8 +1995,8 @@ impl<T: ?Sized> Weak<T> {\n     pub fn weak_count(&self) -> usize {\n         self.inner()\n             .map(|inner| {\n-                let weak = inner.weak.load(SeqCst);\n-                let strong = inner.strong.load(SeqCst);\n+                let weak = inner.weak.load(Acquire);\n+                let strong = inner.strong.load(Acquire);\n                 if strong == 0 {\n                     0\n                 } else {"}]}