{"sha": "936bf29d4cec40c328930daf83277d7e77cc9602", "node_id": "C_kwDOAAsO6NoAKDkzNmJmMjlkNGNlYzQwYzMyODkzMGRhZjgzMjc3ZDdlNzdjYzk2MDI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T08:51:19Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-14T08:51:19Z"}, "message": "s/eval_usize/eval_target_usize/ for clarity", "tree": {"sha": "a10030d4bdb00472c76d910191816f7f9e6f334b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a10030d4bdb00472c76d910191816f7f9e6f334b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936bf29d4cec40c328930daf83277d7e77cc9602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936bf29d4cec40c328930daf83277d7e77cc9602", "html_url": "https://github.com/rust-lang/rust/commit/936bf29d4cec40c328930daf83277d7e77cc9602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936bf29d4cec40c328930daf83277d7e77cc9602/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c6d73b04a718aceabc314bf231a20c90ccd601", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c6d73b04a718aceabc314bf231a20c90ccd601", "html_url": "https://github.com/rust-lang/rust/commit/c3c6d73b04a718aceabc314bf231a20c90ccd601"}], "stats": {"total": 606, "additions": 347, "deletions": 259}, "files": [{"sha": "5b7adae66acf71b62759d0db52b4fa3257f8ede4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -1782,7 +1782,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // than 1.\n                 // If the length is larger than 1, the repeat expression will need to copy the\n                 // element, so we require the `Copy` trait.\n-                if len.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n+                if len.try_eval_target_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n                     match operand {\n                         Operand::Copy(..) | Operand::Constant(..) => {\n                             // These are always okay: direct use of a const, or a value that can evidently be copied."}, {"sha": "95778de3abafcc798a769edb9adc95f409c80a52", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -857,7 +857,7 @@ fn codegen_stmt<'tcx>(\n fn codegen_array_len<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, place: CPlace<'tcx>) -> Value {\n     match *place.layout().ty.kind() {\n         ty::Array(_elem_ty, len) => {\n-            let len = fx.monomorphize(len).eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n+            let len = fx.monomorphize(len).eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }\n         ty::Slice(_elem_ty) => {"}, {"sha": "a1d63acfb61667e2c9fa60fdb8ba181e02adc48f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -141,7 +141,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let idx_ty = fx.monomorphize(idx.ty(fx.mir, fx.tcx));\n                 match idx_ty.kind() {\n                     ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => len\n-                        .try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        .try_eval_target_usize(fx.tcx, ty::ParamEnv::reveal_all())\n                         .unwrap_or_else(|| {\n                             span_bug!(span, \"could not evaluate shuffle index array length\")\n                         })\n@@ -735,7 +735,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => {}\n                 ty::Array(elem, len)\n                     if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                        && len.try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        && len.try_eval_target_usize(fx.tcx, ty::ParamEnv::reveal_all())\n                             == Some(expected_bytes) => {}\n                 _ => {\n                     fx.tcx.sess.span_fatal("}, {"sha": "a0745582d666948008974acfdff7f9b0b36491b2", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn unsized_info<'tcx>(\n         (&ty::Array(_, len), &ty::Slice(_)) => fx\n             .bcx\n             .ins()\n-            .iconst(fx.pointer_type, len.eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64),\n+            .iconst(fx.pointer_type, len.eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64),\n         (\n             &ty::Dynamic(ref data_a, _, src_dyn_kind),\n             &ty::Dynamic(ref data_b, _, target_dyn_kind),"}, {"sha": "cc1edaa97d800c6df58ca606530824a0c07ec990", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -564,8 +564,8 @@ impl<'tcx> CPlace<'tcx> {\n             CPlaceInner::Var(_local, var) => {\n                 if let ty::Array(element, len) = dst_layout.ty.kind() {\n                     // Can only happen for vector types\n-                    let len =\n-                        u32::try_from(len.eval_usize(fx.tcx, ParamEnv::reveal_all())).unwrap();\n+                    let len = u32::try_from(len.eval_target_usize(fx.tcx, ParamEnv::reveal_all()))\n+                        .unwrap();\n                     let vector_ty = fx.clif_type(*element).unwrap().by(len).unwrap();\n \n                     let data = match from.0 {"}, {"sha": "cb8168b407184b93bb32be47a8ee0b1b366e2698", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/simd.rs", "status": "modified", "additions": 233, "deletions": 174, "changes": 407, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -1,6 +1,6 @@\n use std::cmp::Ordering;\n \n-use gccjit::{BinaryOp, RValue, Type, ToRValue};\n+use gccjit::{BinaryOp, RValue, ToRValue, Type};\n use rustc_codegen_ssa::base::compare_simd_types;\n use rustc_codegen_ssa::common::TypeKind;\n use rustc_codegen_ssa::mir::operand::OperandRef;\n@@ -10,52 +10,57 @@ use rustc_hir as hir;\n use rustc_middle::span_bug;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::{Span, Symbol, sym};\n+use rustc_span::{sym, Span, Symbol};\n use rustc_target::abi::Align;\n \n use crate::builder::Builder;\n use crate::errors::{\n-    InvalidMonomorphizationInvalidFloatVector,\n-    InvalidMonomorphizationNotFloat,\n-    InvalidMonomorphizationUnrecognized,\n-    InvalidMonomorphizationExpectedSignedUnsigned,\n-    InvalidMonomorphizationUnsupportedElement,\n-    InvalidMonomorphizationInvalidBitmask,\n-    InvalidMonomorphizationSimdShuffle,\n-    InvalidMonomorphizationExpectedSimd,\n-    InvalidMonomorphizationMaskType,\n-    InvalidMonomorphizationReturnLength,\n-    InvalidMonomorphizationReturnLengthInputType,\n-    InvalidMonomorphizationReturnElement,\n-    InvalidMonomorphizationReturnType,\n-    InvalidMonomorphizationInsertedType,\n-    InvalidMonomorphizationReturnIntegerType,\n-    InvalidMonomorphizationMismatchedLengths,\n-    InvalidMonomorphizationUnsupportedCast,\n-    InvalidMonomorphizationUnsupportedOperation\n+    InvalidMonomorphizationExpectedSignedUnsigned, InvalidMonomorphizationExpectedSimd,\n+    InvalidMonomorphizationInsertedType, InvalidMonomorphizationInvalidBitmask,\n+    InvalidMonomorphizationInvalidFloatVector, InvalidMonomorphizationMaskType,\n+    InvalidMonomorphizationMismatchedLengths, InvalidMonomorphizationNotFloat,\n+    InvalidMonomorphizationReturnElement, InvalidMonomorphizationReturnIntegerType,\n+    InvalidMonomorphizationReturnLength, InvalidMonomorphizationReturnLengthInputType,\n+    InvalidMonomorphizationReturnType, InvalidMonomorphizationSimdShuffle,\n+    InvalidMonomorphizationUnrecognized, InvalidMonomorphizationUnsupportedCast,\n+    InvalidMonomorphizationUnsupportedElement, InvalidMonomorphizationUnsupportedOperation,\n };\n use crate::intrinsic;\n \n-pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>, name: Symbol, callee_ty: Ty<'tcx>, args: &[OperandRef<'tcx, RValue<'gcc>>], ret_ty: Ty<'tcx>, llret_ty: Type<'gcc>, span: Span) -> Result<RValue<'gcc>, ()> {\n+pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(\n+    bx: &mut Builder<'a, 'gcc, 'tcx>,\n+    name: Symbol,\n+    callee_ty: Ty<'tcx>,\n+    args: &[OperandRef<'tcx, RValue<'gcc>>],\n+    ret_ty: Ty<'tcx>,\n+    llret_ty: Type<'gcc>,\n+    span: Span,\n+) -> Result<RValue<'gcc>, ()> {\n     // macros for error handling:\n     macro_rules! return_error {\n-        ($err:expr) => {\n-            {\n-                bx.sess().emit_err($err);\n-                return Err(());\n-            }\n-        }\n+        ($err:expr) => {{\n+            bx.sess().emit_err($err);\n+            return Err(());\n+        }};\n     }\n     macro_rules! require {\n         ($cond:expr, $err:expr) => {\n             if !$cond {\n                 return_error!($err);\n             }\n-        }\n+        };\n     }\n     macro_rules! require_simd {\n         ($ty: expr, $position: expr) => {\n-            require!($ty.is_simd(), InvalidMonomorphizationExpectedSimd { span, name, position: $position, found_ty: $ty })\n+            require!(\n+                $ty.is_simd(),\n+                InvalidMonomorphizationExpectedSimd {\n+                    span,\n+                    name,\n+                    position: $position,\n+                    found_ty: $ty\n+                }\n+            )\n         };\n     }\n \n@@ -77,7 +82,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n             ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => args[0].immediate(),\n             ty::Array(elem, len)\n                 if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                    && len.try_eval_target_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n                 let place = PlaceRef::alloca(bx, args[0].layout);\n@@ -86,9 +91,13 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                 let ptr = bx.pointercast(place.llval, bx.cx.type_ptr_to(int_ty));\n                 bx.load(int_ty, ptr, Align::ONE)\n             }\n-            _ => return_error!(\n-                InvalidMonomorphizationInvalidBitmask { span, name, ty: mask_ty, expected_int_bits, expected_bytes }\n-            ),\n+            _ => return_error!(InvalidMonomorphizationInvalidBitmask {\n+                span,\n+                name,\n+                ty: mask_ty,\n+                expected_int_bits,\n+                expected_bytes\n+            }),\n         };\n \n         let arg1 = args[1].immediate();\n@@ -129,11 +138,18 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let (out_len, out_ty) = ret_ty.simd_size_and_type(bx.tcx());\n         require!(\n             in_len == out_len,\n-            InvalidMonomorphizationReturnLengthInputType { span, name, in_len, in_ty, ret_ty, out_len }\n+            InvalidMonomorphizationReturnLengthInputType {\n+                span,\n+                name,\n+                in_len,\n+                in_ty,\n+                ret_ty,\n+                out_len\n+            }\n         );\n         require!(\n             bx.type_kind(bx.element_type(llret_ty)) == TypeKind::Integer,\n-            InvalidMonomorphizationReturnIntegerType {span, name, ret_ty, out_ty}\n+            InvalidMonomorphizationReturnIntegerType { span, name, ret_ty, out_ty }\n         );\n \n         return Ok(compare_simd_types(\n@@ -147,26 +163,26 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n     }\n \n     if let Some(stripped) = name.as_str().strip_prefix(\"simd_shuffle\") {\n-        let n: u64 =\n-            if stripped.is_empty() {\n-                // Make sure this is actually an array, since typeck only checks the length-suffixed\n-                // version of this intrinsic.\n-                match args[2].layout.ty.kind() {\n-                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n-                        len.try_eval_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n-                            span_bug!(span, \"could not evaluate shuffle index array length\")\n-                        })\n-                    }\n-                    _ => return_error!(\n-                        InvalidMonomorphizationSimdShuffle { span, name, ty: args[2].layout.ty }\n-                    ),\n+        let n: u64 = if stripped.is_empty() {\n+            // Make sure this is actually an array, since typeck only checks the length-suffixed\n+            // version of this intrinsic.\n+            match args[2].layout.ty.kind() {\n+                ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n+                    len.try_eval_target_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(\n+                        || span_bug!(span, \"could not evaluate shuffle index array length\"),\n+                    )\n                 }\n+                _ => return_error!(InvalidMonomorphizationSimdShuffle {\n+                    span,\n+                    name,\n+                    ty: args[2].layout.ty\n+                }),\n             }\n-            else {\n-                stripped.parse().unwrap_or_else(|_| {\n-                    span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n-                })\n-            };\n+        } else {\n+            stripped.parse().unwrap_or_else(|_| {\n+                span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n+            })\n+        };\n \n         require_simd!(ret_ty, \"return\");\n \n@@ -182,14 +198,10 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n \n         let vector = args[2].immediate();\n \n-        return Ok(bx.shuffle_vector(\n-            args[0].immediate(),\n-            args[1].immediate(),\n-            vector,\n-        ));\n+        return Ok(bx.shuffle_vector(args[0].immediate(), args[1].immediate(), vector));\n     }\n \n-    #[cfg(feature=\"master\")]\n+    #[cfg(feature = \"master\")]\n     if name == sym::simd_insert {\n         require!(\n             in_elem == arg_tys[2],\n@@ -205,44 +217,44 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         // not be an l-value. So, call a builtin to set the element.\n         // TODO(antoyo): perhaps we could create a new vector or maybe there's a GIMPLE instruction for that?\n         // TODO(antoyo): don't use target specific builtins here.\n-        let func_name =\n-            match in_len {\n-                2 => {\n-                    if element_type == bx.i64_type {\n-                        \"__builtin_ia32_vec_set_v2di\"\n-                    }\n-                    else {\n-                        unimplemented!();\n-                    }\n-                },\n-                4 => {\n-                    if element_type == bx.i32_type {\n-                        \"__builtin_ia32_vec_set_v4si\"\n-                    }\n-                    else {\n-                        unimplemented!();\n-                    }\n-                },\n-                8 => {\n-                    if element_type == bx.i16_type {\n-                        \"__builtin_ia32_vec_set_v8hi\"\n-                    }\n-                    else {\n-                        unimplemented!();\n-                    }\n-                },\n-                _ => unimplemented!(\"Len: {}\", in_len),\n-            };\n+        let func_name = match in_len {\n+            2 => {\n+                if element_type == bx.i64_type {\n+                    \"__builtin_ia32_vec_set_v2di\"\n+                } else {\n+                    unimplemented!();\n+                }\n+            }\n+            4 => {\n+                if element_type == bx.i32_type {\n+                    \"__builtin_ia32_vec_set_v4si\"\n+                } else {\n+                    unimplemented!();\n+                }\n+            }\n+            8 => {\n+                if element_type == bx.i16_type {\n+                    \"__builtin_ia32_vec_set_v8hi\"\n+                } else {\n+                    unimplemented!();\n+                }\n+            }\n+            _ => unimplemented!(\"Len: {}\", in_len),\n+        };\n         let builtin = bx.context.get_target_builtin_function(func_name);\n         let param1_type = builtin.get_param(0).to_rvalue().get_type();\n         // TODO(antoyo): perhaps use __builtin_convertvector for vector casting.\n         let vector = bx.cx.bitcast_if_needed(vector, param1_type);\n-        let result = bx.context.new_call(None, builtin, &[vector, value, bx.context.new_cast(None, index, bx.int_type)]);\n+        let result = bx.context.new_call(\n+            None,\n+            builtin,\n+            &[vector, value, bx.context.new_cast(None, index, bx.int_type)],\n+        );\n         // TODO(antoyo): perhaps use __builtin_convertvector for vector casting.\n         return Ok(bx.context.new_bitcast(None, result, vector.get_type()));\n     }\n \n-    #[cfg(feature=\"master\")]\n+    #[cfg(feature = \"master\")]\n     if name == sym::simd_extract {\n         require!(\n             ret_ty == in_elem,\n@@ -273,7 +285,14 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n         require!(\n             in_len == out_len,\n-            InvalidMonomorphizationReturnLengthInputType { span, name, in_len, in_ty, ret_ty, out_len }\n+            InvalidMonomorphizationReturnLengthInputType {\n+                span,\n+                name,\n+                in_len,\n+                in_ty,\n+                ret_ty,\n+                out_len\n+            }\n         );\n         // casting cares about nominal type, not just structural type\n         if in_elem == out_elem {\n@@ -322,19 +341,27 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n \n             let cast_vec_element = |index| {\n                 let index = bx.context.new_rvalue_from_int(bx.int_type, index);\n-                bx.context.new_cast(None, bx.context.new_array_access(None, array, index).to_rvalue(), out_type)\n+                bx.context.new_cast(\n+                    None,\n+                    bx.context.new_array_access(None, array, index).to_rvalue(),\n+                    out_type,\n+                )\n             };\n \n-            bx.context.new_rvalue_from_vector(None, vector_type, &[\n-                cast_vec_element(0),\n-                cast_vec_element(1),\n-                cast_vec_element(2),\n-                cast_vec_element(3),\n-                cast_vec_element(4),\n-                cast_vec_element(5),\n-                cast_vec_element(6),\n-                cast_vec_element(7),\n-            ])\n+            bx.context.new_rvalue_from_vector(\n+                None,\n+                vector_type,\n+                &[\n+                    cast_vec_element(0),\n+                    cast_vec_element(1),\n+                    cast_vec_element(2),\n+                    cast_vec_element(3),\n+                    cast_vec_element(4),\n+                    cast_vec_element(5),\n+                    cast_vec_element(6),\n+                    cast_vec_element(7),\n+                ],\n+            )\n         };\n \n         match (in_style, out_style) {\n@@ -385,9 +412,14 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n             }\n             _ => { /* Unsupported. Fallthrough. */ }\n         }\n-        return_error!(\n-            InvalidMonomorphizationUnsupportedCast { span, name, in_ty, in_elem, ret_ty, out_elem }\n-        );\n+        return_error!(InvalidMonomorphizationUnsupportedCast {\n+            span,\n+            name,\n+            in_ty,\n+            in_elem,\n+            ret_ty,\n+            out_elem\n+        });\n     }\n \n     macro_rules! arith_binary {\n@@ -414,54 +446,60 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         args: &[OperandRef<'tcx, RValue<'gcc>>],\n     ) -> Result<RValue<'gcc>, ()> {\n         macro_rules! return_error {\n-            ($err:expr) => {\n-                {\n-                    bx.sess().emit_err($err);\n-                    return Err(());\n-                }\n-            }\n+            ($err:expr) => {{\n+                bx.sess().emit_err($err);\n+                return Err(());\n+            }};\n         }\n-        let (elem_ty_str, elem_ty) =\n-            if let ty::Float(f) = in_elem.kind() {\n-                let elem_ty = bx.cx.type_float_from_ty(*f);\n-                match f.bit_width() {\n-                    32 => (\"f32\", elem_ty),\n-                    64 => (\"f64\", elem_ty),\n-                    _ => {\n-                        return_error!(InvalidMonomorphizationInvalidFloatVector { span, name, elem_ty: f.name_str(), vec_ty: in_ty });\n-                    }\n+        let (elem_ty_str, elem_ty) = if let ty::Float(f) = in_elem.kind() {\n+            let elem_ty = bx.cx.type_float_from_ty(*f);\n+            match f.bit_width() {\n+                32 => (\"f32\", elem_ty),\n+                64 => (\"f64\", elem_ty),\n+                _ => {\n+                    return_error!(InvalidMonomorphizationInvalidFloatVector {\n+                        span,\n+                        name,\n+                        elem_ty: f.name_str(),\n+                        vec_ty: in_ty\n+                    });\n                 }\n             }\n-            else {\n-                return_error!(InvalidMonomorphizationNotFloat { span, name, ty: in_ty });\n-            };\n+        } else {\n+            return_error!(InvalidMonomorphizationNotFloat { span, name, ty: in_ty });\n+        };\n \n         let vec_ty = bx.cx.type_vector(elem_ty, in_len);\n \n-        let (intr_name, fn_ty) =\n-            match name {\n-                sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)), // TODO(antoyo): pand with 170141183420855150465331762880109871103\n-                sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog2 => (\"log2\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog => (\"log\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n-                sym::simd_fpowi => (\"powi\", bx.type_func(&[vec_ty, bx.type_i32()], vec_ty)),\n-                sym::simd_fpow => (\"pow\", bx.type_func(&[vec_ty, vec_ty], vec_ty)),\n-                sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n-                _ => return_error!(InvalidMonomorphizationUnrecognized { span, name })\n-            };\n+        let (intr_name, fn_ty) = match name {\n+            sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)), // TODO(antoyo): pand with 170141183420855150465331762880109871103\n+            sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog2 => (\"log2\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog => (\"log\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n+            sym::simd_fpowi => (\"powi\", bx.type_func(&[vec_ty, bx.type_i32()], vec_ty)),\n+            sym::simd_fpow => (\"pow\", bx.type_func(&[vec_ty, vec_ty], vec_ty)),\n+            sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n+            _ => return_error!(InvalidMonomorphizationUnrecognized { span, name }),\n+        };\n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n         let function = intrinsic::llvm::intrinsic(llvm_name, &bx.cx);\n         let function: RValue<'gcc> = unsafe { std::mem::transmute(function) };\n-        let c = bx.call(fn_ty, None, function, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n+        let c = bx.call(\n+            fn_ty,\n+            None,\n+            function,\n+            &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n+            None,\n+        );\n         Ok(c)\n     }\n \n@@ -518,7 +556,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         simd_neg: Int => neg, Float => fneg;\n     }\n \n-    #[cfg(feature=\"master\")]\n+    #[cfg(feature = \"master\")]\n     if name == sym::simd_saturating_add || name == sym::simd_saturating_sub {\n         let lhs = args[0].immediate();\n         let rhs = args[1].immediate();\n@@ -536,18 +574,23 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                 });\n             }\n         };\n-        let builtin_name =\n-            match (signed, is_add, in_len, elem_width) {\n-                (true, true, 32, 8) => \"__builtin_ia32_paddsb256\", // TODO(antoyo): cast arguments to unsigned.\n-                (false, true, 32, 8) => \"__builtin_ia32_paddusb256\",\n-                (true, true, 16, 16) => \"__builtin_ia32_paddsw256\",\n-                (false, true, 16, 16) => \"__builtin_ia32_paddusw256\",\n-                (true, false, 16, 16) => \"__builtin_ia32_psubsw256\",\n-                (false, false, 16, 16) => \"__builtin_ia32_psubusw256\",\n-                (true, false, 32, 8) => \"__builtin_ia32_psubsb256\",\n-                (false, false, 32, 8) => \"__builtin_ia32_psubusb256\",\n-                _ => unimplemented!(\"signed: {}, is_add: {}, in_len: {}, elem_width: {}\", signed, is_add, in_len, elem_width),\n-            };\n+        let builtin_name = match (signed, is_add, in_len, elem_width) {\n+            (true, true, 32, 8) => \"__builtin_ia32_paddsb256\", // TODO(antoyo): cast arguments to unsigned.\n+            (false, true, 32, 8) => \"__builtin_ia32_paddusb256\",\n+            (true, true, 16, 16) => \"__builtin_ia32_paddsw256\",\n+            (false, true, 16, 16) => \"__builtin_ia32_paddusw256\",\n+            (true, false, 16, 16) => \"__builtin_ia32_psubsw256\",\n+            (false, false, 16, 16) => \"__builtin_ia32_psubusw256\",\n+            (true, false, 32, 8) => \"__builtin_ia32_psubsb256\",\n+            (false, false, 32, 8) => \"__builtin_ia32_psubusb256\",\n+            _ => unimplemented!(\n+                \"signed: {}, is_add: {}, in_len: {}, elem_width: {}\",\n+                signed,\n+                is_add,\n+                in_len,\n+                elem_width\n+            ),\n+        };\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n         let func = bx.context.get_target_builtin_function(builtin_name);\n@@ -575,8 +618,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                             // if overflow occurs, the result is the\n                             // mathematical result modulo 2^n:\n                             Ok(bx.$op(args[1].immediate(), r))\n-                        }\n-                        else {\n+                        } else {\n                             Ok(bx.vector_reduce_op(args[0].immediate(), $vec_op))\n                         }\n                     }\n@@ -585,12 +627,17 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                             // ordered arithmetic reductions take an accumulator\n                             let acc = args[1].immediate();\n                             Ok(bx.$float_reduce(acc, args[0].immediate()))\n-                        }\n-                        else {\n+                        } else {\n                             Ok(bx.vector_reduce_op(args[0].immediate(), $vec_op))\n                         }\n                     }\n-                    _ => return_error!(InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }),\n+                    _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                        span,\n+                        name,\n+                        in_ty,\n+                        elem_ty: in_elem,\n+                        ret_ty\n+                    }),\n                 };\n             }\n         };\n@@ -603,13 +650,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         add,\n         0.0 // TODO: Use this argument.\n     );\n-    arith_red!(\n-        simd_reduce_mul_unordered: BinaryOp::Mult,\n-        vector_reduce_fmul_fast,\n-        false,\n-        mul,\n-        1.0\n-    );\n+    arith_red!(simd_reduce_mul_unordered: BinaryOp::Mult, vector_reduce_fmul_fast, false, mul, 1.0);\n \n     macro_rules! minmax_red {\n         ($name:ident: $reduction:ident) => {\n@@ -619,8 +660,16 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                     InvalidMonomorphizationReturnType { span, name, in_elem, in_ty, ret_ty }\n                 );\n                 return match in_elem.kind() {\n-                    ty::Int(_) | ty::Uint(_) | ty::Float(_) => Ok(bx.$reduction(args[0].immediate())),\n-                    _ => return_error!(InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }),\n+                    ty::Int(_) | ty::Uint(_) | ty::Float(_) => {\n+                        Ok(bx.$reduction(args[0].immediate()))\n+                    }\n+                    _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                        span,\n+                        name,\n+                        in_ty,\n+                        elem_ty: in_elem,\n+                        ret_ty\n+                    }),\n                 };\n             }\n         };\n@@ -641,7 +690,13 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                 } else {\n                     match in_elem.kind() {\n                         ty::Int(_) | ty::Uint(_) => {}\n-                        _ => return_error!(InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }),\n+                        _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                            span,\n+                            name,\n+                            in_ty,\n+                            elem_ty: in_elem,\n+                            ret_ty\n+                        }),\n                     }\n \n                     // boolean reductions operate on vectors of i1s:\n@@ -654,9 +709,13 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                         let r = bx.vector_reduce_op(input, $op);\n                         Ok(if !$boolean { r } else { bx.zext(r, bx.type_bool()) })\n                     }\n-                    _ => return_error!(\n-                        InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }\n-                    ),\n+                    _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                        span,\n+                        name,\n+                        in_ty,\n+                        elem_ty: in_elem,\n+                        ret_ty\n+                    }),\n                 };\n             }\n         };"}, {"sha": "c1b3f34e5a6d43f4bba9107c739e7e55e46d34ed", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -132,7 +132,7 @@ fn build_fixed_size_array_di_node<'ll, 'tcx>(\n \n     let (size, align) = cx.size_and_align_of(array_type);\n \n-    let upper_bound = len.eval_usize(cx.tcx, ty::ParamEnv::reveal_all()) as c_longlong;\n+    let upper_bound = len.eval_target_usize(cx.tcx, ty::ParamEnv::reveal_all()) as c_longlong;\n \n     let subrange =\n         unsafe { Some(llvm::LLVMRustDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound)) };"}, {"sha": "b0295481ca5a37836f2d06edff6cf8bcd9afe3fb", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -877,7 +877,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => args[0].immediate(),\n             ty::Array(elem, len)\n                 if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                    && len.try_eval_target_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n                 let place = PlaceRef::alloca(bx, args[0].layout);\n@@ -957,9 +957,9 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             // version of this intrinsic.\n             match args[2].layout.ty.kind() {\n                 ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n-                    len.try_eval_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n-                        span_bug!(span, \"could not evaluate shuffle index array length\")\n-                    })\n+                    len.try_eval_target_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(\n+                        || span_bug!(span, \"could not evaluate shuffle index array length\"),\n+                    )\n                 }\n                 _ => return_error!(InvalidMonomorphization::SimdShuffle {\n                     span,\n@@ -1123,7 +1123,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             }\n             ty::Array(elem, len)\n                 if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                    && len.try_eval_target_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n                 // Zero-extend iN to the array length:"}, {"sha": "6e136db38954abad97ed8ab30d469d29474c1f7a", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -148,7 +148,7 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx.tcx().struct_lockstep_tails_erasing_lifetimes(source, target, bx.param_env());\n     match (source.kind(), target.kind()) {\n         (&ty::Array(_, len), &ty::Slice(_)) => {\n-            cx.const_usize(len.eval_usize(cx.tcx(), ty::ParamEnv::reveal_all()))\n+            cx.const_usize(len.eval_target_usize(cx.tcx(), ty::ParamEnv::reveal_all()))\n         }\n         (\n             &ty::Dynamic(ref data_a, _, src_dyn_kind),"}, {"sha": "f2469fde3b65703897f167449a49b459078bf892", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -181,16 +181,24 @@ fn push_debuginfo_type_name<'tcx>(\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n                 match len.kind() {\n                     ty::ConstKind::Param(param) => write!(output, \",{}>\", param.name).unwrap(),\n-                    _ => write!(output, \",{}>\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n-                        .unwrap(),\n+                    _ => write!(\n+                        output,\n+                        \",{}>\",\n+                        len.eval_target_usize(tcx, ty::ParamEnv::reveal_all())\n+                    )\n+                    .unwrap(),\n                 }\n             } else {\n                 output.push('[');\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n                 match len.kind() {\n                     ty::ConstKind::Param(param) => write!(output, \"; {}]\", param.name).unwrap(),\n-                    _ => write!(output, \"; {}]\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n-                        .unwrap(),\n+                    _ => write!(\n+                        output,\n+                        \"; {}]\",\n+                        len.eval_target_usize(tcx, ty::ParamEnv::reveal_all())\n+                    )\n+                    .unwrap(),\n                 }\n             }\n         }"}, {"sha": "7c8d23a3329c6775beb8a0631d51cf1500f620d5", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -100,8 +100,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 }\n \n-                let count =\n-                    self.monomorphize(count).eval_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n+                let count = self\n+                    .monomorphize(count)\n+                    .eval_target_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n \n                 bx.write_operand_repeatedly(cg_elem, count, dest);\n             }\n@@ -492,7 +493,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if let Some(index) = place.as_local() {\n             if let LocalRef::Operand(Some(op)) = self.locals[index] {\n                 if let ty::Array(_, n) = op.layout.ty.kind() {\n-                    let n = n.eval_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n+                    let n = n.eval_target_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n                     return bx.cx().const_usize(n);\n                 }\n             }"}, {"sha": "3bd586c81b0bdc6a1ef71d2786ce3c7a79569c16", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -107,7 +107,7 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n-        ty::Array(_, len) => (len.eval_usize(tcx, param_env) as usize, None, op),\n+        ty::Array(_, len) => (len.eval_target_usize(tcx, param_env) as usize, None, op),\n         ty::Adt(def, _) if def.variants().is_empty() => {\n             throw_ub!(Unreachable)\n         }"}, {"sha": "9d00e338d453c7e29584fe15cb51823e52e47115", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -328,8 +328,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             (&ty::Array(_, length), &ty::Slice(_)) => {\n                 let ptr = self.read_scalar(src)?;\n                 // u64 cast is from usize to u64, which is always good\n-                let val =\n-                    Immediate::new_slice(ptr, length.eval_usize(*self.tcx, self.param_env), self);\n+                let val = Immediate::new_slice(\n+                    ptr,\n+                    length.eval_target_usize(*self.tcx, self.param_env),\n+                    self,\n+                );\n                 self.write_immediate(val, dest)\n             }\n             (ty::Dynamic(data_a, ..), ty::Dynamic(data_b, ..)) => {"}, {"sha": "faf741de60a16312c8a8295c15e4f5689817286f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -473,7 +473,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     // that this is merely a ZST and it is already eligible for promotion.\n                     // This may require an RFC?\n                     /*\n-                    ty::Array(_, len) if len.try_eval_usize(cx.tcx, cx.param_env) == Some(0)\n+                    ty::Array(_, len) if len.try_eval_target_usize(cx.tcx, cx.param_env) == Some(0)\n                         => true,\n                     */\n                     _ => false,"}, {"sha": "7009d3b38ae4362372338245fbb0d1ac3c8a3e9b", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -364,31 +364,33 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     ProjectionElem::Index(local) => {\n                         let mut promotable = false;\n                         // Only accept if we can predict the index and are indexing an array.\n-                        let val =\n-                            if let TempState::Defined { location: loc, .. } = self.temps[local] {\n-                                let block = &self.body[loc.block];\n-                                if loc.statement_index < block.statements.len() {\n-                                    let statement = &block.statements[loc.statement_index];\n-                                    match &statement.kind {\n-                                        StatementKind::Assign(box (\n-                                            _,\n-                                            Rvalue::Use(Operand::Constant(c)),\n-                                        )) => c.literal.try_eval_usize(self.tcx, self.param_env),\n-                                        _ => None,\n-                                    }\n-                                } else {\n-                                    None\n+                        let val = if let TempState::Defined { location: loc, .. } =\n+                            self.temps[local]\n+                        {\n+                            let block = &self.body[loc.block];\n+                            if loc.statement_index < block.statements.len() {\n+                                let statement = &block.statements[loc.statement_index];\n+                                match &statement.kind {\n+                                    StatementKind::Assign(box (\n+                                        _,\n+                                        Rvalue::Use(Operand::Constant(c)),\n+                                    )) => c.literal.try_eval_target_usize(self.tcx, self.param_env),\n+                                    _ => None,\n                                 }\n                             } else {\n                                 None\n-                            };\n+                            }\n+                        } else {\n+                            None\n+                        };\n                         if let Some(idx) = val {\n                             // Determine the type of the thing we are indexing.\n                             let ty = place_base.ty(self.body, self.tcx).ty;\n                             match ty.kind() {\n                                 ty::Array(_, len) => {\n                                     // It's an array; determine its length.\n-                                    if let Some(len) = len.try_eval_usize(self.tcx, self.param_env)\n+                                    if let Some(len) =\n+                                        len.try_eval_target_usize(self.tcx, self.param_env)\n                                     {\n                                         // If the index is in-bounds, go ahead.\n                                         if idx < len {\n@@ -470,7 +472,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 // mutably without consequences. However, only &mut []\n                 // is allowed right now.\n                 if let ty::Array(_, len) = ty.kind() {\n-                    match len.try_eval_usize(self.tcx, self.param_env) {\n+                    match len.try_eval_target_usize(self.tcx, self.param_env) {\n                         Some(0) => {}\n                         _ => return Err(Unpromotable),\n                     }"}, {"sha": "1d26ca70f38f33b24db78b58a3c84863b02fb88f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -901,7 +901,7 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n         }\n \n         let len = if let ty::Array(_ty, c) = e.kind() {\n-            c.try_eval_usize(tcx, tcx.param_env(def.did()))\n+            c.try_eval_target_usize(tcx, tcx.param_env(def.did()))\n         } else {\n             Some(fields.len() as u64)\n         };"}, {"sha": "2f79071f6dc58d537de9e721c9bd344251bea5dc", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -1396,7 +1396,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let count = self.array_length_to_const(count);\n-        if let Some(count) = count.try_eval_usize(tcx, self.param_env) {\n+        if let Some(count) = count.try_eval_target_usize(tcx, self.param_env) {\n             self.suggest_array_len(expr, count);\n         }\n \n@@ -1463,7 +1463,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If the length is 0, we don't create any elements, so we don't copy any. If the length is 1, we\n         // don't copy that one element, we move it. Only check for Copy if the length is larger.\n-        if count.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n+        if count.try_eval_target_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n             let lang_item = self.tcx.require_lang_item(LangItem::Copy, None);\n             let code = traits::ObligationCauseCode::RepeatElementCopy { is_const_fn };\n             self.require_type_meets(element_ty, element.span, code, lang_item);\n@@ -2602,7 +2602,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         len: ty::Const<'tcx>,\n     ) {\n         if let (Some(len), Ok(user_index)) =\n-            (len.try_eval_usize(self.tcx, self.param_env), field.as_str().parse::<u64>())\n+            (len.try_eval_target_usize(self.tcx, self.param_env), field.as_str().parse::<u64>())\n             && let Ok(base) = self.tcx.sess.source_map().span_to_snippet(base.span)\n         {\n             let help = \"instead of using tuple indexing, use array indexing\";"}, {"sha": "29ed9a24ecfdfe77502fe3b8b9d7ec98b04999cf", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -647,7 +647,8 @@ fn check_must_not_suspend_ty<'tcx>(\n                 hir_id,\n                 SuspendCheckData {\n                     descr_pre,\n-                    plural_len: len.try_eval_usize(fcx.tcx, fcx.param_env).unwrap_or(0) as usize\n+                    plural_len: len.try_eval_target_usize(fcx.tcx, fcx.param_env).unwrap_or(0)\n+                        as usize\n                         + 1,\n                     ..data\n                 },"}, {"sha": "e909511346dcec65bf3e5f2fa7ac9d56b9a6d9a4", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -2063,7 +2063,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         len: ty::Const<'tcx>,\n         min_len: u64,\n     ) -> (Option<Ty<'tcx>>, Ty<'tcx>) {\n-        if let Some(len) = len.try_eval_usize(self.tcx, self.param_env) {\n+        if let Some(len) = len.try_eval_target_usize(self.tcx, self.param_env) {\n             // Now we know the length...\n             if slice.is_none() {\n                 // ...and since there is no variable-length pattern,"}, {"sha": "f18c0aa377fb4c7588853ee37c8cf0b21264ddbd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -2605,7 +2605,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                     ty.tuple_fields().iter().find_map(|field| ty_find_init_error(cx, field, init))\n                 }\n                 Array(ty, len) => {\n-                    if matches!(len.try_eval_usize(cx.tcx, cx.param_env), Some(v) if v > 0) {\n+                    if matches!(len.try_eval_target_usize(cx.tcx, cx.param_env), Some(v) if v > 0) {\n                         // Array length known at array non-empty -- recurse.\n                         ty_find_init_error(cx, *ty, init)\n                     } else {"}, {"sha": "3a92f5806c9efc95ef119a64b5a6d8c6a308773d", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         None\n                     }\n                 }\n-                ty::Array(ty, len) => match len.try_eval_usize(cx.tcx, cx.param_env) {\n+                ty::Array(ty, len) => match len.try_eval_target_usize(cx.tcx, cx.param_env) {\n                     // If the array is empty we don't lint, to avoid false positives\n                     Some(0) | None => None,\n                     // If the array is definitely non-empty, we can do `#[must_use]` checking."}, {"sha": "6378ca6e77ddf9f1b2977f0ba8cd66f1bb0247ab", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -2344,9 +2344,13 @@ impl<'tcx> ConstantKind<'tcx> {\n     }\n \n     #[inline]\n-    pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Option<u64> {\n+    pub fn try_eval_target_usize(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Option<u64> {\n         match self {\n-            Self::Ty(ct) => ct.try_eval_usize(tcx, param_env),\n+            Self::Ty(ct) => ct.try_eval_target_usize(tcx, param_env),\n             Self::Val(val, _) => val.try_to_machine_usize(tcx),\n             Self::Unevaluated(uneval, _) => {\n                 match tcx.const_eval_resolve(param_env, *uneval, None) {"}, {"sha": "97dc8a99f9b0e072734630b78001bf11e9edaca0", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -97,7 +97,7 @@ impl<'tcx> PlaceTy<'tcx> {\n                     ty::Slice(..) => self.ty,\n                     ty::Array(inner, _) if !from_end => tcx.mk_array(*inner, (to - from) as u64),\n                     ty::Array(inner, size) if from_end => {\n-                        let size = size.eval_usize(tcx, param_env);\n+                        let size = size.eval_target_usize(tcx, param_env);\n                         let len = size - (from as u64) - (to as u64);\n                         tcx.mk_array(*inner, len)\n                     }"}, {"sha": "3ad56e8f273df7e7f04ab3d567e1bf60c64aae9f", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -175,7 +175,7 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     /// Creates an interned usize constant.\n-    pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> Self {\n+    pub fn from_target_usize(tcx: TyCtxt<'tcx>, n: u64) -> Self {\n         Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))\n     }\n \n@@ -201,7 +201,11 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn try_eval_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n+    pub fn try_eval_target_usize(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+    ) -> Option<u64> {\n         self.kind().eval(tcx, param_env).try_to_machine_usize(tcx)\n     }\n \n@@ -229,8 +233,8 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     /// Panics if the value cannot be evaluated or doesn't contain a valid `usize`.\n-    pub fn eval_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n-        self.try_eval_usize(tcx, param_env)\n+    pub fn eval_target_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n+        self.try_eval_target_usize(tcx, param_env)\n             .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n "}, {"sha": "e67c89c194ecb1454c4da3456bcf52e23ef7e05f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -1787,7 +1787,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))\n+        self.mk_ty(Array(ty, ty::Const::from_target_usize(self, n)))\n     }\n \n     #[inline]"}, {"sha": "8d0c7bf2f478f73e7f1be18380f710c0006ca0c2", "filename": "compiler/rustc_middle/src/ty/inhabitedness/inhabited_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> InhabitedPredicate<'tcx> {\n         match self {\n             Self::False => Ok(false),\n             Self::True => Ok(true),\n-            Self::ConstIsZero(const_) => match const_.try_eval_usize(tcx, param_env) {\n+            Self::ConstIsZero(const_) => match const_.try_eval_target_usize(tcx, param_env) {\n                 None | Some(0) => Ok(true),\n                 Some(1..) => Ok(false),\n             },"}, {"sha": "8b08ea9a58cbe6f63f3db2400eaa68d0a9db9f49", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -511,8 +511,8 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n                     // we however cannot end up with errors in `Relate` during both\n                     // `type_of` and `predicates_of`. This means that evaluating the\n                     // constants should not cause cycle errors here.\n-                    let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n-                    let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n+                    let sz_a = sz_a.try_eval_target_usize(tcx, relation.param_env());\n+                    let sz_b = sz_b.try_eval_target_usize(tcx, relation.param_env());\n                     match (sz_a, sz_b) {\n                         (Some(sz_a_val), Some(sz_b_val)) if sz_a_val != sz_b_val => Err(\n                             TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),"}, {"sha": "c613b3627f2f6c896d232206bf9aba911d60711f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -1879,7 +1879,7 @@ impl<'tcx> Ty<'tcx> {\n                         // The way we evaluate the `N` in `[T; N]` here only works since we use\n                         // `simd_size_and_type` post-monomorphization. It will probably start to ICE\n                         // if we use it in generic code. See the `simd-array-trait` ui test.\n-                        (f0_len.eval_usize(tcx, ParamEnv::empty()) as u64, *f0_elem_ty)\n+                        (f0_len.eval_target_usize(tcx, ParamEnv::empty()) as u64, *f0_elem_ty)\n                     }\n                     // Otherwise, the fields of this Adt are the SIMD components (and we assume they\n                     // all have the same type)."}, {"sha": "fb0e9181b52ac52afa3bcf0394f01da605b6e83d", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 })\n             }\n             ExprKind::Repeat { value, count } => {\n-                if Some(0) == count.try_eval_usize(this.tcx, this.param_env) {\n+                if Some(0) == count.try_eval_target_usize(this.tcx, this.param_env) {\n                     this.build_zero_repeat(block, value, scope, source_info)\n                 } else {\n                     let value_operand = unpack!("}, {"sha": "fbe08a7bd243df6d9f045212a9aaa74b8042eeb6", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let tcx = self.tcx;\n         let (min_length, exact_size) = if let Some(place_resolved) = place.try_to_place(self) {\n             match place_resolved.ty(&self.local_decls, tcx).ty.kind() {\n-                ty::Array(_, length) => (length.eval_usize(tcx, self.param_env), true),\n+                ty::Array(_, length) => (length.eval_target_usize(tcx, self.param_env), true),\n                 _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n             }\n         } else {"}, {"sha": "977c4b4ae6c0b26663be3275f4c3c686299b180c", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -922,8 +922,8 @@ impl<'tcx> SplitWildcard<'tcx> {\n         // `cx.is_uninhabited()`).\n         let all_ctors = match pcx.ty.kind() {\n             ty::Bool => smallvec![make_range(0, 1)],\n-            ty::Array(sub_ty, len) if len.try_eval_usize(cx.tcx, cx.param_env).is_some() => {\n-                let len = len.eval_usize(cx.tcx, cx.param_env) as usize;\n+            ty::Array(sub_ty, len) if len.try_eval_target_usize(cx.tcx, cx.param_env).is_some() => {\n+                let len = len.eval_target_usize(cx.tcx, cx.param_env) as usize;\n                 if len != 0 && cx.is_uninhabited(*sub_ty) {\n                     smallvec![]\n                 } else {\n@@ -1406,7 +1406,9 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n             }\n             PatKind::Array { prefix, slice, suffix } | PatKind::Slice { prefix, slice, suffix } => {\n                 let array_len = match pat.ty.kind() {\n-                    ty::Array(_, length) => Some(length.eval_usize(cx.tcx, cx.param_env) as usize),\n+                    ty::Array(_, length) => {\n+                        Some(length.eval_target_usize(cx.tcx, cx.param_env) as usize)\n+                    }\n                     ty::Slice(_) => None,\n                     _ => span_bug!(pat.span, \"bad ty {:?} for slice pattern\", pat.ty),\n                 };"}, {"sha": "47ca0a87fcc28f8f122dd9d4b5210e4db2959bd8", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -416,7 +416,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             ty::Slice(..) => PatKind::Slice { prefix, slice, suffix },\n             // Fixed-length array, `[T; len]`.\n             ty::Array(_, len) => {\n-                let len = len.eval_usize(self.tcx, self.param_env);\n+                let len = len.eval_target_usize(self.tcx, self.param_env);\n                 assert!(len >= prefix.len() as u64 + suffix.len() as u64);\n                 PatKind::Array { prefix, slice, suffix }\n             }"}, {"sha": "bd12087629c99d3e3ae507d95cc96ddaab6995f0", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -890,7 +890,7 @@ where\n             }\n             ty::Dynamic(..) => self.complete_drop(self.succ, self.unwind),\n             ty::Array(ety, size) => {\n-                let size = size.try_eval_usize(self.tcx(), self.elaborator.param_env());\n+                let size = size.try_eval_target_usize(self.tcx(), self.elaborator.param_env());\n                 self.open_drop_for_array(*ety, size)\n             }\n             ty::Slice(ety) => self.open_drop_for_array(*ety, None),"}, {"sha": "6d30276aeabe0746cb97bda7aa93a5db683bc77a", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -490,7 +490,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             };\n             let base_ty = base_place.ty(self.builder.body, self.builder.tcx).ty;\n             let len: u64 = match base_ty.kind() {\n-                ty::Array(_, size) => size.eval_usize(self.builder.tcx, self.builder.param_env),\n+                ty::Array(_, size) => {\n+                    size.eval_target_usize(self.builder.tcx, self.builder.param_env)\n+                }\n                 _ => bug!(\"from_end: false slice pattern of non-array type\"),\n             };\n             for offset in from..to {"}, {"sha": "35c6037fa2923f41a3c5b8272762e5ed77665c67", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -1845,7 +1845,7 @@ fn check_must_not_suspend_ty<'tcx>(\n                 param_env,\n                 SuspendCheckData {\n                     descr_pre,\n-                    plural_len: len.try_eval_usize(tcx, param_env).unwrap_or(0) as usize + 1,\n+                    plural_len: len.try_eval_target_usize(tcx, param_env).unwrap_or(0) as usize + 1,\n                     ..data\n                 },\n             )"}, {"sha": "194c41c6ba1c0b2d7c0f30c3c3ab850dbd1b1e16", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -143,7 +143,7 @@ impl EnumSizeOpt {\n \n                     let tmp_ty = tcx.mk_ty(ty::Array(\n                         tcx.types.usize,\n-                        Const::from_usize(tcx, num_variants as u64),\n+                        Const::from_target_usize(tcx, num_variants as u64),\n                     ));\n \n                     let size_array_local = local_decls.push(LocalDecl::new(tmp_ty, span));"}, {"sha": "32dd8f25b4420d0539196cf320f661d27a49a5d4", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -112,7 +112,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for Search<'tcx> {\n                 return ControlFlow::Continue(());\n             }\n             ty::Array(_, n)\n-                if { n.try_eval_usize(self.tcx, ty::ParamEnv::reveal_all()) == Some(0) } =>\n+                if { n.try_eval_target_usize(self.tcx, ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array."}, {"sha": "295b65c2cc925de8b81b7c8dd8df3f2d8432103d", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -284,8 +284,9 @@ pub(crate) mod rustc {\n                 }\n \n                 ty::Array(ty, len) => {\n-                    let len =\n-                        len.try_eval_usize(tcx, ParamEnv::reveal_all()).ok_or(Err::Unspecified)?;\n+                    let len = len\n+                        .try_eval_target_usize(tcx, ParamEnv::reveal_all())\n+                        .ok_or(Err::Unspecified)?;\n                     let elt = Tree::from_ty(*ty, tcx)?;\n                     Ok(std::iter::repeat(elt)\n                         .take(len as usize)"}, {"sha": "d9efcaaebd5bc0f76f2581617b524417460bd8b2", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -209,7 +209,8 @@ fn layout_of_uncached<'tcx>(\n                 }\n             }\n \n-            let count = count.try_eval_usize(tcx, param_env).ok_or(LayoutError::Unknown(ty))?;\n+            let count =\n+                count.try_eval_target_usize(tcx, param_env).ok_or(LayoutError::Unknown(ty))?;\n             let element = cx.layout_of(element)?;\n             let size = element.size.checked_mul(count, dl).ok_or(LayoutError::SizeOverflow(ty))?;\n "}, {"sha": "c384172fbde83abc95a834027334aded88aba190", "filename": "src/tools/clippy/clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findexing_slicing.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n             if let Some(range) = higher::Range::hir(index) {\n                 // Ranged indexes, i.e., &x[n..m], &x[n..], &x[..n] and &x[..]\n                 if let ty::Array(_, s) = ty.kind() {\n-                    let size: u128 = if let Some(size) = s.try_eval_usize(cx.tcx, cx.param_env) {\n+                    let size: u128 = if let Some(size) = s.try_eval_target_usize(cx.tcx, cx.param_env) {\n                         size.into()\n                     } else {\n                         return;"}, {"sha": "151c7f1d5d254d8d33a0c0a702b6220be399d43f", "filename": "src/tools/clippy/clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -68,7 +68,7 @@ fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.kind() {\n         ty::Array(_, n) => n\n-            .try_eval_usize(cx.tcx, cx.param_env)\n+            .try_eval_target_usize(cx.tcx, cx.param_env)\n             .map_or(false, |val| (0..=32).contains(&val)),\n         _ => false,\n     }"}, {"sha": "5c317c2a5bbb6b115a5668897d6db85f7616596c", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -211,7 +211,7 @@ fn is_end_eq_array_len<'tcx>(\n         if let ExprKind::Lit(ref lit) = end.kind;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n         if let ty::Array(_, arr_len_const) = indexed_ty.kind();\n-        if let Some(arr_len) = arr_len_const.try_eval_usize(cx.tcx, cx.param_env);\n+        if let Some(arr_len) = arr_len_const.try_eval_target_usize(cx.tcx, cx.param_env);\n         then {\n             return match limits {\n                 ast::RangeLimits::Closed => end_int + 1 >= arr_len.into(),"}, {"sha": "d50346c166ae0a2861304adb5df6ef15f1cef799", "filename": "src/tools/clippy/clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -22,7 +22,7 @@ pub(super) fn derefs_to_slice<'tcx>(\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::Vec),\n-            ty::Array(_, size) => size.try_eval_usize(cx.tcx, cx.param_env).is_some(),\n+            ty::Array(_, size) => size.try_eval_target_usize(cx.tcx, cx.param_env).is_some(),\n             ty::Ref(_, inner, _) => may_slice(cx, *inner),\n             _ => false,\n         }"}, {"sha": "3cc765108d7ccdba8c4679e7631efdbaff99635b", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -166,7 +166,7 @@ impl MutableKeyType {\n             Ref(_, inner_ty, mutbl) => mutbl == hir::Mutability::Mut || self.is_interior_mutable_type(cx, inner_ty),\n             Slice(inner_ty) => self.is_interior_mutable_type(cx, inner_ty),\n             Array(inner_ty, size) => {\n-                size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n+                size.try_eval_target_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n                     && self.is_interior_mutable_type(cx, inner_ty)\n             },\n             Tuple(fields) => fields.iter().any(|ty| self.is_interior_mutable_type(cx, ty)),"}, {"sha": "1382c1a40da2417f21c747d71addff0b5fa10ed4", "filename": "src/tools/clippy/clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -62,7 +62,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n \n         // Then check if that that array zero-sized\n         let length = Const::from_anon_const(cx.tcx, length.def_id);\n-        let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+        let length = length.try_eval_target_usize(cx.tcx, cx.param_env);\n         if let Some(length) = length;\n         then {\n             length == 0"}, {"sha": "9d812fbdcc37e8f7c8e79fdc5808b03e6036f55f", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n             ExprKind::Tup(tup) => self.multi(tup).map(Constant::Tuple),\n             ExprKind::Repeat(value, _) => {\n                 let n = match self.typeck_results.expr_ty(e).kind() {\n-                    ty::Array(_, n) => n.try_eval_usize(self.lcx.tcx, self.lcx.param_env)?,\n+                    ty::Array(_, n) => n.try_eval_target_usize(self.lcx.tcx, self.lcx.param_env)?,\n                     _ => span_bug!(e.span, \"typeck error\"),\n                 };\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n))"}, {"sha": "0d763a2c5cf6b33f41b81b7d240e91b0b1b3285c", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -949,7 +949,7 @@ pub fn approx_ty_size<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> u64 {\n         (Ok(size), _) => size,\n         (Err(_), ty::Tuple(list)) => list.as_substs().types().map(|t| approx_ty_size(cx, t)).sum(),\n         (Err(_), ty::Array(t, n)) => {\n-            n.try_eval_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n+            n.try_eval_target_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n         },\n         (Err(_), ty::Adt(def, subst)) if def.is_struct() => def\n             .variants()"}, {"sha": "f24ddb887b95ac9500eaef04c3c12b9d38240093", "filename": "src/tools/miri/src/shims/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936bf29d4cec40c328930daf83277d7e77cc9602/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs?ref=936bf29d4cec40c328930daf83277d7e77cc9602", "patch": "@@ -469,7 +469,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let ty::Array(_, index_len) = index.layout.ty.kind() else {\n                     span_bug!(this.cur_span(), \"simd_shuffle index argument has non-array type {}\", index.layout.ty)\n                 };\n-                let index_len = index_len.eval_usize(*this.tcx, this.param_env());\n+                let index_len = index_len.eval_target_usize(*this.tcx, this.param_env());\n \n                 assert_eq!(left_len, right_len);\n                 assert_eq!(index_len, dest_len);"}]}