{"sha": "d12514bc589c1955108d517acd6d5952929b1650", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjUxNGJjNTg5YzE5NTUxMDhkNTE3YWNkNmQ1OTUyOTI5YjE2NTA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-08T10:16:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T16:02:23Z"}, "message": "Add a warning feature gate for int/uint in types and i/u suffixes.", "tree": {"sha": "22de1d681e02201a707c5889b4d80784861aa005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22de1d681e02201a707c5889b4d80784861aa005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12514bc589c1955108d517acd6d5952929b1650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12514bc589c1955108d517acd6d5952929b1650", "html_url": "https://github.com/rust-lang/rust/commit/d12514bc589c1955108d517acd6d5952929b1650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12514bc589c1955108d517acd6d5952929b1650/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95779554e9d6fc111102df7af80b40f8e22cfae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95779554e9d6fc111102df7af80b40f8e22cfae", "html_url": "https://github.com/rust-lang/rust/commit/e95779554e9d6fc111102df7af80b40f8e22cfae"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "ef86e67de1606af77d7c0e3397fb7309412f1f0f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d12514bc589c1955108d517acd6d5952929b1650/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12514bc589c1955108d517acd6d5952929b1650/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d12514bc589c1955108d517acd6d5952929b1650", "patch": "@@ -2341,12 +2341,12 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: intern_ty(arena, interner, ty_bool),\n             char: intern_ty(arena, interner, ty_char),\n             err: intern_ty(arena, interner, ty_err),\n-            int: intern_ty(arena, interner, ty_int(ast::TyIs(_))),\n+            int: intern_ty(arena, interner, ty_int(ast::TyIs(false))),\n             i8: intern_ty(arena, interner, ty_int(ast::TyI8)),\n             i16: intern_ty(arena, interner, ty_int(ast::TyI16)),\n             i32: intern_ty(arena, interner, ty_int(ast::TyI32)),\n             i64: intern_ty(arena, interner, ty_int(ast::TyI64)),\n-            uint: intern_ty(arena, interner, ty_uint(ast::TyUs(_))),\n+            uint: intern_ty(arena, interner, ty_uint(ast::TyUs(false))),\n             u8: intern_ty(arena, interner, ty_uint(ast::TyU8)),\n             u16: intern_ty(arena, interner, ty_uint(ast::TyU16)),\n             u32: intern_ty(arena, interner, ty_uint(ast::TyU32)),"}, {"sha": "99330797422299b817bbdc9521f663151ce13e88", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12514bc589c1955108d517acd6d5952929b1650/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12514bc589c1955108d517acd6d5952929b1650/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=d12514bc589c1955108d517acd6d5952929b1650", "patch": "@@ -263,7 +263,7 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n         }\n \n         match unsized_part_of_type(cx.tcx(), t).sty {\n-            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyUs(_)),\n+            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyUs(false)),\n             ty::ty_trait(_) => Type::vtable_ptr(cx),\n             _ => panic!(\"Unexpected type returned from unsized_part_of_type : {}\",\n                        t.repr(cx.tcx()))"}, {"sha": "6deffa804b2df40ac5f6069eb1b93395a657ff92", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d12514bc589c1955108d517acd6d5952929b1650/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12514bc589c1955108d517acd6d5952929b1650/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d12514bc589c1955108d517acd6d5952929b1650", "patch": "@@ -93,6 +93,9 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     // OIBIT specific features\n     (\"optin_builtin_traits\", Active),\n \n+    // int and uint are now deprecated\n+    (\"int_uint\", Active),\n+\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n     (\"test_accepted_feature\", Accepted),\n@@ -157,6 +160,14 @@ impl<'a> Context<'a> {\n         }\n     }\n \n+    fn warn_feature(&self, feature: &str, span: Span, explain: &str) {\n+        if !self.has_feature(feature) {\n+            self.span_handler.span_warn(span, explain);\n+            self.span_handler.span_help(span, &format!(\"add #![feature({})] to the \\\n+                                                       crate attributes to silence this warning\",\n+                                                      feature)[]);\n+        }\n+    }\n     fn has_feature(&self, feature: &str) -> bool {\n         self.features.iter().any(|&n| n == feature)\n     }\n@@ -334,6 +345,31 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n+        match t.node {\n+            ast::TyPath(ref p, _) => {\n+                match &*p.segments {\n+\n+                    [ast::PathSegment { identifier, .. }] => {\n+                        let name = token::get_ident(identifier);\n+                        let msg = if name == \"int\" {\n+                            Some(\"the `int` type is deprecated; \\\n+                                  use `isize` or a fixed-sized integer\")\n+                        } else if name == \"uint\" {\n+                            Some(\"the `unt` type is deprecated; \\\n+                                  use `usize` or a fixed-sized integer\")\n+                        } else {\n+                            None\n+                        };\n+\n+                        if let Some(msg) = msg {\n+                            self.context.warn_feature(\"int_uint\", t.span, msg)\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n         visit::walk_ty(self, t);\n     }\n \n@@ -345,6 +381,25 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"box expression syntax is experimental in alpha release; \\\n                                    you can call `Box::new` instead.\");\n             }\n+            ast::ExprLit(ref lit) => {\n+                match lit.node {\n+                    ast::LitInt(_, ty) => {\n+                        let msg = if let ast::SignedIntLit(ast::TyIs(true), _) = ty {\n+                            Some(\"the `i` suffix on integers is deprecated; use `is` \\\n+                                  or one of the fixed-sized suffixes\")\n+                        } else if let ast::UnsignedIntLit(ast::TyUs(true)) = ty {\n+                            Some(\"the `u` suffix on integers is deprecated; use `us` \\\n+                                 or one of the fixed-sized suffixes\")\n+                        } else {\n+                            None\n+                        };\n+                        if let Some(msg) = msg {\n+                            self.context.warn_feature(\"int_uint\", e.span, msg);\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "78b931b383f90a7175df830069a66c4fc365c03e", "filename": "src/test/compile-fail/feature-gate-int-uint.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d12514bc589c1955108d517acd6d5952929b1650/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12514bc589c1955108d517acd6d5952929b1650/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs?ref=d12514bc589c1955108d517acd6d5952929b1650", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+mod u {\n+    type X = uint; //~ WARN the `uint` type is deprecated\n+    struct Foo {\n+        x: uint //~ WARN the `uint` type is deprecated\n+    }\n+    fn bar(x: uint) { //~ WARN the `uint` type is deprecated\n+        1u; //~ WARN the `u` suffix on integers is deprecated\n+    }\n+}\n+mod i {\n+    type X = int; //~ WARN the `int` type is deprecated\n+    struct Foo {\n+        x: int //~ WARN the `int` type is deprecated\n+    }\n+    fn bar(x: int) { //~ WARN the `int` type is deprecated\n+        1i; //~ WARN the `u` suffix on integers is deprecated\n+    }\n+}\n+\n+fn main() {\n+    // make compilation fail, after feature gating\n+    let () = 1u8; //~ ERROR\n+}"}]}