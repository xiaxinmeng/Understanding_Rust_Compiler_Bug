{"sha": "3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NjhiYjMyY2Q0ZmUxZmRkMGFkNWE4M2Y4MzcxMTdjMTE0NGM1Y2Y=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-08-19T06:43:42Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-08-22T07:12:43Z"}, "message": "Compile via external assembler on Windows.", "tree": {"sha": "563d708f3c82f2f9b425d330b4009d590f03933c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563d708f3c82f2f9b425d330b4009d590f03933c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf", "html_url": "https://github.com/rust-lang/rust/commit/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e683063b9b25aeeacd25b41cc02bb2159eec4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e683063b9b25aeeacd25b41cc02bb2159eec4a", "html_url": "https://github.com/rust-lang/rust/commit/84e683063b9b25aeeacd25b41cc02bb2159eec4a"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "db61042b9ff9893649da8ca5819c47c7028e6df1", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf", "patch": "@@ -419,16 +419,8 @@ pub mod write {\n         }\n     }\n \n-    pub fn run_ndk(sess: Session, assembly: &Path, object: &Path) {\n-        let cc_prog: ~str = match &sess.opts.android_cross_path {\n-            &Some(ref path) => {\n-                fmt!(\"%s/bin/arm-linux-androideabi-gcc\", *path)\n-            }\n-            &None => {\n-                sess.fatal(\"need Android NDK path for building \\\n-                            (--android-cross-path)\")\n-            }\n-        };\n+    pub fn run_assembler(sess: Session, assembly: &Path, object: &Path) {\n+        let cc_prog = super::get_cc_prog(sess);\n \n         let cc_args = ~[\n             ~\"-c\",\n@@ -813,12 +805,7 @@ pub fn output_dll_filename(os: session::os, lm: LinkMeta) -> ~str {\n     fmt!(\"%s%s-%s-%s%s\", dll_prefix, lm.name, lm.extras_hash, lm.vers, dll_suffix)\n }\n \n-// If the user wants an exe generated we need to invoke\n-// cc to link the object file with some libs\n-pub fn link_binary(sess: Session,\n-                   obj_filename: &Path,\n-                   out_filename: &Path,\n-                   lm: LinkMeta) {\n+pub fn get_cc_prog(sess: Session) -> ~str {\n     // In the future, FreeBSD will use clang as default compiler.\n     // It would be flexible to use cc (system's default C compiler)\n     // instead of hard-coded gcc.\n@@ -841,9 +828,18 @@ pub fn link_binary(sess: Session,\n             session::os_win32 => ~\"g++\",\n             _ => ~\"cc\"\n         }\n-    };\n-    // The invocations of cc share some flags across platforms\n+    }\n+}\n+\n+// If the user wants an exe generated we need to invoke\n+// cc to link the object file with some libs\n+pub fn link_binary(sess: Session,\n+                   obj_filename: &Path,\n+                   out_filename: &Path,\n+                   lm: LinkMeta) {\n \n+    let cc_prog = get_cc_prog(sess);\n+    // The invocations of cc share some flags across platforms\n \n     let output = if *sess.building_library {\n         let long_libname = output_dll_filename(sess.targ_cfg.os, lm);"}, {"sha": "4328bd3675153c7354a6fe460370d476c3191809", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3768bb32cd4fe1fdd0ad5a83f837117c1144c5cf", "patch": "@@ -333,8 +333,13 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n                                trans: &CrateTranslation,\n                                outputs: &OutputFilenames) {\n \n-    // NB: Android hack\n-    if sess.targ_cfg.os == session::os_android &&\n+    // On Windows, LLVM integrated assembler emits bad stack unwind tables when\n+    // segmented stacks are enabled.  However, unwind info directives in assembly\n+    // output are OK, so we generate assembly first and then run it through\n+    // an external assembler.\n+    // Same for Android.\n+    if (sess.targ_cfg.os == session::os_android ||\n+        sess.targ_cfg.os == session::os_win32) &&\n         (sess.opts.output_type == link::output_type_object ||\n          sess.opts.output_type == link::output_type_exe) {\n         let output_type = link::output_type_assembly;\n@@ -347,7 +352,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n                                     output_type,\n                                     &obj_filename));\n \n-        link::write::run_ndk(sess, &obj_filename, &outputs.obj_filename);\n+        link::write::run_assembler(sess, &obj_filename, &outputs.obj_filename);\n     } else {\n         time(sess.time_passes(), ~\"LLVM passes\", ||\n             link::write::run_passes(sess,"}]}