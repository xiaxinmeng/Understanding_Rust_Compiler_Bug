{"sha": "91ad4e38f53ce1ef8783233bde36a81cd8177981", "node_id": "C_kwDOAAsO6NoAKDkxYWQ0ZTM4ZjUzY2UxZWY4NzgzMjMzYmRlMzZhODFjZDgxNzc5ODE", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-08-19T12:47:45Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-08-21T07:17:43Z"}, "message": "Add Handler::struct_diagnostic()\n\nThis unifies the struct_{warn,error,fatal}() methods in one generic\nmethod.", "tree": {"sha": "0d28d3daed968a041b7e302046539167abffd8b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d28d3daed968a041b7e302046539167abffd8b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ad4e38f53ce1ef8783233bde36a81cd8177981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ad4e38f53ce1ef8783233bde36a81cd8177981", "html_url": "https://github.com/rust-lang/rust/commit/91ad4e38f53ce1ef8783233bde36a81cd8177981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ad4e38f53ce1ef8783233bde36a81cd8177981/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa8e761defc245d08d2cf226786def8a8bb56e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8e761defc245d08d2cf226786def8a8bb56e53", "html_url": "https://github.com/rust-lang/rust/commit/aa8e761defc245d08d2cf226786def8a8bb56e53"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "61d767a1cc6b4f97d806c45b8a0d3a127ec2d59a", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/91ad4e38f53ce1ef8783233bde36a81cd8177981/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ad4e38f53ce1ef8783233bde36a81cd8177981/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=91ad4e38f53ce1ef8783233bde36a81cd8177981", "patch": "@@ -84,6 +84,13 @@ pub trait EmissionGuarantee: Sized {\n     /// of `Self` without actually performing the emission.\n     #[track_caller]\n     fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self;\n+\n+    /// Creates a new `DiagnosticBuilder` that will return this type of guarantee.\n+    #[track_caller]\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self>;\n }\n \n /// Private module for sealing the `IsError` helper trait.\n@@ -166,6 +173,15 @@ impl EmissionGuarantee for ErrorGuaranteed {\n             }\n         }\n     }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new_guaranteeing_error::<_, { Level::Error { lint: false } }>(\n+            handler, msg,\n+        )\n+    }\n }\n \n impl<'a> DiagnosticBuilder<'a, ()> {\n@@ -208,6 +224,13 @@ impl EmissionGuarantee for () {\n             DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n         }\n     }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new(handler, Level::Warning(None), msg)\n+    }\n }\n \n impl<'a> DiagnosticBuilder<'a, !> {\n@@ -247,6 +270,13 @@ impl EmissionGuarantee for ! {\n         // Then fatally error, returning `!`\n         crate::FatalError.raise()\n     }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new_fatal(handler, msg)\n+    }\n }\n \n /// In general, the `DiagnosticBuilder` uses deref to allow access to"}, {"sha": "9b9c334d4dfcc2bbd852fa2db85272685f5813e9", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91ad4e38f53ce1ef8783233bde36a81cd8177981/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ad4e38f53ce1ef8783233bde36a81cd8177981/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=91ad4e38f53ce1ef8783233bde36a81cd8177981", "patch": "@@ -641,6 +641,15 @@ impl Handler {\n         self.inner.borrow_mut().emit_stashed_diagnostics()\n     }\n \n+    /// Construct a builder with the `msg` at the level appropriate for the specific `EmissionGuarantee`.\n+    #[rustc_lint_diagnostics]\n+    pub fn struct_diagnostic<G: EmissionGuarantee>(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, G> {\n+        G::make_diagnostic_builder(self, msg)\n+    }\n+\n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     ///\n     /// Attempting to `.emit()` the builder will only emit if either:"}, {"sha": "b9b2356130a594be5f51b0b77412c7f75f6774a9", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91ad4e38f53ce1ef8783233bde36a81cd8177981/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ad4e38f53ce1ef8783233bde36a81cd8177981/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=91ad4e38f53ce1ef8783233bde36a81cd8177981", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    DiagnosticMessage, ErrorGuaranteed, MultiSpan, StashKey,\n+    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -372,4 +372,12 @@ impl ParseSess {\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }\n+\n+    #[rustc_lint_diagnostics]\n+    pub fn struct_diagnostic<G: EmissionGuarantee>(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, G> {\n+        self.span_diagnostic.struct_diagnostic(msg)\n+    }\n }"}, {"sha": "a1a054c67d46e73918a2c2091cd094cbe2401f13", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91ad4e38f53ce1ef8783233bde36a81cd8177981/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91ad4e38f53ce1ef8783233bde36a81cd8177981/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=91ad4e38f53ce1ef8783233bde36a81cd8177981", "patch": "@@ -411,7 +411,7 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:539:19\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:569:19\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`"}]}