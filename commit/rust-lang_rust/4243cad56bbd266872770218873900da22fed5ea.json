{"sha": "4243cad56bbd266872770218873900da22fed5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNDNjYWQ1NmJiZDI2Njg3Mjc3MDIxODg3MzkwMGRhMjJmZWQ1ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-25T06:17:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-25T06:17:02Z"}, "message": "auto merge of #12535 : alexcrichton/rust/rollup, r=alexcrichton\n\nCloses #12474 (rustc: Don't error on the rlib symlinks) r=brson\r\nCloses #12475 (Use lines_any() when parsing output form \"ar\") r=brson\r\nCloses #12476 (Remove some obsolete ignored tests) r=alexcrichton\r\nCloses #12481 (Make .swap_remove return Option<T>) r=brson\r\nCloses #12485 (Remove some non-essential trait re-exports from the prelude.) r=brson\r\nCloses #12489 (Handle multibyte characters in source files better) r=alexcrichton\r\nCloses #12494 (Mark by-value parameters that are passed on the stack as nocapture) r=nmatsakis\r\nCloses #12497 (syntax: allow stmt/expr macro invocations to be delimited by {}) r=alexcrichton\r\nCloses #12508 (Match binding is assignment) r=nmatsakis\r\nCloses #12513 (Run the travis build as one large command) r=huonw\r\nCloses #12515 (Update source code layout in src/) r=alexcrichton\r\nCloses #12521 (Tutorial: Add std::num::sqrt to the example) r=cmr\r\nCloses #12529 (test: single-variant enum can't be dereferenced) r=huonw", "tree": {"sha": "e6641cd309453d27c829fdca475650b797b3ad48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6641cd309453d27c829fdca475650b797b3ad48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4243cad56bbd266872770218873900da22fed5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4243cad56bbd266872770218873900da22fed5ea", "html_url": "https://github.com/rust-lang/rust/commit/4243cad56bbd266872770218873900da22fed5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4243cad56bbd266872770218873900da22fed5ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043c9721791731bbf7b9d8be354a65ed25b9a6d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/043c9721791731bbf7b9d8be354a65ed25b9a6d9", "html_url": "https://github.com/rust-lang/rust/commit/043c9721791731bbf7b9d8be354a65ed25b9a6d9"}, {"sha": "7d85546721cf954606a2fe25a63e9fb9e8a256ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d85546721cf954606a2fe25a63e9fb9e8a256ad", "html_url": "https://github.com/rust-lang/rust/commit/7d85546721cf954606a2fe25a63e9fb9e8a256ad"}], "stats": {"total": 617, "additions": 443, "deletions": 174}, "files": [{"sha": "2c2ef693d0b3d985c766abf3c93c4127fcb15826", "filename": ".travis.yml", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -39,10 +39,13 @@ before_script:\n # manually disables bringing in these two libraries, but the stock LLVM was\n # apparently built with these options. We provide these options when building so\n # the `rustc` binary can successfully link.\n-script:\n-  - make tidy\n-  - RUSTFLAGS=\"-C link-args='-lffi -lncurses'\" make -j4 rustc-stage1\n-  - make check-stage1-std check-stage1-rpass check-stage1-cfail check-stage1-rfail\n+#\n+# As a result of https://github.com/travis-ci/travis-ci/issues/1066, we run\n+# everything in one large command instead of multiple commands.\n+script: |\n+  make tidy &&\n+  RUSTFLAGS=\"-C link-args='-lffi -lncurses'\" make -j4 rustc-stage1 &&\n+  make check-stage1-std check-stage1-rpass check-stage1-cfail check-stage1-rfail\n \n env:\n   - NO_BENCH=1"}, {"sha": "0ac310df1b866499fb9dcb3e086213252aa35709", "filename": "src/README.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -10,6 +10,21 @@ Source layout:\n | `libgreen/`         | The M:N runtime library                                   |\n | `libnative/`        | The 1:1 runtime library                                   |\n | `libsyntax/`        | The Rust parser and pretty-printer                        |\n+| `libcollections/`   | A collection of useful data structures and containers     |\n+| `libnum/`           | Extended number support library (complex, rational, etc)  |\n+| `libtest/`          | Rust's test-runner code                                   |\n+| ------------------- | --------------------------------------------------------- |\n+| `libarena/`         | The arena (a fast but limited) memory allocator           |\n+| `libflate/`         | Simple compression library                                |\n+| `libfourcc/`        | Data format identifier library                            |\n+| `libgetopts/`       | Get command-line-options library                          |\n+| `libglob/`          | Unix glob patterns library                                |\n+| `libsemver/`        | Rust's semantic versioning library                        |\n+| `libserialize/`     | Encode-Decode types library                               |\n+| `libsync/`          | Concurrency mechanisms and primitives                     |\n+| `libterm/`          | ANSI color library for terminals                          |\n+| `libtime/`          | Time operations library                                   |\n+| `libuuid/`          | UUID's handling code                                      |\n | ------------------- | --------------------------------------------------------- |\n | `rt/`               | The runtime system                                        |\n | `rt/rust_*.c`       | - Some of the runtime services                            |\n@@ -31,8 +46,13 @@ Source layout:\n | ------------------- | --------------------------------------------------------- |\n | `librustdoc/`       | The Rust API documentation tool                           |\n | `libuv/`            | The libuv submodule                                       |\n+| `librustuv/`        | Rust libuv support code                                   |\n | ------------------- | --------------------------------------------------------- |\n | `llvm/`             | The LLVM submodule                                        |\n | `rustllvm/`         | LLVM support code                                         |\n | ------------------- | --------------------------------------------------------- |\n | `etc/`              | Scripts, editors support, misc                            |\n+\n+\n+NOTE: This list (especially the second part of the table which contains modules and libraries)\n+is highly volatile and subject to change."}, {"sha": "41bf15c0c149ebcdc73dc8cfb448935fc8d23101", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -1420,8 +1420,8 @@ bad, but often copies are expensive. So we\u2019d like to define a function\n that takes the points by pointer. We can use references to do this:\n \n ~~~\n+use std::num::sqrt;\n # struct Point { x: f64, y: f64 }\n-# fn sqrt(f: f64) -> f64 { 0.0 }\n fn compute_distance(p1: &Point, p2: &Point) -> f64 {\n     let x_d = p1.x - p2.x;\n     let y_d = p1.y - p2.y;"}, {"sha": "7ab859796927a1cbfeed3d3aa2be0838be03d0e3", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -53,6 +53,7 @@\n //! ```\n \n use std::cmp::max;\n+use std::default::Default;\n use std::fmt;\n use std::hash::{Hash, Hasher, sip};\n use std::iter::{FilterMap, Chain, Repeat, Zip};"}, {"sha": "5812aaa5038d09b5fe6a02c61697b0932641a473", "filename": "src/libextra/url.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -16,6 +16,7 @@ use std::cmp::Eq;\n use std::fmt;\n use std::hash::{Hash, sip};\n use std::io::BufReader;\n+use std::from_str::FromStr;\n use std::uint;\n \n use collections::HashMap;"}, {"sha": "053d73c010e392f1345d85a305d0c012021702fe", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -139,7 +139,7 @@ impl StackPool {\n     pub fn take_stack(&mut self, min_size: uint) -> Stack {\n         // Ideally this would be a binary search\n         match self.stacks.iter().position(|s| min_size <= s.min_size) {\n-            Some(idx) => self.stacks.swap_remove(idx),\n+            Some(idx) => self.stacks.swap_remove(idx).unwrap(),\n             None => Stack::new(min_size)\n         }\n     }"}, {"sha": "63f48ea9d222ff9d2f76216a5d5cb01326d41109", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -20,6 +20,7 @@ use Integer;\n \n use std::cmp;\n use std::fmt;\n+use std::from_str::FromStr;\n use std::num::{Bitwise, ToPrimitive, FromPrimitive};\n use std::num::{Zero, One, ToStrRadix, FromStrRadix};\n use std::rand::Rng;\n@@ -1397,8 +1398,9 @@ mod biguint_tests {\n     use super::{Plus, BigInt, RandBigInt, ToBigInt};\n \n     use std::cmp::{Less, Equal, Greater};\n+    use std::from_str::FromStr;\n     use std::i64;\n-    use std::num::{Zero, One, FromStrRadix};\n+    use std::num::{Zero, One, FromStrRadix, ToStrRadix};\n     use std::num::{ToPrimitive, FromPrimitive};\n     use std::rand::{task_rng};\n     use std::str;\n@@ -2056,7 +2058,7 @@ mod bigint_tests {\n \n     use std::cmp::{Less, Equal, Greater};\n     use std::i64;\n-    use std::num::{Zero, One, FromStrRadix};\n+    use std::num::{Zero, One, FromStrRadix, ToStrRadix};\n     use std::num::{ToPrimitive, FromPrimitive};\n     use std::rand::{task_rng};\n     use std::u64;"}, {"sha": "79ff54cb90c68d9222a55b7defea793dd6a8f4f1", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -333,7 +333,7 @@ impl<T: FromStrRadix + Clone + Integer + Ord>\n mod test {\n \n     use super::{Ratio, Rational, BigRational};\n-    use std::num::{Zero,One,FromStrRadix,FromPrimitive};\n+    use std::num::{Zero, One, FromStrRadix, FromPrimitive, ToStrRadix};\n     use std::from_str::FromStr;\n \n     pub static _0 : Rational = Ratio { numer: 0, denom: 1};"}, {"sha": "e0c570664fe5c9a38885962dee7fec92e7f1e709", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -145,7 +145,10 @@ impl Archive {\n     /// Lists all files in an archive\n     pub fn files(&self) -> ~[~str] {\n         let output = run_ar(self.sess, \"t\", None, [&self.dst]);\n-        str::from_utf8(output.output).unwrap().lines().map(|s| s.to_owned()).collect()\n+        let output = str::from_utf8(output.output).unwrap();\n+        // use lines_any because windows delimits output with `\\r\\n` instead of\n+        // just `\\n`\n+        output.lines_any().map(|s| s.to_owned()).collect()\n     }\n \n     fn add_archive(&mut self, archive: &Path, name: &str,"}, {"sha": "1f5b76953dcdec417b60cdfea25ed20fe7d92b36", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -67,6 +67,18 @@ pub struct ArchiveMetadata {\n     priv data: &'static [u8],\n }\n \n+// FIXME(#11857) this should be a \"real\" realpath\n+fn realpath(p: &Path) -> Path {\n+    use std::os;\n+    use std::io::fs;\n+\n+    let path = os::make_absolute(p);\n+    match fs::readlink(&path) {\n+        Ok(p) => p,\n+        Err(..) => path\n+    }\n+}\n+\n impl Context {\n     pub fn load_library_crate(&self, root_ident: Option<~str>) -> Library {\n         match self.find_library_crate() {\n@@ -121,7 +133,7 @@ impl Context {\n                             (HashSet::new(), HashSet::new())\n                         });\n                         let (ref mut rlibs, _) = *slot;\n-                        rlibs.insert(path.clone());\n+                        rlibs.insert(realpath(path));\n                         FileMatches\n                     }\n                     None => {\n@@ -138,7 +150,7 @@ impl Context {\n                             (HashSet::new(), HashSet::new())\n                         });\n                         let (_, ref mut dylibs) = *slot;\n-                        dylibs.insert(path.clone());\n+                        dylibs.insert(realpath(path));\n                         FileMatches\n                     }\n                     None => {"}, {"sha": "263ed47b29e347788a50ca0193d18e65541268cc", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -160,16 +160,8 @@ fn gather_loans_in_local(this: &mut GatherLoanCtxt,\n             })\n         }\n         Some(init) => {\n-            // Variable declarations with initializers are considered \"assigns\":\n-            let tcx = this.bccx.tcx;\n-            pat_util::pat_bindings(tcx.def_map, local.pat, |_, id, span, _| {\n-                gather_moves::gather_assignment(this.bccx,\n-                                                &this.move_data,\n-                                                id,\n-                                                span,\n-                                                @LpVar(id),\n-                                                id);\n-            });\n+            // Variable declarations with initializers are considered \"assigns\",\n+            // which is handled by `gather_pat`:\n             let init_cmt = this.bccx.cat_expr(init);\n             this.gather_pat(init_cmt, local.pat, None);\n         }\n@@ -811,6 +803,17 @@ impl<'a> GatherLoanCtxt<'a> {\n         self.bccx.cat_pattern(discr_cmt, root_pat, |cmt, pat| {\n             match pat.node {\n               ast::PatIdent(bm, _, _) if self.pat_is_binding(pat) => {\n+                // Each match binding is effectively an assignment.\n+                let tcx = self.bccx.tcx;\n+                pat_util::pat_bindings(tcx.def_map, pat, |_, id, span, _| {\n+                    gather_moves::gather_assignment(self.bccx,\n+                                                    &self.move_data,\n+                                                    id,\n+                                                    span,\n+                                                    @LpVar(id),\n+                                                    id);\n+                });\n+\n                 match bm {\n                   ast::BindByRef(mutbl) => {\n                     // ref x or ref x @ p --- creates a ptr which must"}, {"sha": "5df6c231b5c233974490cfe306d971e7c2cea4cb", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -282,6 +282,7 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n                 if !type_is_immediate(ccx, arg_ty) {\n                     unsafe {\n                         llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n+                        llvm::LLVMAddAttribute(llarg, lib::llvm::NoCaptureAttribute as c_uint);\n                     }\n                 }\n             }"}, {"sha": "2376603fcc8f97c47ebe08ae1fd052986a6e2b73", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -295,6 +295,7 @@ impl Default for bool {\n mod tests {\n     use prelude::*;\n     use super::all_values;\n+    use from_str::FromStr;\n \n     #[test]\n     fn test_bool() {"}, {"sha": "f67ba8fce03e07ffa423c785aa88f5b3f1ef6a1c", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -340,6 +340,7 @@ impl FromStr for SocketAddr {\n mod test {\n     use prelude::*;\n     use super::*;\n+    use from_str::FromStr;\n \n     #[test]\n     fn test_from_str_ipv4() {"}, {"sha": "a686edef99e69481c99ec23c0cbc8b9d9ad75641", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@ use prelude::*;\n \n use cmath;\n use default::Default;\n+use from_str::FromStr;\n use libc::{c_float, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n use num::{Zero, One, Bounded, strconv};"}, {"sha": "026bd651e0e3f91217fe92930cbf070ef34c2f62", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -16,6 +16,7 @@ use prelude::*;\n \n use cmath;\n use default::Default;\n+use from_str::FromStr;\n use libc::{c_double, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n use num::{Zero, One, Bounded, strconv};"}, {"sha": "0ecb55e510608406c08f5eb170e14ac5d3b294ad", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "0526f2c488b207979f330a1af071c7e873c3546f", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "0c1c01dbf4ab80954b70cc827f8b0e2369f39b1c", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;\n use num::{Bitwise, Bounded, CheckedAdd, CheckedSub};"}, {"sha": "881cc46201ef577c468d3798e81e1ccd7c1c1bae", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "83c9e8ea855bc0d577a6ad60ab7b87407dd3cc13", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded, CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "ea62a3ec374d3b3c991442ca0e4c05a18f13c506", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -295,8 +295,9 @@ mod tests {\n     use int;\n     use i32;\n     use num;\n-    use num::CheckedDiv;\n     use num::Bitwise;\n+    use num::CheckedDiv;\n+    use num::ToStrRadix;\n \n     #[test]\n     fn test_overflows() {"}, {"sha": "d1de1ff0a723cb762e18808cdeff194c1afabf8e", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};"}, {"sha": "1caec67802539fe178729fe23e8017a2781555e5", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};"}, {"sha": "ab495834eaa5f98b14b46b22947f2af2d623facc", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded};\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;"}, {"sha": "a0ef574f6cf2f9d46aa70894baa4c5db171a71cd", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};"}, {"sha": "95d4a3a50be576b890e3d9db0777603dac52d84c", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -15,6 +15,7 @@\n use prelude::*;\n \n use default::Default;\n+use from_str::FromStr;\n use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};"}, {"sha": "719afeb78784a64d24cc3386900d61514c20efae", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -233,6 +233,7 @@ mod tests {\n     use num;\n     use num::CheckedDiv;\n     use num::Bitwise;\n+    use num::ToStrRadix;\n     use u16;\n \n     #[test]"}, {"sha": "cc1a14a4f822d2fa33d2ec350c88910781e2f055", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -43,14 +43,12 @@ pub use char::Char;\n pub use clone::{Clone, DeepClone};\n pub use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n-pub use default::Default;\n-pub use from_str::FromStr;\n pub use iter::{FromIterator, Extendable};\n pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Signed, Unsigned, Round};\n-pub use num::{Primitive, Int, Float, ToStrRadix, ToPrimitive, FromPrimitive};\n+pub use num::{Primitive, Int, Float, ToPrimitive, FromPrimitive};\n pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n pub use ptr::RawPtr;\n pub use io::{Buffer, Writer, Reader, Seek};"}, {"sha": "a916ce173fb60ac3f3984ae3a536a9833f262d88", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -144,6 +144,7 @@ impl Default for ReseedWithDefault {\n mod test {\n     use prelude::*;\n     use super::*;\n+    use default::Default;\n     use rand::{SeedableRng, Rng};\n \n     struct Counter {"}, {"sha": "12044b4a06a5bd3765626b517c7257cecfcce44f", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -3072,6 +3072,7 @@ impl Default for ~str {\n #[cfg(test)]\n mod tests {\n     use iter::AdditiveIterator;\n+    use default::Default;\n     use prelude::*;\n     use str::*;\n "}, {"sha": "cf49ea535623d3b0304ea550233dd3ff61b1cc1f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -1368,13 +1368,24 @@ pub trait OwnedVector<T> {\n     /// ```\n     fn remove(&mut self, i: uint) -> Option<T>;\n \n-    /**\n-     * Remove an element from anywhere in the vector and return it, replacing it\n-     * with the last element. This does not preserve ordering, but is O(1).\n-     *\n-     * Fails if index >= length.\n-     */\n-    fn swap_remove(&mut self, index: uint) -> T;\n+    /// Remove an element from anywhere in the vector and return it, replacing it\n+    /// with the last element. This does not preserve ordering, but is O(1).\n+    ///\n+    /// Returns `None` if `index` is out of bounds.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// let mut v = ~[~\"foo\", ~\"bar\", ~\"baz\", ~\"qux\"];\n+    ///\n+    /// assert_eq!(v.swap_remove(1), Some(~\"bar\"));\n+    /// assert_eq!(v, ~[~\"foo\", ~\"qux\", ~\"baz\"]);\n+    ///\n+    /// assert_eq!(v.swap_remove(0), Some(~\"foo\"));\n+    /// assert_eq!(v, ~[~\"baz\", ~\"qux\"]);\n+    ///\n+    /// assert_eq!(v.swap_remove(2), None);\n+    /// ```\n+    fn swap_remove(&mut self, index: uint) -> Option<T>;\n \n     /// Shorten a vector, dropping excess elements.\n     fn truncate(&mut self, newlen: uint);\n@@ -1580,15 +1591,14 @@ impl<T> OwnedVector<T> for ~[T] {\n             None\n         }\n     }\n-    fn swap_remove(&mut self, index: uint) -> T {\n+    fn swap_remove(&mut self, index: uint) -> Option<T> {\n         let ln = self.len();\n-        if index >= ln {\n-            fail!(\"vec::swap_remove - index {} >= length {}\", index, ln);\n-        }\n         if index < ln - 1 {\n             self.swap(index, ln - 1);\n+        } else if index >= ln {\n+            return None\n         }\n-        self.pop().unwrap()\n+        self.pop()\n     }\n     fn truncate(&mut self, newlen: uint) {\n         let oldlen = self.len();\n@@ -3194,15 +3204,15 @@ mod tests {\n     fn test_swap_remove() {\n         let mut v = ~[1, 2, 3, 4, 5];\n         let mut e = v.swap_remove(0);\n-        assert_eq!(v.len(), 4);\n-        assert_eq!(e, 1);\n-        assert_eq!(v[0], 5);\n+        assert_eq!(e, Some(1));\n+        assert_eq!(v, ~[5, 2, 3, 4]);\n         e = v.swap_remove(3);\n-        assert_eq!(v.len(), 3);\n-        assert_eq!(e, 4);\n-        assert_eq!(v[0], 5);\n-        assert_eq!(v[1], 2);\n-        assert_eq!(v[2], 3);\n+        assert_eq!(e, Some(4));\n+        assert_eq!(v, ~[5, 2, 3]);\n+\n+        e = v.swap_remove(3);\n+        assert_eq!(e, None);\n+        assert_eq!(v, ~[5, 2, 3]);\n     }\n \n     #[test]"}, {"sha": "52d3405f8c1480f1eec2165350fb774c5c5b2a45", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -18,6 +18,7 @@ use container::Container;\n use iter::{DoubleEndedIterator, FromIterator, Iterator};\n use libc::{free, c_void};\n use mem::{size_of, move_val_init};\n+use num;\n use num::CheckedMul;\n use ops::Drop;\n use option::{None, Option, Some};\n@@ -136,6 +137,12 @@ impl<T> Vec<T> {\n         self.cap\n     }\n \n+    pub fn reserve(&mut self, capacity: uint) {\n+        if capacity >= self.len {\n+            self.reserve_exact(num::next_power_of_two(capacity))\n+        }\n+    }\n+\n     pub fn reserve_exact(&mut self, capacity: uint) {\n         if capacity >= self.len {\n             let size = capacity.checked_mul(&size_of::<T>()).expect(\"capacity overflow\");\n@@ -277,15 +284,14 @@ impl<T> Vec<T> {\n     }\n \n     #[inline]\n-    pub fn swap_remove(&mut self, index: uint) -> T {\n+    pub fn swap_remove(&mut self, index: uint) -> Option<T> {\n         let length = self.len();\n-        if index >= length {\n-            fail!(\"Vec::swap_remove - index {} >= length {}\", index, length);\n-        }\n         if index < length - 1 {\n             self.as_mut_slice().swap(index, length - 1);\n+        } else if index >= length {\n+            return None\n         }\n-        self.pop().unwrap()\n+        self.pop()\n     }\n \n     #[inline]\n@@ -297,7 +303,7 @@ impl<T> Vec<T> {\n         let len = self.len();\n         assert!(index <= len);\n         // space for the new element\n-        self.reserve_exact(len + 1);\n+        self.reserve(len + 1);\n \n         unsafe { // infallible\n             // The spot to put the new value\n@@ -392,4 +398,3 @@ impl<T> Drop for MoveItems<T> {\n         }\n     }\n }\n-"}, {"sha": "a67d1b933a857295ca064405297ae9b15b7d12c3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -460,11 +460,12 @@ impl CodeMap {\n         for mbc in multibyte_chars.get().iter() {\n             debug!(\"codemap: {:?}-byte char at {:?}\", mbc.bytes, mbc.pos);\n             if mbc.pos < bpos {\n-                total_extra_bytes += mbc.bytes;\n+                // every character is at least one byte, so we only\n+                // count the actual extra bytes.\n+                total_extra_bytes += mbc.bytes - 1;\n                 // We should never see a byte position in the middle of a\n                 // character\n-                assert!(bpos == mbc.pos ||\n-                        bpos.to_uint() >= mbc.pos.to_uint() + mbc.bytes);\n+                assert!(bpos.to_uint() >= mbc.pos.to_uint() + mbc.bytes);\n             } else {\n                 break;\n             }"}, {"sha": "659cd13c94dd1be378ebf26a1400fd51d32eb9bd", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -17,6 +17,9 @@ use std::fmt;\n /// `1.0`. If no crate name is given after the hash, the name is inferred to\n /// be the last component of the path. If no version is given, it is inferred\n /// to be `0.0`.\n+\n+use std::from_str::FromStr;\n+\n #[deriving(Clone, Eq)]\n pub struct CrateId {\n     /// A path which represents the codes origin. By convention this is the"}, {"sha": "325df0ba77775c06eafc497a960989336725911a", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -16,6 +16,7 @@\n  */\n \n use std::vec;\n+use std::default::Default;\n \n #[deriving(Clone, Encodable, Decodable, Hash)]\n pub enum OptVec<T> {"}, {"sha": "5bace75a5eace6bcc48837c09d5369878d2191b8", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -264,8 +264,7 @@ pub fn bump(rdr: &StringReader) {\n         }\n \n         if byte_offset_diff > 1 {\n-            rdr.filemap.record_multibyte_char(\n-                Pos::from_uint(current_byte_offset), byte_offset_diff);\n+            rdr.filemap.record_multibyte_char(rdr.last_pos.get(), byte_offset_diff);\n         }\n     } else {\n         rdr.curr.set(None);"}, {"sha": "cbe371a06a53448b3a75f13a6227b162bcee5c30", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -3185,15 +3185,35 @@ impl Parser {\n             let pth = self.parse_path(NoTypesAllowed).path;\n             self.bump();\n \n-            let id = if self.token == token::LPAREN {\n+            let id = if self.token == token::LPAREN || self.token == token::LBRACE {\n                 token::special_idents::invalid // no special identifier\n             } else {\n                 self.parse_ident()\n             };\n \n+            // check that we're pointing at delimiters (need to check\n+            // again after the `if`, because of `parse_ident`\n+            // consuming more tokens).\n+            let (bra, ket) = match self.token {\n+                token::LPAREN => (token::LPAREN, token::RPAREN),\n+                token::LBRACE => (token::LBRACE, token::RBRACE),\n+                _ => {\n+                    // we only expect an ident if we didn't parse one\n+                    // above.\n+                    let ident_str = if id == token::special_idents::invalid {\n+                        \"identifier, \"\n+                    } else {\n+                        \"\"\n+                    };\n+                    let tok_str = self.this_token_to_str();\n+                    self.fatal(format!(\"expected {}`(` or `\\\\{`, but found `{}`\",\n+                                       ident_str, tok_str))\n+                }\n+            };\n+\n             let tts = self.parse_unspanned_seq(\n-                &token::LPAREN,\n-                &token::RPAREN,\n+                &bra,\n+                &ket,\n                 seq_sep_none(),\n                 |p| p.parse_token_tree()\n             );"}, {"sha": "02950c075829f944d74f674f9da83bb476eb2b23", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -41,6 +41,7 @@ use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n use std::cmp;\n use std::f64;\n use std::fmt;\n+use std::from_str::FromStr;\n use std::io::stdio::StdWriter;\n use std::io::{File, PortReader, ChanWriter};\n use std::io;"}, {"sha": "8dbdedc18483a1dd899c4c3cff42c20b55169d94", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -66,7 +66,9 @@ extern crate serialize;\n \n use std::cast::{transmute,transmute_copy};\n use std::char::Char;\n+use std::default::Default;\n use std::fmt;\n+use std::from_str::FromStr;\n use std::hash::{Hash, sip};\n use std::num::FromStrRadix;\n use std::rand::Rng;"}, {"sha": "6ce6fb503a1d81b38611b85770cbee8202a88a64", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -55,6 +55,8 @@ fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {\n }\n \n fn main() {\n+    use std::from_str::FromStr;\n+\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"2000000\", ~\"503\"]\n     }"}, {"sha": "72d9afd4d2b2be8f51718ebfa486ab435b883248", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that immutable pattern bindings cannot be reassigned.\n+\n+enum E {\n+    Foo(int)\n+}\n+\n+struct S {\n+    bar: int,\n+}\n+\n+pub fn main() {\n+    match 1i {\n+        x => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match Foo(1) {\n+        Foo(x) => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match S { bar: 1 } {\n+        S { bar: x } => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match (1i,) {\n+        (x,) => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+\n+    match [1,2,3] {\n+        [x,_,_] => {\n+            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+        }\n+    }\n+}"}, {"sha": "f7609a767a7e089ea232c4faf72cac3a7f75b788", "filename": "src/test/compile-fail/issue-9814.rs", "status": "renamed", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9814.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,26 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n+// Verify that single-variant enums cant be de-referenced\n+// Regression test for issue #9814\n \n-struct T { f: extern \"Rust\" fn() };\n-struct S { f: extern \"Rust\" fn() };\n-\n-fn fooS(t: S) {\n-}\n-\n-fn fooT(t: T) {\n-}\n-\n-fn bar() {\n-}\n+enum Foo { Bar(int) }\n \n fn main() {\n-    let x: extern \"Rust\" fn() = bar;\n-    fooS(S {f: x});\n-    fooS(S {f: bar});\n-\n-    let x: extern \"Rust\" fn() = bar;\n-    fooT(T {f: x});\n-    fooT(T {f: bar});\n+    let _ = *Bar(2); //~ ERROR type `Foo` cannot be dereferenced\n }", "previous_filename": "src/test/compile-fail/issue-1451.rs"}, {"sha": "6f3b8bd421f86e3585e9b1346447e201ef6104e3", "filename": "src/test/compile-fail/macro-bad-delimiter-ident.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fmacro-bad-delimiter-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fmacro-bad-delimiter-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-bad-delimiter-ident.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    foo! bar < //~ ERROR expected `(` or `{`, but found `<`\n+}"}, {"sha": "d03698c1573b17cd8b2414d605c7feb4ab3a035d", "filename": "src/test/compile-fail/macro-mismatched-delim-brace-paren.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fmacro-mismatched-delim-brace-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fmacro-mismatched-delim-brace-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-mismatched-delim-brace-paren.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    foo! {\n+        bar, \"baz\", 1, 2.0\n+    ) //~ ERROR incorrect close delimiter\n+}"}, {"sha": "d80f93d7ad0d03d1dcc74c5bb16194fd4449bc16", "filename": "src/test/compile-fail/macro-mismatched-delim-paren-brace.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fmacro-mismatched-delim-paren-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Fcompile-fail%2Fmacro-mismatched-delim-paren-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-mismatched-delim-paren-brace.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    foo! (\n+        bar, \"baz\", 1, 2.0\n+    } //~ ERROR incorrect close delimiter\n+}"}, {"sha": "3f1b82d1768d6acb964fb65fe0e4d62db41deaa2", "filename": "src/test/compile-fail/vec-add.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/043c9721791731bbf7b9d8be354a65ed25b9a6d9/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043c9721791731bbf7b9d8be354a65ed25b9a6d9/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-add.rs?ref=043c9721791731bbf7b9d8be354a65ed25b9a6d9", "patch": "@@ -1,73 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-// FIXME (Issue #2711): + should allow immutable or mutable vectors on\n-// the right hand side in all cases. We are getting compiler errors\n-// about this now, so I'm ignoring the test for now. -eholk\n-\n-fn add(i: ~[int], mut m: ~[int]) {\n-\n-    // Check that:\n-    //  (1) vectors of any two mutabilities can be added\n-    //  (2) result has mutability of lhs\n-\n-   add(i + ~[3],\n-       m + ~[3],\n-       ~[3]);\n-\n-   add(i + ~[3],\n-       m + ~[3],\n-       ~[3]);\n-\n-   add(i + i,\n-       m + i,\n-       i);\n-\n-   add(i + m,\n-       m + m,\n-       m);\n-\n-   add(m + ~[3], //~ ERROR mismatched types\n-       m + ~[3],\n-       m + ~[3]);\n-\n-   add(i + ~[3],\n-       i + ~[3], //~ ERROR mismatched types\n-       i + ~[3]);\n-\n-   add(m + ~[3], //~ ERROR mismatched types\n-       m + ~[3],\n-       m + ~[3]);\n-\n-   add(i + ~[3],\n-       i + ~[3], //~ ERROR mismatched types\n-       i + ~[3]);\n-\n-   add(m + i, //~ ERROR mismatched types\n-       m + i,\n-       m + i);\n-\n-   add(i + i,\n-       i + i, //~ ERROR mismatched types\n-       i + i);\n-\n-   add(m + m, //~ ERROR mismatched types\n-       m + m,\n-       m + m);\n-\n-   add(i + m,\n-       i + m, //~ ERROR mismatched types\n-       i + m);\n-}\n-\n-fn main() {\n-}"}, {"sha": "45ef241c28f7f5c621be37a2bea6e3db5a507343", "filename": "src/test/run-make/symlinked-libraries/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2FMakefile?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs\n+\tmkdir -p $(TMPDIR)/other\n+\tln -nsf $(TMPDIR)/$(call DYLIB_GLOB,foo) $(TMPDIR)/other\n+\t$(RUSTC) bar.rs -L $(TMPDIR)/other"}, {"sha": "73596f93f568503f06b288f90c84f5824970b44f", "filename": "src/test/run-make/symlinked-libraries/bar.rs", "status": "renamed", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Fbar.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -8,16 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n+extern crate foo;\n \n fn main() {\n-    let one: || -> uint = || {\n-        enum r { a };\n-        a as uint\n-    };\n-    let two = || -> uint = || {\n-        enum r { a };\n-        a as uint\n-    };\n-    one(); two();\n+    foo::bar();\n }", "previous_filename": "src/test/compile-fail/issue-2074.rs"}, {"sha": "9fbe36f0376d6e18b5e8667723a164cc19ffe8c7", "filename": "src/test/run-make/symlinked-libraries/foo.rs", "status": "renamed", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymlinked-libraries%2Ffoo.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -8,14 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test - #2093\n+#[crate_type = \"dylib\"];\n \n-fn let_in<T>(x: T, f: |T|) {}\n-\n-fn main() {\n-    let_in(3u, |i| { assert!(i == 3); });\n-    //~^ ERROR expected `uint` but found `int`\n-\n-    let_in(3, |i| { assert!(i == 3u); });\n-    //~^ ERROR expected `int` but found `uint`\n-}\n+pub fn bar() {}", "previous_filename": "src/test/compile-fail/omitted-arg-wrong-types.rs"}, {"sha": "2d6ecd3c55efcf3b5da0d256e2f0c05ee87ff81a", "filename": "src/test/run-make/unicode-input/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+all:\n+\t# check that we don't ICE on unicode input, issue #11178\n+\t$(RUSTC) multiple_files.rs\n+\t$(call RUN,multiple_files)  \"$(RUSTC)\" \"$(TMPDIR)\"\n+\n+\t# check that our multibyte-ident spans are (approximately) the\n+\t# correct length. issue #8706\n+\t$(RUSTC) span_length.rs\n+\t$(call RUN,span_length) \"$(RUSTC)\" \"$(TMPDIR)\""}, {"sha": "80371aa984052d693c7d61d1555d2900fff61fe4", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,65 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{char, os, str};\n+use std::rand::{task_rng, Rng};\n+use std::io::{File, Process};\n+\n+// creates unicode_input_multiple_files_{main,chars}.rs, where the\n+// former imports the latter. `_chars` just contains an indentifier\n+// made up of random characters, because will emit an error message\n+// about the ident being in the wrong place, with a span (and creating\n+// this span used to upset the compiler).\n+\n+fn random_char() -> char {\n+    let mut rng = task_rng();\n+    // a subset of the XID_start unicode table (ensuring that the\n+    // compiler doesn't fail with an \"unrecognised token\" error)\n+    let (lo, hi): (u32, u32) = match rng.gen_range(1, 4 + 1) {\n+        1 => (0x41, 0x5a),\n+        2 => (0xf8, 0x1ba),\n+        3 => (0x1401, 0x166c),\n+        _ => (0x10400, 0x1044f)\n+    };\n+\n+    char::from_u32(rng.gen_range(lo, hi + 1)).unwrap()\n+}\n+\n+fn main() {\n+    let args = os::args();\n+    let rustc = args[1].as_slice();\n+    let tmpdir = Path::new(args[2].as_slice());\n+\n+    let main_file = tmpdir.join(\"unicode_input_multiple_files_main.rs\");\n+    let main_file_str = main_file.as_str().unwrap();\n+    {\n+        let _ = File::create(&main_file).unwrap()\n+            .write_str(\"mod unicode_input_multiple_files_chars;\");\n+    }\n+\n+    for _ in range(0, 100) {\n+        {\n+            let randoms = tmpdir.join(\"unicode_input_multiple_files_chars.rs\");\n+            let mut w = File::create(&randoms).unwrap();\n+            for _ in range(0, 30) {\n+                let _ = w.write_char(random_char());\n+            }\n+        }\n+\n+        // rustc is passed to us with --out-dir and -L etc., so we\n+        // can't exec it directly\n+        let result = Process::output(\"sh\", [~\"-c\", rustc + \" \" + main_file_str]).unwrap();\n+        let err = str::from_utf8_lossy(result.error);\n+\n+        // positive test so that this test will be updated when the\n+        // compiler changes.\n+        assert!(err.as_slice().contains(\"expected item but found\"))\n+    }\n+}"}, {"sha": "3227f672bcd66a3b3f7068a3b9f8c17d5ff19a9f", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{char, os, str};\n+use std::rand::{task_rng, Rng};\n+use std::io::{File, Process};\n+\n+// creates a file with `fn main() { <random ident> }` and checks the\n+// compiler emits a span of the appropriate length (for the\n+// \"unresolved name\" message); currently just using the number of code\n+// points, but should be the number of graphemes (FIXME #7043)\n+\n+fn random_char() -> char {\n+    let mut rng = task_rng();\n+    // a subset of the XID_start unicode table (ensuring that the\n+    // compiler doesn't fail with an \"unrecognised token\" error)\n+    let (lo, hi): (u32, u32) = match rng.gen_range(1, 4 + 1) {\n+        1 => (0x41, 0x5a),\n+        2 => (0xf8, 0x1ba),\n+        3 => (0x1401, 0x166c),\n+        _ => (0x10400, 0x1044f)\n+    };\n+\n+    char::from_u32(rng.gen_range(lo, hi + 1)).unwrap()\n+}\n+\n+fn main() {\n+    let args = os::args();\n+    let rustc = args[1].as_slice();\n+    let tmpdir = Path::new(args[2].as_slice());\n+\n+    let main_file = tmpdir.join(\"span_main.rs\");\n+    let main_file_str = main_file.as_str().unwrap();\n+\n+    for _ in range(0, 100) {\n+        let n = task_rng().gen_range(3u, 20);\n+\n+        {\n+            let _ = write!(&mut File::create(&main_file).unwrap(),\n+                           r\"\\#[feature(non_ascii_idents)]; fn main() \\{ {} \\}\",\n+                           // random string of length n\n+                           range(0, n).map(|_| random_char()).collect::<~str>());\n+        }\n+\n+        // rustc is passed to us with --out-dir and -L etc., so we\n+        // can't exec it directly\n+        let result = Process::output(\"sh\", [~\"-c\", rustc + \" \" + main_file_str]).unwrap();\n+\n+        let err = str::from_utf8_lossy(result.error);\n+\n+        // the span should end the line (e.g no extra ~'s)\n+        let expected_span = \"^\" + \"~\".repeat(n - 1) + \"\\n\";\n+        assert!(err.as_slice().contains(expected_span));\n+    }\n+}"}, {"sha": "2a368568f8ca5de53b3d6ff32fafb430f15a2c36", "filename": "src/test/run-pass/macro-with-braces-in-expr-position.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4243cad56bbd266872770218873900da22fed5ea/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-with-braces-in-expr-position.rs?ref=4243cad56bbd266872770218873900da22fed5ea", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+macro_rules! expr (($e: expr) => { $e })\n+\n+macro_rules! spawn {\n+    ($($code: tt)*) => {\n+        expr!(spawn(proc() {$($code)*}))\n+    }\n+}\n+\n+pub fn main() {\n+    spawn! {\n+        info!(\"stmt\");\n+    };\n+    let _ = spawn! {\n+        info!(\"expr\");\n+    };\n+}"}]}