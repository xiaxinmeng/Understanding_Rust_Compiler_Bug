{"sha": "60a49384f589e5d6fa0b572d3876c4ba7532c230", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTQ5Mzg0ZjU4OWU1ZDZmYTBiNTcyZDM4NzZjNGJhNzUzMmMyMzA=", "commit": {"author": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-07T09:37:34Z"}, "committer": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-07T16:27:21Z"}, "message": "normalize use of backticks in compiler messages for librustc_typecheck\n\nhttps://github.com/rust-lang/rust/issues/60532", "tree": {"sha": "9f347f8f05fbd01ba8f7c66defae0fec16fdc325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f347f8f05fbd01ba8f7c66defae0fec16fdc325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a49384f589e5d6fa0b572d3876c4ba7532c230", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEExrhwoK6DmrCETV5+4ilOki9MVuUFAl0iHXMACgkQ4ilOki9M\nVuXGugv/bCSvxK8PKCDrGtOvDRAjrV9b7svQTPGFEY9fCdWjRyttT6CbJvsMC6g1\nC2LaGmjOLiLP57EwPz9mGZ38ebCFEMtoT/IWsjJ7jjhZ7JVpA8fFMQlCZQwOrR7O\nlyw/0NmMPqaL5HMnKWfvwAb7eI2HGZOi8DHgF81MdS+TjAk2hFVPFuaAwuTRfXaZ\nRLAydsGeI2GA6OFLzjXiVcn1qAjGsPgoWInJ+fpFLcAHMFEEB7ZM0G3g7jF/fqfQ\nDSHokbDLdeEpXh5dTjHJbdB8naEbhakSft4D+hXtHRcQuZVGnPdRcK2OANc1oWK4\nk3aV3ITe0anZ0U36ObbvSzz1Ux+aRAm6K2ZypTAIEMemeHm/I9MAIzPKM0AbM3qb\nsxOgPhPk5i8ptraftBrx8bv5p2X2Jroo76AYuBsWXyHFw++/BjxjpKsb0tEeXl9G\n3vj87Db3uNgD40ViUnpDk6fAn216p3UHx14p75Jiiuha/aTU32vGvWPnOaeApVZI\nN0hSam3f\n=dHq9\n-----END PGP SIGNATURE-----", "payload": "tree 9f347f8f05fbd01ba8f7c66defae0fec16fdc325\nparent dd2e8040a35883574ae0c4cc7a4e887ecb66469c\nauthor Samy Kacimi <samy.kacimi@protonmail.ch> 1562492254 +0200\ncommitter Samy Kacimi <samy.kacimi@protonmail.ch> 1562516841 +0200\n\nnormalize use of backticks in compiler messages for librustc_typecheck\n\nhttps://github.com/rust-lang/rust/issues/60532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a49384f589e5d6fa0b572d3876c4ba7532c230", "html_url": "https://github.com/rust-lang/rust/commit/60a49384f589e5d6fa0b572d3876c4ba7532c230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a49384f589e5d6fa0b572d3876c4ba7532c230/comments", "author": null, "committer": null, "parents": [{"sha": "dd2e8040a35883574ae0c4cc7a4e887ecb66469c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2e8040a35883574ae0c4cc7a4e887ecb66469c", "html_url": "https://github.com/rust-lang/rust/commit/dd2e8040a35883574ae0c4cc7a4e887ecb66469c"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "7e0ecc725745f600ed6a41ff582b7c83559eb9ee", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -459,7 +459,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let (unsize_did, coerce_unsized_did) = if let (Some(u), Some(cu)) = traits {\n             (u, cu)\n         } else {\n-            debug!(\"Missing Unsize or CoerceUnsized traits\");\n+            debug!(\"missing Unsize or CoerceUnsized traits\");\n             return Err(TypeError::Mismatch);\n         };\n "}, {"sha": "5cee3d63ffc0491523085e5705f08f04fbc31ef6", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -130,7 +130,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     // if a Sync generator contains an &'\u03b1 T, we need to check whether &'\u03b1 T: Sync),\n     // so knowledge of the exact relationships between them isn't particularly important.\n \n-    debug!(\"Types in generator {:?}, span = {:?}\", type_list, body.value.span);\n+    debug!(\"types in generator {:?}, span = {:?}\", type_list, body.value.span);\n \n     // Replace all regions inside the generator interior with late bound regions\n     // Note that each region slot in the types gets a new fresh late bound region,\n@@ -144,7 +144,7 @@ pub fn resolve_interior<'a, 'tcx>(\n \n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));\n \n-    debug!(\"Types in generator after region replacement {:?}, span = {:?}\",\n+    debug!(\"types in generator after region replacement {:?}, span = {:?}\",\n             witness, body.value.span);\n \n     // Unify the type variable inside the generator with the new witness"}, {"sha": "41979509a3c5d5eb0edfd82876716815cf2225b0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -1230,7 +1230,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         if nightly_options::is_nightly_build() {\n             for (candidate, feature) in unstable_candidates {\n                 diag.help(&format!(\n-                    \"add #![feature({})] to the crate attributes to enable `{}`\",\n+                    \"add `#![feature({})]` to the crate attributes to enable `{}`\",\n                     feature,\n                     self.tcx.def_path_str(candidate.item.def_id),\n                 ));\n@@ -1432,7 +1432,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     /// candidate method where the method name may have been misspelt. Similarly to other\n     /// Levenshtein based suggestions, we provide at most one such suggestion.\n     fn probe_for_lev_candidate(&mut self) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n-        debug!(\"Probing for method names similar to {:?}\",\n+        debug!(\"probing for method names similar to {:?}\",\n                self.method_name);\n \n         let steps = self.steps.clone();"}, {"sha": "d578a894add2d7a8f44350e8c20f13f90e0c3e9e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -983,7 +983,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         };\n         self.assign(local.span, local.hir_id, local_ty);\n \n-        debug!(\"Local variable {:?} is assigned type {}\",\n+        debug!(\"local variable {:?} is assigned type {}\",\n                local.pat,\n                self.fcx.ty_to_string(\n                    self.fcx.locals.borrow().get(&local.hir_id).unwrap().clone().decl_ty));\n@@ -1000,7 +1000,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                                                traits::VariableType(p.hir_id));\n             }\n \n-            debug!(\"Pattern binding {} is assigned to {} with type {:?}\",\n+            debug!(\"pattern binding {} is assigned to {} with type {:?}\",\n                    ident,\n                    self.fcx.ty_to_string(\n                        self.fcx.locals.borrow().get(&p.hir_id).unwrap().clone().decl_ty),\n@@ -4462,7 +4462,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n \n     for leaf_ty in ty.walk() {\n         if let ty::Param(ty::ParamTy { index, .. }) = leaf_ty.sty {\n-            debug!(\"Found use of ty param num {}\", index);\n+            debug!(\"found use of ty param num {}\", index);\n             types_used[index as usize - own_counts.lifetimes] = true;\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit"}, {"sha": "fe6d91b0a6eba7f7ffbe658bf9ab6d29581d8099", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -799,7 +799,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         debug!(\"callee_region={:?}\", callee_region);\n \n         for arg_expr in arg_exprs {\n-            debug!(\"Argument: {:?}\", arg_expr);\n+            debug!(\"argument: {:?}\", arg_expr);\n \n             // ensure that any regions appearing in the argument type are\n             // valid for at least the lifetime of the function:"}, {"sha": "9d389669ff4ceac00d30e1933f462891a996b7c2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -646,7 +646,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let n_ty = self.fcx.node_ty(hir_id);\n         let n_ty = self.resolve(&n_ty, &span);\n         self.write_ty_to_tables(hir_id, n_ty);\n-        debug!(\"Node {:?} has type {:?}\", hir_id, n_ty);\n+        debug!(\"node {:?} has type {:?}\", hir_id, n_ty);\n \n         // Resolve any substitutions\n         if let Some(substs) = self.fcx.tables.borrow().node_substs_opt(hir_id) {\n@@ -665,13 +665,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             .remove(hir_id);\n         match adjustment {\n             None => {\n-                debug!(\"No adjustments for node {:?}\", hir_id);\n+                debug!(\"no adjustments for node {:?}\", hir_id);\n             }\n \n             Some(adjustment) => {\n                 let resolved_adjustment = self.resolve(&adjustment, &span);\n                 debug!(\n-                    \"Adjustments for node {:?}: {:?}\",\n+                    \"adjustments for node {:?}: {:?}\",\n                     hir_id, resolved_adjustment\n                 );\n                 self.tables\n@@ -689,7 +689,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             .remove(hir_id);\n         match adjustment {\n             None => {\n-                debug!(\"No pat_adjustments for node {:?}\", hir_id);\n+                debug!(\"no pat_adjustments for node {:?}\", hir_id);\n             }\n \n             Some(adjustment) => {"}, {"sha": "5420a2407e66f7f62e738798b760fa947260cacc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -2256,7 +2256,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                            tcx.hir().hir_to_pretty_string(ast_ty.hir_id)\n                        ),\n                    )\n-                   .help(\"add #![feature(simd_ffi)] to the crate attributes to enable\")\n+                   .help(\"add `#![feature(simd_ffi)]` to the crate attributes to enable\")\n                    .emit();\n             }\n         };\n@@ -2479,7 +2479,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.check_name(sym::target_feature) {\n             if tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n-                let msg = \"#[target_feature(..)] can only be applied to `unsafe` functions\";\n+                let msg = \"`#[target_feature(..)]` can only be applied to `unsafe` functions\";\n                 tcx.sess.struct_span_err(attr.span, msg)\n                     .span_label(attr.span, \"can only be applied to `unsafe` functions\")\n                     .span_label(tcx.def_span(id), \"not an `unsafe` function\")\n@@ -2593,8 +2593,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             if let Some(span) = inline_span {\n                 tcx.sess.span_err(\n                     span,\n-                    \"cannot use #[inline(always)] with \\\n-                     #[target_feature]\",\n+                    \"cannot use `#[inline(always)]` with \\\n+                     `#[target_feature]`\",\n                 );\n             }\n         }"}, {"sha": "19d5e8b3e84470eae62ca5a4bb878b4b6d99f237", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -4848,6 +4848,6 @@ register_diagnostics! {\n     E0641, // cannot cast to/from a pointer with an unknown kind\n     E0645, // trait aliases not finished\n     E0719, // duplicate values for associated type binding\n-    E0722, // Malformed #[optimize] attribute\n+    E0722, // Malformed `#[optimize]` attribute\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions\n }"}, {"sha": "1176c5ebb3d3055c5ee52acb9ee173aedfc60e51", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n                 let old_value = self.solutions[inferred];\n                 let new_value = glb(variance, old_value);\n                 if old_value != new_value {\n-                    debug!(\"Updating inferred {} \\\n+                    debug!(\"updating inferred {} \\\n                             from {:?} to {:?} due to {:?}\",\n                            inferred,\n                            old_value,"}, {"sha": "8166b6baa286a6b585fe319dd72a0969a21665c5", "filename": "src/test/ui/feature-gates/feature-gate-simd-ffi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.stderr?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -4,15 +4,15 @@ error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result\n LL |     fn baz() -> LocalSimd;\n    |                 ^^^^^^^^^\n    |\n-   = help: add #![feature(simd_ffi)] to the crate attributes to enable\n+   = help: add `#![feature(simd_ffi)]` to the crate attributes to enable\n \n error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result in invalid code\n   --> $DIR/feature-gate-simd-ffi.rs:10:15\n    |\n LL |     fn qux(x: LocalSimd);\n    |               ^^^^^^^^^\n    |\n-   = help: add #![feature(simd_ffi)] to the crate attributes to enable\n+   = help: add `#![feature(simd_ffi)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c3d8f7ccf372ab438996f677556f43edf148447", "filename": "src/test/ui/inference/inference_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -8,5 +8,5 @@ LL |     assert_eq!('x'.ipu_flatten(), 1);\n    = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method\n-   = help: add #![feature(ipu_flatten)] to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n+   = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n "}, {"sha": "646a98763e1b36f904af4688a9de4535a8faf4cb", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -25,7 +25,7 @@\n unsafe fn foo() {}\n \n #[target_feature(enable = \"sse2\")]\n-//~^ ERROR #[target_feature(..)] can only be applied to `unsafe` functions\n+//~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n //~| NOTE can only be applied to `unsafe` functions\n fn bar() {}\n //~^ NOTE not an `unsafe` function\n@@ -36,7 +36,7 @@ mod another {}\n //~^ NOTE not a function\n \n #[inline(always)]\n-//~^ ERROR: cannot use #[inline(always)]\n+//~^ ERROR: cannot use `#[inline(always)]`\n #[target_feature(enable = \"sse2\")]\n unsafe fn test() {}\n "}, {"sha": "47ca5a5ca478c5c0a3a30604712f36a40c2c3c86", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60a49384f589e5d6fa0b572d3876c4ba7532c230/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=60a49384f589e5d6fa0b572d3876c4ba7532c230", "patch": "@@ -22,7 +22,7 @@ error: malformed `target_feature` attribute input\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n-error: #[target_feature(..)] can only be applied to `unsafe` functions\n+error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/target-feature-wrong.rs:27:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n@@ -40,7 +40,7 @@ LL |\n LL | mod another {}\n    | -------------- not a function\n \n-error: cannot use #[inline(always)] with #[target_feature]\n+error: cannot use `#[inline(always)]` with `#[target_feature]`\n   --> $DIR/target-feature-wrong.rs:38:1\n    |\n LL | #[inline(always)]"}]}