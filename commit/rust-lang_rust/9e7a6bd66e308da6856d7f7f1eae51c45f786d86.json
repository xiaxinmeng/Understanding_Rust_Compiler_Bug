{"sha": "9e7a6bd66e308da6856d7f7f1eae51c45f786d86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllN2E2YmQ2NmUzMDhkYTY4NTZkN2Y3ZjFlYWU1MWM0NWY3ODZkODY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-06-24T17:17:44Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-06-24T17:17:44Z"}, "message": "Method resolution for slices", "tree": {"sha": "f8769a556dcec26b5212b194ee6857bbe62f9f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8769a556dcec26b5212b194ee6857bbe62f9f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e7a6bd66e308da6856d7f7f1eae51c45f786d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7a6bd66e308da6856d7f7f1eae51c45f786d86", "html_url": "https://github.com/rust-lang/rust/commit/9e7a6bd66e308da6856d7f7f1eae51c45f786d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e7a6bd66e308da6856d7f7f1eae51c45f786d86/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364ac9b9468e1930f39e0dddc454b2eb7d68f360", "url": "https://api.github.com/repos/rust-lang/rust/commits/364ac9b9468e1930f39e0dddc454b2eb7d68f360", "html_url": "https://github.com/rust-lang/rust/commit/364ac9b9468e1930f39e0dddc454b2eb7d68f360"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "080ba1ef6cfd1f7bb0b727e6b2dcd20405bce0c3", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9e7a6bd66e308da6856d7f7f1eae51c45f786d86/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e7a6bd66e308da6856d7f7f1eae51c45f786d86/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=9e7a6bd66e308da6856d7f7f1eae51c45f786d86", "patch": "@@ -4,6 +4,7 @@\n //! and the corresponding code mostly in librustc_typeck/check/method/probe.rs.\n use std::sync::Arc;\n \n+use arrayvec::ArrayVec;\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -113,19 +114,30 @@ impl CrateImplBlocks {\n     }\n }\n \n-fn def_crate(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<Crate> {\n+fn def_crates(db: &impl HirDatabase, cur_crate: Crate, ty: &Ty) -> Option<ArrayVec<[Crate; 2]>> {\n+    macro_rules! lang_item_crate {\n+        ($db:expr, $cur_crate:expr, $($name:expr),+ $(,)?) => {{\n+            let mut v = ArrayVec::<[Crate; 2]>::new();\n+            $(\n+                v.push($db.lang_item($cur_crate, $name.into())?.krate($db)?);\n+            )+\n+            Some(v)\n+        }};\n+    }\n+\n     match ty {\n         Ty::Apply(a_ty) => match a_ty.ctor {\n-            TypeCtor::Adt(def_id) => def_id.krate(db),\n-            TypeCtor::Bool => db.lang_item(cur_crate, \"bool\".into())?.krate(db),\n-            TypeCtor::Char => db.lang_item(cur_crate, \"char\".into())?.krate(db),\n+            TypeCtor::Adt(def_id) => Some(std::iter::once(def_id.krate(db)?).collect()),\n+            TypeCtor::Bool => lang_item_crate![db, cur_crate, \"bool\"],\n+            TypeCtor::Char => lang_item_crate![db, cur_crate, \"char\"],\n             TypeCtor::Float(UncertainFloatTy::Known(f)) => {\n-                db.lang_item(cur_crate, f.ty_to_string().into())?.krate(db)\n+                lang_item_crate![db, cur_crate, f.ty_to_string()]\n             }\n             TypeCtor::Int(UncertainIntTy::Known(i)) => {\n-                db.lang_item(cur_crate, i.ty_to_string().into())?.krate(db)\n+                lang_item_crate![db, cur_crate, i.ty_to_string()]\n             }\n-            TypeCtor::Str => db.lang_item(cur_crate, \"str\".into())?.krate(db),\n+            TypeCtor::Str => lang_item_crate![db, cur_crate, \"str\"],\n+            TypeCtor::Slice => lang_item_crate![db, cur_crate, \"slice_alloc\", \"slice\"],\n             _ => None,\n         },\n         _ => None,\n@@ -218,19 +230,17 @@ fn iterate_inherent_methods<T>(\n     krate: Crate,\n     mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n ) -> Option<T> {\n-    let krate = match def_crate(db, krate, &ty.value) {\n-        Some(krate) => krate,\n-        None => return None,\n-    };\n-    let impls = db.impls_in_crate(krate);\n+    for krate in def_crates(db, krate, &ty.value)? {\n+        let impls = db.impls_in_crate(krate);\n \n-    for impl_block in impls.lookup_impl_blocks(&ty.value) {\n-        for item in impl_block.items(db) {\n-            if let ImplItem::Method(f) = item {\n-                let data = f.data(db);\n-                if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n-                    if let Some(result) = callback(&ty.value, f) {\n-                        return Some(result);\n+        for impl_block in impls.lookup_impl_blocks(&ty.value) {\n+            for item in impl_block.items(db) {\n+                if let ImplItem::Method(f) = item {\n+                    let data = f.data(db);\n+                    if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n+                        if let Some(result) = callback(&ty.value, f) {\n+                            return Some(result);\n+                        }\n                     }\n                 }\n             }\n@@ -248,13 +258,14 @@ impl Ty {\n         krate: Crate,\n         mut callback: impl FnMut(ImplItem) -> Option<T>,\n     ) -> Option<T> {\n-        let krate = def_crate(db, krate, &self)?;\n-        let impls = db.impls_in_crate(krate);\n+        for krate in def_crates(db, krate, &self)? {\n+            let impls = db.impls_in_crate(krate);\n \n-        for impl_block in impls.lookup_impl_blocks(&self) {\n-            for item in impl_block.items(db) {\n-                if let Some(result) = callback(item) {\n-                    return Some(result);\n+            for impl_block in impls.lookup_impl_blocks(&self) {\n+                for item in impl_block.items(db) {\n+                    if let Some(result) = callback(item) {\n+                        return Some(result);\n+                    }\n                 }\n             }\n         }"}]}