{"sha": "4f7ec0170353e61c148909d2716c915578392a7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmN2VjMDE3MDM1M2U2MWMxNDg5MDlkMjcxNmM5MTU1NzgzOTJhN2I=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T09:33:45Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T09:33:45Z"}, "message": "Merge #309\n\n309: Fix edits r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c4a7a0dae2ccbc6b6d987faca8002a22d0253382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4a7a0dae2ccbc6b6d987faca8002a22d0253382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7ec0170353e61c148909d2716c915578392a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ec0170353e61c148909d2716c915578392a7b", "html_url": "https://github.com/rust-lang/rust/commit/4f7ec0170353e61c148909d2716c915578392a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ec0170353e61c148909d2716c915578392a7b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "164d53b22f345e50c67781af545310d2193e8a5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/164d53b22f345e50c67781af545310d2193e8a5c", "html_url": "https://github.com/rust-lang/rust/commit/164d53b22f345e50c67781af545310d2193e8a5c"}, {"sha": "fd927ea3a9ea687ba11b01e56579f0287221f55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd927ea3a9ea687ba11b01e56579f0287221f55c", "html_url": "https://github.com/rust-lang/rust/commit/fd927ea3a9ea687ba11b01e56579f0287221f55c"}], "stats": {"total": 90, "additions": 55, "deletions": 35}, "files": [{"sha": "5701e1ae233aa35b13d6b19520bbefd53caff12c", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -368,10 +368,11 @@ impl AnalysisImpl {\n             .collect::<Vec<_>>();\n         if let Some(m) = source_binder::module_from_file_id(&*self.db, file_id)? {\n             for (name_node, problem) in m.problems(&*self.db) {\n+                let source_root = self.db.file_source_root(file_id);\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {\n                         let create_file = FileSystemEdit::CreateFile {\n-                            anchor: file_id,\n+                            source_root,\n                             path: candidate.clone(),\n                         };\n                         let fix = SourceChange {\n@@ -388,11 +389,12 @@ impl AnalysisImpl {\n                     }\n                     Problem::NotDirOwner { move_to, candidate } => {\n                         let move_file = FileSystemEdit::MoveFile {\n-                            file: file_id,\n-                            path: move_to.clone(),\n+                            src: file_id,\n+                            dst_source_root: source_root,\n+                            dst_path: move_to.clone(),\n                         };\n                         let create_file = FileSystemEdit::CreateFile {\n-                            anchor: file_id,\n+                            source_root,\n                             path: move_to.join(candidate),\n                         };\n                         let fix = SourceChange {\n@@ -520,7 +522,7 @@ impl SourceChange {\n     pub(crate) fn from_local_edit(file_id: FileId, label: &str, edit: LocalEdit) -> SourceChange {\n         let file_edit = SourceFileEdit {\n             file_id,\n-            edits: edit.edit.into_atoms(),\n+            edit: edit.edit,\n         };\n         SourceChange {\n             label: label.to_string(),"}, {"sha": "c7e7dc1c030acca359c990da30e5d0ac000e8b1f", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -20,7 +20,7 @@ use std::{fmt, sync::Arc};\n \n use rustc_hash::FxHashMap;\n use ra_syntax::{SourceFileNode, TextRange, TextUnit};\n-use ra_text_edit::AtomTextEdit;\n+use ra_text_edit::TextEdit;\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n \n@@ -167,18 +167,19 @@ pub struct SourceChange {\n #[derive(Debug)]\n pub struct SourceFileEdit {\n     pub file_id: FileId,\n-    pub edits: Vec<AtomTextEdit>,\n+    pub edit: TextEdit,\n }\n \n #[derive(Debug)]\n pub enum FileSystemEdit {\n     CreateFile {\n-        anchor: FileId,\n+        source_root: SourceRootId,\n         path: RelativePathBuf,\n     },\n     MoveFile {\n-        file: FileId,\n-        path: RelativePathBuf,\n+        src: FileId,\n+        dst_source_root: SourceRootId,\n+        dst_path: RelativePathBuf,\n     },\n }\n "}, {"sha": "67738da48f869518ef0ac901c70c5e2a0c7af276", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -81,7 +81,7 @@ fn test_unresolved_module_diagnostic() {\n             fix: Some(SourceChange {\n                 label: \"create module\",\n                 source_file_edits: [],\n-                file_system_edits: [CreateFile { anchor: FileId(1), path: \"../foo.rs\" }],\n+                file_system_edits: [CreateFile { source_root: SourceRootId(0), path: \"foo.rs\" }],\n                 cursor_position: None }) }]\"#,\n         &diagnostics,\n     );"}, {"sha": "748fdb64e2f76f2196a56e03eb2d5a24c57e3d2e", "filename": "crates/ra_hir/src/module/imp.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     ast::{self, NameOwner},\n     SmolStr,\n };\n-use relative_path::{RelativePathBuf, RelativePath};\n+use relative_path::RelativePathBuf;\n use rustc_hash::{FxHashMap, FxHashSet};\n use arrayvec::ArrayVec;\n use ra_db::{SourceRoot, SourceRootId, Cancelable, FileId};\n@@ -184,11 +184,7 @@ fn resolve_submodule(\n         .collect::<Vec<_>>();\n     let problem = if points_to.is_empty() {\n         Some(Problem::UnresolvedModule {\n-            candidate: RelativePath::new(\"../\").join(&if is_dir_owner {\n-                file_mod\n-            } else {\n-                file_dir_mod\n-            }),\n+            candidate: if is_dir_owner { file_mod } else { file_dir_mod },\n         })\n     } else {\n         None"}, {"sha": "218ded4eecf9138a77ed2be435ea0292e3b65b76", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -97,21 +97,21 @@ impl ConvWith for TextEdit {\n     type Output = Vec<languageserver_types::TextEdit>;\n \n     fn conv_with(self, line_index: &LineIndex) -> Vec<languageserver_types::TextEdit> {\n-        self.into_atoms()\n+        self.as_atoms()\n             .into_iter()\n             .map_conv_with(line_index)\n             .collect()\n     }\n }\n \n-impl ConvWith for AtomTextEdit {\n+impl<'a> ConvWith for &'a AtomTextEdit {\n     type Ctx = LineIndex;\n     type Output = languageserver_types::TextEdit;\n \n     fn conv_with(self, line_index: &LineIndex) -> languageserver_types::TextEdit {\n         languageserver_types::TextEdit {\n             range: self.delete.conv_with(line_index),\n-            new_text: self.insert,\n+            new_text: self.insert.clone(),\n         }\n     }\n }\n@@ -199,7 +199,7 @@ impl TryConvWith for SourceChange {\n                     .source_file_edits\n                     .iter()\n                     .find(|it| it.file_id == pos.file_id)\n-                    .map(|it| it.edits.as_slice())\n+                    .map(|it| it.edit.as_atoms())\n                     .unwrap_or(&[]);\n                 let line_col = translate_offset_with_edit(&*line_index, pos.offset, edits);\n                 let position =\n@@ -265,7 +265,12 @@ impl TryConvWith for SourceFileEdit {\n             version: None,\n         };\n         let line_index = world.analysis().file_line_index(self.file_id);\n-        let edits = self.edits.into_iter().map_conv_with(&line_index).collect();\n+        let edits = self\n+            .edit\n+            .as_atoms()\n+            .iter()\n+            .map_conv_with(&line_index)\n+            .collect();\n         Ok(TextDocumentEdit {\n             text_document,\n             edits,\n@@ -278,16 +283,17 @@ impl TryConvWith for FileSystemEdit {\n     type Output = req::FileSystemEdit;\n     fn try_conv_with(self, world: &ServerWorld) -> Result<req::FileSystemEdit> {\n         let res = match self {\n-            FileSystemEdit::CreateFile { anchor, path } => {\n-                let uri = world.file_id_to_uri(anchor)?;\n-                let path = &path.as_str()[3..]; // strip `../` b/c url is weird\n-                let uri = uri.join(path)?;\n+            FileSystemEdit::CreateFile { source_root, path } => {\n+                let uri = world.path_to_uri(source_root, &path)?;\n                 req::FileSystemEdit::CreateFile { uri }\n             }\n-            FileSystemEdit::MoveFile { file, path } => {\n-                let src = world.file_id_to_uri(file)?;\n-                let path = &path.as_str()[3..]; // strip `../` b/c url is weird\n-                let dst = src.join(path)?;\n+            FileSystemEdit::MoveFile {\n+                src,\n+                dst_source_root,\n+                dst_path,\n+            } => {\n+                let src = world.file_id_to_uri(src)?;\n+                let dst = world.path_to_uri(dst_source_root, &dst_path)?;\n                 req::FileSystemEdit::MoveFile { src, dst }\n             }\n         };"}, {"sha": "1751d7fa81bffbd3fcba3b76e92ce3f3c20e8577", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -107,9 +107,16 @@ pub fn handle_on_type_formatting(\n     };\n     let edits = match world.analysis().on_eq_typed(position) {\n         None => return Ok(None),\n-        Some(mut action) => action.source_file_edits.pop().unwrap().edits,\n+        Some(mut action) => action\n+            .source_file_edits\n+            .pop()\n+            .unwrap()\n+            .edit\n+            .as_atoms()\n+            .iter()\n+            .map_conv_with(&line_index)\n+            .collect(),\n     };\n-    let edits = edits.into_iter().map_conv_with(&line_index).collect();\n     Ok(Some(edits))\n }\n "}, {"sha": "73cccc9dd901650155360791937620aba2a8dddf", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -8,7 +8,7 @@ use ra_analysis::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData,\n     SourceRootId\n };\n-use ra_vfs::{Vfs, VfsChange, VfsFile};\n+use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot};\n use rustc_hash::FxHashMap;\n use relative_path::RelativePathBuf;\n use parking_lot::RwLock;\n@@ -183,4 +183,12 @@ impl ServerWorld {\n             .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n         Ok(url)\n     }\n+\n+    pub fn path_to_uri(&self, root: SourceRootId, path: &RelativePathBuf) -> Result<Url> {\n+        let base = self.vfs.read().root2path(VfsRoot(root.0));\n+        let path = path.to_path(base);\n+        let url = Url::from_file_path(&path)\n+            .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n+        Ok(url)\n+    }\n }"}, {"sha": "392968d638f369fe5a57c25a71f58916a2b0a0d5", "filename": "crates/ra_text_edit/src/text_edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ec0170353e61c148909d2716c915578392a7b/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs?ref=4f7ec0170353e61c148909d2716c915578392a7b", "patch": "@@ -41,8 +41,8 @@ impl TextEditBuilder {\n }\n \n impl TextEdit {\n-    pub fn into_atoms(self) -> Vec<AtomTextEdit> {\n-        self.atoms\n+    pub fn as_atoms(&self) -> &[AtomTextEdit] {\n+        &self.atoms\n     }\n \n     pub fn apply(&self, text: &str) -> String {"}]}