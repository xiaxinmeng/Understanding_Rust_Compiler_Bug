{"sha": "70ea57bcb37bb57444fafbb80be8f6d1846090f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZWE1N2JjYjM3YmI1NzQ0NGZhZmJiODBiZThmNmQxODQ2MDkwZjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-30T19:57:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-30T19:57:24Z"}, "message": "Rollup merge of #62063 - ecstatic-morse:dataflow-backward-order, r=nagisa\n\nUse a more efficient iteration order for backward dataflow\n\nThis applies the same basic principle as #62062 to the reverse dataflow analysis used to compute liveness information. It is functionally equivalent, except that post-order is used instead of reverse post-order.\n\nIn the long-term, `BitDenotation` should probably be extended to support both forward and backward dataflow, but there's some more work needed to get to that point.", "tree": {"sha": "0908476f929ea46ea1fc0e6583013de8281ddabc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0908476f929ea46ea1fc0e6583013de8281ddabc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ea57bcb37bb57444fafbb80be8f6d1846090f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdGRQkCRBK7hj4Ov3rIwAAdHIIAAyJ+5DgRlQUzPAQmxYFwli0\ns5IaeyxVvb0jC6UmUYjiE2qPGGnifCTRJYbt6QprGDgWAxNdMGNFlcbZQ9if73+P\n8wP+6TNwp2cPlVWazoJ8wADbo2JFHIo08GC1GY4eMgaGMBPP2OUKni7CSK02JNap\njcWn+5mphg9/hdxFh7oDa83cYbwoQCjvSEZoerjL0lzfiW/NfVGepEit2DdF2V91\nREjEqUTrO7fiod3fAK+MuHGFh9bfTenmfb57fzOt07jx5YSye6HFju4KMSrDXB6Q\nLDgZYQhx91Gd98FBTysqTv7O5exVvBx0EyeewQE5lwrJtOEpIAnSHBIj7naElrc=\n=TN7r\n-----END PGP SIGNATURE-----\n", "payload": "tree 0908476f929ea46ea1fc0e6583013de8281ddabc\nparent 543c4648bd2028672d091cec378a50034c8709a0\nparent e2479e263ef1135dcd1318cce51ee8fafeae62ae\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561924644 +0200\ncommitter GitHub <noreply@github.com> 1561924644 +0200\n\nRollup merge of #62063 - ecstatic-morse:dataflow-backward-order, r=nagisa\n\nUse a more efficient iteration order for backward dataflow\n\nThis applies the same basic principle as #62062 to the reverse dataflow analysis used to compute liveness information. It is functionally equivalent, except that post-order is used instead of reverse post-order.\n\nIn the long-term, `BitDenotation` should probably be extended to support both forward and backward dataflow, but there's some more work needed to get to that point.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ea57bcb37bb57444fafbb80be8f6d1846090f3", "html_url": "https://github.com/rust-lang/rust/commit/70ea57bcb37bb57444fafbb80be8f6d1846090f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ea57bcb37bb57444fafbb80be8f6d1846090f3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543c4648bd2028672d091cec378a50034c8709a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/543c4648bd2028672d091cec378a50034c8709a0", "html_url": "https://github.com/rust-lang/rust/commit/543c4648bd2028672d091cec378a50034c8709a0"}, {"sha": "e2479e263ef1135dcd1318cce51ee8fafeae62ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2479e263ef1135dcd1318cce51ee8fafeae62ae", "html_url": "https://github.com/rust-lang/rust/commit/e2479e263ef1135dcd1318cce51ee8fafeae62ae"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "8ead571d9664decb5df16745a30252b2d96ab464", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70ea57bcb37bb57444fafbb80be8f6d1846090f3/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ea57bcb37bb57444fafbb80be8f6d1846090f3/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=70ea57bcb37bb57444fafbb80be8f6d1846090f3", "patch": "@@ -75,9 +75,24 @@ pub fn liveness_of_locals<'tcx>(\n \n     let mut bits = LiveVarSet::new_empty(num_live_vars);\n \n-    // queue of things that need to be re-processed, and a set containing\n-    // the things currently in the queue\n-    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_all(body.basic_blocks().len());\n+    // The dirty queue contains the set of basic blocks whose entry sets have changed since they\n+    // were last processed. At the start of the analysis, we initialize the queue in post-order to\n+    // make it more likely that the entry set for a given basic block will have the effects of all\n+    // its successors in the CFG applied before it is processed.\n+    //\n+    // FIXME(ecstaticmorse): Reverse post-order on the reverse CFG may generate a better iteration\n+    // order when cycles are present, but the overhead of computing the reverse CFG may outweigh\n+    // any benefits. Benchmark this and find out.\n+    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body.basic_blocks().len());\n+    for (bb, _) in traversal::postorder(body) {\n+        dirty_queue.insert(bb);\n+    }\n+\n+    // Add blocks which are not reachable from START_BLOCK to the work queue. These blocks will\n+    // be processed after the ones added above.\n+    for bb in body.basic_blocks().indices() {\n+        dirty_queue.insert(bb);\n+    }\n \n     let predecessors = body.predecessors();\n "}]}