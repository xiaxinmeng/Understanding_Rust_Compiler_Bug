{"sha": "3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "node_id": "C_kwDOAAsO6NoAKDNhOTBiZWRiMzMyZDdkN2VhYmZjMWU5OGExZTNkOTY4OTg1NzllMWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T07:27:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T07:27:09Z"}, "message": "Auto merge of #96296 - cjgillot:remove-label-lt-shadow, r=petrochenkov\n\nRemove label/lifetime shadowing warnings\n\nThis PR removes some pre-1.0 shadowing warnings for labels and lifetimes.\n\nThe current behaviour of the compiler is to warn\n* labels that shadow unrelated labels in the same function --> removed\n```rust\n'a: loop {}\n'a: loop {} // STOP WARNING\n```\n\n* labels that shadow enclosing labels --> kept, but only if shadowing is hygienic\n```rust\n'a: loop {\n  'a: loop {} // KEEP WARNING\n}\n```\n\n* labels that shadow lifetime --> removed\n```rust\nfn foo<'a>() {\n  'a: loop {} // STOP WARNING\n}\n```\n\n* lifetimes that shadow labels --> removed\n```rust\n'a: loop {\n  let b = Box::new(|x: &i8| *x) as Box<dyn for <'a> Fn(&'a i8) -> i8>; // STOP WARNING\n}\n```\n\n* lifetimes that shadow lifetimes --> kept\n```rust\nfn foo<'a>() {\n  let b = Box::new(|x: &i8| *x) as Box<dyn for <'a> Fn(&'a i8) -> i8>; // KEEP WARNING\n}\n```\n\nCloses https://github.com/rust-lang/rust/issues/31745.\n\n-----\n\nFrom `@petrochenkov` in https://github.com/rust-lang/rust/pull/95781#issuecomment-1105199014\n> I think we should remove these silly checks entirely.\n> They were introduced long time ago in case some new language features appear and require this space.\n> Now we have another mechanism for such language changes - editions, and if \"lifetimes in expressions\" or something like that needs to be introduced it could be introduced as an edition change.\n> However, there was no plans to introduce anything like for years, so it's unlikely that even the edition mechanism will be necessary.\n\nr? rust-lang/lang", "tree": {"sha": "d18addb5c4a51f1ba4dafe54290099ece23766b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d18addb5c4a51f1ba4dafe54290099ece23766b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "html_url": "https://github.com/rust-lang/rust/commit/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5507aa881921f1cef42851ae976317ddb0c09ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5507aa881921f1cef42851ae976317ddb0c09ae", "html_url": "https://github.com/rust-lang/rust/commit/f5507aa881921f1cef42851ae976317ddb0c09ae"}, {"sha": "2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa9c703ce9ce9c69d466481b2fda3268db64f3e", "html_url": "https://github.com/rust-lang/rust/commit/2aa9c703ce9ce9c69d466481b2fda3268db64f3e"}], "stats": {"total": 1974, "additions": 223, "deletions": 1751}, "files": [{"sha": "96db40cb95b971c0b1c046de87f4cde59e79d0d0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1848,14 +1848,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_generic_param(&mut self, param: &GenericParam) -> hir::GenericParam<'hir> {\n         let (name, kind) = match param.kind {\n             GenericParamKind::Lifetime => {\n-                let param_name = if param.ident.name == kw::StaticLifetime\n-                    || param.ident.name == kw::UnderscoreLifetime\n-                {\n-                    ParamName::Error\n-                } else {\n-                    let ident = self.lower_ident(param.ident);\n-                    ParamName::Plain(ident)\n-                };\n+                // AST resolution emitted an error on those parameters, so we lower them using\n+                // `ParamName::Error`.\n+                let param_name =\n+                    if let Some(LifetimeRes::Error) = self.resolver.get_lifetime_res(param.id) {\n+                        ParamName::Error\n+                    } else {\n+                        let ident = self.lower_ident(param.ident);\n+                        ParamName::Plain(ident)\n+                    };\n                 let kind =\n                     hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit };\n \n@@ -1880,10 +1881,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )\n             }\n         };\n-        let name = match name {\n-            hir::ParamName::Plain(ident) => hir::ParamName::Plain(self.lower_ident(ident)),\n-            name => name,\n-        };\n \n         let hir_id = self.lower_node_id(param.id);\n         self.lower_attrs(hir_id, &param.attrs);"}, {"sha": "2d1ac40264de19f4326d5a473ef99842e8920cf5", "filename": "compiler/rustc_error_codes/src/error_codes/E0263.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0263.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0263.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0263.md?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A lifetime was declared more than once in the same scope.\n \n Erroneous code example:\n \n-```compile_fail,E0263\n+```compile_fail,E0403\n fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str, z: &'a str) { // error!\n }\n ```"}, {"sha": "288c89b0189c440a486356e9470244c828f2d433", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 70, "deletions": 44, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -172,6 +172,23 @@ impl RibKind<'_> {\n             AssocItemRibKind | ItemRibKind(_) | ForwardGenericParamBanRibKind => true,\n         }\n     }\n+\n+    /// This rib forbids referring to labels defined in upwards ribs.\n+    fn is_label_barrier(self) -> bool {\n+        match self {\n+            NormalRibKind | MacroDefinition(..) => false,\n+\n+            AssocItemRibKind\n+            | ClosureOrAsyncRibKind\n+            | FnItemRibKind\n+            | ItemRibKind(..)\n+            | ConstantItemRibKind(..)\n+            | ModuleRibKind(..)\n+            | ForwardGenericParamBanRibKind\n+            | ConstParamTyRibKind\n+            | InlineAsmSymRibKind => true,\n+        }\n+    }\n }\n \n /// A single local scope.\n@@ -732,7 +749,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         // Create a value rib for the function.\n         self.with_rib(ValueNS, rib_kind, |this| {\n             // Create a label rib for the function.\n-            this.with_label_rib(rib_kind, |this| {\n+            this.with_label_rib(FnItemRibKind, |this| {\n                 let async_node_id = fn_kind.header().and_then(|h| h.asyncness.opt_return_id());\n \n                 if let FnKind::Fn(_, _, _, _, generics, _) = fn_kind {\n@@ -1531,13 +1548,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     /// Searches the current set of local scopes for labels. Returns the `NodeId` of the resolved\n     /// label and reports an error if the label is not found or is unreachable.\n-    fn resolve_label(&mut self, mut label: Ident) -> Option<NodeId> {\n+    fn resolve_label(&mut self, mut label: Ident) -> Result<(NodeId, Span), ResolutionError<'a>> {\n         let mut suggestion = None;\n \n-        // Preserve the original span so that errors contain \"in this macro invocation\"\n-        // information.\n-        let original_span = label.span;\n-\n         for i in (0..self.label_ribs.len()).rev() {\n             let rib = &self.label_ribs[i];\n \n@@ -1553,18 +1566,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             if let Some((ident, id)) = rib.bindings.get_key_value(&ident) {\n                 let definition_span = ident.span;\n                 return if self.is_label_valid_from_rib(i) {\n-                    Some(*id)\n+                    Ok((*id, definition_span))\n                 } else {\n-                    self.report_error(\n-                        original_span,\n-                        ResolutionError::UnreachableLabel {\n-                            name: label.name,\n-                            definition_span,\n-                            suggestion,\n-                        },\n-                    );\n-\n-                    None\n+                    Err(ResolutionError::UnreachableLabel {\n+                        name: label.name,\n+                        definition_span,\n+                        suggestion,\n+                    })\n                 };\n             }\n \n@@ -1573,34 +1581,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             suggestion = suggestion.or_else(|| self.suggestion_for_label_in_rib(i, label));\n         }\n \n-        self.report_error(\n-            original_span,\n-            ResolutionError::UndeclaredLabel { name: label.name, suggestion },\n-        );\n-        None\n+        Err(ResolutionError::UndeclaredLabel { name: label.name, suggestion })\n     }\n \n     /// Determine whether or not a label from the `rib_index`th label rib is reachable.\n     fn is_label_valid_from_rib(&self, rib_index: usize) -> bool {\n         let ribs = &self.label_ribs[rib_index + 1..];\n \n         for rib in ribs {\n-            match rib.kind {\n-                NormalRibKind | MacroDefinition(..) => {\n-                    // Nothing to do. Continue.\n-                }\n-\n-                AssocItemRibKind\n-                | ClosureOrAsyncRibKind\n-                | FnItemRibKind\n-                | ItemRibKind(..)\n-                | ConstantItemRibKind(..)\n-                | ModuleRibKind(..)\n-                | ForwardGenericParamBanRibKind\n-                | ConstParamTyRibKind\n-                | InlineAsmSymRibKind => {\n-                    return false;\n-                }\n+            if rib.kind.is_label_barrier() {\n+                return false;\n             }\n         }\n \n@@ -1895,6 +1885,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let mut function_value_rib = Rib::new(kind);\n         let mut function_lifetime_rib = LifetimeRib::new(lifetime_kind);\n         let mut seen_bindings = FxHashMap::default();\n+        // Store all seen lifetimes names from outer scopes.\n+        let mut seen_lifetimes = FxHashSet::default();\n \n         // We also can't shadow bindings from the parent item\n         if let AssocItemRibKind = kind {\n@@ -1910,16 +1902,36 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             add_bindings_for_ns(TypeNS);\n         }\n \n+        // Forbid shadowing lifetime bindings\n+        for rib in self.lifetime_ribs.iter().rev() {\n+            seen_lifetimes.extend(rib.bindings.iter().map(|(ident, _)| *ident));\n+            if let LifetimeRibKind::Item = rib.kind {\n+                break;\n+            }\n+        }\n+\n         for param in params {\n             let ident = param.ident.normalize_to_macros_2_0();\n             debug!(\"with_generic_param_rib: {}\", param.id);\n \n+            if let GenericParamKind::Lifetime = param.kind\n+                && let Some(&original) = seen_lifetimes.get(&ident)\n+            {\n+                diagnostics::signal_lifetime_shadowing(self.r.session, original, param.ident);\n+                // Record lifetime res, so lowering knows there is something fishy.\n+                self.record_lifetime_res(param.id, LifetimeRes::Error);\n+                continue;\n+            }\n+\n             match seen_bindings.entry(ident) {\n                 Entry::Occupied(entry) => {\n                     let span = *entry.get();\n                     let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, span);\n-                    if !matches!(param.kind, GenericParamKind::Lifetime) {\n-                        self.report_error(param.ident.span, err);\n+                    self.report_error(param.ident.span, err);\n+                    if let GenericParamKind::Lifetime = param.kind {\n+                        // Record lifetime res, so lowering knows there is something fishy.\n+                        self.record_lifetime_res(param.id, LifetimeRes::Error);\n+                        continue;\n                     }\n                 }\n                 Entry::Vacant(entry) => {\n@@ -1936,6 +1948,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 )\n                 .span_label(param.ident.span, \"`'_` is a reserved lifetime name\")\n                 .emit();\n+                // Record lifetime res, so lowering knows there is something fishy.\n+                self.record_lifetime_res(param.id, LifetimeRes::Error);\n                 continue;\n             }\n \n@@ -1949,6 +1963,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 )\n                 .span_label(param.ident.span, \"'static is a reserved lifetime name\")\n                 .emit();\n+                // Record lifetime res, so lowering knows there is something fishy.\n+                self.record_lifetime_res(param.id, LifetimeRes::Error);\n                 continue;\n             }\n \n@@ -3114,6 +3130,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             if label.ident.as_str().as_bytes()[1] != b'_' {\n                 self.diagnostic_metadata.unused_labels.insert(id, label.ident.span);\n             }\n+\n+            if let Ok((_, orig_span)) = self.resolve_label(label.ident) {\n+                diagnostics::signal_label_shadowing(self.r.session, orig_span, label.ident)\n+            }\n+\n             self.with_label_rib(NormalRibKind, |this| {\n                 let ident = label.ident.normalize_to_macro_rules();\n                 this.label_ribs.last_mut().unwrap().bindings.insert(ident, id);\n@@ -3219,10 +3240,15 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ExprKind::Break(Some(label), _) | ExprKind::Continue(Some(label)) => {\n-                if let Some(node_id) = self.resolve_label(label.ident) {\n-                    // Since this res is a label, it is never read.\n-                    self.r.label_res_map.insert(expr.id, node_id);\n-                    self.diagnostic_metadata.unused_labels.remove(&node_id);\n+                match self.resolve_label(label.ident) {\n+                    Ok((node_id, _)) => {\n+                        // Since this res is a label, it is never read.\n+                        self.r.label_res_map.insert(expr.id, node_id);\n+                        self.diagnostic_metadata.unused_labels.remove(&node_id);\n+                    }\n+                    Err(error) => {\n+                        self.report_error(label.ident.span, error);\n+                    }\n                 }\n \n                 // visit `break` argument if any"}, {"sha": "9213652e35f8e0e98a38f38773cebe5cf4e3dffe", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -25,6 +25,7 @@ use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -2036,6 +2037,34 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     }\n }\n \n+/// Report lifetime/lifetime shadowing as an error.\n+pub fn signal_lifetime_shadowing(sess: &Session, orig: Ident, shadower: Ident) {\n+    let mut err = struct_span_err!(\n+        sess,\n+        shadower.span,\n+        E0496,\n+        \"lifetime name `{}` shadows a lifetime name that is already in scope\",\n+        orig.name,\n+    );\n+    err.span_label(orig.span, \"first declared here\");\n+    err.span_label(shadower.span, format!(\"lifetime `{}` already in scope\", orig.name));\n+    err.emit();\n+}\n+\n+/// Shadowing involving a label is only a warning for historical reasons.\n+//FIXME: make this a proper lint.\n+pub fn signal_label_shadowing(sess: &Session, orig: Span, shadower: Ident) {\n+    let name = shadower.name;\n+    let shadower = shadower.span;\n+    let mut err = sess.struct_span_warn(\n+        shadower,\n+        &format!(\"label name `{}` shadows a label name that is already in scope\", name),\n+    );\n+    err.span_label(orig, \"first declared here\");\n+    err.span_label(shadower, format!(\"label `{}` already in scope\", name));\n+    err.emit();\n+}\n+\n impl<'tcx> LifetimeContext<'_, 'tcx> {\n     pub(crate) fn report_missing_lifetime_specifiers(\n         &self,"}, {"sha": "59c2db25b8e05ad63e41b9291a445593581429fa", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 34, "deletions": 299, "changes": 333, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::def_id::DefId;\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -161,9 +161,6 @@ pub(crate) struct LifetimeContext<'a, 'tcx> {\n     /// we eventually need lifetimes resolve for trait items.\n     trait_definition_only: bool,\n \n-    /// List of labels in the function/method currently under analysis.\n-    labels_in_fn: Vec<Ident>,\n-\n     /// Cache for cross-crate per-definition object lifetime defaults.\n     xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n \n@@ -434,7 +431,6 @@ fn do_resolve(\n         map: &mut named_region_map,\n         scope: ROOT_SCOPE,\n         trait_definition_only,\n-        labels_in_fn: vec![],\n         xcrate_object_lifetime_defaults: Default::default(),\n         missing_named_lifetime_spots: vec![],\n     };\n@@ -641,14 +637,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n-        // Each body has their own set of labels, save labels.\n-        let saved = take(&mut self.labels_in_fn);\n         let body = self.tcx.hir().body(body);\n-        extract_labels(self, body);\n-        self.with(Scope::Body { id: body.id(), s: self.scope }, |_, this| {\n+        self.with(Scope::Body { id: body.id(), s: self.scope }, |this| {\n             this.visit_body(body);\n         });\n-        self.labels_in_fn = saved;\n     }\n \n     fn visit_fn(\n@@ -683,9 +675,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: true,\n                 };\n-                self.with(scope, move |_old_scope, this| {\n-                    intravisit::walk_fn(this, fk, fd, b, s, hir_id)\n-                });\n+                self.with(scope, move |this| intravisit::walk_fn(this, fk, fd, b, s, hir_id));\n             }\n         }\n     }\n@@ -720,7 +710,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => {\n                 // No lifetime parameters, but implied 'static.\n                 let scope = Scope::Elision { elide: Elide::Exact(Region::Static), s: ROOT_SCOPE };\n-                self.with(scope, |_, this| intravisit::walk_item(this, item));\n+                self.with(scope, |this| intravisit::walk_item(this, item));\n             }\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { .. }) => {\n                 // Opaque types are visited when we visit the\n@@ -807,10 +797,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: ROOT_SCOPE,\n                     allow_late_bound: false,\n                 };\n-                self.with(scope, |old_scope, this| {\n-                    this.check_lifetime_params(old_scope, &generics.params);\n+                self.with(scope, |this| {\n                     let scope = Scope::TraitRefBoundary { s: this.scope };\n-                    this.with(scope, |_, this| {\n+                    this.with(scope, |this| {\n                         intravisit::walk_item(this, item);\n                     });\n                 });\n@@ -873,18 +862,17 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: true,\n                 };\n-                self.with(scope, |old_scope, this| {\n+                self.with(scope, |this| {\n                     // a bare fn has no bounds, so everything\n                     // contained within is scoped within its binder.\n-                    this.check_lifetime_params(old_scope, &c.generic_params);\n                     intravisit::walk_ty(this, ty);\n                 });\n                 self.missing_named_lifetime_spots.pop();\n             }\n             hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n                 debug!(?bounds, ?lifetime, \"TraitObject\");\n                 let scope = Scope::TraitRefBoundary { s: self.scope };\n-                self.with(scope, |_, this| {\n+                self.with(scope, |this| {\n                     for bound in bounds {\n                         this.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n                     }\n@@ -923,7 +911,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     lifetime: self.map.defs.get(&lifetime_ref.hir_id).cloned(),\n                     s: self.scope,\n                 };\n-                self.with(scope, |_, this| this.visit_ty(&mt.ty));\n+                self.with(scope, |this| this.visit_ty(&mt.ty));\n             }\n             hir::TyKind::OpaqueDef(item_id, lifetimes) => {\n                 // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n@@ -944,9 +932,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // Elided lifetimes are not allowed in non-return\n                         // position impl Trait\n                         let scope = Scope::TraitRefBoundary { s: self.scope };\n-                        self.with(scope, |_, this| {\n+                        self.with(scope, |this| {\n                             let scope = Scope::Elision { elide: Elide::Forbid, s: this.scope };\n-                            this.with(scope, |_, this| {\n+                            this.with(scope, |this| {\n                                 intravisit::walk_item(this, opaque_ty);\n                             })\n                         });\n@@ -1052,7 +1040,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 if let Some(elision_region) = elision {\n                     let scope =\n                         Scope::Elision { elide: Elide::Exact(elision_region), s: self.scope };\n-                    self.with(scope, |_old_scope, this| {\n+                    self.with(scope, |this| {\n                         let scope = Scope::Binder {\n                             hir_id: ty.hir_id,\n                             lifetimes,\n@@ -1062,10 +1050,10 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             scope_type: BinderScopeType::Normal,\n                             allow_late_bound: false,\n                         };\n-                        this.with(scope, |_old_scope, this| {\n+                        this.with(scope, |this| {\n                             this.visit_generics(generics);\n                             let scope = Scope::TraitRefBoundary { s: this.scope };\n-                            this.with(scope, |_, this| {\n+                            this.with(scope, |this| {\n                                 for bound in bounds {\n                                     this.visit_param_bound(bound);\n                                 }\n@@ -1082,9 +1070,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         scope_type: BinderScopeType::Normal,\n                         allow_late_bound: false,\n                     };\n-                    self.with(scope, |_old_scope, this| {\n+                    self.with(scope, |this| {\n                         let scope = Scope::TraitRefBoundary { s: this.scope };\n-                        this.with(scope, |_, this| {\n+                        this.with(scope, |this| {\n                             this.visit_generics(generics);\n                             for bound in bounds {\n                                 this.visit_param_bound(bound);\n@@ -1141,10 +1129,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: false,\n                 };\n-                self.with(scope, |old_scope, this| {\n-                    this.check_lifetime_params(old_scope, &generics.params);\n+                self.with(scope, |this| {\n                     let scope = Scope::TraitRefBoundary { s: this.scope };\n-                    this.with(scope, |_, this| {\n+                    this.with(scope, |this| {\n                         this.visit_generics(generics);\n                         for bound in bounds {\n                             this.visit_param_bound(bound);\n@@ -1210,10 +1197,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: true,\n                 };\n-                self.with(scope, |old_scope, this| {\n-                    this.check_lifetime_params(old_scope, &generics.params);\n+                self.with(scope, |this| {\n                     let scope = Scope::TraitRefBoundary { s: this.scope };\n-                    this.with(scope, |_, this| {\n+                    this.with(scope, |this| {\n                         this.visit_generics(generics);\n                         this.visit_ty(ty);\n                     })\n@@ -1300,7 +1286,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {\n         let scope = Scope::TraitRefBoundary { s: self.scope };\n-        self.with(scope, |_, this| {\n+        self.with(scope, |this| {\n             for param in generics.params {\n                 match param.kind {\n                     GenericParamKind::Lifetime { .. } => {}\n@@ -1354,8 +1340,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             scope_type: BinderScopeType::Normal,\n                             allow_late_bound: true,\n                         };\n-                        this.with(scope, |old_scope, this| {\n-                            this.check_lifetime_params(old_scope, &bound_generic_params);\n+                        this.with(scope, |this| {\n                             this.visit_ty(&bounded_ty);\n                             walk_list!(this, visit_param_bound, bounds);\n                         })\n@@ -1427,7 +1412,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     scope_type,\n                     allow_late_bound: true,\n                 };\n-                self.with(scope, |_, this| {\n+                self.with(scope, |this| {\n                     intravisit::walk_param_bound(this, bound);\n                 });\n             }\n@@ -1479,8 +1464,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             scope_type,\n             allow_late_bound: true,\n         };\n-        self.with(scope, |old_scope, this| {\n-            this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n+        self.with(scope, |this| {\n             walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n             this.visit_trait_ref(&trait_ref.trait_ref);\n         });\n@@ -1491,154 +1475,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq)]\n-enum ShadowKind {\n-    Label,\n-    Lifetime,\n-}\n-struct Original {\n-    kind: ShadowKind,\n-    span: Span,\n-}\n-struct Shadower {\n-    kind: ShadowKind,\n-    span: Span,\n-}\n-\n-fn original_label(span: Span) -> Original {\n-    Original { kind: ShadowKind::Label, span }\n-}\n-fn shadower_label(span: Span) -> Shadower {\n-    Shadower { kind: ShadowKind::Label, span }\n-}\n-fn original_lifetime(span: Span) -> Original {\n-    Original { kind: ShadowKind::Lifetime, span }\n-}\n-fn shadower_lifetime(param: &hir::GenericParam<'_>) -> Shadower {\n-    Shadower { kind: ShadowKind::Lifetime, span: param.span }\n-}\n-\n-impl ShadowKind {\n-    fn desc(&self) -> &'static str {\n-        match *self {\n-            ShadowKind::Label => \"label\",\n-            ShadowKind::Lifetime => \"lifetime\",\n-        }\n-    }\n-}\n-\n-fn signal_shadowing_problem(tcx: TyCtxt<'_>, name: Symbol, orig: Original, shadower: Shadower) {\n-    let mut err = if let (ShadowKind::Lifetime, ShadowKind::Lifetime) = (orig.kind, shadower.kind) {\n-        // lifetime/lifetime shadowing is an error\n-        struct_span_err!(\n-            tcx.sess,\n-            shadower.span,\n-            E0496,\n-            \"{} name `{}` shadows a \\\n-             {} name that is already in scope\",\n-            shadower.kind.desc(),\n-            name,\n-            orig.kind.desc()\n-        )\n-        .forget_guarantee()\n-    } else {\n-        // shadowing involving a label is only a warning, due to issues with\n-        // labels and lifetimes not being macro-hygienic.\n-        tcx.sess.struct_span_warn(\n-            shadower.span,\n-            &format!(\n-                \"{} name `{}` shadows a \\\n-                 {} name that is already in scope\",\n-                shadower.kind.desc(),\n-                name,\n-                orig.kind.desc()\n-            ),\n-        )\n-    };\n-    err.span_label(orig.span, \"first declared here\");\n-    err.span_label(shadower.span, format!(\"{} `{}` already in scope\", orig.kind.desc(), name));\n-    err.emit();\n-}\n-\n-// Adds all labels in `b` to `ctxt.labels_in_fn`, signalling a warning\n-// if one of the label shadows a lifetime or another label.\n-fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n-    struct GatherLabels<'a, 'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-        scope: ScopeRef<'a>,\n-        labels_in_fn: &'a mut Vec<Ident>,\n-    }\n-\n-    let mut gather =\n-        GatherLabels { tcx: ctxt.tcx, scope: ctxt.scope, labels_in_fn: &mut ctxt.labels_in_fn };\n-    gather.visit_body(body);\n-\n-    impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        fn visit_expr(&mut self, ex: &hir::Expr<'_>) {\n-            if let Some(label) = expression_label(ex) {\n-                for prior_label in &self.labels_in_fn[..] {\n-                    // FIXME (#24278): non-hygienic comparison\n-                    if label.name == prior_label.name {\n-                        signal_shadowing_problem(\n-                            self.tcx,\n-                            label.name,\n-                            original_label(prior_label.span),\n-                            shadower_label(label.span),\n-                        );\n-                    }\n-                }\n-\n-                check_if_label_shadows_lifetime(self.tcx, self.scope, label);\n-\n-                self.labels_in_fn.push(label);\n-            }\n-            intravisit::walk_expr(self, ex)\n-        }\n-    }\n-\n-    fn expression_label(ex: &hir::Expr<'_>) -> Option<Ident> {\n-        match ex.kind {\n-            hir::ExprKind::Loop(_, Some(label), ..) => Some(label.ident),\n-            hir::ExprKind::Block(_, Some(label)) => Some(label.ident),\n-            _ => None,\n-        }\n-    }\n-\n-    fn check_if_label_shadows_lifetime(tcx: TyCtxt<'_>, mut scope: ScopeRef<'_>, label: Ident) {\n-        loop {\n-            match *scope {\n-                Scope::Body { s, .. }\n-                | Scope::Elision { s, .. }\n-                | Scope::ObjectLifetimeDefault { s, .. }\n-                | Scope::Supertrait { s, .. }\n-                | Scope::TraitRefBoundary { s, .. } => {\n-                    scope = s;\n-                }\n-\n-                Scope::Root => {\n-                    return;\n-                }\n-\n-                Scope::Binder { ref lifetimes, s, .. } => {\n-                    // FIXME (#24278): non-hygienic comparison\n-                    if let Some(def) =\n-                        lifetimes.get(&hir::ParamName::Plain(label.normalize_to_macros_2_0()))\n-                    {\n-                        signal_shadowing_problem(\n-                            tcx,\n-                            label.name,\n-                            original_lifetime(tcx.def_span(def.id().unwrap().expect_local())),\n-                            shadower_label(label.span),\n-                        );\n-                        return;\n-                    }\n-                    scope = s;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n fn compute_object_lifetime_defaults<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     item: &hir::Item<'_>,\n@@ -1774,27 +1610,24 @@ fn object_lifetime_defaults_for_item<'tcx>(\n impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn with<F>(&mut self, wrap_scope: Scope<'_>, f: F)\n     where\n-        F: for<'b> FnOnce(ScopeRef<'_>, &mut LifetimeContext<'b, 'tcx>),\n+        F: for<'b> FnOnce(&mut LifetimeContext<'b, 'tcx>),\n     {\n         let LifetimeContext { tcx, map, .. } = self;\n-        let labels_in_fn = take(&mut self.labels_in_fn);\n         let xcrate_object_lifetime_defaults = take(&mut self.xcrate_object_lifetime_defaults);\n         let missing_named_lifetime_spots = take(&mut self.missing_named_lifetime_spots);\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n             map,\n             scope: &wrap_scope,\n             trait_definition_only: self.trait_definition_only,\n-            labels_in_fn,\n             xcrate_object_lifetime_defaults,\n             missing_named_lifetime_spots,\n         };\n         let span = tracing::debug_span!(\"scope\", scope = ?TruncatedScopeDebug(&this.scope));\n         {\n             let _enter = span.enter();\n-            f(self.scope, &mut this);\n+            f(&mut this);\n         }\n-        self.labels_in_fn = this.labels_in_fn;\n         self.xcrate_object_lifetime_defaults = this.xcrate_object_lifetime_defaults;\n         self.missing_named_lifetime_spots = this.missing_named_lifetime_spots;\n     }\n@@ -1891,10 +1724,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             scope_type: BinderScopeType::Normal,\n             allow_late_bound: true,\n         };\n-        self.with(scope, move |old_scope, this| {\n-            this.check_lifetime_params(old_scope, &generics.params);\n-            walk(this);\n-        });\n+        self.with(scope, walk);\n     }\n \n     fn next_early_index_helper(&self, only_opaque_type_parent: bool) -> u32 {\n@@ -2165,7 +1995,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 GenericArg::Type(ty) => {\n                     if let Some(&lt) = object_lifetime_defaults.get(i) {\n                         let scope = Scope::ObjectLifetimeDefault { lifetime: lt, s: self.scope };\n-                        self.with(scope, |_, this| this.visit_ty(ty));\n+                        self.with(scope, |this| this.visit_ty(ty));\n                     } else {\n                         self.visit_ty(ty);\n                     }\n@@ -2222,15 +2052,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     type_def_id,\n                     binding.ident,\n                 );\n-                self.with(scope, |_, this| {\n+                self.with(scope, |this| {\n                     let scope = Scope::Supertrait {\n                         lifetimes: lifetimes.unwrap_or_default(),\n                         s: this.scope,\n                     };\n-                    this.with(scope, |_, this| this.visit_assoc_type_binding(binding));\n+                    this.with(scope, |this| this.visit_assoc_type_binding(binding));\n                 });\n             } else {\n-                self.with(scope, |_, this| this.visit_assoc_type_binding(binding));\n+                self.with(scope, |this| this.visit_assoc_type_binding(binding));\n             }\n         }\n     }\n@@ -2346,7 +2176,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             elide: Elide::FreshLateAnon(named_late_bound_vars, Cell::new(0)),\n             s: self.scope,\n         };\n-        self.with(arg_scope, |_, this| {\n+        self.with(arg_scope, |this| {\n             for input in inputs {\n                 this.visit_ty(input);\n             }\n@@ -2466,7 +2296,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             visitor.visit_ty(&inputs[0]);\n             if let Set1::One(lifetime) = visitor.lifetime {\n                 let scope = Scope::Elision { elide: Elide::Exact(lifetime), s: self.scope };\n-                self.with(scope, |_, this| this.visit_ty(output));\n+                self.with(scope, |this| this.visit_ty(output));\n                 return;\n             }\n         }\n@@ -2517,7 +2347,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         debug!(?elide);\n \n         let scope = Scope::Elision { elide, s: self.scope };\n-        self.with(scope, |_, this| this.visit_ty(output));\n+        self.with(scope, |this| this.visit_ty(output));\n \n         struct GatherLifetimes<'a> {\n             map: &'a NamedRegionMap,\n@@ -2789,101 +2619,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         self.insert_lifetime(lifetime_ref, lifetime.shifted(late_depth));\n     }\n \n-    fn check_lifetime_params(\n-        &mut self,\n-        old_scope: ScopeRef<'_>,\n-        params: &'tcx [hir::GenericParam<'tcx>],\n-    ) {\n-        let lifetimes: Vec<_> = params\n-            .iter()\n-            .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => {\n-                    Some((param, param.name.normalize_to_macros_2_0()))\n-                }\n-                _ => None,\n-            })\n-            .collect();\n-        for (i, (lifetime_i, lifetime_i_name)) in lifetimes.iter().enumerate() {\n-            if let hir::ParamName::Plain(_) = lifetime_i_name {\n-                let name = lifetime_i_name.ident().name;\n-                if name == kw::UnderscoreLifetime || name == kw::StaticLifetime {\n-                    self.tcx.sess.delay_span_bug(\n-                        lifetime_i.span,\n-                        &format!(\"invalid lifetime parameter name: `{}`\", lifetime_i.name.ident()),\n-                    );\n-                }\n-            }\n-\n-            // It is a hard error to shadow a lifetime within the same scope.\n-            for (lifetime_j, lifetime_j_name) in lifetimes.iter().skip(i + 1) {\n-                if lifetime_i_name == lifetime_j_name {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        lifetime_j.span,\n-                        E0263,\n-                        \"lifetime name `{}` declared twice in the same scope\",\n-                        lifetime_j.name.ident()\n-                    )\n-                    .span_label(lifetime_j.span, \"declared twice\")\n-                    .span_label(lifetime_i.span, \"previous declaration here\")\n-                    .emit();\n-                }\n-            }\n-\n-            // It is a soft error to shadow a lifetime within a parent scope.\n-            self.check_lifetime_param_for_shadowing(old_scope, &lifetime_i);\n-        }\n-    }\n-\n-    fn check_lifetime_param_for_shadowing(\n-        &self,\n-        mut old_scope: ScopeRef<'_>,\n-        param: &'tcx hir::GenericParam<'tcx>,\n-    ) {\n-        for label in &self.labels_in_fn {\n-            // FIXME (#24278): non-hygienic comparison\n-            if param.name.ident().name == label.name {\n-                signal_shadowing_problem(\n-                    self.tcx,\n-                    label.name,\n-                    original_label(label.span),\n-                    shadower_lifetime(&param),\n-                );\n-                return;\n-            }\n-        }\n-\n-        loop {\n-            match *old_scope {\n-                Scope::Body { s, .. }\n-                | Scope::Elision { s, .. }\n-                | Scope::ObjectLifetimeDefault { s, .. }\n-                | Scope::Supertrait { s, .. }\n-                | Scope::TraitRefBoundary { s, .. } => {\n-                    old_scope = s;\n-                }\n-\n-                Scope::Root => {\n-                    return;\n-                }\n-\n-                Scope::Binder { ref lifetimes, s, .. } => {\n-                    if let Some(&def) = lifetimes.get(&param.name.normalize_to_macros_2_0()) {\n-                        signal_shadowing_problem(\n-                            self.tcx,\n-                            param.name.ident().name,\n-                            original_lifetime(self.tcx.def_span(def.id().unwrap())),\n-                            shadower_lifetime(&param),\n-                        );\n-                        return;\n-                    }\n-\n-                    old_scope = s;\n-                }\n-            }\n-        }\n-    }\n-\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     fn insert_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime, def: Region) {\n         debug!("}, {"sha": "92917678e4c02697ac5990a9174838d28f0091b2", "filename": "src/test/ui/error-codes/E0263.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0263.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,5 +1,5 @@\n fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n-    //~^ ERROR E0263\n+    //~^ ERROR E0403\n }\n \n fn main() {}"}, {"sha": "e3f9aea296a2c351664c8b824c03dd637fb242d8", "filename": "src/test/ui/error-codes/E0263.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0263.stderr?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,11 +1,11 @@\n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/E0263.rs:1:16\n    |\n LL | fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) {\n-   |        --      ^^ declared twice\n+   |        --      ^^ already used\n    |        |\n-   |        previous declaration here\n+   |        first use of `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0263`.\n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "ca9d71a7a8b667755682b7a73a83ec74eaf33061", "filename": "src/test/ui/for-loop-while/label_break_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -102,7 +102,7 @@ fn label_break_match(c: u8, xe: u8, ye: i8) {\n             0 => break 'a 0,\n             v if { if v % 2 == 0 { break 'a 1; }; v % 3 == 0 } => { x += 1; },\n             v if { 'b: { break 'b v == 5; } } => { x = 41; },\n-            _ => 'b: { //~ WARNING `'b` shadows a label\n+            _ => 'b: {\n                 break 'b ();\n             },\n         }\n@@ -128,8 +128,8 @@ fn label_break_macro() {\n         0\n     };\n     assert_eq!(x, 0);\n-    let x: u8 = 'a: { //~ WARNING `'a` shadows a label\n-        'b: { //~ WARNING `'b` shadows a label\n+    let x: u8 = 'a: {\n+        'b: {\n             if true {\n                 mac1!('a, 1);\n             }"}, {"sha": "b1eb3204fd5997166ca0eac767e228dac6ea49e2", "filename": "src/test/ui/for-loop-while/label_break_value.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,28 +0,0 @@\n-warning: label name `'b` shadows a label name that is already in scope\n-  --> $DIR/label_break_value.rs:105:18\n-   |\n-LL |             v if { 'b: { break 'b v == 5; } } => { x = 41; },\n-   |                    -- first declared here\n-LL |             _ => 'b: {\n-   |                  ^^ label `'b` already in scope\n-\n-warning: label name `'a` shadows a label name that is already in scope\n-  --> $DIR/label_break_value.rs:131:17\n-   |\n-LL |     let x: u8 = 'a: {\n-   |                 -- first declared here\n-...\n-LL |     let x: u8 = 'a: {\n-   |                 ^^ label `'a` already in scope\n-\n-warning: label name `'b` shadows a label name that is already in scope\n-  --> $DIR/label_break_value.rs:132:9\n-   |\n-LL |         'b: {\n-   |         -- first declared here\n-...\n-LL |         'b: {\n-   |         ^^ label `'b` already in scope\n-\n-warning: 3 warnings emitted\n-"}, {"sha": "149bf17b83cba808ffb0c67cf28186d3c1086450", "filename": "src/test/ui/for-loop-while/label_break_value_invalid.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -20,14 +20,11 @@ fn lbv_macro_test_hygiene_respected() {\n     macro_rules! mac3 {\n         ($val:expr) => {\n             'a: {\n-            //~^ WARNING `'a` shadows a label\n-            //~| WARNING `'a` shadows a label\n-            //~| WARNING `'a` shadows a label\n                 $val\n             }\n         };\n     }\n-    let x: u8 = mac3!('b: { //~ WARNING `'b` shadows a label\n+    let x: u8 = mac3!('b: {\n         if true {\n             break 'a 3; //~ ERROR undeclared label `'a` [E0426]\n         }"}, {"sha": "7182b8f598f193de0a4f822ab1f37e95e72ea950", "filename": "src/test/ui/for-loop-while/label_break_value_invalid.stderr", "status": "modified", "additions": 3, "deletions": 60, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -10,7 +10,7 @@ LL |                 mac2!(2);\n    = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0426]: use of undeclared label `'a`\n-  --> $DIR/label_break_value_invalid.rs:32:19\n+  --> $DIR/label_break_value_invalid.rs:29:19\n    |\n LL |     let x: u8 = mac3!('b: {\n    |                       -- a label with a similar name is reachable\n@@ -22,68 +22,11 @@ LL |             break 'a 3;\n    |                   help: try using similarly named label: `'b`\n \n error[E0426]: use of undeclared label `'a`\n-  --> $DIR/label_break_value_invalid.rs:37:29\n+  --> $DIR/label_break_value_invalid.rs:34:29\n    |\n LL |     let x: u8 = mac3!(break 'a 4);\n    |                             ^^ undeclared label `'a`\n \n-warning: label name `'a` shadows a label name that is already in scope\n-  --> $DIR/label_break_value_invalid.rs:22:13\n-   |\n-LL |       let x: u8 = 'a: {\n-   |                   -- first declared here\n-...\n-LL |               'a: {\n-   |               ^^ label `'a` already in scope\n-...\n-LL |       let x: u8 = mac3!('b: {\n-   |  _________________-\n-LL | |         if true {\n-LL | |             break 'a 3;\n-LL | |         }\n-LL | |         0\n-LL | |     });\n-   | |______- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `mac3` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'b` shadows a label name that is already in scope\n-  --> $DIR/label_break_value_invalid.rs:30:23\n-   |\n-LL |         'b: {\n-   |         -- first declared here\n-...\n-LL |     let x: u8 = mac3!('b: {\n-   |                       ^^ label `'b` already in scope\n-\n-warning: label name `'a` shadows a label name that is already in scope\n-  --> $DIR/label_break_value_invalid.rs:22:13\n-   |\n-LL |     let x: u8 = 'a: {\n-   |                 -- first declared here\n-...\n-LL |             'a: {\n-   |             ^^ label `'a` already in scope\n-...\n-LL |     let x: u8 = mac3!(break 'a 4);\n-   |                 ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `mac3` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'a` shadows a label name that is already in scope\n-  --> $DIR/label_break_value_invalid.rs:22:13\n-   |\n-LL |             'a: {\n-   |             ^^\n-   |             |\n-   |             first declared here\n-   |             label `'a` already in scope\n-...\n-LL |     let x: u8 = mac3!(break 'a 4);\n-   |                 ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `mac3` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors; 4 warnings emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0426`."}, {"sha": "be765920975b3703ae2ad55f073f42ebdc5d6801", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,3 +1,19 @@\n+error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n+  --> $DIR/shadowing.rs:4:14\n+   |\n+LL | trait Shadow<'a> {\n+   |              -- first declared here\n+LL |     type Bar<'a>;\n+   |              ^^ lifetime `'a` already in scope\n+\n+error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n+  --> $DIR/shadowing.rs:13:14\n+   |\n+LL | impl<'a> NoShadow<'a> for &'a u32 {\n+   |      -- first declared here\n+LL |     type Bar<'a> = i32;\n+   |              ^^ lifetime `'a` already in scope\n+\n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/shadowing.rs:18:14\n    |\n@@ -14,22 +30,6 @@ LL | impl<T> NoShadowT<T> for Option<T> {\n LL |     type Bar<T> = i32;\n    |              ^ already used\n \n-error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n-  --> $DIR/shadowing.rs:13:14\n-   |\n-LL | impl<'a> NoShadow<'a> for &'a u32 {\n-   |      -- first declared here\n-LL |     type Bar<'a> = i32;\n-   |              ^^ lifetime `'a` already in scope\n-\n-error[E0496]: lifetime name `'a` shadows a lifetime name that is already in scope\n-  --> $DIR/shadowing.rs:4:14\n-   |\n-LL | trait Shadow<'a> {\n-   |              -- first declared here\n-LL |     type Bar<'a>;\n-   |              ^^ lifetime `'a` already in scope\n-\n error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0403, E0496."}, {"sha": "8971fb62626cbfb99a4a635b4a9eb06c5d684724", "filename": "src/test/ui/hygiene/duplicate_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -5,12 +5,12 @@\n \n #[rustc_macro_transparency = \"semitransparent\"]\n macro m($a:lifetime) {\n-    fn g<$a, 'a>() {} //~ ERROR lifetime name `'a` declared twice\n+    fn g<$a, 'a>() {} //~ ERROR the name `'a` is already used for a generic parameter\n }\n \n #[rustc_macro_transparency = \"transparent\"]\n macro n($a:lifetime) {\n-    fn h<$a, 'a>() {} //~ ERROR lifetime name `'a` declared twice\n+    fn h<$a, 'a>() {} //~ ERROR the name `'a` is already used for a generic parameter\n }\n \n m!('a);"}, {"sha": "9f1a75147272dbb3a9c1c5625e7f015381422967", "filename": "src/test/ui/hygiene/duplicate_lifetimes.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,31 +1,31 @@\n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate_lifetimes.rs:8:14\n    |\n LL |     fn g<$a, 'a>() {}\n-   |              ^^ declared twice\n+   |              ^^ already used\n ...\n LL | m!('a);\n    | ------\n    | |  |\n-   | |  previous declaration here\n+   | |  first use of `'a`\n    | in this macro invocation\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate_lifetimes.rs:13:14\n    |\n LL |     fn h<$a, 'a>() {}\n-   |              ^^ declared twice\n+   |              ^^ already used\n ...\n LL | n!('a);\n    | ------\n    | |  |\n-   | |  previous declaration here\n+   | |  first use of `'a`\n    | in this macro invocation\n    |\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0263`.\n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "8cf66f31a0a1df988a64920a26ef70e0b3136f6b", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.rs", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -13,38 +13,28 @@\n macro_rules! loop_x {\n     ($e: expr) => {\n         // $e shouldn't be able to interact with this 'x\n-        'x: loop { $e }\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-    }\n+        'x: loop {\n+            $e\n+        }\n+    };\n }\n \n macro_rules! while_true {\n     ($e: expr) => {\n         // $e shouldn't be able to interact with this 'x\n-        'x: while 1 + 1 == 2 { $e }\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-    }\n+        'x: while 1 + 1 == 2 {\n+            $e\n+        }\n+    };\n }\n \n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n-        'x: for _ in 0..1 { $e }\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-    }\n+        'x: for _ in 0..1 {\n+            $e\n+        }\n+    };\n }\n \n pub fn main() {\n@@ -62,8 +52,6 @@ pub fn main() {\n \n     let k: isize = {\n         'x: for _ in 0..1 {\n-            //~^ WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n             // ditto\n             loop_x!(break 'x);\n             i += 1;\n@@ -74,10 +62,6 @@ pub fn main() {\n \n     let l: isize = {\n         'x: for _ in 0..1 {\n-            //~^ WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n             // ditto\n             while_true!(break 'x);\n             i += 1;\n@@ -88,12 +72,6 @@ pub fn main() {\n \n     let n: isize = {\n         'x: for _ in 0..1 {\n-            //~^ WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n-            //~| WARNING shadows a label name that is already in scope\n             // ditto\n             run_once!(continue 'x);\n             i += 1;"}, {"sha": "519e3c0880ac66e90b8dd44447a3ec4abaca082b", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.stderr", "status": "removed", "additions": 0, "deletions": 334, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,334 +0,0 @@\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:16:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: loop {\n-   |         -- first declared here\n-LL |             // this 'x should refer to the outer loop, lexically\n-LL |             loop_x!(break 'x);\n-   |             ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:64:9\n-   |\n-LL |         'x: loop {\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:64:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:16:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: loop {\n-   |         -- first declared here\n-...\n-LL |             loop_x!(break 'x);\n-   |             ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:16:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^\n-   |         |\n-   |         first declared here\n-   |         label `'x` already in scope\n-...\n-LL |             loop_x!(break 'x);\n-   |             ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:16:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |             loop_x!(break 'x);\n-   |             ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:76:9\n-   |\n-LL |         'x: loop {\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:76:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:76:9\n-   |\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:76:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:27:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: loop {\n-   |         -- first declared here\n-...\n-LL |             while_true!(break 'x);\n-   |             --------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:27:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |             while_true!(break 'x);\n-   |             --------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:27:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |             while_true!(break 'x);\n-   |             --------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:27:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |             while_true!(break 'x);\n-   |             --------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:27:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |             while_true!(break 'x);\n-   |             --------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:90:9\n-   |\n-LL |         'x: loop {\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:90:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:90:9\n-   |\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:90:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:90:9\n-   |\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:90:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:39:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: loop {\n-   |         -- first declared here\n-...\n-LL |             run_once!(continue 'x);\n-   |             ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:39:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |             run_once!(continue 'x);\n-   |             ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:39:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |             run_once!(continue 'x);\n-   |             ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:39:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |             run_once!(continue 'x);\n-   |             ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:39:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |             run_once!(continue 'x);\n-   |             ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:39:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |             run_once!(continue 'x);\n-   |             ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:39:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: for _ in 0..1 {\n-   |         -- first declared here\n-...\n-LL |             run_once!(continue 'x);\n-   |             ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: 28 warnings emitted\n-"}, {"sha": "6a7d81f045bfc587f40e0e191cd748ea199b9e1b", "filename": "src/test/ui/hygiene/hygienic-labels.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -10,38 +10,28 @@\n macro_rules! loop_x {\n     ($e: expr) => {\n         // $e shouldn't be able to interact with this 'x\n-        'x: loop { $e }\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-    }\n+        'x: loop {\n+            $e\n+        }\n+    };\n }\n \n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n-        'x: for _ in 0..1 { $e }\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-    }\n+        'x: for _ in 0..1 {\n+            $e\n+        }\n+    };\n }\n \n macro_rules! while_x {\n     ($e: expr) => {\n         // ditto\n-        'x: while 1 + 1 == 2 { $e }\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-    }\n+        'x: while 1 + 1 == 2 {\n+            $e\n+        }\n+    };\n }\n \n pub fn main() {\n@@ -52,32 +42,17 @@ pub fn main() {\n     }\n \n     'x: loop {\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-\n         // ditto\n         loop_x!(break 'x);\n         panic!(\"break doesn't act hygienically inside infinite loop\");\n     }\n \n     'x: while 1 + 1 == 2 {\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-\n         while_x!(break 'x);\n         panic!(\"break doesn't act hygienically inside infinite while loop\");\n     }\n \n     'x: for _ in 0..1 {\n-        //~^ WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-        //~| WARNING shadows a label name that is already in scope\n-\n         // ditto\n         run_once!(continue 'x);\n         panic!(\"continue doesn't act hygienically inside for loop\");"}, {"sha": "f0b891fe34979e0dd2b783f4f23e3fd9e9b331cf", "filename": "src/test/ui/hygiene/hygienic-labels.stderr", "status": "removed", "additions": 0, "deletions": 334, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,334 +0,0 @@\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:13:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-LL |         // this 'x should refer to the outer loop, lexically\n-LL |         loop_x!(break 'x);\n-   |         ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:54:5\n-   |\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-...\n-LL |     'x: loop {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:54:5\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |     'x: loop {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:13:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-...\n-LL |         loop_x!(break 'x);\n-   |         ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:13:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^\n-   |         |\n-   |         first declared here\n-   |         label `'x` already in scope\n-...\n-LL |         loop_x!(break 'x);\n-   |         ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:13:9\n-   |\n-LL |         'x: loop { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: loop {\n-   |     -- first declared here\n-...\n-LL |         loop_x!(break 'x);\n-   |         ----------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:63:5\n-   |\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-...\n-LL |     'x: while 1 + 1 == 2 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:63:5\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |     'x: while 1 + 1 == 2 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:63:5\n-   |\n-LL |     'x: loop {\n-   |     -- first declared here\n-...\n-LL |     'x: while 1 + 1 == 2 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:63:5\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |     'x: while 1 + 1 == 2 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:38:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-...\n-LL |         while_x!(break 'x);\n-   |         ------------------ in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:38:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         while_x!(break 'x);\n-   |         ------------------ in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:38:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: loop {\n-   |     -- first declared here\n-...\n-LL |         while_x!(break 'x);\n-   |         ------------------ in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:38:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         while_x!(break 'x);\n-   |         ------------------ in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:38:9\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: while 1 + 1 == 2 {\n-   |     -- first declared here\n-...\n-LL |         while_x!(break 'x);\n-   |         ------------------ in this macro invocation\n-   |\n-   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:73:5\n-   |\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:73:5\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:73:5\n-   |\n-LL |     'x: loop {\n-   |     -- first declared here\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:73:5\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:73:5\n-   |\n-LL |     'x: while 1 + 1 == 2 {\n-   |     -- first declared here\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:73:5\n-   |\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         -- first declared here\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     ^^ label `'x` already in scope\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:24:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-...\n-LL |         run_once!(continue 'x);\n-   |         ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:24:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         run_once!(continue 'x);\n-   |         ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:24:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: loop {\n-   |     -- first declared here\n-...\n-LL |         run_once!(continue 'x);\n-   |         ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:24:9\n-   |\n-LL |         'x: loop { $e }\n-   |         -- first declared here\n-...\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         run_once!(continue 'x);\n-   |         ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:24:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: while 1 + 1 == 2 {\n-   |     -- first declared here\n-...\n-LL |         run_once!(continue 'x);\n-   |         ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:24:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |         'x: while 1 + 1 == 2 { $e }\n-   |         -- first declared here\n-...\n-LL |         run_once!(continue 'x);\n-   |         ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:24:9\n-   |\n-LL |         'x: for _ in 0..1 { $e }\n-   |         ^^ label `'x` already in scope\n-...\n-LL |     'x: for _ in 0..1 {\n-   |     -- first declared here\n-...\n-LL |         run_once!(continue 'x);\n-   |         ---------------------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: 28 warnings emitted\n-"}, {"sha": "85adc9ab3bfbeb583b183770eba5228238904894", "filename": "src/test/ui/lint/unused_labels.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,3 +1,12 @@\n+warning: label name `'many_used_shadowed` shadows a label name that is already in scope\n+  --> $DIR/unused_labels.rs:62:9\n+   |\n+LL |     'many_used_shadowed: for _ in 0..10 {\n+   |     ------------------- first declared here\n+LL |\n+LL |         'many_used_shadowed: for _ in 0..10 {\n+   |         ^^^^^^^^^^^^^^^^^^^ label `'many_used_shadowed` already in scope\n+\n warning: unused label\n   --> $DIR/unused_labels.rs:11:5\n    |\n@@ -52,14 +61,5 @@ warning: unused label\n LL |     'unused_block_label: {\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-warning: label name `'many_used_shadowed` shadows a label name that is already in scope\n-  --> $DIR/unused_labels.rs:62:9\n-   |\n-LL |     'many_used_shadowed: for _ in 0..10 {\n-   |     ------------------- first declared here\n-LL |\n-LL |         'many_used_shadowed: for _ in 0..10 {\n-   |         ^^^^^^^^^^^^^^^^^^^ label `'many_used_shadowed` already in scope\n-\n warning: 9 warnings emitted\n "}, {"sha": "68a19a8f6f7170c9b9a95deb61292acab941bc66", "filename": "src/test/ui/loops/loops-reject-duplicate-labels-2.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.rs?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,36 +0,0 @@\n-// check-pass\n-#![feature(label_break_value)]\n-\n-// Issue #21633: reject duplicate loop labels and block labels in function bodies.\n-//\n-// This is testing the generalization (to the whole function body)\n-// discussed here:\n-// https://internals.rust-lang.org/t/psa-rejecting-duplicate-loop-labels/1833\n-\n-#[allow(unused_labels)]\n-pub fn foo() {\n-    { 'fl: for _ in 0..10 { break; } }\n-    { 'fl: loop { break; } }             //~ WARN label name `'fl` shadows a label name that is already in scope\n-    { 'lf: loop { break; } }\n-    { 'lf: for _ in 0..10 { break; } }   //~ WARN label name `'lf` shadows a label name that is already in scope\n-    { 'wl: while 2 > 1 { break; } }\n-    { 'wl: loop { break; } }             //~ WARN label name `'wl` shadows a label name that is already in scope\n-    { 'lw: loop { break; } }\n-    { 'lw: while 2 > 1 { break; } }      //~ WARN label name `'lw` shadows a label name that is already in scope\n-    { 'fw: for _ in 0..10 { break; } }\n-    { 'fw: while 2 > 1 { break; } }      //~ WARN label name `'fw` shadows a label name that is already in scope\n-    { 'wf: while 2 > 1 { break; } }\n-    { 'wf: for _ in 0..10 { break; } }   //~ WARN label name `'wf` shadows a label name that is already in scope\n-    { 'tl: while let Some(_) = None::<i32> { break; } }\n-    { 'tl: loop { break; } }             //~ WARN label name `'tl` shadows a label name that is already in scope\n-    { 'lt: loop { break; } }\n-    { 'lt: while let Some(_) = None::<i32> { break; } }\n-                                         //~^ WARN label name `'lt` shadows a label name that is already in scope\n-    { 'bl: {} }\n-    { 'bl: {} } //~ WARN label name `'bl` shadows a label name that is already in scope\n-}\n-\n-\n-pub fn main() {\n-    foo();\n-}"}, {"sha": "2c372fcff7a12aa1c6cc37ac90c1b2e48e1b6751", "filename": "src/test/ui/loops/loops-reject-duplicate-labels-2.stderr", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels-2.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,74 +0,0 @@\n-warning: label name `'fl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:13:7\n-   |\n-LL |     { 'fl: for _ in 0..10 { break; } }\n-   |       --- first declared here\n-LL |     { 'fl: loop { break; } }\n-   |       ^^^ label `'fl` already in scope\n-\n-warning: label name `'lf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:15:7\n-   |\n-LL |     { 'lf: loop { break; } }\n-   |       --- first declared here\n-LL |     { 'lf: for _ in 0..10 { break; } }\n-   |       ^^^ label `'lf` already in scope\n-\n-warning: label name `'wl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:17:7\n-   |\n-LL |     { 'wl: while 2 > 1 { break; } }\n-   |       --- first declared here\n-LL |     { 'wl: loop { break; } }\n-   |       ^^^ label `'wl` already in scope\n-\n-warning: label name `'lw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:19:7\n-   |\n-LL |     { 'lw: loop { break; } }\n-   |       --- first declared here\n-LL |     { 'lw: while 2 > 1 { break; } }\n-   |       ^^^ label `'lw` already in scope\n-\n-warning: label name `'fw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:21:7\n-   |\n-LL |     { 'fw: for _ in 0..10 { break; } }\n-   |       --- first declared here\n-LL |     { 'fw: while 2 > 1 { break; } }\n-   |       ^^^ label `'fw` already in scope\n-\n-warning: label name `'wf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:23:7\n-   |\n-LL |     { 'wf: while 2 > 1 { break; } }\n-   |       --- first declared here\n-LL |     { 'wf: for _ in 0..10 { break; } }\n-   |       ^^^ label `'wf` already in scope\n-\n-warning: label name `'tl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:25:7\n-   |\n-LL |     { 'tl: while let Some(_) = None::<i32> { break; } }\n-   |       --- first declared here\n-LL |     { 'tl: loop { break; } }\n-   |       ^^^ label `'tl` already in scope\n-\n-warning: label name `'lt` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:27:7\n-   |\n-LL |     { 'lt: loop { break; } }\n-   |       --- first declared here\n-LL |     { 'lt: while let Some(_) = None::<i32> { break; } }\n-   |       ^^^ label `'lt` already in scope\n-\n-warning: label name `'bl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels-2.rs:30:7\n-   |\n-LL |     { 'bl: {} }\n-   |       --- first declared here\n-LL |     { 'bl: {} }\n-   |       ^^^ label `'bl` already in scope\n-\n-warning: 9 warnings emitted\n-"}, {"sha": "c34bcf3df1d76253870af5d66e5837acb9af1772", "filename": "src/test/ui/loops/loops-reject-duplicate-labels.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.rs?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,49 +0,0 @@\n-// check-pass\n-#![feature(label_break_value)]\n-\n-// Issue #21633: reject duplicate loop labels and block labels in function bodies.\n-\n-#[allow(unused_labels)]\n-fn foo() {\n-    'fl: for _ in 0..10 { break; }\n-    'fl: loop { break; }           //~ WARN label name `'fl` shadows a label name that is already in scope\n-\n-    'lf: loop { break; }\n-    'lf: for _ in 0..10 { break; } //~ WARN label name `'lf` shadows a label name that is already in scope\n-    'wl: while 2 > 1 { break; }\n-    'wl: loop { break; }           //~ WARN label name `'wl` shadows a label name that is already in scope\n-    'lw: loop { break; }\n-    'lw: while 2 > 1 { break; }    //~ WARN label name `'lw` shadows a label name that is already in scope\n-    'fw: for _ in 0..10 { break; }\n-    'fw: while 2 > 1 { break; }    //~ WARN label name `'fw` shadows a label name that is already in scope\n-    'wf: while 2 > 1 { break; }\n-    'wf: for _ in 0..10 { break; } //~ WARN label name `'wf` shadows a label name that is already in scope\n-    'tl: while let Some(_) = None::<i32> { break; }\n-    'tl: loop { break; }           //~ WARN label name `'tl` shadows a label name that is already in scope\n-    'lt: loop { break; }\n-    'lt: while let Some(_) = None::<i32> { break; }\n-                                   //~^ WARN label name `'lt` shadows a label name that is already in scope\n-    'bl: {}\n-    'bl: {} //~ WARN label name `'bl` shadows a label name that is already in scope\n-}\n-\n-// Note however that it is okay for the same label to be reused in\n-// different methods of one impl, as illustrated here.\n-\n-struct S;\n-impl S {\n-    fn m1(&self) { 'okay: loop { break 'okay; } }\n-    fn m2(&self) { 'okay: loop { break 'okay; } }\n-    fn m3(&self) { 'okay: { break 'okay; } }\n-    fn m4(&self) { 'okay: { break 'okay; } }\n-}\n-\n-\n-pub fn main() {\n-    let s = S;\n-    s.m1();\n-    s.m2();\n-    s.m3();\n-    s.m4();\n-    foo();\n-}"}, {"sha": "3bf3af763ecfc9aa80fb3ea306c709e0da693f6b", "filename": "src/test/ui/loops/loops-reject-duplicate-labels.stderr", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-duplicate-labels.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,74 +0,0 @@\n-warning: label name `'fl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:9:5\n-   |\n-LL |     'fl: for _ in 0..10 { break; }\n-   |     --- first declared here\n-LL |     'fl: loop { break; }\n-   |     ^^^ label `'fl` already in scope\n-\n-warning: label name `'lf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:12:5\n-   |\n-LL |     'lf: loop { break; }\n-   |     --- first declared here\n-LL |     'lf: for _ in 0..10 { break; }\n-   |     ^^^ label `'lf` already in scope\n-\n-warning: label name `'wl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:14:5\n-   |\n-LL |     'wl: while 2 > 1 { break; }\n-   |     --- first declared here\n-LL |     'wl: loop { break; }\n-   |     ^^^ label `'wl` already in scope\n-\n-warning: label name `'lw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:16:5\n-   |\n-LL |     'lw: loop { break; }\n-   |     --- first declared here\n-LL |     'lw: while 2 > 1 { break; }\n-   |     ^^^ label `'lw` already in scope\n-\n-warning: label name `'fw` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:18:5\n-   |\n-LL |     'fw: for _ in 0..10 { break; }\n-   |     --- first declared here\n-LL |     'fw: while 2 > 1 { break; }\n-   |     ^^^ label `'fw` already in scope\n-\n-warning: label name `'wf` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:20:5\n-   |\n-LL |     'wf: while 2 > 1 { break; }\n-   |     --- first declared here\n-LL |     'wf: for _ in 0..10 { break; }\n-   |     ^^^ label `'wf` already in scope\n-\n-warning: label name `'tl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:22:5\n-   |\n-LL |     'tl: while let Some(_) = None::<i32> { break; }\n-   |     --- first declared here\n-LL |     'tl: loop { break; }\n-   |     ^^^ label `'tl` already in scope\n-\n-warning: label name `'lt` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:24:5\n-   |\n-LL |     'lt: loop { break; }\n-   |     --- first declared here\n-LL |     'lt: while let Some(_) = None::<i32> { break; }\n-   |     ^^^ label `'lt` already in scope\n-\n-warning: label name `'bl` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-duplicate-labels.rs:27:5\n-   |\n-LL |     'bl: {}\n-   |     --- first declared here\n-LL |     'bl: {}\n-   |     ^^^ label `'bl` already in scope\n-\n-warning: 9 warnings emitted\n-"}, {"sha": "741ea0c1ca8bc51bc91fe97636016e0880fa442b", "filename": "src/test/ui/loops/loops-reject-labels-shadowing-lifetimes.rs", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.rs?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,109 +0,0 @@\n-// Issue #21633: reject duplicate loop labels in function bodies.\n-// This is testing interaction between lifetime-params and labels.\n-\n-// check-pass\n-\n-#![allow(dead_code, unused_variables)]\n-\n-fn foo() {\n-    fn foo<'a>() {\n-        'a: loop { break 'a; }\n-        //~^ WARN label name `'a` shadows a lifetime name that is already in scope\n-    }\n-\n-    struct Struct<'b, 'c> { _f: &'b i8, _g: &'c i8 }\n-    enum Enum<'d, 'e> { A(&'d i8), B(&'e i8) }\n-\n-    impl<'d, 'e> Struct<'d, 'e> {\n-        fn meth_okay() {\n-            'a: loop { break 'a; }\n-            'b: loop { break 'b; }\n-            'c: loop { break 'c; }\n-        }\n-    }\n-\n-    impl <'d, 'e> Enum<'d, 'e> {\n-        fn meth_okay() {\n-            'a: loop { break 'a; }\n-            'b: loop { break 'b; }\n-            'c: loop { break 'c; }\n-        }\n-    }\n-\n-    impl<'bad, 'c> Struct<'bad, 'c> {\n-        fn meth_bad(&self) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-\n-    impl<'b, 'bad> Struct<'b, 'bad> {\n-        fn meth_bad2(&self) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-\n-    impl<'b, 'c> Struct<'b, 'c> {\n-        fn meth_bad3<'bad>(x: &'bad i8) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-\n-        fn meth_bad4<'a,'bad>(x: &'a i8, y: &'bad i8) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-\n-    impl <'bad, 'e> Enum<'bad, 'e> {\n-        fn meth_bad(&self) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-    impl <'d, 'bad> Enum<'d, 'bad> {\n-        fn meth_bad2(&self) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-    impl <'d, 'e> Enum<'d, 'e> {\n-        fn meth_bad3<'bad>(x: &'bad i8) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-\n-        fn meth_bad4<'a,'bad>(x: &'bad i8) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-\n-    trait HasDefaultMethod1<'bad> {\n-        fn meth_okay() {\n-            'c: loop { break 'c; }\n-        }\n-        fn meth_bad(&self) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-    trait HasDefaultMethod2<'a,'bad> {\n-        fn meth_bad(&self) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-    trait HasDefaultMethod3<'a,'b> {\n-        fn meth_bad<'bad>(&self) {\n-            'bad: loop { break 'bad; }\n-            //~^ WARN label name `'bad` shadows a lifetime name that is already in scope\n-        }\n-    }\n-}\n-\n-\n-pub fn main() {\n-    foo();\n-}"}, {"sha": "0d96c0b3a35b63fc5cdbaa938e47d9d50e3cd139", "filename": "src/test/ui/loops/loops-reject-labels-shadowing-lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-labels-shadowing-lifetimes.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,104 +0,0 @@\n-warning: label name `'a` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:10:9\n-   |\n-LL |     fn foo<'a>() {\n-   |            -- first declared here\n-LL |         'a: loop { break 'a; }\n-   |         ^^ lifetime `'a` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:35:13\n-   |\n-LL |     impl<'bad, 'c> Struct<'bad, 'c> {\n-   |          ---- first declared here\n-LL |         fn meth_bad(&self) {\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:42:13\n-   |\n-LL |     impl<'b, 'bad> Struct<'b, 'bad> {\n-   |              ---- first declared here\n-LL |         fn meth_bad2(&self) {\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:49:13\n-   |\n-LL |         fn meth_bad3<'bad>(x: &'bad i8) {\n-   |                      ---- first declared here\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:54:13\n-   |\n-LL |         fn meth_bad4<'a,'bad>(x: &'a i8, y: &'bad i8) {\n-   |                         ---- first declared here\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:61:13\n-   |\n-LL |     impl <'bad, 'e> Enum<'bad, 'e> {\n-   |           ---- first declared here\n-LL |         fn meth_bad(&self) {\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:67:13\n-   |\n-LL |     impl <'d, 'bad> Enum<'d, 'bad> {\n-   |               ---- first declared here\n-LL |         fn meth_bad2(&self) {\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:73:13\n-   |\n-LL |         fn meth_bad3<'bad>(x: &'bad i8) {\n-   |                      ---- first declared here\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:78:13\n-   |\n-LL |         fn meth_bad4<'a,'bad>(x: &'bad i8) {\n-   |                         ---- first declared here\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:88:13\n-   |\n-LL |     trait HasDefaultMethod1<'bad> {\n-   |                             ---- first declared here\n-...\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:94:13\n-   |\n-LL |     trait HasDefaultMethod2<'a,'bad> {\n-   |                                ---- first declared here\n-LL |         fn meth_bad(&self) {\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: label name `'bad` shadows a lifetime name that is already in scope\n-  --> $DIR/loops-reject-labels-shadowing-lifetimes.rs:100:13\n-   |\n-LL |         fn meth_bad<'bad>(&self) {\n-   |                     ---- first declared here\n-LL |             'bad: loop { break 'bad; }\n-   |             ^^^^ lifetime `'bad` already in scope\n-\n-warning: 12 warnings emitted\n-"}, {"sha": "ce2d07eb06a4d766e8fcbc86ade0b87b98fb8a09", "filename": "src/test/ui/loops/loops-reject-lifetime-shadowing-label.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.rs?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,36 +0,0 @@\n-// check-pass\n-#![feature(label_break_value)]\n-#![allow(dead_code, unused_variables)]\n-\n-// Issue #21633:  reject duplicate loop labels and block labels in function bodies.\n-//\n-// Test rejection of lifetimes in *expressions* that shadow labels.\n-\n-fn foo() {\n-    // Reusing lifetime `'a` in function item is okay.\n-    fn foo<'a>(x: &'a i8) -> i8 { *x }\n-\n-    // So is reusing `'a` in struct item\n-    struct S1<'a> { x: &'a i8 } impl<'a> S1<'a> { fn m(&self) {} }\n-    // and a method item\n-    struct S2; impl S2 { fn m<'a>(&self) {} }\n-\n-    let z = 3_i8;\n-\n-    'a: loop {\n-        let b = Box::new(|x: &i8| *x) as Box<dyn for <'a> Fn(&'a i8) -> i8>;\n-        //~^ WARN lifetime name `'a` shadows a label name that is already in scope\n-        assert_eq!((*b)(&z), z);\n-        break 'a;\n-    }\n-\n-    'b: {\n-        let b = Box::new(|x: &()| ()) as Box<dyn for <'b> Fn(&'b ())>;\n-        //~^ WARN lifetime name `'b` shadows a label name that is already in scope\n-        break 'b;\n-    }\n-}\n-\n-pub fn main() {\n-    foo();\n-}"}, {"sha": "9702b71600b5e572878742d1bc26542ae750ff84", "filename": "src/test/ui/loops/loops-reject-lifetime-shadowing-label.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floops-reject-lifetime-shadowing-label.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,18 +0,0 @@\n-warning: lifetime name `'a` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-lifetime-shadowing-label.rs:21:55\n-   |\n-LL |     'a: loop {\n-   |     -- first declared here\n-LL |         let b = Box::new(|x: &i8| *x) as Box<dyn for <'a> Fn(&'a i8) -> i8>;\n-   |                                                       ^^ label `'a` already in scope\n-\n-warning: lifetime name `'b` shadows a label name that is already in scope\n-  --> $DIR/loops-reject-lifetime-shadowing-label.rs:28:55\n-   |\n-LL |     'b: {\n-   |     -- first declared here\n-LL |         let b = Box::new(|x: &()| ()) as Box<dyn for <'b> Fn(&'b ())>;\n-   |                                                       ^^ label `'b` already in scope\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "59017da3b696ee3385502b1322673683efecd574", "filename": "src/test/ui/macros/macro-lifetime-used-with-labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -18,7 +18,7 @@ macro_rules! br {\n }\n macro_rules! br2 {\n     ($b:lifetime) => {\n-        'b: loop { //~ WARNING `'b` shadows a label name that is already in scope\n+        'b: loop {\n             break $b; // this $b should refer to the outer loop.\n         }\n     }"}, {"sha": "69334e21192108ee96286fe641cc1fbee1552f61", "filename": "src/test/ui/macros/macro-lifetime-used-with-labels.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5507aa881921f1cef42851ae976317ddb0c09ae/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr?ref=f5507aa881921f1cef42851ae976317ddb0c09ae", "patch": "@@ -1,15 +0,0 @@\n-warning: label name `'b` shadows a label name that is already in scope\n-  --> $DIR/macro-lifetime-used-with-labels.rs:21:9\n-   |\n-LL |         'b: loop {\n-   |         ^^ label `'b` already in scope\n-...\n-LL |     'b: loop {\n-   |     -- first declared here\n-LL |         br2!('b);\n-   |         -------- in this macro invocation\n-   |\n-   = note: this warning originates in the macro `br2` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f6616591a3df223db8782e29ff56dffa662e6991", "filename": "src/test/ui/regions/regions-name-duplicated.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.rs?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,5 +1,6 @@\n-struct Foo<'a, 'a> { //~ ERROR lifetime name `'a` declared twice\n-    x: &'a isize\n+struct Foo<'a, 'a> {\n+    //~^ ERROR the name `'a` is already used for a generic parameter\n+    x: &'a isize,\n }\n \n fn main() {}"}, {"sha": "cef73c18d371e458001501012bd26f34fcab1360", "filename": "src/test/ui/regions/regions-name-duplicated.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a90bedb332d7d7eabfc1e98a1e3d96898579e1d/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-duplicated.stderr?ref=3a90bedb332d7d7eabfc1e98a1e3d96898579e1d", "patch": "@@ -1,11 +1,11 @@\n-error[E0263]: lifetime name `'a` declared twice in the same scope\n+error[E0403]: the name `'a` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/regions-name-duplicated.rs:1:16\n    |\n LL | struct Foo<'a, 'a> {\n-   |            --  ^^ declared twice\n+   |            --  ^^ already used\n    |            |\n-   |            previous declaration here\n+   |            first use of `'a`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0263`.\n+For more information about this error, try `rustc --explain E0403`."}]}