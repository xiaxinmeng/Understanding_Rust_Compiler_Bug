{"sha": "2da54a9dc61cb72887ab6af9e90853cfb8270889", "node_id": "C_kwDOAAsO6NoAKDJkYTU0YTlkYzYxY2I3Mjg4N2FiNmFmOWU5MDg1M2NmYjgyNzA4ODk", "commit": {"author": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-05-05T14:32:45Z"}, "committer": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-05-05T19:33:03Z"}, "message": "add fn compile_test_with_passes()", "tree": {"sha": "59a8f92c89b811d4c7ed69408db41e4005662c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59a8f92c89b811d4c7ed69408db41e4005662c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2da54a9dc61cb72887ab6af9e90853cfb8270889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2da54a9dc61cb72887ab6af9e90853cfb8270889", "html_url": "https://github.com/rust-lang/rust/commit/2da54a9dc61cb72887ab6af9e90853cfb8270889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2da54a9dc61cb72887ab6af9e90853cfb8270889/comments", "author": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b94c232192b0fa0314b5afa18e366356e210c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b94c232192b0fa0314b5afa18e366356e210c4c", "html_url": "https://github.com/rust-lang/rust/commit/4b94c232192b0fa0314b5afa18e366356e210c4c"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "4ede46037894b1e20a0f7bffdb637e912abe44b4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2da54a9dc61cb72887ab6af9e90853cfb8270889/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da54a9dc61cb72887ab6af9e90853cfb8270889/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2da54a9dc61cb72887ab6af9e90853cfb8270889", "patch": "@@ -319,8 +319,7 @@ impl<'test> TestCx<'test> {\n \n     fn run_cfail_test(&self) {\n         let pm = self.pass_mode();\n-        let proc_res =\n-            self.compile_test(WillExecute::No, self.should_emit_metadata(pm), Vec::new());\n+        let proc_res = self.compile_test(WillExecute::No, self.should_emit_metadata(pm));\n         self.check_if_test_should_compile(&proc_res, pm);\n         self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n@@ -348,7 +347,7 @@ impl<'test> TestCx<'test> {\n     fn run_rfail_test(&self) {\n         let pm = self.pass_mode();\n         let should_run = self.run_if_enabled();\n-        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm), Vec::new());\n+        let proc_res = self.compile_test(should_run, self.should_emit_metadata(pm));\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -396,7 +395,7 @@ impl<'test> TestCx<'test> {\n \n     fn run_cpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n-        let proc_res = self.compile_test(WillExecute::No, emit_metadata, Vec::new());\n+        let proc_res = self.compile_test(WillExecute::No, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -411,7 +410,7 @@ impl<'test> TestCx<'test> {\n     fn run_rpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n         let should_run = self.run_if_enabled();\n-        let proc_res = self.compile_test(should_run, emit_metadata, Vec::new());\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -441,7 +440,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         let should_run = self.run_if_enabled();\n-        let mut proc_res = self.compile_test(should_run, Emit::None, Vec::new());\n+        let mut proc_res = self.compile_test(should_run, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -687,7 +686,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, Emit::None, Vec::new());\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -807,7 +806,7 @@ impl<'test> TestCx<'test> {\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compiler_run_result = self.compile_test(should_run, Emit::None, Vec::new());\n+        let compiler_run_result = self.compile_test(should_run, Emit::None);\n         if !compiler_run_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n         }\n@@ -1044,7 +1043,7 @@ impl<'test> TestCx<'test> {\n     fn run_debuginfo_lldb_test_no_opt(&self) {\n         // compile test file (it should have 'compile-flags:-g' in the header)\n         let should_run = self.run_if_enabled();\n-        let compile_result = self.compile_test(should_run, Emit::None, Vec::new());\n+        let compile_result = self.compile_test(should_run, Emit::None);\n         if !compile_result.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &compile_result);\n         }\n@@ -1483,7 +1482,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn compile_test(&self, will_execute: WillExecute, emit: Emit, passes: Vec<String>) -> ProcRes {\n+    fn compile_test(&self, will_execute: WillExecute, emit: Emit) -> ProcRes {\n+        self.compile_test_general(will_execute, emit, self.props.local_pass_mode(), Vec::new())\n+    }\n+\n+    fn compile_test_with_passes(\n+        &self,\n+        will_execute: WillExecute,\n+        emit: Emit,\n+        passes: Vec<String>,\n+    ) -> ProcRes {\n         self.compile_test_general(will_execute, emit, self.props.local_pass_mode(), passes)\n     }\n \n@@ -2791,7 +2799,7 @@ impl<'test> TestCx<'test> {\n     fn run_codegen_units_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let proc_res = self.compile_test(WillExecute::No, Emit::None, Vec::new());\n+        let proc_res = self.compile_test(WillExecute::No, Emit::None);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n@@ -3340,7 +3348,7 @@ impl<'test> TestCx<'test> {\n         let pm = self.pass_mode();\n         let should_run = self.should_run(pm);\n         let emit_metadata = self.should_emit_metadata(pm);\n-        let proc_res = self.compile_test(should_run, emit_metadata, Vec::new());\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n         self.check_if_test_should_compile(&proc_res, pm);\n \n         // if the user specified a format in the ui test\n@@ -3523,7 +3531,7 @@ impl<'test> TestCx<'test> {\n         let emit_metadata = self.should_emit_metadata(pm);\n         let passes = self.get_passes();\n \n-        let proc_res = self.compile_test(should_run, emit_metadata, passes);\n+        let proc_res = self.compile_test_with_passes(should_run, emit_metadata, passes);\n         self.check_mir_dump();\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);"}]}