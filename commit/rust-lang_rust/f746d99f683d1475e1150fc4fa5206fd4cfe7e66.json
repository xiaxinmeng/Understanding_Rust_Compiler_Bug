{"sha": "f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDZkOTlmNjgzZDE0NzVlMTE1MGZjNGZhNTIwNmZkNGNmZTdlNjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T02:28:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-06T02:28:06Z"}, "message": "Rollup merge of #66014 - dkadashev:47319-type-param-def-location, r=estebank\n\nShow type parameter name and definition in type mismatch error messages\n\nFixes #47319\n\nr? estebank", "tree": {"sha": "8abddcc91c544a0ff8e86059fe4f0839e2c67071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abddcc91c544a0ff8e86059fe4f0839e2c67071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwi+2CRBK7hj4Ov3rIwAAdHIIADdfqfUw4y+Gnlb/5YFV/Qu0\nEIj4AMdbo2UhN69mzDkKcCDFO7b7Qj5JTEOJnGX1Ol6K+ifcwaLN+rgMiRtK96BW\nh1pJ2F1nbrDteaOD9S628/Aku34U7E+GlPmwGraeAYGH7H7vsA/ysa7Dpfl/O1tQ\n4fbbYAXSNRZr0ni3n6F4M06qDr5IaYadoybGawJrzYrPbjyVXn+z09tTk6TTB66x\nJ3p/DTX5K63b6kOF92uOgkEUqs/RXzI79+ufSvjSS0sR7/Fe3vOQddUxctOddhJc\nZ544sgmzmq7nr8Gap1znH3YDDure3VB0ZzmriPa576dFdST7du2AVAMUJzFTxSE=\n=E7Wg\n-----END PGP SIGNATURE-----\n", "payload": "tree 8abddcc91c544a0ff8e86059fe4f0839e2c67071\nparent 5910116b17061fdc58d916b61795c40012df2219\nparent 774e60b0c16d234d247978b92db27869d6ab45fa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573007286 +0100\ncommitter GitHub <noreply@github.com> 1573007286 +0100\n\nRollup merge of #66014 - dkadashev:47319-type-param-def-location, r=estebank\n\nShow type parameter name and definition in type mismatch error messages\n\nFixes #47319\n\nr? estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "html_url": "https://github.com/rust-lang/rust/commit/f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5910116b17061fdc58d916b61795c40012df2219", "url": "https://api.github.com/repos/rust-lang/rust/commits/5910116b17061fdc58d916b61795c40012df2219", "html_url": "https://github.com/rust-lang/rust/commit/5910116b17061fdc58d916b61795c40012df2219"}, {"sha": "774e60b0c16d234d247978b92db27869d6ab45fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/774e60b0c16d234d247978b92db27869d6ab45fa", "html_url": "https://github.com/rust-lang/rust/commit/774e60b0c16d234d247978b92db27869d6ab45fa"}], "stats": {"total": 185, "additions": 141, "deletions": 44}, "files": [{"sha": "e238c966122347bfe738f9e099fccf920b70de1b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1234,8 +1234,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         }\n \n+        // In some (most?) cases cause.body_id points to actual body, but in some cases\n+        // it's a actual definition. According to the comments (e.g. in\n+        // librustc_typeck/check/compare_method.rs:compare_predicate_entailment) the latter\n+        // is relied upon by some other code. This might (or might not) need cleanup.\n+        let body_owner_def_id = self.tcx.hir().opt_local_def_id(cause.body_id)\n+            .unwrap_or_else(|| {\n+                self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n+            });\n         self.check_and_note_conflicting_crates(diag, terr, span);\n-        self.tcx.note_and_explain_type_err(diag, terr, span);\n+        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n \n         // It reads better to have the error origin as the final\n         // thing."}, {"sha": "0639a70ed0c49d598f7774f809bd5b93fc3fad0b", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -241,7 +241,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Projection(_) => \"associated type\".into(),\n             ty::UnnormalizedProjection(_) => \"non-normalized associated type\".into(),\n-            ty::Param(_) => \"type parameter\".into(),\n+            ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n             ty::Opaque(..) => \"opaque type\".into(),\n             ty::Error => \"type error\".into(),\n         }\n@@ -254,6 +254,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         db: &mut DiagnosticBuilder<'_>,\n         err: &TypeError<'tcx>,\n         sp: Span,\n+        body_owner_def_id: DefId,\n     ) {\n         use self::TypeError::*;\n \n@@ -288,7 +289,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                             );\n                         }\n                     },\n-                    (ty::Param(_), ty::Param(_)) => {\n+                    (ty::Param(expected), ty::Param(found)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        let e_span = self.def_span(generics.type_param(expected, self).def_id);\n+                        if !sp.contains(e_span) {\n+                            db.span_label(e_span, \"expected type parameter\");\n+                        }\n+                        let f_span = self.def_span(generics.type_param(found, self).def_id);\n+                        if !sp.contains(f_span) {\n+                            db.span_label(f_span, \"found type parameter\");\n+                        }\n                         db.note(\"a type parameter was expected, but a different one was found; \\\n                                  you might be missing a type parameter or trait bound\");\n                         db.note(\"for more information, visit \\\n@@ -301,7 +311,12 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n                         db.note(\"you might be missing a type parameter or trait bound\");\n                     }\n-                    (ty::Param(_), _) | (_, ty::Param(_)) => {\n+                    (ty::Param(p), _) | (_, ty::Param(p)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        let p_span = self.def_span(generics.type_param(p, self).def_id);\n+                        if !sp.contains(p_span) {\n+                            db.span_label(p_span, \"this type parameter\");\n+                        }\n                         db.help(\"type parameters must be constrained to match other types\");\n                         if self.sess.teach(&db.get_code().unwrap()) {\n                             db.help(\"given a type parameter `T` and a method `foo`:"}, {"sha": "f5053f6a1c0c8ee6f61ce484a3f653b020d2f332", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -4,8 +4,11 @@ error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::op\n LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n    |    --------------                ------ required by this bound in `is_iterator_of`\n ...\n+LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n+   |                 - this type parameter\n+...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter `T`\n    |\n    = note: expected type `std::option::Option<T>`\n               found type `T`"}, {"sha": "326b84470d622063bf0a52969f472c513edd325c", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -5,7 +5,10 @@ LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             - type in trait\n ...\n LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n-   |                              ^ expected type parameter, found a different type parameter\n+   |        -       -             ^ expected type parameter `F`, found type parameter `G`\n+   |        |       |\n+   |        |       found type parameter\n+   |        expected type parameter\n    |\n    = note: expected type `fn(&E, F) -> F`\n               found type `fn(&E, G) -> G`"}, {"sha": "7cb4677a2b199c6970143fde8d39dffaa0897b7a", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -5,7 +5,9 @@ LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n    |                                -- type in trait\n ...\n LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n-   |                                ^^^^^^^^^^^ expected type parameter, found a different type parameter\n+   |            -                   ^^^^^^^^^^^ expected type parameter `B`, found type parameter `impl Debug`\n+   |            |\n+   |            expected type parameter\n    |\n    = note: expected type `fn(&(), &B, &impl Debug)`\n               found type `fn(&(), &impl Debug, &B)`"}, {"sha": "ae20a5aa88388e42da92fdadc7e69c9c0a9b0b52", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -2,9 +2,11 @@ error[E0308]: mismatched types\n   --> $DIR/universal-mismatched-type.rs:4:5\n    |\n LL | fn foo(x: impl Debug) -> String {\n-   |                          ------ expected `std::string::String` because of return type\n+   |           ----------     ------ expected `std::string::String` because of return type\n+   |           |\n+   |           this type parameter\n LL |     x\n-   |     ^ expected struct `std::string::String`, found type parameter\n+   |     ^ expected struct `std::string::String`, found type parameter `impl Debug`\n    |\n    = note: expected type `std::string::String`\n               found type `impl Debug`"}, {"sha": "f540d319a279756332781ca4df13686b90974bfd", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,11 +1,16 @@\n error[E0308]: mismatched types\n   --> $DIR/universal-two-impl-traits.rs:5:9\n    |\n+LL | fn foo(x: impl Debug, y: impl Debug) -> String {\n+   |           ----------     ---------- found type parameter\n+   |           |\n+   |           expected type parameter\n+LL |     let mut a = x;\n LL |     a = y;\n-   |         ^ expected type parameter, found a different type parameter\n+   |         ^ expected type parameter `impl Debug`, found a different type parameter `impl Debug`\n    |\n-   = note: expected type `impl Debug` (type parameter)\n-              found type `impl Debug` (type parameter)\n+   = note: expected type `impl Debug` (type parameter `impl Debug`)\n+              found type `impl Debug` (type parameter `impl Debug`)\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "67721356208c0cf1bb8911929352c26d5429f305", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13853.rs:14:9\n    |\n LL |     fn nodes<'a, I: Iterator<Item=&'a N>>(&self) -> I\n-   |                                                     - expected `I` because of return type\n+   |                  - this type parameter              - expected `I` because of return type\n ...\n LL |         self.iter()\n-   |         ^^^^^^^^^^^ expected type parameter, found struct `std::slice::Iter`\n+   |         ^^^^^^^^^^^ expected type parameter `I`, found struct `std::slice::Iter`\n    |\n    = note: expected type `I`\n               found type `std::slice::Iter<'_, N>`"}, {"sha": "40093b13edfe092aa3b7ee3ea1effdc2192ef254", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,8 +1,10 @@\n error[E0053]: method `call` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:6:3\n    |\n+LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n+   |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n    = note: expected type `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&Foo, (T,))`\n@@ -12,8 +14,10 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:12:3\n    |\n+LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n+   |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n    = note: expected type `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&mut Foo, (T,))`\n@@ -23,8 +27,11 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:20:3\n    |\n+LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n+   |          - this type parameter\n+...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n    |\n    = note: expected type `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(Foo, (T,))`"}, {"sha": "ace5b5f72fc62bef8e0caaff64992c98c7266db5", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -5,7 +5,7 @@ LL | trait Trait: Sized {\n    | ------------------ required by `Trait`\n ...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found associated type\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected type `T`\n               found type `<<T as Trait>::A as MultiDispatch<i32>>::O`"}, {"sha": "cc52dab02459c6861db56c0383f5e4f5c8ec29a6", "filename": "src/test/ui/issues/issue-2951.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -4,7 +4,7 @@ fn foo<T, U>(x: T, y: U) {\n     //~^  ERROR mismatched types\n     //~| expected type `T`\n     //~| found type `U`\n-    //~| expected type parameter, found a different type parameter\n+    //~| expected type parameter `T`, found type parameter `U`\n }\n \n fn main() {"}, {"sha": "414571752904c29944706a3561678e9b14cb0599", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,8 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-2951.rs:3:10\n    |\n+LL | fn foo<T, U>(x: T, y: U) {\n+   |        -  - found type parameter\n+   |        |\n+   |        expected type parameter\n+LL |     let mut xx = x;\n LL |     xx = y;\n-   |          ^ expected type parameter, found a different type parameter\n+   |          ^ expected type parameter `T`, found type parameter `U`\n    |\n    = note: expected type `T`\n               found type `U`"}, {"sha": "39eca93f88d1cf341055fd03c6d8a8e66a92657d", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,10 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-35030.rs:9:14\n    |\n+LL | impl<bool> Parser<bool> for bool {\n+   |      ---- this type parameter\n+LL |     fn parse(text: &str) -> Option<bool> {\n LL |         Some(true)\n-   |              ^^^^ expected type parameter, found bool\n+   |              ^^^^ expected type parameter `bool`, found bool\n    |\n-   = note: expected type `bool` (type parameter)\n+   = note: expected type `bool` (type parameter `bool`)\n               found type `bool` (bool)\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters"}, {"sha": "687d610baf8cf536c1c239f1e264238f13477c06", "filename": "src/test/ui/structs/struct-path-self-type-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -7,8 +7,13 @@ LL |         Self { inner: 1.5f32 };\n error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:15:20\n    |\n+LL | impl<T> Foo<T> {\n+   |      - expected type parameter\n+LL |     fn new<U>(u: U) -> Foo<U> {\n+   |            - found type parameter\n+...\n LL |             inner: u\n-   |                    ^ expected type parameter, found a different type parameter\n+   |                    ^ expected type parameter `T`, found type parameter `U`\n    |\n    = note: expected type `T`\n               found type `U`\n@@ -18,14 +23,18 @@ LL |             inner: u\n error[E0308]: mismatched types\n   --> $DIR/struct-path-self-type-mismatch.rs:13:9\n    |\n+LL |   impl<T> Foo<T> {\n+   |        - found type parameter\n LL |       fn new<U>(u: U) -> Foo<U> {\n-   |                          ------ expected `Foo<U>` because of return type\n+   |              -           ------ expected `Foo<U>` because of return type\n+   |              |\n+   |              expected type parameter\n LL | /         Self {\n LL | |\n LL | |             inner: u\n LL | |\n LL | |         }\n-   | |_________^ expected type parameter, found a different type parameter\n+   | |_________^ expected type parameter `U`, found type parameter `T`\n    |\n    = note: expected type `Foo<U>`\n               found type `Foo<T>`"}, {"sha": "693ed35cbc9c6f219a971fdc56976a45251f9733", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,4 +1,4 @@\n-error[E0071]: expected struct, variant or union type, found type parameter\n+error[E0071]: expected struct, variant or union type, found type parameter `Self`\n   --> $DIR/struct-path-self.rs:5:17\n    |\n LL |         let s = Self {};\n@@ -10,13 +10,13 @@ error[E0109]: type arguments are not allowed for this type\n LL |         let z = Self::<u8> {};\n    |                        ^^ type argument not allowed\n \n-error[E0071]: expected struct, variant or union type, found type parameter\n+error[E0071]: expected struct, variant or union type, found type parameter `Self`\n   --> $DIR/struct-path-self.rs:7:17\n    |\n LL |         let z = Self::<u8> {};\n    |                 ^^^^^^^^^^ not a struct\n \n-error[E0071]: expected struct, variant or union type, found type parameter\n+error[E0071]: expected struct, variant or union type, found type parameter `Self`\n   --> $DIR/struct-path-self.rs:11:13\n    |\n LL |             Self { .. } => {}"}, {"sha": "9e44e208f0ee41ca098687270656cb6164ab53ae", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,8 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:13:25\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+LL |     fn ts_variant() {\n LL |         Self::TSVariant(());\n-   |                         ^^ expected type parameter, found ()\n+   |                         ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -24,8 +27,11 @@ LL |         Self::<()>::TSVariant(());\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:17:31\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::<()>::TSVariant(());\n-   |                               ^^ expected type parameter, found ()\n+   |                               ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -47,8 +53,11 @@ LL |         Self::<()>::TSVariant::<()>(());\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:26:29\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::SVariant { v: () };\n-   |                             ^^ expected type parameter, found ()\n+   |                             ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -64,8 +73,11 @@ LL |         Self::SVariant::<()> { v: () };\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:28:35\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::SVariant::<()> { v: () };\n-   |                                   ^^ expected type parameter, found ()\n+   |                                   ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -81,8 +93,11 @@ LL |         Self::<()>::SVariant { v: () };\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:31:35\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::<()>::SVariant { v: () };\n-   |                                   ^^ expected type parameter, found ()\n+   |                                   ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`\n@@ -104,8 +119,11 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:34:41\n    |\n+LL | impl<T> Enum<T> {\n+   |      - this type parameter\n+...\n LL |         Self::<()>::SVariant::<()> { v: () };\n-   |                                         ^^ expected type parameter, found ()\n+   |                                         ^^ expected type parameter `T`, found ()\n    |\n    = note: expected type `T`\n               found type `()`"}, {"sha": "825766463453ba5d574e6fda1fa0f11a56948849", "filename": "src/test/ui/type/type-parameter-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.rs?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -6,7 +6,7 @@ fn foo<Foo, Bar>(x: Foo) -> Bar {\n //~^ ERROR mismatched types\n //~| expected type `Bar`\n //~| found type `Foo`\n-//~| expected type parameter, found a different type parameter\n+//~| expected type parameter `Bar`, found type parameter `Foo`\n }\n \n fn main() {}"}, {"sha": "78d6989a3363d846589402903695b58389277b6f", "filename": "src/test/ui/type/type-parameter-names.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-names.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -2,9 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/type-parameter-names.rs:5:5\n    |\n LL | fn foo<Foo, Bar>(x: Foo) -> Bar {\n-   |                             --- expected `Bar` because of return type\n+   |        ---  ---             --- expected `Bar` because of return type\n+   |        |    |\n+   |        |    expected type parameter\n+   |        found type parameter\n LL |     x\n-   |     ^ expected type parameter, found a different type parameter\n+   |     ^ expected type parameter `Bar`, found type parameter `Foo`\n    |\n    = note: expected type `Bar`\n               found type `Foo`"}, {"sha": "d2dce7006b763750ca1bbab57ce7269be8a9f0e3", "filename": "src/test/ui/type/type-params-in-different-spaces-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.rs?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -5,7 +5,7 @@ trait BrokenAdd: Copy + Add<Output=Self> {\n         *self + rhs //~  ERROR mismatched types\n                     //~| expected type `Self`\n                     //~| found type `T`\n-                    //~| expected type parameter, found a different type parameter\n+                    //~| expected type parameter `Self`, found type parameter `T`\n     }\n }\n "}, {"sha": "d2c6b7304ff3c1886ff59e275401ee647cdbbd7a", "filename": "src/test/ui/type/type-params-in-different-spaces-1.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-1.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,8 +1,16 @@\n error[E0308]: mismatched types\n   --> $DIR/type-params-in-different-spaces-1.rs:5:17\n    |\n-LL |         *self + rhs\n-   |                 ^^^ expected type parameter, found a different type parameter\n+LL | / trait BrokenAdd: Copy + Add<Output=Self> {\n+LL | |     fn broken_add<T>(&self, rhs: T) -> Self {\n+   | |                   - found type parameter\n+LL | |         *self + rhs\n+   | |                 ^^^ expected type parameter `Self`, found type parameter `T`\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_- expected type parameter\n    |\n    = note: expected type `Self`\n               found type `T`"}, {"sha": "ec5d6372792b33447060cf68c5663b7a63ea456e", "filename": "src/test/ui/type/type-params-in-different-spaces-3.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f746d99f683d1475e1150fc4fa5206fd4cfe7e66/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-3.stderr?ref=f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "patch": "@@ -1,10 +1,16 @@\n error[E0308]: mismatched types\n   --> $DIR/type-params-in-different-spaces-3.rs:3:9\n    |\n-LL |     fn test<X>(u: X) -> Self {\n-   |                         ---- expected `Self` because of return type\n-LL |         u\n-   |         ^ expected type parameter, found a different type parameter\n+LL | / trait Tr : Sized {\n+LL | |     fn test<X>(u: X) -> Self {\n+   | |             -           ---- expected `Self` because of return type\n+   | |             |\n+   | |             found type parameter\n+LL | |         u\n+   | |         ^ expected type parameter `Self`, found type parameter `X`\n+LL | |     }\n+LL | | }\n+   | |_- expected type parameter\n    |\n    = note: expected type `Self`\n               found type `X`"}]}