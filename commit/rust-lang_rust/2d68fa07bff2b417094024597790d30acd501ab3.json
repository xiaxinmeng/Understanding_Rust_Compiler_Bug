{"sha": "2d68fa07bff2b417094024597790d30acd501ab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNjhmYTA3YmZmMmI0MTcwOTQwMjQ1OTc3OTBkMzBhY2Q1MDFhYjM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-04T23:59:33Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-25T06:54:06Z"}, "message": "Remove `OpenSnapshot` and `CommittedSnapshot` markers from `SnapshotMap`.\n\nThey're not strictly necessary, and they result in the `Vec` being\nallocated even for the trivial (and common) case where a\n`start_snapshot` is immediately followed by a `commit` or `rollback_to`.", "tree": {"sha": "6ad10d7419d496c64f30d8c38d9679da90e6c636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ad10d7419d496c64f30d8c38d9679da90e6c636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d68fa07bff2b417094024597790d30acd501ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d68fa07bff2b417094024597790d30acd501ab3", "html_url": "https://github.com/rust-lang/rust/commit/2d68fa07bff2b417094024597790d30acd501ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d68fa07bff2b417094024597790d30acd501ab3/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23c969492fe5aeb2e33316032387175020d2672", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23c969492fe5aeb2e33316032387175020d2672", "html_url": "https://github.com/rust-lang/rust/commit/f23c969492fe5aeb2e33316032387175020d2672"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "c256506a19d4299a94c0cb0c1d591c794e7cfafc", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2d68fa07bff2b417094024597790d30acd501ab3/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d68fa07bff2b417094024597790d30acd501ab3/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=2d68fa07bff2b417094024597790d30acd501ab3", "patch": "@@ -21,6 +21,7 @@ pub struct SnapshotMap<K, V>\n {\n     map: FxHashMap<K, V>,\n     undo_log: Vec<UndoLog<K, V>>,\n+    num_open_snapshots: usize,\n }\n \n // HACK(eddyb) manual impl avoids `Default` bounds on `K` and `V`.\n@@ -31,6 +32,7 @@ impl<K, V> Default for SnapshotMap<K, V>\n         SnapshotMap {\n             map: Default::default(),\n             undo_log: Default::default(),\n+            num_open_snapshots: 0,\n         }\n     }\n }\n@@ -40,8 +42,6 @@ pub struct Snapshot {\n }\n \n enum UndoLog<K, V> {\n-    OpenSnapshot,\n-    CommittedSnapshot,\n     Inserted(K),\n     Overwrite(K, V),\n     Purged,\n@@ -53,10 +53,11 @@ impl<K, V> SnapshotMap<K, V>\n     pub fn clear(&mut self) {\n         self.map.clear();\n         self.undo_log.clear();\n+        self.num_open_snapshots = 0;\n     }\n \n     fn in_snapshot(&self) -> bool {\n-        !self.undo_log.is_empty()\n+        self.num_open_snapshots > 0\n     }\n \n     pub fn insert(&mut self, key: K, value: V) -> bool {\n@@ -93,27 +94,27 @@ impl<K, V> SnapshotMap<K, V>\n     }\n \n     pub fn snapshot(&mut self) -> Snapshot {\n-        self.undo_log.push(UndoLog::OpenSnapshot);\n-        let len = self.undo_log.len() - 1;\n+        let len = self.undo_log.len();\n+        self.num_open_snapshots += 1;\n         Snapshot { len }\n     }\n \n     fn assert_open_snapshot(&self, snapshot: &Snapshot) {\n-        assert!(snapshot.len < self.undo_log.len());\n-        assert!(match self.undo_log[snapshot.len] {\n-            UndoLog::OpenSnapshot => true,\n-            _ => false,\n-        });\n+        assert!(self.undo_log.len() >= snapshot.len);\n+        assert!(self.num_open_snapshots > 0);\n     }\n \n     pub fn commit(&mut self, snapshot: Snapshot) {\n         self.assert_open_snapshot(&snapshot);\n-        if snapshot.len == 0 {\n-            // The root snapshot.\n+        if self.num_open_snapshots == 1 {\n+            // The root snapshot. It's safe to clear the undo log because\n+            // there's no snapshot further out that we might need to roll back\n+            // to.\n+            assert!(snapshot.len == 0);\n             self.undo_log.clear();\n-        } else {\n-            self.undo_log[snapshot.len] = UndoLog::CommittedSnapshot;\n         }\n+\n+        self.num_open_snapshots -= 1;\n     }\n \n     pub fn partial_rollback<F>(&mut self,\n@@ -122,10 +123,8 @@ impl<K, V> SnapshotMap<K, V>\n         where F: Fn(&K) -> bool\n     {\n         self.assert_open_snapshot(snapshot);\n-        for i in (snapshot.len + 1..self.undo_log.len()).rev() {\n+        for i in (snapshot.len .. self.undo_log.len()).rev() {\n             let reverse = match self.undo_log[i] {\n-                UndoLog::OpenSnapshot => false,\n-                UndoLog::CommittedSnapshot => false,\n                 UndoLog::Purged => false,\n                 UndoLog::Inserted(ref k) => should_revert_key(k),\n                 UndoLog::Overwrite(ref k, _) => should_revert_key(k),\n@@ -140,27 +139,16 @@ impl<K, V> SnapshotMap<K, V>\n \n     pub fn rollback_to(&mut self, snapshot: Snapshot) {\n         self.assert_open_snapshot(&snapshot);\n-        while self.undo_log.len() > snapshot.len + 1 {\n+        while self.undo_log.len() > snapshot.len {\n             let entry = self.undo_log.pop().unwrap();\n             self.reverse(entry);\n         }\n \n-        let v = self.undo_log.pop().unwrap();\n-        assert!(match v {\n-            UndoLog::OpenSnapshot => true,\n-            _ => false,\n-        });\n-        assert!(self.undo_log.len() == snapshot.len);\n+        self.num_open_snapshots -= 1;\n     }\n \n     fn reverse(&mut self, entry: UndoLog<K, V>) {\n         match entry {\n-            UndoLog::OpenSnapshot => {\n-                panic!(\"cannot rollback an uncommitted snapshot\");\n-            }\n-\n-            UndoLog::CommittedSnapshot => {}\n-\n             UndoLog::Inserted(key) => {\n                 self.map.remove(&key);\n             }"}, {"sha": "b4ecb85fc43023b78eebd68169abea23be3eacb4", "filename": "src/librustc_data_structures/snapshot_map/test.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d68fa07bff2b417094024597790d30acd501ab3/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d68fa07bff2b417094024597790d30acd501ab3/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs?ref=2d68fa07bff2b417094024597790d30acd501ab3", "patch": "@@ -17,8 +17,8 @@ fn basic() {\n     let snapshot = map.snapshot();\n     map.insert(22, \"thirty-three\");\n     assert_eq!(map[&22], \"thirty-three\");\n-    map.insert(44, \"fourty-four\");\n-    assert_eq!(map[&44], \"fourty-four\");\n+    map.insert(44, \"forty-four\");\n+    assert_eq!(map[&44], \"forty-four\");\n     assert_eq!(map.get(&33), None);\n     map.rollback_to(snapshot);\n     assert_eq!(map[&22], \"twenty-two\");\n@@ -32,8 +32,11 @@ fn out_of_order() {\n     let mut map = SnapshotMap::default();\n     map.insert(22, \"twenty-two\");\n     let snapshot1 = map.snapshot();\n-    let _snapshot2 = map.snapshot();\n-    map.rollback_to(snapshot1);\n+    map.insert(33, \"thirty-three\");\n+    let snapshot2 = map.snapshot();\n+    map.insert(44, \"forty-four\");\n+    map.rollback_to(snapshot1); // bogus, but accepted\n+    map.rollback_to(snapshot2); // asserts\n }\n \n #[test]"}]}