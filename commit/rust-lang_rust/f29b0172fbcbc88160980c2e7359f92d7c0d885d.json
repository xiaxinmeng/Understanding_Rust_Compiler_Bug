{"sha": "f29b0172fbcbc88160980c2e7359f92d7c0d885d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOWIwMTcyZmJjYmM4ODE2MDk4MGMyZTczNTlmOTJkN2MwZDg4NWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-04T11:09:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-04T11:09:21Z"}, "message": "Use Default everywhere", "tree": {"sha": "4ec1f709d283d3ea0b7c225a70f6439d67a5ca32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec1f709d283d3ea0b7c225a70f6439d67a5ca32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29b0172fbcbc88160980c2e7359f92d7c0d885d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29b0172fbcbc88160980c2e7359f92d7c0d885d", "html_url": "https://github.com/rust-lang/rust/commit/f29b0172fbcbc88160980c2e7359f92d7c0d885d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29b0172fbcbc88160980c2e7359f92d7c0d885d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca5f862de8a4eb4a8990fdca95a4a7686937789", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca5f862de8a4eb4a8990fdca95a4a7686937789", "html_url": "https://github.com/rust-lang/rust/commit/cca5f862de8a4eb4a8990fdca95a4a7686937789"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "627512553024fcddaf5e8dc838f0967b67f4fb40", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=f29b0172fbcbc88160980c2e7359f92d7c0d885d", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use ra_editor::LineIndex;\n use ra_syntax::{File, SyntaxNode};\n-use salsa;\n+use salsa::{self, Database};\n \n use crate::{\n     db,\n@@ -15,7 +15,7 @@ use crate::{\n     Cancelable, Canceled, FileId,\n };\n \n-#[derive(Default, Debug)]\n+#[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n }\n@@ -26,6 +26,21 @@ impl salsa::Database for RootDatabase {\n     }\n }\n \n+impl Default for RootDatabase {\n+    fn default() -> RootDatabase {\n+        let mut db = RootDatabase {\n+            runtime: Default::default(),\n+        };\n+        db.query_mut(crate::input::SourceRootQuery)\n+            .set(crate::input::WORKSPACE, Default::default());\n+        db.query_mut(crate::input::CrateGraphQuery)\n+            .set((), Default::default());\n+        db.query_mut(crate::input::LibrariesQuery)\n+            .set((), Default::default());\n+        db\n+    }\n+}\n+\n pub(crate) fn check_canceled(db: &impl salsa::Database) -> Cancelable<()> {\n     if db.salsa_runtime().is_current_revision_canceled() {\n         Err(Canceled)"}, {"sha": "4f337d1631c63f05ff701b253b3c65287be2f628", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=f29b0172fbcbc88160980c2e7359f92d7c0d885d", "patch": "@@ -86,22 +86,12 @@ impl Default for FileResolverImp {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub(crate) struct AnalysisHostImpl {\n     db: db::RootDatabase,\n }\n \n impl AnalysisHostImpl {\n-    pub fn new() -> AnalysisHostImpl {\n-        let mut db = db::RootDatabase::default();\n-        db.query_mut(crate::input::SourceRootQuery)\n-            .set(WORKSPACE, Default::default());\n-        db.query_mut(crate::input::CrateGraphQuery)\n-            .set((), Default::default());\n-        db.query_mut(crate::input::LibrariesQuery)\n-            .set((), Default::default());\n-        AnalysisHostImpl { db }\n-    }\n     pub fn analysis(&self) -> AnalysisImpl {\n         AnalysisImpl {\n             db: self.db.snapshot(),"}, {"sha": "4e4c65f084793b78e7893e0f11f482098d7e0e6e", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=f29b0172fbcbc88160980c2e7359f92d7c0d885d", "patch": "@@ -99,17 +99,12 @@ impl AnalysisChange {\n }\n \n /// `AnalysisHost` stores the current state of the world.\n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct AnalysisHost {\n     imp: AnalysisHostImpl,\n }\n \n impl AnalysisHost {\n-    pub fn new() -> AnalysisHost {\n-        AnalysisHost {\n-            imp: AnalysisHostImpl::new(),\n-        }\n-    }\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {"}, {"sha": "a7134a0e66876d3be3154eee0cb2340161ff8b3f", "filename": "crates/ra_analysis/src/mock_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs?ref=f29b0172fbcbc88160980c2e7359f92d7c0d885d", "patch": "@@ -82,7 +82,7 @@ impl MockAnalysis {\n         FileId(idx as u32 + 1)\n     }\n     pub fn analysis_host(self) -> AnalysisHost {\n-        let mut host = AnalysisHost::new();\n+        let mut host = AnalysisHost::default();\n         let mut file_map = Vec::new();\n         let mut change = AnalysisChange::new();\n         for (id, (path, contents)) in self.files.into_iter().enumerate() {"}, {"sha": "1eb14753962b0ac49c46c33db234625e4b825309", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=f29b0172fbcbc88160980c2e7359f92d7c0d885d", "patch": "@@ -61,7 +61,7 @@ pub fn main_loop(\n     let (ws_worker, ws_watcher) = workspace_loader();\n \n     info!(\"server initialized, serving requests\");\n-    let mut state = ServerWorldState::new();\n+    let mut state = ServerWorldState::default();\n \n     let mut pending_requests = FxHashSet::default();\n     let mut subs = Subscriptions::new();"}, {"sha": "87eabf9bee404cb574a53f0e1ad7c146b721329b", "filename": "crates/ra_lsp_server/src/path_map.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs?ref=f29b0172fbcbc88160980c2e7359f92d7c0d885d", "patch": "@@ -28,9 +28,6 @@ impl fmt::Debug for PathMap {\n }\n \n impl PathMap {\n-    pub fn new() -> PathMap {\n-        Default::default()\n-    }\n     pub fn get_or_insert(&mut self, path: PathBuf, root: Root) -> (bool, FileId) {\n         let mut inserted = false;\n         let file_id = self\n@@ -117,7 +114,7 @@ mod test {\n \n     #[test]\n     fn test_resolve() {\n-        let mut m = PathMap::new();\n+        let mut m = PathMap::default();\n         let (_, id1) = m.get_or_insert(PathBuf::from(\"/foo\"), Root::Workspace);\n         let (_, id2) = m.get_or_insert(PathBuf::from(\"/foo/bar.rs\"), Root::Workspace);\n         assert_eq!(m.resolve(id1, &RelativePath::new(\"bar.rs\")), Some(id2),)"}, {"sha": "3e7670fccec063dbf359b9cab0480c74b2f9f4ee", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b0172fbcbc88160980c2e7359f92d7c0d885d/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=f29b0172fbcbc88160980c2e7359f92d7c0d885d", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     Result,\n };\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n pub struct ServerWorldState {\n     pub workspaces: Arc<Vec<CargoWorkspace>>,\n     pub analysis_host: AnalysisHost,\n@@ -32,14 +32,6 @@ pub struct ServerWorld {\n }\n \n impl ServerWorldState {\n-    pub fn new() -> ServerWorldState {\n-        ServerWorldState {\n-            workspaces: Arc::new(Vec::new()),\n-            analysis_host: AnalysisHost::new(),\n-            path_map: PathMap::new(),\n-            mem_map: FxHashMap::default(),\n-        }\n-    }\n     pub fn apply_fs_changes(&mut self, events: Vec<FileEvent>) {\n         let mut change = AnalysisChange::new();\n         let mut inserted = false;"}]}