{"sha": "b36cbcb0c4ab342fdc575e323535965ce6711d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNmNiY2IwYzRhYjM0MmZkYzU3NWUzMjM1MzU5NjVjZTY3MTFkMzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-04T18:26:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-05T10:03:25Z"}, "message": "add a comment about Locations::All", "tree": {"sha": "06fbd15a647cbfafd1191338c31282702cd18697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06fbd15a647cbfafd1191338c31282702cd18697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36cbcb0c4ab342fdc575e323535965ce6711d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36cbcb0c4ab342fdc575e323535965ce6711d37", "html_url": "https://github.com/rust-lang/rust/commit/b36cbcb0c4ab342fdc575e323535965ce6711d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36cbcb0c4ab342fdc575e323535965ce6711d37/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9788479784a22af8e7c1008c7c63026d7c9338ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9788479784a22af8e7c1008c7c63026d7c9338ca", "html_url": "https://github.com/rust-lang/rust/commit/9788479784a22af8e7c1008c7c63026d7c9338ca"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "42a1745addff75de36333f0f7047e59e2af05aea", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b36cbcb0c4ab342fdc575e323535965ce6711d37/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36cbcb0c4ab342fdc575e323535965ce6711d37/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=b36cbcb0c4ab342fdc575e323535965ce6711d37", "patch": "@@ -618,9 +618,45 @@ pub struct OutlivesSet<'tcx> {\n     pub data: RegionConstraintData<'tcx>,\n }\n \n+/// The `Locations` type summarizes *where* region constraints are\n+/// required to hold. Normally, this is at a particular point which\n+/// created the obligation, but for constraints that the user gave, we\n+/// want the constraint to hold at all points.\n #[derive(Copy, Clone, Debug)]\n pub enum Locations {\n+    /// Indicates that a type constraint should always be true. This\n+    /// is particularly important in the new borrowck analysis for\n+    /// things like the type of the return slot. Consider this\n+    /// example:\n+    ///\n+    /// ```\n+    /// fn foo<'a>(x: &'a u32) -> &'a u32 {\n+    ///     let y = 22;\n+    ///     return &y; // error\n+    /// }\n+    /// ```\n+    ///\n+    /// Here, we wind up with the signature from the return type being\n+    /// something like `&'1 u32` where `'1` is a universal region. But\n+    /// the type of the return slot `_0` is something like `&'2 u32`\n+    /// where `'2` is an existential region variable. The type checker\n+    /// requires that `&'2 u32 = &'1 u32` -- but at what point? In the\n+    /// older NLL analysis, we required this only at the entry point\n+    /// to the function. By the nature of the constraints, this wound\n+    /// up propagating to all points reachable from start (because\n+    /// `'1` -- as a universal region -- is live everywhere).  In the\n+    /// newer analysis, though, this doesn't work: `_0` is considered\n+    /// dead at the start (it has no usable value) and hence this type\n+    /// equality is basically a no-op. Then, later on, when we do `_0\n+    /// = &'3 y`, that region `'3` never winds up related to the\n+    /// universal region `'1` and hence no error occurs. Therefore, we\n+    /// use Locations::All instead, which ensures that the `'1` and\n+    /// `'2` are equal everything. We also use this for other\n+    /// user-given type annotations; e.g., if the user wrote `let mut\n+    /// x: &'static u32 = ...`, we would ensure that all values\n+    /// assigned to `x` are of `'static` lifetime.\n     All,\n+\n     Pair {\n         /// The location in the MIR that generated these constraints.\n         /// This is intended for error reporting and diagnosis; the"}]}