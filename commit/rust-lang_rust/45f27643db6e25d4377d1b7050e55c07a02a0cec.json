{"sha": "45f27643db6e25d4377d1b7050e55c07a02a0cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjI3NjQzZGI2ZTI1ZDQzNzdkMWI3MDUwZTU1YzA3YTAyYTBjZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-05T09:07:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T02:26:16Z"}, "message": "prepare moving HardwiredLints to rustc_session", "tree": {"sha": "c6b222847be8514c5ad351e6434244137dcde713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b222847be8514c5ad351e6434244137dcde713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f27643db6e25d4377d1b7050e55c07a02a0cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f27643db6e25d4377d1b7050e55c07a02a0cec", "html_url": "https://github.com/rust-lang/rust/commit/45f27643db6e25d4377d1b7050e55c07a02a0cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f27643db6e25d4377d1b7050e55c07a02a0cec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "html_url": "https://github.com/rust-lang/rust/commit/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf"}], "stats": {"total": 386, "additions": 187, "deletions": 199}, "files": [{"sha": "9783bc36ea542cffe5abc414a0fc6485b1dcd8ec", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 129, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -4,14 +4,9 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::lint::{FutureIncompatibleInfo, LateLintPass, LintArray, LintPass};\n-use crate::middle::stability;\n-use crate::session::Session;\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n-use rustc_session::declare_lint;\n-use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::lint::FutureIncompatibleInfo;\n+use rustc_session::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::Span;\n use syntax::early_buffered_lints::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n \n declare_lint! {\n@@ -512,125 +507,3 @@ declare_lint_pass! {\n         SOFT_UNSTABLE,\n     ]\n }\n-\n-impl LateLintPass<'_, '_> for HardwiredLints {}\n-\n-pub fn add_elided_lifetime_in_path_suggestion(\n-    sess: &Session,\n-    db: &mut DiagnosticBuilder<'_>,\n-    n: usize,\n-    path_span: Span,\n-    incl_angl_brckt: bool,\n-    insertion_span: Span,\n-    anon_lts: String,\n-) {\n-    let (replace_span, suggestion) = if incl_angl_brckt {\n-        (insertion_span, anon_lts)\n-    } else {\n-        // When possible, prefer a suggestion that replaces the whole\n-        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n-        // at a point (which makes for an ugly/confusing label)\n-        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n-            // But our spans can get out of whack due to macros; if the place we think\n-            // we want to insert `'_` isn't even within the path expression's span, we\n-            // should bail out of making any suggestion rather than panicking on a\n-            // subtract-with-overflow or string-slice-out-out-bounds (!)\n-            // FIXME: can we do better?\n-            if insertion_span.lo().0 < path_span.lo().0 {\n-                return;\n-            }\n-            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n-            if insertion_index > snippet.len() {\n-                return;\n-            }\n-            let (before, after) = snippet.split_at(insertion_index);\n-            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n-        } else {\n-            (insertion_span, anon_lts)\n-        }\n-    };\n-    db.span_suggestion(\n-        replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n-        suggestion,\n-        Applicability::MachineApplicable,\n-    );\n-}\n-\n-pub fn run_builtin_lint_diagnostics(\n-    this: BuiltinLintDiagnostics,\n-    sess: &Session,\n-    db: &mut DiagnosticBuilder<'_>,\n-) {\n-    match this {\n-        BuiltinLintDiagnostics::Normal => (),\n-        BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n-            let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                Ok(s) if is_global => (format!(\"dyn ({})\", s), Applicability::MachineApplicable),\n-                Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n-                Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n-            };\n-            db.span_suggestion(span, \"use `dyn`\", sugg, app);\n-        }\n-        BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n-            let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n-                Ok(ref s) => {\n-                    // FIXME(Manishearth) ideally the emitting code\n-                    // can tell us whether or not this is global\n-                    let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n-\n-                    (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n-                }\n-                Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n-            };\n-            db.span_suggestion(span, \"use `crate`\", sugg, app);\n-        }\n-        BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n-            db.span_label(\n-                span,\n-                \"names from parent modules are not accessible without an explicit import\",\n-            );\n-        }\n-        BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n-            db.span_note(span_def, \"the macro is defined here\");\n-        }\n-        BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n-            n,\n-            path_span,\n-            incl_angl_brckt,\n-            insertion_span,\n-            anon_lts,\n-        ) => {\n-            add_elided_lifetime_in_path_suggestion(\n-                sess,\n-                db,\n-                n,\n-                path_span,\n-                incl_angl_brckt,\n-                insertion_span,\n-                anon_lts,\n-            );\n-        }\n-        BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n-            db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n-        }\n-        BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n-            if !replaces.is_empty() {\n-                db.tool_only_multipart_suggestion(\n-                    &message,\n-                    replaces,\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n-        BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n-            for (span, is_imported) in spans {\n-                let introduced = if is_imported { \"imported\" } else { \"defined\" };\n-                db.span_label(span, format!(\"the item `{}` is already {} here\", ident, introduced));\n-            }\n-        }\n-        BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n-            stability::deprecation_suggestion(db, suggestion, span)\n-        }\n-    }\n-}"}, {"sha": "3f18f4dbd1fe76a8986066f0e8216ba8ee34bb62", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 123, "deletions": 2, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -20,13 +20,14 @@ use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::lint::{EarlyLintPassObject, LateLintPassObject};\n use crate::middle::privacy::AccessLevels;\n+use crate::middle::stability;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n use crate::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_error_codes::*;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -466,6 +467,48 @@ impl LintPassObject for EarlyLintPassObject {}\n \n impl LintPassObject for LateLintPassObject {}\n \n+pub fn add_elided_lifetime_in_path_suggestion(\n+    sess: &Session,\n+    db: &mut DiagnosticBuilder<'_>,\n+    n: usize,\n+    path_span: Span,\n+    incl_angl_brckt: bool,\n+    insertion_span: Span,\n+    anon_lts: String,\n+) {\n+    let (replace_span, suggestion) = if incl_angl_brckt {\n+        (insertion_span, anon_lts)\n+    } else {\n+        // When possible, prefer a suggestion that replaces the whole\n+        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n+        // at a point (which makes for an ugly/confusing label)\n+        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n+            // But our spans can get out of whack due to macros; if the place we think\n+            // we want to insert `'_` isn't even within the path expression's span, we\n+            // should bail out of making any suggestion rather than panicking on a\n+            // subtract-with-overflow or string-slice-out-out-bounds (!)\n+            // FIXME: can we do better?\n+            if insertion_span.lo().0 < path_span.lo().0 {\n+                return;\n+            }\n+            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n+            if insertion_index > snippet.len() {\n+                return;\n+            }\n+            let (before, after) = snippet.split_at(insertion_index);\n+            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n+        } else {\n+            (insertion_span, anon_lts)\n+        }\n+    };\n+    db.span_suggestion(\n+        replace_span,\n+        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n+        suggestion,\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n pub trait LintContext: Sized {\n     type PassObject: LintPassObject;\n \n@@ -484,7 +527,85 @@ pub trait LintContext: Sized {\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         let mut db = self.lookup(lint, span, msg);\n-        super::builtin::run_builtin_lint_diagnostics(diagnostic, self.sess(), &mut db);\n+\n+        let sess = self.sess();\n+        match diagnostic {\n+            BuiltinLintDiagnostics::Normal => (),\n+            BuiltinLintDiagnostics::BareTraitObject(span, is_global) => {\n+                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                    Ok(s) if is_global => {\n+                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n+                    }\n+                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                db.span_suggestion(span, \"use `dyn`\", sugg, app);\n+            }\n+            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n+                let (sugg, app) = match sess.source_map().span_to_snippet(span) {\n+                    Ok(ref s) => {\n+                        // FIXME(Manishearth) ideally the emitting code\n+                        // can tell us whether or not this is global\n+                        let opt_colon = if s.trim_start().starts_with(\"::\") { \"\" } else { \"::\" };\n+\n+                        (format!(\"crate{}{}\", opt_colon, s), Applicability::MachineApplicable)\n+                    }\n+                    Err(_) => (\"crate::<path>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                db.span_suggestion(span, \"use `crate`\", sugg, app);\n+            }\n+            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(span) => {\n+                db.span_label(\n+                    span,\n+                    \"names from parent modules are not accessible without an explicit import\",\n+                );\n+            }\n+            BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def) => {\n+                db.span_note(span_def, \"the macro is defined here\");\n+            }\n+            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                n,\n+                path_span,\n+                incl_angl_brckt,\n+                insertion_span,\n+                anon_lts,\n+            ) => {\n+                add_elided_lifetime_in_path_suggestion(\n+                    sess,\n+                    &mut db,\n+                    n,\n+                    path_span,\n+                    incl_angl_brckt,\n+                    insertion_span,\n+                    anon_lts,\n+                );\n+            }\n+            BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n+                db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n+            }\n+            BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n+                if !replaces.is_empty() {\n+                    db.tool_only_multipart_suggestion(\n+                        &message,\n+                        replaces,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n+                for (span, is_imported) in spans {\n+                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n+                    db.span_label(\n+                        span,\n+                        format!(\"the item `{}` is already {} here\", ident, introduced),\n+                    );\n+                }\n+            }\n+            BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n+                stability::deprecation_suggestion(&mut db, suggestion, span)\n+            }\n+        }\n+\n         db.emit();\n     }\n "}, {"sha": "30679226b9b71f2430281e77784c211598ec0bb2", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -1,13 +1,11 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::lint::{\n-    EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n-};\n+use crate::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n-use rustc_session::declare_tool_lint;\n+use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{Ident, Item, ItemKind};\n "}, {"sha": "1aa4a43a2f2e39cdfd033cfa237c7d7026e72852", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -21,6 +21,7 @@\n pub use self::Level::*;\n pub use self::LintSource::*;\n \n+use crate::lint::builtin::HardwiredLints;\n use crate::ty::TyCtxt;\n use rustc_data_structures::sync;\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n@@ -33,48 +34,12 @@ use rustc_span::Span;\n use syntax::ast;\n \n pub use crate::lint::context::{\n-    CheckLintNameResult, EarlyContext, LateContext, LintContext, LintStore,\n+    add_elided_lifetime_in_path_suggestion, CheckLintNameResult, EarlyContext, LateContext,\n+    LintContext, LintStore,\n };\n \n pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Level, Lint, LintId};\n-\n-/// Declares a static `LintArray` and return it as an expression.\n-#[macro_export]\n-macro_rules! lint_array {\n-    ($( $lint:expr ),* ,) => { lint_array!( $($lint),* ) };\n-    ($( $lint:expr ),*) => {{\n-        vec![$($lint),*]\n-    }}\n-}\n-\n-pub type LintArray = Vec<&'static Lint>;\n-\n-pub trait LintPass {\n-    fn name(&self) -> &'static str;\n-}\n-\n-/// Implements `LintPass for $name` with the given list of `Lint` statics.\n-#[macro_export]\n-macro_rules! impl_lint_pass {\n-    ($name:ident => [$($lint:expr),* $(,)?]) => {\n-        impl LintPass for $name {\n-            fn name(&self) -> &'static str { stringify!($name) }\n-        }\n-        impl $name {\n-            pub fn get_lints() -> LintArray { $crate::lint_array!($($lint),*) }\n-        }\n-    };\n-}\n-\n-/// Declares a type named `$name` which implements `LintPass`.\n-/// To the right of `=>` a comma separated list of `Lint` statics is given.\n-#[macro_export]\n-macro_rules! declare_lint_pass {\n-    ($(#[$m:meta])* $name:ident => [$($lint:expr),* $(,)?]) => {\n-        $(#[$m])* #[derive(Copy, Clone)] pub struct $name;\n-        $crate::impl_lint_pass!($name => [$($lint),*]);\n-    };\n-}\n+pub use rustc_session::lint::{LintArray, LintPass};\n \n #[macro_export]\n macro_rules! late_lint_methods {\n@@ -166,6 +131,8 @@ macro_rules! declare_late_lint_pass {\n \n late_lint_methods!(declare_late_lint_pass, [], ['tcx]);\n \n+impl LateLintPass<'_, '_> for HardwiredLints {}\n+\n #[macro_export]\n macro_rules! expand_combined_late_lint_pass_method {\n     ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({"}, {"sha": "65347d379bd6a19e97d19a67c8a07d4e6c879b0c", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             E0726,\n                             \"implicit elided lifetime not allowed here\"\n                         );\n-                        rustc::lint::builtin::add_elided_lifetime_in_path_suggestion(\n+                        rustc::lint::add_elided_lifetime_in_path_suggestion(\n                             &self.sess,\n                             &mut err,\n                             expected_lifetimes,"}, {"sha": "19d1052d1b243101a8c7162e8d7fb33aa340b847", "filename": "src/librustc_lint/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -1,5 +1,4 @@\n-use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::lint::FutureIncompatibleInfo;\n+use rustc::lint::{FutureIncompatibleInfo, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n use rustc_errors::Applicability;"}, {"sha": "befeb84e57c9c8a49ee6afe4bcf39f7f9309edc7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -21,13 +21,8 @@\n //! If you define a new `LateLintPass`, you will also need to add it to the\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n-use std::fmt::Write;\n-\n-use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n-use lint::{LateContext, LintArray, LintContext};\n use rustc::hir::map::Map;\n-use rustc::lint;\n-use rustc::lint::FutureIncompatibleInfo;\n+use rustc::lint::{self, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -39,6 +34,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{GenericParamKind, PatKind};\n use rustc_hir::{HirIdSet, Node};\n+use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -52,6 +48,7 @@ use syntax::visit::FnKind;\n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n use log::debug;\n+use std::fmt::Write;\n \n // hardwired lints from librustc\n pub use lint::builtin::*;"}, {"sha": "d8e0274cf43b9a2a4374f772ac2dd2bb54197ae2", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -16,20 +16,20 @@\n \n use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n-use rustc::lint::LintPass;\n use rustc::lint::{LateLintPass, LateLintPassObject};\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n+use rustc_session::lint::LintPass;\n use rustc_span::Span;\n-use std::slice;\n use syntax::ast;\n+use syntax::walk_list;\n \n use log::debug;\n-use syntax::walk_list;\n+use std::slice;\n \n macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "e708ded603b25145b5199ca52fd8fbebb521119c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -38,11 +38,12 @@ use rustc::lint::builtin::{\n     BARE_TRAIT_OBJECTS, ELIDED_LIFETIMES_IN_PATHS, EXPLICIT_OUTLIVES_REQUIREMENTS,\n     INTRA_DOC_LINK_RESOLUTION_FAILURE, MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n };\n-use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::{LintArray, LintPass};\n \n use rustc_span::Span;\n use syntax::ast;"}, {"sha": "522aeb6b1442007cac0285beecbe93126ae1c9cc", "filename": "src/librustc_lint/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnon_ascii_idents.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -1,4 +1,4 @@\n-use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintContext};\n use syntax::ast;\n \n declare_lint! {"}, {"sha": "f75bb9ba32c3d954b12de1845f128508bf163e7f", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -1,6 +1,4 @@\n-use lint::{EarlyContext, LateContext, LintArray, LintContext};\n-use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::lint;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "dc18f15fe40cb95072f52326133bad2b2b4721e5", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -1,4 +1,4 @@\n-use crate::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_errors::Applicability;\n use syntax::ast::{ExprKind, Stmt, StmtKind};\n "}, {"sha": "ab6841c0c09bcf26d946d6dc6c2bf0d984eb1dee", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -1,16 +1,14 @@\n #![allow(non_snake_case)]\n \n-use crate::hir::def_id::DefId;\n-use lint::{LateContext, LintArray, LintContext};\n-use lint::{LateLintPass, LintPass};\n-use rustc::lint;\n+use rustc::lint::{LateContext, LateLintPass, LintContext};\n use rustc::mir::interpret::{sign_extend, truncate};\n use rustc::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_span::source_map;"}, {"sha": "da8a23f041e58a945074bc5860b10c9ed6abf4fd", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -1,7 +1,5 @@\n-use lint::{EarlyContext, LateContext, LintArray, LintContext};\n-use lint::{EarlyLintPass, LateLintPass, LintPass};\n-use rustc::lint;\n use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc::ty::adjustment;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "40d40ce72114dcfc5df1db7c8d36388963685c9a", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f27643db6e25d4377d1b7050e55c07a02a0cec/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=45f27643db6e25d4377d1b7050e55c07a02a0cec", "patch": "@@ -326,3 +326,41 @@ macro_rules! declare_tool_lint {\n         };\n     );\n }\n+\n+/// Declares a static `LintArray` and return it as an expression.\n+#[macro_export]\n+macro_rules! lint_array {\n+    ($( $lint:expr ),* ,) => { lint_array!( $($lint),* ) };\n+    ($( $lint:expr ),*) => {{\n+        vec![$($lint),*]\n+    }}\n+}\n+\n+pub type LintArray = Vec<&'static Lint>;\n+\n+pub trait LintPass {\n+    fn name(&self) -> &'static str;\n+}\n+\n+/// Implements `LintPass for $name` with the given list of `Lint` statics.\n+#[macro_export]\n+macro_rules! impl_lint_pass {\n+    ($name:ident => [$($lint:expr),* $(,)?]) => {\n+        impl $crate::lint::LintPass for $name {\n+            fn name(&self) -> &'static str { stringify!($name) }\n+        }\n+        impl $name {\n+            pub fn get_lints() -> $crate::lint::LintArray { $crate::lint_array!($($lint),*) }\n+        }\n+    };\n+}\n+\n+/// Declares a type named `$name` which implements `LintPass`.\n+/// To the right of `=>` a comma separated list of `Lint` statics is given.\n+#[macro_export]\n+macro_rules! declare_lint_pass {\n+    ($(#[$m:meta])* $name:ident => [$($lint:expr),* $(,)?]) => {\n+        $(#[$m])* #[derive(Copy, Clone)] pub struct $name;\n+        $crate::impl_lint_pass!($name => [$($lint),*]);\n+    };\n+}"}]}