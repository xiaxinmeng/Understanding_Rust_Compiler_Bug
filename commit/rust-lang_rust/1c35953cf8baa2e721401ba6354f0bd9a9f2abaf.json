{"sha": "1c35953cf8baa2e721401ba6354f0bd9a9f2abaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzU5NTNjZjhiYWEyZTcyMTQwMWJhNjM1NGYwYmQ5YTlmMmFiYWY=", "commit": {"author": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-03-01T14:50:08Z"}, "committer": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-03-27T01:36:06Z"}, "message": "entry API v3: replace Entry::get with Entry::default and Entry::default_with", "tree": {"sha": "221cff7b67f02a6fa1d30974705cd245473863cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/221cff7b67f02a6fa1d30974705cd245473863cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf", "html_url": "https://github.com/rust-lang/rust/commit/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199bdcfeff5cfafd1f8e8ff583d7209272469879", "url": "https://api.github.com/repos/rust-lang/rust/commits/199bdcfeff5cfafd1f8e8ff583d7209272469879", "html_url": "https://github.com/rust-lang/rust/commit/199bdcfeff5cfafd1f8e8ff583d7209272469879"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "ee4b66b043ce9a8e1d5bc42096441120c6162fb3", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=1c35953cf8baa2e721401ba6354f0bd9a9f2abaf", "patch": "@@ -1143,15 +1143,39 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K: Ord, V> Entry<'a, K, V> {\n-    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     #[unstable(feature = \"std_misc\",\n                reason = \"will soon be replaced by or_insert\")]\n+    #[deprecated(since = \"1.0\",\n+                reason = \"replaced with more ergonomic `default` and `default_with`\")]\n+    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),\n             Vacant(entry) => Err(entry),\n         }\n     }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the default if empty, and returns\n+    /// a mutable reference to the value in the entry.\n+    pub fn default(self, default: V) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default),\n+        }\n+    }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the result of the default function if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    pub fn default_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default()),\n+        }\n+    }\n }\n \n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {"}, {"sha": "c73caccef80535ee5d35c444799a7afce4568b45", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=1c35953cf8baa2e721401ba6354f0bd9a9f2abaf", "patch": "@@ -675,13 +675,37 @@ impl<V> VecMap<V> {\n impl<'a, V> Entry<'a, V> {\n     #[unstable(feature = \"collections\",\n                reason = \"will soon be replaced by or_insert\")]\n+    #[deprecated(since = \"1.0\",\n+                reason = \"replaced with more ergonomic `default` and `default_with`\")]\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),\n             Vacant(entry) => Err(entry),\n         }\n     }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the default if empty, and returns\n+    /// a mutable reference to the value in the entry.\n+    pub fn default(self, default: V) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default),\n+        }\n+    }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the result of the default function if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    pub fn default_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default()),\n+        }\n+    }\n }\n \n impl<'a, V> VacantEntry<'a, V> {"}, {"sha": "b3557529a668fcc0d1a58b2f45c208f3a802fad5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c35953cf8baa2e721401ba6354f0bd9a9f2abaf/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1c35953cf8baa2e721401ba6354f0bd9a9f2abaf", "patch": "@@ -23,7 +23,7 @@ use hash::{Hash, SipHasher};\n use iter::{self, Iterator, ExactSizeIterator, IntoIterator, IteratorExt, FromIterator, Extend, Map};\n use marker::Sized;\n use mem::{self, replace};\n-use ops::{Deref, FnMut, Index};\n+use ops::{Deref, FnMut, FnOnce, Index};\n use option::Option::{self, Some, None};\n use rand::{self, Rng};\n use result::Result::{self, Ok, Err};\n@@ -1488,12 +1488,36 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.\n     #[unstable(feature = \"std_misc\",\n                reason = \"will soon be replaced by or_insert\")]\n+    #[deprecated(since = \"1.0\",\n+                reason = \"replaced with more ergonomic `default` and `default_with`\")]\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),\n             Vacant(entry) => Err(entry),\n         }\n     }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the default if empty, and returns\n+    /// a mutable reference to the value in the entry.\n+    pub fn default(self, default: V) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default),\n+        }\n+    }\n+\n+    #[unstable(feature = \"collections\",\n+               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    /// Ensures a value is in the entry by inserting the result of the default function if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    pub fn default_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(default()),\n+        }\n+    }\n }\n \n impl<'a, K, V> OccupiedEntry<'a, K, V> {"}]}