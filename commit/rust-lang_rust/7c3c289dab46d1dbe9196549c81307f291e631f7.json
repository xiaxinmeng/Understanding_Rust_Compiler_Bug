{"sha": "7c3c289dab46d1dbe9196549c81307f291e631f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjM2MyODlkYWI0NmQxZGJlOTE5NjU0OWM4MTMwN2YyOTFlNjMxZjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-29T09:57:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-29T09:59:11Z"}, "message": "Use specific pattern when translating if-let-else to match\n\nWe *probably* should actually use the same machinery here, as we do\nfor fill match arms, but just special-casing options and results seems\nto be a good first step.", "tree": {"sha": "9f9249e03c3ecf09bff04bc1fa80c00280ff6be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f9249e03c3ecf09bff04bc1fa80c00280ff6be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c3c289dab46d1dbe9196549c81307f291e631f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3c289dab46d1dbe9196549c81307f291e631f7", "html_url": "https://github.com/rust-lang/rust/commit/7c3c289dab46d1dbe9196549c81307f291e631f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c3c289dab46d1dbe9196549c81307f291e631f7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73bef854ab854ab1a289944966444453e6f4aadf", "url": "https://api.github.com/repos/rust-lang/rust/commits/73bef854ab854ab1a289944966444453e6f4aadf", "html_url": "https://github.com/rust-lang/rust/commit/73bef854ab854ab1a289944966444453e6f4aadf"}], "stats": {"total": 143, "additions": 123, "deletions": 20}, "files": [{"sha": "9841f6980bc3e01cff360b540e87915027eb9784", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=7c3c289dab46d1dbe9196549c81307f291e631f7", "patch": "@@ -1,11 +1,10 @@\n use ra_fmt::unwrap_trivial_block;\n use ra_syntax::{\n-    ast::{self, make},\n+    ast::{self, edit::IndentLevel, make},\n     AstNode,\n };\n \n-use crate::{Assist, AssistCtx, AssistId};\n-use ast::edit::IndentLevel;\n+use crate::{utils::TryEnum, Assist, AssistCtx, AssistId};\n \n // Assist: replace_if_let_with_match\n //\n@@ -44,15 +43,21 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n         ast::ElseBranch::IfExpr(_) => return None,\n     };\n \n-    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", |edit| {\n+    let sema = ctx.sema;\n+    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", move |edit| {\n         let match_expr = {\n             let then_arm = {\n                 let then_expr = unwrap_trivial_block(then_block);\n-                make::match_arm(vec![pat], then_expr)\n+                make::match_arm(vec![pat.clone()], then_expr)\n             };\n             let else_arm = {\n+                let pattern = sema\n+                    .type_of_pat(&pat)\n+                    .and_then(|ty| TryEnum::from_ty(sema, &ty))\n+                    .map(|it| it.sad_pattern())\n+                    .unwrap_or_else(|| make::placeholder_pat().into());\n                 let else_expr = unwrap_trivial_block(else_block);\n-                make::match_arm(vec![make::placeholder_pat().into()], else_expr)\n+                make::match_arm(vec![pattern], else_expr)\n             };\n             make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]))\n         };\n@@ -68,6 +73,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+\n     use crate::helpers::{check_assist, check_assist_target};\n \n     #[test]\n@@ -145,4 +151,64 @@ impl VariantData {\n         }\",\n         );\n     }\n+\n+    #[test]\n+    fn special_case_option() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn foo(x: Option<i32>) {\n+    <|>if let Some(x) = x {\n+        println!(\"{}\", x)\n+    } else {\n+        println!(\"none\")\n+    }\n+}\n+           \"#,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn foo(x: Option<i32>) {\n+    <|>match x {\n+        Some(x) => println!(\"{}\", x),\n+        None => println!(\"none\"),\n+    }\n+}\n+           \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn special_case_result() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            r#\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+use Result::*;\n+\n+fn foo(x: Result<i32, ()>) {\n+    <|>if let Ok(x) = x {\n+        println!(\"{}\", x)\n+    } else {\n+        println!(\"none\")\n+    }\n+}\n+           \"#,\n+            r#\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+use Result::*;\n+\n+fn foo(x: Result<i32, ()>) {\n+    <|>match x {\n+        Ok(x) => println!(\"{}\", x),\n+        Err(_) => println!(\"none\"),\n+    }\n+}\n+           \"#,\n+        );\n+    }\n }"}, {"sha": "0cf23b754e8d635a06f30a509bdbf46327bee3a7", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=7c3c289dab46d1dbe9196549c81307f291e631f7", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n-    utils::happy_try_variant,\n+    utils::TryEnum,\n     AssistId,\n };\n \n@@ -45,7 +45,7 @@ pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n     let init = let_stmt.initializer()?;\n     let original_pat = let_stmt.pat()?;\n     let ty = ctx.sema.type_of_expr(&init)?;\n-    let happy_variant = happy_try_variant(ctx.sema, &ty);\n+    let happy_variant = TryEnum::from_ty(ctx.sema, &ty).map(|it| it.happy_case());\n \n     ctx.add_assist(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", |edit| {\n         let with_placeholder: ast::Pat = match happy_variant {"}, {"sha": "62d4ea5220259f070d026aefdf6f04c13272a1f2", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=7c3c289dab46d1dbe9196549c81307f291e631f7", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     AstNode,\n };\n \n-use crate::{utils::happy_try_variant, Assist, AssistCtx, AssistId};\n+use crate::{utils::TryEnum, Assist, AssistCtx, AssistId};\n \n // Assist: replace_unwrap_with_match\n //\n@@ -37,7 +37,7 @@ pub(crate) fn replace_unwrap_with_match(ctx: AssistCtx) -> Option<Assist> {\n     }\n     let caller = method_call.expr()?;\n     let ty = ctx.sema.type_of_expr(&caller)?;\n-    let happy_variant = happy_try_variant(ctx.sema, &ty)?;\n+    let happy_variant = TryEnum::from_ty(ctx.sema, &ty)?.happy_case();\n \n     ctx.add_assist(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", |edit| {\n         let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));"}, {"sha": "61f8bd1dcacd6ea004d97ede5aa068924dcace6c", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c3c289dab46d1dbe9196549c81307f291e631f7/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=7c3c289dab46d1dbe9196549c81307f291e631f7", "patch": "@@ -1,6 +1,8 @@\n //! Assorted functions shared by several assists.\n pub(crate) mod insert_use;\n \n+use std::iter;\n+\n use hir::{Adt, Semantics, Type};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n@@ -100,15 +102,50 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     }\n }\n \n-pub(crate) fn happy_try_variant(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<&'static str> {\n-    let enum_ = match ty.as_adt() {\n-        Some(Adt::Enum(it)) => it,\n-        _ => return None,\n-    };\n-    [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter().find_map(|(known_type, happy_case)| {\n-        if &enum_.name(sema.db).to_string() == known_type {\n-            return Some(*happy_case);\n+#[derive(Clone, Copy)]\n+pub(crate) enum TryEnum {\n+    Result,\n+    Option,\n+}\n+\n+impl TryEnum {\n+    const ALL: [TryEnum; 2] = [TryEnum::Option, TryEnum::Result];\n+\n+    pub(crate) fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n+        let enum_ = match ty.as_adt() {\n+            Some(Adt::Enum(it)) => it,\n+            _ => return None,\n+        };\n+        TryEnum::ALL.iter().find_map(|&var| {\n+            if &enum_.name(sema.db).to_string() == var.type_name() {\n+                return Some(var);\n+            }\n+            None\n+        })\n+    }\n+\n+    pub(crate) fn happy_case(self) -> &'static str {\n+        match self {\n+            TryEnum::Result => \"Ok\",\n+            TryEnum::Option => \"Some\",\n         }\n-        None\n-    })\n+    }\n+\n+    pub(crate) fn sad_pattern(self) -> ast::Pat {\n+        match self {\n+            TryEnum::Result => make::tuple_struct_pat(\n+                make::path_unqualified(make::path_segment(make::name_ref(\"Err\"))),\n+                iter::once(make::placeholder_pat().into()),\n+            )\n+            .into(),\n+            TryEnum::Option => make::bind_pat(make::name(\"None\")).into(),\n+        }\n+    }\n+\n+    fn type_name(self) -> &'static str {\n+        match self {\n+            TryEnum::Result => \"Result\",\n+            TryEnum::Option => \"Option\",\n+        }\n+    }\n }"}]}