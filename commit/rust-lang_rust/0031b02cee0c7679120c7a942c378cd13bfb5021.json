{"sha": "0031b02cee0c7679120c7a942c378cd13bfb5021", "node_id": "C_kwDOAAsO6NoAKDAwMzFiMDJjZWUwYzc2NzkxMjBjN2E5NDJjMzc4Y2QxM2JmYjUwMjE", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-01-27T04:54:05Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-01-27T05:04:47Z"}, "message": "Add core_simd/tests/cast.rs", "tree": {"sha": "c0a0f4cc949e2f020fea25751f5f182c2f547503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a0f4cc949e2f020fea25751f5f182c2f547503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0031b02cee0c7679120c7a942c378cd13bfb5021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0031b02cee0c7679120c7a942c378cd13bfb5021", "html_url": "https://github.com/rust-lang/rust/commit/0031b02cee0c7679120c7a942c378cd13bfb5021", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0031b02cee0c7679120c7a942c378cd13bfb5021/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a991d48e95911c0e94f47bda10cbb50200852ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a991d48e95911c0e94f47bda10cbb50200852ec2", "html_url": "https://github.com/rust-lang/rust/commit/a991d48e95911c0e94f47bda10cbb50200852ec2"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "ab5650f071323a9e0b96dbb80c123495372bbf1e", "filename": "crates/core_simd/tests/cast.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0031b02cee0c7679120c7a942c378cd13bfb5021/crates%2Fcore_simd%2Ftests%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0031b02cee0c7679120c7a942c378cd13bfb5021/crates%2Fcore_simd%2Ftests%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fcast.rs?ref=0031b02cee0c7679120c7a942c378cd13bfb5021", "patch": "@@ -0,0 +1,37 @@\n+#![feature(portable_simd)]\n+macro_rules! cast_types {\n+    ($start:ident, $($target:ident),*) => {\n+        mod $start {\n+            use core_simd::simd::Simd;\n+            type Vector<const N: usize> = Simd<$start, N>;\n+            $(\n+                mod $target {\n+                    use super::*;\n+                    test_helpers::test_lanes! {\n+                        fn cast_as<const N: usize>() {\n+                            test_helpers::test_unary_elementwise(\n+                                &Vector::<N>::cast::<$target>,\n+                                &|x| x as $target,\n+                                &|_| true,\n+                            )\n+                        }\n+                    }\n+                }\n+            )*\n+        }\n+    };\n+}\n+\n+// The hypothesis is that widening conversions aren't terribly interesting.\n+cast_types!(f32, f64, i8, u8, usize, isize);\n+cast_types!(f64, f32, i8, u8, usize, isize);\n+cast_types!(i8, u8, f32);\n+cast_types!(u8, i8, f32);\n+cast_types!(i16, u16, i8, u8, f32);\n+cast_types!(u16, i16, i8, u8, f32);\n+cast_types!(i32, u32, i8, u8, f32, f64);\n+cast_types!(u32, i32, i8, u8, f32, f64);\n+cast_types!(i64, u64, i8, u8, isize, usize, f32, f64);\n+cast_types!(u64, i64, i8, u8, isize, usize, f32, f64);\n+cast_types!(isize, usize, i8, u8, f32, f64);\n+cast_types!(usize, isize, i8, u8, f32, f64);"}]}