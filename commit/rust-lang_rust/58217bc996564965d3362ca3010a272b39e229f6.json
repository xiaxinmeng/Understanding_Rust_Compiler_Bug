{"sha": "58217bc996564965d3362ca3010a272b39e229f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MjE3YmM5OTY1NjQ5NjVkMzM2MmNhMzAxMGEyNzJiMzllMjI5ZjY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-02T05:44:47Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T09:53:54Z"}, "message": "Replace uses of `parse_opt_*` with `parse_*` where possible.\n\nThis lets us specify the default at the options declaration point,\ninstead of using `.unwrap(default)` or `None | Some(default)` at some\nuse point far away. It also makes the code more concise.", "tree": {"sha": "93a178f13ac71e43f253d4b992636da87ecbe218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93a178f13ac71e43f253d4b992636da87ecbe218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58217bc996564965d3362ca3010a272b39e229f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58217bc996564965d3362ca3010a272b39e229f6", "html_url": "https://github.com/rust-lang/rust/commit/58217bc996564965d3362ca3010a272b39e229f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58217bc996564965d3362ca3010a272b39e229f6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9bcddc5276c97f8d66f637ae84658b37fbb4957", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bcddc5276c97f8d66f637ae84658b37fbb4957", "html_url": "https://github.com/rust-lang/rust/commit/b9bcddc5276c97f8d66f637ae84658b37fbb4957"}], "stats": {"total": 117, "additions": 50, "deletions": 67}, "files": [{"sha": "b57ad102d634876a1a3b141229bdb4b8ded886bc", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -347,7 +347,7 @@ pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n     }\n \n     // The new pass manager is disabled by default.\n-    config.new_llvm_pass_manager.unwrap_or(false)\n+    config.new_llvm_pass_manager\n }\n \n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager("}, {"sha": "de1b9e320603d4fa285d41f0566cbd823678b9e2", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -858,18 +858,7 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // *not* running dsymutil then the object files are the only source of truth\n     // for debug information, so we must preserve them.\n     if sess.target.target.options.is_like_osx {\n-        match sess.opts.debugging_opts.run_dsymutil {\n-            // dsymutil is not being run, preserve objects\n-            Some(false) => return true,\n-\n-            // dsymutil is being run, no need to preserve the objects\n-            Some(true) => return false,\n-\n-            // The default historical behavior was to always run dsymutil, so\n-            // we're preserving that temporarily, but we're likely to switch the\n-            // default soon.\n-            None => return false,\n-        }\n+        return !sess.opts.debugging_opts.run_dsymutil;\n     }\n \n     false\n@@ -1324,11 +1313,11 @@ fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'\n     // If -Zlink-native-libraries=false is set, then the assumption is that an\n     // external build system already has the native dependencies defined, and it\n     // will provide them to the linker itself.\n-    if sess.opts.debugging_opts.link_native_libraries.unwrap_or(true) {\n+    if sess.opts.debugging_opts.link_native_libraries {\n         add_local_native_libraries(cmd, sess, codegen_results);\n     }\n     add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n-    if sess.opts.debugging_opts.link_native_libraries.unwrap_or(true) {\n+    if sess.opts.debugging_opts.link_native_libraries {\n         add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n     }\n }\n@@ -1534,9 +1523,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // OBJECT-FILES-NO, AUDIT-ORDER\n     // We want to prevent the compiler from accidentally leaking in any system libraries,\n     // so by default we tell linkers not to link to any default libraries.\n-    if !sess.opts.cg.default_linker_libraries.unwrap_or(false)\n-        && sess.target.target.options.no_default_libraries\n-    {\n+    if !sess.opts.cg.default_linker_libraries && sess.target.target.options.no_default_libraries {\n         cmd.no_default_libraries();\n     }\n "}, {"sha": "9ca8f743f658661ab7437ef53b9e24e8ab969147", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -384,7 +384,7 @@ impl<'a> Linker for GccLinker<'a> {\n             // If we are building without debuginfo enabled and we were called with\n             // `-Zstrip-debuginfo-if-disabled=yes`, tell the linker to strip any debuginfo\n             // found when linking to get rid of symbols from libstd.\n-            if let Some(true) = self.sess.opts.debugging_opts.strip_debuginfo_if_disabled {\n+            if self.sess.opts.debugging_opts.strip_debuginfo_if_disabled {\n                 self.linker_arg(\"-S\");\n             }\n         };"}, {"sha": "d81a767abd447ead9a8b2e2aa02fae102ea12403", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -115,7 +115,7 @@ pub struct ModuleConfig {\n     pub vectorize_slp: bool,\n     pub merge_functions: bool,\n     pub inline_threshold: Option<usize>,\n-    pub new_llvm_pass_manager: Option<bool>,\n+    pub new_llvm_pass_manager: bool,\n }\n \n impl ModuleConfig {"}, {"sha": "13c0c8f46b9b0f93c5acc0b49936ce1b136750e1", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -375,7 +375,7 @@ fn test_codegen_options_tracking_hash() {\n     let mut opts = Options::default();\n \n     // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n-    opts.cg.ar = Some(String::from(\"abc\"));\n+    opts.cg.ar = String::from(\"abc\");\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.cg.linker = Some(PathBuf::from(\"linker\"));\n@@ -479,11 +479,11 @@ fn test_codegen_options_tracking_hash() {\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = Some(0xdeadbeef);\n+    opts.cg.debuginfo = 0xdeadbeef;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = Some(0xba5eba11);\n+    opts.cg.debuginfo = 0xba5eba11;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();"}, {"sha": "6b7672a57f0551704b38ad91fc3c38609e1ba1f4", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -2182,9 +2182,7 @@ where\n                         //\n                         // For now, do not enable mutable_noalias by default at all, while the\n                         // issue is being figured out.\n-                        let mutable_noalias =\n-                            tcx.sess.opts.debugging_opts.mutable_noalias.unwrap_or(false);\n-                        if mutable_noalias {\n+                        if tcx.sess.opts.debugging_opts.mutable_noalias {\n                             PointerKind::UniqueBorrowed\n                         } else {\n                             PointerKind::Shared"}, {"sha": "63b8075b4f6a9340e8d27c45c0ab2e7ca5932132", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -617,18 +617,14 @@ impl Options {\n }\n \n impl DebuggingOptions {\n-    pub fn ui_testing(&self) -> bool {\n-        self.ui_testing.unwrap_or(false)\n-    }\n-\n     pub fn diagnostic_handler_flags(&self, can_emit_warnings: bool) -> HandlerFlags {\n         HandlerFlags {\n             can_emit_warnings,\n             treat_err_as_bug: self.treat_err_as_bug,\n             dont_buffer_diagnostics: self.dont_buffer_diagnostics,\n             report_delayed_bugs: self.report_delayed_bugs,\n             macro_backtrace: self.macro_backtrace,\n-            deduplicate_diagnostics: self.deduplicate_diagnostics.unwrap_or(true),\n+            deduplicate_diagnostics: self.deduplicate_diagnostics,\n         }\n     }\n }\n@@ -1395,15 +1391,14 @@ fn parse_opt_level(\n     if max_o > max_c {\n         OptLevel::Default\n     } else {\n-        match cg.opt_level.as_ref().map(String::as_ref) {\n-            None => OptLevel::No,\n-            Some(\"0\") => OptLevel::No,\n-            Some(\"1\") => OptLevel::Less,\n-            Some(\"2\") => OptLevel::Default,\n-            Some(\"3\") => OptLevel::Aggressive,\n-            Some(\"s\") => OptLevel::Size,\n-            Some(\"z\") => OptLevel::SizeMin,\n-            Some(arg) => {\n+        match cg.opt_level.as_ref() {\n+            \"0\" => OptLevel::No,\n+            \"1\" => OptLevel::Less,\n+            \"2\" => OptLevel::Default,\n+            \"3\" => OptLevel::Aggressive,\n+            \"s\" => OptLevel::Size,\n+            \"z\" => OptLevel::SizeMin,\n+            arg => {\n                 early_error(\n                     error_format,\n                     &format!(\n@@ -1436,10 +1431,10 @@ fn select_debuginfo(\n         DebugInfo::Full\n     } else {\n         match cg.debuginfo {\n-            None | Some(0) => DebugInfo::None,\n-            Some(1) => DebugInfo::Limited,\n-            Some(2) => DebugInfo::Full,\n-            Some(arg) => {\n+            0 => DebugInfo::None,\n+            1 => DebugInfo::Limited,\n+            2 => DebugInfo::Full,\n+            arg => {\n                 early_error(\n                     error_format,\n                     &format!(\n@@ -1502,10 +1497,10 @@ fn parse_libs(\n }\n \n fn parse_borrowck_mode(dopts: &DebuggingOptions, error_format: ErrorOutputType) -> BorrowckMode {\n-    match dopts.borrowck.as_ref().map(|s| &s[..]) {\n-        None | Some(\"migrate\") => BorrowckMode::Migrate,\n-        Some(\"mir\") => BorrowckMode::Mir,\n-        Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n+    match dopts.borrowck.as_ref() {\n+        \"migrate\" => BorrowckMode::Migrate,\n+        \"mir\" => BorrowckMode::Mir,\n+        m => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n     }\n }\n "}, {"sha": "a40c88a3b3fe74e2fc40415f7c72e849009911d9", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -613,7 +613,7 @@ macro_rules! options {\n options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n           build_codegen_options, \"C\", \"codegen\",\n           CG_OPTIONS, cg_type_desc, cgsetters,\n-    ar: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+    ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n@@ -666,10 +666,10 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     no_stack_check: bool = (false, parse_bool, [UNTRACKED],\n         \"the `--no-stack-check` flag is deprecated and does nothing\"),\n-    debuginfo: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    debuginfo: usize = (0, parse_uint, [TRACKED],\n         \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n          2 = full debug info with variable and type information\"),\n-    opt_level: Option<String> = (None, parse_opt_string, [TRACKED],\n+    opt_level: String = (\"0\".to_string(), parse_string, [TRACKED],\n         \"optimize with possible levels 0-3, s, or z\"),\n     force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force use of the frame pointers\"),\n@@ -681,7 +681,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         [TRACKED], \"panic strategy to compile crate with\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n-    default_linker_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+    default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n         \"allow the linker to link its default libraries\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"linker flavor\"),\n@@ -706,7 +706,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"when debug-printing compiler state, do not include spans\"), // o/w tests have closure@path\n     identify_regions: bool = (false, parse_bool, [UNTRACKED],\n         \"make unnamed regions display as '# (where # is some non-ident unique id)\"),\n-    borrowck: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+    borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n         \"select which borrowck is used (`mir` or `migrate`)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass\"),\n@@ -806,7 +806,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"print the result of the monomorphization collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n         \"set the MIR optimization level (0-3, default: 1)\"),\n-    mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+    mutable_noalias: bool = (false, parse_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n@@ -816,7 +816,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n         `foo | bar` all passes for function names containing 'foo' or 'bar'.\"),\n \n-    dump_mir_dir: String = (String::from(\"mir_dump\"), parse_string, [UNTRACKED],\n+    dump_mir_dir: String = (\"mir_dump\".to_string(), parse_string, [UNTRACKED],\n         \"the directory the MIR is dumped into\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n         \"in addition to `.mir` files, create graphviz `.dot` files\"),\n@@ -890,13 +890,16 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `hir,typed` (HIR with types for each node),\n         `hir-tree` (dump the raw HIR),\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n-    run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+    // The default historical behavior was to always run dsymutil, so we're\n+    // preserving that temporarily, but we're likely to switch the default\n+    // soon.\n+    run_dsymutil: bool = (true, parse_bool, [TRACKED],\n         \"run `dsymutil` and delete intermediate object files\"),\n-    ui_testing: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n         \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n         \"embed LLVM bitcode in object files\"),\n-    strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+    strip_debuginfo_if_disabled: bool = (false, parse_bool, [TRACKED],\n         \"tell the linker to strip debuginfo when building without debuginfo enabled\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n@@ -936,17 +939,17 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n         \"fix undefined behavior when a thread doesn't eventually make progress \\\n          (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n-    deduplicate_diagnostics: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+    deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\n         \"deduplicate identical diagnostics\"),\n     control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n         \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n     no_link: bool = (false, parse_bool, [TRACKED],\n         \"compile without linking\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n         \"link the `.rlink` file generated by `-Z no-link`\"),\n-    new_llvm_pass_manager: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+    new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],\n         \"use new LLVM pass manager\"),\n-    link_native_libraries: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+    link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, or `sha1`)\"),"}, {"sha": "f0bbe1d0a18bce11a1cc86eab7bd36a61449a9bf", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -899,7 +899,7 @@ fn default_emitter(\n                     short,\n                     macro_backtrace,\n                 );\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n             } else {\n                 let emitter = match dst {\n                     None => EmitterWriter::stderr(\n@@ -920,7 +920,7 @@ fn default_emitter(\n                         macro_backtrace,\n                     ),\n                 };\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n             }\n         }\n         (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n@@ -931,7 +931,7 @@ fn default_emitter(\n                 json_rendered,\n                 macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing()),\n+            .ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n@@ -942,7 +942,7 @@ fn default_emitter(\n                 json_rendered,\n                 macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing()),\n+            .ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n     }\n }"}, {"sha": "fe2727c962c7668b4ae02c5a3828dec5c0f30c40", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58217bc996564965d3362ca3010a272b39e229f6/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=58217bc996564965d3362ca3010a272b39e229f6", "patch": "@@ -185,7 +185,7 @@ pub fn new_handler(\n                     debugging_opts.terminal_width,\n                     false,\n                 )\n-                .ui_testing(debugging_opts.ui_testing()),\n+                .ui_testing(debugging_opts.ui_testing),\n             )\n         }\n         ErrorOutputType::Json { pretty, json_rendered } => {\n@@ -194,7 +194,7 @@ pub fn new_handler(\n             });\n             Box::new(\n                 JsonEmitter::stderr(None, source_map, pretty, json_rendered, false)\n-                    .ui_testing(debugging_opts.ui_testing()),\n+                    .ui_testing(debugging_opts.ui_testing),\n             )\n         }\n     };"}]}