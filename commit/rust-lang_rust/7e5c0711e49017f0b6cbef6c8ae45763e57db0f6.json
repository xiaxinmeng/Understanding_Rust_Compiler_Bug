{"sha": "7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "node_id": "C_kwDOAAsO6NoAKDdlNWMwNzExZTQ5MDE3ZjBiNmNiZWY2YzhhZTQ1NzYzZTU3ZGIwZjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-16T16:23:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-16T16:23:09Z"}, "message": "Rollup merge of #91879 - bugadani:in_band_borrowck, r=wesleywiser\n\nRemove `in_band_lifetimes` from `rustc_borrowck`\n\nSee #91867 for more information.", "tree": {"sha": "41c160689f4362c1cd53a83cb62febdbd10bd555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41c160689f4362c1cd53a83cb62febdbd10bd555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhu2ftCRBK7hj4Ov3rIwAAOjMIAKVpFGka7pEOsHWaczUmJICt\nfHLJV5SYkr4a4Y9svW7jC38aBZu1RQbHET6/Vn1y0v6AvcunMaBKTQzHS2q9Siub\nDg1TjjIn20UL1/4Nb+jjp7JkN/6FkkUqQfuXmv4yZ+WPC6wkNkRcSyqEtpTeqth9\nVw4ozm5ddMQAjMp4FtVRLDSiYkao525xNKookPspG2yzjKJmadVbtsZgKy2Krr34\nL/6SzijntpDTwuWUkUCZe6qJxmBl1/8JRq5KbPoA7KXvdCYpnn0QI4tyqMl6YBHS\n4F+JpY/j3vBNjPjYa5rD8hCOyI3IHST7kI2FT1isGpf/ydVMsvopm2VZL6p4BNk=\n=MGw1\n-----END PGP SIGNATURE-----\n", "payload": "tree 41c160689f4362c1cd53a83cb62febdbd10bd555\nparent 95d8aadcfccaff73faad1cf4d1384d0eb424d90d\nparent e837101890ef118324ebbfd8e1395bca653c8b84\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639671789 +0100\ncommitter GitHub <noreply@github.com> 1639671789 +0100\n\nRollup merge of #91879 - bugadani:in_band_borrowck, r=wesleywiser\n\nRemove `in_band_lifetimes` from `rustc_borrowck`\n\nSee #91867 for more information.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "html_url": "https://github.com/rust-lang/rust/commit/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d8aadcfccaff73faad1cf4d1384d0eb424d90d", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d8aadcfccaff73faad1cf4d1384d0eb424d90d", "html_url": "https://github.com/rust-lang/rust/commit/95d8aadcfccaff73faad1cf4d1384d0eb424d90d"}, {"sha": "e837101890ef118324ebbfd8e1395bca653c8b84", "url": "https://api.github.com/repos/rust-lang/rust/commits/e837101890ef118324ebbfd8e1395bca653c8b84", "html_url": "https://github.com/rust-lang/rust/commit/e837101890ef118324ebbfd8e1395bca653c8b84"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "4a9904891ecad14ac4cac39b2beaea351e538f7a", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -84,7 +84,7 @@ pub enum LocalsStateAtExit {\n }\n \n impl LocalsStateAtExit {\n-    fn build(\n+    fn build<'tcx>(\n         locals_are_invalidated_at_exit: bool,\n         body: &Body<'tcx>,\n         move_data: &MoveData<'tcx>,"}, {"sha": "96326ef2d5a07aa7ad0e07bb4a5d4a594a778c34", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -31,7 +31,7 @@ enum UniverseInfoInner<'tcx> {\n     Other,\n }\n \n-impl UniverseInfo<'tcx> {\n+impl<'tcx> UniverseInfo<'tcx> {\n     crate fn other() -> UniverseInfo<'tcx> {\n         UniverseInfo(UniverseInfoInner::Other)\n     }\n@@ -191,7 +191,7 @@ struct PredicateQuery<'tcx> {\n     base_universe: ty::UniverseIndex,\n }\n \n-impl TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n+impl<'tcx> TypeOpInfo<'tcx> for PredicateQuery<'tcx> {\n     fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = tcx.sess.struct_span_err(span, \"higher-ranked lifetime error\");\n         err.note(&format!(\"could not prove {}\", self.canonical_query.value.value.predicate));\n@@ -231,7 +231,7 @@ struct NormalizeQuery<'tcx, T> {\n     base_universe: ty::UniverseIndex,\n }\n \n-impl<T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T>\n+impl<'tcx, T> TypeOpInfo<'tcx> for NormalizeQuery<'tcx, T>\n where\n     T: Copy + fmt::Display + TypeFoldable<'tcx> + 'tcx,\n {\n@@ -291,7 +291,7 @@ struct AscribeUserTypeQuery<'tcx> {\n     base_universe: ty::UniverseIndex,\n }\n \n-impl TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n+impl<'tcx> TypeOpInfo<'tcx> for AscribeUserTypeQuery<'tcx> {\n     fn fallback_error(&self, tcx: TyCtxt<'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         // FIXME: This error message isn't great, but it doesn't show up in the existing UI tests,\n         // and is only the fallback when the nice error fails. Consider improving this some more."}, {"sha": "ab9ecec9715d9e4cbe6a4427813f263ee6176343", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -1598,8 +1598,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         mpi: MovePathIndex,\n     ) -> (Vec<MoveSite>, Vec<Location>) {\n-        fn predecessor_locations(\n-            body: &'a mir::Body<'tcx>,\n+        fn predecessor_locations<'a>(\n+            body: &'a mir::Body<'_>,\n             location: Location,\n         ) -> impl Iterator<Item = Location> + 'a {\n             if location.statement_index == 0 {"}, {"sha": "46c85dd6d35e1d6f58a6f8fbb4e6efa0c980a031", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -409,7 +409,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Add a note that a type does not implement `Copy`\n     pub(super) fn note_type_does_not_implement_copy(\n         &self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut DiagnosticBuilder<'_>,\n         place_desc: &str,\n         ty: Ty<'tcx>,\n         span: Option<Span>,\n@@ -733,7 +733,7 @@ pub(super) enum BorrowedContentSource<'tcx> {\n     OverloadedIndex(Ty<'tcx>),\n }\n \n-impl BorrowedContentSource<'tcx> {\n+impl<'tcx> BorrowedContentSource<'tcx> {\n     pub(super) fn describe_for_unnamed_place(&self, tcx: TyCtxt<'_>) -> String {\n         match *self {\n             BorrowedContentSource::DerefRawPointer => \"a raw pointer\".to_string(),"}, {"sha": "0434c1ba59a10d654e4d7c18669f7567e60a2669", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -747,7 +747,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             HirId, ImplItem, ImplItemKind, Item, ItemKind,\n         };\n \n-        fn maybe_body_id_of_fn(hir_map: &Map<'tcx>, id: HirId) -> Option<BodyId> {\n+        fn maybe_body_id_of_fn(hir_map: &Map<'_>, id: HirId) -> Option<BodyId> {\n             match hir_map.find(id) {\n                 Some(Node::Item(Item { kind: ItemKind::Fn(_, _, body_id), .. }))\n                 | Some(Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(_, body_id), .. })) => {\n@@ -1066,7 +1066,7 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n /// LL |     s: &'a String\n ///    |        ---------- use `&'a mut String` here to make mutable\n /// ```\n-fn annotate_struct_field(\n+fn annotate_struct_field<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     field: &mir::Field,"}, {"sha": "63ffcb3ec45879c649ef887584b6e98bcefc1e41", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -3,7 +3,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "0fe44328fd9f189d666eb794b09ad00c452a9784", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -53,7 +53,7 @@ rustc_index::newtype_index! {\n     }\n }\n \n-impl Default for MemberConstraintSet<'tcx, ty::RegionVid> {\n+impl Default for MemberConstraintSet<'_, ty::RegionVid> {\n     fn default() -> Self {\n         Self {\n             first_constraints: Default::default(),\n@@ -97,7 +97,7 @@ impl<'tcx> MemberConstraintSet<'tcx, ty::RegionVid> {\n     }\n }\n \n-impl<R1> MemberConstraintSet<'tcx, R1>\n+impl<'tcx, R1> MemberConstraintSet<'tcx, R1>\n where\n     R1: Copy + Hash + Eq,\n {\n@@ -140,7 +140,7 @@ where\n     }\n }\n \n-impl<R> MemberConstraintSet<'tcx, R>\n+impl<R> MemberConstraintSet<'_, R>\n where\n     R: Copy + Hash + Eq,\n {"}, {"sha": "b2c8dfc82c206a05a098114c65f05c93756b345c", "filename": "compiler/rustc_borrowck/src/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -141,7 +141,7 @@ pub(super) fn borrow_of_local_data(place: Place<'_>) -> bool {\n /// then returns the index of the field being projected. Note that this closure will always\n /// be `self` in the current MIR, because that is the only time we directly access the fields\n /// of a closure type.\n-pub(crate) fn is_upvar_field_projection(\n+pub(crate) fn is_upvar_field_projection<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     upvars: &[Upvar<'tcx>],\n     place_ref: PlaceRef<'tcx>,"}, {"sha": "fec6bdf314b1d6c848748af6c511bba32fb9d842", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -58,7 +58,7 @@ crate struct CreateResult<'tcx> {\n     crate normalized_inputs_and_output: NormalizedInputsAndOutput<'tcx>,\n }\n \n-crate fn create(\n+crate fn create<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n@@ -81,7 +81,7 @@ crate fn create(\n     .create()\n }\n \n-impl UniversalRegionRelations<'tcx> {\n+impl UniversalRegionRelations<'_> {\n     /// Records in the `outlives_relation` (and\n     /// `inverse_outlives_relation`) that `fr_a: fr_b`. Invoked by the\n     /// builder below.\n@@ -110,7 +110,7 @@ impl UniversalRegionRelations<'tcx> {\n     /// outlives `fr` and (b) is not local.\n     ///\n     /// (*) If there are multiple competing choices, we return all of them.\n-    crate fn non_local_upper_bounds(&'a self, fr: &'a RegionVid) -> Vec<&'a RegionVid> {\n+    crate fn non_local_upper_bounds<'a>(&'a self, fr: &'a RegionVid) -> Vec<&'a RegionVid> {\n         debug!(\"non_local_upper_bound(fr={:?})\", fr);\n         let res = self.non_local_bounds(&self.inverse_outlives, fr);\n         assert!(!res.is_empty(), \"can't find an upper bound!?\");\n@@ -232,7 +232,7 @@ struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n     region_bound_pairs: RegionBoundPairs<'tcx>,\n }\n \n-impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n+impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n     crate fn create(mut self) -> CreateResult<'tcx> {\n         let unnormalized_input_output_tys = self\n             .universal_regions"}, {"sha": "dd23683fae8de4677fa09a664b03ac08044df4e3", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -152,7 +152,7 @@ impl LocalUseMapBuild<'_> {\n     }\n }\n \n-impl Visitor<'tcx> for LocalUseMapBuild<'_> {\n+impl Visitor<'_> for LocalUseMapBuild<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         if self.locals_with_use_data[local] {\n             match def_use::categorize(context) {"}, {"sha": "f18fe1f43d4da2c8b72ab4785c0411c850bbf14f", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -74,7 +74,7 @@ pub(super) fn generate<'mir, 'tcx>(\n // to compute whether a variable `X` is live if that variable contains\n // some region `R` in its type where `R` is not known to outlive a free\n // region (i.e., where `R` may be valid for just a subset of the fn body).\n-fn compute_live_locals(\n+fn compute_live_locals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     free_regions: &FxHashSet<RegionVid>,\n     body: &Body<'tcx>,\n@@ -104,7 +104,7 @@ fn compute_live_locals(\n /// regions. For these regions, we do not need to compute\n /// liveness, since the outlives constraints will ensure that they\n /// are live over the whole fn body anyhow.\n-fn regions_that_outlive_free_regions(\n+fn regions_that_outlive_free_regions<'tcx>(\n     num_region_vars: usize,\n     universal_regions: &UniversalRegions<'tcx>,\n     constraint_set: &OutlivesConstraintSet<'tcx>,"}, {"sha": "ee067c4872f67423aa60af1c97adb5a44868f897", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -53,7 +53,7 @@ impl UseFactsExtractor<'_> {\n     }\n }\n \n-impl Visitor<'tcx> for UseFactsExtractor<'_> {\n+impl Visitor<'_> for UseFactsExtractor<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         match def_use::categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n@@ -63,7 +63,7 @@ impl Visitor<'tcx> for UseFactsExtractor<'_> {\n         }\n     }\n \n-    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n+    fn visit_place(&mut self, place: &Place<'_>, context: PlaceContext, location: Location) {\n         self.super_place(place, context, location);\n         match context {\n             PlaceContext::NonMutatingUse(_) => {\n@@ -82,7 +82,7 @@ impl Visitor<'tcx> for UseFactsExtractor<'_> {\n     }\n }\n \n-pub(super) fn populate_access_facts(\n+pub(super) fn populate_access_facts<'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     body: &Body<'tcx>,\n     location_table: &LocationTable,\n@@ -123,7 +123,7 @@ pub(super) fn populate_access_facts(\n \n // For every potentially drop()-touched region `region` in `local`'s type\n // (`kind`), emit a Polonius `use_of_var_derefs_origin(local, origin)` fact.\n-pub(super) fn add_drop_of_var_derefs_origin(\n+pub(super) fn add_drop_of_var_derefs_origin<'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     local: Local,\n     kind: &GenericArg<'tcx>,"}, {"sha": "0969b9a508f1d6112745206d57104903e793ea18", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -34,7 +34,7 @@ use crate::{\n /// DROP-LIVE set are to the liveness sets for regions found in the\n /// `dropck_outlives` result of the variable's type (in particular,\n /// this respects `#[may_dangle]` annotations).\n-pub(super) fn trace(\n+pub(super) fn trace<'mir, 'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     body: &Body<'tcx>,\n     elements: &Rc<RegionValueElements>,\n@@ -119,7 +119,7 @@ struct LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     stack: Vec<PointIndex>,\n }\n \n-impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n+impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     fn new(cx: LivenessContext<'me, 'typeck, 'flow, 'tcx>) -> Self {\n         let num_points = cx.elements.num_points();\n         LivenessResults {\n@@ -418,7 +418,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     }\n }\n \n-impl LivenessContext<'_, '_, '_, 'tcx> {\n+impl<'tcx> LivenessContext<'_, '_, '_, 'tcx> {\n     /// Returns `true` if the local variable (or some part of it) is initialized at the current\n     /// cursor position. Callers should call one of the `seek` methods immediately before to point\n     /// the cursor to the desired location."}, {"sha": "872a4321447041251d988155da1e03daac626be4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -945,7 +945,7 @@ crate struct MirTypeckRegionConstraints<'tcx> {\n     crate type_tests: Vec<TypeTest<'tcx>>,\n }\n \n-impl MirTypeckRegionConstraints<'tcx> {\n+impl<'tcx> MirTypeckRegionConstraints<'tcx> {\n     fn placeholder_region(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,"}, {"sha": "cc3fe0a123c55bc79803e994cddc189e71f13c85", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5c0711e49017f0b6cbef6c8ae45763e57db0f6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=7e5c0711e49017f0b6cbef6c8ae45763e57db0f6", "patch": "@@ -51,7 +51,7 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     universe_info: UniverseInfo<'tcx>,\n }\n \n-impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n+impl<'me, 'bccx, 'tcx> NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n@@ -62,7 +62,7 @@ impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     }\n }\n \n-impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n+impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n         self.type_checker.param_env\n     }"}]}