{"sha": "c06f08896835d0162a1b328726578dbf886d888f", "node_id": "C_kwDOAAsO6NoAKGMwNmYwODg5NjgzNWQwMTYyYTFiMzI4NzI2NTc4ZGJmODg2ZDg4OGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T05:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T05:50:41Z"}, "message": "Auto merge of #14823 - Veykril:discriminant-inlays, r=Veykril\n\nfix: Discriminant hints only render for datacarrying enums with primitive repr", "tree": {"sha": "8d4f337fe3148da049a7bbf9d7bb4d2d7de4ac5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4f337fe3148da049a7bbf9d7bb4d2d7de4ac5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06f08896835d0162a1b328726578dbf886d888f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06f08896835d0162a1b328726578dbf886d888f", "html_url": "https://github.com/rust-lang/rust/commit/c06f08896835d0162a1b328726578dbf886d888f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06f08896835d0162a1b328726578dbf886d888f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07baa176c28530ad2b9bd6c73dd3c8f0f40e3266", "url": "https://api.github.com/repos/rust-lang/rust/commits/07baa176c28530ad2b9bd6c73dd3c8f0f40e3266", "html_url": "https://github.com/rust-lang/rust/commit/07baa176c28530ad2b9bd6c73dd3c8f0f40e3266"}, {"sha": "c12ede8c348542f1a67dc9c65c50925a2c5c22e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12ede8c348542f1a67dc9c65c50925a2c5c22e1", "html_url": "https://github.com/rust-lang/rust/commit/c12ede8c348542f1a67dc9c65c50925a2c5c22e1"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "d78d8f1e489a167288bf51dd8e98c2fdb04ce8c5", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c06f08896835d0162a1b328726578dbf886d888f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06f08896835d0162a1b328726578dbf886d888f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c06f08896835d0162a1b328726578dbf886d888f", "patch": "@@ -1075,6 +1075,10 @@ impl Enum {\n         db.enum_data(self.id).variants.iter().map(|(id, _)| Variant { parent: self, id }).collect()\n     }\n \n+    pub fn repr(self, db: &dyn HirDatabase) -> Option<ReprOptions> {\n+        db.enum_data(self.id).repr\n+    }\n+\n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         Type::from_def(db, self.id)\n     }\n@@ -1112,6 +1116,7 @@ impl Enum {\n         )\n     }\n \n+    /// Returns true if at least one variant of this enum is a non-unit variant.\n     pub fn is_data_carrying(self, db: &dyn HirDatabase) -> bool {\n         self.variants(db).iter().any(|v| !matches!(v.kind(db), StructKind::Unit))\n     }"}, {"sha": "c4d2ac75cfa97bc246dc415138145ff5fe5b1b6a", "filename": "crates/ide/src/inlay_hints/discriminant.rs", "status": "modified", "additions": 43, "deletions": 45, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c06f08896835d0162a1b328726578dbf886d888f/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06f08896835d0162a1b328726578dbf886d888f/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs?ref=c06f08896835d0162a1b328726578dbf886d888f", "patch": "@@ -20,21 +20,23 @@ pub(super) fn enum_hints(\n     _: FileId,\n     enum_: ast::Enum,\n ) -> Option<()> {\n-    let enabled = match config.discriminant_hints {\n-        DiscriminantHints::Always => true,\n-        DiscriminantHints::Fieldless => {\n-            !sema.to_def(&enum_)?.is_data_carrying(sema.db)\n-                || enum_.variant_list()?.variants().any(|v| v.expr().is_some())\n-        }\n-        DiscriminantHints::Never => false,\n-    };\n-    if !enabled {\n+    if let DiscriminantHints::Never = config.discriminant_hints {\n+        return None;\n+    }\n+\n+    let def = sema.to_def(&enum_)?;\n+    let data_carrying = def.is_data_carrying(sema.db);\n+    if matches!(config.discriminant_hints, DiscriminantHints::Fieldless) && data_carrying {\n+        return None;\n+    }\n+    // data carrying enums without a primitive repr have no stable discriminants\n+    if data_carrying && def.repr(sema.db).map_or(true, |r| r.int.is_none()) {\n         return None;\n     }\n     for variant in enum_.variant_list()?.variants() {\n         variant_hints(acc, sema, &variant);\n     }\n-    None\n+    Some(())\n }\n \n fn variant_hints(\n@@ -91,7 +93,6 @@ fn variant_hints(\n \n     Some(())\n }\n-\n #[cfg(test)]\n mod tests {\n     use crate::inlay_hints::{\n@@ -123,30 +124,30 @@ mod tests {\n         check_discriminants(\n             r#\"\n enum Enum {\n-  Variant,\n-//^^^^^^^ = 0$\n-  Variant1,\n-//^^^^^^^^ = 1$\n-  Variant2,\n-//^^^^^^^^ = 2$\n-  Variant5 = 5,\n-  Variant6,\n-//^^^^^^^^ = 6$\n+    Variant,\n+//  ^^^^^^^ = 0$\n+    Variant1,\n+//  ^^^^^^^^ = 1$\n+    Variant2,\n+//  ^^^^^^^^ = 2$\n+    Variant5 = 5,\n+    Variant6,\n+//  ^^^^^^^^ = 6$\n }\n \"#,\n         );\n         check_discriminants_fieldless(\n             r#\"\n enum Enum {\n-  Variant,\n-//^^^^^^^ = 0\n-  Variant1,\n-//^^^^^^^^ = 1\n-  Variant2,\n-//^^^^^^^^ = 2\n-  Variant5 = 5,\n-  Variant6,\n-//^^^^^^^^ = 6\n+    Variant,\n+//  ^^^^^^^ = 0\n+    Variant1,\n+//  ^^^^^^^^ = 1\n+    Variant2,\n+//  ^^^^^^^^ = 2\n+    Variant5 = 5,\n+    Variant6,\n+//  ^^^^^^^^ = 6\n }\n \"#,\n         );\n@@ -156,26 +157,23 @@ enum Enum {\n     fn datacarrying_mixed() {\n         check_discriminants(\n             r#\"\n+#[repr(u8)]\n enum Enum {\n     Variant(),\n-  //^^^^^^^^^ = 0\n+//  ^^^^^^^^^ = 0\n     Variant1,\n-  //^^^^^^^^ = 1\n+//  ^^^^^^^^ = 1\n     Variant2 {},\n-  //^^^^^^^^^^^ = 2\n+//  ^^^^^^^^^^^ = 2\n     Variant3,\n-  //^^^^^^^^ = 3\n+//  ^^^^^^^^ = 3\n     Variant5 = 5,\n     Variant6,\n-  //^^^^^^^^ = 6\n+//  ^^^^^^^^ = 6\n }\n \"#,\n         );\n-    }\n-\n-    #[test]\n-    fn datacarrying_mixed_fieldless_set() {\n-        check_discriminants_fieldless(\n+        check_discriminants(\n             r#\"\n enum Enum {\n     Variant(),\n@@ -187,20 +185,20 @@ enum Enum {\n }\n \"#,\n         );\n+    }\n+\n+    #[test]\n+    fn datacarrying_mixed_fieldless_set() {\n         check_discriminants_fieldless(\n             r#\"\n+#[repr(u8)]\n enum Enum {\n     Variant(),\n-  //^^^^^^^^^ = 0\n     Variant1,\n-  //^^^^^^^^ = 1\n     Variant2 {},\n-  //^^^^^^^^^^^ = 2\n     Variant3,\n-  //^^^^^^^^ = 3\n-    Variant5 = 5,\n+    Variant5,\n     Variant6,\n-  //^^^^^^^^ = 6\n }\n \"#,\n         );"}, {"sha": "9c198eefc757fffac66bd6a77dd13b9b1aa3ac6d", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06f08896835d0162a1b328726578dbf886d888f/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06f08896835d0162a1b328726578dbf886d888f/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=c06f08896835d0162a1b328726578dbf886d888f", "patch": "@@ -102,7 +102,7 @@ pub(crate) fn handle_analyzer_status(\n                 .collect::<Vec<&AbsPath>>()\n         );\n     }\n-    format_to!(buf, \"\\nVfs memory usage: {}\\n\", snap.vfs_memory_usage());\n+    format_to!(buf, \"\\nVfs memory usage: {}\\n\", profile::Bytes::new(snap.vfs_memory_usage() as _));\n     buf.push_str(\"\\nAnalysis:\\n\");\n     buf.push_str(\n         &snap"}]}