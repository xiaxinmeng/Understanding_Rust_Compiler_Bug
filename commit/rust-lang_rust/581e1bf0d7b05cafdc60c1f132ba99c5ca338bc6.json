{"sha": "581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "node_id": "C_kwDOAAsO6NoAKDU4MWUxYmYwZDdiMDVjYWZkYzYwYzFmMTMyYmE5OWM1Y2EzMzhiYzY", "commit": {"author": {"name": "yipinliu", "email": "ypliu18@gmail.com", "date": "2022-03-12T11:00:17Z"}, "committer": {"name": "yipinliu", "email": "ypliu18@gmail.com", "date": "2022-03-12T11:03:14Z"}, "message": "Highlight escape sequences in byte strings", "tree": {"sha": "957ba29947bca5ada74d7d83083bbf3ac8c5da29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/957ba29947bca5ada74d7d83083bbf3ac8c5da29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "html_url": "https://github.com/rust-lang/rust/commit/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/comments", "author": {"login": "yipinliu", "id": 28223418, "node_id": "MDQ6VXNlcjI4MjIzNDE4", "avatar_url": "https://avatars.githubusercontent.com/u/28223418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yipinliu", "html_url": "https://github.com/yipinliu", "followers_url": "https://api.github.com/users/yipinliu/followers", "following_url": "https://api.github.com/users/yipinliu/following{/other_user}", "gists_url": "https://api.github.com/users/yipinliu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yipinliu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yipinliu/subscriptions", "organizations_url": "https://api.github.com/users/yipinliu/orgs", "repos_url": "https://api.github.com/users/yipinliu/repos", "events_url": "https://api.github.com/users/yipinliu/events{/privacy}", "received_events_url": "https://api.github.com/users/yipinliu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yipinliu", "id": 28223418, "node_id": "MDQ6VXNlcjI4MjIzNDE4", "avatar_url": "https://avatars.githubusercontent.com/u/28223418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yipinliu", "html_url": "https://github.com/yipinliu", "followers_url": "https://api.github.com/users/yipinliu/followers", "following_url": "https://api.github.com/users/yipinliu/following{/other_user}", "gists_url": "https://api.github.com/users/yipinliu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yipinliu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yipinliu/subscriptions", "organizations_url": "https://api.github.com/users/yipinliu/orgs", "repos_url": "https://api.github.com/users/yipinliu/repos", "events_url": "https://api.github.com/users/yipinliu/events{/privacy}", "received_events_url": "https://api.github.com/users/yipinliu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e87fdb985c65dcc36a794e7004f1f79e8977d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e87fdb985c65dcc36a794e7004f1f79e8977d8", "html_url": "https://github.com/rust-lang/rust/commit/36e87fdb985c65dcc36a794e7004f1f79e8977d8"}], "stats": {"total": 115, "additions": 97, "deletions": 18}, "files": [{"sha": "1bd95c4c437ae4b35e9e4f46a50630ca2d2dd10e", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "patch": "@@ -7,6 +7,7 @@ mod highlight;\n mod format;\n mod macro_;\n mod inject;\n+mod escape;\n \n mod html;\n #[cfg(test)]\n@@ -16,7 +17,7 @@ use hir::{InFile, Name, Semantics};\n use ide_db::RootDatabase;\n use rustc_hash::FxHashMap;\n use syntax::{\n-    ast::{self, IsString},\n+    ast::{self},\n     AstNode, AstToken, NodeOrToken,\n     SyntaxKind::*,\n     SyntaxNode, TextRange, WalkEvent, T,\n@@ -30,6 +31,7 @@ use crate::{\n     FileId, HlMod, HlTag,\n };\n \n+use crate::syntax_highlighting::escape::highlight_escape_string;\n pub(crate) use html::highlight_as_html;\n \n #[derive(Debug, Clone, Copy)]\n@@ -371,29 +373,20 @@ fn traverse(\n         // string highlight injections, note this does not use the descended element as proc-macros\n         // can rewrite string literals which invalidates our indices\n         if let (Some(token), Some(descended_token)) = (token, descended_element.as_token()) {\n-            let string = ast::String::cast(token);\n-            let string_to_highlight = ast::String::cast(descended_token.clone());\n-            if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n+            if ast::String::can_cast(token.kind()) && ast::String::can_cast(descended_token.kind())\n+            {\n+                let string = ast::String::cast(token).unwrap();\n+                let expanded_string = ast::String::cast(descended_token.clone()).unwrap();\n                 if string.is_raw() {\n                     if inject::ra_fixture(hl, sema, &string, &expanded_string).is_some() {\n                         continue;\n                     }\n                 }\n                 highlight_format_string(hl, &string, &expanded_string, range);\n-                // Highlight escape sequences\n-                string.escaped_char_ranges(&mut |piece_range, char| {\n-                    if char.is_err() {\n-                        return;\n-                    }\n-\n-                    if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n-                        hl.add(HlRange {\n-                            range: piece_range + range.start(),\n-                            highlight: HlTag::EscapeSequence.into(),\n-                            binding_hash: None,\n-                        });\n-                    }\n-                });\n+                highlight_escape_string(hl, &string, range.start());\n+            } else if ast::ByteString::can_cast(token.kind()) {\n+                let byte_string = ast::ByteString::cast(token).unwrap();\n+                highlight_escape_string(hl, &byte_string, range.start());\n             }\n         }\n "}, {"sha": "1b53edb7dc47e63646f902fe47c5f348613c2960", "filename": "crates/ide/src/syntax_highlighting/escape.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fescape.rs?ref=581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "patch": "@@ -0,0 +1,25 @@\n+use crate::syntax_highlighting::highlights::Highlights;\n+use crate::{HlRange, HlTag};\n+use syntax::ast::IsString;\n+use syntax::TextSize;\n+\n+/// Highlight escape sequences\n+pub(super) fn highlight_escape_string<T: IsString>(\n+    stack: &mut Highlights,\n+    string: &T,\n+    start: TextSize,\n+) {\n+    string.escaped_char_ranges(&mut |piece_range, char| {\n+        if char.is_err() {\n+            return;\n+        }\n+\n+        if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n+            stack.add(HlRange {\n+                range: piece_range + start,\n+                highlight: HlTag::EscapeSequence.into(),\n+                binding_hash: None,\n+            });\n+        }\n+    });\n+}"}, {"sha": "113b73af0c4f7d13d464f2be79ea42baa59df08d", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_byte_string.html", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_byte_string.html", "raw_url": "https://github.com/rust-lang/rust/raw/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_byte_string.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_byte_string.html?ref=581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "patch": "@@ -0,0 +1,47 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x00</span><span class=\"escape_sequence\">\\x63</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">\"</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">b\"</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x00</span><span class=\"escape_sequence\">\\x63</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">\"</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "f9c2404c358f9c945be6caf717c7fdbd3685aecb", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=581e1bf0d7b05cafdc60c1f132ba99c5ca338bc6", "patch": "@@ -476,6 +476,20 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn test_byte_string_highlight() {\n+    check_highlighting(\n+        r#\"\n+fn main() {\n+    let _ = \"\\x28\\x28\\x00\\x63\\n\";\n+    let _ = b\"\\x28\\x28\\x00\\x63\\n\";\n+}\n+\"#,\n+        expect_file![\"./test_data/highlight_byte_string.html\"],\n+        false,\n+    );\n+}\n+\n #[test]\n fn test_unsafe_highlighting() {\n     check_highlighting("}]}