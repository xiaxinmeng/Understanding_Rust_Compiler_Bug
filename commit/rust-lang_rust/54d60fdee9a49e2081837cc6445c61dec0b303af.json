{"sha": "54d60fdee9a49e2081837cc6445c61dec0b303af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZDYwZmRlZTlhNDllMjA4MTgzN2NjNjQ0NWM2MWRlYzBiMzAzYWY=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-05-29T16:16:20Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-05-29T16:17:45Z"}, "message": "hir_ty: use async ret type for inference inside async bodies", "tree": {"sha": "7ace97cb1ee22e99fdbb1ecaca531ffdbaffdada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ace97cb1ee22e99fdbb1ecaca531ffdbaffdada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d60fdee9a49e2081837cc6445c61dec0b303af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d60fdee9a49e2081837cc6445c61dec0b303af", "html_url": "https://github.com/rust-lang/rust/commit/54d60fdee9a49e2081837cc6445c61dec0b303af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d60fdee9a49e2081837cc6445c61dec0b303af/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa3343e4747c3f7b2ca3e7924ba5286d67af87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa3343e4747c3f7b2ca3e7924ba5286d67af87c", "html_url": "https://github.com/rust-lang/rust/commit/3fa3343e4747c3f7b2ca3e7924ba5286d67af87c"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "d2bb381be02b9d3578b8a859079da357a0603460", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=54d60fdee9a49e2081837cc6445c61dec0b303af", "patch": "@@ -22,6 +22,7 @@ pub struct FunctionData {\n     pub name: Name,\n     pub params: Vec<Interned<TypeRef>>,\n     pub ret_type: Interned<TypeRef>,\n+    pub async_ret_type: Option<Interned<TypeRef>>,\n     pub attrs: Attrs,\n     pub visibility: RawVisibility,\n     pub abi: Option<Interned<str>>,\n@@ -63,6 +64,7 @@ impl FunctionData {\n                 })\n                 .collect(),\n             ret_type: func.ret_type.clone(),\n+            async_ret_type: func.async_ret_type.clone(),\n             attrs: item_tree.attrs(db, krate, ModItem::from(loc.id.value).into()),\n             visibility: item_tree[func.visibility].clone(),\n             abi: func.abi.clone(),"}, {"sha": "227337a8df111171083a9622d80e2823c0598d67", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=54d60fdee9a49e2081837cc6445c61dec0b303af", "patch": "@@ -580,6 +580,7 @@ pub struct Function {\n     pub abi: Option<Interned<str>>,\n     pub params: IdRange<Param>,\n     pub ret_type: Interned<TypeRef>,\n+    pub async_ret_type: Option<Interned<TypeRef>>,\n     pub ast_id: FileAstId<ast::Fn>,\n     pub(crate) flags: FnFlags,\n }"}, {"sha": "6208facd54e296eb6ea840b688b8ce5afc056184", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=54d60fdee9a49e2081837cc6445c61dec0b303af", "patch": "@@ -356,12 +356,13 @@ impl<'a> Ctx<'a> {\n             _ => TypeRef::unit(),\n         };\n \n-        let ret_type = if func.async_token().is_some() {\n+        let (ret_type, async_ret_type) = if func.async_token().is_some() {\n+            let async_ret_type = ret_type.clone();\n             let future_impl = desugar_future_path(ret_type);\n             let ty_bound = Interned::new(TypeBound::Path(future_impl));\n-            TypeRef::ImplTrait(vec![ty_bound])\n+            (TypeRef::ImplTrait(vec![ty_bound]), Some(async_ret_type))\n         } else {\n-            ret_type\n+            (ret_type, None)\n         };\n \n         let abi = func.abi().map(lower_abi);\n@@ -395,6 +396,7 @@ impl<'a> Ctx<'a> {\n             abi,\n             params,\n             ret_type: Interned::new(ret_type),\n+            async_ret_type: async_ret_type.map(Interned::new),\n             ast_id,\n             flags,\n         };"}, {"sha": "cc9944a22f8eb0619009fa3f37a522833c499002", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=54d60fdee9a49e2081837cc6445c61dec0b303af", "patch": "@@ -235,6 +235,7 @@ impl<'a> Printer<'a> {\n                     abi,\n                     params,\n                     ret_type,\n+                    async_ret_type: _,\n                     ast_id: _,\n                     flags,\n                 } = &self.tree[it];"}, {"sha": "7a4268819b448ecbc45544bca8aede734e7ebb3a", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=54d60fdee9a49e2081837cc6445c61dec0b303af", "patch": "@@ -558,7 +558,13 @@ impl<'a> InferenceContext<'a> {\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        let return_ty = self.make_ty_with_mode(&data.ret_type, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n+        let error_ty = &TypeRef::Error;\n+        let return_ty = if data.is_async() {\n+            data.async_ret_type.as_deref().unwrap_or(error_ty)\n+        } else {\n+            &*data.ret_type\n+        };\n+        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n         self.return_ty = return_ty;\n     }\n "}, {"sha": "7c0ff2170fe658102d7955d005cbd82b568a2194", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d60fdee9a49e2081837cc6445c61dec0b303af/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=54d60fdee9a49e2081837cc6445c61dec0b303af", "patch": "@@ -3660,3 +3660,52 @@ impl foo::Foo for u32 {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn infer_async_ret_type() {\n+    check_types(\n+        r#\"\n+//- /main.rs crate:main deps:core\n+\n+enum Result<T, E> {\n+    Ok(T),\n+    Err(E),\n+}\n+\n+use Result::*;\n+\n+\n+struct Fooey;\n+\n+impl Fooey {\n+    fn collect<B: Convert>(self) -> B {\n+        B::new()\n+    }\n+}\n+\n+trait Convert {\n+    fn new() -> Self;\n+}\n+impl Convert for u32 {\n+    fn new() -> Self {\n+        0\n+    }\n+}\n+\n+async fn get_accounts() -> Result<u32, ()> {\n+    let ret = Fooey.collect();\n+    //                      ^ u32\n+    Ok(ret)\n+}\n+\n+//- /core.rs crate:core\n+#[prelude_import] use future::*;\n+mod future {\n+    #[lang = \"future_trait\"]\n+    trait Future {\n+        type Output;\n+    }\n+}\n+\"#,\n+    );\n+}"}]}