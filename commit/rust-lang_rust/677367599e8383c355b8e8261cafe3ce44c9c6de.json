{"sha": "677367599e8383c355b8e8261cafe3ce44c9c6de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NzM2NzU5OWU4MzgzYzM1NWI4ZTgyNjFjYWZlM2NlNDRjOWM2ZGU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-05-24T16:07:52Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-05-27T10:08:31Z"}, "message": "Revamp codegen tests to check IR quality instead of quantity\n\nThe current codegen tests only compare IR line counts between similar\nrust and C programs, the latter getting compiled with clang. That looked\nlike a good idea back then, but actually things like lifetime intrinsics\nmean that less IR isn't always better, so the metric isn't really\nhelpful.\n\nInstead, we can start doing tests that check specific aspects of the\ngenerated IR, like attributes or metadata. To do that, we can use LLVM's\nFileCheck tool which has a number of useful features for such tests.\n\nTo start off, I created some tests for a few things that were recently\nadded and/or broken.", "tree": {"sha": "c784e078189f4fcbcd85a0f4aca51968453db64e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c784e078189f4fcbcd85a0f4aca51968453db64e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/677367599e8383c355b8e8261cafe3ce44c9c6de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/677367599e8383c355b8e8261cafe3ce44c9c6de", "html_url": "https://github.com/rust-lang/rust/commit/677367599e8383c355b8e8261cafe3ce44c9c6de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/677367599e8383c355b8e8261cafe3ce44c9c6de/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba0e1cd8147d452c356aacb29fb87568ca26f111", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0e1cd8147d452c356aacb29fb87568ca26f111", "html_url": "https://github.com/rust-lang/rust/commit/ba0e1cd8147d452c356aacb29fb87568ca26f111"}], "stats": {"total": 733, "additions": 209, "deletions": 524}, "files": [{"sha": "2f1510ba87c286c600a96bb1c23676c63d9f9c30", "filename": "mk/tests.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/677367599e8383c355b8e8261cafe3ce44c9c6de/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/677367599e8383c355b8e8261cafe3ce44c9c6de/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=677367599e8383c355b8e8261cafe3ce44c9c6de", "patch": "@@ -581,10 +581,6 @@ ifeq ($(CFG_LLDB),)\n CTEST_DISABLE_debuginfo-lldb = \"no lldb found\"\n endif\n \n-ifeq ($(CFG_CLANG),)\n-CTEST_DISABLE_codegen = \"no clang found\"\n-endif\n-\n ifneq ($(CFG_OSTYPE),apple-darwin)\n CTEST_DISABLE_debuginfo-lldb = \"lldb tests are only run on darwin\"\n endif\n@@ -645,7 +641,6 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n         --rustdoc-path $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-        --clang-path $(if $(CFG_CLANG),$(CFG_CLANG),clang) \\\n         --llvm-bin-path $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin \\\n         --aux-base $$(S)src/test/auxiliary/ \\\n         --stage-id stage$(1)-$(2) \\"}, {"sha": "3f34c89d18fb29dad2ba6076ea629ee01b00ee50", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=677367599e8383c355b8e8261cafe3ce44c9c6de", "patch": "@@ -80,9 +80,6 @@ pub struct Config {\n     // The python executable\n     pub python: String,\n \n-    // The clang executable\n-    pub clang_path: Option<PathBuf>,\n-\n     // The llvm binaries path\n     pub llvm_bin_path: Option<PathBuf>,\n "}, {"sha": "9d575675cc8c9bd17c6e5eebbedf1da0afec1d9a", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=677367599e8383c355b8e8261cafe3ce44c9c6de", "patch": "@@ -33,7 +33,7 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n-use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Codegen};\n+use common::{Pretty, DebugInfoGdb, DebugInfoLldb};\n use util::logv;\n \n pub mod procsrv;\n@@ -63,7 +63,6 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n           reqopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\"),\n           reqopt(\"\", \"python\", \"path to python to use for doc tests\", \"PATH\"),\n-          optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n           optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\"),\n           optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\"),\n           optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n@@ -133,7 +132,6 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         rustdoc_path: opt_path(matches, \"rustdoc-path\"),\n         python: matches.opt_str(\"python\").unwrap(),\n-        clang_path: matches.opt_str(\"clang-path\").map(|s| PathBuf::from(&s)),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n         llvm_bin_path: matches.opt_str(\"llvm-bin-path\").map(|s| PathBuf::from(&s)),\n@@ -284,13 +282,7 @@ pub fn make_tests(config: &Config) -> Vec<test::TestDescAndFn> {\n         let file = file.unwrap().path();\n         debug!(\"inspecting file {:?}\", file.display());\n         if is_test(config, &file) {\n-            let t = make_test(config, &file, || {\n-                match config.mode {\n-                    Codegen => make_metrics_test_closure(config, &file),\n-                    _ => make_test_closure(config, &file)\n-                }\n-            });\n-            tests.push(t)\n+            tests.push(make_test(config, &file))\n         }\n     }\n     tests\n@@ -323,16 +315,15 @@ pub fn is_test(config: &Config, testfile: &Path) -> bool {\n     return valid;\n }\n \n-pub fn make_test<F>(config: &Config, testfile: &Path, f: F) -> test::TestDescAndFn where\n-    F: FnOnce() -> test::TestFn,\n+pub fn make_test(config: &Config, testfile: &Path) -> test::TestDescAndFn\n {\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testfile),\n             ignore: header::is_test_ignored(config, testfile),\n             should_panic: test::ShouldPanic::No,\n         },\n-        testfn: f(),\n+        testfn: make_test_closure(config, &testfile),\n     }\n }\n \n@@ -357,14 +348,6 @@ pub fn make_test_closure(config: &Config, testfile: &Path) -> test::TestFn {\n     }))\n }\n \n-pub fn make_metrics_test_closure(config: &Config, testfile: &Path) -> test::TestFn {\n-    let config = (*config).clone();\n-    let testfile = testfile.to_path_buf();\n-    test::DynMetricFn(box move |mm: &mut test::MetricMap| {\n-        runtest::run_metrics(config, &testfile, mm)\n-    })\n-}\n-\n fn extract_gdb_version(full_version_line: Option<String>) -> Option<String> {\n     match full_version_line {\n         Some(ref full_version_line)"}, {"sha": "fef36ec2c2f9942b58954987ee7690842090798d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 13, "deletions": 118, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=677367599e8383c355b8e8261cafe3ce44c9c6de", "patch": "@@ -28,8 +28,6 @@ use std::iter::repeat;\n use std::net::TcpStream;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n-use std::str;\n-use test::MetricMap;\n \n pub fn run(config: Config, testfile: &Path) {\n     match &*config.target {\n@@ -43,11 +41,6 @@ pub fn run(config: Config, testfile: &Path) {\n         _=> { }\n     }\n \n-    let mut _mm = MetricMap::new();\n-    run_metrics(config, testfile, &mut _mm);\n-}\n-\n-pub fn run_metrics(config: Config, testfile: &Path, mm: &mut MetricMap) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line.\n         print!(\"\\n\\n\");\n@@ -64,7 +57,7 @@ pub fn run_metrics(config: Config, testfile: &Path, mm: &mut MetricMap) {\n         Pretty => run_pretty_test(&config, &props, &testfile),\n         DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n         DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n-        Codegen => run_codegen_test(&config, &props, &testfile, mm),\n+        Codegen => run_codegen_test(&config, &props, &testfile),\n         Rustdoc => run_rustdoc_test(&config, &props, &testfile),\n     }\n }\n@@ -1685,26 +1678,15 @@ fn _arm_push_aux_shared_library(config: &Config, testfile: &Path) {\n     }\n }\n \n-// codegen tests (vs. clang)\n-\n-fn append_suffix_to_stem(p: &Path, suffix: &str) -> PathBuf {\n-    if suffix.is_empty() {\n-        p.to_path_buf()\n-    } else {\n-        let mut stem = p.file_stem().unwrap().to_os_string();\n-        stem.push(\"-\");\n-        stem.push(suffix);\n-        p.with_file_name(&stem)\n-    }\n-}\n+// codegen tests (using FileCheck)\n \n-fn compile_test_and_save_bitcode(config: &Config, props: &TestProps,\n+fn compile_test_and_save_ir(config: &Config, props: &TestProps,\n                                  testfile: &Path) -> ProcRes {\n     let aux_dir = aux_output_dir_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let mut link_args = vec!(\"-L\".to_string(),\n                              aux_dir.to_str().unwrap().to_string());\n-    let llvm_args = vec!(\"--emit=llvm-bc,obj\".to_string(),\n+    let llvm_args = vec!(\"--emit=llvm-ir\".to_string(),\n                          \"--crate-type=lib\".to_string());\n     link_args.extend(llvm_args.into_iter());\n     let args = make_compile_args(config,\n@@ -1717,121 +1699,34 @@ fn compile_test_and_save_bitcode(config: &Config, props: &TestProps,\n     compose_and_run_compiler(config, props, testfile, args, None)\n }\n \n-fn compile_cc_with_clang_and_save_bitcode(config: &Config, _props: &TestProps,\n-                                          testfile: &Path) -> ProcRes {\n-    let bitcodefile = output_base_name(config, testfile).with_extension(\"bc\");\n-    let bitcodefile = append_suffix_to_stem(&bitcodefile, \"clang\");\n-    let testcc = testfile.with_extension(\"cc\");\n-    let proc_args = ProcArgs {\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        prog: config.clang_path.as_ref().unwrap().to_str().unwrap().to_string(),\n-        args: vec!(\"-c\".to_string(),\n-                   \"-emit-llvm\".to_string(),\n-                   \"-o\".to_string(),\n-                   bitcodefile.to_str().unwrap().to_string(),\n-                   testcc.to_str().unwrap().to_string())\n-    };\n-    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None, None)\n-}\n-\n-fn extract_function_from_bitcode(config: &Config, _props: &TestProps,\n-                                 fname: &str, testfile: &Path,\n-                                 suffix: &str) -> ProcRes {\n-    let bitcodefile = output_base_name(config, testfile).with_extension(\"bc\");\n-    let bitcodefile = append_suffix_to_stem(&bitcodefile, suffix);\n-    let extracted_bc = append_suffix_to_stem(&bitcodefile, \"extract\");\n-    let prog = config.llvm_bin_path.as_ref().unwrap().join(\"llvm-extract\");\n+fn check_ir_with_filecheck(config: &Config, testfile: &Path) -> ProcRes {\n+    let irfile = output_base_name(config, testfile).with_extension(\"ll\");\n+    let prog = config.llvm_bin_path.as_ref().unwrap().join(\"FileCheck\");\n     let proc_args = ProcArgs {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         prog: prog.to_str().unwrap().to_string(),\n-        args: vec!(format!(\"-func={}\", fname),\n-                   format!(\"-o={}\", extracted_bc.to_str().unwrap()),\n-                   bitcodefile.to_str().unwrap().to_string())\n+        args: vec!(format!(\"-input-file={}\", irfile.to_str().unwrap()),\n+                   testfile.to_str().unwrap().to_string())\n     };\n     compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None, None)\n }\n \n-fn disassemble_extract(config: &Config, _props: &TestProps,\n-                       testfile: &Path, suffix: &str) -> ProcRes {\n-    let bitcodefile = output_base_name(config, testfile).with_extension(\"bc\");\n-    let bitcodefile = append_suffix_to_stem(&bitcodefile, suffix);\n-    let extracted_bc = append_suffix_to_stem(&bitcodefile, \"extract\");\n-    let extracted_ll = extracted_bc.with_extension(\"ll\");\n-    let prog = config.llvm_bin_path.as_ref().unwrap().join(\"llvm-dis\");\n-    let proc_args = ProcArgs {\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        prog: prog.to_str().unwrap().to_string(),\n-        args: vec!(format!(\"-o={}\", extracted_ll.to_str().unwrap()),\n-                   extracted_bc.to_str().unwrap().to_string())\n-    };\n-    compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None, None)\n-}\n-\n-\n-fn count_extracted_lines(p: &Path) -> usize {\n-    let mut x = Vec::new();\n-    File::open(&p.with_extension(\"ll\")).unwrap().read_to_end(&mut x).unwrap();\n-    let x = str::from_utf8(&x).unwrap();\n-    x.lines().count()\n-}\n-\n-\n-fn run_codegen_test(config: &Config, props: &TestProps,\n-                    testfile: &Path, mm: &mut MetricMap) {\n+fn run_codegen_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     if config.llvm_bin_path.is_none() {\n         fatal(\"missing --llvm-bin-path\");\n     }\n \n-    if config.clang_path.is_none() {\n-        fatal(\"missing --clang-path\");\n-    }\n-\n-    let mut proc_res = compile_test_and_save_bitcode(config, props, testfile);\n-    if !proc_res.status.success() {\n-        fatal_proc_rec(\"compilation failed!\", &proc_res);\n-    }\n-\n-    proc_res = extract_function_from_bitcode(config, props, \"test\", testfile, \"\");\n-    if !proc_res.status.success() {\n-        fatal_proc_rec(\"extracting 'test' function failed\",\n-                      &proc_res);\n-    }\n-\n-    proc_res = disassemble_extract(config, props, testfile, \"\");\n-    if !proc_res.status.success() {\n-        fatal_proc_rec(\"disassembling extract failed\", &proc_res);\n-    }\n-\n-\n-    let mut proc_res = compile_cc_with_clang_and_save_bitcode(config, props, testfile);\n+    let mut proc_res = compile_test_and_save_ir(config, props, testfile);\n     if !proc_res.status.success() {\n         fatal_proc_rec(\"compilation failed!\", &proc_res);\n     }\n \n-    proc_res = extract_function_from_bitcode(config, props, \"test\", testfile, \"clang\");\n+    proc_res = check_ir_with_filecheck(config, testfile);\n     if !proc_res.status.success() {\n-        fatal_proc_rec(\"extracting 'test' function failed\",\n+        fatal_proc_rec(\"verification with 'FileCheck' failed\",\n                       &proc_res);\n     }\n-\n-    proc_res = disassemble_extract(config, props, testfile, \"clang\");\n-    if !proc_res.status.success() {\n-        fatal_proc_rec(\"disassembling extract failed\", &proc_res);\n-    }\n-\n-    let base = output_base_name(config, testfile);\n-    let base_extract = append_suffix_to_stem(&base, \"extract\");\n-\n-    let base_clang = append_suffix_to_stem(&base, \"clang\");\n-    let base_clang_extract = append_suffix_to_stem(&base_clang, \"extract\");\n-\n-    let base_lines = count_extracted_lines(&base_extract);\n-    let clang_lines = count_extracted_lines(&base_clang_extract);\n-\n-    mm.insert_metric(\"clang-codegen-ratio\",\n-                     (base_lines as f64) / (clang_lines as f64),\n-                     0.001);\n }\n \n fn charset() -> &'static str {"}, {"sha": "f11e769ca6c0ffb610b8a03dd9878abb8ff51689", "filename": "src/test/codegen/function-arguments.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=677367599e8383c355b8e8261cafe3ce44c9c6de", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(allocator)]\n+\n+pub struct S {\n+  _field: [i64; 4],\n+}\n+\n+pub struct UnsafeInner {\n+  _field: std::cell::UnsafeCell<i16>,\n+}\n+\n+// CHECK: zeroext i1 @boolean(i1 zeroext)\n+#[no_mangle]\n+pub fn boolean(x: bool) -> bool {\n+  x\n+}\n+\n+// CHECK: @readonly_borrow(i32* noalias readonly dereferenceable(4))\n+// FIXME #25759 This should also have `nocapture`\n+#[no_mangle]\n+pub fn readonly_borrow(_: &i32) {\n+}\n+\n+// CHECK: @static_borrow(i32* noalias readonly dereferenceable(4))\n+// static borrow may be captured\n+#[no_mangle]\n+pub fn static_borrow(_: &'static i32) {\n+}\n+\n+// CHECK: @named_borrow(i32* noalias readonly dereferenceable(4))\n+// borrow with named lifetime may be captured\n+#[no_mangle]\n+pub fn named_borrow<'r>(_: &'r i32) {\n+}\n+\n+// CHECK: @unsafe_borrow(%UnsafeInner* dereferenceable(2))\n+// unsafe interior means this isn't actually readonly and there may be aliases ...\n+#[no_mangle]\n+pub fn unsafe_borrow(_: &UnsafeInner) {\n+}\n+\n+// CHECK: @mutable_unsafe_borrow(%UnsafeInner* noalias dereferenceable(2))\n+// ... unless this is a mutable borrow, those never alias\n+#[no_mangle]\n+pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n+}\n+\n+// CHECK: @mutable_borrow(i32* noalias dereferenceable(4))\n+// FIXME #25759 This should also have `nocapture`\n+#[no_mangle]\n+pub fn mutable_borrow(_: &mut i32) {\n+}\n+\n+// CHECK: @indirect_struct(%S* noalias nocapture dereferenceable(32))\n+#[no_mangle]\n+pub fn indirect_struct(_: S) {\n+}\n+\n+// CHECK: @borrowed_struct(%S* noalias readonly dereferenceable(32))\n+// FIXME #25759 This should also have `nocapture`\n+#[no_mangle]\n+pub fn borrowed_struct(_: &S) {\n+}\n+\n+// CHECK: noalias dereferenceable(4) i32* @_box(i32* noalias dereferenceable(4))\n+#[no_mangle]\n+pub fn _box(x: Box<i32>) -> Box<i32> {\n+  x\n+}\n+\n+// CHECK: @struct_return(%S* noalias nocapture sret dereferenceable(32))\n+#[no_mangle]\n+pub fn struct_return() -> S {\n+  S {\n+    _field: [0, 0, 0, 0]\n+  }\n+}\n+\n+// CHECK: noalias i8* @allocator()\n+#[no_mangle]\n+#[allocator]\n+pub fn allocator() -> *const i8 {\n+  std::ptr::null()\n+}"}, {"sha": "9261bddb74788e0d95ea8d905c5679aef8ceaadb", "filename": "src/test/codegen/iterate-over-array.cc", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fiterate-over-array.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fiterate-over-array.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fiterate-over-array.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdlib.h>\n-#include <assert.h>\n-\n-struct slice {\n-  int const *p;\n-  size_t len;\n-};\n-\n-extern \"C\"\n-size_t test(slice s) {\n-  size_t y = 0;\n-  for (int i = 0; i < s.len; ++i) {\n-\tassert(i < s.len);\n-\ty += s.p[i];\n-  }\n-  return y;\n-}"}, {"sha": "a5b449285ef1feaf4d7c12b7d556be6eb5bed43c", "filename": "src/test/codegen/iterate-over-array.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fiterate-over-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fiterate-over-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fiterate-over-array.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[no_mangle]\n-pub fn test(x: &[isize]) -> isize {\n-    let mut y = 0;\n-    let mut i = 0;\n-    while (i < x.len()) {\n-        y += x[i];\n-        i += 1;\n-    }\n-    y\n-}"}, {"sha": "20a55740bb77683677edee3eaec226a73cf2dc8d", "filename": "src/test/codegen/loads.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Ftest%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Ftest%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Floads.rs?ref=677367599e8383c355b8e8261cafe3ce44c9c6de", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+pub struct Bytes {\n+  a: u8,\n+  b: u8,\n+  c: u8,\n+  d: u8,\n+}\n+\n+// CHECK-LABEL: @borrow\n+#[no_mangle]\n+pub fn borrow(x: &i32) -> &i32 {\n+// CHECK: load i32** %x{{.*}}, !nonnull\n+    x\n+}\n+\n+// CHECK-LABEL: @_box\n+#[no_mangle]\n+pub fn _box(x: Box<i32>) -> i32 {\n+// CHECK: load i32** %x{{.*}}, !nonnull\n+    *x\n+}\n+\n+// CHECK-LABEL: small_array_alignment\n+// The array is loaded as i32, but its alignment is lower, go with 1 byte to avoid target\n+// dependent alignment\n+#[no_mangle]\n+pub fn small_array_alignment(x: [i8; 4]) -> [i8; 4] {\n+// CHECK: [[VAR:%[0-9]+]] = load i32* %{{.*}}, align 1\n+// CHECK: ret i32 [[VAR]]\n+    x\n+}\n+\n+// CHECK-LABEL: small_struct_alignment\n+// The struct is loaded as i32, but its alignment is lower, go with 1 byte to avoid target\n+// dependent alignment\n+#[no_mangle]\n+pub fn small_struct_alignment(x: Bytes) -> Bytes {\n+// CHECK: [[VAR:%[0-9]+]] = load i32* %{{.*}}, align 1\n+// CHECK: ret i32 [[VAR]]\n+    x\n+}"}, {"sha": "ce3173ce464b1ed966116053ec5df5acc70f6ba9", "filename": "src/test/codegen/scalar-function-call.cc", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fscalar-function-call.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fscalar-function-call.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fscalar-function-call.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdlib.h>\n-\n-size_t foo(size_t x) {\n-    return x * x;\n-}\n-\n-extern \"C\"\n-void test() {\n-    size_t x = foo(10);\n-}"}, {"sha": "fe93c864fadab8f7364595075f169513bab03b21", "filename": "src/test/codegen/scalar-function-call.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fscalar-function-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fscalar-function-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fscalar-function-call.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(x: isize) -> isize {\n-    x * x\n-}\n-\n-#[no_mangle]\n-pub fn test() {\n-    let _x = foo(10);\n-}"}, {"sha": "97d80d3950fbb5c26dd53bab4113f1958ff2b59b", "filename": "src/test/codegen/single-return-value.cc", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsingle-return-value.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsingle-return-value.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsingle-return-value.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern \"C\"\n-int test() {\n-  return 5;\n-}"}, {"sha": "5addba1724d33520b091f840f84b9faec58c2fc6", "filename": "src/test/codegen/single-return-value.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsingle-return-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsingle-return-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsingle-return-value.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[no_mangle]\n-pub fn test() -> isize {\n-    5\n-}"}, {"sha": "db93829c62b86229c3752707f5da0062d6238a0f", "filename": "src/test/codegen/small-dense-int-switch.cc", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsmall-dense-int-switch.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsmall-dense-int-switch.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsmall-dense-int-switch.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdlib.h>\n-\n-extern \"C\"\n-size_t test(size_t x, size_t y) {\n-  switch (x) {\n-  case 1: return y;\n-  case 2: return y*2;\n-  case 4: return y*3;\n-  default: return 11;\n-  }\n-}"}, {"sha": "cf05a2e2f8e5fef861c3a29ce63ed1062e37d0f6", "filename": "src/test/codegen/small-dense-int-switch.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsmall-dense-int-switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fsmall-dense-int-switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsmall-dense-int-switch.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[no_mangle]\n-pub fn test(x: isize, y: isize) -> isize {\n-    match x {\n-        1 => y,\n-        2 => y*2,\n-        4 => y*3,\n-        _ => 11\n-    }\n-}"}, {"sha": "a81f76eee0bc5c6d0c45469f64c612644f33aeaa", "filename": "src/test/codegen/stack-alloc-string-slice.cc", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstack-alloc-string-slice.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstack-alloc-string-slice.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-alloc-string-slice.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stddef.h>\n-\n-struct slice {\n-  char const *p;\n-  size_t len;\n-};\n-\n-extern \"C\"\n-void test() {\n-  struct slice s = { .p = \"hello\",\n-                     .len = 5 };\n-}"}, {"sha": "188ee246bf32c15bc362ff34f8dee03efa6e9691", "filename": "src/test/codegen/stack-alloc-string-slice.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstack-alloc-string-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstack-alloc-string-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-alloc-string-slice.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[no_mangle]\n-pub fn test() {\n-    let _x = \"hello\";\n-}"}, {"sha": "6c03e32b98c4f190d5eb16346abc4760da390a61", "filename": "src/test/codegen/static-method-call-multi.cc", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdlib.h>\n-\n-struct Struct {\n-  size_t field;\n-  size_t method(size_t x) {\n-\treturn this->field + x;\n-  }\n-};\n-\n-extern \"C\"\n-size_t test(Struct &a,\n-\t\t\tStruct &b,\n-\t\t\tStruct &c,\n-\t\t\tStruct &d,\n-\t\t\tStruct &e) {\n-  return a.method(b.method(c.method(d.method(e.method(1)))));\n-}"}, {"sha": "025f9b524c9a986c9717ebfeb6817c3ee0dbad40", "filename": "src/test/codegen/static-method-call-multi.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub struct Struct {\n-    field: isize\n-}\n-\n-impl Struct {\n-    fn method(&self, x: isize) -> isize {\n-        self.field + x\n-    }\n-}\n-\n-#[no_mangle]\n-pub fn test(a: &Struct,\n-            b: &Struct,\n-            c: &Struct,\n-            d: &Struct,\n-            e: &Struct) -> isize {\n-    a.method(b.method(c.method(d.method(e.method(1)))))\n-}"}, {"sha": "36cfa4f4d84d4f1e32199c3c01328c8cea7734ac", "filename": "src/test/codegen/static-method-call.cc", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstatic-method-call.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdlib.h>\n-\n-struct Struct {\n-  size_t field;\n-  size_t method() {\n-\treturn this->field;\n-  }\n-};\n-\n-extern \"C\"\n-size_t test(Struct &s) {\n-  return s.method();\n-}"}, {"sha": "fca3784d9e002f3e6cb5c094267727dd51cba982", "filename": "src/test/codegen/static-method-call.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fstatic-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstatic-method-call.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub struct Struct {\n-    field: isize\n-}\n-\n-impl Struct {\n-    fn method(&self) -> isize {\n-        self.field\n-    }\n-}\n-\n-#[no_mangle]\n-pub fn test(s: &Struct) -> isize {\n-    s.method()\n-}"}, {"sha": "32337b085cd279bc8a2c169b5e2dc64053ea7dcb", "filename": "src/test/codegen/stores.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677367599e8383c355b8e8261cafe3ce44c9c6de/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=677367599e8383c355b8e8261cafe3ce44c9c6de", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+pub struct Bytes {\n+  a: u8,\n+  b: u8,\n+  c: u8,\n+  d: u8,\n+}\n+\n+// CHECK-LABEL: small_array_alignment\n+// The array is stored as i32, but its alignment is lower, go with 1 byte to avoid target\n+// dependent alignment\n+#[no_mangle]\n+pub fn small_array_alignment(x: &mut [i8; 4]) {\n+// CHECK: [[VAR:%[0-9]+]] = load [4 x i8]** %x\n+// CHECK: [[VAR2:%[0-9]+]] = bitcast [4 x i8]* [[VAR]] to i32*\n+// CHECK: store i32 %{{.*}}, i32* [[VAR2]], align 1\n+    *x = [0; 4];\n+}\n+\n+// CHECK-LABEL: small_struct_alignment\n+// The struct is stored as i32, but its alignment is lower, go with 1 byte to avoid target\n+// dependent alignment\n+#[no_mangle]\n+pub fn small_struct_alignment(x: &mut Bytes) {\n+// CHECK: [[VAR:%[0-9]+]] = load %Bytes** %x\n+// CHECK: [[VAR2:%[0-9]+]] = bitcast %Bytes* [[VAR]] to i32*\n+// CHECK: store i32 %{{.*}}, i32* [[VAR2]], align 1\n+    *x = Bytes {\n+        a: 0,\n+        b: 0,\n+        c: 0,\n+        d: 0,\n+    };\n+}"}, {"sha": "345f21c56472b09cdfd74a025bdbc106aea599bd", "filename": "src/test/codegen/virtual-method-call-struct-return.cc", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdlib.h>\n-\n-struct Stuff {\n-  size_t a;\n-  double b;\n-};\n-\n-struct Struct {\n-  virtual Stuff method() = 0;\n-};\n-\n-extern \"C\"\n-size_t test(Struct &s) {\n-  return s.method().a;\n-}"}, {"sha": "ae83409b45ff00e7d9ad3462b9082267f4c35c7d", "filename": "src/test/codegen/virtual-method-call-struct-return.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub struct Stuff {\n-  a: isize,\n-  b: f64\n-}\n-\n-pub trait Trait {\n-    fn method(&self) -> Stuff;\n-}\n-\n-#[no_mangle]\n-pub fn test(t: &Trait) -> isize {\n-    t.method().a\n-}"}, {"sha": "9fcafdf65949934f96d521f2c8f15b9c7833f841", "filename": "src/test/codegen/virtual-method-call.cc", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call.cc", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvirtual-method-call.cc?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include <stdlib.h>\n-\n-struct Struct {\n-  virtual size_t method() = 0;\n-};\n-\n-extern \"C\"\n-size_t test(Struct &s) {\n-  return s.method();\n-}"}, {"sha": "9bfeef1f018a702716f0cf3dd7458016415d9958", "filename": "src/test/codegen/virtual-method-call.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e1cd8147d452c356aacb29fb87568ca26f111/src%2Ftest%2Fcodegen%2Fvirtual-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvirtual-method-call.rs?ref=ba0e1cd8147d452c356aacb29fb87568ca26f111", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub trait Trait {\n-    fn method(&self) -> isize;\n-}\n-\n-#[no_mangle]\n-pub fn test(t: &Trait) -> isize {\n-    t.method()\n-}"}]}