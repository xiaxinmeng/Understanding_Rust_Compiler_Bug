{"sha": "c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MDMwYzk1N2EyYmI0ZGRiMzZjOWEwNmRmNWZjZjljNWY2MjYwMjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-18T17:04:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-18T17:04:03Z"}, "message": "Rollup merge of #71973 - lcnr:lazy-norm, r=nikomatsakis\n\nLazy normalization of constants (Reprise)\n\nContinuation of #67890 by @skinny121.\n\nInitial implementation of #60471 for constants.\n\nPerform normalization/evaluation of constants lazily, which is known as lazy normalization. Lazy normalization is only enabled when using `#![feature(lazy_normalization_consts)]`, by default constants are still evaluated eagerly as there are currently.\n\nLazy normalization of constants is achieved with a new ConstEquate predicate which type inferences uses to delay checking whether constants are equal to each other until later, avoiding cycle errors.\n\nNote this doesn't allow the use of generics within repeat count expressions as that is still evaluated during conversion to mir. There are also quite a few other known problems with lazy normalization which will be fixed in future PRs.\n\nr? @nikomatsakis\n\nfixes #71922, fixes #71986", "tree": {"sha": "3e31077070ab8aa454067a7951b4e384bea55160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e31077070ab8aa454067a7951b4e384bea55160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewsADCRBK7hj4Ov3rIwAAdHIIAHr0lv9IVPW2Z4L0aN/rJVP3\nA1TbHlHVpk4rI1iOe8LVWT0hJocMeCY4IFZWq8Zup5y90OiCzv2NzB94dLOYHUQG\n7HFVMgEe2HaioAQOmxCRJnRQxTGVRUGBsGJCbWvvJAmmohSobJ1ff7g5PWk6wVnb\noB/8sBJCgaUkyuHKLxNOOtwG9Af0fb6TETXUymsA/uoQR1pyBnjsu+Hprc8N9ppM\nR2dtQYi4SSmjAQX9VUc8zxmtn2CEnJLaWR8aFn56vUY/Ep7ezk+dGSZ4J4piADLO\nsi/hu3UmxpmXPbUywwU04HrbxlOT90uPS8Bmfdpc+ROxGzmzs/OQnDzC95ELLok=\n=dczs\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e31077070ab8aa454067a7951b4e384bea55160\nparent 58e644736521b2916a6734aa225603c539bfeeed\nparent 9da8a5ba6848cf246995b985b0982a7a9aa44890\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589821443 +0200\ncommitter GitHub <noreply@github.com> 1589821443 +0200\n\nRollup merge of #71973 - lcnr:lazy-norm, r=nikomatsakis\n\nLazy normalization of constants (Reprise)\n\nContinuation of #67890 by @skinny121.\n\nInitial implementation of #60471 for constants.\n\nPerform normalization/evaluation of constants lazily, which is known as lazy normalization. Lazy normalization is only enabled when using `#![feature(lazy_normalization_consts)]`, by default constants are still evaluated eagerly as there are currently.\n\nLazy normalization of constants is achieved with a new ConstEquate predicate which type inferences uses to delay checking whether constants are equal to each other until later, avoiding cycle errors.\n\nNote this doesn't allow the use of generics within repeat count expressions as that is still evaluated during conversion to mir. There are also quite a few other known problems with lazy normalization which will be fixed in future PRs.\n\nr? @nikomatsakis\n\nfixes #71922, fixes #71986\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "html_url": "https://github.com/rust-lang/rust/commit/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58e644736521b2916a6734aa225603c539bfeeed", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e644736521b2916a6734aa225603c539bfeeed", "html_url": "https://github.com/rust-lang/rust/commit/58e644736521b2916a6734aa225603c539bfeeed"}, {"sha": "9da8a5ba6848cf246995b985b0982a7a9aa44890", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da8a5ba6848cf246995b985b0982a7a9aa44890", "html_url": "https://github.com/rust-lang/rust/commit/9da8a5ba6848cf246995b985b0982a7a9aa44890"}], "stats": {"total": 814, "additions": 669, "deletions": 145}, "files": [{"sha": "c7a7cf89b4f1b738a16a6909f15784648e48e390", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -25,7 +25,7 @@ use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, BoundVar, Ty, TyCtxt};\n+use rustc_middle::ty::{self, BoundVar, Const, Ty, TyCtxt};\n use std::fmt::Debug;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n@@ -671,6 +671,13 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         });\n     }\n \n+    fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {\n+        span_bug!(\n+            self.cause.span(self.infcx.tcx),\n+            \"lazy_normalization_consts: unreachable `const_equate`\"\n+        );\n+    }\n+\n     fn normalization() -> NormalizationStrategy {\n         NormalizationStrategy::Eager\n     }"}, {"sha": "3467457b44997a0d21a8440684f899b86592b00e", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -39,7 +39,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n+use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -126,7 +126,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>\n     where\n-        R: TypeRelation<'tcx>,\n+        R: ConstEquateRelation<'tcx>,\n     {\n         debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n         if a == b {\n@@ -164,7 +164,22 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n-\n+            (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n+                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // escaping bound variables here.\n+                if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n+                    relation.const_equate_obligation(a, b);\n+                }\n+                return Ok(b);\n+            }\n+            (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {\n+                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // escaping bound variables here.\n+                if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n+                    relation.const_equate_obligation(a, b);\n+                }\n+                return Ok(a);\n+            }\n             _ => {}\n         }\n \n@@ -375,6 +390,20 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         debug!(\"generalize: success {{ {:?}, {:?} }}\", ty, needs_wf);\n         Ok(Generalization { ty, needs_wf })\n     }\n+\n+    pub fn add_const_equate_obligation(\n+        &mut self,\n+        a_is_expected: bool,\n+        a: &'tcx ty::Const<'tcx>,\n+        b: &'tcx ty::Const<'tcx>,\n+    ) {\n+        let predicate = if a_is_expected {\n+            ty::Predicate::ConstEquate(a, b)\n+        } else {\n+            ty::Predicate::ConstEquate(b, a)\n+        };\n+        self.obligations.push(Obligation::new(self.trace.cause.clone(), self.param_env, predicate));\n+    }\n }\n \n struct Generalizer<'cx, 'tcx> {\n@@ -637,11 +666,19 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n+            ty::ConstKind::Unevaluated(..) if self.tcx().lazy_normalization() => Ok(c),\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }\n }\n \n+pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n+    /// Register an obligation that both constants must be equal to each other.\n+    ///\n+    /// If they aren't equal then the relation doesn't hold.\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);\n+}\n+\n pub trait RelateResultCompare<'tcx, T> {\n     fn compare<F>(&self, t: T, f: F) -> RelateResult<'tcx, T>\n     where"}, {"sha": "e3cafb82719dd4e714dae122c8976b175b03c40f", "filename": "src/librustc_infer/infer/equate.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fequate.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1,4 +1,4 @@\n-use super::combine::{CombineFields, RelationDir};\n+use super::combine::{CombineFields, ConstEquateRelation, RelationDir};\n use super::Subtype;\n \n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -140,3 +140,9 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> ConstEquateRelation<'tcx> for Equate<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}"}, {"sha": "ec219a95b94414aa1ecf401aaacfb787ef08d109", "filename": "src/librustc_infer/infer/glb.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fglb.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -3,6 +3,7 @@ use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::traits::ObligationCause;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -116,3 +117,9 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n         Ok(())\n     }\n }\n+\n+impl<'tcx> ConstEquateRelation<'tcx> for Glb<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}"}, {"sha": "a0453db2cb4994d7dc7182bb4a15f830c5284b7b", "filename": "src/librustc_infer/infer/lub.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flub.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -3,6 +3,7 @@ use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::traits::ObligationCause;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -100,6 +101,12 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n     }\n }\n \n+impl<'tcx> ConstEquateRelation<'tcx> for Lub<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}\n+\n impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx, 'tcx> {\n     fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'tcx> {\n         self.fields.infcx"}, {"sha": "9c81a1153958b5a22cc5dfca7dec50cd7ac4c3ae", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1490,6 +1490,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.report_and_explain_type_error(trace, &err)\n     }\n \n+    pub fn report_mismatched_consts(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        expected: &'tcx ty::Const<'tcx>,\n+        actual: &'tcx ty::Const<'tcx>,\n+        err: TypeError<'tcx>,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let trace = TypeTrace::consts(cause, true, expected, actual);\n+        self.report_and_explain_type_error(trace, &err)\n+    }\n+\n     pub fn replace_bound_vars_with_fresh_vars<T>(\n         &self,\n         span: Span,\n@@ -1777,6 +1788,15 @@ impl<'tcx> TypeTrace<'tcx> {\n         TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }\n     }\n \n+    pub fn consts(\n+        cause: &ObligationCause<'tcx>,\n+        a_is_expected: bool,\n+        a: &'tcx ty::Const<'tcx>,\n+        b: &'tcx ty::Const<'tcx>,\n+    ) -> TypeTrace<'tcx> {\n+        TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }\n+    }\n+\n     pub fn dummy(tcx: TyCtxt<'tcx>) -> TypeTrace<'tcx> {\n         TypeTrace {\n             cause: ObligationCause::dummy(),"}, {"sha": "8de892510060828e12c6ddc238a8650794178660", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -21,6 +21,7 @@\n //!   thing we relate in chalk are basically domain goals and their\n //!   constituents)\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::infer::InferCtxt;\n use crate::infer::{ConstVarValue, ConstVariableValue};\n use rustc_data_structures::fx::FxHashMap;\n@@ -77,6 +78,8 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// delegate.\n     fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>);\n \n+    fn const_equate(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);\n+\n     /// Creates a new universe index. Used when instantiating placeholders.\n     fn create_next_universe(&mut self) -> ty::UniverseIndex;\n \n@@ -715,6 +718,15 @@ where\n     }\n }\n \n+impl<'tcx, D> ConstEquateRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n+where\n+    D: TypeRelatingDelegate<'tcx>,\n+{\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.delegate.const_equate(a, b);\n+    }\n+}\n+\n /// When we encounter a binder like `for<..> fn(..)`, we actually have\n /// to walk the `fn` value to find all the values bound by the `for`\n /// (these are not explicitly present in the ty representation right\n@@ -976,6 +988,7 @@ where\n                     }\n                 }\n             }\n+            ty::ConstKind::Unevaluated(..) if self.tcx().lazy_normalization() => Ok(a),\n             _ => relate::super_relate_consts(self, a, a),\n         }\n     }"}, {"sha": "289457e2bd0c294ea1fcfa63b235d044d9caf14f", "filename": "src/librustc_infer/infer/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -19,7 +19,8 @@ pub fn explicit_outlives_bounds<'tcx>(\n         | ty::Predicate::ObjectSafe(..)\n         | ty::Predicate::ClosureKind(..)\n         | ty::Predicate::TypeOutlives(..)\n-        | ty::Predicate::ConstEvaluatable(..) => None,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => None,\n         ty::Predicate::RegionOutlives(ref data) => data\n             .no_bound_vars()\n             .map(|ty::OutlivesPredicate(r_a, r_b)| OutlivesBound::RegionSubRegion(r_b, r_a)),"}, {"sha": "1ec67ef2efa9d2f129bcd73f99ba98381749e200", "filename": "src/librustc_infer/infer/sub.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fsub.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1,6 +1,7 @@\n use super::combine::{CombineFields, RelationDir};\n use super::SubregionOrigin;\n \n+use crate::infer::combine::ConstEquateRelation;\n use crate::traits::Obligation;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n@@ -169,3 +170,9 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         self.fields.higher_ranked_sub(a, b, self.a_is_expected)\n     }\n }\n+\n+impl<'tcx> ConstEquateRelation<'tcx> for Sub<'_, '_, 'tcx> {\n+    fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>) {\n+        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+    }\n+}"}, {"sha": "8d95904b355da7247def7b9629a384dd624b917e", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -10,7 +10,7 @@ pub mod util;\n \n use rustc_hir as hir;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Const, Ty};\n use rustc_span::Span;\n \n pub use self::FulfillmentErrorCode::*;\n@@ -81,6 +81,7 @@ pub enum FulfillmentErrorCode<'tcx> {\n     CodeSelectionError(SelectionError<'tcx>),\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n     CodeSubtypeError(ExpectedFound<Ty<'tcx>>, TypeError<'tcx>), // always comes from a SubtypePredicate\n+    CodeConstEquateError(ExpectedFound<&'tcx Const<'tcx>>, TypeError<'tcx>),\n     CodeAmbiguity,\n }\n "}, {"sha": "c48e58c04824e03a13e3a2a461957754bb58c0d1", "filename": "src/librustc_infer/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fstructural_impls.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -41,6 +41,9 @@ impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> {\n             super::CodeSubtypeError(ref a, ref b) => {\n                 write!(f, \"CodeSubtypeError({:?}, {:?})\", a, b)\n             }\n+            super::CodeConstEquateError(ref a, ref b) => {\n+                write!(f, \"CodeConstEquateError({:?}, {:?})\", a, b)\n+            }\n             super::CodeAmbiguity => write!(f, \"Ambiguity\"),\n         }\n     }"}, {"sha": "ee903b676bae95cf7e3a600fa2ab197bd5e13635", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -42,6 +42,8 @@ pub fn anonymize_predicate<'tcx>(\n         ty::Predicate::ConstEvaluatable(def_id, substs) => {\n             ty::Predicate::ConstEvaluatable(def_id, substs)\n         }\n+\n+        ty::Predicate::ConstEquate(c1, c2) => ty::Predicate::ConstEquate(c1, c2),\n     }\n }\n \n@@ -187,6 +189,10 @@ impl Elaborator<'tcx> {\n                 // Currently, we do not elaborate const-evaluatable\n                 // predicates.\n             }\n+            ty::Predicate::ConstEquate(..) => {\n+                // Currently, we do not elaborate const-equate\n+                // predicates.\n+            }\n             ty::Predicate::RegionOutlives(..) => {\n                 // Nothing to elaborate from `'a: 'b`.\n             }"}, {"sha": "bca91fb7b5d168629a4bff103892fb9eb26d2ff4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1221,7 +1221,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |\n-                    ConstEvaluatable(..) => continue,\n+                    ConstEvaluatable(..) |\n+                    ConstEquate(..) => continue,\n                 };\n                 if predicate.is_global() {\n                     cx.struct_span_lint(TRIVIAL_BOUNDS, span, |lint| {"}, {"sha": "c005455a3aab6a588bdbde3bde2bf7bf8720445d", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1339,7 +1339,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// What mode(s) of borrowck should we run? AST? MIR? both?\n     /// (Also considers the `#![feature(nll)]` setting.)\n-    pub fn borrowck_mode(&self) -> BorrowckMode {\n+    pub fn borrowck_mode(self) -> BorrowckMode {\n         // Here are the main constraints we need to deal with:\n         //\n         // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is\n@@ -1369,6 +1369,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.sess.opts.borrowck_mode\n     }\n \n+    /// If `true`, we should use lazy normalization for constants, otherwise\n+    /// we still evaluate them eagerly.\n+    #[inline]\n+    pub fn lazy_normalization(self) -> bool {\n+        self.features().const_generics\n+    }\n+\n     #[inline]\n     pub fn local_crate_exports_generics(self) -> bool {\n         debug_assert!(self.sess.opts.share_generics());"}, {"sha": "36bc44f5e50329b9734a8bd37168e33b9a334b78", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1054,6 +1054,9 @@ pub enum Predicate<'tcx> {\n \n     /// Constant initializer must evaluate successfully.\n     ConstEvaluatable(DefId, SubstsRef<'tcx>),\n+\n+    /// Constants must be equal. The first component is the const that is expected.\n+    ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -1172,6 +1175,9 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::ConstEvaluatable(def_id, const_substs) => {\n                 Predicate::ConstEvaluatable(def_id, const_substs.subst(tcx, substs))\n             }\n+            Predicate::ConstEquate(c1, c2) => {\n+                Predicate::ConstEquate(c1.subst(tcx, substs), c2.subst(tcx, substs))\n+            }\n         }\n     }\n }\n@@ -1349,7 +1355,8 @@ impl<'tcx> Predicate<'tcx> {\n             | Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n             | Predicate::TypeOutlives(..)\n-            | Predicate::ConstEvaluatable(..) => None,\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => None,\n         }\n     }\n \n@@ -1363,7 +1370,8 @@ impl<'tcx> Predicate<'tcx> {\n             | Predicate::WellFormed(..)\n             | Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n-            | Predicate::ConstEvaluatable(..) => None,\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => None,\n         }\n     }\n }"}, {"sha": "3e6a12df6887dd49416923986fb668abad80c5e8", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -83,6 +83,11 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n                 }\n             }\n \n+            ty::Array(element, _) => {\n+                // Don't look into the len const as it doesn't affect regions\n+                compute_components(tcx, element, out);\n+            }\n+\n             ty::Closure(_, ref substs) => {\n                 for upvar_ty in substs.as_closure().upvar_tys() {\n                     compute_components(tcx, upvar_ty, out);\n@@ -158,7 +163,6 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n             ty::Opaque(..) |      // OutlivesNominalType (ish)\n             ty::Foreign(..) |     // OutlivesNominalType\n             ty::Str |             // OutlivesScalar (ish)\n-            ty::Array(..) |       // ...\n             ty::Slice(..) |       // ...\n             ty::RawPtr(..) |      // ...\n             ty::Ref(..) |         // OutlivesReference"}, {"sha": "2502a4a13a8f0e7550658d00c33a17a7a0707ee9", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -2058,6 +2058,13 @@ define_print_and_forward_display! {\n                    print_value_path(def_id, substs),\n                    write(\"` can be evaluated\"))\n             }\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                p!(write(\"the constant `\"),\n+                   print(c1),\n+                   write(\"` equals `\"),\n+                   print(c2),\n+                   write(\"`\"))\n+            }\n         }\n     }\n "}, {"sha": "594ffbcd83613ef888bff691ca8f74e9c04008ea", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -431,6 +431,9 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             let t = relation.relate(&a_t, &b_t)?;\n             match relation.relate(&sz_a, &sz_b) {\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n+                // FIXME(#72219) Implement improved diagnostics for mismatched array\n+                // length?\n+                Err(err) if relation.tcx().lazy_normalization() => Err(err),\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics."}, {"sha": "cdb7e34546af8999f3e2fd84f83f476174554925", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -240,6 +240,7 @@ impl fmt::Debug for ty::Predicate<'tcx> {\n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                 write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)\n             }\n+            ty::Predicate::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n         }\n     }\n }\n@@ -492,6 +493,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                 tcx.lift(&substs).map(|substs| ty::Predicate::ConstEvaluatable(def_id, substs))\n             }\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                tcx.lift(&(c1, c2)).map(|(c1, c2)| ty::Predicate::ConstEquate(c1, c2))\n+            }\n         }\n     }\n }"}, {"sha": "7ff12820db8151858fbf33b6e89221ecaac237bc", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -2,7 +2,7 @@ use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRe\n use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Const, Ty};\n use rustc_trait_selection::traits::query::Fallible;\n \n use crate::borrow_check::constraints::OutlivesConstraint;\n@@ -99,6 +99,10 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         }\n     }\n \n+    // We don't have to worry about the equality of consts during borrow checking\n+    // as consts always have a static lifetime.\n+    fn const_equate(&mut self, _a: &'tcx Const<'tcx>, _b: &'tcx Const<'tcx>) {}\n+\n     fn normalization() -> NormalizationStrategy {\n         NormalizationStrategy::Eager\n     }"}, {"sha": "a2e2c1bf9eda30e1dece280f9c82f4301732a36e", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -28,7 +28,8 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 | Predicate::TypeOutlives(_)\n                 | Predicate::WellFormed(_)\n                 | Predicate::Projection(_)\n-                | Predicate::ConstEvaluatable(..) => continue,\n+                | Predicate::ConstEvaluatable(..)\n+                | Predicate::ConstEquate(..) => continue,\n                 Predicate::ObjectSafe(_) => {\n                     bug!(\"object safe predicate on function: {:#?}\", predicate)\n                 }"}, {"sha": "396965fcfb8b790c63b5eedaaa694b8d3b897bbf", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1277,7 +1277,8 @@ crate fn required_region_bounds(\n                 | ty::Predicate::ObjectSafe(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::RegionOutlives(..)\n-                | ty::Predicate::ConstEvaluatable(..) => None,\n+                | ty::Predicate::ConstEvaluatable(..)\n+                | ty::Predicate::ConstEquate(..) => None,\n                 ty::Predicate::TypeOutlives(predicate) => {\n                     // Search for a bound of the form `erased_self_ty\n                     // : 'a`, but be wary of something like `for<'a>"}, {"sha": "139b86007222447b02bc49be1fee5fe3a289021a", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -615,6 +615,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             obligation\n                         )\n                     }\n+\n+                    ty::Predicate::ConstEquate(..) => {\n+                        // Errors for `ConstEquate` predicates show up as\n+                        // `SelectionError::ConstEvalFailure`,\n+                        // not `Unimplemented`.\n+                        span_bug!(\n+                            span,\n+                            \"const-equate requirement gave wrong error: `{:?}`\",\n+                            obligation\n+                        )\n+                    }\n                 }\n             }\n \n@@ -1092,6 +1103,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 )\n                 .emit();\n             }\n+            FulfillmentErrorCode::CodeConstEquateError(ref expected_found, ref err) => {\n+                self.report_mismatched_consts(\n+                    &error.obligation.cause,\n+                    expected_found.expected,\n+                    expected_found.found,\n+                    err.clone(),\n+                )\n+                .emit();\n+            }\n         }\n     }\n "}, {"sha": "98f6ac0e5472846c326a727447cd932c6dfb7ff2", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -2,9 +2,11 @@ use crate::infer::{InferCtxt, TyOrConstInferVar};\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n+use rustc_errors::ErrorReported;\n use rustc_infer::traits::{TraitEngine, TraitEngineExt as _};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n-use rustc_middle::ty::{self, ToPolyTraitRef, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Const, ToPolyTraitRef, Ty, TypeFoldable};\n use std::marker::PhantomData;\n \n use super::project;\n@@ -520,6 +522,68 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                     Err(err) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err))),\n                 }\n             }\n+\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                debug!(\"equating consts: c1={:?} c2={:?}\", c1, c2);\n+\n+                let stalled_on = &mut pending_obligation.stalled_on;\n+\n+                let mut evaluate = |c: &'tcx Const<'tcx>| {\n+                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                        match self.selcx.infcx().const_eval_resolve(\n+                            obligation.param_env,\n+                            def_id,\n+                            substs,\n+                            promoted,\n+                            Some(obligation.cause.span),\n+                        ) {\n+                            Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n+                            Err(ErrorHandled::TooGeneric) => {\n+                                stalled_on.append(\n+                                    &mut substs\n+                                        .types()\n+                                        .filter_map(|ty| TyOrConstInferVar::maybe_from_ty(ty))\n+                                        .collect(),\n+                                );\n+                                Err(ErrorHandled::TooGeneric)\n+                            }\n+                            Err(err) => Err(err),\n+                        }\n+                    } else {\n+                        Ok(c)\n+                    }\n+                };\n+\n+                match (evaluate(c1), evaluate(c2)) {\n+                    (Ok(c1), Ok(c2)) => {\n+                        match self\n+                            .selcx\n+                            .infcx()\n+                            .at(&obligation.cause, obligation.param_env)\n+                            .eq(c1, c2)\n+                        {\n+                            Ok(_) => ProcessResult::Changed(vec![]),\n+                            Err(err) => {\n+                                ProcessResult::Error(FulfillmentErrorCode::CodeConstEquateError(\n+                                    ExpectedFound::new(true, c1, c2),\n+                                    err,\n+                                ))\n+                            }\n+                        }\n+                    }\n+                    (Err(ErrorHandled::Reported(ErrorReported)), _)\n+                    | (_, Err(ErrorHandled::Reported(ErrorReported))) => ProcessResult::Error(\n+                        CodeSelectionError(ConstEvalFailure(ErrorHandled::Reported(ErrorReported))),\n+                    ),\n+                    (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => span_bug!(\n+                        obligation.cause.span(self.selcx.tcx()),\n+                        \"ConstEquate: const_eval_resolve returned an unexpected error\"\n+                    ),\n+                    (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n+                        ProcessResult::Unchanged\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "1bfcacd6ccdc12828b2dde3150e0a9db6f19ab3a", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 58, "deletions": 41, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -16,8 +16,9 @@ use crate::traits::{self, Obligation, ObligationCause};\n use rustc_errors::{Applicability, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst};\n-use rustc_middle::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor, WithConstness};\n+use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -281,7 +282,8 @@ fn predicates_reference_self(\n                 | ty::Predicate::RegionOutlives(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::Subtype(..)\n-                | ty::Predicate::ConstEvaluatable(..) => None,\n+                | ty::Predicate::ConstEvaluatable(..)\n+                | ty::Predicate::ConstEquate(..) => None,\n             }\n         })\n         .collect()\n@@ -313,7 +315,8 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         | ty::Predicate::ObjectSafe(..)\n         | ty::Predicate::ClosureKind(..)\n         | ty::Predicate::TypeOutlives(..)\n-        | ty::Predicate::ConstEvaluatable(..) => false,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => false,\n     })\n }\n \n@@ -724,51 +727,65 @@ fn contains_illegal_self_type_reference<'tcx>(\n     // object type, and we cannot resolve `Self as SomeOtherTrait`\n     // without knowing what `Self` is.\n \n-    let mut supertraits: Option<Vec<ty::PolyTraitRef<'tcx>>> = None;\n-    let self_ty = tcx.types.self_param;\n-\n-    let mut walker = ty.walk();\n-    while let Some(arg) = walker.next() {\n-        if arg == self_ty.into() {\n-            return true;\n-        }\n-\n-        // Special-case projections (everything else is walked normally).\n-        if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Projection(ref data) = ty.kind {\n-                // This is a projected type `<Foo as SomeTrait>::X`.\n+    struct IllegalSelfTypeVisitor<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        self_ty: Ty<'tcx>,\n+        trait_def_id: DefId,\n+        supertraits: Option<Vec<ty::PolyTraitRef<'tcx>>>,\n+    }\n \n-                // Compute supertraits of current trait lazily.\n-                if supertraits.is_none() {\n-                    let trait_ref = ty::Binder::bind(ty::TraitRef::identity(tcx, trait_def_id));\n-                    supertraits = Some(traits::supertraits(tcx, trait_ref).collect());\n-                }\n+    impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+            match t.kind {\n+                ty::Param(_) => t == self.self_ty,\n+                ty::Projection(ref data) => {\n+                    // This is a projected type `<Foo as SomeTrait>::X`.\n+\n+                    // Compute supertraits of current trait lazily.\n+                    if self.supertraits.is_none() {\n+                        let trait_ref =\n+                            ty::Binder::bind(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n+                        self.supertraits = Some(traits::supertraits(self.tcx, trait_ref).collect());\n+                    }\n \n-                // Determine whether the trait reference `Foo as\n-                // SomeTrait` is in fact a supertrait of the\n-                // current trait. In that case, this type is\n-                // legal, because the type `X` will be specified\n-                // in the object type.  Note that we can just use\n-                // direct equality here because all of these types\n-                // are part of the formal parameter listing, and\n-                // hence there should be no inference variables.\n-                let projection_trait_ref = ty::Binder::bind(data.trait_ref(tcx));\n-                let is_supertrait_of_current_trait =\n-                    supertraits.as_ref().unwrap().contains(&projection_trait_ref);\n-\n-                if is_supertrait_of_current_trait {\n-                    // Do not walk contained types, do not report error, do collect $200.\n-                    walker.skip_current_subtree();\n+                    // Determine whether the trait reference `Foo as\n+                    // SomeTrait` is in fact a supertrait of the\n+                    // current trait. In that case, this type is\n+                    // legal, because the type `X` will be specified\n+                    // in the object type.  Note that we can just use\n+                    // direct equality here because all of these types\n+                    // are part of the formal parameter listing, and\n+                    // hence there should be no inference variables.\n+                    let projection_trait_ref = ty::Binder::bind(data.trait_ref(self.tcx));\n+                    let is_supertrait_of_current_trait =\n+                        self.supertraits.as_ref().unwrap().contains(&projection_trait_ref);\n+\n+                    if is_supertrait_of_current_trait {\n+                        false // do not walk contained types, do not report error, do collect $200\n+                    } else {\n+                        t.super_visit_with(self) // DO walk contained types, POSSIBLY reporting an error\n+                    }\n                 }\n-\n-                // DO walk contained types, POSSIBLY reporting an error.\n+                _ => t.super_visit_with(self), // walk contained types, if any\n             }\n         }\n \n-        // Walk contained types, if any.\n+        fn visit_const(&mut self, _c: &ty::Const<'tcx>) -> bool {\n+            // FIXME(#72219) Look into the unevaluated constants for object safety violations.\n+            // Do not walk substitutions of unevaluated consts, as they contain `Self`, even\n+            // though the const expression doesn't necessary use it. Currently type variables\n+            // inside array length expressions are forbidden, so they can't break the above\n+            // rules.\n+            false\n+        }\n     }\n \n-    false\n+    ty.visit_with(&mut IllegalSelfTypeVisitor {\n+        tcx,\n+        self_ty: tcx.types.self_param,\n+        trait_def_id,\n+        supertraits: None,\n+    })\n }\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {"}, {"sha": "c4cb72fa08c08c1c4806c7743919c4282b341fd6", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -388,8 +388,12 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        let constant = constant.super_fold_with(self);\n-        constant.eval(self.selcx.tcx(), self.param_env)\n+        if self.selcx.tcx().lazy_normalization() {\n+            constant\n+        } else {\n+            let constant = constant.super_fold_with(self);\n+            constant.eval(self.selcx.tcx(), self.param_env)\n+        }\n     }\n }\n "}, {"sha": "70c6cbef102c53c1da1532c22b2b548b9a9870b7", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -38,11 +38,13 @@ use crate::traits::project::ProjectionCacheKeyExt;\n use rustc_ast::attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n@@ -503,9 +505,48 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     None,\n                 ) {\n                     Ok(_) => Ok(EvaluatedToOk),\n+                    Err(ErrorHandled::TooGeneric) => Ok(EvaluatedToAmbig),\n                     Err(_) => Ok(EvaluatedToErr),\n                 }\n             }\n+\n+            ty::Predicate::ConstEquate(c1, c2) => {\n+                debug!(\"evaluate_predicate_recursively: equating consts c1={:?} c2={:?}\", c1, c2);\n+\n+                let evaluate = |c: &'tcx ty::Const<'tcx>| {\n+                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                        self.infcx\n+                            .const_eval_resolve(\n+                                obligation.param_env,\n+                                def_id,\n+                                substs,\n+                                promoted,\n+                                Some(obligation.cause.span),\n+                            )\n+                            .map(|val| ty::Const::from_value(self.tcx(), val, c.ty))\n+                    } else {\n+                        Ok(c)\n+                    }\n+                };\n+\n+                match (evaluate(c1), evaluate(c2)) {\n+                    (Ok(c1), Ok(c2)) => {\n+                        match self.infcx().at(&obligation.cause, obligation.param_env).eq(c1, c2) {\n+                            Ok(_) => Ok(EvaluatedToOk),\n+                            Err(_) => Ok(EvaluatedToErr),\n+                        }\n+                    }\n+                    (Err(ErrorHandled::Reported(ErrorReported)), _)\n+                    | (_, Err(ErrorHandled::Reported(ErrorReported))) => Ok(EvaluatedToErr),\n+                    (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => span_bug!(\n+                        obligation.cause.span(self.tcx()),\n+                        \"ConstEquate: const_eval_resolve returned an unexpected error\"\n+                    ),\n+                    (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n+                        Ok(EvaluatedToAmbig)\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "4d3bbfa77c37d99e0088fb35f573b71952d23316", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -102,6 +102,10 @@ pub fn predicate_obligations<'a, 'tcx>(\n                 wf.compute(ty);\n             }\n         }\n+        ty::Predicate::ConstEquate(c1, c2) => {\n+            wf.compute(c1.ty);\n+            wf.compute(c2.ty);\n+        }\n     }\n \n     wf.normalize()"}, {"sha": "184b9a9dc104027464af718f8fbc2eb5b27140aa", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -126,9 +126,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                     | ty::Predicate::ObjectSafe(..)\n                     | ty::Predicate::ClosureKind(..)\n                     | ty::Predicate::Subtype(..)\n-                    | ty::Predicate::ConstEvaluatable(..) => {\n-                        bug!(\"unexpected predicate {}\", predicate)\n-                    }\n+                    | ty::Predicate::ConstEvaluatable(..)\n+                    | ty::Predicate::ConstEquate(..) => bug!(\"unexpected predicate {}\", predicate),\n                 }\n             }\n             ChalkEnvironmentClause::TypeFromEnv(ty) => Some(\n@@ -192,9 +191,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n             | Predicate::Subtype(..)\n-            | Predicate::ConstEvaluatable(..) => {\n-                chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n-            }\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => chalk_ir::GoalData::All(chalk_ir::Goals::new(interner)),\n         }\n     }\n }\n@@ -459,7 +457,8 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n             | Predicate::Subtype(..)\n-            | Predicate::ConstEvaluatable(..) => bug!(\"unexpected predicate {}\", &self),\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => bug!(\"unexpected predicate {}\", &self),\n         }\n     }\n }"}, {"sha": "eaaab87ab747467aa1952c653391b60458f04769", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -100,7 +100,8 @@ fn compute_implied_outlives_bounds<'tcx>(\n                 | ty::Predicate::Projection(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::ObjectSafe(..)\n-                | ty::Predicate::ConstEvaluatable(..) => vec![],\n+                | ty::Predicate::ConstEvaluatable(..)\n+                | ty::Predicate::ConstEquate(..) => vec![],\n \n                 ty::Predicate::WellFormed(subty) => {\n                     wf_types.push(subty);"}, {"sha": "ed30ed5313e5c591ff3eca0df43cd70ea0c64c81", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -48,6 +48,7 @@ fn not_outlives_predicate(p: &ty::Predicate<'_>) -> bool {\n         | ty::Predicate::ObjectSafe(..)\n         | ty::Predicate::ClosureKind(..)\n         | ty::Predicate::Subtype(..)\n-        | ty::Predicate::ConstEvaluatable(..) => true,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => true,\n     }\n }"}, {"sha": "e21db9035e25d11da0e565561fd774accf9c5404", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -810,7 +810,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             | ty::Predicate::ObjectSafe(..)\n             | ty::Predicate::ClosureKind(..)\n             | ty::Predicate::TypeOutlives(..)\n-            | ty::Predicate::ConstEvaluatable(..) => None,\n+            | ty::Predicate::ConstEvaluatable(..)\n+            | ty::Predicate::ConstEquate(..) => None,\n         });\n \n         self.elaborate_bounds(bounds, |this, poly_trait_ref, item| {"}, {"sha": "d72c74e4188ee04c2826ccb593dfca5f5796cd39", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1648,6 +1648,16 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n \n             r.super_visit_with(self)\n         }\n+\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+            if let ty::ConstKind::Unevaluated(..) = c.val {\n+                // FIXME(#72219) We currenctly don't detect lifetimes within substs\n+                // which would violate this check. Even though the particular substitution is not used\n+                // within the const, this should still be fixed.\n+                return false;\n+            }\n+            c.super_visit_with(self)\n+        }\n     }\n \n     let prohibit_opaque = match item.kind {\n@@ -3858,6 +3868,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Predicate::WellFormed(..) => None,\n                 ty::Predicate::ObjectSafe(..) => None,\n                 ty::Predicate::ConstEvaluatable(..) => None,\n+                ty::Predicate::ConstEquate(..) => None,\n                 // N.B., this predicate is created by breaking down a\n                 // `ClosureType: FnFoo()` predicate, where\n                 // `ClosureType` represents some `Closure`. It can't"}, {"sha": "7cfb89f3ff048eeb29d6c744ea6064663ecc44a8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1164,15 +1164,16 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             Some(tcx.hir().local_def_id(parent_id).to_def_id())\n         }\n-        // FIXME(#43408) enable this always when we get lazy normalization.\n+        // FIXME(#43408) always enable this once `lazy_normalization` is\n+        // stable enough and does not need a feature gate anymore.\n         Node::AnonConst(_) => {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             let parent_def_id = tcx.hir().local_def_id(parent_id);\n \n             // HACK(eddyb) this provides the correct generics when\n             // `feature(const_generics)` is enabled, so that const expressions\n             // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-            if tcx.features().const_generics {\n+            if tcx.lazy_normalization() {\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}, {"sha": "919bcc9943d4883920cd80890f51f5a158cab023", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -413,6 +413,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::Predicate::Subtype(_)\n         | ty::Predicate::ObjectSafe(_)\n         | ty::Predicate::ClosureKind(..)\n-        | ty::Predicate::ConstEvaluatable(..) => None,\n+        | ty::Predicate::ConstEvaluatable(..)\n+        | ty::Predicate::ConstEquate(..) => None,\n     }\n }"}, {"sha": "66daf0e7f7d9df6df31870c5f66743e7203c2153", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -58,7 +58,8 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::Predicate::ObjectSafe(..)\n                     | ty::Predicate::ClosureKind(..)\n                     | ty::Predicate::Subtype(..)\n-                    | ty::Predicate::ConstEvaluatable(..) => (),\n+                    | ty::Predicate::ConstEvaluatable(..)\n+                    | ty::Predicate::ConstEquate(..) => (),\n                 }\n             }\n "}, {"sha": "c130ed3f46dbb5d7916d1d2896e17c066a2a569a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -493,7 +493,8 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n             Predicate::WellFormed(..)\n             | Predicate::ObjectSafe(..)\n             | Predicate::ClosureKind(..)\n-            | Predicate::ConstEvaluatable(..) => panic!(\"not user writable\"),\n+            | Predicate::ConstEvaluatable(..)\n+            | Predicate::ConstEquate(..) => panic!(\"not user writable\"),\n         }\n     }\n }"}, {"sha": "7eb826b8a36b119a0fc6d4ca7ef261d279be62f9", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -13,8 +13,8 @@ error[E0308]: mismatched types\n LL |     x = Const::<{ [4] }> {};\n    |         ^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `4usize`\n    |\n-   = note: expected struct `Const<[3usize]>`\n-              found struct `Const<[4usize]>`\n+   = note: expected type `[3usize]`\n+              found type `[4usize]`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "de41d2984a655e5f505157a14ca0e0c109ce567a", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -11,12 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:16:31\n    |\n LL |     let _: Checked<not_one> = Checked::<not_two>;\n-   |            ----------------   ^^^^^^^^^^^^^^^^^^ expected `{not_one as fn(usize) -> bool}`, found `{not_two as fn(usize) -> bool}`\n-   |            |\n-   |            expected due to this\n+   |                               ^^^^^^^^^^^^^^^^^^ expected `{not_one as fn(usize) -> bool}`, found `{not_two as fn(usize) -> bool}`\n    |\n-   = note: expected struct `Checked<{not_one as fn(usize) -> bool}>`\n-              found struct `Checked<{not_two as fn(usize) -> bool}>`\n+   = note: expected type `{not_one as fn(usize) -> bool}`\n+              found type `{not_two as fn(usize) -> bool}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:20:24\n@@ -37,12 +35,10 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40\n    |\n LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n-   |            -------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{generic::<u32> as fn(usize) -> bool}`, found `{generic::<u16> as fn(usize) -> bool}`\n-   |            |\n-   |            expected due to this\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{generic::<u32> as fn(usize) -> bool}`, found `{generic::<u16> as fn(usize) -> bool}`\n    |\n-   = note: expected struct `Checked<{generic::<u32> as fn(usize) -> bool}>`\n-              found struct `Checked<{generic::<u16> as fn(usize) -> bool}>`\n+   = note: expected type `{generic::<u32> as fn(usize) -> bool}`\n+              found type `{generic::<u16> as fn(usize) -> bool}`\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "5c987e63a9e070c480478143c48393a317db1979", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+trait Foo {}\n+\n+impl<const N: usize> Foo for [(); N]\n+    where\n+        Self:FooImpl<{N==0}>\n+{}\n+\n+trait FooImpl<const IS_ZERO: bool>{}\n+\n+impl FooImpl<true> for [(); 0] {}\n+\n+impl<const N:usize> FooImpl<false> for [();N] {}\n+\n+fn foo(_: impl Foo) {}\n+\n+fn main() {\n+    foo([]);\n+    foo([()]);\n+}"}, {"sha": "cf0c0e24a7604b47dc2eabb0a7ae59b752154dde", "filename": "src/test/ui/const-generics/issues/issue-61935.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-61935.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4e05aadd3930f4f81c7b4fa7b7472c0345b07dd9", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -16,8 +16,7 @@ struct ArrayHolder<const X: usize>([u32; X]);\n impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n-        //~^ ERROR: mismatched types\n-        //~| ERROR constant expression depends on a generic parameter\n+        //~^ ERROR constant expression depends on a generic parameter\n     }\n }\n "}, {"sha": "f09af76325e96c9f98906e2acc435667099a00b3", "filename": "src/test/ui/const-generics/issues/issue-62504.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1,12 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-62504.rs:18:21\n-   |\n-LL |         ArrayHolder([0; Self::SIZE])\n-   |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n-   |\n-   = note: expected array `[u32; X]`\n-              found array `[u32; _]`\n-\n error: constant expression depends on a generic parameter\n   --> $DIR/issue-62504.rs:18:25\n    |\n@@ -15,6 +6,5 @@ LL |         ArrayHolder([0; Self::SIZE])\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "76bde1815be18e10ec6e3472099a459a58cc3b56", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1,5 +1,6 @@\n #![allow(incomplete_features, dead_code, unconditional_recursion)]\n #![feature(const_generics)]\n+#![feature(lazy_normalization_consts)]\n \n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();"}, {"sha": "416b675b56d28cdec77fa8c77d7b79827fa5deed", "filename": "src/test/ui/const-generics/issues/issue-66205.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-66205.rs:5:12\n+  --> $DIR/issue-66205.rs:6:12\n    |\n LL |     fact::<{ N - 1 }>();\n    |            ^^^^^^^^^"}, {"sha": "b08057851a1ba9e946cab228a80cf51891f4d4b6", "filename": "src/test/ui/const-generics/issues/issue-67185-1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+trait Baz {\n+    type Quaks;\n+}\n+impl Baz for u8 {\n+    type Quaks = [u16; 3];\n+}\n+\n+trait Bar {}\n+impl Bar for [u16; 3] {}\n+impl Bar for [[u16; 3]; 2] {}\n+\n+trait Foo\n+    where\n+        [<u8 as Baz>::Quaks; 2]: Bar,\n+        <u8 as Baz>::Quaks: Bar,\n+{\n+}\n+\n+struct FooImpl;\n+\n+impl Foo for FooImpl {}\n+\n+fn f(_: impl Foo) {}\n+\n+fn main() {\n+    f(FooImpl)\n+}"}, {"sha": "9cc797d6d8a017b704cf77c2830ec0f68e19b7fd", "filename": "src/test/ui/const-generics/issues/issue-67185-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-67185-1.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "111b718dd5efd52f6a0801d861646f1352ed00e6", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,35 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+trait Baz {\n+    type Quaks;\n+}\n+impl Baz for u8 {\n+    type Quaks = [u16; 3];\n+}\n+\n+trait Bar {}\n+impl Bar for [u16; 4] {}\n+impl Bar for [[u16; 3]; 3] {}\n+\n+trait Foo  //~ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n+           //~^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n+    where\n+        [<u8 as Baz>::Quaks; 2]: Bar,\n+        <u8 as Baz>::Quaks: Bar,\n+{\n+}\n+\n+struct FooImpl;\n+\n+impl Foo for FooImpl {}\n+//~^ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n+//~^^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n+\n+fn f(_: impl Foo) {}\n+//~^ ERROR the trait bound `[u16; 3]: Bar` is not satisfied [E0277]\n+//~^^ ERROR the trait bound `[[u16; 3]; 2]: Bar` is not satisfied [E0277]\n+\n+fn main() {\n+    f(FooImpl)\n+}"}, {"sha": "7d947a907a0ee02936f20629607e6c71a21ac6dc", "filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,112 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-67185-2.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:15:1\n+   |\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:15:1\n+   |\n+LL | / trait Foo\n+LL | |\n+LL | |     where\n+LL | |         [<u8 as Baz>::Quaks; 2]: Bar,\n+LL | |         <u8 as Baz>::Quaks: Bar,\n+LL | | {\n+LL | | }\n+   | |_^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:25:6\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             --- required by this bound in `Foo`\n+...\n+LL | impl Foo for FooImpl {}\n+   |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:25:6\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  --- required by this bound in `Foo`\n+...\n+LL | impl Foo for FooImpl {}\n+   |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:29:14\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  --- required by this bound in `Foo`\n+...\n+LL | fn f(_: impl Foo) {}\n+   |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:29:14\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             --- required by this bound in `Foo`\n+...\n+LL | fn f(_: impl Foo) {}\n+   |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n+   |\n+   = help: the following implementations were found:\n+             <[[u16; 3]; 3] as Bar>\n+             <[u16; 4] as Bar>\n+\n+error: aborting due to 6 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2befbe56d85c7c5d42a6ba2249e3211b7598a575", "filename": "src/test/ui/const-generics/issues/issue-69654.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/58e644736521b2916a6734aa225603c539bfeeed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e644736521b2916a6734aa225603c539bfeeed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs?ref=58e644736521b2916a6734aa225603c539bfeeed", "patch": "@@ -1,18 +0,0 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n-\n-trait Bar<O> {}\n-impl<O> Bar<O> for [u8; O] {}\n-//~^ ERROR expected value, found type parameter `O`\n-\n-struct Foo<const O: usize> {}\n-impl<const O: usize> Foo<O>\n-where\n-    [u8; O]: Bar<[(); O]>,\n-{\n-    fn foo() {}\n-}\n-\n-fn main() {\n-    Foo::foo();\n-}"}, {"sha": "9d52603f462bedaec02beed21129c40348ade380", "filename": "src/test/ui/const-generics/issues/issue-69654.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58e644736521b2916a6734aa225603c539bfeeed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58e644736521b2916a6734aa225603c539bfeeed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr?ref=58e644736521b2916a6734aa225603c539bfeeed", "patch": "@@ -1,14 +0,0 @@\n-error[E0423]: expected value, found type parameter `O`\n-  --> $DIR/issue-69654.rs:5:25\n-   |\n-LL | impl<O> Bar<O> for [u8; O] {}\n-   |                         ^ help: a tuple variant with a similar name exists: `Ok`\n-   | \n-  ::: $SRC_DIR/libcore/result.rs:LL:COL\n-   |\n-LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0423`."}, {"sha": "36513f94a9e97562431adca9dc10b06c0fa67139", "filename": "src/test/ui/const-generics/lazy-normalization/issue-71922.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+trait Foo {}\n+\n+impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n+\n+trait FooImpl<const IS_ZERO: bool> {}\n+\n+impl FooImpl<{ 0u8 == 0u8 }> for [(); 0] {}\n+\n+impl<const N: usize> FooImpl<{ 0u8 != 0u8 }> for [(); N] {}\n+\n+fn foo<T: Foo>(_: T) {}\n+\n+fn main() {\n+    foo([]);\n+    foo([()]);\n+}"}, {"sha": "048ed18c927bfa25e9a03b76cef939ac5c80f99d", "filename": "src/test/ui/const-generics/lazy-normalization/issue-71986.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71986.rs?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+pub trait Foo<const B: bool> {}\n+pub fn bar<T: Foo<{ true }>>() {}\n+\n+fn main() {}"}, {"sha": "7a665397c1207fd90c753fc5a21581f9f074f3ca", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -11,12 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/raw-ptr-const-param.rs:7:40\n    |\n LL |     let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>;\n-   |            -------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{0xf as *const u32}`, found `{0xa as *const u32}`\n-   |            |\n-   |            expected due to this\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{0xf as *const u32}`, found `{0xa as *const u32}`\n    |\n-   = note: expected struct `Const<{0xf as *const u32}>`\n-              found struct `Const<{0xa as *const u32}>`\n+   = note: expected type `{0xf as *const u32}`\n+              found type `{0xa as *const u32}`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "53328c2e89bf4ea2c58e6ca737e2fd4bc36ab2c1", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -11,12 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:13:41\n    |\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n-   |            |\n-   |            expected due to this\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n    |\n-   = note: expected struct `A<'_, _, 2u32, _>`\n-              found struct `A<'_, _, 4u32, _>`\n+   = note: expected type `2u32`\n+              found type `4u32`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:15:41\n@@ -26,8 +24,8 @@ LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `A<'a, u16, _, _>`\n-              found struct `A<'b, u32, _, _>`\n+   = note: expected struct `A<'a, u16, {2u32}, {3u32}>`\n+              found struct `A<'b, u32, {2u32}, {3u32}>`\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "88f8dbe1a7d72cbbdd7827bb71d128c576d5c581", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6030c957a2bb4ddb36c9a06df5fcf9c5f626029/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=c6030c957a2bb4ddb36c9a06df5fcf9c5f626029", "patch": "@@ -25,7 +25,7 @@ error: non-defining opaque type use in defining scope\n LL | fn concrete_const() -> OneConst<{123}> {\n    |                        ^^^^^^^^^^^^^^^\n    |\n-note: used non-generic constant `123usize` for generic parameter\n+note: used non-generic constant `{123}` for generic parameter\n   --> $DIR/generic_nondefining_use.rs:10:21\n    |\n LL | type OneConst<const X: usize> = impl Debug;"}]}