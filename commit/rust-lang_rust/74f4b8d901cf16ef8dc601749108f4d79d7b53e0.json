{"sha": "74f4b8d901cf16ef8dc601749108f4d79d7b53e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZjRiOGQ5MDFjZjE2ZWY4ZGM2MDE3NDkxMDhmNGQ3OWQ3YjUzZTA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-11T01:55:44Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-11T16:09:07Z"}, "message": "Unify state_lock + kill_lock -> lifecycle_lock (#2787)", "tree": {"sha": "26b63d182fbcf441d4859b25826862d3bf149224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b63d182fbcf441d4859b25826862d3bf149224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74f4b8d901cf16ef8dc601749108f4d79d7b53e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74f4b8d901cf16ef8dc601749108f4d79d7b53e0", "html_url": "https://github.com/rust-lang/rust/commit/74f4b8d901cf16ef8dc601749108f4d79d7b53e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74f4b8d901cf16ef8dc601749108f4d79d7b53e0/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d6d3d056592cf4d68afbce6084245ea6733865c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6d3d056592cf4d68afbce6084245ea6733865c", "html_url": "https://github.com/rust-lang/rust/commit/5d6d3d056592cf4d68afbce6084245ea6733865c"}], "stats": {"total": 85, "additions": 38, "deletions": 47}, "files": [{"sha": "4aed9a5e0611dd09ae26d9abb21d95f77753fcef", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74f4b8d901cf16ef8dc601749108f4d79d7b53e0/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/74f4b8d901cf16ef8dc601749108f4d79d7b53e0/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=74f4b8d901cf16ef8dc601749108f4d79d7b53e0", "patch": "@@ -208,7 +208,7 @@ rust_sched_loop::run_single_turn() {\n             return sched_loop_state_block;\n         }\n \n-        assert(scheduled_task->running());\n+        scheduled_task->assert_is_running();\n \n         DLOG(this, task,\n              \"activating task %s 0x%\" PRIxPTR"}, {"sha": "250e075d2f993ba726877768b6112516317cf99f", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 30, "deletions": 37, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/74f4b8d901cf16ef8dc601749108f4d79d7b53e0/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/74f4b8d901cf16ef8dc601749108f4d79d7b53e0/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=74f4b8d901cf16ef8dc601749108f4d79d7b53e0", "patch": "@@ -114,7 +114,7 @@ cleanup_task(cleanup_args *args) {\n     rust_task *task = a->task;\n \n     {\n-        scoped_lock with(task->kill_lock);\n+        scoped_lock with(task->lifecycle_lock);\n         if (task->killed && !threw_exception) {\n             LOG(task, task, \"Task killed during termination\");\n             threw_exception = true;\n@@ -230,21 +230,25 @@ void rust_task::start()\n \n bool\n rust_task::must_fail_from_being_killed() {\n-    scoped_lock with(kill_lock);\n+    scoped_lock with(lifecycle_lock);\n     return must_fail_from_being_killed_unlocked();\n }\n \n bool\n rust_task::must_fail_from_being_killed_unlocked() {\n-    kill_lock.must_have_lock();\n+    lifecycle_lock.must_have_lock();\n     return killed && !reentered_rust_stack && disallow_kill == 0;\n }\n \n // Only run this on the rust stack\n void\n rust_task::yield(bool *killed) {\n+    // FIXME (#2787): clean this up\n     if (must_fail_from_being_killed()) {\n-        assert(!blocked());\n+        {\n+            scoped_lock with(lifecycle_lock);\n+            assert(!(state == task_state_blocked));\n+        }\n         *killed = true;\n     }\n \n@@ -258,7 +262,7 @@ rust_task::yield(bool *killed) {\n \n void\n rust_task::kill() {\n-    scoped_lock with(kill_lock);\n+    scoped_lock with(lifecycle_lock);\n \n     // XXX: bblum: kill/kill race\n \n@@ -270,8 +274,9 @@ rust_task::kill() {\n     killed = true;\n     // Unblock the task so it can unwind.\n \n-    if (blocked() && must_fail_from_being_killed_unlocked()) {\n-        wakeup(cond);\n+    if (state == task_state_blocked &&\n+        must_fail_from_being_killed_unlocked()) {\n+        wakeup_locked(cond);\n     }\n \n     LOG(this, task, \"preparing to unwind task: 0x%\" PRIxPTR, this);\n@@ -335,34 +340,21 @@ rust_task::get_frame_glue_fns(uintptr_t fp) {\n     return *((frame_glue_fns**) fp);\n }\n \n-bool\n-rust_task::running()\n-{\n-    scoped_lock with(state_lock);\n-    return state == task_state_running;\n-}\n-\n-bool\n-rust_task::blocked()\n+void rust_task::assert_is_running()\n {\n-    scoped_lock with(state_lock);\n-    return state == task_state_blocked;\n+    scoped_lock with(lifecycle_lock);\n+    assert(state == task_state_running);\n }\n \n+// FIXME (#2851, #2787): This is only used by rust_port/rust_port selector,\n+// and is inherently racy. Get rid of it.\n bool\n rust_task::blocked_on(rust_cond *on)\n {\n-    scoped_lock with(state_lock);\n+    scoped_lock with(lifecycle_lock);\n     return cond == on;\n }\n \n-bool\n-rust_task::dead()\n-{\n-    scoped_lock with(state_lock);\n-    return state == task_state_dead;\n-}\n-\n void *\n rust_task::malloc(size_t sz, const char *tag, type_desc *td)\n {\n@@ -384,28 +376,28 @@ rust_task::free(void *p)\n void\n rust_task::transition(rust_task_state src, rust_task_state dst,\n                       rust_cond *cond, const char* cond_name) {\n-    scoped_lock with(state_lock);\n+    scoped_lock with(lifecycle_lock);\n     transition_locked(src, dst, cond, cond_name);\n }\n \n void rust_task::transition_locked(rust_task_state src, rust_task_state dst,\n                                   rust_cond *cond, const char* cond_name) {\n-    state_lock.must_have_lock();\n+    lifecycle_lock.must_have_lock();\n     sched_loop->transition(this, src, dst, cond, cond_name);\n }\n \n void\n rust_task::set_state(rust_task_state state,\n                      rust_cond *cond, const char* cond_name) {\n-    state_lock.must_have_lock();\n+    lifecycle_lock.must_have_lock();\n     this->state = state;\n     this->cond = cond;\n     this->cond_name = cond_name;\n }\n \n bool\n rust_task::block(rust_cond *on, const char* name) {\n-    scoped_lock with(kill_lock);\n+    scoped_lock with(lifecycle_lock);\n     return block_locked(on, name);\n }\n \n@@ -428,7 +420,7 @@ rust_task::block_locked(rust_cond *on, const char* name) {\n \n void\n rust_task::wakeup(rust_cond *from) {\n-    scoped_lock with(state_lock);\n+    scoped_lock with(lifecycle_lock);\n     wakeup_locked(from);\n }\n \n@@ -676,26 +668,27 @@ rust_task::on_rust_stack() {\n \n void\n rust_task::inhibit_kill() {\n-    scoped_lock with(kill_lock);\n+    scoped_lock with(lifecycle_lock);\n+    // FIXME (#1868) Check here if we have to die\n     disallow_kill++;\n }\n \n void\n rust_task::allow_kill() {\n-    scoped_lock with(kill_lock);\n+    scoped_lock with(lifecycle_lock);\n     assert(disallow_kill > 0 && \"Illegal allow_kill(): already killable!\");\n     disallow_kill--;\n }\n \n void *\n rust_task::wait_event(bool *killed) {\n-    scoped_lock with(state_lock);\n+    scoped_lock with(lifecycle_lock);\n \n     if(!event_reject) {\n         block_locked(&event_cond, \"waiting on event\");\n-        state_lock.unlock();\n+        lifecycle_lock.unlock();\n         yield(killed);\n-        state_lock.lock();\n+        lifecycle_lock.lock();\n     }\n \n     event_reject = false;\n@@ -704,7 +697,7 @@ rust_task::wait_event(bool *killed) {\n \n void\n rust_task::signal_event(void *event) {\n-    scoped_lock with(state_lock);\n+    scoped_lock with(lifecycle_lock);\n \n     this->event = event;\n     event_reject = true;"}, {"sha": "82896bf27b4e64b9a75d22a05cb76b1b6913e10b", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74f4b8d901cf16ef8dc601749108f4d79d7b53e0/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/74f4b8d901cf16ef8dc601749108f4d79d7b53e0/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=74f4b8d901cf16ef8dc601749108f4d79d7b53e0", "patch": "@@ -170,7 +170,8 @@ rust_task : public kernel_owned<rust_task>\n private:\n \n     // Protects state, cond, cond_name\n-    lock_and_signal state_lock;\n+    // Protects the killed flag, disallow_kill flag, reentered_rust_stack\n+    lock_and_signal lifecycle_lock;\n     rust_task_state state;\n     rust_cond *cond;\n     const char *cond_name;\n@@ -179,8 +180,6 @@ rust_task : public kernel_owned<rust_task>\n     rust_cond event_cond;\n     void *event;\n \n-    // Protects the killed flag, disallow_kill flag, reentered_rust_stack\n-    lock_and_signal kill_lock;\n     // Indicates that the task was killed and needs to unwind\n     bool killed;\n     // Indicates that we've called back into Rust from C\n@@ -243,10 +242,8 @@ rust_task : public kernel_owned<rust_task>\n                rust_opaque_box *env,\n                void *args);\n     void start();\n-    bool running();\n-    bool blocked();\n-    bool blocked_on(rust_cond *cond);\n-    bool dead();\n+    void assert_is_running();\n+    bool blocked_on(rust_cond *cond); // FIXME (#2851) Get rid of this.\n \n     void *malloc(size_t sz, const char *tag, type_desc *td=0);\n     void *realloc(void *data, size_t sz);\n@@ -438,7 +435,8 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n \n     bool had_reentered_rust_stack = reentered_rust_stack;\n     {\n-        scoped_lock with(kill_lock);\n+        // FIXME (#2787) This must be racy. Figure it out.\n+        scoped_lock with(lifecycle_lock);\n         reentered_rust_stack = true;\n     }\n \n@@ -453,7 +451,7 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n \n     next_c_sp = prev_c_sp;\n     {\n-        scoped_lock with(kill_lock);\n+        scoped_lock with(lifecycle_lock);\n         reentered_rust_stack = had_reentered_rust_stack;\n     }\n "}]}