{"sha": "1f9d846a5882dbdc4c599fa33e6256d2e37841a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOWQ4NDZhNTg4MmRiZGM0YzU5OWZhMzNlNjI1NmQyZTM3ODQxYTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-02-06T08:52:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:16Z"}, "message": "Add some documentation to pattern/const conversions", "tree": {"sha": "592dc37fdae6d276074c28fa0f465fb473448516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592dc37fdae6d276074c28fa0f465fb473448516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9d846a5882dbdc4c599fa33e6256d2e37841a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53gACgkQpp+NIls6\n19lXyA/7BZtQY0amRzuNgeyD/geL45s4SYxS+dFP6gmfqLUx6T8BQS9Y9jtv1dpu\nUqP5QdQVA/9ghDcVQ1mWZX3YyzoW4wjAU2aIlM4cY4Whm8cRfzrCTdwLt/zpsw5C\nl0tFN7/Zh8hSnkfy+evJsFjAQg4F2K1xxTsnmYEb4LSYDhOGBj5J6ICtAHuntVCg\nspmWU2v/4tQAxgI+UEQLxwaf9szlYDOIgAQ8KcK9PDrGH5g6IMcQsbFopUdKlhIO\njx8R2FT/0fVVqX2enYJK1HH09pLJyf/Uk5GCW78dOoJeMBoPpVS2bz7E7joTfl6b\nDf5eHQwVWSQiTvMf8s4C8/eRZa/uuL8rbbqTpSHpjn6wOX9sdZaWJ7HjxGwPu9Qz\n5ihb0XmIICrM0UPLlMngUzj1t98DfgjABmNaacZXxI/cr1s3t2dWd3qYHZlLKVAl\ndtdyB6zrtqksbZtdkCDj0ntvHfSspfBUhHb0/dmiaemn459JHm6xVGEGcmgcu0nI\nzj5K335CZjCJKrKkPe8hMH94M3lfs1qo776mt6pLTUXI0oJaGcKrT/5auKZMSZiD\nhRpFr3xG1ds62I9F5nGl0sfnXU8ax9kvJHmGo6WTP9wly8mGQA/WtyA0dg5Zp12F\n1DfFuVu7re9geuwgIltu2qQPTIB3GgEF3qKf8f9VywvvFmqVCdQ=\n=G/tz\n-----END PGP SIGNATURE-----", "payload": "tree 592dc37fdae6d276074c28fa0f465fb473448516\nparent b985399831b26e253e49e2e32fed1f657c8ca525\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517907176 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494456 +0100\n\nAdd some documentation to pattern/const conversions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9d846a5882dbdc4c599fa33e6256d2e37841a6", "html_url": "https://github.com/rust-lang/rust/commit/1f9d846a5882dbdc4c599fa33e6256d2e37841a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9d846a5882dbdc4c599fa33e6256d2e37841a6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b985399831b26e253e49e2e32fed1f657c8ca525", "url": "https://api.github.com/repos/rust-lang/rust/commits/b985399831b26e253e49e2e32fed1f657c8ca525", "html_url": "https://github.com/rust-lang/rust/commit/b985399831b26e253e49e2e32fed1f657c8ca525"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "072b28850f0cfe325496c57924db12c6a7858d5a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f9d846a5882dbdc4c599fa33e6256d2e37841a6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9d846a5882dbdc4c599fa33e6256d2e37841a6/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1f9d846a5882dbdc4c599fa33e6256d2e37841a6", "patch": "@@ -667,6 +667,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         }\n     }\n \n+    /// Takes a HIR Path. If the path is a constant, evaluates it and feeds\n+    /// it to `const_to_pat`. Any other path (like enum variants without fields)\n+    /// is converted to the corresponding pattern via `lower_variant_or_leaf`\n     fn lower_path(&mut self,\n                   qpath: &hir::QPath,\n                   id: hir::HirId,\n@@ -722,6 +725,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         }\n     }\n \n+    /// Converts literals, paths and negation of literals to patterns.\n+    /// The special case for negation exists to allow things like -128i8\n+    /// which would overflow if we tried to evaluate 128i8 and then negate\n+    /// afterwards.\n     fn lower_lit(&mut self, expr: &'tcx hir::Expr) -> PatternKind<'tcx> {\n         match expr.node {\n             hir::ExprLit(ref lit) => {\n@@ -767,6 +774,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         }\n     }\n \n+    /// Converts an evaluated constant to a pattern (if possible).\n+    /// This means aggregate values (like structs and enums) are converted\n+    /// to a pattern that matches the value (as if you'd compare via eq).\n     fn const_to_pat(\n         &self,\n         instance: ty::Instance<'tcx>,\n@@ -844,14 +854,14 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     },\n                     ConstVal::Unevaluated(..) =>\n                         span_bug!(span, \"{:#?} is not a valid enum constant\", cv),\n-                    }\n+                }\n             },\n             ty::TyAdt(adt_def, _) => {\n                 let struct_var = adt_def.non_enum_variant();\n                 PatternKind::Leaf {\n                     subpatterns: adt_subpatterns(struct_var.fields.len(), None),\n-                        }\n                 }\n+            }\n             ty::TyTuple(fields, _) => {\n                 PatternKind::Leaf {\n                     subpatterns: adt_subpatterns(fields.len(), None),"}]}