{"sha": "7c75fe4c8547c276574cacb144919d67fd8ab302", "node_id": "C_kwDOAAsO6NoAKDdjNzVmZTRjODU0N2MyNzY1NzRjYWNiMTQ0OTE5ZDY3ZmQ4YWIzMDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-17T07:42:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-17T07:42:27Z"}, "message": "Auto merge of #104170 - cjgillot:hir-def-id, r=fee1-dead\n\nRecord `LocalDefId` in HIR nodes instead of a side table\n\nThis is part of an attempt to remove the `HirId -> LocalDefId` table from HIR.\nThis attempt is a prerequisite to creation of `LocalDefId` after HIR lowering (https://github.com/rust-lang/rust/pull/96840), by controlling how `def_id` information is accessed.\n\nThis first part adds the information to HIR nodes themselves instead of a table.\nThe second part is https://github.com/rust-lang/rust/pull/103902\nThe third part will be to make `hir::Visitor::visit_fn` take a `LocalDefId` as last parameter.\nThe fourth part will be to completely remove the side table.", "tree": {"sha": "402e39583de6ba02374087e2db67f01dc9e52d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/402e39583de6ba02374087e2db67f01dc9e52d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c75fe4c8547c276574cacb144919d67fd8ab302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c75fe4c8547c276574cacb144919d67fd8ab302", "html_url": "https://github.com/rust-lang/rust/commit/7c75fe4c8547c276574cacb144919d67fd8ab302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c75fe4c8547c276574cacb144919d67fd8ab302/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9340e5c1b9dee53fd32a18f7bfb54faabfe00b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9340e5c1b9dee53fd32a18f7bfb54faabfe00b7b", "html_url": "https://github.com/rust-lang/rust/commit/9340e5c1b9dee53fd32a18f7bfb54faabfe00b7b"}, {"sha": "df5c11a069fbee34c3d2cae8b7b9c8e026b63d39", "url": "https://api.github.com/repos/rust-lang/rust/commits/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39", "html_url": "https://github.com/rust-lang/rust/commit/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39"}], "stats": {"total": 998, "additions": 449, "deletions": 549}, "files": [{"sha": "eb64027f369ebb104ebf9fb0e76ca073d90d40da", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -643,6 +643,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `static |_task_context| -> <ret_ty> { body }`:\n         let generator_kind = {\n             let c = self.arena.alloc(hir::Closure {\n+                def_id: self.local_def_id(closure_node_id),\n                 binder: hir::ClosureBinder::Default,\n                 capture_clause,\n                 bound_generic_params: &[],\n@@ -895,6 +896,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let fn_decl = self.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n+            def_id: self.local_def_id(closure_id),\n             binder: binder_clause,\n             capture_clause,\n             bound_generic_params,\n@@ -999,6 +1001,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n+            def_id: self.local_def_id(closure_id),\n             binder: binder_clause,\n             capture_clause,\n             bound_generic_params,"}, {"sha": "3a0e5f55ec1e48b3422242b3e240e65ad8fd3941", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -307,8 +307,8 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_variant(&mut self, v: &'hir Variant<'hir>) {\n-        self.insert(v.span, v.id, Node::Variant(v));\n-        self.with_parent(v.id, |this| {\n+        self.insert(v.span, v.hir_id, Node::Variant(v));\n+        self.with_parent(v.hir_id, |this| {\n             // Register the constructor of this variant.\n             if let Some(ctor_hir_id) = v.data.ctor_hir_id() {\n                 this.insert(v.span, ctor_hir_id, Node::Ctor(&v.data));"}, {"sha": "756f35e901d9d204dc0477cbb498c6862c345e6d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -709,11 +709,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant<'hir> {\n-        let id = self.lower_node_id(v.id);\n-        self.lower_attrs(id, &v.attrs);\n+        let hir_id = self.lower_node_id(v.id);\n+        self.lower_attrs(hir_id, &v.attrs);\n         hir::Variant {\n-            id,\n-            data: self.lower_variant_data(id, &v.data),\n+            hir_id,\n+            def_id: self.local_def_id(v.id),\n+            data: self.lower_variant_data(hir_id, &v.data),\n             disr_expr: v.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n             ident: self.lower_ident(v.ident),\n             span: self.lower_span(v.span),\n@@ -739,12 +740,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         fields.iter().enumerate().map(|f| self.lower_field_def(f)),\n                     ),\n                     ctor_id,\n+                    self.local_def_id(id),\n                 )\n             }\n             VariantData::Unit(id) => {\n                 let ctor_id = self.lower_node_id(id);\n                 self.alias_attrs(ctor_id, parent_id);\n-                hir::VariantData::Unit(ctor_id)\n+                hir::VariantData::Unit(ctor_id, self.local_def_id(id))\n             }\n         }\n     }\n@@ -767,6 +769,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::FieldDef {\n             span: self.lower_span(f.span),\n             hir_id,\n+            def_id: self.local_def_id(f.id),\n             ident: match f.ident {\n                 Some(ident) => self.lower_ident(ident),\n                 // FIXME(jseyfried): positional field hygiene."}, {"sha": "5ab75b1294b76908c3cbc5c4b86b3fa17bb0b2eb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -830,8 +830,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             ),\n         };\n         let hir_id = self.lower_node_id(node_id);\n+        let def_id = self.local_def_id(node_id);\n         Some(hir::GenericParam {\n             hir_id,\n+            def_id,\n             name,\n             span: self.lower_span(ident.span),\n             pure_wrt_drop: false,\n@@ -1165,7 +1167,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 let node_id = self.next_node_id();\n \n                                 // Add a definition for the in-band const def.\n-                                self.create_def(\n+                                let def_id = self.create_def(\n                                     parent_def_id.def_id,\n                                     node_id,\n                                     DefPathData::AnonConst,\n@@ -1181,6 +1183,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 };\n \n                                 let ct = self.with_new_scopes(|this| hir::AnonConst {\n+                                    def_id,\n                                     hir_id: this.lower_node_id(node_id),\n                                     body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n                                 });\n@@ -1528,6 +1531,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                         hir::GenericParam {\n                             hir_id,\n+                            def_id: lctx.local_def_id(new_node_id),\n                             name,\n                             span: lifetime.ident.span,\n                             pure_wrt_drop: false,\n@@ -1985,6 +1989,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                         hir::GenericParam {\n                             hir_id,\n+                            def_id: this.local_def_id(new_node_id),\n                             name,\n                             span: lifetime.ident.span,\n                             pure_wrt_drop: false,\n@@ -2183,6 +2188,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.lower_attrs(hir_id, &param.attrs);\n         hir::GenericParam {\n             hir_id,\n+            def_id: self.local_def_id(param.id),\n             name,\n             span: self.lower_span(param.span()),\n             pure_wrt_drop: self.tcx.sess.contains_name(&param.attrs, sym::may_dangle),\n@@ -2287,6 +2293,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // Set the name to `impl Bound1 + Bound2`.\n         let param = hir::GenericParam {\n             hir_id: self.lower_node_id(node_id),\n+            def_id,\n             name: ParamName::Plain(self.lower_ident(ident)),\n             pure_wrt_drop: false,\n             span: self.lower_span(span),\n@@ -2347,6 +2354,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n         self.with_new_scopes(|this| hir::AnonConst {\n+            def_id: this.local_def_id(c.id),\n             hir_id: this.lower_node_id(c.id),\n             body: this.lower_const_body(c.value.span, Some(&c.value)),\n         })"}, {"sha": "62c6f9581373edd69ff70e5236cec85ee6c15fc6", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -42,8 +42,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             user_provided_sig = None;\n         } else {\n             let typeck_results = self.tcx().typeck(mir_def_id);\n-            user_provided_sig = typeck_results.user_provided_sigs.get(&mir_def_id.to_def_id()).map(\n-                |user_provided_poly_sig| {\n+            user_provided_sig =\n+                typeck_results.user_provided_sigs.get(&mir_def_id).map(|user_provided_poly_sig| {\n                     // Instantiate the canonicalized variables from\n                     // user-provided signature (e.g., the `_` in the code\n                     // above) with fresh variables.\n@@ -60,8 +60,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         LateBoundRegionConversionTime::FnCall,\n                         poly_sig,\n                     )\n-                },\n-            );\n+                });\n         }\n \n         debug!(?normalized_input_tys, ?body.local_decls);"}, {"sha": "27da33581a1a9d33b2d64db12e13addb63bdc391", "filename": "compiler/rustc_codegen_ssa/src/mono_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -40,12 +40,12 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n                         .iter()\n                         .map(|(op, op_sp)| match *op {\n                             hir::InlineAsmOperand::Const { ref anon_const } => {\n-                                let anon_const_def_id =\n-                                    cx.tcx().hir().local_def_id(anon_const.hir_id).to_def_id();\n-                                let const_value =\n-                                    cx.tcx().const_eval_poly(anon_const_def_id).unwrap_or_else(\n-                                        |_| span_bug!(*op_sp, \"asm const cannot be resolved\"),\n-                                    );\n+                                let const_value = cx\n+                                    .tcx()\n+                                    .const_eval_poly(anon_const.def_id.to_def_id())\n+                                    .unwrap_or_else(|_| {\n+                                        span_bug!(*op_sp, \"asm const cannot be resolved\")\n+                                    });\n                                 let ty = cx\n                                     .tcx()\n                                     .typeck_body(anon_const.body)"}, {"sha": "7d8b859a6b4077a76edb6330f132624b832b8f65", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -487,6 +487,7 @@ pub enum GenericParamKind<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub struct GenericParam<'hir> {\n     pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub name: ParamName,\n     pub span: Span,\n     pub pure_wrt_drop: bool,\n@@ -921,6 +922,7 @@ pub struct Crate<'hir> {\n \n #[derive(Debug, HashStable_Generic)]\n pub struct Closure<'hir> {\n+    pub def_id: LocalDefId,\n     pub binder: ClosureBinder,\n     pub capture_clause: CaptureBy,\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n@@ -1615,7 +1617,7 @@ pub enum ArrayLen {\n impl ArrayLen {\n     pub fn hir_id(&self) -> HirId {\n         match self {\n-            &ArrayLen::Infer(hir_id, _) | &ArrayLen::Body(AnonConst { hir_id, body: _ }) => hir_id,\n+            &ArrayLen::Infer(hir_id, _) | &ArrayLen::Body(AnonConst { hir_id, .. }) => hir_id,\n         }\n     }\n }\n@@ -1627,10 +1629,11 @@ impl ArrayLen {\n /// explicit discriminant values for enum variants.\n ///\n /// You can check if this anon const is a default in a const param\n-/// `const N: usize = { ... }` with `tcx.hir().opt_const_param_default_param_hir_id(..)`\n+/// `const N: usize = { ... }` with `tcx.hir().opt_const_param_default_param_def_id(..)`\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n pub struct AnonConst {\n     pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub body: BodyId,\n }\n \n@@ -2798,7 +2801,8 @@ pub struct Variant<'hir> {\n     /// Name of the variant.\n     pub ident: Ident,\n     /// Id of the variant (not the constructor, see `VariantData::ctor_hir_id()`).\n-    pub id: HirId,\n+    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     /// Fields and constructor id of the variant.\n     pub data: VariantData<'hir>,\n     /// Explicit discriminant (e.g., `Foo = 1`).\n@@ -2865,6 +2869,7 @@ pub struct FieldDef<'hir> {\n     pub vis_span: Span,\n     pub ident: Ident,\n     pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub ty: &'hir Ty<'hir>,\n }\n \n@@ -2886,11 +2891,11 @@ pub enum VariantData<'hir> {\n     /// A tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n-    Tuple(&'hir [FieldDef<'hir>], HirId),\n+    Tuple(&'hir [FieldDef<'hir>], HirId, LocalDefId),\n     /// A unit variant.\n     ///\n     /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.\n-    Unit(HirId),\n+    Unit(HirId, LocalDefId),\n }\n \n impl<'hir> VariantData<'hir> {\n@@ -2902,11 +2907,19 @@ impl<'hir> VariantData<'hir> {\n         }\n     }\n \n+    /// Return the `LocalDefId` of this variant's constructor, if it has one.\n+    pub fn ctor_def_id(&self) -> Option<LocalDefId> {\n+        match *self {\n+            VariantData::Struct(_, _) => None,\n+            VariantData::Tuple(_, _, def_id) | VariantData::Unit(_, def_id) => Some(def_id),\n+        }\n+    }\n+\n     /// Return the `HirId` of this variant's constructor, if it has one.\n     pub fn ctor_hir_id(&self) -> Option<HirId> {\n         match *self {\n             VariantData::Struct(_, _) => None,\n-            VariantData::Tuple(_, hir_id) | VariantData::Unit(hir_id) => Some(hir_id),\n+            VariantData::Tuple(_, hir_id, _) | VariantData::Unit(hir_id, _) => Some(hir_id),\n         }\n     }\n }\n@@ -3532,7 +3545,7 @@ impl<'hir> Node<'hir> {\n     /// Get the fields for the tuple-constructor,\n     /// if this node is a tuple constructor, otherwise None\n     pub fn tuple_fields(&self) -> Option<&'hir [FieldDef<'hir>]> {\n-        if let Node::Ctor(&VariantData::Tuple(fields, _)) = self { Some(fields) } else { None }\n+        if let Node::Ctor(&VariantData::Tuple(fields, _, _)) = self { Some(fields) } else { None }\n     }\n }\n \n@@ -3548,7 +3561,7 @@ mod size_asserts {\n     static_assert_size!(FnDecl<'_>, 40);\n     static_assert_size!(ForeignItem<'_>, 72);\n     static_assert_size!(ForeignItemKind<'_>, 40);\n-    static_assert_size!(GenericArg<'_>, 24);\n+    static_assert_size!(GenericArg<'_>, 32);\n     static_assert_size!(GenericBound<'_>, 48);\n     static_assert_size!(Generics<'_>, 56);\n     static_assert_size!(Impl<'_>, 80);"}, {"sha": "48db93fde9d4c8b82c3e89128d9ddad00ca2107f", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -733,6 +733,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_arm, arms);\n         }\n         ExprKind::Closure(&Closure {\n+            def_id: _,\n             binder: _,\n             bound_generic_params,\n             fn_decl,\n@@ -1084,7 +1085,7 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(\n \n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V, variant: &'v Variant<'v>) {\n     visitor.visit_ident(variant.ident);\n-    visitor.visit_id(variant.id);\n+    visitor.visit_id(variant.hir_id);\n     visitor.visit_variant_data(&variant.data);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n }"}, {"sha": "16c40cf1299cb7f5edbd0b4129622c23d5d859bb", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -432,7 +432,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         ty::Const::from_opt_const_arg_anon_const(\n                             tcx,\n                             ty::WithOptConstParam {\n-                                did: tcx.hir().local_def_id(ct.value.hir_id),\n+                                did: ct.value.def_id,\n                                 const_param_did: Some(param.def_id),\n                             },\n                         )\n@@ -570,8 +570,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             ConvertedBindingKind::Equality(self.ast_ty_to_ty(ty).into())\n                         }\n                         hir::Term::Const(ref c) => {\n-                            let local_did = self.tcx().hir().local_def_id(c.hir_id);\n-                            let c = Const::from_anon_const(self.tcx(), local_did);\n+                            let c = Const::from_anon_const(self.tcx(), c.def_id);\n                             ConvertedBindingKind::Equality(c.into())\n                         }\n                     },\n@@ -856,7 +855,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         bounds: &mut Bounds<'hir>,\n         ast_bounds: &'hir [hir::GenericBound<'hir>],\n-        self_ty_where_predicates: Option<(hir::HirId, &'hir [hir::WherePredicate<'hir>])>,\n+        self_ty_where_predicates: Option<(LocalDefId, &'hir [hir::WherePredicate<'hir>])>,\n         span: Span,\n     ) {\n         let tcx = self.tcx();\n@@ -876,10 +875,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n         search_bounds(ast_bounds);\n         if let Some((self_ty, where_clause)) = self_ty_where_predicates {\n-            let self_ty_def_id = tcx.hir().local_def_id(self_ty).to_def_id();\n             for clause in where_clause {\n                 if let hir::WherePredicate::BoundPredicate(pred) = clause {\n-                    if pred.is_param_bound(self_ty_def_id) {\n+                    if pred.is_param_bound(self_ty.to_def_id()) {\n                         search_bounds(pred.bounds);\n                     }\n                 }\n@@ -2722,16 +2720,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let length = match length {\n                     &hir::ArrayLen::Infer(_, span) => self.ct_infer(tcx.types.usize, None, span),\n                     hir::ArrayLen::Body(constant) => {\n-                        let length_def_id = tcx.hir().local_def_id(constant.hir_id);\n-                        ty::Const::from_anon_const(tcx, length_def_id)\n+                        ty::Const::from_anon_const(tcx, constant.def_id)\n                     }\n                 };\n \n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }\n             hir::TyKind::Typeof(ref e) => {\n-                let ty_erased = tcx.type_of(tcx.hir().local_def_id(e.hir_id));\n+                let ty_erased = tcx.type_of(e.def_id);\n                 let ty = tcx.fold_regions(ty_erased, |r, _| {\n                     if r.is_erased() { tcx.lifetimes.re_static } else { r }\n                 });"}, {"sha": "efb34e4ff65924bc92746c854ad7e16d12b1fdd4", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -853,7 +853,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n \n         // Const parameters are well formed if their type is structural match.\n         hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n-            let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n+            let ty = tcx.type_of(param.def_id);\n \n             if tcx.features().adt_const_params {\n                 if let Some(non_structural_match_ty) ="}, {"sha": "2f64a88f03afee960de39d40c1ecdab032e55fd3", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -291,18 +291,15 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n                 hir::GenericParamKind::Type { default: Some(_), .. } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.hir_id);\n-                    self.tcx.ensure().type_of(def_id);\n+                    self.tcx.ensure().type_of(param.def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n                 hir::GenericParamKind::Const { default, .. } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.hir_id);\n-                    self.tcx.ensure().type_of(def_id);\n+                    self.tcx.ensure().type_of(param.def_id);\n                     if let Some(default) = default {\n-                        let default_def_id = self.tcx.hir().local_def_id(default.hir_id);\n                         // need to store default and type of default\n-                        self.tcx.ensure().type_of(default_def_id);\n-                        self.tcx.ensure().const_param_default(def_id);\n+                        self.tcx.ensure().type_of(default.def_id);\n+                        self.tcx.ensure().const_param_default(param.def_id);\n                     }\n                 }\n             }\n@@ -311,9 +308,9 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure { .. } = expr.kind {\n-            let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-            self.tcx.ensure().generics_of(def_id);\n+        if let hir::ExprKind::Closure(closure) = expr.kind {\n+            self.tcx.ensure().generics_of(closure.def_id);\n+            self.tcx.ensure().codegen_fn_attrs(closure.def_id);\n             // We do not call `type_of` for closures here as that\n             // depends on typecheck and would therefore hide\n             // any further errors in case one typeck fails.\n@@ -586,8 +583,12 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                 tcx.ensure().type_of(item.owner_id);\n                 tcx.ensure().predicates_of(item.owner_id);\n                 match item.kind {\n-                    hir::ForeignItemKind::Fn(..) => tcx.ensure().fn_sig(item.owner_id),\n+                    hir::ForeignItemKind::Fn(..) => {\n+                        tcx.ensure().codegen_fn_attrs(item.owner_id);\n+                        tcx.ensure().fn_sig(item.owner_id)\n+                    }\n                     hir::ForeignItemKind::Static(..) => {\n+                        tcx.ensure().codegen_fn_attrs(item.owner_id);\n                         let mut visitor = HirPlaceholderCollector::default();\n                         visitor.visit_foreign_item(item);\n                         placeholder_type_error(\n@@ -632,14 +633,12 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n             tcx.ensure().predicates_of(def_id);\n \n             for f in struct_def.fields() {\n-                let def_id = tcx.hir().local_def_id(f.hir_id);\n-                tcx.ensure().generics_of(def_id);\n-                tcx.ensure().type_of(def_id);\n-                tcx.ensure().predicates_of(def_id);\n+                tcx.ensure().generics_of(f.def_id);\n+                tcx.ensure().type_of(f.def_id);\n+                tcx.ensure().predicates_of(f.def_id);\n             }\n \n-            if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {\n-                let ctor_def_id = tcx.hir().local_def_id(ctor_hir_id);\n+            if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n                 convert_variant_ctor(tcx, ctor_def_id);\n             }\n         }\n@@ -676,6 +675,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n             tcx.ensure().type_of(def_id);\n             tcx.ensure().predicates_of(def_id);\n             tcx.ensure().fn_sig(def_id);\n+            tcx.ensure().codegen_fn_attrs(def_id);\n         }\n     }\n }\n@@ -687,6 +687,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n \n     match trait_item.kind {\n         hir::TraitItemKind::Fn(..) => {\n+            tcx.ensure().codegen_fn_attrs(def_id);\n             tcx.ensure().type_of(def_id);\n             tcx.ensure().fn_sig(def_id);\n         }\n@@ -736,6 +737,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n     let impl_item = tcx.hir().impl_item(impl_item_id);\n     match impl_item.kind {\n         hir::ImplItemKind::Fn(..) => {\n+            tcx.ensure().codegen_fn_attrs(def_id);\n             tcx.ensure().fn_sig(def_id);\n         }\n         hir::ImplItemKind::Type(_) => {\n@@ -813,7 +815,6 @@ fn convert_variant(\n         .fields()\n         .iter()\n         .map(|f| {\n-            let fid = tcx.hir().local_def_id(f.hir_id);\n             let dup_span = seen_fields.get(&f.ident.normalize_to_macros_2_0()).cloned();\n             if let Some(prev_span) = dup_span {\n                 tcx.sess.emit_err(errors::FieldAlreadyDeclared {\n@@ -825,7 +826,11 @@ fn convert_variant(\n                 seen_fields.insert(f.ident.normalize_to_macros_2_0(), f.span);\n             }\n \n-            ty::FieldDef { did: fid.to_def_id(), name: f.ident.name, vis: tcx.visibility(fid) }\n+            ty::FieldDef {\n+                did: f.def_id.to_def_id(),\n+                name: f.ident.name,\n+                vis: tcx.visibility(f.def_id),\n+            }\n         })\n         .collect();\n     let recovered = match def {\n@@ -866,22 +871,18 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n                 .variants\n                 .iter()\n                 .map(|v| {\n-                    let variant_did = Some(tcx.hir().local_def_id(v.id));\n-                    let ctor_did =\n-                        v.data.ctor_hir_id().map(|hir_id| tcx.hir().local_def_id(hir_id));\n-\n                     let discr = if let Some(ref e) = v.disr_expr {\n                         distance_from_explicit = 0;\n-                        ty::VariantDiscr::Explicit(tcx.hir().local_def_id(e.hir_id).to_def_id())\n+                        ty::VariantDiscr::Explicit(e.def_id.to_def_id())\n                     } else {\n                         ty::VariantDiscr::Relative(distance_from_explicit)\n                     };\n                     distance_from_explicit += 1;\n \n                     convert_variant(\n                         tcx,\n-                        variant_did,\n-                        ctor_did,\n+                        Some(v.def_id),\n+                        v.data.ctor_def_id(),\n                         v.ident,\n                         discr,\n                         &v.data,\n@@ -894,13 +895,10 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n             (AdtKind::Enum, variants)\n         }\n         ItemKind::Struct(ref def, _) => {\n-            let variant_did = None::<LocalDefId>;\n-            let ctor_did = def.ctor_hir_id().map(|hir_id| tcx.hir().local_def_id(hir_id));\n-\n             let variants = std::iter::once(convert_variant(\n                 tcx,\n-                variant_did,\n-                ctor_did,\n+                None,\n+                def.ctor_def_id(),\n                 item.ident,\n                 ty::VariantDiscr::Relative(0),\n                 def,\n@@ -912,13 +910,10 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n             (AdtKind::Struct, variants)\n         }\n         ItemKind::Union(ref def, _) => {\n-            let variant_did = None;\n-            let ctor_did = def.ctor_hir_id().map(|hir_id| tcx.hir().local_def_id(hir_id));\n-\n             let variants = std::iter::once(convert_variant(\n                 tcx,\n-                variant_did,\n-                ctor_did,\n+                None,\n+                def.ctor_def_id(),\n                 item.ident,\n                 ty::VariantDiscr::Relative(0),\n                 def,\n@@ -1178,8 +1173,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n             let ty = tcx.type_of(tcx.hir().get_parent_item(hir_id));\n-            let inputs =\n-                data.fields().iter().map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n+            let inputs = data.fields().iter().map(|f| tcx.type_of(f.def_id));\n             ty::Binder::dummy(tcx.mk_fn_sig(\n                 inputs,\n                 ty,"}, {"sha": "b369a1eb109c7e49ceb3cbadeaeb066d66d5283e", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -51,7 +51,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n-                if let Some(param_id) = tcx.hir().opt_const_param_default_param_hir_id(hir_id) {\n+                if let Some(param_id) = tcx.hir().opt_const_param_default_param_def_id(hir_id) {\n                     // If the def_id we are calling generics_of on is an anon ct default i.e:\n                     //\n                     // struct Foo<const N: usize = { .. }>;\n@@ -77,8 +77,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     // This has some implications for how we get the predicates available to the anon const\n                     // see `explicit_predicates_of` for more information on this\n                     let generics = tcx.generics_of(parent_def_id.to_def_id());\n-                    let param_def = tcx.hir().local_def_id(param_id).to_def_id();\n-                    let param_def_idx = generics.param_def_id_to_index[&param_def];\n+                    let param_def_idx = generics.param_def_id_to_index[&param_id.to_def_id()];\n                     // In the above example this would be .params[..N#0]\n                     let params = generics.params[..param_def_idx as usize].to_owned();\n                     let param_def_id_to_index =\n@@ -241,7 +240,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     params.extend(early_lifetimes.enumerate().map(|(i, param)| ty::GenericParamDef {\n         name: param.name.ident().name,\n         index: own_start + i as u32,\n-        def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n+        def_id: param.def_id.to_def_id(),\n         pure_wrt_drop: param.pure_wrt_drop,\n         kind: ty::GenericParamDefKind::Lifetime,\n     }));\n@@ -286,7 +285,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(ty::GenericParamDef {\n                 index: next_index(),\n                 name: param.name.ident().name,\n-                def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n+                def_id: param.def_id.to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind,\n             })\n@@ -303,7 +302,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(ty::GenericParamDef {\n                 index: next_index(),\n                 name: param.name.ident().name,\n-                def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n+                def_id: param.def_id.to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Const { has_default: default.is_some() },\n             })"}, {"sha": "ce5cde5b88335460504f2af11fa0a26c6c91326b", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeName, Node};\n use rustc_middle::bug;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n@@ -25,30 +24,28 @@ use rustc_span::Span;\n use std::fmt;\n \n trait RegionExt {\n-    fn early(hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region);\n+    fn early(param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n-    fn late(index: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region);\n+    fn late(index: u32, param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n     fn id(&self) -> Option<DefId>;\n \n     fn shifted(self, amount: u32) -> Region;\n }\n \n impl RegionExt for Region {\n-    fn early(hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region) {\n-        let def_id = hir_map.local_def_id(param.hir_id);\n-        debug!(\"Region::early: def_id={:?}\", def_id);\n-        (def_id, Region::EarlyBound(def_id.to_def_id()))\n+    fn early(param: &GenericParam<'_>) -> (LocalDefId, Region) {\n+        debug!(\"Region::early: def_id={:?}\", param.def_id);\n+        (param.def_id, Region::EarlyBound(param.def_id.to_def_id()))\n     }\n \n-    fn late(idx: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region) {\n+    fn late(idx: u32, param: &GenericParam<'_>) -> (LocalDefId, Region) {\n         let depth = ty::INNERMOST;\n-        let def_id = hir_map.local_def_id(param.hir_id);\n         debug!(\n             \"Region::late: idx={:?}, param={:?} depth={:?} def_id={:?}\",\n-            idx, param, depth, def_id,\n+            idx, param, depth, param.def_id,\n         );\n-        (def_id, Region::LateBound(depth, idx, def_id.to_def_id()))\n+        (param.def_id, Region::LateBound(depth, idx, param.def_id.to_def_id()))\n     }\n \n     fn id(&self) -> Option<DefId> {\n@@ -395,7 +392,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n                     .enumerate()\n                     .map(|(late_bound_idx, param)| {\n-                        let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n+                        let pair = Region::late(late_bound_idx as u32, param);\n                         let r = late_region_as_bound_region(self.tcx, &pair.1);\n                         (pair, r)\n                     })\n@@ -492,7 +489,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 for param in generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n-                            let (def_id, reg) = Region::early(self.tcx.hir(), &param);\n+                            let (def_id, reg) = Region::early(&param);\n                             lifetimes.insert(def_id, reg);\n                         }\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {}\n@@ -523,9 +520,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(self.tcx.hir(), param))\n-                        }\n+                        GenericParamKind::Lifetime { .. } => Some(Region::early(param)),\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n                     })\n                     .collect();\n@@ -573,7 +568,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n                     .enumerate()\n                     .map(|(late_bound_idx, param)| {\n-                        let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n+                        let pair = Region::late(late_bound_idx as u32, param);\n                         let r = late_region_as_bound_region(self.tcx, &pair.1);\n                         (pair, r)\n                     })\n@@ -731,9 +726,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(self.tcx.hir(), param))\n-                        }\n+                        GenericParamKind::Lifetime { .. } => Some(Region::early(param)),\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n                     })\n                     .collect();\n@@ -779,9 +772,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(self.tcx.hir(), param))\n-                        }\n+                        GenericParamKind::Lifetime { .. } => Some(Region::early(param)),\n                         GenericParamKind::Const { .. } | GenericParamKind::Type { .. } => None,\n                     })\n                     .collect();\n@@ -886,7 +877,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 })\n                                 .enumerate()\n                                 .map(|(late_bound_idx, param)| {\n-                                        Region::late(late_bound_idx as u32, this.tcx.hir(), param)\n+                                        Region::late(late_bound_idx as u32, param)\n                                 })\n                                 .collect();\n                         let binders: Vec<_> =\n@@ -999,8 +990,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n-                let pair =\n-                    Region::late(initial_bound_vars + late_bound_idx as u32, self.tcx.hir(), param);\n+                let pair = Region::late(initial_bound_vars + late_bound_idx as u32, param);\n                 let r = late_region_as_bound_region(self.tcx, &pair.1);\n                 lifetimes.insert(pair.0, pair.1);\n                 r\n@@ -1131,9 +1121,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     if self.tcx.is_late_bound(param.hir_id) {\n                         let late_bound_idx = named_late_bound_vars;\n                         named_late_bound_vars += 1;\n-                        Some(Region::late(late_bound_idx, self.tcx.hir(), param))\n+                        Some(Region::late(late_bound_idx, param))\n                     } else {\n-                        Some(Region::early(self.tcx.hir(), param))\n+                        Some(Region::early(param))\n                     }\n                 }\n                 GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n@@ -1149,7 +1139,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             })\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n-                let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n+                let pair = Region::late(late_bound_idx as u32, param);\n                 late_region_as_bound_region(self.tcx, &pair.1)\n             })\n             .collect();"}, {"sha": "e2da580de0c664ea885410952eb7571beacfcf07", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -199,7 +199,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     &icx,\n                     &mut bounds,\n                     &[],\n-                    Some((param.hir_id, ast_generics.predicates)),\n+                    Some((param.def_id, ast_generics.predicates)),\n                     param.span,\n                 );\n                 trace!(?bounds);\n@@ -316,10 +316,9 @@ fn const_evaluatable_predicates_of<'tcx>(\n \n     impl<'tcx> intravisit::Visitor<'tcx> for ConstCollector<'tcx> {\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n-            let def_id = self.tcx.hir().local_def_id(c.hir_id);\n-            let ct = ty::Const::from_anon_const(self.tcx, def_id);\n+            let ct = ty::Const::from_anon_const(self.tcx, c.def_id);\n             if let ty::ConstKind::Unevaluated(_) = ct.kind() {\n-                let span = self.tcx.hir().span(c.hir_id);\n+                let span = self.tcx.def_span(c.def_id);\n                 self.preds.insert((\n                     ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ct))\n                         .to_predicate(self.tcx),\n@@ -429,7 +428,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n             let parent_def_id = tcx.hir().get_parent_item(hir_id);\n \n-            if tcx.hir().opt_const_param_default_param_hir_id(hir_id).is_some() {\n+            if tcx.hir().opt_const_param_default_param_def_id(hir_id).is_some() {\n                 // In `generics_of` we set the generics' parent to be our parent's parent which means that\n                 // we lose out on the predicates of our actual parent if we dont return those predicates here.\n                 // (See comment in `generics_of` for more information on why the parent shenanigans is necessary)\n@@ -531,7 +530,7 @@ pub(super) fn super_predicates_that_define_assoc_type(\n         let is_trait_alias = tcx.is_trait_alias(trait_def_id);\n         let superbounds2 = icx.type_parameter_bounds_in_generics(\n             generics,\n-            item.hir_id(),\n+            item.owner_id.def_id,\n             self_param_ty,\n             OnlySelfBounds(!is_trait_alias),\n             assoc_name,\n@@ -641,7 +640,7 @@ pub(super) fn type_param_predicates(\n     let extra_predicates = extend.into_iter().chain(\n         icx.type_parameter_bounds_in_generics(\n             ast_generics,\n-            param_id,\n+            def_id,\n             ty,\n             OnlySelfBounds(true),\n             Some(assoc_name),\n@@ -666,13 +665,11 @@ impl<'tcx> ItemCtxt<'tcx> {\n     fn type_parameter_bounds_in_generics(\n         &self,\n         ast_generics: &'tcx hir::Generics<'tcx>,\n-        param_id: hir::HirId,\n+        param_def_id: LocalDefId,\n         ty: Ty<'tcx>,\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n-        trace!(?param_def_id);\n         ast_generics\n             .predicates\n             .iter()\n@@ -681,7 +678,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n                 _ => None,\n             })\n             .flat_map(|bp| {\n-                let bt = if bp.is_param_bound(param_def_id) {\n+                let bt = if bp.is_param_bound(param_def_id.to_def_id()) {\n                     Some(ty)\n                 } else if !only_self_bounds.0 {\n                     Some(self.to_ty(bp.bounded_ty))"}, {"sha": "9bd1715ce39ffe21fe413a4bb0dee0c95b30e890", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -514,10 +514,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n \n                 Node::GenericParam(&GenericParam {\n-                    hir_id: param_hir_id,\n+                    def_id: param_def_id,\n                     kind: GenericParamKind::Const { default: Some(ct), .. },\n                     ..\n-                }) if ct.hir_id == hir_id => tcx.type_of(tcx.hir().local_def_id(param_hir_id)),\n+                }) if ct.hir_id == hir_id => tcx.type_of(param_def_id),\n \n                 x => tcx.ty_error_with_message(\n                     DUMMY_SP,\n@@ -636,9 +636,8 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n             self.tcx.hir()\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n-            if let hir::ExprKind::Closure { .. } = ex.kind {\n-                let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n-                self.check(def_id);\n+            if let hir::ExprKind::Closure(closure) = ex.kind {\n+                self.check(closure.def_id);\n             }\n             intravisit::walk_expr(self, ex);\n         }\n@@ -771,9 +770,8 @@ fn find_opaque_ty_constraints_for_rpit(\n             self.tcx.hir()\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n-            if let hir::ExprKind::Closure { .. } = ex.kind {\n-                let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n-                self.check(def_id);\n+            if let hir::ExprKind::Closure(closure) = ex.kind {\n+                self.check(closure.def_id);\n             }\n             intravisit::walk_expr(self, ex);\n         }"}, {"sha": "ea0c2a20de33ec2cb59d26e6ca1822f2b8740298", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -22,7 +22,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n \n     if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n     {\n-        if tcx.hir().opt_const_param_default_param_hir_id(id).is_some() {\n+        if tcx.hir().opt_const_param_default_param_def_id(id).is_some() {\n             // In `generics_of` we set the generics' parent to be our parent's parent which means that\n             // we lose out on the predicates of our actual parent if we dont return those predicates here.\n             // (See comment in `generics_of` for more information on why the parent shenanigans is necessary)"}, {"sha": "d70ec94f5b61ff5a53e151b915493b191c3867f1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -754,7 +754,7 @@ impl<'a> State<'a> {\n         for v in variants {\n             self.space_if_not_bol();\n             self.maybe_print_comment(v.span.lo());\n-            self.print_outer_attributes(self.attrs(v.id));\n+            self.print_outer_attributes(self.attrs(v.hir_id));\n             self.ibox(INDENT_UNIT);\n             self.print_variant(v);\n             self.word(\",\");\n@@ -1481,6 +1481,7 @@ impl<'a> State<'a> {\n                 body,\n                 fn_decl_span: _,\n                 movability: _,\n+                def_id: _,\n             }) => {\n                 self.print_closure_binder(binder, bound_generic_params);\n                 self.print_capture_clause(capture_clause);"}, {"sha": "1578cddd490e766bf4197d160108c2abe6444127", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -26,10 +26,12 @@ pub(super) fn check_fn<'a, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     fn_sig: ty::FnSig<'tcx>,\n     decl: &'tcx hir::FnDecl<'tcx>,\n-    fn_id: hir::HirId,\n+    fn_def_id: LocalDefId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n+    let fn_id = inherited.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n+\n     // Create the function context. This is either derived from scratch or,\n     // in the case of closures, based on the outer context.\n     let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);"}, {"sha": "6cf9e23b40b0e316695bf6083112349ed1ca9d85", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 43, "deletions": 57, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -4,7 +4,7 @@ use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n use hir::def::DefKind;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -41,18 +41,14 @@ struct ClosureSignatures<'tcx> {\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    #[instrument(skip(self, expr, _capture, decl, body_id), level = \"debug\")]\n+    #[instrument(skip(self, closure), level = \"debug\")]\n     pub fn check_expr_closure(\n         &self,\n-        expr: &hir::Expr<'_>,\n-        _capture: hir::CaptureBy,\n-        decl: &'tcx hir::FnDecl<'tcx>,\n-        body_id: hir::BodyId,\n-        gen: Option<hir::Movability>,\n+        closure: &hir::Closure<'tcx>,\n+        expr_span: Span,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        trace!(\"decl = {:#?}\", decl);\n-        trace!(\"expr = {:#?}\", expr);\n+        trace!(\"decl = {:#?}\", closure.fn_decl);\n \n         // It's always helpful for inference if we know the kind of\n         // closure sooner rather than later, so first examine the expected\n@@ -61,37 +57,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Some(ty) => self.deduce_expectations_from_expected_type(ty),\n             None => (None, None),\n         };\n-        let body = self.tcx.hir().body(body_id);\n-        self.check_closure(expr, expected_kind, decl, body, gen, expected_sig)\n+        let body = self.tcx.hir().body(closure.body);\n+        self.check_closure(closure, expr_span, expected_kind, body, expected_sig)\n     }\n \n-    #[instrument(skip(self, expr, body, decl), level = \"debug\", ret)]\n+    #[instrument(skip(self, closure, body), level = \"debug\", ret)]\n     fn check_closure(\n         &self,\n-        expr: &hir::Expr<'_>,\n+        closure: &hir::Closure<'tcx>,\n+        expr_span: Span,\n         opt_kind: Option<ty::ClosureKind>,\n-        decl: &'tcx hir::FnDecl<'tcx>,\n         body: &'tcx hir::Body<'tcx>,\n-        gen: Option<hir::Movability>,\n         expected_sig: Option<ExpectedSig<'tcx>>,\n     ) -> Ty<'tcx> {\n-        trace!(\"decl = {:#?}\", decl);\n-        let expr_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n+        trace!(\"decl = {:#?}\", closure.fn_decl);\n+        let expr_def_id = closure.def_id;\n         debug!(?expr_def_id);\n \n         let ClosureSignatures { bound_sig, liberated_sig } =\n-            self.sig_of_closure(expr.hir_id, expr_def_id.to_def_id(), decl, body, expected_sig);\n+            self.sig_of_closure(expr_def_id, closure.fn_decl, body, expected_sig);\n \n         debug!(?bound_sig, ?liberated_sig);\n \n         let generator_types = check_fn(\n             self,\n             self.param_env.without_const(),\n             liberated_sig,\n-            decl,\n-            expr.hir_id,\n+            closure.fn_decl,\n+            expr_def_id,\n             body,\n-            gen,\n+            closure.movability,\n         )\n         .1;\n \n@@ -102,7 +97,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let tupled_upvars_ty = self.next_ty_var(TypeVariableOrigin {\n             kind: TypeVariableOriginKind::ClosureSynthetic,\n-            span: self.tcx.hir().span(expr.hir_id),\n+            span: self.tcx.def_span(expr_def_id),\n         });\n \n         if let Some(GeneratorTypes { resume_ty, yield_ty, interior, movability }) = generator_types\n@@ -148,7 +143,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None => self.next_ty_var(TypeVariableOrigin {\n                 // FIXME(eddyb) distinguish closure kind inference variables from the rest.\n                 kind: TypeVariableOriginKind::ClosureSynthetic,\n-                span: expr.span,\n+                span: expr_span,\n             }),\n         };\n \n@@ -319,30 +314,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn sig_of_closure(\n         &self,\n-        hir_id: hir::HirId,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n         expected_sig: Option<ExpectedSig<'tcx>>,\n     ) -> ClosureSignatures<'tcx> {\n         if let Some(e) = expected_sig {\n-            self.sig_of_closure_with_expectation(hir_id, expr_def_id, decl, body, e)\n+            self.sig_of_closure_with_expectation(expr_def_id, decl, body, e)\n         } else {\n-            self.sig_of_closure_no_expectation(hir_id, expr_def_id, decl, body)\n+            self.sig_of_closure_no_expectation(expr_def_id, decl, body)\n         }\n     }\n \n     /// If there is no expected signature, then we will convert the\n     /// types that the user gave into a signature.\n-    #[instrument(skip(self, hir_id, expr_def_id, decl, body), level = \"debug\")]\n+    #[instrument(skip(self, expr_def_id, decl, body), level = \"debug\")]\n     fn sig_of_closure_no_expectation(\n         &self,\n-        hir_id: hir::HirId,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n     ) -> ClosureSignatures<'tcx> {\n-        let bound_sig = self.supplied_sig_of_closure(hir_id, expr_def_id, decl, body);\n+        let bound_sig = self.supplied_sig_of_closure(expr_def_id, decl, body);\n \n         self.closure_sigs(expr_def_id, body, bound_sig)\n     }\n@@ -388,17 +381,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// # Arguments\n     ///\n-    /// - `expr_def_id`: the `DefId` of the closure expression\n+    /// - `expr_def_id`: the `LocalDefId` of the closure expression\n     /// - `decl`: the HIR declaration of the closure\n     /// - `body`: the body of the closure\n     /// - `expected_sig`: the expected signature (if any). Note that\n     ///   this is missing a binder: that is, there may be late-bound\n     ///   regions with depth 1, which are bound then by the closure.\n-    #[instrument(skip(self, hir_id, expr_def_id, decl, body), level = \"debug\")]\n+    #[instrument(skip(self, expr_def_id, decl, body), level = \"debug\")]\n     fn sig_of_closure_with_expectation(\n         &self,\n-        hir_id: hir::HirId,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n         expected_sig: ExpectedSig<'tcx>,\n@@ -407,7 +399,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // expectation if things don't see to match up with what we\n         // expect.\n         if expected_sig.sig.c_variadic() != decl.c_variadic {\n-            return self.sig_of_closure_no_expectation(hir_id, expr_def_id, decl, body);\n+            return self.sig_of_closure_no_expectation(expr_def_id, decl, body);\n         } else if expected_sig.sig.skip_binder().inputs_and_output.len() != decl.inputs.len() + 1 {\n             return self.sig_of_closure_with_mismatched_number_of_arguments(\n                 expr_def_id,\n@@ -443,27 +435,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Along the way, it also writes out entries for types that the user\n         // wrote into our typeck results, which are then later used by the privacy\n         // check.\n-        match self.merge_supplied_sig_with_expectation(\n-            hir_id,\n-            expr_def_id,\n-            decl,\n-            body,\n-            closure_sigs,\n-        ) {\n+        match self.merge_supplied_sig_with_expectation(expr_def_id, decl, body, closure_sigs) {\n             Ok(infer_ok) => self.register_infer_ok_obligations(infer_ok),\n-            Err(_) => self.sig_of_closure_no_expectation(hir_id, expr_def_id, decl, body),\n+            Err(_) => self.sig_of_closure_no_expectation(expr_def_id, decl, body),\n         }\n     }\n \n     fn sig_of_closure_with_mismatched_number_of_arguments(\n         &self,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n         expected_sig: ExpectedSig<'tcx>,\n     ) -> ClosureSignatures<'tcx> {\n         let hir = self.tcx.hir();\n-        let expr_map_node = hir.get_if_local(expr_def_id).unwrap();\n+        let expr_map_node = hir.get_by_def_id(expr_def_id);\n         let expected_args: Vec<_> = expected_sig\n             .sig\n             .skip_binder()\n@@ -476,7 +462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None => (None, Vec::new()),\n         };\n         let expected_span =\n-            expected_sig.cause_span.unwrap_or_else(|| hir.span_if_local(expr_def_id).unwrap());\n+            expected_sig.cause_span.unwrap_or_else(|| self.tcx.def_span(expr_def_id));\n         self.report_arg_count_mismatch(\n             expected_span,\n             closure_span,\n@@ -494,11 +480,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Enforce the user's types against the expectation. See\n     /// `sig_of_closure_with_expectation` for details on the overall\n     /// strategy.\n-    #[instrument(level = \"debug\", skip(self, hir_id, expr_def_id, decl, body, expected_sigs))]\n+    #[instrument(level = \"debug\", skip(self, expr_def_id, decl, body, expected_sigs))]\n     fn merge_supplied_sig_with_expectation(\n         &self,\n-        hir_id: hir::HirId,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n         mut expected_sigs: ClosureSignatures<'tcx>,\n@@ -507,7 +492,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         //\n         // (See comment on `sig_of_closure_with_expectation` for the\n         // meaning of these letters.)\n-        let supplied_sig = self.supplied_sig_of_closure(hir_id, expr_def_id, decl, body);\n+        let supplied_sig = self.supplied_sig_of_closure(expr_def_id, decl, body);\n \n         debug!(?supplied_sig);\n \n@@ -587,8 +572,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[instrument(skip(self, decl, body), level = \"debug\", ret)]\n     fn supplied_sig_of_closure(\n         &self,\n-        hir_id: hir::HirId,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         decl: &hir::FnDecl<'_>,\n         body: &hir::Body<'_>,\n     ) -> ty::PolyFnSig<'tcx> {\n@@ -597,6 +581,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         trace!(\"decl = {:#?}\", decl);\n         debug!(?body.generator_kind);\n \n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(expr_def_id);\n         let bound_vars = self.tcx.late_bound_vars(hir_id);\n \n         // First, convert the types that the user supplied (if any).\n@@ -655,7 +640,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\", ret)]\n     fn deduce_future_output_from_obligations(\n         &self,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         body_id: hir::HirId,\n     ) -> Option<Ty<'tcx>> {\n         let ret_coercion = self.ret_coercion.as_ref().unwrap_or_else(|| {\n@@ -804,14 +789,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn closure_sigs(\n         &self,\n-        expr_def_id: DefId,\n+        expr_def_id: LocalDefId,\n         body: &hir::Body<'_>,\n         bound_sig: ty::PolyFnSig<'tcx>,\n     ) -> ClosureSignatures<'tcx> {\n-        let liberated_sig = self.tcx().liberate_late_bound_regions(expr_def_id, bound_sig);\n+        let liberated_sig =\n+            self.tcx().liberate_late_bound_regions(expr_def_id.to_def_id(), bound_sig);\n         let liberated_sig = self.inh.normalize_associated_types_in(\n             body.value.span,\n-            body.value.hir_id,\n+            self.tcx.hir().local_def_id_to_hir_id(expr_def_id),\n             self.param_env,\n             liberated_sig,\n         );"}, {"sha": "13a03b33de815bad406e8aa0b52ceb7d6e3c74e5", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -30,7 +30,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Closure, ExprKind, HirId, QPath};\n+use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_hir_analysis::astconv::AstConv as _;\n use rustc_hir_analysis::check::ty_kind_suggestion;\n use rustc_infer::infer;\n@@ -324,9 +324,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Match(discrim, arms, match_src) => {\n                 self.check_match(expr, &discrim, arms, expected, match_src)\n             }\n-            ExprKind::Closure(&Closure { capture_clause, fn_decl, body, movability, .. }) => {\n-                self.check_expr_closure(expr, capture_clause, &fn_decl, body, movability, expected)\n-            }\n+            ExprKind::Closure(closure) => self.check_expr_closure(closure, expr.span, expected),\n             ExprKind::Block(body, _) => self.check_block_with_expected(&body, expected),\n             ExprKind::Call(callee, args) => self.check_call(expr, &callee, args, expected),\n             ExprKind::MethodCall(segment, receiver, args, _) => {"}, {"sha": "275f7d12148c952c7c7b23d17011aa93da921199", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -352,8 +352,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_expr(base);\n             }\n \n-            hir::ExprKind::Closure { .. } => {\n-                self.walk_captures(expr);\n+            hir::ExprKind::Closure(closure) => {\n+                self.walk_captures(closure);\n             }\n \n             hir::ExprKind::Box(ref base) => {\n@@ -745,7 +745,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     ///\n     /// - When reporting the Place back to the Delegate, ensure that the UpvarId uses the enclosing\n     /// closure as the DefId.\n-    fn walk_captures(&mut self, closure_expr: &hir::Expr<'_>) {\n+    fn walk_captures(&mut self, closure_expr: &hir::Closure<'_>) {\n         fn upvar_is_local_variable<'tcx>(\n             upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n             upvar_id: hir::HirId,\n@@ -757,7 +757,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         debug!(\"walk_captures({:?})\", closure_expr);\n \n         let tcx = self.tcx();\n-        let closure_def_id = tcx.hir().local_def_id(closure_expr.hir_id);\n+        let closure_def_id = closure_expr.def_id;\n         let upvars = tcx.upvars_mentioned(self.body_owner);\n \n         // For purposes of this function, generator and closures are equivalent.\n@@ -829,10 +829,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         // be a local variable\n                         PlaceBase::Local(*var_hir_id)\n                     };\n+                    let closure_hir_id = tcx.hir().local_def_id_to_hir_id(closure_def_id);\n                     let place_with_id = PlaceWithHirId::new(\n-                        capture_info.path_expr_id.unwrap_or(\n-                            capture_info.capture_kind_expr_id.unwrap_or(closure_expr.hir_id),\n-                        ),\n+                        capture_info\n+                            .path_expr_id\n+                            .unwrap_or(capture_info.capture_kind_expr_id.unwrap_or(closure_hir_id)),\n                         place.base_ty,\n                         place_base,\n                         place.projections.clone(),"}, {"sha": "97d05b4f95c4c855ebd58fd94f84cdf290337e41", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -488,9 +488,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match length {\n             &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n             hir::ArrayLen::Body(anon_const) => {\n-                let const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-                let span = self.tcx.hir().span(anon_const.hir_id);\n-                let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n+                let span = self.tcx.def_span(anon_const.def_id);\n+                let c = ty::Const::from_anon_const(self.tcx, anon_const.def_id);\n                 self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n                 self.normalize_associated_types_in(span, c)\n             }\n@@ -502,10 +501,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ast_c: &hir::AnonConst,\n         param_def_id: DefId,\n     ) -> ty::Const<'tcx> {\n-        let const_def = ty::WithOptConstParam {\n-            did: self.tcx.hir().local_def_id(ast_c.hir_id),\n-            const_param_did: Some(param_def_id),\n-        };\n+        let const_def =\n+            ty::WithOptConstParam { did: ast_c.def_id, const_param_did: Some(param_def_id) };\n         let c = ty::Const::from_opt_const_arg_anon_const(self.tcx, const_def);\n         self.register_wf_obligation(\n             c.into(),"}, {"sha": "6fd609aeaa060f781220c9f96d63326b7d09bdd7", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -251,7 +251,7 @@ fn typeck_with_fallback<'tcx>(\n                 param_env,\n                 fn_sig,\n             );\n-            check_fn(&inh, param_env, fn_sig, decl, id, body, None).0\n+            check_fn(&inh, param_env, fn_sig, decl, def_id, body, None).0\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n             let expected_type = body_ty"}, {"sha": "2eca40d678a849c48633b738d34bf022907c88ce", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -514,7 +514,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         for (&def_id, c_sig) in fcx_typeck_results.user_provided_sigs.iter() {\n             if cfg!(debug_assertions) && c_sig.needs_infer() {\n                 span_bug!(\n-                    self.fcx.tcx.hir().span_if_local(def_id).unwrap(),\n+                    self.fcx.tcx.def_span(def_id),\n                     \"writeback: `{:?}` has inference variables\",\n                     c_sig\n                 );"}, {"sha": "c2d0a662ddbcd72c4b1fb83be68d65186544730a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -186,9 +186,8 @@ impl<'tcx> LateLintPass<'tcx> for BoxPointers {\n         // If it's a struct, we also have to check the fields' types\n         match it.kind {\n             hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {\n-                for struct_field in struct_def.fields() {\n-                    let def_id = cx.tcx.hir().local_def_id(struct_field.hir_id);\n-                    self.check_heap_type(cx, struct_field.span, cx.tcx.type_of(def_id));\n+                for field in struct_def.fields() {\n+                    self.check_heap_type(cx, field.span, cx.tcx.type_of(field.def_id));\n                 }\n             }\n             _ => (),\n@@ -674,13 +673,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, sf: &hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n-            let def_id = cx.tcx.hir().local_def_id(sf.hir_id);\n-            self.check_missing_docs_attrs(cx, def_id, \"a\", \"struct field\")\n+            self.check_missing_docs_attrs(cx, sf.def_id, \"a\", \"struct field\")\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'_>, v: &hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, cx.tcx.hir().local_def_id(v.id), \"a\", \"variant\");\n+        self.check_missing_docs_attrs(cx, v.def_id, \"a\", \"variant\");\n     }\n }\n \n@@ -1425,11 +1423,10 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let map = cx.tcx.hir();\n-        let def_id = map.local_def_id(field.hir_id);\n         if matches!(map.get(map.get_parent_node(field.hir_id)), Node::Variant(_)) {\n             return;\n         }\n-        self.perform_lint(cx, \"field\", def_id, field.vis_span, false);\n+        self.perform_lint(cx, \"field\", field.def_id, field.vis_span, false);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {"}, {"sha": "f484e31ba15088489840cd6c982a96d1784d33d1", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -205,7 +205,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        self.with_lint_attrs(v.id, |cx| {\n+        self.with_lint_attrs(v.hir_id, |cx| {\n             lint_callback!(cx, check_variant, v);\n             hir_visit::walk_variant(cx, v);\n         })"}, {"sha": "847c356b83c0b3c5519771560e2b1f9a7d0d8e4a", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -320,7 +320,7 @@ impl<'tcx> Visitor<'tcx> for LintLevelsBuilder<'_, LintLevelQueryMap<'tcx>> {\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        self.add_id(v.id);\n+        self.add_id(v.hir_id);\n         intravisit::walk_variant(self, v);\n     }\n \n@@ -392,7 +392,7 @@ impl<'tcx> Visitor<'tcx> for LintLevelsBuilder<'_, QueryMapExpectationsWrapper<'\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        self.add_id(v.id);\n+        self.add_id(v.hir_id);\n         intravisit::walk_variant(self, v);\n     }\n "}, {"sha": "e09ac968b603e7d7c4f2e4dd2b70a9826452edfa", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -1558,9 +1558,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n                 // needs to know\n-                let ctor = struct_def\n-                    .ctor_hir_id()\n-                    .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);\n+                let ctor = struct_def.ctor_def_id().map(|ctor_def_id| ctor_def_id.local_def_index);\n \n                 let variant = adt_def.non_enum_variant();\n                 record!(self.tables.variant_data[def_id] <- VariantData {\n@@ -1685,8 +1683,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let def = self.tcx.adt_def(item.owner_id.to_def_id());\n                 // If the struct has a constructor, encode it.\n-                if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);\n+                if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n                     self.encode_struct_ctor(def, ctor_def_id.to_def_id());\n                 }\n             }\n@@ -1708,12 +1705,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {\n-        let def_id = self.tcx.hir().local_def_id(hir_id);\n-        debug!(\"EncodeContext::encode_info_for_closure({:?})\", def_id);\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn encode_info_for_closure(&mut self, def_id: LocalDefId) {\n         // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,\n         // including on the signature, which is inferred in `typeck.\n         let typeck_result: &'tcx ty::TypeckResults<'tcx> = self.tcx.typeck(def_id);\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let ty = typeck_result.node_type(hir_id);\n         match ty.kind() {\n             ty::Generator(..) => {\n@@ -2101,11 +2098,10 @@ impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {\n         for param in generics.params {\n-            let def_id = self.tcx.hir().local_def_id(param.hir_id);\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } | hir::GenericParamKind::Type { .. } => {}\n                 hir::GenericParamKind::Const { ref default, .. } => {\n-                    let def_id = def_id.to_def_id();\n+                    let def_id = param.def_id.to_def_id();\n                     if default.is_some() {\n                         record!(self.tables.const_param_default[def_id] <- self.tcx.const_param_default(def_id))\n                     }\n@@ -2115,8 +2111,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {\n-        if let hir::ExprKind::Closure { .. } = expr.kind {\n-            self.encode_info_for_closure(expr.hir_id);\n+        if let hir::ExprKind::Closure(closure) = expr.kind {\n+            self.encode_info_for_closure(closure.def_id);\n         }\n     }\n }"}, {"sha": "e14ea7be9cfd9349a84ecf8d66377f986061b374", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -1086,10 +1086,10 @@ impl<'hir> Map<'hir> {\n \n     /// Returns the HirId of `N` in `struct Foo<const N: usize = { ... }>` when\n     /// called with the HirId for the `{ ... }` anon const\n-    pub fn opt_const_param_default_param_hir_id(self, anon_const: HirId) -> Option<HirId> {\n+    pub fn opt_const_param_default_param_def_id(self, anon_const: HirId) -> Option<LocalDefId> {\n         match self.get(self.get_parent_node(anon_const)) {\n             Node::GenericParam(GenericParam {\n-                hir_id: param_id,\n+                def_id: param_id,\n                 kind: GenericParamKind::Const { .. },\n                 ..\n             }) => Some(*param_id),\n@@ -1198,20 +1198,7 @@ fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n     let id_str = format!(\" (hir_id={})\", id);\n \n-    let path_str = || {\n-        // This functionality is used for debugging, try to use `TyCtxt` to get\n-        // the user-friendly path, otherwise fall back to stringifying `DefPath`.\n-        crate::ty::tls::with_opt(|tcx| {\n-            if let Some(tcx) = tcx {\n-                let def_id = map.local_def_id(id);\n-                tcx.def_path_str(def_id.to_def_id())\n-            } else if let Some(path) = map.def_path_from_hir_id(id) {\n-                path.data.into_iter().map(|elem| elem.to_string()).collect::<Vec<_>>().join(\"::\")\n-            } else {\n-                String::from(\"<missing path>\")\n-            }\n-        })\n-    };\n+    let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id.to_def_id());\n \n     let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n     let node_str = |prefix| format!(\"{} {}{}\", prefix, span_str(), id_str);\n@@ -1243,32 +1230,33 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::TraitAlias(..) => \"trait alias\",\n                 ItemKind::Impl { .. } => \"impl\",\n             };\n-            format!(\"{} {}{}\", item_str, path_str(), id_str)\n+            format!(\"{} {}{}\", item_str, path_str(item.owner_id.def_id), id_str)\n+        }\n+        Some(Node::ForeignItem(item)) => {\n+            format!(\"foreign item {}{}\", path_str(item.owner_id.def_id), id_str)\n+        }\n+        Some(Node::ImplItem(ii)) => {\n+            let kind = match ii.kind {\n+                ImplItemKind::Const(..) => \"assoc const\",\n+                ImplItemKind::Fn(..) => \"method\",\n+                ImplItemKind::Type(_) => \"assoc type\",\n+            };\n+            format!(\"{} {} in {}{}\", kind, ii.ident, path_str(ii.owner_id.def_id), id_str)\n         }\n-        Some(Node::ForeignItem(_)) => format!(\"foreign item {}{}\", path_str(), id_str),\n-        Some(Node::ImplItem(ii)) => match ii.kind {\n-            ImplItemKind::Const(..) => {\n-                format!(\"assoc const {} in {}{}\", ii.ident, path_str(), id_str)\n-            }\n-            ImplItemKind::Fn(..) => format!(\"method {} in {}{}\", ii.ident, path_str(), id_str),\n-            ImplItemKind::Type(_) => {\n-                format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n-            }\n-        },\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n                 TraitItemKind::Const(..) => \"assoc constant\",\n                 TraitItemKind::Fn(..) => \"trait method\",\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n \n-            format!(\"{} {} in {}{}\", kind, ti.ident, path_str(), id_str)\n+            format!(\"{} {} in {}{}\", kind, ti.ident, path_str(ti.owner_id.def_id), id_str)\n         }\n         Some(Node::Variant(ref variant)) => {\n-            format!(\"variant {} in {}{}\", variant.ident, path_str(), id_str)\n+            format!(\"variant {} in {}{}\", variant.ident, path_str(variant.def_id), id_str)\n         }\n         Some(Node::Field(ref field)) => {\n-            format!(\"field {} in {}{}\", field.ident, path_str(), id_str)\n+            format!(\"field {} in {}{}\", field.ident, path_str(field.def_id), id_str)\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n@@ -1285,9 +1273,15 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Block(_)) => node_str(\"block\"),\n         Some(Node::Infer(_)) => node_str(\"infer\"),\n         Some(Node::Local(_)) => node_str(\"local\"),\n-        Some(Node::Ctor(..)) => format!(\"ctor {}{}\", path_str(), id_str),\n+        Some(Node::Ctor(ctor)) => format!(\n+            \"ctor {}{}\",\n+            ctor.ctor_def_id().map_or(\"<missing path>\".into(), |def_id| path_str(def_id)),\n+            id_str\n+        ),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n-        Some(Node::GenericParam(ref param)) => format!(\"generic_param {:?}{}\", param, id_str),\n+        Some(Node::GenericParam(ref param)) => {\n+            format!(\"generic_param {}{}\", path_str(param.def_id), id_str)\n+        }\n         Some(Node::Crate(..)) => String::from(\"root_crate\"),\n         None => format!(\"unknown node{}\", id_str),\n     }\n@@ -1407,13 +1401,13 @@ impl<'hir> Visitor<'hir> for ItemCollector<'hir> {\n     }\n \n     fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n-        self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n+        self.body_owners.push(c.def_id);\n         intravisit::walk_anon_const(self, c)\n     }\n \n     fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n-        if matches!(ex.kind, ExprKind::Closure { .. }) {\n-            self.body_owners.push(self.tcx.hir().local_def_id(ex.hir_id));\n+        if let ExprKind::Closure(closure) = ex.kind {\n+            self.body_owners.push(closure.def_id);\n         }\n         intravisit::walk_expr(self, ex)\n     }"}, {"sha": "e0a786e201a1691fd61aa299bb7fd424bcad9911", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -10,7 +10,7 @@ use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, List, Ty, TyCtxt};\n+use crate::ty::{self, DefIdTree, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n \n@@ -2523,12 +2523,10 @@ impl<'tcx> ConstantKind<'tcx> {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n                 // the parent item and construct a `ParamConst`.\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-                let item_id = tcx.hir().get_parent_node(hir_id);\n-                let item_def_id = tcx.hir().local_def_id(item_id);\n-                let generics = tcx.generics_of(item_def_id.to_def_id());\n+                let item_def_id = tcx.parent(def_id);\n+                let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                let name = tcx.hir().name(hir_id);\n+                let name = tcx.item_name(def_id);\n                 let ty_const =\n                     tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty);\n                 debug!(?ty_const);"}, {"sha": "37153a639440575569f96fc00e8b2a57c8540173", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::interpret::LitToConstInput;\n use crate::mir::ConstantKind;\n-use crate::ty::{self, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::{self, DefIdTree, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -131,12 +131,10 @@ impl<'tcx> Const<'tcx> {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n                 // the parent item and construct a `ParamConst`.\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-                let item_id = tcx.hir().get_parent_node(hir_id);\n-                let item_def_id = tcx.hir().local_def_id(item_id);\n-                let generics = tcx.generics_of(item_def_id.to_def_id());\n+                let item_def_id = tcx.parent(def_id);\n+                let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                let name = tcx.hir().name(hir_id);\n+                let name = tcx.item_name(def_id);\n                 Some(tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty))\n             }\n             _ => None,\n@@ -268,9 +266,9 @@ impl<'tcx> Const<'tcx> {\n pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Const<'tcx> {\n     let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {\n         hir::Node::GenericParam(hir::GenericParam {\n-            kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },\n+            kind: hir::GenericParamKind::Const { default: Some(ac), .. },\n             ..\n-        }) => tcx.hir().local_def_id(ac.hir_id),\n+        }) => ac.def_id,\n         _ => span_bug!(\n             tcx.def_span(def_id),\n             \"`const_param_default` expected a generic parameter with a constant\""}, {"sha": "1c714f594253aad47b83cbac6631f662568662a3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -41,7 +41,7 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::intravisit::Visitor;\n@@ -443,7 +443,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// Stores the canonicalized types provided by the user. See also\n     /// `AscribeUserType` statement in MIR.\n-    pub user_provided_sigs: DefIdMap<CanonicalPolyFnSig<'tcx>>,\n+    pub user_provided_sigs: LocalDefIdMap<CanonicalPolyFnSig<'tcx>>,\n \n     adjustments: ItemLocalMap<Vec<ty::adjustment::Adjustment<'tcx>>>,\n "}, {"sha": "029ee15d68d4a67fce26d81677b5eb7691c37cdb", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -151,7 +151,6 @@ enum SuggestChangingConstraintsMessage<'a> {\n }\n \n fn suggest_removing_unsized_bound(\n-    tcx: TyCtxt<'_>,\n     generics: &hir::Generics<'_>,\n     suggestions: &mut Vec<(Span, String, SuggestChangingConstraintsMessage<'_>)>,\n     param: &hir::GenericParam<'_>,\n@@ -160,17 +159,16 @@ fn suggest_removing_unsized_bound(\n     // See if there's a `?Sized` bound that can be removed to suggest that.\n     // First look at the `where` clause because we can have `where T: ?Sized`,\n     // then look at params.\n-    let param_def_id = tcx.hir().local_def_id(param.hir_id);\n     for (where_pos, predicate) in generics.predicates.iter().enumerate() {\n         let WherePredicate::BoundPredicate(predicate) = predicate else {\n             continue;\n         };\n-        if !predicate.is_param_bound(param_def_id.to_def_id()) {\n+        if !predicate.is_param_bound(param.def_id.to_def_id()) {\n             continue;\n         };\n \n         for (pos, bound) in predicate.bounds.iter().enumerate() {\n-            let    hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe) = bound else {\n+            let hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe) = bound else {\n                 continue;\n             };\n             if poly.trait_ref.trait_def_id() != def_id {\n@@ -232,7 +230,7 @@ pub fn suggest_constraining_type_params<'a>(\n                     param.span,\n                     &format!(\"this type parameter needs to be `{}`\", constraint),\n                 );\n-                suggest_removing_unsized_bound(tcx, generics, &mut suggestions, param, def_id);\n+                suggest_removing_unsized_bound(generics, &mut suggestions, param, def_id);\n             }\n         }\n \n@@ -283,8 +281,7 @@ pub fn suggest_constraining_type_params<'a>(\n         //          --\n         //          |\n         //          replace with: `T: Bar +`\n-        let param_def_id = tcx.hir().local_def_id(param.hir_id);\n-        if let Some(span) = generics.bounds_span_for_suggestions(param_def_id) {\n+        if let Some(span) = generics.bounds_span_for_suggestions(param.def_id) {\n             suggest_restrict(span, true);\n             continue;\n         }"}, {"sha": "57382f5e1bdb2c4f6faf9683766d49a0320f0c68", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -608,24 +608,22 @@ impl<'tcx> Cx<'tcx> {\n                             out_expr: out_expr.as_ref().map(|expr| self.mirror_expr(expr)),\n                         },\n                         hir::InlineAsmOperand::Const { ref anon_const } => {\n-                            let anon_const_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n                             let value = mir::ConstantKind::from_anon_const(\n                                 tcx,\n-                                anon_const_def_id,\n+                                anon_const.def_id,\n                                 self.param_env,\n                             );\n-                            let span = tcx.hir().span(anon_const.hir_id);\n+                            let span = tcx.def_span(anon_const.def_id);\n \n                             InlineAsmOperand::Const { value, span }\n                         }\n                         hir::InlineAsmOperand::SymFn { ref anon_const } => {\n-                            let anon_const_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n                             let value = mir::ConstantKind::from_anon_const(\n                                 tcx,\n-                                anon_const_def_id,\n+                                anon_const.def_id,\n                                 self.param_env,\n                             );\n-                            let span = tcx.hir().span(anon_const.hir_id);\n+                            let span = tcx.def_span(anon_const.def_id);\n \n                             InlineAsmOperand::SymFn { value, span }\n                         }\n@@ -640,7 +638,7 @@ impl<'tcx> Cx<'tcx> {\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let ty = self.typeck_results().node_type(anon_const.hir_id);\n-                let did = tcx.hir().local_def_id(anon_const.hir_id).to_def_id();\n+                let did = anon_const.def_id.to_def_id();\n                 let typeck_root_def_id = tcx.typeck_root_def_id(did);\n                 let parent_substs =\n                     tcx.erase_regions(InternalSubsts::identity_for_item(tcx, typeck_root_def_id));\n@@ -859,9 +857,7 @@ impl<'tcx> Cx<'tcx> {\n \n             Res::Def(DefKind::ConstParam, def_id) => {\n                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-                let item_id = self.tcx.hir().get_parent_node(hir_id);\n-                let item_def_id = self.tcx.hir().local_def_id(item_id);\n-                let generics = self.tcx.generics_of(item_def_id);\n+                let generics = self.tcx.generics_of(hir_id.owner);\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = self.tcx.hir().name(hir_id);\n                 let param = ty::ParamConst::new(index, name);"}, {"sha": "4b6608faba6f11c4b8ba8213497466509d2c67be", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -565,8 +565,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         id: hir::HirId,\n         span: Span,\n     ) -> PatKind<'tcx> {\n-        let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n-        let value = mir::ConstantKind::from_inline_const(self.tcx, anon_const_def_id);\n+        let value = mir::ConstantKind::from_inline_const(self.tcx, anon_const.def_id);\n \n         // Evaluate early like we do in `lower_path`.\n         let value = value.eval(self.tcx, self.param_env);"}, {"sha": "93200b28830f0cdd44b0625acdf52d2758c2902b", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -220,19 +220,18 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately.\n-    struct GatherCtors<'a, 'tcx> {\n-        tcx: TyCtxt<'tcx>,\n+    struct GatherCtors<'a> {\n         set: &'a mut FxIndexSet<LocalDefId>,\n     }\n-    impl<'tcx> Visitor<'tcx> for GatherCtors<'_, 'tcx> {\n+    impl<'tcx> Visitor<'tcx> for GatherCtors<'_> {\n         fn visit_variant_data(&mut self, v: &'tcx hir::VariantData<'tcx>) {\n-            if let hir::VariantData::Tuple(_, hir_id) = *v {\n-                self.set.insert(self.tcx.hir().local_def_id(hir_id));\n+            if let hir::VariantData::Tuple(_, _, def_id) = *v {\n+                self.set.insert(def_id);\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n     }\n-    tcx.hir().visit_all_item_likes_in_crate(&mut GatherCtors { tcx, set: &mut set });\n+    tcx.hir().visit_all_item_likes_in_crate(&mut GatherCtors { set: &mut set });\n \n     set\n }"}, {"sha": "6b8cd0713732d34f0eb52dce3b2ff0a2ff32fd51", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -219,18 +219,6 @@ impl CheckAttrVisitor<'_> {\n             return;\n         }\n \n-        // FIXME(@lcnr): this doesn't belong here.\n-        if matches!(\n-            target,\n-            Target::Closure\n-                | Target::Fn\n-                | Target::Method(_)\n-                | Target::ForeignFn\n-                | Target::ForeignStatic\n-        ) {\n-            self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n-        }\n-\n         self.check_repr(attrs, span, target, item, hir_id);\n         self.check_used(attrs, target);\n     }\n@@ -423,8 +411,7 @@ impl CheckAttrVisitor<'_> {\n         if let Some(generics) = tcx.hir().get_generics(tcx.hir().local_def_id(hir_id)) {\n             for p in generics.params {\n                 let hir::GenericParamKind::Type { .. } = p.kind else { continue };\n-                let param_id = tcx.hir().local_def_id(p.hir_id);\n-                let default = tcx.object_lifetime_default(param_id);\n+                let default = tcx.object_lifetime_default(p.def_id);\n                 let repr = match default {\n                     ObjectLifetimeDefault::Empty => \"BaseDefault\".to_owned(),\n                     ObjectLifetimeDefault::Static => \"'static\".to_owned(),\n@@ -2150,7 +2137,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n \n     fn visit_variant(&mut self, variant: &'tcx hir::Variant<'tcx>) {\n-        self.check_attributes(variant.id, variant.span, Target::Variant, None);\n+        self.check_attributes(variant.hir_id, variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant)\n     }\n "}, {"sha": "d4722234a8f1e05e2c1b8e3a3a65620649ca3fdd", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -362,7 +362,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n         let has_repr_c = self.repr_has_repr_c;\n         let has_repr_simd = self.repr_has_repr_simd;\n         let live_fields = def.fields().iter().filter_map(|f| {\n-            let def_id = tcx.hir().local_def_id(f.hir_id);\n+            let def_id = f.def_id;\n             if has_repr_c || (f.is_positional() && has_repr_simd) {\n                 return Some(def_id);\n             }\n@@ -522,17 +522,13 @@ fn check_item<'tcx>(\n         DefKind::Enum => {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Enum(ref enum_def, _) = item.kind {\n-                let hir = tcx.hir();\n                 if allow_dead_code {\n-                    worklist.extend(\n-                        enum_def.variants.iter().map(|variant| hir.local_def_id(variant.id)),\n-                    );\n+                    worklist.extend(enum_def.variants.iter().map(|variant| variant.def_id));\n                 }\n \n                 for variant in enum_def.variants {\n-                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n-                        struct_constructors\n-                            .insert(hir.local_def_id(ctor_hir_id), hir.local_def_id(variant.id));\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n+                        struct_constructors.insert(ctor_def_id, variant.def_id);\n                     }\n                 }\n             }"}, {"sha": "99efed0b7fb46be15f9d92585c159c7ccf05b7fa", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -219,7 +219,7 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Enum(def, ..) = &item.kind {\n                 for variant in def.variants {\n-                    collector.check_for_lang(Target::Variant, variant.id);\n+                    collector.check_for_lang(Target::Variant, variant.hir_id);\n                 }\n             }\n         }"}, {"sha": "0100860afb94f279328a6b8c388466d2f750912d", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -413,7 +413,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n                 }\n                 intravisit::walk_expr(self, expr);\n             }\n-            hir::ExprKind::Closure { .. } => {\n+            hir::ExprKind::Closure(closure) => {\n                 // Interesting control flow (for loops can contain labeled\n                 // breaks or continues)\n                 self.add_live_node_for_node(expr.hir_id, ExprNode(expr.span, expr.hir_id));\n@@ -423,8 +423,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n                 // in better error messages than just pointing at the closure\n                 // construction site.\n                 let mut call_caps = Vec::new();\n-                let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-                if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n+                if let Some(upvars) = self.tcx.upvars_mentioned(closure.def_id) {\n                     call_caps.extend(upvars.keys().map(|var_id| {\n                         let upvar = upvars[var_id];\n                         let upvar_ln = self.add_live_node(UpvarNode(upvar.span));"}, {"sha": "88bd655d8d3849cb45a56bf98c0cc46662f7c2fa", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -358,9 +358,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                 const_stab_inherit = InheritConstStability::Yes;\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n-                if let Some(ctor_hir_id) = sd.ctor_hir_id() {\n+                if let Some(ctor_def_id) = sd.ctor_def_id() {\n                     self.annotate(\n-                        self.tcx.hir().local_def_id(ctor_hir_id),\n+                        ctor_def_id,\n                         i.span,\n                         None,\n                         AnnotationKind::Required,\n@@ -435,17 +435,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n         self.annotate(\n-            self.tcx.hir().local_def_id(var.id),\n+            var.def_id,\n             var.span,\n             None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n             InheritStability::Yes,\n             |v| {\n-                if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n+                if let Some(ctor_def_id) = var.data.ctor_def_id() {\n                     v.annotate(\n-                        v.tcx.hir().local_def_id(ctor_hir_id),\n+                        ctor_def_id,\n                         var.span,\n                         None,\n                         AnnotationKind::Required,\n@@ -463,7 +463,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {\n         self.annotate(\n-            self.tcx.hir().local_def_id(s.hir_id),\n+            s.def_id,\n             s.span,\n             None,\n             AnnotationKind::Required,\n@@ -500,7 +500,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         };\n \n         self.annotate(\n-            self.tcx.hir().local_def_id(p.hir_id),\n+            p.def_id,\n             p.span,\n             None,\n             kind,\n@@ -601,15 +601,15 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>) {\n-        self.check_missing_stability(self.tcx.hir().local_def_id(var.id), var.span);\n-        if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n-            self.check_missing_stability(self.tcx.hir().local_def_id(ctor_hir_id), var.span);\n+        self.check_missing_stability(var.def_id, var.span);\n+        if let Some(ctor_def_id) = var.data.ctor_def_id() {\n+            self.check_missing_stability(ctor_def_id, var.span);\n         }\n         intravisit::walk_variant(self, var);\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {\n-        self.check_missing_stability(self.tcx.hir().local_def_id(s.hir_id), s.span);\n+        self.check_missing_stability(s.def_id, s.span);\n         intravisit::walk_field_def(self, s);\n     }\n "}, {"sha": "9e41efce9ceaf6ae56b65c6176fdd28d1deb4fe8", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -75,9 +75,8 @@ impl<'tcx> Visitor<'tcx> for CaptureCollector<'_, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure { .. } = expr.kind {\n-            let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-            if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n+        if let hir::ExprKind::Closure(closure) = expr.kind {\n+            if let Some(upvars) = self.tcx.upvars_mentioned(closure.def_id) {\n                 // Every capture of a closure expression is a local in scope,\n                 // that is moved/copied/borrowed into the closure value, and\n                 // for this analysis they are like any other access to a local."}, {"sha": "1d9ae539b60dd997a86dcf7809f06270564b2063", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 26, "deletions": 45, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -419,11 +419,6 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         self.effective_visibilities.public_at_level(def_id)\n     }\n \n-    fn update_with_hir_id(&mut self, hir_id: hir::HirId, level: Option<Level>) -> Option<Level> {\n-        let def_id = self.tcx.hir().local_def_id(hir_id);\n-        self.update(def_id, level)\n-    }\n-\n     /// Updates node level and returns the updated level.\n     fn update(&mut self, def_id: LocalDefId, level: Option<Level>) -> Option<Level> {\n         let old_level = self.get(def_id);\n@@ -573,10 +568,9 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n                     | hir::ItemKind::Union(ref struct_def, _) = item.kind\n                     {\n                         for field in struct_def.fields() {\n-                            let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                            let field_vis = self.tcx.local_visibility(def_id);\n+                            let field_vis = self.tcx.local_visibility(field.def_id);\n                             if field_vis.is_accessible_from(module, self.tcx) {\n-                                self.reach(def_id, level).ty();\n+                                self.reach(field.def_id, level).ty();\n                             }\n                         }\n                     } else {\n@@ -641,12 +635,12 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         match item.kind {\n             hir::ItemKind::Enum(ref def, _) => {\n                 for variant in def.variants {\n-                    let variant_level = self.update_with_hir_id(variant.id, item_level);\n-                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n-                        self.update_with_hir_id(ctor_hir_id, item_level);\n+                    let variant_level = self.update(variant.def_id, item_level);\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n+                        self.update(ctor_def_id, item_level);\n                     }\n                     for field in variant.data.fields() {\n-                        self.update_with_hir_id(field.hir_id, variant_level);\n+                        self.update(field.def_id, variant_level);\n                     }\n                 }\n             }\n@@ -665,14 +659,13 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n-                if let Some(ctor_hir_id) = def.ctor_hir_id() {\n-                    self.update_with_hir_id(ctor_hir_id, item_level);\n+                if let Some(ctor_def_id) = def.ctor_def_id() {\n+                    self.update(ctor_def_id, item_level);\n                 }\n                 for field in def.fields() {\n-                    let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                    let vis = self.tcx.visibility(def_id);\n+                    let vis = self.tcx.visibility(field.def_id);\n                     if vis.is_public() {\n-                        self.update_with_hir_id(field.hir_id, item_level);\n+                        self.update(field.def_id, item_level);\n                     }\n                 }\n             }\n@@ -782,18 +775,16 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.owner_id.def_id, item_level).generics().predicates();\n                 }\n                 for variant in def.variants {\n-                    let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));\n+                    let variant_level = self.get(variant.def_id);\n                     if variant_level.is_some() {\n                         for field in variant.data.fields() {\n-                            self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)\n-                                .ty();\n+                            self.reach(field.def_id, variant_level).ty();\n                         }\n                         // Corner case: if the variant is reachable, but its\n                         // enum is not, make the enum reachable as well.\n                         self.reach(item.owner_id.def_id, variant_level).ty();\n                     }\n-                    if let Some(hir_id) = variant.data.ctor_hir_id() {\n-                        let ctor_def_id = self.tcx.hir().local_def_id(hir_id);\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n                         let ctor_level = self.get(ctor_def_id);\n                         if ctor_level.is_some() {\n                             self.reach(item.owner_id.def_id, ctor_level).ty();\n@@ -818,15 +809,13 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 if item_level.is_some() {\n                     self.reach(item.owner_id.def_id, item_level).generics().predicates();\n                     for field in struct_def.fields() {\n-                        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                        let field_level = self.get(def_id);\n+                        let field_level = self.get(field.def_id);\n                         if field_level.is_some() {\n-                            self.reach(def_id, field_level).ty();\n+                            self.reach(field.def_id, field_level).ty();\n                         }\n                     }\n                 }\n-                if let Some(hir_id) = struct_def.ctor_hir_id() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id(hir_id);\n+                if let Some(ctor_def_id) = struct_def.ctor_def_id() {\n                     let ctor_level = self.get(ctor_def_id);\n                     if ctor_level.is_some() {\n                         self.reach(item.owner_id.def_id, ctor_level).ty();\n@@ -957,26 +946,21 @@ impl<'tcx, 'a> Visitor<'tcx> for TestReachabilityVisitor<'tcx, 'a> {\n         match item.kind {\n             hir::ItemKind::Enum(ref def, _) => {\n                 for variant in def.variants.iter() {\n-                    let variant_id = self.tcx.hir().local_def_id(variant.id);\n-                    self.effective_visibility_diagnostic(variant_id);\n-                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n-                        let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);\n+                    self.effective_visibility_diagnostic(variant.def_id);\n+                    if let Some(ctor_def_id) = variant.data.ctor_def_id() {\n                         self.effective_visibility_diagnostic(ctor_def_id);\n                     }\n                     for field in variant.data.fields() {\n-                        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                        self.effective_visibility_diagnostic(def_id);\n+                        self.effective_visibility_diagnostic(field.def_id);\n                     }\n                 }\n             }\n             hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n-                if let Some(ctor_hir_id) = def.ctor_hir_id() {\n-                    let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);\n+                if let Some(ctor_def_id) = def.ctor_def_id() {\n                     self.effective_visibility_diagnostic(ctor_def_id);\n                 }\n                 for field in def.fields() {\n-                    let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-                    self.effective_visibility_diagnostic(def_id);\n+                    self.effective_visibility_diagnostic(field.def_id);\n                 }\n             }\n             _ => {}\n@@ -1719,16 +1703,15 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n-        if self.effective_visibilities.is_reachable(self.tcx.hir().local_def_id(v.id)) {\n+        if self.effective_visibilities.is_reachable(v.def_id) {\n             self.in_variant = true;\n             intravisit::walk_variant(self, v);\n             self.in_variant = false;\n         }\n     }\n \n     fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n-        let def_id = self.tcx.hir().local_def_id(s.hir_id);\n-        let vis = self.tcx.visibility(def_id);\n+        let vis = self.tcx.visibility(s.def_id);\n         if vis.is_public() || self.in_variant {\n             intravisit::walk_field_def(self, s);\n         }\n@@ -1982,8 +1965,7 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n \n                     for variant in def.variants {\n                         for field in variant.data.fields() {\n-                            self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility)\n-                                .ty();\n+                            self.check(field.def_id, item_visibility).ty();\n                         }\n                     }\n                 }\n@@ -2010,9 +1992,8 @@ impl<'tcx> PrivateItemsInPublicInterfacesChecker<'tcx> {\n                     self.check(item.owner_id.def_id, item_visibility).generics().predicates();\n \n                     for field in struct_def.fields() {\n-                        let def_id = tcx.hir().local_def_id(field.hir_id);\n-                        let field_visibility = tcx.local_visibility(def_id);\n-                        self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();\n+                        let field_visibility = tcx.local_visibility(field.def_id);\n+                        self.check(field.def_id, min(item_visibility, field_visibility, tcx)).ty();\n                     }\n                 }\n             }"}, {"sha": "0e579379ec8ea680fd8e08c1d64d7a9a945d3b27", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -527,9 +527,9 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     let value = format!(\"{}::{} {{ {} }}\", enum_data.name, name, fields_str);\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = id_from_hir_id(variant.id, &self.save_ctxt);\n+                        let id = id_from_hir_id(variant.hir_id, &self.save_ctxt);\n                         let parent = Some(id_from_def_id(item.owner_id.to_def_id()));\n-                        let attrs = self.tcx.hir().attrs(variant.id);\n+                        let attrs = self.tcx.hir().attrs(variant.hir_id);\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -552,7 +552,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 }\n                 ref v => {\n                     let mut value = format!(\"{}::{}\", enum_data.name, name);\n-                    if let hir::VariantData::Tuple(fields, _) = v {\n+                    if let hir::VariantData::Tuple(fields, _, _) = v {\n                         value.push('(');\n                         value.push_str(\n                             &fields\n@@ -565,9 +565,9 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     }\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = id_from_hir_id(variant.id, &self.save_ctxt);\n+                        let id = id_from_hir_id(variant.hir_id, &self.save_ctxt);\n                         let parent = Some(id_from_def_id(item.owner_id.to_def_id()));\n-                        let attrs = self.tcx.hir().attrs(variant.id);\n+                        let attrs = self.tcx.hir().attrs(variant.hir_id);\n \n                         self.dumper.dump_def(\n                             &access,\n@@ -591,7 +591,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             }\n \n             for field in variant.data.fields() {\n-                self.process_struct_field_def(field, variant.id);\n+                self.process_struct_field_def(field, variant.hir_id);\n                 self.visit_ty(field.ty);\n             }\n         }"}, {"sha": "ffe8edf69b7ad5aebcc5ec59f70c76ccc9f44c4c", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -319,7 +319,7 @@ impl<'tcx> SaveContext<'tcx> {\n                     qualname,\n                     value,\n                     parent: None,\n-                    children: def.variants.iter().map(|v| id_from_hir_id(v.id, self)).collect(),\n+                    children: def.variants.iter().map(|v| id_from_hir_id(v.hir_id, self)).collect(),\n                     decl_id: None,\n                     docs: self.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, self),"}, {"sha": "9fcba3e46f1d8dd27f89af77eb0a59f46193e296", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -693,7 +693,7 @@ impl<'hir> Sig for hir::Variant<'hir> {\n                 text.push('}');\n                 Ok(Signature { text, defs, refs })\n             }\n-            hir::VariantData::Tuple(fields, id) => {\n+            hir::VariantData::Tuple(fields, id, _) => {\n                 let name_def = SigElement {\n                     id: id_from_hir_id(id, scx),\n                     start: offset,\n@@ -712,7 +712,7 @@ impl<'hir> Sig for hir::Variant<'hir> {\n                 text.push(')');\n                 Ok(Signature { text, defs, refs })\n             }\n-            hir::VariantData::Unit(id) => {\n+            hir::VariantData::Unit(id, _) => {\n                 let name_def = SigElement {\n                     id: id_from_hir_id(id, scx),\n                     start: offset,"}, {"sha": "786cadaa6cefc19f1a2c7c12482f1cedae68966b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -2592,11 +2592,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let Some(param) = generics.params.iter().find(|param| param.span == span) else {\n             return;\n         };\n-        let param_def_id = self.tcx.hir().local_def_id(param.hir_id);\n         // Check that none of the explicit trait bounds is `Sized`. Assume that an explicit\n         // `Sized` bound is there intentionally and we don't need to suggest relaxing it.\n         let explicitly_sized = generics\n-            .bounds_for_param(param_def_id)\n+            .bounds_for_param(param.def_id)\n             .flat_map(|bp| bp.bounds)\n             .any(|bound| bound.trait_ref().and_then(|tr| tr.trait_def_id()) == sized_trait);\n         if explicitly_sized {\n@@ -2619,7 +2618,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             _ => {}\n         };\n         // Didn't add an indirection suggestion, so add a general suggestion to relax `Sized`.\n-        let (span, separator) = if let Some(s) = generics.bounds_span_for_suggestions(param_def_id)\n+        let (span, separator) = if let Some(s) = generics.bounds_span_for_suggestions(param.def_id)\n         {\n             (s, \" +\")\n         } else {"}, {"sha": "c20595614b0b97dfc8529156e1ac29202226bbd6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -2125,7 +2125,7 @@ fn clean_maybe_renamed_item<'tcx>(\n \n fn clean_variant<'tcx>(variant: &hir::Variant<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n     let kind = VariantItem(clean_variant_data(&variant.data, &variant.disr_expr, cx));\n-    Item::from_hir_id_and_parts(variant.id, Some(variant.ident.name), kind, cx)\n+    Item::from_hir_id_and_parts(variant.hir_id, Some(variant.ident.name), kind, cx)\n }\n \n fn clean_impl<'tcx>("}, {"sha": "cb50c3ae829daa502b53469452f17d2310deb3aa", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -1293,7 +1293,7 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n     }\n \n     fn visit_variant(&mut self, v: &'hir hir::Variant<'_>) {\n-        self.visit_testable(v.ident.to_string(), v.id, v.span, |this| {\n+        self.visit_testable(v.ident.to_string(), v.hir_id, v.span, |this| {\n             intravisit::walk_variant(this, v);\n         });\n     }"}, {"sha": "02b22789608691fed717a4f8cfc59a37a79a0a22", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -244,10 +244,10 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                         matches!(\n                             node,\n                             hir::Node::Variant(hir::Variant {\n-                                data: hir::VariantData::Tuple(_, _),\n+                                data: hir::VariantData::Tuple(_, _, _),\n                                 ..\n                             }) | hir::Node::Item(hir::Item {\n-                                kind: hir::ItemKind::Struct(hir::VariantData::Tuple(_, _), _),\n+                                kind: hir::ItemKind::Struct(hir::VariantData::Tuple(_, _, _), _),\n                                 ..\n                             })\n                         )"}, {"sha": "3d33adf68316b112315acfa0d7696f2707160fd3", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -22,8 +22,6 @@ trait MyIndex<'a, T> {}\n #[lang = \"phantom_data\"]\n //~^ ERROR `phantom_data` language item must be applied to a struct with 1 generic argument\n struct MyPhantomData<T, U>;\n-//~^ ERROR parameter `T` is never used\n-//~| ERROR parameter `U` is never used\n \n #[lang = \"owned_box\"]\n //~^ ERROR `owned_box` language item must be applied to a struct with at least 1 generic argument"}, {"sha": "4d349a25f9c2a94d61baf1a814a5c658454ebe3b", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.stderr", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -33,7 +33,7 @@ LL | struct MyPhantomData<T, U>;\n    |                     ------ this struct has 2 generic arguments\n \n error[E0718]: `owned_box` language item must be applied to a struct with at least 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:28:1\n+  --> $DIR/lang-item-generic-requirements.rs:26:1\n    |\n LL | #[lang = \"owned_box\"]\n    | ^^^^^^^^^^^^^^^^^^^^^\n@@ -42,33 +42,14 @@ LL | struct Foo;\n    |           - this struct has 0 generic arguments\n \n error[E0718]: `start` language item must be applied to a function with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:34:1\n+  --> $DIR/lang-item-generic-requirements.rs:32:1\n    |\n LL | #[lang = \"start\"]\n    | ^^^^^^^^^^^^^^^^^\n LL |\n LL | fn start(_: *const u8, _: isize, _: *const *const u8) -> isize {\n    |         - this function has 0 generic arguments\n \n-error[E0392]: parameter `T` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:24:22\n-   |\n-LL | struct MyPhantomData<T, U>;\n-   |                      ^ unused parameter\n-   |\n-   = help: consider removing `T` or referring to it in a field\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n-\n-error[E0392]: parameter `U` is never used\n-  --> $DIR/lang-item-generic-requirements.rs:24:25\n-   |\n-LL | struct MyPhantomData<T, U>;\n-   |                         ^ unused parameter\n-   |\n-   = help: consider removing `U` or referring to it in a field\n-   = help: if you intended `U` to be a const parameter, use `const U: usize` instead\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0392, E0718.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0718`."}, {"sha": "fb40cd5387b7cc74dcb5add70314e0ed67689613", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -3,7 +3,11 @@ fn main() {\n         .map(\n             #[target_feature(enable = \"\")]\n             //~^ ERROR: attribute should be applied to a function\n+            //~| ERROR: feature named `` is not valid\n+            //~| NOTE: `` is not valid for this target\n             #[track_caller]\n+            //~^ ERROR: `#[track_caller]` on closures is currently unstable\n+            //~| NOTE: see issue #87417\n             |_| (),\n             //~^ NOTE: not a function\n         )"}, {"sha": "52e6ed92e9d238dbddd19a07f6155e5afc34b0e6", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -7,5 +7,21 @@ LL |             #[target_feature(enable = \"\")]\n LL |             |_| (),\n    |             ------ not a function definition\n \n-error: aborting due to previous error\n+error: the feature named `` is not valid for this target\n+  --> $DIR/issue-68060.rs:4:30\n+   |\n+LL |             #[target_feature(enable = \"\")]\n+   |                              ^^^^^^^^^^^ `` is not valid for this target\n+\n+error[E0658]: `#[track_caller]` on closures is currently unstable\n+  --> $DIR/issue-68060.rs:8:13\n+   |\n+LL |             #[track_caller]\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #87417 <https://github.com/rust-lang/rust/issues/87417> for more information\n+   = help: add `#![feature(closure_track_caller)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7c7feffe76a13456feea33a3d20d2250cddebf81", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -8,12 +8,6 @@ LL | fn panic(info: PanicInfo) -> ! {\n    = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib\n    = note: second definition in the local crate (`panic_handler_std`)\n \n-error: argument should be `&PanicInfo`\n-  --> $DIR/panic-handler-std.rs:8:16\n-   |\n-LL | fn panic(info: PanicInfo) -> ! {\n-   |                ^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0152`."}, {"sha": "9f378b4836e481bffed0cd8c575d3df3a491b08c", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -1,5 +1,3 @@\n-// error-pattern: `#[panic_handler]` function required, but not found\n-\n // Regression test for #54505 - range borrowing suggestion had\n // incorrect syntax (missing parentheses).\n \n@@ -18,6 +16,10 @@ extern \"C\" fn eh_personality() {}\n #[lang = \"eh_catch_typeinfo\"]\n static EH_CATCH_TYPEINFO: u8 = 0;\n \n+#[panic_handler]\n+fn panic_handler() {}\n+//~^ ERROR return type should be `!`\n+//~| ERROR function should have one argument\n \n // take a reference to any built-in range\n fn take_range(_r: &impl RangeBounds<i8>) {}"}, {"sha": "9fb0e54a8a9bfef119f7436a480fd58205e81158", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -1,7 +1,17 @@\n-error: `#[panic_handler]` function required, but not found\n+error: return type should be `!`\n+  --> $DIR/issue-54505-no-std.rs:20:20\n+   |\n+LL | fn panic_handler() {}\n+   |                    ^\n+\n+error: function should have one argument\n+  --> $DIR/issue-54505-no-std.rs:20:1\n+   |\n+LL | fn panic_handler() {}\n+   | ^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:27:16\n+  --> $DIR/issue-54505-no-std.rs:29:16\n    |\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n@@ -13,13 +23,13 @@ LL |     take_range(0..1);\n    = note: expected reference `&_`\n                  found struct `Range<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:32:16\n+  --> $DIR/issue-54505-no-std.rs:34:16\n    |\n LL |     take_range(1..);\n    |     ---------- ^^^\n@@ -31,13 +41,13 @@ LL |     take_range(1..);\n    = note: expected reference `&_`\n                  found struct `RangeFrom<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:37:16\n+  --> $DIR/issue-54505-no-std.rs:39:16\n    |\n LL |     take_range(..);\n    |     ---------- ^^\n@@ -49,13 +59,13 @@ LL |     take_range(..);\n    = note: expected reference `&_`\n                  found struct `RangeFull`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:42:16\n+  --> $DIR/issue-54505-no-std.rs:44:16\n    |\n LL |     take_range(0..=1);\n    |     ---------- ^^^^^\n@@ -67,13 +77,13 @@ LL |     take_range(0..=1);\n    = note: expected reference `&_`\n                  found struct `RangeInclusive<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:47:16\n+  --> $DIR/issue-54505-no-std.rs:49:16\n    |\n LL |     take_range(..5);\n    |     ---------- ^^^\n@@ -85,13 +95,13 @@ LL |     take_range(..5);\n    = note: expected reference `&_`\n                  found struct `RangeTo<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:52:16\n+  --> $DIR/issue-54505-no-std.rs:54:16\n    |\n LL |     take_range(..=42);\n    |     ---------- ^^^^^\n@@ -103,11 +113,11 @@ LL |     take_range(..=42);\n    = note: expected reference `&_`\n                  found struct `RangeToInclusive<{integer}>`\n note: function defined here\n-  --> $DIR/issue-54505-no-std.rs:23:4\n+  --> $DIR/issue-54505-no-std.rs:25:4\n    |\n LL | fn take_range(_r: &impl RangeBounds<i8>) {}\n    |    ^^^^^^^^^^ -------------------------\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "9cadd59c3dc9e60aebdd4dd6db892cb932bca88b", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -119,40 +119,40 @@ hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size\n hir-stats ----------------------------------------------------------------\n hir-stats ForeignItemRef            24 ( 0.3%)             1            24\n-hir-stats Lifetime                  32 ( 0.4%)             1            32\n-hir-stats Mod                       32 ( 0.4%)             1            32\n+hir-stats Lifetime                  32 ( 0.3%)             1            32\n+hir-stats Mod                       32 ( 0.3%)             1            32\n hir-stats ExprField                 40 ( 0.4%)             1            40\n hir-stats TraitItemRef              56 ( 0.6%)             2            28\n hir-stats Local                     64 ( 0.7%)             1            64\n hir-stats Param                     64 ( 0.7%)             2            32\n hir-stats InlineAsm                 72 ( 0.8%)             1            72\n hir-stats ImplItemRef               72 ( 0.8%)             2            36\n-hir-stats Body                      96 ( 1.1%)             3            32\n-hir-stats GenericArg                96 ( 1.1%)             4            24\n-hir-stats - Type                      24 ( 0.3%)             1\n-hir-stats - Lifetime                  72 ( 0.8%)             3\n-hir-stats FieldDef                  96 ( 1.1%)             2            48\n-hir-stats Arm                       96 ( 1.1%)             2            48\n-hir-stats Stmt                      96 ( 1.1%)             3            32\n-hir-stats - Local                     32 ( 0.4%)             1\n-hir-stats - Semi                      32 ( 0.4%)             1\n-hir-stats - Expr                      32 ( 0.4%)             1\n+hir-stats Body                      96 ( 1.0%)             3            32\n+hir-stats FieldDef                  96 ( 1.0%)             2            48\n+hir-stats Arm                       96 ( 1.0%)             2            48\n+hir-stats Stmt                      96 ( 1.0%)             3            32\n+hir-stats - Local                     32 ( 0.3%)             1\n+hir-stats - Semi                      32 ( 0.3%)             1\n+hir-stats - Expr                      32 ( 0.3%)             1\n hir-stats FnDecl                   120 ( 1.3%)             3            40\n hir-stats Attribute                128 ( 1.4%)             4            32\n+hir-stats GenericArg               128 ( 1.4%)             4            32\n+hir-stats - Type                      32 ( 0.3%)             1\n+hir-stats - Lifetime                  96 ( 1.0%)             3\n hir-stats GenericArgs              144 ( 1.6%)             3            48\n-hir-stats Variant                  160 ( 1.8%)             2            80\n+hir-stats Variant                  176 ( 1.9%)             2            88\n hir-stats GenericBound             192 ( 2.1%)             4            48\n hir-stats - Trait                    192 ( 2.1%)             4\n hir-stats WherePredicate           192 ( 2.1%)             3            64\n hir-stats - BoundPredicate           192 ( 2.1%)             3\n-hir-stats Block                    288 ( 3.2%)             6            48\n+hir-stats Block                    288 ( 3.1%)             6            48\n hir-stats Pat                      360 ( 3.9%)             5            72\n hir-stats - Wild                      72 ( 0.8%)             1\n hir-stats - Struct                    72 ( 0.8%)             1\n hir-stats - Binding                  216 ( 2.4%)             3\n hir-stats GenericParam             400 ( 4.4%)             5            80\n hir-stats Generics                 560 ( 6.1%)            10            56\n-hir-stats Ty                       720 ( 7.9%)            15            48\n+hir-stats Ty                       720 ( 7.8%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n hir-stats - Rptr                      48 ( 0.5%)             1\n hir-stats - Path                     624 ( 6.8%)            13\n@@ -169,10 +169,10 @@ hir-stats - Enum                      80 ( 0.9%)             1\n hir-stats - ExternCrate               80 ( 0.9%)             1\n hir-stats - ForeignMod                80 ( 0.9%)             1\n hir-stats - Impl                      80 ( 0.9%)             1\n-hir-stats - Fn                       160 ( 1.8%)             2\n+hir-stats - Fn                       160 ( 1.7%)             2\n hir-stats - Use                      400 ( 4.4%)             5\n-hir-stats Path                   1_280 (14.0%)            32            40\n-hir-stats PathSegment            1_920 (21.0%)            40            48\n+hir-stats Path                   1_280 (13.9%)            32            40\n+hir-stats PathSegment            1_920 (20.9%)            40            48\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_128\n+hir-stats Total                  9_176\n hir-stats"}, {"sha": "a2adfc67f08001322711a338f9cdbb292cc94beb", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -4,36 +4,6 @@ error: malformed `target_feature` attribute input\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n-error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:19:18\n-   |\n-LL | #[target_feature(enable = \"foo\")]\n-   |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n-\n-error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:22:18\n-   |\n-LL | #[target_feature(bar)]\n-   |                  ^^^ help: must be of the form: `enable = \"..\"`\n-\n-error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:24:18\n-   |\n-LL | #[target_feature(disable = \"baz\")]\n-   |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n-\n-error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:28:1\n-   |\n-LL | #[target_feature(enable = \"sse2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | fn bar() {}\n-   | -------- not an `unsafe` function\n-   |\n-   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n-   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n-\n error: attribute should be applied to a function definition\n   --> $DIR/invalid-attribute.rs:34:1\n    |\n@@ -92,12 +62,6 @@ LL |\n LL | trait Baz {}\n    | ------------ not a function definition\n \n-error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:67:1\n-   |\n-LL | #[inline(always)]\n-   | ^^^^^^^^^^^^^^^^^\n-\n error: attribute should be applied to a function definition\n   --> $DIR/invalid-attribute.rs:85:5\n    |\n@@ -119,6 +83,42 @@ LL |\n LL |     || {};\n    |     ----- not a function definition\n \n+error: the feature named `foo` is not valid for this target\n+  --> $DIR/invalid-attribute.rs:19:18\n+   |\n+LL | #[target_feature(enable = \"foo\")]\n+   |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n+\n+error: malformed `target_feature` attribute input\n+  --> $DIR/invalid-attribute.rs:22:18\n+   |\n+LL | #[target_feature(bar)]\n+   |                  ^^^ help: must be of the form: `enable = \"..\"`\n+\n+error: malformed `target_feature` attribute input\n+  --> $DIR/invalid-attribute.rs:24:18\n+   |\n+LL | #[target_feature(disable = \"baz\")]\n+   |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n+\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/invalid-attribute.rs:28:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn bar() {}\n+   | -------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+\n+error: cannot use `#[inline(always)]` with `#[target_feature]`\n+  --> $DIR/invalid-attribute.rs:67:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+\n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/invalid-attribute.rs:77:5\n    |"}, {"sha": "216cd78e56f9a2f1980267379edc4af9088a268e", "filename": "src/test/ui/traits/issue-102989.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -7,10 +7,8 @@ trait Sized { } //~ ERROR found duplicate lang item `sized`\n fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n     //~^ ERROR `self` parameter is only allowed in associated functions\n     //~| ERROR cannot find type `Struct` in this scope\n-    //~| ERROR mismatched types\n     let x = x << 1;\n-    //~^ ERROR the size for values of type `{integer}` cannot be known at compilation time\n-    //~| ERROR cannot find value `x` in this scope\n+    //~^ ERROR cannot find value `x` in this scope\n }\n \n fn main() {}"}, {"sha": "7d0098fe885021b22962887b2e7dcdba3a34d664", "filename": "src/test/ui/traits/issue-102989.stderr", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-102989.stderr?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -13,7 +13,7 @@ LL | fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                      ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/issue-102989.rs:11:13\n+  --> $DIR/issue-102989.rs:10:13\n    |\n LL |     let x = x << 1;\n    |             ^ help: a local variable with a similar name exists: `f`\n@@ -28,32 +28,7 @@ LL | trait Sized { }\n    = note: first definition in `core` loaded from SYSROOT/libcore-*.rlib\n    = note: second definition in the local crate (`issue_102989`)\n \n-error[E0277]: the size for values of type `{integer}` cannot be known at compilation time\n-  --> $DIR/issue-102989.rs:11:15\n-   |\n-LL |     let x = x << 1;\n-   |               ^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-102989.rs:7:42\n-   |\n-LL | fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |    ----------                            ^^^^ expected `&u32`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-note: consider returning one of these bindings\n-  --> $DIR/issue-102989.rs:7:30\n-   |\n-LL | fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                              ^\n-...\n-LL |     let x = x << 1;\n-   |         ^\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0152, E0277, E0308, E0412, E0425.\n+Some errors have detailed explanations: E0152, E0412, E0425.\n For more information about an error, try `rustc --explain E0152`."}, {"sha": "4877cee0cc1ea8ea8bc3b575cb38272e84a94b17", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -157,10 +157,10 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             && def.variants.len() > 1\n         {\n             let mut iter = def.variants.iter().filter_map(|v| {\n-                let id = cx.tcx.hir().local_def_id(v.id);\n-                (matches!(v.data, hir::VariantData::Unit(_))\n+                let id = cx.tcx.hir().local_def_id(v.hir_id);\n+                (matches!(v.data, hir::VariantData::Unit(..))\n                     && v.ident.as_str().starts_with('_')\n-                    && is_doc_hidden(cx.tcx.hir().attrs(v.id)))\n+                    && is_doc_hidden(cx.tcx.hir().attrs(v.hir_id)))\n                 .then_some((id, v.span))\n             });\n             if let Some((id, span)) = iter.next()"}, {"sha": "6fd100762b49dd7caacd956f9b6596f050d053db", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c75fe4c8547c276574cacb144919d67fd8ab302/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=7c75fe4c8547c276574cacb144919d67fd8ab302", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n-        let attrs = cx.tcx.hir().attrs(v.id);\n+        let attrs = cx.tcx.hir().attrs(v.hir_id);\n         if !is_from_proc_macro(cx, v) {\n             self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n         }"}]}