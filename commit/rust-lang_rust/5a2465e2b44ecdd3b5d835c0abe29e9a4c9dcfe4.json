{"sha": "5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMjQ2NWUyYjQ0ZWNkZDNiNWQ4MzVjMGFiZTI5ZTlhNGM5ZGNmZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-06T21:05:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-06T21:05:53Z"}, "message": "Auto merge of #45953 - estebank:tab-4, r=nikomatsakis\n\nDisplay `\\t` in diagnostics code as four spaces\n\nFollow up to #44386 using the unicode variable width machinery from #45711 to replace tabs in the source code when displaying a diagnostic error with four spaces (instead of only one), while properly accounting for this when calculating underlines.\n\nPartly addresses #44618.", "tree": {"sha": "76b353607669b391077b7230d0c0c13966bbbc29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b353607669b391077b7230d0c0c13966bbbc29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "html_url": "https://github.com/rust-lang/rust/commit/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf30759a8409bee031ac252ee207452ab4804467", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf30759a8409bee031ac252ee207452ab4804467", "html_url": "https://github.com/rust-lang/rust/commit/cf30759a8409bee031ac252ee207452ab4804467"}, {"sha": "9d80e2200af22bb4532a7cc4738b22e408072ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d80e2200af22bb4532a7cc4738b22e408072ffd", "html_url": "https://github.com/rust-lang/rust/commit/9d80e2200af22bb4532a7cc4738b22e408072ffd"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "2c33f80520360a83fa741b114d4f7d56c3b4c46d", "filename": "src/librustc_errors/styled_buffer.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Flibrustc_errors%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Flibrustc_errors%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fstyled_buffer.rs?ref=5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "patch": "@@ -27,10 +27,21 @@ impl StyledBuffer {\n     }\n \n     fn replace_tabs(&mut self) {\n-        for line in self.text.iter_mut() {\n-            for c in line.iter_mut() {\n+        for (line_pos, line) in self.text.iter_mut().enumerate() {\n+            let mut tab_pos = vec![];\n+            for (pos, c) in line.iter().enumerate() {\n                 if *c == '\\t' {\n-                    *c = ' ';\n+                    tab_pos.push(pos);\n+                }\n+            }\n+            // start with the tabs at the end of the line to replace them with 4 space chars\n+            for pos in tab_pos.iter().rev() {\n+                assert_eq!(line.remove(*pos), '\\t');\n+                // fix the position of the style to match up after replacing the tabs\n+                let s = self.styles[line_pos].remove(*pos);\n+                for _ in 0..4 {\n+                    line.insert(*pos, ' ');\n+                    self.styles[line_pos].insert(*pos, s);\n                 }\n             }\n         }"}, {"sha": "ec652b5607ec4421eca14527132b5d436955bf68", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "patch": "@@ -503,13 +503,16 @@ pub enum NonNarrowChar {\n     ZeroWidth(BytePos),\n     /// Represents a wide (fullwidth) character\n     Wide(BytePos),\n+    /// Represents a tab character, represented visually with a width of 4 characters\n+    Tab(BytePos),\n }\n \n impl NonNarrowChar {\n     fn new(pos: BytePos, width: usize) -> Self {\n         match width {\n             0 => NonNarrowChar::ZeroWidth(pos),\n             2 => NonNarrowChar::Wide(pos),\n+            4 => NonNarrowChar::Tab(pos),\n             _ => panic!(\"width {} given for non-narrow character\", width),\n         }\n     }\n@@ -518,7 +521,8 @@ impl NonNarrowChar {\n     pub fn pos(&self) -> BytePos {\n         match *self {\n             NonNarrowChar::ZeroWidth(p) |\n-            NonNarrowChar::Wide(p) => p,\n+            NonNarrowChar::Wide(p) |\n+            NonNarrowChar::Tab(p) => p,\n         }\n     }\n \n@@ -527,6 +531,7 @@ impl NonNarrowChar {\n         match *self {\n             NonNarrowChar::ZeroWidth(_) => 0,\n             NonNarrowChar::Wide(_) => 2,\n+            NonNarrowChar::Tab(_) => 4,\n         }\n     }\n }\n@@ -538,6 +543,7 @@ impl Add<BytePos> for NonNarrowChar {\n         match self {\n             NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),\n             NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),\n+            NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),\n         }\n     }\n }\n@@ -549,6 +555,7 @@ impl Sub<BytePos> for NonNarrowChar {\n         match self {\n             NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),\n             NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),\n+            NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),\n         }\n     }\n }\n@@ -868,8 +875,10 @@ impl FileMap {\n \n     pub fn record_width(&self, pos: BytePos, ch: char) {\n         let width = match ch {\n-            '\\t' | '\\n' =>\n-                // Tabs will consume one column.\n+            '\\t' =>\n+                // Tabs will consume 4 columns.\n+                4,\n+            '\\n' =>\n                 // Make newlines take one column so that displayed spans can point them.\n                 1,\n             ch =>"}, {"sha": "e95078f25474aed374fae6fe79e9643002a7d45c", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "patch": "@@ -1,16 +1,16 @@\n error[E0425]: cannot find value `bar` in this scope\n   --> $DIR/tab.rs:14:2\n    |\n-14 |  bar; //~ ERROR cannot find value `bar`\n-   |  ^^^ not found in this scope\n+14 |     bar; //~ ERROR cannot find value `bar`\n+   |     ^^^ not found in this scope\n \n error[E0308]: mismatched types\n   --> $DIR/tab.rs:18:2\n    |\n 17 | fn foo() {\n    |          - help: try adding a return type: `-> &'static str `\n-18 |  \"bar   boo\" //~ ERROR mismatched types\n-   |  ^^^^^^^^^^^ expected (), found reference\n+18 |     \"bar            boo\" //~ ERROR mismatched types\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected (), found reference\n    |\n    = note: expected type `()`\n               found type `&'static str`"}, {"sha": "34c49d97562229e9ed0828945e251c7eae7c3e8b", "filename": "src/test/ui/codemap_tests/tab_2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr?ref=5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "patch": "@@ -1,8 +1,8 @@\n error: unterminated double quote string\n   --> $DIR/tab_2.rs:14:7\n    |\n-14 |       \"\"\"; //~ ERROR unterminated double quote\n-   |  _______^\n+14 |                   \"\"\"; //~ ERROR unterminated double quote\n+   |  ___________________^\n 15 | | }\n    | |__^\n "}, {"sha": "322020626639b65116334167da1fab0b17d7ad47", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "patch": "@@ -1,11 +1,11 @@\n error[E0382]: use of moved value: `some_vec`\n   --> $DIR/tab_3.rs:17:20\n    |\n-15 |  some_vec.into_iter();\n-   |  -------- value moved here\n-16 |  {\n-17 |   println!(\"{:?}\", some_vec); //~ ERROR use of moved\n-   |                    ^^^^^^^^ value used here after move\n+15 |     some_vec.into_iter();\n+   |     -------- value moved here\n+16 |     {\n+17 |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n+   |                          ^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait\n "}]}