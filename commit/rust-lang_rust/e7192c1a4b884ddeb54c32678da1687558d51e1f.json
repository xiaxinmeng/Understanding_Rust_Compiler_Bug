{"sha": "e7192c1a4b884ddeb54c32678da1687558d51e1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTkyYzFhNGI4ODRkZGViNTRjMzI2NzhkYTE2ODc1NThkNTFlMWY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-06T18:36:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-06T18:36:05Z"}, "message": "Rollup merge of #47217 - stjepang:set-examples, r=frewsxcv\n\nWrite examples for {BTree,Hash}Set::{get,replace,take}", "tree": {"sha": "7fcd51dbf59636e31f972514f89aa369aca62361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcd51dbf59636e31f972514f89aa369aca62361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7192c1a4b884ddeb54c32678da1687558d51e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7192c1a4b884ddeb54c32678da1687558d51e1f", "html_url": "https://github.com/rust-lang/rust/commit/e7192c1a4b884ddeb54c32678da1687558d51e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7192c1a4b884ddeb54c32678da1687558d51e1f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bf11cf2b68d104ec33f1bca033ce1e06be1fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bf11cf2b68d104ec33f1bca033ce1e06be1fd1", "html_url": "https://github.com/rust-lang/rust/commit/c6bf11cf2b68d104ec33f1bca033ce1e06be1fd1"}, {"sha": "7948f458ab28dc3476e764850a15f62f594609b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7948f458ab28dc3476e764850a15f62f594609b1", "html_url": "https://github.com/rust-lang/rust/commit/7948f458ab28dc3476e764850a15f62f594609b1"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "e094070fc3dd10cb864e31e49cb142005ed8d00a", "filename": "src/liballoc/btree/set.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7192c1a4b884ddeb54c32678da1687558d51e1f/src%2Fliballoc%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7192c1a4b884ddeb54c32678da1687558d51e1f/src%2Fliballoc%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fset.rs?ref=e7192c1a4b884ddeb54c32678da1687558d51e1f", "patch": "@@ -415,6 +415,16 @@ impl<T: Ord> BTreeSet<T> {\n     /// The value may be any borrowed form of the set's value type,\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.get(&2), Some(&2));\n+    /// assert_eq!(set.get(&4), None);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n         where T: Borrow<Q>,\n@@ -540,6 +550,19 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n     /// one. Returns the replaced value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut set = BTreeSet::new();\n+    /// set.insert(Vec::<i32>::new());\n+    ///\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\n+    /// set.replace(Vec::with_capacity(10));\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         Recover::replace(&mut self.map, value)\n@@ -576,6 +599,16 @@ impl<T: Ord> BTreeSet<T> {\n     /// The value may be any borrowed form of the set's value type,\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let mut set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.take(&2), Some(2));\n+    /// assert_eq!(set.take(&2), None);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>\n         where T: Borrow<Q>,"}, {"sha": "e9427fb40a0165d79738dc4343288f1e22684a2e", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7192c1a4b884ddeb54c32678da1687558d51e1f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7192c1a4b884ddeb54c32678da1687558d51e1f/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=e7192c1a4b884ddeb54c32678da1687558d51e1f", "patch": "@@ -527,6 +527,16 @@ impl<T, S> HashSet<T, S>\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.get(&2), Some(&2));\n+    /// assert_eq!(set.get(&4), None);\n+    /// ```\n+    ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n@@ -631,6 +641,19 @@ impl<T, S> HashSet<T, S>\n \n     /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n     /// one. Returns the replaced value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::new();\n+    /// set.insert(Vec::<i32>::new());\n+    ///\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\n+    /// set.replace(Vec::with_capacity(10));\n+    /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n+    /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         Recover::replace(&mut self.map, value)\n@@ -671,6 +694,16 @@ impl<T, S> HashSet<T, S>\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the value type.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.take(&2), Some(2));\n+    /// assert_eq!(set.take(&2), None);\n+    /// ```\n+    ///\n     /// [`Eq`]: ../../std/cmp/trait.Eq.html\n     /// [`Hash`]: ../../std/hash/trait.Hash.html\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]"}]}