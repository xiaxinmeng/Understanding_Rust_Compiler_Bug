{"sha": "8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDQwNDc5YzVlYjc2MWQ3OGI0YjhiM2JhMGU0MTFiMjE3ZmI0OTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-19T15:01:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-22T11:08:39Z"}, "message": "optimize creating a stack frame", "tree": {"sha": "fe813046f096db9740b00cb10f0bdab328dec09b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe813046f096db9740b00cb10f0bdab328dec09b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "html_url": "https://github.com/rust-lang/rust/commit/8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad40479c5eb761d78b4b8b3ba0e411b217fb497/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d392f5f5d302089bdde41528a12da187558b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d392f5f5d302089bdde41528a12da187558b35", "html_url": "https://github.com/rust-lang/rust/commit/c3d392f5f5d302089bdde41528a12da187558b35"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "b142de81c1e91ce96331e7146a82c646b592be1d", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad40479c5eb761d78b4b8b3ba0e411b217fb497/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad40479c5eb761d78b4b8b3ba0e411b217fb497/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "patch": "@@ -178,6 +178,7 @@ impl<'tcx> Scalar {\n }\n \n impl From<Pointer> for Scalar {\n+    #[inline(always)]\n     fn from(ptr: Pointer) -> Self {\n         Scalar::Ptr(ptr)\n     }\n@@ -210,6 +211,7 @@ pub enum ScalarMaybeUndef {\n }\n \n impl From<Scalar> for ScalarMaybeUndef {\n+    #[inline(always)]\n     fn from(s: Scalar) -> Self {\n         ScalarMaybeUndef::Scalar(s)\n     }"}, {"sha": "33420b6150bb789918f58825effad23f9ec5fbdd", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ad40479c5eb761d78b4b8b3ba0e411b217fb497/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad40479c5eb761d78b4b8b3ba0e411b217fb497/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8ad40479c5eb761d78b4b8b3ba0e411b217fb497", "patch": "@@ -288,6 +288,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for &'a EvalContext<'a, 'm\n     type Ty = Ty<'tcx>;\n     type TyLayout = EvalResult<'tcx, TyLayout<'tcx>>;\n \n+    #[inline]\n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n             .map_err(|layout| EvalErrorKind::Layout(layout).into())\n@@ -559,7 +560,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             // value we use for things that we know are initially dead.\n             let dummy =\n                 LocalValue::Live(Operand::Immediate(Value::Scalar(ScalarMaybeUndef::Undef)));\n-            self.frame_mut().locals = IndexVec::from_elem(dummy, &mir.local_decls);\n+            let mut locals = IndexVec::from_elem(dummy, &mir.local_decls);\n             // Now mark those locals as dead that we do not want to initialize\n             match self.tcx.describe_def(instance.def_id()) {\n                 // statics and constants don't have `Storage*` statements, no need to look for them\n@@ -572,8 +573,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                             match stmt.kind {\n                                 StorageLive(local) |\n                                 StorageDead(local) => {\n-                                    // Worst case we are overwriting a dummy, no deallocation needed\n-                                    self.storage_dead(local);\n+                                    locals[local] = LocalValue::Dead;\n                                 }\n                                 _ => {}\n                             }\n@@ -582,11 +582,20 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 },\n             }\n             // Finally, properly initialize all those that still have the dummy value\n-            for local in mir.local_decls.indices() {\n-                if self.frame().locals[local] == dummy {\n-                    self.storage_live(local)?;\n+            for (local, decl) in locals.iter_mut().zip(mir.local_decls.iter()) {\n+                match *local {\n+                    LocalValue::Live(_) => {\n+                        // This needs to be peoperly initialized.\n+                        let layout = self.layout_of(self.monomorphize(decl.ty, instance.substs))?;\n+                        *local = LocalValue::Live(self.uninit_operand(layout)?);\n+                    }\n+                    LocalValue::Dead => {\n+                        // Nothing to do\n+                    }\n                 }\n             }\n+            // done\n+            self.frame_mut().locals = locals;\n         }\n \n         if self.stack.len() > self.stack_limit {"}]}