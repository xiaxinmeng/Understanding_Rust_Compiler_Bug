{"sha": "c80b6876d537fe8abed4965635b3fe578170191e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MGI2ODc2ZDUzN2ZlOGFiZWQ0OTY1NjM1YjNmZTU3ODE3MDE5MWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-02T15:40:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T15:40:30Z"}, "message": "Merge #5193\n\n5193: Move cargo metadata off the main loop r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "86523962b1589754abd296536be6cf34e5aa4110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86523962b1589754abd296536be6cf34e5aa4110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80b6876d537fe8abed4965635b3fe578170191e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/f/uCRBK7hj4Ov3rIwAAdHIIACo9nBzkjD67OM6bBZDyxKAY\nRAp9oFLKdVr7SPLjctWj4Cv+a1gYoTjJUiU98tp5525jUi0v6p/poROomKDn2gRM\no/un9kC9V5Mm7neqc88h+7g+tddbicwP83vJPibPmJiZ3ydLRnBmWrU81+/UqOVW\nPnHE6fStz2lepPu0QOtLHKN7ul+zFmOaO7+puMJGAOSBXJkiOUyIEH6RMVeyAqCA\nEcabCcJ5a5fQUT1yI9kNG63rWwL6QkTPOvVfe7ayuvTKKdT+zs2X5jWZEs4AiNvV\nFXeucJd83Y+WskL6z1ggmhtA4UJ+kdpEOKc0DeqBVDmfajjmRVzxpgIKyEbEMX8=\n=MSxO\n-----END PGP SIGNATURE-----\n", "payload": "tree 86523962b1589754abd296536be6cf34e5aa4110\nparent 83f3cdca4f4a3ba612c082bba35c8ecf76abc166\nparent 6c7578bd7a67b0f8fd1fdb6a043c8523104c5807\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593704430 +0000\ncommitter GitHub <noreply@github.com> 1593704430 +0000\n\nMerge #5193\n\n5193: Move cargo metadata off the main loop r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80b6876d537fe8abed4965635b3fe578170191e", "html_url": "https://github.com/rust-lang/rust/commit/c80b6876d537fe8abed4965635b3fe578170191e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80b6876d537fe8abed4965635b3fe578170191e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f3cdca4f4a3ba612c082bba35c8ecf76abc166", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f3cdca4f4a3ba612c082bba35c8ecf76abc166", "html_url": "https://github.com/rust-lang/rust/commit/83f3cdca4f4a3ba612c082bba35c8ecf76abc166"}, {"sha": "6c7578bd7a67b0f8fd1fdb6a043c8523104c5807", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c7578bd7a67b0f8fd1fdb6a043c8523104c5807", "html_url": "https://github.com/rust-lang/rust/commit/6c7578bd7a67b0f8fd1fdb6a043c8523104c5807"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "464c3b2e3e44f56f4ffbc2ec0f135ef63877a1a8", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=c80b6876d537fe8abed4965635b3fe578170191e", "patch": "@@ -150,7 +150,7 @@ impl ProjectManifest {\n impl ProjectWorkspace {\n     pub fn load(\n         manifest: ProjectManifest,\n-        cargo_features: &CargoConfig,\n+        cargo_config: &CargoConfig,\n         with_sysroot: bool,\n     ) -> Result<ProjectWorkspace> {\n         let res = match manifest {\n@@ -166,7 +166,7 @@ impl ProjectWorkspace {\n                 ProjectWorkspace::Json { project }\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n-                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_features)\n+                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_config)\n                     .with_context(|| {\n                         format!(\n                             \"Failed to read Cargo metadata from Cargo.toml file {}\","}, {"sha": "cfde55431e273932f41b7ecc24197ced3a2ca58f", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=c80b6876d537fe8abed4965635b3fe578170191e", "patch": "@@ -21,6 +21,7 @@ use crate::{\n     lsp_utils::{apply_document_changes, is_canceled, notification_is, Progress},\n     Result,\n };\n+use ra_project_model::ProjectWorkspace;\n \n pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     log::info!(\"initial config: {:#?}\", config);\n@@ -58,6 +59,7 @@ enum Event {\n pub(crate) enum Task {\n     Response(Response),\n     Diagnostics(Vec<(FileId, Vec<lsp_types::Diagnostic>)>),\n+    Workspaces(Vec<anyhow::Result<ProjectWorkspace>>),\n     Unit,\n }\n \n@@ -111,6 +113,14 @@ impl GlobalState {\n     }\n \n     fn run(mut self, inbox: Receiver<lsp_server::Message>) -> Result<()> {\n+        if self.config.linked_projects.is_empty() && self.config.notifications.cargo_toml_not_found\n+        {\n+            self.show_message(\n+                lsp_types::MessageType::Error,\n+                \"rust-analyzer failed to discover workspace\".to_string(),\n+            );\n+        };\n+\n         let registration_options = lsp_types::TextDocumentRegistrationOptions {\n             document_selector: Some(vec![\n                 lsp_types::DocumentFilter {\n@@ -140,7 +150,7 @@ impl GlobalState {\n             |_, _| (),\n         );\n \n-        self.reload();\n+        self.fetch_workspaces();\n \n         while let Some(event) = self.next_event(&inbox) {\n             if let Event::Lsp(lsp_server::Message::Notification(not)) = &event {\n@@ -182,6 +192,7 @@ impl GlobalState {\n                             self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n                         }\n                     }\n+                    Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n                     Task::Unit => (),\n                 }\n                 self.analysis_host.maybe_collect_garbage();\n@@ -320,7 +331,7 @@ impl GlobalState {\n         self.register_request(&req, request_received);\n \n         RequestDispatcher { req: Some(req), global_state: self }\n-            .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| Ok(s.reload()))?\n+            .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| Ok(s.fetch_workspaces()))?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n             .on_sync::<lsp_ext::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?\n             .on_sync::<lsp_types::request::Shutdown>(|_, ()| Ok(()))?"}, {"sha": "74c3344dfef52a07c16127d102d80af27b0644f8", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=c80b6876d537fe8abed4965635b3fe578170191e", "patch": "@@ -11,6 +11,7 @@ use vfs::{file_set::FileSetConfig, AbsPath};\n use crate::{\n     config::{Config, FilesWatcher, LinkedProject},\n     global_state::{GlobalState, Handle},\n+    main_loop::Task,\n };\n \n impl GlobalState {\n@@ -20,51 +21,51 @@ impl GlobalState {\n             self.analysis_host.update_lru_capacity(old_config.lru_capacity);\n         }\n         if self.config.linked_projects != old_config.linked_projects {\n-            self.reload()\n+            self.fetch_workspaces()\n         } else if self.config.flycheck != old_config.flycheck {\n             self.reload_flycheck();\n         }\n     }\n-    pub(crate) fn reload(&mut self) {\n-        log::info!(\"reloading projects: {:?}\", self.config.linked_projects);\n-        if self.config.linked_projects.is_empty() && self.config.notifications.cargo_toml_not_found\n-        {\n-            self.show_message(\n-                lsp_types::MessageType::Error,\n-                \"rust-analyzer failed to discover workspace\".to_string(),\n-            );\n-        };\n-\n-        let workspaces = {\n-            self.config\n-                .linked_projects\n-                .iter()\n-                .map(|project| match project {\n-                    LinkedProject::ProjectManifest(manifest) => {\n-                        ra_project_model::ProjectWorkspace::load(\n-                            manifest.clone(),\n-                            &self.config.cargo,\n-                            self.config.with_sysroot,\n-                        )\n-                    }\n-                    LinkedProject::InlineJsonProject(it) => {\n-                        Ok(ra_project_model::ProjectWorkspace::Json { project: it.clone() })\n-                    }\n-                })\n-                .collect::<Vec<_>>()\n-                .into_iter()\n-                .filter_map(|res| {\n-                    res.map_err(|err| {\n-                        log::error!(\"failed to load workspace: {:#}\", err);\n-                        self.show_message(\n-                            lsp_types::MessageType::Error,\n-                            format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n-                        );\n+    pub(crate) fn fetch_workspaces(&mut self) {\n+        self.task_pool.handle.spawn({\n+            let linked_projects = self.config.linked_projects.clone();\n+            let cargo_config = self.config.cargo.clone();\n+            let with_sysroot = self.config.with_sysroot.clone();\n+            move || {\n+                let workspaces = linked_projects\n+                    .iter()\n+                    .map(|project| match project {\n+                        LinkedProject::ProjectManifest(manifest) => {\n+                            ra_project_model::ProjectWorkspace::load(\n+                                manifest.clone(),\n+                                &cargo_config,\n+                                with_sysroot,\n+                            )\n+                        }\n+                        LinkedProject::InlineJsonProject(it) => {\n+                            Ok(ra_project_model::ProjectWorkspace::Json { project: it.clone() })\n+                        }\n                     })\n-                    .ok()\n+                    .collect::<Vec<_>>();\n+                Task::Workspaces(workspaces)\n+            }\n+        });\n+    }\n+    pub(crate) fn switch_workspaces(&mut self, workspaces: Vec<anyhow::Result<ProjectWorkspace>>) {\n+        log::info!(\"reloading projects: {:?}\", self.config.linked_projects);\n+        let workspaces = workspaces\n+            .into_iter()\n+            .filter_map(|res| {\n+                res.map_err(|err| {\n+                    log::error!(\"failed to load workspace: {:#}\", err);\n+                    self.show_message(\n+                        lsp_types::MessageType::Error,\n+                        format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n+                    );\n                 })\n-                .collect::<Vec<_>>()\n-        };\n+                .ok()\n+            })\n+            .collect::<Vec<_>>();\n \n         if let FilesWatcher::Client = self.config.files.watcher {\n             let registration_options = lsp_types::DidChangeWatchedFilesRegistrationOptions {"}, {"sha": "7b908d30c21f80bee0e9f6837e222a39f2a97da6", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80b6876d537fe8abed4965635b3fe578170191e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=c80b6876d537fe8abed4965635b3fe578170191e", "patch": "@@ -447,6 +447,7 @@ version = \\\"0.0.0\\\"\n \",\n     )\n     .server();\n+    server.wait_until_workspace_is_loaded();\n \n     server.request::<OnEnter>(\n         TextDocumentPositionParams {"}]}