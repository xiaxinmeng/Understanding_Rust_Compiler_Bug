{"sha": "15c9dc7a86d14f4aba3e23f91af65671aa4b5001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzlkYzdhODZkMTRmNGFiYTNlMjNmOTFhZjY1NjcxYWE0YjUwMDE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:51Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:51Z"}, "message": "extra::workcache: Remodel the (internal) struct Work\n\nUsing an enum with two cases for `Work` reveals simpler code than the\nprevious `Option<Either<X, Y>>` representation.", "tree": {"sha": "d32a6decb4bd2295f4b8b6be9b07992791900e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d32a6decb4bd2295f4b8b6be9b07992791900e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c9dc7a86d14f4aba3e23f91af65671aa4b5001", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c9dc7a86d14f4aba3e23f91af65671aa4b5001", "html_url": "https://github.com/rust-lang/rust/commit/15c9dc7a86d14f4aba3e23f91af65671aa4b5001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c9dc7a86d14f4aba3e23f91af65671aa4b5001/comments", "author": null, "committer": null, "parents": [{"sha": "830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "url": "https://api.github.com/repos/rust-lang/rust/commits/830ac37ca2484422bb90ec3e39b8ee47d08dc1be", "html_url": "https://github.com/rust-lang/rust/commit/830ac37ca2484422bb90ec3e39b8ee47d08dc1be"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "aeec4b4258b39084c6d6a136e1743535fbf379a9", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15c9dc7a86d14f4aba3e23f91af65671aa4b5001/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c9dc7a86d14f4aba3e23f91af65671aa4b5001/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=15c9dc7a86d14f4aba3e23f91af65671aa4b5001", "patch": "@@ -19,7 +19,6 @@ use arc::{Arc,RWArc};\n use treemap::TreeMap;\n use std::cell::Cell;\n use std::comm::{PortOne, oneshot};\n-use std::either::{Either, Left, Right};\n use std::{io, os, task};\n \n /**\n@@ -252,9 +251,9 @@ struct Exec {\n     discovered_outputs: WorkMap\n }\n \n-struct Work<'self, T> {\n-    prep: &'self Prep<'self>,\n-    res: Option<Either<T,PortOne<(Exec,T)>>>\n+enum Work<'self, T> {\n+    WorkValue(T),\n+    WorkFromTask(&'self Prep<'self>, PortOne<(Exec, T)>),\n }\n \n fn json_encode<T:Encodable<json::Encoder>>(t: &T) -> ~str {\n@@ -426,15 +425,15 @@ impl<'self> Prep<'self> {\n             db.prepare(self.fn_name, &self.declared_inputs)\n         };\n \n-        let res = match cached {\n+        match cached {\n             Some((ref disc_in, ref disc_out, ref res))\n             if self.all_fresh(\"declared input\",&self.declared_inputs) &&\n                self.all_fresh(\"discovered input\", disc_in) &&\n                self.all_fresh(\"discovered output\", disc_out) => {\n                 debug!(\"Cache hit!\");\n                 debug!(\"Trying to decode: %? / %? / %?\",\n                        disc_in, disc_out, *res);\n-                Left(json_decode(*res))\n+                Work::from_value(json_decode(*res))\n             }\n \n             _ => {\n@@ -453,10 +452,9 @@ impl<'self> Prep<'self> {\n                     let v = blk(&mut exe);\n                     chan.send((exe, v));\n                 }\n-                Right(port)\n+                Work::from_task(self, port)\n             }\n-        };\n-        Work::new(self, res)\n+        }\n     }\n }\n \n@@ -465,16 +463,18 @@ impl<'self, T:Send +\n        Decodable<json::Decoder>>\n     Work<'self, T> { // FIXME(#5121)\n \n-    pub fn new(p: &'self Prep<'self>, e: Either<T,PortOne<(Exec,T)>>) -> Work<'self, T> {\n-        Work { prep: p, res: Some(e) }\n+    pub fn from_value(elt: T) -> Work<'self, T> {\n+        WorkValue(elt)\n+    }\n+    pub fn from_task(prep: &'self Prep<'self>, port: PortOne<(Exec, T)>)\n+        -> Work<'self, T> {\n+        WorkFromTask(prep, port)\n     }\n \n     pub fn unwrap(self) -> T {\n-        let Work { prep, res } = self;\n-        match res {\n-            None => fail!(),\n-            Some(Left(v)) => v,\n-            Some(Right(port)) => {\n+        match self {\n+            WorkValue(v) => v,\n+            WorkFromTask(prep, port) => {\n                 let (exe, v) = port.recv();\n                 let s = json_encode(&v);\n                 do prep.ctxt.db.write |db| {"}]}