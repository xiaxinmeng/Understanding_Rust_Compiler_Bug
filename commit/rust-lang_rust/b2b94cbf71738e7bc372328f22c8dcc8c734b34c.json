{"sha": "b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjk0Y2JmNzE3MzhlN2JjMzcyMzI4ZjIyYzhkY2M4YzczNGIzNGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-14T20:32:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-14T20:32:55Z"}, "message": "Merge #3147\n\n3147: Check that impl self type matches up with expected self type in path mode r=matklad a=flodiebold\n\nFixes #3144.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "d670ada7df1decb6da846ace681bc8c98b5d9e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d670ada7df1decb6da846ace681bc8c98b5d9e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRwP3CRBK7hj4Ov3rIwAAdHIIAB9+jGZyPGkJo4jj2e7GqBu+\nRuaVTtj2+h8D9rI89NH8fTNP6dhHVZjuYo0xzOGsJ6IDi6T0+hcCGwlhHT7LYF1r\nkvs/CshY9Q2bnRlV27KgCLk3nbfJB2GKrZg7Shee34NJhibLldZCBDWm7dGkusfB\ncEVAMI8bAocvMh0iUtReORP/6PlCMDe3bRsWobPvuhHwxsUguWM1vZpYf/WNmAfP\nm/fN96QUHM96zLKOEwviyQt8N4Q2XAwXKphZaNeBCQfhOCjI3z3C3cO/fKmNU358\nKXpVH7hvB00Q7OWfz400BNXpz1ke4JNpzED68+3sdOQ4kRmpK/8JDsx63NJLNSQ=\n=Z6Ht\n-----END PGP SIGNATURE-----\n", "payload": "tree d670ada7df1decb6da846ace681bc8c98b5d9e0c\nparent 6fb36dfdcb91f67c28f51e51514ebe420ec3aa22\nparent f47dc4de8d7aadea17dba023ece70e5b170274b1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581712375 +0000\ncommitter GitHub <noreply@github.com> 1581712375 +0000\n\nMerge #3147\n\n3147: Check that impl self type matches up with expected self type in path mode r=matklad a=flodiebold\n\nFixes #3144.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "html_url": "https://github.com/rust-lang/rust/commit/b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b94cbf71738e7bc372328f22c8dcc8c734b34c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22", "html_url": "https://github.com/rust-lang/rust/commit/6fb36dfdcb91f67c28f51e51514ebe420ec3aa22"}, {"sha": "f47dc4de8d7aadea17dba023ece70e5b170274b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47dc4de8d7aadea17dba023ece70e5b170274b1", "html_url": "https://github.com/rust-lang/rust/commit/f47dc4de8d7aadea17dba023ece70e5b170274b1"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "de5cb1d6bcb8581b76ec4f76f2d8ea560934812a", "filename": "crates/ra_hir_ty/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b94cbf71738e7bc372328f22c8dcc8c734b34c/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b94cbf71738e7bc372328f22c8dcc8c734b34c/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs?ref=b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "patch": "@@ -4,6 +4,7 @@ test_utils::marks!(\n     type_var_cycles_resolve_completely\n     type_var_cycles_resolve_as_possible\n     type_var_resolves_to_int_var\n+    impl_self_type_match_without_receiver\n     match_ergonomics_ref\n     coerce_merge_fail_fallback\n     trait_self_implements_self"}, {"sha": "4f8c524336b32ef0dc5ad003eaefa0218ba450b0", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2b94cbf71738e7bc372328f22c8dcc8c734b34c/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b94cbf71738e7bc372328f22c8dcc8c734b34c/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "patch": "@@ -425,6 +425,15 @@ fn iterate_inherent_methods<T>(\n                 if !is_valid_candidate(db, name, receiver_ty, item, self_ty) {\n                     continue;\n                 }\n+                // we have to check whether the self type unifies with the type\n+                // that the impl is for. If we have a receiver type, this\n+                // already happens in `is_valid_candidate` above; if not, we\n+                // check it here\n+                if receiver_ty.is_none() && inherent_impl_substs(db, impl_block, self_ty).is_none()\n+                {\n+                    test_utils::tested_by!(impl_self_type_match_without_receiver);\n+                    continue;\n+                }\n                 if let Some(result) = callback(&self_ty.value, item) {\n                     return Some(result);\n                 }"}, {"sha": "1f767d324f5505a7bf6669ddf90c300ff20a32ce", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b2b94cbf71738e7bc372328f22c8dcc8c734b34c/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b94cbf71738e7bc372328f22c8dcc8c734b34c/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "patch": "@@ -963,6 +963,38 @@ fn test() { S2.into()<|>; }\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn method_resolution_overloaded_method() {\n+    test_utils::covers!(impl_self_type_match_without_receiver);\n+    let t = type_at(\n+        r#\"\n+//- main.rs\n+struct Wrapper<T>(T);\n+struct Foo<T>(T);\n+struct Bar<T>(T);\n+\n+impl<T> Wrapper<Foo<T>> {\n+    pub fn new(foo_: T) -> Self {\n+        Wrapper(Foo(foo_))\n+    }\n+}\n+\n+impl<T> Wrapper<Bar<T>> {\n+    pub fn new(bar_: T) -> Self {\n+        Wrapper(Bar(bar_))\n+    }\n+}\n+\n+fn main() {\n+    let a = Wrapper::<Foo<f32>>::new(1.0);\n+    let b = Wrapper::<Bar<f32>>::new(1.0);\n+    (a, b)<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"(Wrapper<Foo<f32>>, Wrapper<Bar<f32>>)\")\n+}\n+\n #[test]\n fn method_resolution_encountering_fn_type() {\n     type_at("}]}