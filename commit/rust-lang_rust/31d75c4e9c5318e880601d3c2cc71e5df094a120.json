{"sha": "31d75c4e9c5318e880601d3c2cc71e5df094a120", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDc1YzRlOWM1MzE4ZTg4MDYwMWQzYzJjYzcxZTVkZjA5NGExMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-03T23:29:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-03T23:29:48Z"}, "message": "Auto merge of #65076 - tmandry:rollup-ka7nzb6, r=tmandry\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #61879 (Stabilize todo macro)\n - #64675 (Deprecate `#![plugin]` & `#[plugin_registrar]`)\n - #64690 (proc_macro API: Expose `macro_rules` hygiene)\n - #64706 (add regression test for #60218)\n - #64741 (Prevent rustdoc feature doctests)\n - #64842 (Disallow Self in type param defaults of ADTs)\n - #65004 (Replace mentions of IRC with Discord)\n - #65018 (Set RUST_BACKTRACE=0 in tests that include a backtrace in stderr)\n - #65055 (Add long error explanation for E0556)\n - #65056 (Make visit projection iterative)\n - #65057 (typo: fix typo in E0392)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "715665644e650d0e3b22ced38a144b586a3616bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/715665644e650d0e3b22ced38a144b586a3616bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d75c4e9c5318e880601d3c2cc71e5df094a120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d75c4e9c5318e880601d3c2cc71e5df094a120", "html_url": "https://github.com/rust-lang/rust/commit/31d75c4e9c5318e880601d3c2cc71e5df094a120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d75c4e9c5318e880601d3c2cc71e5df094a120/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032a53a06ce293571e51bbe621a5c480e8a28e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/032a53a06ce293571e51bbe621a5c480e8a28e95", "html_url": "https://github.com/rust-lang/rust/commit/032a53a06ce293571e51bbe621a5c480e8a28e95"}, {"sha": "cc5dcfaada556c5b28f7e95a26d42119bd5e98cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5dcfaada556c5b28f7e95a26d42119bd5e98cc", "html_url": "https://github.com/rust-lang/rust/commit/cc5dcfaada556c5b28f7e95a26d42119bd5e98cc"}], "stats": {"total": 1598, "additions": 1173, "deletions": 425}, "files": [{"sha": "58b829e31d6777845ec46ce0cb49d8dfb5edaa26", "filename": "CODE_OF_CONDUCT.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/CODE_OF_CONDUCT.md", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/CODE_OF_CONDUCT.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CODE_OF_CONDUCT.md?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -33,7 +33,7 @@ In the Rust community we strive to go the extra step to look out for each other.\n \n And if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could've communicated better \u2014 remember that it's your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n \n-The enforcement policies listed above apply to all official Rust venues; including official IRC channels (#rust, #rust-internals, #rust-tools, #rust-libs, #rustc, #rust-beginners, #rust-docs, #rust-community, #rust-lang, and #cargo); GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org (users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n+The enforcement policies listed above apply to all official Rust venues; including all communication channels (Rust Discord server, Rust Zulip server); GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org (users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n \n *Adapted from the [Node.js Policy on Trolling](https://blog.izs.me/2012/08/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n "}, {"sha": "c3a9a68963eb78136179bb5478c732b7d869e91a", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -15,7 +15,7 @@ links to the major sections:\n * [Helpful Links and Information](#helpful-links-and-information)\n \n If you have questions, please make a post on [internals.rust-lang.org][internals] or\n-hop on the [Rust Discord server][rust-discord], [Rust Zulip server][rust-zulip] or [#rust-internals][pound-rust-internals].\n+hop on the [Rust Discord server][rust-discord] or [Rust Zulip server][rust-zulip].\n \n As a reminder, all contributors are expected to follow our [Code of Conduct][coc].\n \n@@ -25,7 +25,6 @@ to contribute to it in more detail than this document.\n If this is your first time contributing, the [walkthrough] chapter of the guide\n can give you a good example of how a typical contribution would go.\n \n-[pound-rust-internals]: https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals\n [internals]: https://internals.rust-lang.org\n [rust-discord]: http://discord.gg/rust-lang\n [rust-zulip]: https://rust-lang.zulipchat.com\n@@ -404,7 +403,7 @@ If you're looking for somewhere to start, check out the [E-easy][eeasy] tag.\n There are a number of other ways to contribute to Rust that don't deal with\n this repository.\n \n-Answer questions in [#rust][pound-rust], or on [users.rust-lang.org][users],\n+Answer questions in the _Get Help!_ channels from the [Rust Discord server][rust-discord], on [users.rust-lang.org][users],\n or on [StackOverflow][so].\n \n Participate in the [RFC process](https://github.com/rust-lang/rfcs).\n@@ -413,7 +412,7 @@ Find a [requested community library][community-library], build it, and publish\n it to [Crates.io](http://crates.io). Easier said than done, but very, very\n valuable!\n \n-[pound-rust]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+[rust-discord]: https://discord.gg/rust-lang\n [users]: https://users.rust-lang.org/\n [so]: http://stackoverflow.com/questions/tagged/rust\n [community-library]: https://github.com/rust-lang/rfcs/labels/A-community-library"}, {"sha": "c5468a2924888e877a5d18e5a7ed5b4c05bceb3d", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -244,19 +244,17 @@ The Rust community congregates in a few places:\n \n To contribute to Rust, please see [CONTRIBUTING](CONTRIBUTING.md).\n \n-Rust has an [IRC] culture and most real-time collaboration happens in a\n-variety of channels on Mozilla's IRC network, irc.mozilla.org. The\n-most popular channel is [#rust], a venue for general discussion about\n-Rust. And a good place to ask for help would be [#rust-beginners].\n+Most real-time collaboration happens in a variety of channels on the\n+[Rust Discord server][rust-discord], with channels dedicated for getting help,\n+community, documentation, and all major contribution areas in the Rust ecosystem.\n+A good place to ask for help would be the #help channel.\n \n The [rustc guide] might be a good place to start if you want to find out how\n various parts of the compiler work.\n \n Also, you may find the [rustdocs for the compiler itself][rustdocs] useful.\n \n-[IRC]: https://en.wikipedia.org/wiki/Internet_Relay_Chat\n-[#rust]: irc://irc.mozilla.org/rust\n-[#rust-beginners]: irc://irc.mozilla.org/rust-beginners\n+[rust-discord]: https://discord.gg/rust-lang\n [rustc guide]: https://rust-lang.github.io/rustc-guide/about-this-guide.html\n [rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n "}, {"sha": "c501378bff5491b0bba6cb39a3738f7e7f5845f4", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -328,6 +328,8 @@ are:\n   `Config` struct.\n * Adding a sanity check? Take a look at `bootstrap/sanity.rs`.\n \n-If you have any questions feel free to reach out on `#rust-infra` on IRC or ask on\n-internals.rust-lang.org. When you encounter bugs, please file issues on the\n-rust-lang/rust issue tracker.\n+If you have any questions feel free to reach out on `#infra` channel in the\n+[Rust Discord server][rust-discord] or ask on internals.rust-lang.org. When\n+you encounter bugs, please file issues on the rust-lang/rust issue tracker.\n+\n+[rust-discord]: https://discord.gg/rust-lang"}, {"sha": "ca1b06fb81a78f534a8774cabec180a3af0873a0", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -465,7 +465,7 @@ macro_rules! writeln {\n /// The unsafe counterpart of this macro is the [`unreachable_unchecked`] function, which\n /// will cause undefined behavior if the code is reached.\n ///\n-/// [`panic!`]:  ../std/macro.panic.html\n+/// [`panic!`]: ../std/macro.panic.html\n /// [`unreachable_unchecked`]: ../std/hint/fn.unreachable_unchecked.html\n /// [`std::hint`]: ../std/hint/index.html\n ///\n@@ -474,6 +474,7 @@ macro_rules! writeln {\n /// This will always [`panic!`]\n ///\n /// [`panic!`]: ../std/macro.panic.html\n+///\n /// # Examples\n ///\n /// Match arms:\n@@ -525,6 +526,9 @@ macro_rules! unreachable {\n /// code type-check, or if you're implementing a trait that requires multiple\n /// methods, and you're only planning on using one of them.\n ///\n+/// There is no difference between `unimplemented!` and `todo!` apart from the\n+/// name.\n+///\n /// # Panics\n ///\n /// This will always [panic!](macro.panic.html)\n@@ -579,8 +583,10 @@ macro_rules! unimplemented {\n /// Indicates unfinished code.\n ///\n /// This can be useful if you are prototyping and are just looking to have your\n-/// code typecheck. `todo!` works exactly like `unimplemented!`. The only\n-/// difference between the two macros is the name.\n+/// code typecheck.\n+///\n+/// There is no difference between `unimplemented!` and `todo!` apart from the\n+/// name.\n ///\n /// # Panics\n ///\n@@ -602,8 +608,6 @@ macro_rules! unimplemented {\n /// `baz()`, so we can use `todo!`:\n ///\n /// ```\n-/// #![feature(todo_macro)]\n-///\n /// # trait Foo {\n /// #     fn bar(&self);\n /// #     fn baz(&self);\n@@ -629,7 +633,7 @@ macro_rules! unimplemented {\n /// }\n /// ```\n #[macro_export]\n-#[unstable(feature = \"todo_macro\", issue = \"59277\")]\n+#[stable(feature = \"todo_macro\", since = \"1.39.0\")]\n macro_rules! todo {\n     () => (panic!(\"not yet implemented\"));\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));"}, {"sha": "c26b59f473c36d5ebe13b87e9cd9c51341637ab5", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -148,6 +148,7 @@ macro_rules! with_api {\n                 fn debug($self: $S::Span) -> String;\n                 fn def_site() -> $S::Span;\n                 fn call_site() -> $S::Span;\n+                fn mixed_site() -> $S::Span;\n                 fn source_file($self: $S::Span) -> $S::SourceFile;\n                 fn parent($self: $S::Span) -> Option<$S::Span>;\n                 fn source($self: $S::Span) -> $S::Span;"}, {"sha": "e199670b561c2b9bad94061a7aca42f1e944bea4", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -271,6 +271,15 @@ impl Span {\n         Span(bridge::client::Span::call_site())\n     }\n \n+    /// A span that represents `macro_rules` hygiene, and sometimes resolves at the macro\n+    /// definition site (local variables, labels, `$crate`) and sometimes at the macro\n+    /// call site (everything else).\n+    /// The span location is taken from the call-site.\n+    #[unstable(feature = \"proc_macro_mixed_site\", issue = \"65049\")]\n+    pub fn mixed_site() -> Span {\n+        Span(bridge::client::Span::mixed_site())\n+    }\n+\n     /// The original source file into which this span points.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source_file(&self) -> SourceFile {"}, {"sha": "bfbeeebd1e230cb7e994716d2412390480418aac", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -166,6 +166,15 @@ macro_rules! make_mir_visitor {\n                 self.super_projection(base, projection, context, location);\n             }\n \n+            fn visit_projection_elem(&mut self,\n+                                     base: & $($mutability)? PlaceBase<'tcx>,\n+                                     proj_base: & $($mutability)? [PlaceElem<'tcx>],\n+                                     elem: & $($mutability)? PlaceElem<'tcx>,\n+                                     context: PlaceContext,\n+                                     location: Location) {\n+                self.super_projection_elem(base, proj_base, elem, context, location);\n+            }\n+\n             fn visit_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n                               location: Location) {\n@@ -725,27 +734,36 @@ macro_rules! make_mir_visitor {\n                                 projection: & $($mutability)? [PlaceElem<'tcx>],\n                                 context: PlaceContext,\n                                 location: Location) {\n-                if let [proj_base @ .., elem] = projection {\n-                    self.visit_projection(base, proj_base, context, location);\n+                let mut cursor = projection;\n+                while let [proj_base @ .., elem] = cursor {\n+                    cursor = proj_base;\n+                    self.visit_projection_elem(base, cursor, elem, context, location);\n+                }\n+            }\n \n-                    match elem {\n-                        ProjectionElem::Field(_field, ty) => {\n-                            self.visit_ty(ty, TyContext::Location(location));\n-                        }\n-                        ProjectionElem::Index(local) => {\n-                            self.visit_local(\n-                                local,\n-                                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                                location\n-                            );\n-                        }\n-                        ProjectionElem::Deref |\n-                        ProjectionElem::Subslice { from: _, to: _ } |\n-                        ProjectionElem::ConstantIndex { offset: _,\n-                                                        min_length: _,\n-                                                        from_end: _ } |\n-                        ProjectionElem::Downcast(_, _) => {\n-                        }\n+            fn super_projection_elem(&mut self,\n+                                     _base: & $($mutability)? PlaceBase<'tcx>,\n+                                     _proj_base: & $($mutability)? [PlaceElem<'tcx>],\n+                                     elem: & $($mutability)? PlaceElem<'tcx>,\n+                                     _context: PlaceContext,\n+                                     location: Location) {\n+                match elem {\n+                    ProjectionElem::Field(_field, ty) => {\n+                        self.visit_ty(ty, TyContext::Location(location));\n+                    }\n+                    ProjectionElem::Index(local) => {\n+                        self.visit_local(\n+                            local,\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                            location\n+                        );\n+                    }\n+                    ProjectionElem::Deref |\n+                    ProjectionElem::Subslice { from: _, to: _ } |\n+                    ProjectionElem::ConstantIndex { offset: _,\n+                                                    min_length: _,\n+                                                    from_end: _ } |\n+                    ProjectionElem::Downcast(_, _) => {\n                     }\n                 }\n             }"}, {"sha": "87cd39b02cd97d9205b3e82bbb30e46c1bb79b9b", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -404,25 +404,25 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n         self.super_assign(dest, rvalue, location);\n     }\n \n-    fn visit_projection(\n+    fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,\n-        proj: &[PlaceElem<'tcx>],\n+        proj_base: &[PlaceElem<'tcx>],\n+        elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {\n         trace!(\n-            \"visit_place_projection: proj={:?} context={:?} location={:?}\",\n-            proj,\n+            \"visit_projection_elem: place_base={:?} proj_base={:?} elem={:?} \\\n+            context={:?} location={:?}\",\n+            place_base,\n+            proj_base,\n+            elem,\n             context,\n             location,\n         );\n-        self.super_projection(place_base, proj, context, location);\n \n-        let (elem, proj_base) = match proj.split_last() {\n-            Some(x) => x,\n-            None => return,\n-        };\n+        self.super_projection_elem(place_base, proj_base, elem, context, location);\n \n         match elem {\n             ProjectionElem::Deref => {"}, {"sha": "fbcf9c8cb5eba5063f6087e10d2ca3f007081a4b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 63, "deletions": 58, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1156,82 +1156,87 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_projection(\n+    fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,\n-        proj: &[PlaceElem<'tcx>],\n+        proj_base: &[PlaceElem<'tcx>],\n+        elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {\n         debug!(\n-            \"visit_place_projection: proj={:?} context={:?} location={:?}\",\n-            proj, context, location,\n+            \"visit_projection_elem: place_base={:?} proj_base={:?} elem={:?} \\\n+            context={:?} location={:?}\",\n+            place_base,\n+            proj_base,\n+            elem,\n+            context,\n+            location,\n         );\n-        self.super_projection(place_base, proj, context, location);\n \n-        if let [proj_base @ .., elem] = proj {\n-            match elem {\n-                ProjectionElem::Deref => {\n-                    if context.is_mutating_use() {\n-                        // `not_const` errors out in const contexts\n-                        self.not_const(ops::MutDeref)\n-                    }\n-                    let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n-                    match self.mode {\n-                        Mode::NonConstFn => {}\n-                        _ if self.suppress_errors => {}\n-                        _ => {\n-                            if let ty::RawPtr(_) = base_ty.kind {\n-                                if !self.tcx.features().const_raw_ptr_deref {\n-                                    self.record_error(ops::RawPtrDeref);\n-                                    emit_feature_err(\n-                                        &self.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n-                                        self.span, GateIssue::Language,\n-                                        &format!(\n-                                            \"dereferencing raw pointers in {}s is unstable\",\n-                                            self.mode,\n-                                        ),\n-                                    );\n-                                }\n+        self.super_projection_elem(place_base, proj_base, elem, context, location);\n+\n+        match elem {\n+            ProjectionElem::Deref => {\n+                if context.is_mutating_use() {\n+                    // `not_const` errors out in const contexts\n+                    self.not_const(ops::MutDeref)\n+                }\n+                let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n+                match self.mode {\n+                    Mode::NonConstFn => {}\n+                    _ if self.suppress_errors => {}\n+                    _ => {\n+                        if let ty::RawPtr(_) = base_ty.kind {\n+                            if !self.tcx.features().const_raw_ptr_deref {\n+                                self.record_error(ops::RawPtrDeref);\n+                                emit_feature_err(\n+                                    &self.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n+                                    self.span, GateIssue::Language,\n+                                    &format!(\n+                                        \"dereferencing raw pointers in {}s is unstable\",\n+                                        self.mode,\n+                                    ),\n+                                );\n                             }\n                         }\n                     }\n                 }\n+            }\n \n-                ProjectionElem::ConstantIndex {..} |\n-                ProjectionElem::Subslice {..} |\n-                ProjectionElem::Field(..) |\n-                ProjectionElem::Index(_) => {\n-                    let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n-                    if let Some(def) = base_ty.ty_adt_def() {\n-                        if def.is_union() {\n-                            match self.mode {\n-                                Mode::ConstFn => {\n-                                    if !self.tcx.features().const_fn_union\n-                                        && !self.suppress_errors\n-                                    {\n-                                        self.record_error(ops::UnionAccess);\n-                                        emit_feature_err(\n-                                            &self.tcx.sess.parse_sess, sym::const_fn_union,\n-                                            self.span, GateIssue::Language,\n-                                            \"unions in const fn are unstable\",\n-                                        );\n-                                    }\n-                                },\n+            ProjectionElem::ConstantIndex {..} |\n+            ProjectionElem::Subslice {..} |\n+            ProjectionElem::Field(..) |\n+            ProjectionElem::Index(_) => {\n+                let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n+                if let Some(def) = base_ty.ty_adt_def() {\n+                    if def.is_union() {\n+                        match self.mode {\n+                            Mode::ConstFn => {\n+                                if !self.tcx.features().const_fn_union\n+                                    && !self.suppress_errors\n+                                {\n+                                    self.record_error(ops::UnionAccess);\n+                                    emit_feature_err(\n+                                        &self.tcx.sess.parse_sess, sym::const_fn_union,\n+                                        self.span, GateIssue::Language,\n+                                        \"unions in const fn are unstable\",\n+                                    );\n+                                }\n+                            },\n \n-                                | Mode::NonConstFn\n-                                | Mode::Static\n-                                | Mode::StaticMut\n-                                | Mode::Const\n-                                => {},\n-                            }\n+                            | Mode::NonConstFn\n+                            | Mode::Static\n+                            | Mode::StaticMut\n+                            | Mode::Const\n+                            => {},\n                         }\n                     }\n                 }\n+            }\n \n-                ProjectionElem::Downcast(..) => {\n-                    self.not_const(ops::Downcast)\n-                }\n+            ProjectionElem::Downcast(..) => {\n+                self.not_const(ops::Downcast)\n             }\n         }\n     }"}, {"sha": "7f819486f5bd3af609c66464df97703cc721966b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -354,6 +354,17 @@ impl<'a> Resolver<'a> {\n                     span, \"defaulted type parameters cannot be forward declared\".to_string());\n                 err\n             }\n+            ResolutionError::SelfInTyParamDefault => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0735,\n+                    \"type parameters cannot use `Self` in their defaults\"\n+                );\n+                err.span_label(\n+                    span, \"`Self` in type parameter default\".to_string());\n+                err\n+            }\n             ResolutionError::ConstParamDependentOnTypeParam => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "47346774180fe4ae091533b6951dd2d2dc0075f0", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -8,9 +8,9 @@ Type parameter defaults can only use parameters that occur before them.\n Erroneous code example:\n \n ```compile_fail,E0128\n-struct Foo<T=U, U=()> {\n+struct Foo<T = U, U = ()> {\n     field1: T,\n-    filed2: U,\n+    field2: U,\n }\n // error: type parameters with a default cannot use forward declared\n // identifiers\n@@ -20,9 +20,9 @@ Since type parameters are evaluated in-order, you may be able to fix this issue\n by doing:\n \n ```\n-struct Foo<U=(), T=U> {\n+struct Foo<U = (), T = U> {\n     field1: T,\n-    filed2: U,\n+    field2: U,\n }\n ```\n \n@@ -1705,6 +1705,21 @@ fn const_id<T, const N: T>() -> T { // error: const parameter\n }\n ```\n \"##,\n+\n+E0735: r##\"\n+Type parameter defaults cannot use `Self` on structs, enums, or unions.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0735\n+struct Foo<X = Box<Self>> {\n+    field1: Option<X>,\n+    field2: Option<X>,\n+}\n+// error: type parameters cannot use `Self` in their defaults.\n+```\n+\"##,\n+\n ;\n //  E0153, unused error code\n //  E0157, unused error code"}, {"sha": "93c96b9f75ba20c6de1d283dd063c20d732b1d26", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -468,6 +468,19 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 }\n             }));\n \n+        // rust-lang/rust#61631: The type `Self` is essentially\n+        // another type parameter. For ADTs, we consider it\n+        // well-defined only after all of the ADT type parameters have\n+        // been provided. Therefore, we do not allow use of `Self`\n+        // anywhere in ADT type parameter defaults.\n+        //\n+        // (We however cannot ban `Self` for defaults on *all* generic\n+        // lists; e.g. trait generics can usefully refer to `Self`,\n+        // such as in the case of `trait Add<Rhs = Self>`.)\n+        if self.current_self_item.is_some() { // (`Some` if + only if we are in ADT's generics.)\n+            default_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n+        }\n+\n         // We also ban access to type parameters for use as the types of const parameters.\n         let mut const_ty_param_ban_rib = Rib::new(TyParamAsConstParamTy);\n         const_ty_param_ban_rib.bindings.extend(generics.params.iter()"}, {"sha": "e7292b52ab3e88c512dbafab43797192f40a5cd8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -214,6 +214,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// Error E0735: type parameters with a default cannot use `Self`\n+    SelfInTyParamDefault,\n     /// Error E0671: const parameter cannot depend on type parameter.\n     ConstParamDependentOnTypeParam,\n }\n@@ -1536,7 +1538,7 @@ impl<'a> Resolver<'a> {\n             if let Some(res) = ribs[i].bindings.get(&rib_ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(\n-                    self.validate_res_from_ribs(i, res, record_used, path_span, ribs),\n+                    self.validate_res_from_ribs(i, rib_ident, res, record_used, path_span, ribs),\n                 ));\n             }\n \n@@ -2122,6 +2124,7 @@ impl<'a> Resolver<'a> {\n     fn validate_res_from_ribs(\n         &mut self,\n         rib_index: usize,\n+        rib_ident: Ident,\n         res: Res,\n         record_used: bool,\n         span: Span,\n@@ -2133,7 +2136,12 @@ impl<'a> Resolver<'a> {\n         // An invalid forward use of a type parameter from a previous default.\n         if let ForwardTyParamBanRibKind = all_ribs[rib_index].kind {\n             if record_used {\n-                self.report_error(span, ResolutionError::ForwardDeclaredTyParam);\n+                let res_error = if rib_ident.name == kw::SelfUpper {\n+                    ResolutionError::SelfInTyParamDefault\n+                } else {\n+                    ResolutionError::ForwardDeclaredTyParam\n+                };\n+                self.report_error(span, res_error);\n             }\n             assert_eq!(res, Res::Err);\n             return Res::Err;"}, {"sha": "e736a55a5f51cead6cbbfd6c23ce733c387cdfec", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1001,12 +1001,12 @@ fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n     // Help is available only in presence of lang items.\n     let msg = if let Some(def_id) = suggested_marker_id {\n         format!(\n-            \"consider removing `{}`, refering to it in a field, or using a marker such as `{}`\",\n+            \"consider removing `{}`, referring to it in a field, or using a marker such as `{}`\",\n             param_name,\n             tcx.def_path_str(def_id),\n         )\n     } else {\n-        format!( \"consider removing `{}` or refering to it in a field\", param_name)\n+        format!( \"consider removing `{}` or referring to it in a field\", param_name)\n     };\n     err.help(&msg);\n     err.emit();"}, {"sha": "fe4e2bd091519b9e912d3a2fe5fb8854af8fd473", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -344,7 +344,6 @@ impl Options {\n                             .map(|s| PathBuf::from(&s))\n                             .unwrap_or_else(|| PathBuf::from(\"doc\"));\n         let mut cfgs = matches.opt_strs(\"cfg\");\n-        cfgs.push(\"rustdoc\".to_string());\n         if should_test {\n             cfgs.push(\"doctest\".to_string());\n         }"}, {"sha": "00265caa965ea69b683aefa87ecee9fc4e1a9305", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -234,7 +234,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         error_format,\n         libs,\n         externs,\n-        cfgs,\n+        mut cfgs,\n         codegen_options,\n         debugging_options,\n         target,\n@@ -250,6 +250,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         ..\n     } = options;\n \n+    // Add the rustdoc cfg into the doc build.\n+    cfgs.push(\"rustdoc\".to_string());\n+\n     let cpath = Some(input.clone());\n     let input = Input::File(input);\n "}, {"sha": "3e77ca47e8a6a887feb2a67a87715acbf00f399e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -62,9 +62,11 @@ pub fn run(options: Options) -> i32 {\n         ..config::Options::default()\n     };\n \n+    let mut cfgs = options.cfgs.clone();\n+    cfgs.push(\"rustdoc\".to_owned());\n     let config = interface::Config {\n         opts: sessopts,\n-        crate_cfg: config::parse_cfgspecs(options.cfgs.clone()),\n+        crate_cfg: config::parse_cfgspecs(cfgs),\n         input,\n         input_path: None,\n         output_file: None,"}, {"sha": "5ff32d7adafc23f9b8d89b852623435a49620048", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -305,7 +305,6 @@\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(thread_local)]\n-#![feature(todo_macro)]\n #![feature(toowned_clone_into)]\n #![feature(trace_macros)]\n #![feature(try_reserve)]"}, {"sha": "c0963026945b0f9039bb669f5c6ebd59c518b00a", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -208,6 +208,25 @@ If you need the feature, make sure to use a nightly release of the compiler\n (but be warned that the feature may be removed or altered in the future).\n \"##,\n \n+E0556: r##\"\n+The `feature` attribute was badly formed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0556\n+#![feature(foo_bar_baz, foo(bar), foo = \"baz\", foo)] // error!\n+#![feature] // error!\n+#![feature = \"foo\"] // error!\n+```\n+\n+The `feature` attribute only accept a \"feature flag\" and can only be used on\n+nightly. Example:\n+\n+```ignore (only works in nightly)\n+#![feature(flag)]\n+```\n+\"##,\n+\n E0557: r##\"\n A feature attribute named a feature that has been removed.\n \n@@ -457,7 +476,6 @@ features in the `-Z allow_features` flag.\n     E0551, // incorrect meta item\n     E0553, // multiple rustc_const_unstable attributes\n //  E0555, // replaced with a generic attribute input check\n-    E0556, // malformed feature, expected just one word\n     E0584, // file for module `..` found at both .. and ..\n     E0629, // missing 'feature' (rustc_const_unstable)\n     // rustc_const_unstable attribute must be paired with stable/unstable"}, {"sha": "583fb3f770183a8b241a60e7431de12f58688d36", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -953,6 +953,12 @@ impl<'a> ExtCtxt<'a> {\n         span.with_call_site_ctxt(self.current_expansion.id)\n     }\n \n+    /// Equivalent of `Span::mixed_site` from the proc macro API,\n+    /// except that the location is taken from the span passed as an argument.\n+    pub fn with_mixed_site_ctxt(&self, span: Span) -> Span {\n+        span.with_mixed_site_ctxt(self.current_expansion.id)\n+    }\n+\n     /// Returns span for the macro which originally caused the current expansion to happen.\n     ///\n     /// Stops backtracing at include! boundary."}, {"sha": "021ec46d987cfc339d78c188753fb2b3bf23cffe", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -355,6 +355,7 @@ pub(crate) struct Rustc<'a> {\n     sess: &'a ParseSess,\n     def_site: Span,\n     call_site: Span,\n+    mixed_site: Span,\n }\n \n impl<'a> Rustc<'a> {\n@@ -364,6 +365,7 @@ impl<'a> Rustc<'a> {\n             sess: cx.parse_sess,\n             def_site: cx.with_def_site_ctxt(expn_data.def_site),\n             call_site: cx.with_call_site_ctxt(expn_data.call_site),\n+            mixed_site: cx.with_mixed_site_ctxt(expn_data.call_site),\n         }\n     }\n \n@@ -664,6 +666,9 @@ impl server::Span for Rustc<'_> {\n     fn call_site(&mut self) -> Self::Span {\n         self.call_site\n     }\n+    fn mixed_site(&mut self) -> Self::Span {\n+        self.mixed_site\n+    }\n     fn source_file(&mut self, span: Self::Span) -> Self::SourceFile {\n         self.sess.source_map().lookup_char_pos(span.lo()).file\n     }"}, {"sha": "80a80ff0a0d47b100ad4d97c994751be84adb420", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -278,10 +278,23 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     // Plugins:\n-    ungated!(plugin_registrar, Normal, template!(Word)),\n-    gated!(\n-        plugin, CrateLevel, template!(List: \"name|name(args)\"),\n-        \"compiler plugins are experimental and possibly buggy\",\n+    (\n+        sym::plugin_registrar, Normal, template!(Word),\n+        Gated(\n+            Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29597\", None),\n+            sym::plugin_registrar,\n+            \"compiler plugins are deprecated\",\n+            cfg_fn!(plugin_registrar)\n+        )\n+    ),\n+    (\n+        sym::plugin, CrateLevel, template!(List: \"name|name(args)\"),\n+        Gated(\n+            Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29597\", None),\n+            sym::plugin,\n+            \"compiler plugins are deprecated\",\n+            cfg_fn!(plugin)\n+        )\n     ),\n \n     // Testing:"}, {"sha": "30ee9b90515ee4dd7e075255b8f7a54450886999", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -526,6 +526,12 @@ impl Span {\n         self.with_ctxt_from_mark(expn_id, Transparency::Transparent)\n     }\n \n+    /// Equivalent of `Span::mixed_site` from the proc macro API,\n+    /// except that the location is taken from the `self` span.\n+    pub fn with_mixed_site_ctxt(&self, expn_id: ExpnId) -> Span {\n+        self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)\n+    }\n+\n     /// Produces a span with the same location as `self` and context produced by a macro with the\n     /// given ID and transparency, assuming that macro was defined directly and not produced by\n     /// some other macro (which is the case for built-in and procedural macros)."}, {"sha": "1566a153ec03c4dbb2230298f40374a932bb02c9", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -41,7 +41,7 @@ impl MetadataLoader for NoLlvmMetadataLoader {\n struct TheBackend;\n \n impl CodegenBackend for TheBackend {\n-    fn metadata_loader(&self) -> Box<MetadataLoader + Sync> {\n+    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n         Box::new(NoLlvmMetadataLoader)\n     }\n \n@@ -64,15 +64,15 @@ impl CodegenBackend for TheBackend {\n         tcx: TyCtxt<'tcx>,\n         _metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n-    ) -> Box<Any> {\n+    ) -> Box<dyn Any> {\n         use rustc::hir::def_id::LOCAL_CRATE;\n \n         Box::new(tcx.crate_name(LOCAL_CRATE) as Symbol)\n     }\n \n     fn join_codegen_and_link(\n         &self,\n-        ongoing_codegen: Box<Any>,\n+        ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n         _dep_graph: &DepGraph,\n         outputs: &OutputFilenames,\n@@ -97,6 +97,6 @@ impl CodegenBackend for TheBackend {\n \n /// This is the entrypoint for a hot plugged rustc_codegen_llvm\n #[no_mangle]\n-pub fn __rustc_codegen_backend() -> Box<CodegenBackend> {\n+pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n     Box::new(TheBackend)\n }"}, {"sha": "d0ead4136575fac9dfad2f6f7965f26e418bbd01", "filename": "src/test/rustdoc-ui/doc-test-rustdoc-feature.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+\n+#![feature(doc_cfg)]\n+\n+// Make sure `cfg(rustdoc)` is set when finding doctests but not inside the doctests.\n+\n+/// ```\n+/// #![feature(doc_cfg)]\n+/// assert!(!cfg!(rustdoc));\n+/// ```\n+#[cfg(rustdoc)]\n+pub struct Foo;"}, {"sha": "f2525c2dbec2138851370aaa8bba805e71f210fd", "filename": "src/test/rustdoc-ui/doc-test-rustdoc-feature.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.stdout?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,6 @@\n+\n+running 1 test\n+test $DIR/doc-test-rustdoc-feature.rs - Foo (line 9) ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "0522c6d69a82fe0b587ede8ed8ef46023fcec956", "filename": "src/test/ui-fulldeps/gated-plugin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,6 +1,7 @@\n // aux-build:attr-plugin-test.rs\n \n #![plugin(attr_plugin_test)]\n-//~^ ERROR compiler plugins are experimental and possibly buggy\n+//~^ ERROR compiler plugins are deprecated\n+//~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "aa031fb7a63d2c75bae1c48291a2ca986c5efecf", "filename": "src/test/ui-fulldeps/gated-plugin.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: compiler plugins are experimental and possibly buggy\n+error[E0658]: compiler plugins are deprecated\n   --> $DIR/gated-plugin.rs:3:1\n    |\n LL | #![plugin(attr_plugin_test)]\n@@ -7,6 +7,14 @@ LL | #![plugin(attr_plugin_test)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/gated-plugin.rs:3:1\n+   |\n+LL | #![plugin(attr_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "beecaadf95554fca6339caf96b1e72b13fce8e2a", "filename": "src/test/ui-fulldeps/issue-15778-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,5 +4,6 @@\n \n #![feature(plugin)] //~ ERROR crate is not marked with #![crate_okay]\n #![plugin(lint_for_crate)]\n+//~^ WARN use of deprecated attribute `plugin`\n \n pub fn main() { }"}, {"sha": "3afdb1fbf807db6fe70ad7b447b9129c987bfe9f", "filename": "src/test/ui-fulldeps/issue-15778-fail.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,9 +1,18 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-15778-fail.rs:6:1\n+   |\n+LL | #![plugin(lint_for_crate)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: crate is not marked with #![crate_okay]\n   --> $DIR/issue-15778-fail.rs:5:1\n    |\n LL | / #![feature(plugin)]\n LL | | #![plugin(lint_for_crate)]\n LL | |\n+LL | |\n LL | | pub fn main() { }\n    | |_________________^\n    |"}, {"sha": "f81c314c23a2daf95eb0e124f0c8f85b220079f8", "filename": "src/test/ui-fulldeps/issue-15778-pass.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-15778-pass.rs:8:1\n+   |\n+LL | #![plugin(lint_for_crate_rpass)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "186721e2bb9e60aa158195d087ebfada49bd42c1", "filename": "src/test/ui-fulldeps/issue-40001.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-40001.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fissue-40001.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-40001.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-40001.rs:6:1\n+   |\n+LL | #![plugin(issue_40001_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "9f8a879608c1f2a951a1d15a2fc2fef3eedfb318", "filename": "src/test/ui-fulldeps/lint-group-plugin-deny-cmdline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -3,7 +3,9 @@\n // compile-flags: -D lint-me\n \n #![feature(plugin)]\n+\n #![plugin(lint_group_plugin_test)]\n+//~^ WARN use of deprecated attribute `plugin`\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n "}, {"sha": "28065bf3946c05b0a9659355b20828bdba5542ea", "filename": "src/test/ui-fulldeps/lint-group-plugin-deny-cmdline.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,13 +1,21 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-group-plugin-deny-cmdline.rs:7:1\n+   |\n+LL | #![plugin(lint_group_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: item is named 'lintme'\n-  --> $DIR/lint-group-plugin-deny-cmdline.rs:8:1\n+  --> $DIR/lint-group-plugin-deny-cmdline.rs:10:1\n    |\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: `-D test-lint` implied by `-D lint-me`\n \n error: item is named 'pleaselintme'\n-  --> $DIR/lint-group-plugin-deny-cmdline.rs:10:1\n+  --> $DIR/lint-group-plugin-deny-cmdline.rs:12:1\n    |\n LL | fn pleaselintme() { }\n    | ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a93cae1a2b1ec6675346af1791f97d50355dd4ac", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,3 +1,11 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-group-plugin.rs:6:1\n+   |\n+LL | #![plugin(lint_group_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: item is named 'lintme'\n   --> $DIR/lint-group-plugin.rs:9:1\n    |"}, {"sha": "2185929e893b7f161db054e1566ac285b07fd5f8", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-allow.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,3 +1,11 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-plugin-cmdline-allow.rs:8:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: function is never used: `lintme`\n   --> $DIR/lint-plugin-cmdline-allow.rs:10:1\n    |"}, {"sha": "04230a8e883b1587875de62291048ea7c1da4093", "filename": "src/test/ui-fulldeps/lint-plugin-deny-attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(plugin)]\n #![plugin(lint_plugin_test)]\n+//~^ WARN use of deprecated attribute `plugin`\n #![deny(test_lint)]\n \n fn lintme() { } //~ ERROR item is named 'lintme'"}, {"sha": "a0cd9687f5bc01733922cabb3939f24add6514eb", "filename": "src/test/ui-fulldeps/lint-plugin-deny-attr.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,11 +1,19 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-plugin-deny-attr.rs:5:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: item is named 'lintme'\n-  --> $DIR/lint-plugin-deny-attr.rs:8:1\n+  --> $DIR/lint-plugin-deny-attr.rs:9:1\n    |\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-plugin-deny-attr.rs:6:9\n+  --> $DIR/lint-plugin-deny-attr.rs:7:9\n    |\n LL | #![deny(test_lint)]\n    |         ^^^^^^^^^"}, {"sha": "c460cfd5f945168d029f35d7cc037268c1412450", "filename": "src/test/ui-fulldeps/lint-plugin-deny-cmdline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(plugin)]\n #![plugin(lint_plugin_test)]\n+//~^ WARN use of deprecated attribute `plugin`\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n "}, {"sha": "3c64025e5eb2307647be10aa185f0969214626be", "filename": "src/test/ui-fulldeps/lint-plugin-deny-cmdline.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,5 +1,13 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-plugin-deny-cmdline.rs:6:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: item is named 'lintme'\n-  --> $DIR/lint-plugin-deny-cmdline.rs:8:1\n+  --> $DIR/lint-plugin-deny-cmdline.rs:9:1\n    |\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^"}, {"sha": "569f04d18ffd16cb689f58e8344b89a7cba71bd8", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(plugin)]\n #![plugin(lint_plugin_test)]\n+//~^ WARN use of deprecated attribute `plugin`\n #![forbid(test_lint)]\n \n fn lintme() { } //~ ERROR item is named 'lintme'"}, {"sha": "c0c43855c92a181100a9601b23448ae25e052411", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,20 +1,28 @@\n error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n-  --> $DIR/lint-plugin-forbid-attrs.rs:10:9\n+  --> $DIR/lint-plugin-forbid-attrs.rs:11:9\n    |\n LL | #![forbid(test_lint)]\n    |           --------- `forbid` level set here\n ...\n LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-plugin-forbid-attrs.rs:5:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: item is named 'lintme'\n-  --> $DIR/lint-plugin-forbid-attrs.rs:8:1\n+  --> $DIR/lint-plugin-forbid-attrs.rs:9:1\n    |\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-plugin-forbid-attrs.rs:6:11\n+  --> $DIR/lint-plugin-forbid-attrs.rs:7:11\n    |\n LL | #![forbid(test_lint)]\n    |           ^^^^^^^^^"}, {"sha": "82313f6912067acac44e02d88eef7c375293806d", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(plugin)]\n #![plugin(lint_plugin_test)]\n-\n+//~^ WARN use of deprecated attribute `plugin`\n fn lintme() { } //~ ERROR item is named 'lintme'\n \n #[allow(test_lint)] //~ ERROR allow(test_lint) overruled by outer forbid(test_lint)"}, {"sha": "99d013921911b06d1dba87591ca463d18cb501e4", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -6,6 +6,14 @@ LL | #[allow(test_lint)]\n    |\n    = note: `forbid` lint level was set on command line\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-plugin-forbid-cmdline.rs:6:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-cmdline.rs:8:1\n    |"}, {"sha": "2ca5eefe4376c380e8acae03a33fd823b8189d1c", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,3 +1,11 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-plugin.rs:5:1\n+   |\n+LL | #![plugin(lint_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin.rs:8:1\n    |"}, {"sha": "71c3dc929b2e5a16085965ee4126b89aff5c8a05", "filename": "src/test/ui-fulldeps/lint-tool-cmdline-allow.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -2,6 +2,14 @@ warning: lint name `test_lint` is deprecated and does not have an effect anymore\n    |\n    = note: requested on the command line with `-A test_lint`\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-tool-cmdline-allow.rs:8:1\n+   |\n+LL | #![plugin(lint_tool_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n warning: item is named 'lintme'\n   --> $DIR/lint-tool-cmdline-allow.rs:10:1\n    |"}, {"sha": "216a8cb95e31edba68be398a6ec31c4a48275245", "filename": "src/test/ui-fulldeps/lint-tool-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(plugin)]\n #![plugin(lint_tool_test)]\n+//~^ WARN use of deprecated attribute `plugin`\n #![allow(dead_code)]\n #![cfg_attr(foo, warn(test_lint))]\n //~^ WARNING lint name `test_lint` is deprecated and may not have an effect in the future"}, {"sha": "c727cfc7015414640318faec1babf46b7d46993c", "filename": "src/test/ui-fulldeps/lint-tool-test.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,58 +1,66 @@\n warning: lint name `test_lint` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n-  --> $DIR/lint-tool-test.rs:8:23\n+  --> $DIR/lint-tool-test.rs:9:23\n    |\n LL | #![cfg_attr(foo, warn(test_lint))]\n    |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n    |\n    = note: `#[warn(renamed_and_removed_lints)]` on by default\n \n warning: lint name `clippy_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n-  --> $DIR/lint-tool-test.rs:11:9\n+  --> $DIR/lint-tool-test.rs:12:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n \n warning: lint name `test_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n-  --> $DIR/lint-tool-test.rs:25:9\n+  --> $DIR/lint-tool-test.rs:26:9\n    |\n LL | #[allow(test_group)]\n    |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n \n warning: unknown lint: `this_lint_does_not_exist`\n-  --> $DIR/lint-tool-test.rs:27:8\n+  --> $DIR/lint-tool-test.rs:28:8\n    |\n LL | #[deny(this_lint_does_not_exist)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unknown_lints)]` on by default\n \n warning: lint name `test_lint` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n-  --> $DIR/lint-tool-test.rs:8:23\n+  --> $DIR/lint-tool-test.rs:9:23\n    |\n LL | #![cfg_attr(foo, warn(test_lint))]\n    |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lint-tool-test.rs:6:1\n+   |\n+LL | #![plugin(lint_tool_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: item is named 'lintme'\n-  --> $DIR/lint-tool-test.rs:14:1\n+  --> $DIR/lint-tool-test.rs:15:1\n    |\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-tool-test.rs:11:9\n+  --> $DIR/lint-tool-test.rs:12:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^\n    = note: `#[deny(clippy::test_lint)]` implied by `#[deny(clippy::group)]`\n \n error: item is named 'lintmetoo'\n-  --> $DIR/lint-tool-test.rs:22:5\n+  --> $DIR/lint-tool-test.rs:23:5\n    |\n LL |     fn lintmetoo() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-tool-test.rs:11:9\n+  --> $DIR/lint-tool-test.rs:12:9\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^"}, {"sha": "ebc092671a77c14e417509015cf22447760f79a7", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/llvm-pass-plugin.rs:6:1\n+   |\n+LL | #![plugin(llvm_pass_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "509331ceb218f729613d39a88b33e4f7a2666bda", "filename": "src/test/ui-fulldeps/lto-syntax-extension.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flto-syntax-extension.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Flto-syntax-extension.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flto-syntax-extension.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/lto-syntax-extension.rs:9:1\n+   |\n+LL | #![plugin(lto_syntax_extension_plugin)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "b5038a58249d2b7c5b20fc07765386988428ae53", "filename": "src/test/ui-fulldeps/macro-crate-rlib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -5,5 +5,6 @@\n #![feature(plugin)]\n #![plugin(rlib_crate_test)]\n //~^ ERROR: plugin `rlib_crate_test` only found in rlib format, but must be available in dylib format\n+//~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "47d5ecb3742a878205487cf7acf3d2720482b898", "filename": "src/test/ui-fulldeps/macro-crate-rlib.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,5 +4,13 @@ error[E0457]: plugin `rlib_crate_test` only found in rlib format, but must be av\n LL | #![plugin(rlib_crate_test)]\n    |           ^^^^^^^^^^^^^^^\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/macro-crate-rlib.rs:6:1\n+   |\n+LL | #![plugin(rlib_crate_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error\n "}, {"sha": "68e143d86eeb2ec800956811ea79f1a6bc4d953c", "filename": "src/test/ui-fulldeps/outlive-expansion-phase.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Foutlive-expansion-phase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Foutlive-expansion-phase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Foutlive-expansion-phase.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/outlive-expansion-phase.rs:6:1\n+   |\n+LL | #![plugin(outlive_expansion_phase)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "0d01a859df8ef2d84202333957075181ed9c83ed", "filename": "src/test/ui-fulldeps/plugin-args-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/plugin-args-1.rs:6:1\n+   |\n+LL | #![plugin(plugin_args)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "2bbabd2013817a6176eb477e299a0865ef4875c3", "filename": "src/test/ui-fulldeps/plugin-args-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/plugin-args-2.rs:6:1\n+   |\n+LL | #![plugin(plugin_args())]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "bf4108bd7f8df4b91c4aa264fa2e4b304bf8628e", "filename": "src/test/ui-fulldeps/plugin-args-3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/plugin-args-3.rs:6:1\n+   |\n+LL | #![plugin(plugin_args(hello(there), how(are=\"you\")))]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "dd7c009388e2c0cc01bccffc6aa667914940d3bd", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(plugin)]\n #![plugin(attr_plugin_test)]\n+//~^ WARN use of deprecated attribute `plugin`\n #![deny(unused_attributes)]\n \n #[baz]"}, {"sha": "a045782a95f778b09b5bc018787f80310dec4c78", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,23 +1,31 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/plugin-attr-register-deny.rs:5:1\n+   |\n+LL | #![plugin(attr_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: unused attribute\n-  --> $DIR/plugin-attr-register-deny.rs:14:5\n+  --> $DIR/plugin-attr-register-deny.rs:15:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/plugin-attr-register-deny.rs:6:9\n+  --> $DIR/plugin-attr-register-deny.rs:7:9\n    |\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/plugin-attr-register-deny.rs:14:5\n+  --> $DIR/plugin-attr-register-deny.rs:15:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n \n error: unused attribute\n-  --> $DIR/plugin-attr-register-deny.rs:11:1\n+  --> $DIR/plugin-attr-register-deny.rs:12:1\n    |\n LL | #[foo]\n    | ^^^^^^"}, {"sha": "e92b020c0b41359732673d7bfaa3256b23e5d65f", "filename": "src/test/ui-fulldeps/plugin-reexport.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(plugin)]\n #![plugin(attr_plugin_test)]\n+//~^ WARN use of deprecated attribute `plugin`\n \n pub use mac as reexport; //~ ERROR `mac` is private, and cannot be re-exported\n "}, {"sha": "52d27c32897a5d8e613c43812dd100778a348916", "filename": "src/test/ui-fulldeps/plugin-reexport.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,15 +1,23 @@\n error[E0364]: `mac` is private, and cannot be re-exported\n-  --> $DIR/plugin-reexport.rs:8:9\n+  --> $DIR/plugin-reexport.rs:9:9\n    |\n LL | pub use mac as reexport;\n    |         ^^^^^^^^^^^^^^^\n    |\n note: consider marking `mac` as `pub` in the imported module\n-  --> $DIR/plugin-reexport.rs:8:9\n+  --> $DIR/plugin-reexport.rs:9:9\n    |\n LL | pub use mac as reexport;\n    |         ^^^^^^^^^^^^^^^\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/plugin-reexport.rs:6:1\n+   |\n+LL | #![plugin(attr_plugin_test)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0364`."}, {"sha": "7ac619185a1e07809ab7a13a042e3eee4af53d66", "filename": "src/test/ui-fulldeps/roman-numerals-macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,8 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/roman-numerals-macro.rs:6:1\n+   |\n+LL | #![plugin(roman_numerals)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+"}, {"sha": "db14f9c9bf6950b68aaa8b65a7b09d277f762bd8", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -18,7 +18,7 @@ error[E0392]: parameter `T` is never used\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter\n    |\n-   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7b0bfe372757a361f76881515f71673897a9f79c", "filename": "src/test/ui/error-codes/E0392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,7 +4,7 @@ error[E0392]: parameter `T` is never used\n LL | enum Foo<T> { Bar }\n    |          ^ unused parameter\n    |\n-   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to previous error\n "}, {"sha": "8c567ece1875b776eb3b1591bd8c26f2ed3cbf0e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -32,9 +32,13 @@\n \n // check-pass\n \n-#![feature(test)]\n+#![feature(test, plugin_registrar)]\n #![warn(unused_attributes, unknown_lints)]\n \n+// Exception, a gated and deprecated attribute.\n+\n+#![plugin_registrar] //~ WARN unused attribute\n+\n // UNGATED WHITE-LISTED BUILT-IN ATTRIBUTES\n \n #![warn(x5400)] //~ WARN unknown lint: `x5400`\n@@ -43,7 +47,6 @@\n #![deny(x5100)] //~ WARN unknown lint: `x5100`\n #![macro_use] // (allowed if no argument; see issue-43160-gating-of-macro_use.rs)\n #![macro_export] //~ WARN unused attribute\n-#![plugin_registrar] //~ WARN unused attribute\n // skipping testing of cfg\n // skipping testing of cfg_attr\n #![main] //~ WARN unused attribute"}, {"sha": "62a6d97dfe83b04b74e8d7def179ead5698ee881", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 239, "deletions": 203, "changes": 442, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,5 +1,5 @@\n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:44:9\n    |\n LL | #![warn(x5400)]\n    |         ^^^^^\n@@ -11,205 +11,241 @@ LL | #![warn(unused_attributes, unknown_lints)]\n    |                            ^^^^^^^^^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:41:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:45:10\n    |\n LL | #![allow(x5300)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:42:11\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:11\n    |\n LL | #![forbid(x5200)]\n    |           ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:47:9\n    |\n LL | #![deny(x5100)]\n    |         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:101:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:104:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:104:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:107:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:107:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:110:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:110:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:113:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:113:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:116:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:116:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:119:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:132:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:132:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:135:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:135:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:138:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:151:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:151:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:154:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:154:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:157:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:170:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:170:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:173:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:173:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:176:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:460:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:460:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:463:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: consider an outer attribute, `#[macro_use]` mod ...\n \n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:17\n+   |\n+LL |     mod inner { #![plugin_registrar] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n+   |\n+LL |     #[plugin_registrar] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n+   |\n+LL |     #[plugin_registrar] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:230:5\n+   |\n+LL |     #[plugin_registrar] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:1\n+   |\n+LL | #[plugin_registrar]\n+   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:1\n+   |\n+LL | #![plugin_registrar]\n+   | ^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+\n warning: use of deprecated attribute `crate_id`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:87:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:90:1\n    |\n LL | #![crate_id = \"10\"]\n    | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated attribute `no_start`: no longer used.\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:92:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:95:1\n    |\n LL | #![no_start]\n    | ^^^^^^^^^^^^ help: remove this attribute\n \n warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:90:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:93:12\n    |\n LL | #![feature(rust1)]\n    |            ^^^^^\n    |\n    = note: `#[warn(stable_features)]` on by default\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:181:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:184:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n@@ -221,979 +257,979 @@ LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:184:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:187:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:187:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:190:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:190:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:193:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:17\n    |\n LL |     mod inner { #![macro_export] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:203:5\n    |\n LL |     #[macro_export] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:203:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:206:5\n    |\n LL |     #[macro_export] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:206:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:209:5\n    |\n LL |     #[macro_export] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:209:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:212:5\n    |\n LL |     #[macro_export] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:1\n    |\n LL | #[macro_export]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n    |\n LL |     #[plugin_registrar] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n    |\n LL |     #[plugin_registrar] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:230:5\n    |\n LL |     #[plugin_registrar] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:1\n    |\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:234:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:237:17\n    |\n LL |     mod inner { #![main] }\n    |                 ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:239:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:242:5\n    |\n LL |     #[main] struct S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:242:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:245:5\n    |\n LL |     #[main] type T = S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:245:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:248:5\n    |\n LL |     #[main] impl S { }\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:231:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:234:1\n    |\n LL | #[main]\n    | ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:252:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:255:17\n    |\n LL |     mod inner { #![start] }\n    |                 ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:257:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:260:5\n    |\n LL |     #[start] struct S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:260:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:263:5\n    |\n LL |     #[start] type T = S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:263:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:266:5\n    |\n LL |     #[start] impl S { }\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:249:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:252:1\n    |\n LL | #[start]\n    | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:319:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:319:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:322:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:322:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:325:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:325:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:328:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:332:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:335:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:335:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:341:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:341:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:344:5\n    |\n LL |     #[automatically_derived] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:344:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:347:5\n    |\n LL |     #[automatically_derived] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:329:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:332:1\n    |\n LL | #[automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:17\n    |\n LL |     mod inner { #![no_link] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n    |\n LL |     #[no_link] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:5\n    |\n LL |     #[no_link] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n    |\n LL |     #[no_link]type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:5\n    |\n LL |     #[no_link] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:1\n    |\n LL | #[no_link]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:17\n    |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:5\n    |\n LL |     #[should_panic] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:398:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:5\n    |\n LL |     #[ignore] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:399:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:17\n    |\n LL |     mod inner { #![no_implicit_prelude] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:418:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:1\n    |\n LL | #[no_implicit_prelude]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:440:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:437:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:440:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:463:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:472:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:472:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:491:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:491:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:638:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:638:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:646:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:646:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:650:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:650:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:634:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:634:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:659:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:659:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:730:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:730:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:45:1\n-   |\n-LL | #![macro_export]\n-   | ^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:1\n    |\n LL | #![plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:1\n    |\n+LL | #![macro_export]\n+   | ^^^^^^^^^^^^^^^^\n+\n+warning: unused attribute\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:1\n+   |\n LL | #![main]\n    | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n    |\n LL | #![start]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n    |\n LL | #![repr()]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n    |\n LL | #![path = \"3800\"]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n    |\n LL | #![automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:61:1\n    |\n LL | #![no_link]\n    | ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:63:1\n    |\n LL | #![should_panic]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:61:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n    |\n LL | #![ignore]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:70:1\n    |\n LL | #![proc_macro_derive()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "8904ec0448adab52de62e374787d71a6d86df487", "filename": "src/test/ui/feature-gates/feature-gate-plugin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,6 +1,7 @@\n // Test that `#![plugin(...)]` attribute is gated by `plugin` feature gate\n \n #![plugin(foo)]\n-//~^ ERROR compiler plugins are experimental and possibly buggy\n+//~^ ERROR compiler plugins are deprecated\n+//~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "d1eee8cc58895fdfb784dce24e844bde870d90f0", "filename": "src/test/ui/feature-gates/feature-gate-plugin.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: compiler plugins are experimental and possibly buggy\n+error[E0658]: compiler plugins are deprecated\n   --> $DIR/feature-gate-plugin.rs:3:1\n    |\n LL | #![plugin(foo)]\n@@ -7,6 +7,14 @@ LL | #![plugin(foo)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/feature-gate-plugin.rs:3:1\n+   |\n+LL | #![plugin(foo)]\n+   | ^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "80e4aa76b4771e870193027817c6a68c3851f001", "filename": "src/test/ui/feature-gates/feature-gate-plugin_registrar.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -3,6 +3,9 @@\n \n // the registration function isn't typechecked yet\n #[plugin_registrar]\n+//~^ ERROR compiler plugins are deprecated\n+//~| WARN use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated\n pub fn registrar() {}\n-//~^ ERROR compiler plugins are experimental\n+//~^ ERROR compiler plugins are experimental and possibly buggy\n+\n fn main() {}"}, {"sha": "1c4ccac1dcffb07ef531207a88a81db049bfd64e", "filename": "src/test/ui/feature-gates/feature-gate-plugin_registrar.stderr", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,12 +1,29 @@\n error[E0658]: compiler plugins are experimental and possibly buggy\n-  --> $DIR/feature-gate-plugin_registrar.rs:6:1\n+  --> $DIR/feature-gate-plugin_registrar.rs:8:1\n    |\n LL | pub fn registrar() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin_registrar)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: compiler plugins are deprecated\n+  --> $DIR/feature-gate-plugin_registrar.rs:5:1\n+   |\n+LL | #[plugin_registrar]\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n+   = help: add `#![feature(plugin_registrar)]` to the crate attributes to enable\n+\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/feature-gate-plugin_registrar.rs:5:1\n+   |\n+LL | #[plugin_registrar]\n+   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "79e59f76311fd1d8391ce17c903b9e8063bdbd4b", "filename": "src/test/ui/gated-bad-feature.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -30,4 +30,5 @@ LL | #![feature = \"foo\"]\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0557`.\n+Some errors have detailed explanations: E0556, E0557.\n+For more information about an error, try `rustc --explain E0556`."}, {"sha": "cc93794e8fcdc1ab5642df7811d7d00d1e3a7d68", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,20 @@\n+#![crate_type=\"lib\"]\n+\n+// rust-lang/rust#61631: The use of `Self` in the defaults of generic\n+// types in a *trait* definition are allowed.\n+//\n+// It *must* be accepted; we have used this pattern extensively since\n+// Rust 1.0 (see e.g. `trait Add<Rhs=Self>`).\n+trait Tnobound<P = Self> {}\n+\n+impl Tnobound for () { }\n+\n+// This variant is accepted at the definition site; but it will be\n+// rejected at every possible usage site (such as the one immediately\n+// below). Maybe one day we will attempt to catch it at the definition\n+// site, but today this is accepted due to compiler implementation\n+// limitations.\n+trait Tsized<P: Sized = [Self]> {}\n+\n+impl Tsized for () {}\n+//~^ ERROR the size for values of type `[()]` cannot be known at compilation time [E0277]"}, {"sha": "ea0664c48d4d8b6b862640ec9b78d55d6fe509d2", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n+   |\n+LL | impl Tsized for () {}\n+   |      ^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[()]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b560cc2ce7060d33f03ca8c61584136de9a5e8c7", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,45 @@\n+#![crate_type=\"lib\"]\n+\n+// rust-lang/rust#61631: Uses of `Self` in the defaults of generic\n+// types for ADT's are not allowed. We justify this because the `Self`\n+// type could be considered the \"final\" type parameter, that is only\n+// well-defined after all of the other type parameters on the ADT have\n+// been instantiated.\n+//\n+// These were previously were ICE'ing at the usage point anyway (see\n+// `demo_usages` below), so there should not be any backwards\n+// compatibility concern.\n+\n+struct Snobound<'a, P = Self> { x: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+// Disallowing `Self` in defaults sidesteps need to check the bounds\n+// on the defaults in cases like these.\n+\n+struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+fn demo_usages() {\n+    // An ICE means you only get the error from the first line of the\n+    // demo; comment each out to observe the other ICEs when trying\n+    // this out on older versions of Rust.\n+\n+    let _ice: Snobound;\n+    let _ice: Enobound;\n+    let _ice: Unobound;\n+    let _ice: Ssized;\n+    let _ice: Esized;\n+    let _ice: Usized;\n+}"}, {"sha": "689ffbd0febc2e7bf1ea8a7c076b0bf98f3c7158", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,39 @@\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:13:25\n+   |\n+LL | struct Snobound<'a, P = Self> { x: Option<&'a P> }\n+   |                         ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:16:23\n+   |\n+LL | enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n+   |                       ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:19:24\n+   |\n+LL | union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n+   |                        ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:25:31\n+   |\n+LL | struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n+   |                               ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:28:29\n+   |\n+LL | enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n+   |                             ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:31:30\n+   |\n+LL | union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n+   |                              ^^^^ `Self` in type parameter default\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0735`."}, {"sha": "dfc663e4a79f84b88916c81b63d08dd643077aa3", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -14,7 +14,7 @@ error[E0392]: parameter `T` is never used\n LL | enum Bar<T> { What }\n    |          ^ unused parameter\n    |\n-   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ba7389d5db69491d7d082681c59079199fa2b89", "filename": "src/test/ui/invalid/invalid-plugin-attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -3,5 +3,6 @@\n \n #[plugin(bla)]  //~ ERROR unused attribute\n                 //~^ ERROR should be an inner attribute\n+//~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "d14a7524bf2d9d8a981c167e1f3165ef4c82999f", "filename": "src/test/ui/invalid/invalid-plugin-attr.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,3 +1,11 @@\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/invalid-plugin-attr.rs:4:1\n+   |\n+LL | #[plugin(bla)]\n+   | ^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: unused attribute\n   --> $DIR/invalid-plugin-attr.rs:4:1\n    |"}, {"sha": "25f32b661031f0a0cf31b30d3007ec120cbba9fa", "filename": "src/test/ui/issues/issue-17904-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,7 +4,7 @@ error[E0392]: parameter `T` is never used\n LL | struct Foo<T> where T: Copy;\n    |            ^ unused parameter\n    |\n-   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to previous error\n "}, {"sha": "6ecb4e736acd926e68e05d9c57824647d3f5e628", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,7 +4,7 @@ error[E0392]: parameter `T` is never used\n LL | struct NoData<T>;\n    |               ^ unused parameter\n    |\n-   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:1"}, {"sha": "a9516b8e5e51b8d22c77bdc2254391d3bf3c91a1", "filename": "src/test/ui/issues/issue-36299.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | struct Foo<'a, A> {}\n    |            ^^ unused parameter\n    |\n-   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `A` is never used\n   --> $DIR/issue-36299.rs:1:16\n    |\n LL | struct Foo<'a, A> {}\n    |                ^ unused parameter\n    |\n-   = help: consider removing `A`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `A`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe48ea158de64651a51f0f87795d7e6c0975b381", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -16,7 +16,7 @@ error[E0392]: parameter `Self` is never used\n LL | struct Foo<Self>(Self);\n    |            ^^^^ unused parameter\n    |\n-   = help: consider removing `Self`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `Self`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fadb9cdd1a3d19f55e551fad6b10888c702b6b48", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -20,7 +20,7 @@ error[E0392]: parameter `T` is never used\n LL | struct Foo<T: ?Hash> { }\n    |            ^ unused parameter\n    |\n-   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4926691f3b568134a82054a31a7ec111b0c3e8f5", "filename": "src/test/ui/issues/issue-60218.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-60218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-60218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for #60218\n+//\n+// This was reported to cause ICEs.\n+\n+use std::iter::Map;\n+\n+pub trait Foo {}\n+\n+pub fn trigger_error<I, F>(iterable: I, functor: F)\n+where\n+    for<'t> &'t I: IntoIterator,\n+for<'t> Map<<&'t I as IntoIterator>::IntoIter, F>: Iterator,\n+for<'t> <Map<<&'t I as IntoIterator>::IntoIter, F> as Iterator>::Item: Foo,\n+{\n+}\n+\n+fn main() {\n+    trigger_error(vec![], |x: &u32| x) //~ ERROR E0277\n+}"}, {"sha": "a9970cc109699909c00bc092ca2ecefe0e448408", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `for<'t> <std::iter::Map<<&'t _ as std::iter::IntoIterator>::IntoIter, _> as std::iter::Iterator>::Item: Foo` is not satisfied\n+  --> $DIR/issue-60218.rs:18:5\n+   |\n+LL | pub fn trigger_error<I, F>(iterable: I, functor: F)\n+   |        -------------\n+...\n+LL | for<'t> <Map<<&'t I as IntoIterator>::IntoIter, F> as Iterator>::Item: Foo,\n+   |                                                                        --- required by this bound in `trigger_error`\n+...\n+LL |     trigger_error(vec![], |x: &u32| x)\n+   |     ^^^^^^^^^^^^^ the trait `for<'t> Foo` is not implemented for `<std::iter::Map<<&'t _ as std::iter::IntoIterator>::IntoIter, _> as std::iter::Iterator>::Item`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d4c1a2a16795b19b5579931ac42bc97e4827d858", "filename": "src/test/ui/malformed/malformed-plugin-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,5 @@\n #![feature(plugin)]\n #![plugin] //~ ERROR malformed `plugin` attribute\n+//~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "d8416c409542b86f995dc1ec7e0070820b52cc09", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,5 +4,13 @@ error: malformed `plugin` attribute input\n LL | #![plugin]\n    | ^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/malformed-plugin-1.rs:2:1\n+   |\n+LL | #![plugin]\n+   | ^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error\n "}, {"sha": "ba80d97a3c276ee3da582039c72fd9378a06c00c", "filename": "src/test/ui/malformed/malformed-plugin-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,5 @@\n #![feature(plugin)]\n #![plugin=\"bleh\"] //~ ERROR malformed `plugin` attribute\n+//~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "34383ba082812d0a92e6281cf528031fc992443a", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,5 +4,13 @@ error: malformed `plugin` attribute input\n LL | #![plugin=\"bleh\"]\n    | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/malformed-plugin-2.rs:2:1\n+   |\n+LL | #![plugin=\"bleh\"]\n+   | ^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error\n "}, {"sha": "d2bd8f9f8dc473a0553e5796b5be66f0b86a13c0", "filename": "src/test/ui/malformed/malformed-plugin-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,5 @@\n #![feature(plugin)]\n #![plugin(foo=\"bleh\")] //~ ERROR malformed `plugin` attribute\n+//~| WARN use of deprecated attribute `plugin`: compiler plugins are deprecated\n \n fn main() {}"}, {"sha": "71f607d68a4afa68e7f157d30fe4ae1ba12eb5b0", "filename": "src/test/ui/malformed/malformed-plugin-3.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,5 +4,13 @@ error[E0498]: malformed `plugin` attribute\n LL | #![plugin(foo=\"bleh\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^ malformed attribute\n \n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/malformed-plugin-3.rs:2:1\n+   |\n+LL | #![plugin(foo=\"bleh\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n error: aborting due to previous error\n "}, {"sha": "3a7895a08c6ef76fd03b0f65809f5d0613444e77", "filename": "src/test/ui/multiple-plugin-registrars.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,3 +1,17 @@\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/multiple-plugin-registrars.rs:6:1\n+   |\n+LL | #[plugin_registrar]\n+   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+   = note: `#[warn(deprecated)]` on by default\n+\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+  --> $DIR/multiple-plugin-registrars.rs:9:1\n+   |\n+LL | #[plugin_registrar]\n+   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+\n error: multiple plugin registration functions found\n    |\n note: one is here"}, {"sha": "dea5ea04aa8505155a5f2138a368782af1ef8698", "filename": "src/test/ui/proc-macro/auxiliary/mixed-site-span.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmixed-site-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmixed-site-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmixed-site-span.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,42 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro_hygiene)]\n+#![feature(proc_macro_mixed_site)]\n+#![feature(proc_macro_quote)]\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn proc_macro_rules(input: TokenStream) -> TokenStream {\n+    if input.is_empty() {\n+        let id = |s| TokenTree::from(Ident::new(s, Span::mixed_site()));\n+        let item_def = id(\"ItemDef\");\n+        let local_def = id(\"local_def\");\n+        let item_use = id(\"ItemUse\");\n+        let local_use = id(\"local_use\");\n+        let mut single_quote = Punct::new('\\'', Spacing::Joint);\n+        single_quote.set_span(Span::mixed_site());\n+        let label_use: TokenStream = [\n+            TokenTree::from(single_quote),\n+            id(\"label_use\"),\n+        ].iter().cloned().collect();\n+        quote!(\n+            struct $item_def;\n+            let $local_def = 0;\n+\n+            $item_use; // OK\n+            $local_use; // ERROR\n+            break $label_use; // ERROR\n+        )\n+    } else {\n+        let mut dollar_crate = input.into_iter().next().unwrap();\n+        dollar_crate.set_span(Span::mixed_site());\n+        quote!(\n+            type A = $dollar_crate::ItemUse;\n+        )\n+    }\n+}"}, {"sha": "619b2fd5321fff0f4026f3cdd0c750383256cd54", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -59,54 +59,54 @@ PRINT-ATTR RE-COLLECTED (DISPLAY): struct B (identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"B\",\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"identity\",\n-                span: #8 bytes(LO..HI),\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: '!',\n                 spacing: Alone,\n-                span: #8 bytes(LO..HI),\n+                span: #10 bytes(LO..HI),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"$crate\",\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                     Ident {\n                         ident: \"S\",\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                 ],\n-                span: #8 bytes(LO..HI),\n+                span: #10 bytes(LO..HI),\n             },\n         ],\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n ]"}, {"sha": "5fdc6f8ee96ca44d3071b9294b049eaa59b295d2", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -124,121 +124,121 @@ PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n         ],\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n         ],\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n         ],\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n ]"}, {"sha": "9de57da5af4348f690cb05217623e6e64bbafb1f", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,5 @@\n // aux-build:invalid-punct-ident.rs\n+// rustc-env:RUST_BACKTRACE=0\n \n // FIXME https://github.com/rust-lang/rust/issues/59998\n // normalize-stderr-test \"thread.*panicked.*proc_macro_server.rs.*\\n\" -> \"\""}, {"sha": "fc821d29d5a0c20fe655972a82ce69018e7c1c31", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-1.rs:15:1\n+  --> $DIR/invalid-punct-ident-1.rs:16:1\n    |\n LL | invalid_punct!();\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "79f72324b1d8978ccbf3b540dcac06938223e762", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,5 @@\n // aux-build:invalid-punct-ident.rs\n+// rustc-env:RUST_BACKTRACE=0\n \n // FIXME https://github.com/rust-lang/rust/issues/59998\n // normalize-stderr-test \"thread.*panicked.*proc_macro_server.rs.*\\n\" -> \"\""}, {"sha": "8b30edaf85c093b6bfb57f76eaa8eae5ba1126f2", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-2.rs:15:1\n+  --> $DIR/invalid-punct-ident-2.rs:16:1\n    |\n LL | invalid_ident!();\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "d01e9b699cac56972d7538d2caa319d7d505b8b4", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,4 +1,5 @@\n // aux-build:invalid-punct-ident.rs\n+// rustc-env:RUST_BACKTRACE=0\n \n // FIXME https://github.com/rust-lang/rust/issues/59998\n // normalize-stderr-test \"thread.*panicked.*proc_macro_server.rs.*\\n\" -> \"\""}, {"sha": "d46fab08e14f026f7e430dc074d55989a2c16795", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-3.rs:15:1\n+  --> $DIR/invalid-punct-ident-3.rs:16:1\n    |\n LL | invalid_raw_ident!();\n    | ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "69c32a96ca055d119245d19f0bc777cf2db105c7", "filename": "src/test/ui/proc-macro/mixed-site-span.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,26 @@\n+// Proc macros using `mixed_site` spans exhibit usual properties of `macro_rules` hygiene.\n+\n+// aux-build:mixed-site-span.rs\n+\n+#![feature(proc_macro_hygiene)]\n+\n+#[macro_use]\n+extern crate mixed_site_span;\n+\n+struct ItemUse;\n+\n+fn main() {\n+    'label_use: loop {\n+        let local_use = 1;\n+        proc_macro_rules!();\n+        //~^ ERROR use of undeclared label `'label_use`\n+        //~| ERROR cannot find value `local_use` in this scope\n+        ItemDef; // OK\n+        local_def; //~ ERROR cannot find value `local_def` in this scope\n+    }\n+}\n+\n+macro_rules! pass_dollar_crate {\n+    () => (proc_macro_rules!($crate);) //~ ERROR cannot find type `ItemUse` in crate `$crate`\n+}\n+pass_dollar_crate!();"}, {"sha": "475e3e0ca359b3ca7776a9ca6deb433906f11b97", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -0,0 +1,49 @@\n+error[E0426]: use of undeclared label `'label_use`\n+  --> $DIR/mixed-site-span.rs:15:9\n+   |\n+LL |         proc_macro_rules!();\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         undeclared label `'label_use`\n+   |         in this macro invocation\n+\n+error[E0425]: cannot find value `local_use` in this scope\n+  --> $DIR/mixed-site-span.rs:15:9\n+   |\n+LL |         proc_macro_rules!();\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         not found in this scope\n+   |         in this macro invocation\n+\n+error[E0425]: cannot find value `local_def` in this scope\n+  --> $DIR/mixed-site-span.rs:19:9\n+   |\n+LL |         local_def;\n+   |         ^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `ItemUse` in crate `$crate`\n+  --> $DIR/auxiliary/mixed-site-span.rs:14:1\n+   |\n+LL | / pub fn proc_macro_rules(input: TokenStream) -> TokenStream {\n+LL | |     if input.is_empty() {\n+LL | |         let id = |s| TokenTree::from(Ident::new(s, Span::mixed_site()));\n+LL | |         let item_def = id(\"ItemDef\");\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^ not found in `$crate`\n+   | \n+  ::: $DIR/mixed-site-span.rs:26:1\n+   |\n+LL |   pass_dollar_crate!();\n+   |   --------------------- in this macro invocation\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use ItemUse;\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0412, E0425, E0426.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "751a4c1021ebb85ddb2def05bc6fa79ebaaa20d3", "filename": "src/test/ui/regions/region-bounds-on-objects-and-type-parameters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -27,7 +27,7 @@ error[E0392]: parameter `'c` is never used\n LL | struct Foo<'a,'b,'c> {\n    |                  ^^ unused parameter\n    |\n-   = help: consider removing `'c`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'c`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0af24dcedfbea2328f058edf013a09933b986c6f", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -76,7 +76,7 @@ error[E0392]: parameter `'Self` is never used\n LL | struct Bar<'Self>;\n    |            ^^^^^ unused parameter\n    |\n-   = help: consider removing `'Self`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'Self`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "b0679ea1d3df2daf38c3174e8d599e6972a30d36", "filename": "src/test/ui/test-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ftest-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ftest-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.rs?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -3,6 +3,7 @@\n // run-flags: --test-threads=1\n // run-fail\n // check-run-results\n+// exec-env:RUST_BACKTRACE=0\n \n // ignore-wasm no panic or subprocess support\n // ignore-emscripten no panic or subprocess support"}, {"sha": "0c8bc5020871bdb0af58058b80ee5b90e981592b", "filename": "src/test/ui/test-panic-abort.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -17,7 +17,7 @@ testing123\n testing321\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n- right: `5`', $DIR/test-panic-abort.rs:30:5\n+ right: `5`', $DIR/test-panic-abort.rs:31:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n "}, {"sha": "cf375ccae873012e84c7b16dff696afdf921ac93", "filename": "src/test/ui/variance/variance-regions-unused-direct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | struct Bivariant<'a>;\n    |                  ^^ unused parameter\n    |\n-   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'d` is never used\n   --> $DIR/variance-regions-unused-direct.rs:7:19\n    |\n LL | struct Struct<'a, 'd> {\n    |                   ^^ unused parameter\n    |\n-   = help: consider removing `'d`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'d`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7c7ba69db211029fae205a81fd1a9313c6e5d5d8", "filename": "src/test/ui/variance/variance-regions-unused-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | enum Foo<'a> {\n    |          ^^ unused parameter\n    |\n-   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-regions-unused-indirect.rs:7:10\n    |\n LL | enum Bar<'a> {\n    |          ^^ unused parameter\n    |\n-   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4cd31358031d7e3542199afd9a177137f892ae73", "filename": "src/test/ui/variance/variance-unused-region-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | struct SomeStruct<'a> { x: u32 }\n    |                   ^^ unused parameter\n    |\n-   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-unused-region-param.rs:4:15\n    |\n LL | enum SomeEnum<'a> { Nothing }\n    |               ^^ unused parameter\n    |\n-   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b648e3c1d5f52adba4958281b0a3096d1260ef79", "filename": "src/test/ui/variance/variance-unused-type-param.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31d75c4e9c5318e880601d3c2cc71e5df094a120/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr?ref=31d75c4e9c5318e880601d3c2cc71e5df094a120", "patch": "@@ -4,23 +4,23 @@ error[E0392]: parameter `A` is never used\n LL | struct SomeStruct<A> { x: u32 }\n    |                   ^ unused parameter\n    |\n-   = help: consider removing `A`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `A`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `A` is never used\n   --> $DIR/variance-unused-type-param.rs:9:15\n    |\n LL | enum SomeEnum<A> { Nothing }\n    |               ^ unused parameter\n    |\n-   = help: consider removing `A`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `A`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/variance-unused-type-param.rs:13:15\n    |\n LL | enum ListCell<T> {\n    |               ^ unused parameter\n    |\n-   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 3 previous errors\n "}]}