{"sha": "2f36b54f0f33427e926872935c325a660967af6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzZiNTRmMGYzMzQyN2U5MjY4NzI5MzVjMzI1YTY2MDk2N2FmNmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-15T00:09:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-19T17:13:44Z"}, "message": "Emit specific error for struct literal in conditions", "tree": {"sha": "1ed541f3fee0898fef1b7676da1c248effc29f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed541f3fee0898fef1b7676da1c248effc29f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f36b54f0f33427e926872935c325a660967af6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f36b54f0f33427e926872935c325a660967af6f", "html_url": "https://github.com/rust-lang/rust/commit/2f36b54f0f33427e926872935c325a660967af6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f36b54f0f33427e926872935c325a660967af6f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2bbf7debaab60be33bd8008a71bca69576945a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bbf7debaab60be33bd8008a71bca69576945a0", "html_url": "https://github.com/rust-lang/rust/commit/a2bbf7debaab60be33bd8008a71bca69576945a0"}], "stats": {"total": 369, "additions": 162, "deletions": 207}, "files": [{"sha": "a2f6d9713f02632fa6c76c3df108330996ea9edb", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -897,8 +897,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         self.cannot_borrow_path_as_mutable(error_span, &descr, Origin::Ast)\n                     }\n                     BorrowViolation(euv::ClosureInvocation) => {\n-                        span_bug!(err.span,\n-                            \"err_mutbl with a closure invocation\");\n+                        span_bug!(err.span, \"err_mutbl with a closure invocation\");\n                     }\n                 };\n \n@@ -1096,7 +1095,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             BorrowViolation(euv::MatchDiscriminant) => {\n                 \"cannot borrow data mutably\"\n             }\n-\n             BorrowViolation(euv::ClosureInvocation) => {\n                 is_closure = true;\n                 \"closure invocation\""}, {"sha": "7d130470c6ac1b9e6e8fdc4860bf1b4bf8c021ac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -2855,11 +2855,13 @@ impl<'a> Parser<'a> {\n                         let (delim, tts) = self.expect_delimited_token_tree()?;\n                         hi = self.prev_span;\n                         ex = ExprKind::Mac(respan(lo.to(hi), Mac_ { path, tts, delim }));\n-                    } else if self.check(&token::OpenDelim(token::Brace)) &&\n-                              !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL) {\n-                        // This is a struct literal, unless we're prohibited\n-                        // from parsing struct literals here.\n-                        return self.parse_struct_expr(lo, path, attrs);\n+                    } else if self.check(&token::OpenDelim(token::Brace)) {\n+                        if let Some(expr) = self.should_parse_struct_expr(lo, path.clone(), attrs.clone()) {\n+                            return expr;\n+                        } else {\n+                            hi = path.span;\n+                            ex = ExprKind::Path(None, path);\n+                        }\n                     } else {\n                         hi = path.span;\n                         ex = ExprKind::Path(None, path);\n@@ -2902,6 +2904,51 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    fn should_parse_struct_expr(\n+        &mut self,\n+        lo: Span,\n+        path: ast::Path,\n+        attrs: ThinVec<Attribute>,\n+    ) -> Option<PResult<'a, P<Expr>>> {\n+        let could_be_struct = self.look_ahead(1, |t| t.is_ident()) && (\n+            self.look_ahead(2, |t| *t == token::Colon)\n+            || self.look_ahead(2, |t| *t == token::Comma)\n+            // We could also check for `token::CloseDelim(token::Brace)`, but that would\n+            // have false positives in the case of `if x == y { z } { a }`.\n+        );\n+        let mut bad_struct = false;\n+        let mut parse_struct = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n+        if self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL) && could_be_struct {\n+            // This is a struct literal, but we don't can't accept them here\n+            bad_struct = true;\n+            parse_struct = true;\n+        }\n+        if parse_struct {\n+            match self.parse_struct_expr(lo, path, attrs) {\n+                Err(err) => return Some(Err(err)),\n+                Ok(expr) => {\n+                    if bad_struct {\n+                        let mut err = self.diagnostic().struct_span_err(\n+                            expr.span,\n+                            \"struct literals are not allowed here\",\n+                        );\n+                        err.multipart_suggestion(\n+                            \"surround the struct literal with parenthesis\",\n+                            vec![\n+                                (lo.shrink_to_lo(), \"(\".to_string()),\n+                                (expr.span.shrink_to_hi(), \")\".to_string()),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+                    return Some(Ok(expr));\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n     fn parse_struct_expr(&mut self, lo: Span, pth: ast::Path, mut attrs: ThinVec<Attribute>)\n                          -> PResult<'a, P<Expr>> {\n         let struct_sp = lo.to(self.prev_span);"}, {"sha": "5080a5e0599875ac88ae0acb9b735d87af6518fd", "filename": "src/test/ui/error-codes/E0423.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -10,15 +10,13 @@ fn bar() {\n     struct T {}\n \n     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n-    //~^ ERROR E0423\n-    //~|  expected type, found `1`\n+    //~^ ERROR struct literals are not allowed here\n     if T {} == T {} { println!(\"Ok\"); }\n     //~^ ERROR E0423\n     //~| ERROR expected expression, found `==`\n }\n \n fn foo() {\n     for _ in std::ops::Range { start: 0, end: 10 } {}\n-    //~^ ERROR E0423\n-    //~| ERROR expected type, found `0`\n+    //~^ ERROR struct literals are not allowed here\n }"}, {"sha": "5cb7121a0d1c38e0731fddfb569223922d8df9cd", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 15, "deletions": 39, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -1,36 +1,28 @@\n-error: expected type, found `1`\n-  --> $DIR/E0423.rs:12:39\n+error: struct literals are not allowed here\n+  --> $DIR/E0423.rs:12:32\n    |\n LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n-   |                                       ^ expecting a type here because of type ascription\n-   |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/E0423.rs:12:36\n+   |                                ^^^^^^^^^^^^^^^^\n+help: surround the struct literal with parenthesis\n    |\n-LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n-   |                                    ^\n-   = help: this might be indicative of a syntax error elsewhere\n+LL |     if let S { x: _x, y: 2 } = (S { x: 1, y: 2 }) { println!(\"Ok\"); }\n+   |                                ^                ^\n \n error: expected expression, found `==`\n-  --> $DIR/E0423.rs:15:13\n+  --> $DIR/E0423.rs:14:13\n    |\n LL |     if T {} == T {} { println!(\"Ok\"); }\n    |             ^^ expected expression\n \n-error: expected type, found `0`\n-  --> $DIR/E0423.rs:21:39\n+error: struct literals are not allowed here\n+  --> $DIR/E0423.rs:20:14\n    |\n LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n-   |                                       ^ expecting a type here because of type ascription\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: surround the struct literal with parenthesis\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/E0423.rs:21:32\n-   |\n-LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n-   |                                ^^^^^\n-   = help: this might be indicative of a syntax error elsewhere\n+LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}\n+   |              ^                                     ^\n \n error[E0423]: expected function, found struct `Foo`\n   --> $DIR/E0423.rs:4:13\n@@ -41,30 +33,14 @@ LL |     let f = Foo();\n    |             did you mean `Foo { /* fields */ }`?\n    |             help: a function with a similar name exists: `foo`\n \n-error[E0423]: expected value, found struct `S`\n-  --> $DIR/E0423.rs:12:32\n-   |\n-LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n-   |                                ^---------------\n-   |                                |\n-   |                                help: surround the struct literal with parenthesis: `(S { x: 1, y: 2 })`\n-\n error[E0423]: expected value, found struct `T`\n-  --> $DIR/E0423.rs:15:8\n+  --> $DIR/E0423.rs:14:8\n    |\n LL |     if T {} == T {} { println!(\"Ok\"); }\n    |        ^---\n    |        |\n    |        help: surround the struct literal with parenthesis: `(T {})`\n \n-error[E0423]: expected value, found struct `std::ops::Range`\n-  --> $DIR/E0423.rs:21:14\n-   |\n-LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n-   |              ^^^^^^^^^^^^^^^----------------------\n-   |              |\n-   |              help: surround the struct literal with parenthesis: `(std::ops::Range { start: 0, end: 10 })`\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}, {"sha": "3227ae37bfd0520b7451dc69fb371e5619934300", "filename": "src/test/ui/parser/struct-literal-in-for.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -9,9 +9,9 @@ impl Foo {\n }\n \n fn main() {\n-    for x in Foo { //~ ERROR expected value, found struct `Foo`\n-        x: 3    //~ ERROR expected type, found `3`\n-    }.hi() { //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n+    for x in Foo { //~ ERROR struct literals are not allowed here\n+        x: 3       //~^ ERROR `bool` is not an iterator\n+    }.hi() {\n         println!(\"yo\");\n     }\n }"}, {"sha": "3c3f6e7f032f6edb6e8b6812e51c93b65b516492", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -1,29 +1,30 @@\n-error: expected type, found `3`\n-  --> $DIR/struct-literal-in-for.rs:13:12\n-   |\n-LL |         x: 3\n-   |            ^ expecting a type here because of type ascription\n+error: struct literals are not allowed here\n+  --> $DIR/struct-literal-in-for.rs:12:14\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/struct-literal-in-for.rs:13:9\n+LL |       for x in Foo {\n+   |  ______________^\n+LL | |         x: 3\n+LL | |     }.hi() {\n+   | |_____^\n+help: surround the struct literal with parenthesis\n    |\n+LL |     for x in (Foo {\n LL |         x: 3\n-   |         ^\n-   = help: this might be indicative of a syntax error elsewhere\n-\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n-  --> $DIR/struct-literal-in-for.rs:14:12\n+LL |     }).hi() {\n    |\n-LL |     }.hi() {\n-   |            ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n \n-error[E0423]: expected value, found struct `Foo`\n+error[E0277]: `bool` is not an iterator\n   --> $DIR/struct-literal-in-for.rs:12:14\n    |\n-LL |     for x in Foo {\n-   |              ^^^ did you mean `(Foo { /* fields */ })`?\n+LL |       for x in Foo {\n+   |  ______________^\n+LL | |         x: 3\n+LL | |     }.hi() {\n+   | |__________^ `bool` is not an iterator\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `bool`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0423`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2ce2c8f189944d5441383d4b27c8047360bb7eae", "filename": "src/test/ui/parser/struct-literal-in-if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -9,9 +9,9 @@ impl Foo {\n }\n \n fn main() {\n-    if Foo { //~ ERROR expected value, found struct `Foo`\n-        x: 3    //~ ERROR expected type, found `3`\n-    }.hi() { //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n+    if Foo { //~ ERROR struct literals are not allowed here\n+        x: 3\n+    }.hi() {\n         println!(\"yo\");\n     }\n }"}, {"sha": "851c495abb4b0cea865e2da2c1cbb624b5c00307", "filename": "src/test/ui/parser/struct-literal-in-if.stderr", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -1,29 +1,17 @@\n-error: expected type, found `3`\n-  --> $DIR/struct-literal-in-if.rs:13:12\n-   |\n-LL |         x: 3\n-   |            ^ expecting a type here because of type ascription\n+error: struct literals are not allowed here\n+  --> $DIR/struct-literal-in-if.rs:12:8\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/struct-literal-in-if.rs:13:9\n+LL |       if Foo {\n+   |  ________^\n+LL | |         x: 3\n+LL | |     }.hi() {\n+   | |_____^\n+help: surround the struct literal with parenthesis\n    |\n+LL |     if (Foo {\n LL |         x: 3\n-   |         ^\n-   = help: this might be indicative of a syntax error elsewhere\n-\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n-  --> $DIR/struct-literal-in-if.rs:14:12\n-   |\n-LL |     }.hi() {\n-   |            ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n-\n-error[E0423]: expected value, found struct `Foo`\n-  --> $DIR/struct-literal-in-if.rs:12:8\n+LL |     }).hi() {\n    |\n-LL |     if Foo {\n-   |        ^^^ did you mean `(Foo { /* fields */ })`?\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0423`."}, {"sha": "ce132df5a888b9fe4fd226232905e951e87f80de", "filename": "src/test/ui/parser/struct-literal-in-match-discriminant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -3,11 +3,11 @@ struct Foo {\n }\n \n fn main() {\n-    match Foo { //~ ERROR expected value, found struct `Foo`\n-        x: 3    //~ ERROR expected one of `=>`, `@`, `if`, or `|`, found `:`\n+    match Foo { //~ ERROR struct literals are not allowed here\n+        x: 3\n     } {\n-        Foo { //~ ERROR mismatched types\n-            x: x //~ ERROR cannot find value `x` in this scope\n-        } => {} //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n+        Foo {\n+            x: x\n+        } => {}\n     }\n }"}, {"sha": "b8818ccba3955c2b40faacc6a7acd333f829da78", "filename": "src/test/ui/parser/struct-literal-in-match-discriminant.stderr", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -1,42 +1,16 @@\n-error: expected one of `=>`, `@`, `if`, or `|`, found `:`\n-  --> $DIR/struct-literal-in-match-discriminant.rs:7:10\n-   |\n-LL |         x: 3\n-   |          ^ expected one of `=>`, `@`, `if`, or `|` here\n-\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `=>`\n-  --> $DIR/struct-literal-in-match-discriminant.rs:11:11\n-   |\n-LL |         } => {}\n-   |           ^^ expected one of `.`, `;`, `?`, `}`, or an operator here\n-\n-error[E0423]: expected value, found struct `Foo`\n+error: struct literals are not allowed here\n   --> $DIR/struct-literal-in-match-discriminant.rs:6:11\n    |\n-LL |     match Foo {\n-   |           ^^^ did you mean `(Foo { /* fields */ })`?\n-\n-error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/struct-literal-in-match-discriminant.rs:10:16\n-   |\n-LL |             x: x\n-   |                ^ not found in this scope\n-\n-error[E0308]: mismatched types\n-  --> $DIR/struct-literal-in-match-discriminant.rs:9:9\n+LL |       match Foo {\n+   |  ___________^\n+LL | |         x: 3\n+LL | |     } {\n+   | |_____^\n+help: surround the struct literal with parenthesis\n    |\n-LL |   fn main() {\n-   |             - expected `()` because of default return type\n-...\n-LL | /         Foo {\n-LL | |             x: x\n-LL | |         } => {}\n-   | |_________^ expected (), found struct `Foo`\n+LL |     match (Foo {\n+LL |         x: 3\n+LL |     }) {\n    |\n-   = note: expected type `()`\n-              found type `Foo`\n-\n-error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0308, E0423, E0425.\n-For more information about an error, try `rustc --explain E0308`.\n+error: aborting due to previous error"}, {"sha": "5000ce85b7f7150e08865b7f3078a0b75fd202e2", "filename": "src/test/ui/parser/struct-literal-in-while.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -9,10 +9,9 @@ impl Foo {\n }\n \n fn main() {\n-    while Foo { //~ ERROR expected value, found struct `Foo`\n-        x: 3    //~ ERROR expected type, found `3`\n-    }.hi() { //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n-             //~| ERROR no method named `hi` found for type `()` in the current scope\n+    while Foo { //~ ERROR struct literals are not allowed here\n+        x: 3\n+    }.hi() {\n         println!(\"yo\");\n     }\n }"}, {"sha": "9959a57be8596a6d6b43b8b8cad7421121577d2e", "filename": "src/test/ui/parser/struct-literal-in-while.stderr", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -1,36 +1,17 @@\n-error: expected type, found `3`\n-  --> $DIR/struct-literal-in-while.rs:13:12\n-   |\n-LL |         x: 3\n-   |            ^ expecting a type here because of type ascription\n+error: struct literals are not allowed here\n+  --> $DIR/struct-literal-in-while.rs:12:11\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/struct-literal-in-while.rs:13:9\n+LL |       while Foo {\n+   |  ___________^\n+LL | |         x: 3\n+LL | |     }.hi() {\n+   | |_____^\n+help: surround the struct literal with parenthesis\n    |\n+LL |     while (Foo {\n LL |         x: 3\n-   |         ^\n-   = help: this might be indicative of a syntax error elsewhere\n-\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n-  --> $DIR/struct-literal-in-while.rs:14:12\n-   |\n-LL |     }.hi() {\n-   |            ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n-\n-error[E0423]: expected value, found struct `Foo`\n-  --> $DIR/struct-literal-in-while.rs:12:11\n-   |\n-LL |     while Foo {\n-   |           ^^^ did you mean `(Foo { /* fields */ })`?\n-\n-error[E0599]: no method named `hi` found for type `()` in the current scope\n-  --> $DIR/struct-literal-in-while.rs:14:7\n+LL |     }).hi() {\n    |\n-LL |     }.hi() {\n-   |       ^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0423, E0599.\n-For more information about an error, try `rustc --explain E0423`."}, {"sha": "e185153dcf62a04c62714d53ec3add473bc04919", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.rs?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -9,10 +9,9 @@ impl Foo {\n }\n \n fn main() {\n-    while || Foo { //~ ERROR expected value, found struct `Foo`\n-        x: 3    //~ ERROR expected type, found `3`\n-    }.hi() { //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n-             //~| ERROR no method named `hi` found for type `()` in the current scope\n+    while || Foo { //~ ERROR struct literals are not allowed here\n+        x: 3       //~^ ERROR mismatched types\n+    }.hi() {\n         println!(\"yo\");\n     }\n }"}, {"sha": "81f7a91ddb38ad2ce56c23d8ef5f37b05700b4d5", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f36b54f0f33427e926872935c325a660967af6f/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=2f36b54f0f33427e926872935c325a660967af6f", "patch": "@@ -1,36 +1,30 @@\n-error: expected type, found `3`\n-  --> $DIR/struct-literal-restrictions-in-lamda.rs:13:12\n-   |\n-LL |         x: 3\n-   |            ^ expecting a type here because of type ascription\n+error: struct literals are not allowed here\n+  --> $DIR/struct-literal-restrictions-in-lamda.rs:12:14\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n-note: this expression expects an ascribed type after the colon\n-  --> $DIR/struct-literal-restrictions-in-lamda.rs:13:9\n+LL |       while || Foo {\n+   |  ______________^\n+LL | |         x: 3\n+LL | |     }.hi() {\n+   | |_____^\n+help: surround the struct literal with parenthesis\n    |\n+LL |     while || (Foo {\n LL |         x: 3\n-   |         ^\n-   = help: this might be indicative of a syntax error elsewhere\n-\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n-  --> $DIR/struct-literal-restrictions-in-lamda.rs:14:12\n+LL |     }).hi() {\n    |\n-LL |     }.hi() {\n-   |            ^ expected one of `.`, `;`, `?`, `}`, or an operator here\n \n-error[E0423]: expected value, found struct `Foo`\n-  --> $DIR/struct-literal-restrictions-in-lamda.rs:12:14\n+error[E0308]: mismatched types\n+  --> $DIR/struct-literal-restrictions-in-lamda.rs:12:11\n    |\n-LL |     while || Foo {\n-   |              ^^^ did you mean `(Foo { /* fields */ })`?\n-\n-error[E0599]: no method named `hi` found for type `()` in the current scope\n-  --> $DIR/struct-literal-restrictions-in-lamda.rs:14:7\n+LL |       while || Foo {\n+   |  ___________^\n+LL | |         x: 3\n+LL | |     }.hi() {\n+   | |__________^ expected bool, found closure\n    |\n-LL |     }.hi() {\n-   |       ^^\n+   = note: expected type `bool`\n+              found type `[closure@$DIR/struct-literal-restrictions-in-lamda.rs:12:11: 14:11]`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0423, E0599.\n-For more information about an error, try `rustc --explain E0423`.\n+For more information about this error, try `rustc --explain E0308`."}]}