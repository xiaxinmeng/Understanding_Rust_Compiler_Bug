{"sha": "576eb2a30cab62992e36f3acaf8aedbadf58ba75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NmViMmEzMGNhYjYyOTkyZTM2ZjNhY2FmOGFlZGJhZGY1OGJhNzU=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-09-22T15:20:06Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-10-26T22:19:48Z"}, "message": "Write docs for lint / fix review nit", "tree": {"sha": "d9a739e58004ffba8d4c2e3be086f0352cc653fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9a739e58004ffba8d4c2e3be086f0352cc653fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576eb2a30cab62992e36f3acaf8aedbadf58ba75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576eb2a30cab62992e36f3acaf8aedbadf58ba75", "html_url": "https://github.com/rust-lang/rust/commit/576eb2a30cab62992e36f3acaf8aedbadf58ba75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576eb2a30cab62992e36f3acaf8aedbadf58ba75/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe", "html_url": "https://github.com/rust-lang/rust/commit/1bcd2452fe0abd1510b21cfa9aef19898a5c14fe"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "2fad02bf883aa56f36ea2036c35237890f21491e", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/576eb2a30cab62992e36f3acaf8aedbadf58ba75/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576eb2a30cab62992e36f3acaf8aedbadf58ba75/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=576eb2a30cab62992e36f3acaf8aedbadf58ba75", "patch": "@@ -6,6 +6,25 @@ use rustc_middle::ty;\n use rustc_span::{symbol::sym, ExpnKind, Span};\n \n declare_lint! {\n+    /// The `temporary_cstring_as_ptr` lint detects getting the inner pointer of\n+    /// a temporary `CString`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #![allow(unused)]\n+    /// let c_str = CString::new(\"foo\").unwrap().as_ptr();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The inner pointer of a `CString` lives only as long as the `CString` it\n+    /// points to. Getting the inner pointer of a *temporary* `CString` allows the `CString`\n+    /// to be dropped at the end of the statement, as it is not being referenced as far as the typesystem\n+    /// is concerned. This means outside of the statement the pointer will point to freed memory, which\n+    /// causes undefined behavior if the pointer is later dereferenced.\n     pub TEMPORARY_CSTRING_AS_PTR,\n     Warn,\n     \"detects getting the inner pointer of a temporary `CString`\"\n@@ -75,8 +94,7 @@ fn lint_cstring_as_ptr(\n                             unwrap.span,\n                             \"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\",\n                         );\n-                        diag.note(\"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement...\");\n-                        diag.note(\"...because nothing is referencing it as far as the type system is concerned\");\n+                        diag.note(\"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\");\n                         diag.help(\"for more information, see https://doc.rust-lang.org/reference/destructors.html\");\n                         diag.emit();\n                     });"}, {"sha": "b30ebd5e409e802f7569c1bda72733d06ce9d4b7", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/576eb2a30cab62992e36f3acaf8aedbadf58ba75/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/576eb2a30cab62992e36f3acaf8aedbadf58ba75/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr?ref=576eb2a30cab62992e36f3acaf8aedbadf58ba75", "patch": "@@ -11,8 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement...\n-   = note: ...because nothing is referencing it as far as the type system is concerned\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n    = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n error: aborting due to previous error"}, {"sha": "e463f84c48d66f5f92984ddc153fde336244a9fd", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/576eb2a30cab62992e36f3acaf8aedbadf58ba75/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576eb2a30cab62992e36f3acaf8aedbadf58ba75/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs?ref=576eb2a30cab62992e36f3acaf8aedbadf58ba75", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// this program is not technically incorrect, but is an obscure enough style to be worth linting\n #![deny(temporary_cstring_as_ptr)]\n \n use std::ffi::CString;"}, {"sha": "009cfe343a633047960d37aba65b5071f1bf3293", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/576eb2a30cab62992e36f3acaf8aedbadf58ba75/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/576eb2a30cab62992e36f3acaf8aedbadf58ba75/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=576eb2a30cab62992e36f3acaf8aedbadf58ba75", "patch": "@@ -1,18 +1,17 @@\n error: getting the inner pointer of a temporary `CString`\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:7:48\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:8:48\n    |\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n    |             ---------------------------------- ^^^^^^ this pointer will be invalid\n    |             |\n    |             this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:2:9\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:3:9\n    |\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement...\n-   = note: ...because nothing is referencing it as far as the type system is concerned\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n    = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n error: aborting due to previous error"}]}