{"sha": "ad747c5869ef7e23e1d29fb47b27ff68f77e14bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzQ3YzU4NjllZjdlMjNlMWQyOWZiNDdiMjdmZjY4Zjc3ZTE0YmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-12-28T02:35:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-12-28T02:35:34Z"}, "message": "propagate TIME_DEPTH to the helper threads for -Z time-passes", "tree": {"sha": "485536fbf85156cbd89577d9970b1e71765e717f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/485536fbf85156cbd89577d9970b1e71765e717f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb", "html_url": "https://github.com/rust-lang/rust/commit/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d849b132672d4c7824045e4458693997a424994b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d849b132672d4c7824045e4458693997a424994b", "html_url": "https://github.com/rust-lang/rust/commit/d849b132672d4c7824045e4458693997a424994b"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "4ddccbfd4c597ff59d5df2df0ec937b3d2acd821", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=ad747c5869ef7e23e1d29fb47b27ff68f77e14bb", "patch": "@@ -27,13 +27,27 @@ pub const FN_OUTPUT_NAME: &'static str = \"Output\";\n #[derive(Clone, Copy, Debug)]\n pub struct ErrorReported;\n \n+thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));\n+\n+/// Read the current depth of `time()` calls. This is used to\n+/// encourage indentation across threads.\n+pub fn time_depth() -> usize {\n+    TIME_DEPTH.with(|slot| slot.get())\n+}\n+\n+/// Set the current depth of `time()` calls. The idea is to call\n+/// `set_time_depth()` with the result from `time_depth()` in the\n+/// parent thread.\n+pub fn set_time_depth(depth: usize) {\n+    TIME_DEPTH.with(|slot| slot.set(depth));\n+}\n+\n pub fn time<T, F>(do_it: bool, what: &str, f: F) -> T where\n     F: FnOnce() -> T,\n {\n-    thread_local!(static DEPTH: Cell<usize> = Cell::new(0));\n     if !do_it { return f(); }\n \n-    let old = DEPTH.with(|slot| {\n+    let old = TIME_DEPTH.with(|slot| {\n         let r = slot.get();\n         slot.set(r + 1);\n         r\n@@ -56,7 +70,7 @@ pub fn time<T, F>(do_it: bool, what: &str, f: F) -> T where\n              mem_string,\n              what);\n \n-    DEPTH.with(|slot| slot.set(old));\n+    TIME_DEPTH.with(|slot| slot.set(old));\n \n     rv\n }"}, {"sha": "f17919c38b3c8970dcdc2eaf3a0bf974148f0051", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad747c5869ef7e23e1d29fb47b27ff68f77e14bb/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ad747c5869ef7e23e1d29fb47b27ff68f77e14bb", "patch": "@@ -19,7 +19,7 @@ use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleLlvm, ModuleSource, ModuleTranslation};\n-use util::common::time;\n+use util::common::{time, time_depth, set_time_depth};\n use util::common::path2cstr;\n use util::fs::link_or_copy;\n use errors::{self, Handler, Level, DiagnosticBuilder};\n@@ -1033,7 +1033,10 @@ fn run_work_multithreaded(sess: &Session,\n \n         let incr_comp_session_dir = sess.incr_comp_session_dir_opt().map(|r| r.clone());\n \n+        let depth = time_depth();\n         thread::Builder::new().name(format!(\"codegen-{}\", i)).spawn(move || {\n+            set_time_depth(depth);\n+\n             let diag_handler = Handler::with_emitter(true, false, box diag_emitter);\n \n             // Must construct cgcx inside the proc because it has non-Send"}]}