{"sha": "37972ae3006a1cb67ff94970c2d034063b3eb895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OTcyYWUzMDA2YTFjYjY3ZmY5NDk3MGMyZDAzNDA2M2IzZWI4OTU=", "commit": {"author": {"name": "Artyom Pavlov", "email": "newpavlov@gmail.com", "date": "2018-09-13T00:43:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-13T00:43:53Z"}, "message": "add as_float_secs and from_float_secs methods, refactor float methods", "tree": {"sha": "78b13cf896046f1b1e339612a741ba7e27827101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b13cf896046f1b1e339612a741ba7e27827101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37972ae3006a1cb67ff94970c2d034063b3eb895", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbmbLJCRBK7hj4Ov3rIwAAdHIIAHt1BStcak0gXhijR0dOR1J+\nxHMucMkoibzcqcQ8i1ThYOdFM63D9hZ1kx2tX+Iz5Hs7aBjaX+U1SwiCHhYOg4ia\n/eerOeFf1PcjPHRgI3FZceCaOESjd0S0+ZDjuXT2nLdJIfbkzJyuAzOKmIk5M8PQ\nx2ejLGp4BxL2DoXk79ZCsbANCTx6fOQoB4esZLtww3KXdVrcfHdBti/i66j0sb50\nCn9A/pesoPysFz68msj3oDokVv0DJyIRanZwy+KPqnq0k6nhr+POj7g6bbSiC3CH\nVGPX4brHOwTh4mEPAZwgPMKiKvJSFWxIJ5zcMX5ozz6IkZbmmFXbpcY7EnALQCU=\n=1VJK\n-----END PGP SIGNATURE-----\n", "payload": "tree 78b13cf896046f1b1e339612a741ba7e27827101\nparent c11281f1888428551ddf9c60d0030deb63be4b78\nauthor Artyom Pavlov <newpavlov@gmail.com> 1536799433 +0000\ncommitter GitHub <noreply@github.com> 1536799433 +0000\n\nadd as_float_secs and from_float_secs methods, refactor float methods"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37972ae3006a1cb67ff94970c2d034063b3eb895", "html_url": "https://github.com/rust-lang/rust/commit/37972ae3006a1cb67ff94970c2d034063b3eb895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37972ae3006a1cb67ff94970c2d034063b3eb895/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c11281f1888428551ddf9c60d0030deb63be4b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/c11281f1888428551ddf9c60d0030deb63be4b78", "html_url": "https://github.com/rust-lang/rust/commit/c11281f1888428551ddf9c60d0030deb63be4b78"}], "stats": {"total": 91, "additions": 55, "deletions": 36}, "files": [{"sha": "94a167f08f700fe82806d5b5db68d3a4fe5a9b55", "filename": "src/libcore/time.rs", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/37972ae3006a1cb67ff94970c2d034063b3eb895/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37972ae3006a1cb67ff94970c2d034063b3eb895/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=37972ae3006a1cb67ff94970c2d034063b3eb895", "patch": "@@ -459,96 +459,115 @@ impl Duration {\n             None\n         }\n     }\n+    \n+    /// Returns the number of seconds contained by this `Duration` as `f64`.\n+    ///\n+    /// The returned value does include the fractional (nanosecond) part of the duration.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.as_float_secs(), 2.7);\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"0\")]\n+    #[inline]\n+    pub fn as_float_secs(&self) -> f64 {\n+        (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n+    }\n \n+    /// Creates a new `Duration` from the specified number of seconds.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::from_float_secs(2.7);\n+    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"0\")]\n+    #[inline]\n+    pub fn from_float_secs(secs: f64) -> Duration {\n+        let nanos =  (secs * (NANOS_PER_SEC as f64)) as u128;\n+        Duration {\n+            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+        }\n+    }\n+    \n     /// Multiply `Duration` by `f64`.\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float_ops)]\n+    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n     /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n     /// ```\n-    #[unstable(feature = \"duration_float_ops\",\n-               reason = \"duration/floats operations are unstabe\",\n-               issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"0\")]\n     #[inline]\n     pub fn mul_f64(self, rhs: f64) -> Duration {\n-        const NPS: f64 = NANOS_PER_SEC as f64;\n-        let nanos_f64 = rhs * (NPS * (self.secs as f64) + (self.nanos as f64));\n-        if !nanos_f64.is_finite() {\n+        let secs = rhs * self.as_float_secs();\n+        if !secs.is_finite() {\n             panic!(\"got non-finite value when multiplying duration by float\");\n         }\n-        if nanos_f64 > MAX_NANOS_F64 {\n+        if secs > MAX_NANOS_F64 {\n             panic!(\"overflow when multiplying duration by float\");\n         }\n-        if nanos_f64 < 0.0 {\n+        if secs < 0.0 {\n             panic!(\"underflow when multiplying duration by float\");\n         }\n-        let nanos_u128 = nanos_f64 as u128;\n-        Duration {\n-            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n-        }\n+        Duration::from_float_secs(secs)\n     }\n \n     /// Divide `Duration` by `f64`.\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float_ops)]\n+    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n     /// // note that truncation is used, not rounding\n     /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n     /// ```\n-    #[unstable(feature = \"duration_float_ops\",\n-               reason = \"duration/floats operations are unstabe\",\n-               issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"0\")]\n     #[inline]\n     pub fn div_f64(self, rhs: f64) -> Duration {\n-        const NPS: f64 = NANOS_PER_SEC as f64;\n-        let nanos_f64 = (NPS * (self.secs as f64) + (self.nanos as f64)) / rhs;\n-        if !nanos_f64.is_finite() {\n+        let secs = self.as_float_secs() / rhs;\n+        if !secs.is_finite() {\n             panic!(\"got non-finite value when dividing duration by float\");\n         }\n-        if nanos_f64 > MAX_NANOS_F64 {\n+        if secs > MAX_NANOS_F64 {\n             panic!(\"overflow when dividing duration by float\");\n         }\n-        if nanos_f64 < 0.0 {\n+        if secs < 0.0 {\n             panic!(\"underflow when multiplying duration by float\");\n         }\n-        let nanos_u128 = nanos_f64 as u128;\n-        Duration {\n-            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n-            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n-        }\n+        Duration::from_float_secs(secs)\n     }\n \n     /// Divide `Duration` by `Duration` and return `f64`.\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float_ops)]\n+    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur1 = Duration::new(2, 700_000_000);\n     /// let dur2 = Duration::new(5, 400_000_000);\n     /// assert_eq!(dur1.div_duration(dur2), 0.5);\n     /// ```\n-    #[unstable(feature = \"duration_float_ops\",\n-               reason = \"duration/floats operations are unstabe\",\n-               issue = \"0\")]\n+    #[unstable(feature = \"duration_float\", issue = \"0\")]\n     #[inline]\n     pub fn div_duration(self, rhs: Duration) -> f64 {\n-        const NPS: f64 = NANOS_PER_SEC as f64;\n-        let nanos1 = NPS * (self.secs as f64) + (self.nanos as f64);\n-        let nanos2 = NPS * (rhs.secs as f64) + (rhs.nanos as f64);\n-        nanos1/nanos2\n+        self.as_float_secs()/rhs.as_float_secs()\n     }\n }\n "}]}