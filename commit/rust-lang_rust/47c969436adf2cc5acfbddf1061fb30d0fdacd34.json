{"sha": "47c969436adf2cc5acfbddf1061fb30d0fdacd34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Yzk2OTQzNmFkZjJjYzVhY2ZiZGRmMTA2MWZiMzBkMGZkYWNkMzQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-16T19:34:08Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-17T16:36:04Z"}, "message": "Make it compile", "tree": {"sha": "5470b303dd96e7f9a9338402f29a7d6b1e716681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5470b303dd96e7f9a9338402f29a7d6b1e716681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47c969436adf2cc5acfbddf1061fb30d0fdacd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47c969436adf2cc5acfbddf1061fb30d0fdacd34", "html_url": "https://github.com/rust-lang/rust/commit/47c969436adf2cc5acfbddf1061fb30d0fdacd34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47c969436adf2cc5acfbddf1061fb30d0fdacd34/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "url": "https://api.github.com/repos/rust-lang/rust/commits/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611", "html_url": "https://github.com/rust-lang/rust/commit/9221d4d1d347ee50f31d2bf50e13ecfdf14c4611"}], "stats": {"total": 176, "additions": 104, "deletions": 72}, "files": [{"sha": "fbbd3c1ccf5140530fd73a8975dae619219e8bb8", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=47c969436adf2cc5acfbddf1061fb30d0fdacd34", "patch": "@@ -11,7 +11,7 @@ use crate::formats::cache::{Cache, CACHE_KEY};\n /// Allows for different backends to rustdoc to be used with the `run_format()` function. Each\n /// backend renderer has hooks for initialization, documenting an item, entering and exiting a\n /// module, and cleanup/finalizing output.\n-crate trait FormatRenderer: Clone {\n+crate trait FormatRenderer<'tcx>: Clone {\n     /// Sets up any state required for the renderer. When this is called the cache has already been\n     /// populated.\n     fn init(\n@@ -20,7 +20,7 @@ crate trait FormatRenderer: Clone {\n         render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n-        tcx: ty::TyCtxt<'_>,\n+        tcx: ty::TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error>;\n \n     /// Renders a single non-module item. This means no recursive sub-item rendering is required.\n@@ -45,13 +45,13 @@ crate trait FormatRenderer: Clone {\n }\n \n /// Main method for rendering a crate.\n-crate fn run_format<T: FormatRenderer>(\n+crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     options: RenderOptions,\n     render_info: RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: Edition,\n-    tcx: ty::TyCtxt<'_>,\n+    tcx: ty::TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n     let (krate, mut cache) = Cache::from_krate(\n         render_info.clone(),"}, {"sha": "e6d3fdbe185dd96194dc9c21c1a857e6b64310ad", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 75, "deletions": 47, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=47c969436adf2cc5acfbddf1061fb30d0fdacd34", "patch": "@@ -52,12 +52,12 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::{Deprecation, StabilityLevel};\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n use rustc_middle::ty;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n@@ -103,7 +103,7 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n /// easily cloned because it is cloned per work-job (about once per item in the\n /// rustdoc tree).\n #[derive(Clone)]\n-crate struct Context {\n+crate struct Context<'tcx> {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n     crate current: Vec<String>,\n@@ -116,15 +116,15 @@ crate struct Context {\n     crate render_redirect_pages: bool,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n-    crate shared: Arc<SharedContext>,\n+    crate shared: Arc<SharedContext<'tcx>>,\n     all: Rc<RefCell<AllTypes>>,\n     /// Storage for the errors produced while generating documentation so they\n     /// can be printed together at the end.\n     crate errors: Rc<Receiver<String>>,\n }\n \n-crate struct SharedContext {\n-    crate sess: Lrc<Session>,\n+crate struct SharedContext<'tcx> {\n+    crate tcx: TyCtxt<'tcx>,\n     /// The path to the crate root source minus the file name.\n     /// Used for simplifying paths to the highlighted source code files.\n     crate src_root: PathBuf,\n@@ -164,7 +164,7 @@ crate struct SharedContext {\n     playground: Option<markdown::Playground>,\n }\n \n-impl Context {\n+impl Context<'_> {\n     fn path(&self, filename: &str) -> PathBuf {\n         // We use splitn vs Path::extension here because we might get a filename\n         // like `style.min.css` and we want to process that into\n@@ -177,11 +177,11 @@ impl Context {\n     }\n \n     fn sess(&self) -> &Session {\n-        &self.shared.sess\n+        &self.shared.tcx.sess\n     }\n }\n \n-impl SharedContext {\n+impl SharedContext<'_> {\n     crate fn ensure_dir(&self, dst: &Path) -> Result<(), Error> {\n         let mut dirs = self.created_dirs.borrow_mut();\n         if !dirs.contains(dst) {\n@@ -382,15 +382,15 @@ crate fn initial_ids() -> Vec<String> {\n }\n \n /// Generates the documentation for `crate` into the directory `dst`\n-impl FormatRenderer for Context {\n+impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,\n         _render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n-        tcx: ty::TyCtxt<'_>,\n-    ) -> Result<(Context, clean::Crate), Error> {\n+        tcx: ty::TyCtxt<'tcx>,\n+    ) -> Result<(Self, clean::Crate), Error> {\n         // need to save a copy of the options for rendering the index page\n         let md_opts = options.clone();\n         let RenderOptions {\n@@ -689,7 +689,7 @@ impl FormatRenderer for Context {\n }\n \n fn write_shared(\n-    cx: &Context,\n+    cx: &Context<'_>,\n     krate: &clean::Crate,\n     search_index: String,\n     options: &RenderOptions,\n@@ -1206,7 +1206,7 @@ fn write_minify(\n     }\n }\n \n-fn write_srclink(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache) {\n+fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, cache: &Cache) {\n     if let Some(l) = cx.src_href(item, cache) {\n         write!(\n             buf,\n@@ -1517,7 +1517,7 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n     ))\n }\n \n-impl Context {\n+impl Context<'_> {\n     fn derive_id(&self, id: String) -> String {\n         let mut map = self.id_map.borrow_mut();\n         map.derive(id)\n@@ -1702,7 +1702,7 @@ where\n     write!(w, \"</div>\")\n }\n \n-fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache) {\n+fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, cache: &Cache) {\n     debug_assert!(!item.is_stripped());\n     // Write the breadcrumb trail header for the top\n     write!(buf, \"<h1 class=\\\"fqn\\\"><span class=\\\"out-of-band\\\">\");\n@@ -1817,14 +1817,14 @@ fn item_path(ty: ItemType, name: &str) -> String {\n     }\n }\n \n-fn full_path(cx: &Context, item: &clean::Item) -> String {\n+fn full_path(cx: &Context<'_>, item: &clean::Item) -> String {\n     let mut s = cx.current.join(\"::\");\n     s.push_str(\"::\");\n     s.push_str(&item.name.unwrap().as_str());\n     s\n }\n \n-fn document(w: &mut Buffer, cx: &Context, item: &clean::Item, parent: Option<&clean::Item>) {\n+fn document(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, parent: Option<&clean::Item>) {\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n@@ -1835,7 +1835,7 @@ fn document(w: &mut Buffer, cx: &Context, item: &clean::Item, parent: Option<&cl\n /// Render md_text as markdown.\n fn render_markdown(\n     w: &mut Buffer,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     md_text: &str,\n     links: Vec<RenderedLink>,\n     prefix: &str,\n@@ -1864,7 +1864,7 @@ fn render_markdown(\n fn document_short(\n     w: &mut Buffer,\n     item: &clean::Item,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     link: AssocItemLink<'_>,\n     prefix: &str,\n     is_hidden: bool,\n@@ -1905,7 +1905,13 @@ fn document_short(\n     }\n }\n \n-fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context, prefix: &str, is_hidden: bool) {\n+fn document_full(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    prefix: &str,\n+    is_hidden: bool,\n+) {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n         render_markdown(w, cx, &*s, item.links(), prefix, is_hidden);\n@@ -1926,7 +1932,7 @@ fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context, prefix: &str,\n /// * Required features (through the `doc_cfg` feature)\n fn document_item_info(\n     w: &mut Buffer,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     item: &clean::Item,\n     is_hidden: bool,\n     parent: Option<&clean::Item>,\n@@ -2030,7 +2036,7 @@ crate fn compare_names(mut lhs: &str, mut rhs: &str) -> Ordering {\n     Ordering::Equal\n }\n \n-fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean::Item]) {\n+fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n     document(w, cx, item, None);\n \n     let mut indices = (0..items.len()).filter(|i| !items[*i].is_stripped()).collect::<Vec<usize>>();\n@@ -2272,7 +2278,11 @@ fn portability(item: &clean::Item, parent: Option<&clean::Item>) -> Option<Strin\n \n /// Render the stability, deprecation and portability information that is displayed at the top of\n /// the item's documentation.\n-fn short_item_info(item: &clean::Item, cx: &Context, parent: Option<&clean::Item>) -> Vec<String> {\n+fn short_item_info(\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    parent: Option<&clean::Item>,\n+) -> Vec<String> {\n     let mut extra_info = vec![];\n     let error_codes = cx.shared.codes;\n \n@@ -2362,7 +2372,7 @@ fn short_item_info(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n     extra_info\n }\n \n-fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Constant) {\n+fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     write!(w, \"<pre class=\\\"rust const\\\">\");\n     render_attributes(w, it, false);\n \n@@ -2397,7 +2407,7 @@ fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Cons\n     document(w, cx, it, None)\n }\n \n-fn item_static(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Static) {\n+fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n     write!(w, \"<pre class=\\\"rust static\\\">\");\n     render_attributes(w, it, false);\n     write!(\n@@ -2411,7 +2421,7 @@ fn item_static(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Static\n     document(w, cx, it, None)\n }\n \n-fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Function) {\n+fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::Function) {\n     let header_len = format!(\n         \"{}{}{}{}{:#}fn {}{:#}\",\n         it.visibility.print_with_space(),\n@@ -2445,7 +2455,7 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n }\n \n fn render_implementor(\n-    cx: &Context,\n+    cx: &Context<'_>,\n     implementor: &Impl,\n     parent: &clean::Item,\n     w: &mut Buffer,\n@@ -2482,7 +2492,7 @@ fn render_implementor(\n }\n \n fn render_impls(\n-    cx: &Context,\n+    cx: &Context<'_>,\n     w: &mut Buffer,\n     traits: &[&&Impl],\n     containing_item: &clean::Item,\n@@ -2541,7 +2551,7 @@ fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl) -> Ordering {\n     compare_names(&lhs, &rhs)\n }\n \n-fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait, cache: &Cache) {\n+fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Trait, cache: &Cache) {\n     let bounds = bounds(&t.bounds, false);\n     let types = t.items.iter().filter(|m| m.is_associated_type()).collect::<Vec<_>>();\n     let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n@@ -2637,7 +2647,13 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n         write!(w, \"{}<span class=\\\"loading-content\\\">Loading content...</span>\", extra_content)\n     }\n \n-    fn trait_item(w: &mut Buffer, cx: &Context, m: &clean::Item, t: &clean::Item, cache: &Cache) {\n+    fn trait_item(\n+        w: &mut Buffer,\n+        cx: &Context<'_>,\n+        m: &clean::Item,\n+        t: &clean::Item,\n+        cache: &Cache,\n+    ) {\n         let name = m.name.as_ref().unwrap();\n         info!(\"Documenting {} on {:?}\", name, t.name);\n         let item_type = m.type_();\n@@ -3040,7 +3056,13 @@ fn render_assoc_item(\n     }\n }\n \n-fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct, cache: &Cache) {\n+fn item_struct(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    it: &clean::Item,\n+    s: &clean::Struct,\n+    cache: &Cache,\n+) {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class=\\\"rust struct\\\">\");\n         render_attributes(w, it, true);\n@@ -3090,7 +3112,7 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n \n-fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union, cache: &Cache) {\n+fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union, cache: &Cache) {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class=\\\"rust union\\\">\");\n         render_attributes(w, it, true);\n@@ -3136,7 +3158,7 @@ fn item_union(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Union,\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n \n-fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum, cache: &Cache) {\n+fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum, cache: &Cache) {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class=\\\"rust enum\\\">\");\n         render_attributes(w, it, true);\n@@ -3444,7 +3466,7 @@ impl<'a> AssocItemLink<'a> {\n \n fn render_assoc_items(\n     w: &mut Buffer,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     containing_item: &clean::Item,\n     it: DefId,\n     what: AssocItemRender<'_>,\n@@ -3560,7 +3582,7 @@ fn render_assoc_items(\n \n fn render_deref_methods(\n     w: &mut Buffer,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     impl_: &Impl,\n     container_item: &clean::Item,\n     deref_mut: bool,\n@@ -3676,7 +3698,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> String {\n \n fn render_impl(\n     w: &mut Buffer,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     i: &Impl,\n     parent: &clean::Item,\n     link: AssocItemLink<'_>,\n@@ -3770,7 +3792,7 @@ fn render_impl(\n \n     fn doc_impl_item(\n         w: &mut Buffer,\n-        cx: &Context,\n+        cx: &Context<'_>,\n         item: &clean::Item,\n         parent: &clean::Item,\n         link: AssocItemLink<'_>,\n@@ -3907,7 +3929,7 @@ fn render_impl(\n \n     fn render_default_items(\n         w: &mut Buffer,\n-        cx: &Context,\n+        cx: &Context<'_>,\n         t: &clean::Trait,\n         i: &clean::Impl,\n         parent: &clean::Item,\n@@ -3967,7 +3989,7 @@ fn render_impl(\n \n fn item_opaque_ty(\n     w: &mut Buffer,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     it: &clean::Item,\n     t: &clean::OpaqueTy,\n     cache: &Cache,\n@@ -3994,7 +4016,7 @@ fn item_opaque_ty(\n \n fn item_trait_alias(\n     w: &mut Buffer,\n-    cx: &Context,\n+    cx: &Context<'_>,\n     it: &clean::Item,\n     t: &clean::TraitAlias,\n     cache: &Cache,\n@@ -4019,7 +4041,13 @@ fn item_trait_alias(\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n \n-fn item_typedef(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Typedef, cache: &Cache) {\n+fn item_typedef(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    it: &clean::Item,\n+    t: &clean::Typedef,\n+    cache: &Cache,\n+) {\n     write!(w, \"<pre class=\\\"rust typedef\\\">\");\n     render_attributes(w, it, false);\n     write!(\n@@ -4040,7 +4068,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Typed\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n \n-fn item_foreign_type(w: &mut Buffer, cx: &Context, it: &clean::Item, cache: &Cache) {\n+fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, cache: &Cache) {\n     writeln!(w, \"<pre class=\\\"rust foreigntype\\\">extern {{\");\n     render_attributes(w, it, false);\n     write!(\n@@ -4055,7 +4083,7 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context, it: &clean::Item, cache: &Cac\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n \n-fn print_sidebar(cx: &Context, it: &clean::Item, buffer: &mut Buffer, cache: &Cache) {\n+fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer, cache: &Cache) {\n     let parentlen = cx.current.len() - if it.is_mod() { 1 } else { 0 };\n \n     if it.is_struct()\n@@ -4686,7 +4714,7 @@ fn sidebar_foreign_type(buf: &mut Buffer, it: &clean::Item) {\n     }\n }\n \n-fn item_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Macro) {\n+fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Macro) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(&highlight::render_with_highlighting(\n             t.source.clone(),\n@@ -4698,7 +4726,7 @@ fn item_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Macro)\n     document(w, cx, it, None)\n }\n \n-fn item_proc_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, m: &clean::ProcMacro) {\n+fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n     let name = it.name.as_ref().expect(\"proc-macros always have names\");\n     match m.kind {\n         MacroKind::Bang => {\n@@ -4728,12 +4756,12 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context, it: &clean::Item, m: &clean::Pr\n     document(w, cx, it, None)\n }\n \n-fn item_primitive(w: &mut Buffer, cx: &Context, it: &clean::Item, cache: &Cache) {\n+fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, cache: &Cache) {\n     document(w, cx, it, None);\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All, cache)\n }\n \n-fn item_keyword(w: &mut Buffer, cx: &Context, it: &clean::Item) {\n+fn item_keyword(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n     document(w, cx, it, None)\n }\n "}, {"sha": "87934c8a0e50ea82df2165d2a5675bf15c6c3405", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=47c969436adf2cc5acfbddf1061fb30d0fdacd34", "patch": "@@ -15,7 +15,7 @@ use std::path::{Component, Path, PathBuf};\n \n crate fn render(\n     dst: &Path,\n-    scx: &mut SharedContext,\n+    scx: &mut SharedContext<'_>,\n     krate: clean::Crate,\n ) -> Result<clean::Crate, Error> {\n     info!(\"emitting source files\");\n@@ -26,14 +26,14 @@ crate fn render(\n }\n \n /// Helper struct to render all source code to HTML pages\n-struct SourceCollector<'a> {\n-    scx: &'a mut SharedContext,\n+struct SourceCollector<'a, 'tcx> {\n+    scx: &'a mut SharedContext<'tcx>,\n \n     /// Root destination to place all HTML output into\n     dst: PathBuf,\n }\n \n-impl<'a> DocFolder for SourceCollector<'a> {\n+impl DocFolder for SourceCollector<'_, '_> {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         // If we're not rendering sources, there's nothing to do.\n         // If we're including source files, and we haven't seen this file yet,\n@@ -69,9 +69,9 @@ impl<'a> DocFolder for SourceCollector<'a> {\n     }\n }\n \n-impl<'a> SourceCollector<'a> {\n+impl SourceCollector<'_, '_> {\n     fn sess(&self) -> &Session {\n-        &self.scx.sess\n+        &self.scx.tcx.sess\n     }\n \n     /// Renders the given filename into its corresponding HTML source file."}, {"sha": "c362b9d2b964e23865c59ff13e61039f44a58b14", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=47c969436adf2cc5acfbddf1061fb30d0fdacd34", "patch": "@@ -14,7 +14,7 @@ use crate::formats::item_type::ItemType;\n use crate::json::types::*;\n use crate::json::JsonRenderer;\n \n-impl JsonRenderer {\n+impl JsonRenderer<'_> {\n     pub(super) fn convert_item(&self, item: clean::Item) -> Option<Item> {\n         let item_type = ItemType::from(&item);\n         let clean::Item {\n@@ -57,10 +57,10 @@ impl JsonRenderer {\n     }\n \n     fn convert_span(&self, span: clean::Span) -> Option<Span> {\n-        match span.filename(&self.sess) {\n+        match span.filename(self.sess()) {\n             rustc_span::FileName::Real(name) => {\n-                let hi = span.hi(&self.sess);\n-                let lo = span.lo(&self.sess);\n+                let hi = span.hi(self.sess());\n+                let lo = span.lo(self.sess());\n                 Some(Span {\n                     filename: match name {\n                         rustc_span::RealFileName::Named(path) => path,"}, {"sha": "dc2bc14e7ceb9074a73b54b6ecf9c42bf72509e8", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=47c969436adf2cc5acfbddf1061fb30d0fdacd34", "patch": "@@ -13,7 +13,6 @@ use std::path::PathBuf;\n use std::rc::Rc;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::Lrc;\n use rustc_middle::ty;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n@@ -26,16 +25,20 @@ use crate::formats::FormatRenderer;\n use crate::html::render::cache::ExternalLocation;\n \n #[derive(Clone)]\n-crate struct JsonRenderer {\n-    sess: Lrc<Session>,\n+crate struct JsonRenderer<'tcx> {\n+    tcx: ty::TyCtxt<'tcx>,\n     /// A mapping of IDs that contains all local items for this crate which gets output as a top\n     /// level field of the JSON blob.\n     index: Rc<RefCell<FxHashMap<types::Id, types::Item>>>,\n     /// The directory where the blob will be written to.\n     out_path: PathBuf,\n }\n \n-impl JsonRenderer {\n+impl JsonRenderer<'_> {\n+    fn sess(&self) -> &Session {\n+        self.tcx.sess\n+    }\n+\n     fn get_trait_implementors(\n         &mut self,\n         id: rustc_span::def_id::DefId,\n@@ -121,19 +124,19 @@ impl JsonRenderer {\n     }\n }\n \n-impl FormatRenderer for JsonRenderer {\n+impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n         _render_info: RenderInfo,\n         _edition: Edition,\n         _cache: &mut Cache,\n-        tcx: ty::TyCtxt<'_>,\n+        tcx: ty::TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error> {\n         debug!(\"Initializing json renderer\");\n         Ok((\n             JsonRenderer {\n-                sess: tcx.sess,\n+                tcx,\n                 index: Rc::new(RefCell::new(FxHashMap::default())),\n                 out_path: options.output,\n             },"}, {"sha": "2d3b4f8706856b6fe13fca6778407bdb7660e03f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c969436adf2cc5acfbddf1061fb30d0fdacd34/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=47c969436adf2cc5acfbddf1061fb30d0fdacd34", "patch": "@@ -64,6 +64,7 @@ use std::process;\n \n use rustc_driver::abort_on_err;\n use rustc_errors::ErrorReported;\n+use rustc_interface::interface;\n use rustc_middle::ty;\n use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n use rustc_session::getopts;\n@@ -468,13 +469,13 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainRes\n     }\n }\n \n-fn run_renderer<T: formats::FormatRenderer>(\n+fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     renderopts: config::RenderOptions,\n     render_info: config::RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n-    tcx: ty::TyCtxt<'_>,\n+    tcx: ty::TyCtxt<'tcx>,\n ) -> MainResult {\n     match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition, tcx) {\n         Ok(_) => Ok(()),\n@@ -577,7 +578,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 let diag = core::new_handler(error_format, None, &debugging_options);\n                 match output_format {\n                     None | Some(config::OutputFormat::Html) => sess.time(\"render_html\", || {\n-                        run_renderer::<html::render::Context>(\n+                        run_renderer::<html::render::Context<'_>>(\n                             krate,\n                             render_opts,\n                             render_info,\n@@ -587,7 +588,7 @@ fn main_options(options: config::Options) -> MainResult {\n                         )\n                     }),\n                     Some(config::OutputFormat::Json) => sess.time(\"render_json\", || {\n-                        run_renderer::<json::JsonRenderer>(\n+                        run_renderer::<json::JsonRenderer<'_>>(\n                             krate,\n                             render_opts,\n                             render_info,"}]}