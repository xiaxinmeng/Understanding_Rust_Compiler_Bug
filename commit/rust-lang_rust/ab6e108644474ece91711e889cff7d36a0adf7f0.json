{"sha": "ab6e108644474ece91711e889cff7d36a0adf7f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNmUxMDg2NDQ0NzRlY2U5MTcxMWU4ODljZmY3ZDM2YTBhZGY3ZjA=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-13T16:42:09Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-17T16:31:54Z"}, "message": "improve Vec example soundness in mem::transmute docs", "tree": {"sha": "794557f11d690da49f4afbfc80ccc7860ef5a809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794557f11d690da49f4afbfc80ccc7860ef5a809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab6e108644474ece91711e889cff7d36a0adf7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6e108644474ece91711e889cff7d36a0adf7f0", "html_url": "https://github.com/rust-lang/rust/commit/ab6e108644474ece91711e889cff7d36a0adf7f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab6e108644474ece91711e889cff7d36a0adf7f0/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3287a65fc05028dce3b521765f4643384ebc4346", "url": "https://api.github.com/repos/rust-lang/rust/commits/3287a65fc05028dce3b521765f4643384ebc4346", "html_url": "https://github.com/rust-lang/rust/commit/3287a65fc05028dce3b521765f4643384ebc4346"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "ecff40a75978dbca8587d61c8f147781afb1dc67", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab6e108644474ece91711e889cff7d36a0adf7f0/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6e108644474ece91711e889cff7d36a0adf7f0/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ab6e108644474ece91711e889cff7d36a0adf7f0", "patch": "@@ -845,21 +845,26 @@ extern \"rust-intrinsic\" {\n     ///\n     /// ```\n     /// let store = [0, 1, 2, 3];\n-    /// let mut v_orig = store.iter().collect::<Vec<&i32>>();\n+    /// let v_orig = store.iter().collect::<Vec<&i32>>();\n+    ///\n+    /// // clone the vector as we will reuse them later\n+    /// let v_clone = v_orig.clone();\n     ///\n     /// // Using transmute: this is Undefined Behavior, and a bad idea.\n     /// // However, it is no-copy.\n     /// let v_transmuted = unsafe {\n-    ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n-    ///         v_orig.clone())\n+    ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(v_clone)\n     /// };\n     ///\n+    /// let v_clone = v_orig.clone();\n+    ///\n     /// // This is the suggested, safe way.\n     /// // It does copy the entire vector, though, into a new array.\n-    /// let v_collected = v_orig.clone()\n-    ///                         .into_iter()\n-    ///                         .map(|r| Some(r))\n-    ///                         .collect::<Vec<Option<&i32>>>();\n+    /// let v_collected = v_clone.into_iter()\n+    ///                          .map(Some)\n+    ///                          .collect::<Vec<Option<&i32>>>();\n+    ///\n+    /// let v_clone = v_orig.clone();\n     ///\n     /// // The no-copy, unsafe way, still using transmute, but not UB.\n     /// // This is equivalent to the original, but safer, and reuses the\n@@ -869,11 +874,12 @@ extern \"rust-intrinsic\" {\n     /// // the original inner type (`&i32`) to the converted inner type\n     /// // (`Option<&i32>`), so read the nomicon pages linked above.\n     /// let v_from_raw = unsafe {\n-    ///     Vec::from_raw_parts(v_orig.as_mut_ptr() as *mut Option<&i32>,\n-    ///                         v_orig.len(),\n-    ///                         v_orig.capacity())\n+    ///     // Ensure the original vector is not dropped.\n+    ///     let mut v_clone = std::mem::ManuallyDrop::new(v_clone);\n+    ///     Vec::from_raw_parts(v_clone.as_mut_ptr() as *mut Option<&i32>,\n+    ///                         v_clone.len(),\n+    ///                         v_clone.capacity())\n     /// };\n-    /// std::mem::forget(v_orig);\n     /// ```\n     ///\n     /// Implementing `split_at_mut`:"}]}