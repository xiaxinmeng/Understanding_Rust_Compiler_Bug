{"sha": "4114b68eba6914b46202a2108f34f7653e393851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMTRiNjhlYmE2OTE0YjQ2MjAyYTIxMDhmMzRmNzY1M2UzOTM4NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-06T13:26:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-06T13:26:37Z"}, "message": "Auto merge of #34648 - eddyb:return-in-peace-pls, r=nagisa\n\nRevert \"Revert \"Remove the return_address intrinsic.\"\"\n\nThis reverts commit f698cd3a3663a459e459f530f76adef3eeb815fd.\n\nMade possible by the merge of servo/servo#11872, this closes #34227 for good.", "tree": {"sha": "06831ff61c7d46533bc335f12d8f8471aa30047c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06831ff61c7d46533bc335f12d8f8471aa30047c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4114b68eba6914b46202a2108f34f7653e393851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4114b68eba6914b46202a2108f34f7653e393851", "html_url": "https://github.com/rust-lang/rust/commit/4114b68eba6914b46202a2108f34f7653e393851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4114b68eba6914b46202a2108f34f7653e393851/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a120ae70d08d2eb991c7796e8726debb7ad46dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a120ae70d08d2eb991c7796e8726debb7ad46dea", "html_url": "https://github.com/rust-lang/rust/commit/a120ae70d08d2eb991c7796e8726debb7ad46dea"}, {"sha": "0ec3d98702f28065938fc0a98812bd53f968ebc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3d98702f28065938fc0a98812bd53f968ebc2", "html_url": "https://github.com/rust-lang/rust/commit/0ec3d98702f28065938fc0a98812bd53f968ebc2"}], "stats": {"total": 125, "additions": 0, "deletions": 125}, "files": [{"sha": "edb965c1962e3bf6433b487165f8d164c39616e4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=4114b68eba6914b46202a2108f34f7653e393851", "patch": "@@ -293,12 +293,6 @@ extern \"rust-intrinsic\" {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn transmute<T, U>(e: T) -> U;\n \n-    /// Gives the address for the return value of the enclosing function.\n-    ///\n-    /// Using this intrinsic in a function that does not use an out pointer\n-    /// will trigger a compiler error.\n-    pub fn return_address() -> *const u8;\n-\n     /// Returns `true` if the actual type given as `T` requires drop\n     /// glue; returns `false` if the actual type provided for `T`\n     /// implements `Copy`."}, {"sha": "f7f065a3562ed2bb8223a1741af97490884abd47", "filename": "src/librustc_trans/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=4114b68eba6914b46202a2108f34f7653e393851", "patch": "@@ -12,44 +12,6 @@\n \n register_long_diagnostics! {\n \n-E0510: r##\"\n-`return_address` was used in an invalid context. Erroneous code example:\n-\n-```ignore\n-#![feature(intrinsics)]\n-\n-extern \"rust-intrinsic\" {\n-    fn return_address() -> *const u8;\n-}\n-\n-unsafe fn by_value() -> i32 {\n-    let _ = return_address();\n-    // error: invalid use of `return_address` intrinsic: function does\n-    //        not use out pointer\n-    0\n-}\n-```\n-\n-Return values may be stored in a return register(s) or written into a so-called\n-out pointer. In case the returned value is too big (this is\n-target-ABI-dependent and generally not portable or future proof) to fit into\n-the return register(s), the compiler will return the value by writing it into\n-space allocated in the caller's stack frame. Example:\n-\n-```\n-#![feature(intrinsics)]\n-\n-extern \"rust-intrinsic\" {\n-    fn return_address() -> *const u8;\n-}\n-\n-unsafe fn by_pointer() -> String {\n-    let _ = return_address();\n-    String::new() // ok!\n-}\n-```\n-\"##,\n-\n E0511: r##\"\n Invalid monomorphization of an intrinsic function was used. Erroneous code\n example:"}, {"sha": "a721361fce0e3aecbbd152edb8fd663507383df3", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=4114b68eba6914b46202a2108f34f7653e393851", "patch": "@@ -617,18 +617,6 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n         },\n \n-\n-        (_, \"return_address\") => {\n-            if !fcx.fn_ty.ret.is_indirect() {\n-                span_err!(tcx.sess, span, E0510,\n-                          \"invalid use of `return_address` intrinsic: function \\\n-                           does not use out pointer\");\n-                C_null(Type::i8p(ccx))\n-            } else {\n-                PointerCast(bcx, llvm::get_param(fcx.llfn, 0), Type::i8p(ccx))\n-            }\n-        }\n-\n         (_, \"discriminant_value\") => {\n             let val_ty = substs.types.get(FnSpace, 0);\n             match val_ty.sty {"}, {"sha": "5a3268e9e447b25a9165c02eec623c5f6164cedd", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4114b68eba6914b46202a2108f34f7653e393851/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=4114b68eba6914b46202a2108f34f7653e393851", "patch": "@@ -275,8 +275,6 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" =>\n                 (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),\n \n-            \"return_address\" => (0, vec![], tcx.mk_imm_ptr(tcx.types.u8)),\n-\n             \"assume\" => (0, vec![tcx.types.bool], tcx.mk_nil()),\n \n             \"discriminant_value\" => (1, vec!["}, {"sha": "906056896be1e6eb3810283737655a019d6e4ee9", "filename": "src/test/compile-fail/intrinsic-return-address.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a120ae70d08d2eb991c7796e8726debb7ad46dea/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a120ae70d08d2eb991c7796e8726debb7ad46dea/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs?ref=a120ae70d08d2eb991c7796e8726debb7ad46dea", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(warnings)]\n-#![feature(intrinsics)]\n-\n-extern \"rust-intrinsic\" {\n-    fn return_address() -> *const u8;\n-}\n-\n-unsafe fn f() { let _ = return_address(); }\n-//~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n-\n-unsafe fn g() -> isize { let _ = return_address(); 0 }\n-//~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n-\n-fn main() {}"}, {"sha": "63aed3f009fd7d7832544957a4894d7d500f856f", "filename": "src/test/run-pass/intrinsic-return-address.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a120ae70d08d2eb991c7796e8726debb7ad46dea/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a120ae70d08d2eb991c7796e8726debb7ad46dea/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs?ref=a120ae70d08d2eb991c7796e8726debb7ad46dea", "patch": "@@ -1,43 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(intrinsics)]\n-\n-use std::ptr;\n-\n-struct Point {\n-    x: f32,\n-    y: f32,\n-    z: f32,\n-}\n-\n-extern \"rust-intrinsic\" {\n-    fn return_address() -> *const u8;\n-}\n-\n-fn f(result: &mut usize) -> Point {\n-    unsafe {\n-        *result = return_address() as usize;\n-        Point {\n-            x: 1.0,\n-            y: 2.0,\n-            z: 3.0,\n-        }\n-    }\n-\n-}\n-\n-fn main() {\n-    let mut intrinsic_reported_address = 0;\n-    let pt = f(&mut intrinsic_reported_address);\n-    let actual_address = &pt as *const Point as usize;\n-    assert_eq!(intrinsic_reported_address, actual_address);\n-}"}]}