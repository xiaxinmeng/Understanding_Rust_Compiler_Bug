{"sha": "dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMmExZTM0NjkxZDNlZDZmOGIxYjA1ZTNlZjM5YzE3NTEwYjQ2YjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-16T00:49:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-30T02:51:56Z"}, "message": "Change extensions traits to blanket impls", "tree": {"sha": "023ad23c7dd1f6d433237fe907faa2a5296c8dc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/023ad23c7dd1f6d433237fe907faa2a5296c8dc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "html_url": "https://github.com/rust-lang/rust/commit/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a", "html_url": "https://github.com/rust-lang/rust/commit/c48a1ab158110a35ee22a9fe06dc08d31aa6c56a"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "064ceb1e1c18f5c185d713f82ddef710f16b20da", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "patch": "@@ -619,14 +619,15 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n \n         let tcx = self.tcx();\n \n-        // It is illegal to invoke a method on a trait instance that\n-        // refers to the `Self` type. An error will be reported by\n-        // `enforce_object_limitations()` if the method refers to the\n-        // `Self` type anywhere other than the receiver. Here, we use\n-        // a substitution that replaces `Self` with the object type\n-        // itself. Hence, a `&self` method will wind up with an\n-        // argument type like `&Trait`.\n-        let rcvr_substs = substs.with_self_ty(self_ty);\n+        // It is illegal to create a trait object with methods which includes\n+        // the Self type. An error will be reported when we coerce to a trait\n+        // object if the method refers to the `Self` type. Substituting ty_err\n+        // here allows compiler to soldier on.\n+        //\n+        // `confirm_candidate()` also relies upon this substitution\n+        // for Self. (fix)\n+        let rcvr_substs = substs.with_self_ty(ty::mk_err());\n+\n         let trait_ref = Rc::new(TraitRef {\n             def_id: did,\n             substs: rcvr_substs.clone()"}, {"sha": "9cd8dbcc509498fe2b6974d64e92d5b2483040c5", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "patch": "@@ -14,7 +14,7 @@\n \n use cmp;\n use collections::Collection;\n-use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult, AsRefReader};\n+use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n use iter::ExactSize;\n use ops::Drop;\n use option::{Some, None, Option};\n@@ -118,8 +118,6 @@ impl<R: Reader> Reader for BufferedReader<R> {\n     }\n }\n \n-impl<R: Reader> AsRefReader for BufferedReader<R> {}\n-\n /// Wraps a Writer and buffers output to it\n ///\n /// It can be excessively inefficient to work directly with a `Writer`. For"}, {"sha": "078a9a014c9c8d97c38d29c2e9e527edcc63b918", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "patch": "@@ -189,7 +189,6 @@ mod test {\n             }\n         }\n     }\n-    impl BytesReader for InitialZeroByteReader {}\n \n     struct EofReader;\n \n@@ -198,7 +197,6 @@ mod test {\n             Err(io::standard_error(io::EndOfFile))\n         }\n     }\n-    impl BytesReader for EofReader {}\n \n     struct ErroringReader;\n \n@@ -207,7 +205,6 @@ mod test {\n             Err(io::standard_error(io::InvalidInput))\n         }\n     }\n-    impl BytesReader for ErroringReader {}\n \n     struct PartialReader {\n         count: int,"}, {"sha": "2f6dd7e47955fd703b5e0dc76f7861c125c573e4", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "patch": "@@ -17,7 +17,7 @@ use collections::Collection;\n use option::None;\n use result::{Err, Ok};\n use io;\n-use io::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, IoResult, AsRefReader, AsRefWriter};\n+use io::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, IoResult};\n use slice;\n use slice::AsSlice;\n use vec::Vec;\n@@ -97,8 +97,6 @@ impl Writer for MemWriter {\n     }\n }\n \n-impl AsRefWriter for MemWriter {}\n-\n /// Reads from an owned byte vector\n ///\n /// # Example\n@@ -165,8 +163,6 @@ impl Reader for MemReader {\n     }\n }\n \n-impl AsRefReader for MemReader {}\n-\n impl Seek for MemReader {\n     #[inline]\n     fn tell(&self) -> IoResult<u64> { Ok(self.pos as u64) }\n@@ -313,8 +309,6 @@ impl<'a> Reader for BufReader<'a> {\n      }\n }\n \n-impl<'a> AsRefReader for BufReader<'a> {}\n-\n impl<'a> Seek for BufReader<'a> {\n     #[inline]\n     fn tell(&self) -> IoResult<u64> { Ok(self.pos as u64) }"}, {"sha": "d22650107a334e697f3a8ec149cf9f835a930405", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "patch": "@@ -929,21 +929,29 @@ pub trait AsRefReader {\n     ///\n     /// This is useful to allow applying adaptors while still\n     /// retaining ownership of the original value.\n-    fn by_ref<'a>(&'a mut self) -> RefReader<'a, Self> {\n+    fn by_ref<'a>(&'a mut self) -> RefReader<'a, Self>;\n+}\n+\n+impl<T: Reader> AsRefReader for T {\n+    fn by_ref<'a>(&'a mut self) -> RefReader<'a, T> {\n         RefReader { inner: self }\n     }\n }\n \n /// A reader which can be converted to bytes.\n-pub trait BytesReader: Reader {\n+pub trait BytesReader {\n     /// Create an iterator that reads a single byte on\n     /// each iteration, until EOF.\n     ///\n     /// # Error\n     ///\n     /// Any error other than `EndOfFile` that is produced by the underlying Reader\n     /// is returned by the iterator and should be handled by the caller.\n-    fn bytes<'r>(&'r mut self) -> extensions::Bytes<'r, Self> {\n+    fn bytes<'r>(&'r mut self) -> extensions::Bytes<'r, Self>;\n+}\n+\n+impl<T: Reader> BytesReader for T {\n+    fn bytes<'r>(&'r mut self) -> extensions::Bytes<'r, T> {\n         extensions::Bytes::new(self)\n     }\n }\n@@ -1284,7 +1292,11 @@ pub trait AsRefWriter {\n     /// This is useful to allow applying wrappers while still\n     /// retaining ownership of the original value.\n     #[inline]\n-    fn by_ref<'a>(&'a mut self) -> RefWriter<'a, Self> {\n+    fn by_ref<'a>(&'a mut self) -> RefWriter<'a, Self>;\n+}\n+\n+impl<T: Writer> AsRefWriter for T {\n+    fn by_ref<'a>(&'a mut self) -> RefWriter<'a, T> {\n         RefWriter { inner: self }\n     }\n }"}]}