{"sha": "26b24cd7558c02c433ef9f621894cb6a2f31898d", "node_id": "C_kwDOAAsO6NoAKDI2YjI0Y2Q3NTU4YzAyYzQzM2VmOWY2MjE4OTRjYjZhMmYzMTg5OGQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-04T17:59:21Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-04T17:59:21Z"}, "message": "drive-by: move field_index to typeck results", "tree": {"sha": "7d68ed7058a17a65b8558f4a5625729425f91460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d68ed7058a17a65b8558f4a5625729425f91460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26b24cd7558c02c433ef9f621894cb6a2f31898d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26b24cd7558c02c433ef9f621894cb6a2f31898d", "html_url": "https://github.com/rust-lang/rust/commit/26b24cd7558c02c433ef9f621894cb6a2f31898d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26b24cd7558c02c433ef9f621894cb6a2f31898d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c250aa1231f1e1b0953829e999e4862961207d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c250aa1231f1e1b0953829e999e4862961207d", "html_url": "https://github.com/rust-lang/rust/commit/19c250aa1231f1e1b0953829e999e4862961207d"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "4f06ad8a018215f9e4494d80d2116abc63aaa522", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -540,9 +540,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             ty::Adt(adt, substs) if adt.is_struct() => {\n                 // Consume those fields of the with expression that are needed.\n                 for (f_index, with_field) in adt.non_enum_variant().fields.iter().enumerate() {\n-                    let is_mentioned = fields.iter().any(|f| {\n-                        self.tcx().field_index(f.hir_id, self.mc.typeck_results) == f_index\n-                    });\n+                    let is_mentioned = fields\n+                        .iter()\n+                        .any(|f| self.mc.typeck_results.field_index(f.hir_id) == f_index);\n                     if !is_mentioned {\n                         let field_place = self.mc.cat_projection(\n                             &*with_expr,"}, {"sha": "d0d34d8d2b40ee23be061701dc4bf7926d070f32", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -259,7 +259,7 @@ impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {\n                 }\n                 if let PatKind::Binding(binding_annot, _, ident, None) = fieldpat.pat.kind {\n                     if cx.tcx.find_field_index(ident, &variant)\n-                        == Some(cx.tcx.field_index(fieldpat.hir_id, cx.typeck_results()))\n+                        == Some(cx.typeck_results().field_index(fieldpat.hir_id))\n                     {\n                         cx.struct_span_lint(\n                             NON_SHORTHAND_FIELD_PATTERNS,"}, {"sha": "11811de8e7afc02654e83760302fb58f18025a6a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -671,6 +671,14 @@ impl<'tcx> TypeckResults<'tcx> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }\n     }\n \n+    pub fn field_index(&self, id: hir::HirId) -> usize {\n+        self.field_indices().get(id).cloned().expect(\"no index for a field\")\n+    }\n+\n+    pub fn opt_field_index(&self, id: hir::HirId) -> Option<usize> {\n+        self.field_indices().get(id).cloned()\n+    }\n+\n     pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {\n         LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }\n     }"}, {"sha": "d869f17e3ac50c085c0eca0e11ed0cafd154dcbe", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -2228,10 +2228,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {\n-        typeck_results.field_indices().get(hir_id).cloned().expect(\"no index for a field\")\n-    }\n-\n     pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {\n         variant\n             .fields"}, {"sha": "261b95ba95b0e36781448e9fdc7be376773f99cb", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -704,7 +704,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n                 variant_index: VariantIdx::new(0),\n-                name: Field::new(tcx.field_index(expr.hir_id, self.typeck_results)),\n+                name: Field::new(self.typeck_results.field_index(expr.hir_id)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n                 // Check for a user-given type annotation on this `cast`\n@@ -1079,7 +1079,7 @@ impl<'tcx> Cx<'tcx> {\n         fields\n             .iter()\n             .map(|field| FieldExpr {\n-                name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),\n+                name: Field::new(self.typeck_results.field_index(field.hir_id)),\n                 expr: self.mirror_expr(field.expr),\n             })\n             .collect()"}, {"sha": "48a231a6cd6b7c4648396131e1743e0a71065b04", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let subpatterns = fields\n                     .iter()\n                     .map(|field| FieldPat {\n-                        field: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),\n+                        field: Field::new(self.typeck_results.field_index(field.hir_id)),\n                         pattern: self.lower_pattern(&field.pat),\n                     })\n                     .collect();"}, {"sha": "a71ae717a508d37ee42db75d1a5add8a994fac0b", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     fn handle_field_access(&mut self, lhs: &hir::Expr<'_>, hir_id: hir::HirId) {\n         match self.typeck_results().expr_ty_adjusted(lhs).kind() {\n             ty::Adt(def, _) => {\n-                let index = self.tcx.field_index(hir_id, self.typeck_results());\n+                let index = self.typeck_results().field_index(hir_id);\n                 self.insert_def_id(def.non_enum_variant().fields[index].did);\n             }\n             ty::Tuple(..) => {}\n@@ -208,7 +208,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             if let PatKind::Wild = pat.pat.kind {\n                 continue;\n             }\n-            let index = self.tcx.field_index(pat.hir_id, self.typeck_results());\n+            let index = self.typeck_results().field_index(pat.hir_id);\n             self.insert_def_id(variant.fields[index].did);\n         }\n     }\n@@ -341,7 +341,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     fn mark_as_used_if_union(&mut self, adt: ty::AdtDef<'tcx>, fields: &[hir::ExprField<'_>]) {\n         if adt.is_union() && adt.non_enum_variant().fields.len() > 1 && adt.did().is_local() {\n             for field in fields {\n-                let index = self.tcx.field_index(field.hir_id, self.typeck_results());\n+                let index = self.typeck_results().field_index(field.hir_id);\n                 self.insert_def_id(adt.non_enum_variant().fields[index].did);\n             }\n         }"}, {"sha": "a254c892478cf19815f2ccf79e670f3db96f08dd", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b24cd7558c02c433ef9f621894cb6a2f31898d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=26b24cd7558c02c433ef9f621894cb6a2f31898d", "patch": "@@ -1065,9 +1065,9 @@ impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n                 // are checked for privacy (RFC 736). Rather than computing the set of\n                 // unmentioned fields, just check them all.\n                 for (vf_index, variant_field) in variant.fields.iter().enumerate() {\n-                    let field = fields.iter().find(|f| {\n-                        self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index\n-                    });\n+                    let field = fields\n+                        .iter()\n+                        .find(|f| self.typeck_results().field_index(f.hir_id) == vf_index);\n                     let (use_ctxt, span) = match field {\n                         Some(field) => (field.ident.span, field.span),\n                         None => (base.span, base.span),\n@@ -1077,7 +1077,7 @@ impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n             } else {\n                 for field in fields {\n                     let use_ctxt = field.ident.span;\n-                    let index = self.tcx.field_index(field.hir_id, self.typeck_results());\n+                    let index = self.typeck_results().field_index(field.hir_id);\n                     self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);\n                 }\n             }\n@@ -1093,7 +1093,7 @@ impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n             let variant = adt.variant_of_res(res);\n             for field in fields {\n                 let use_ctxt = field.ident.span;\n-                let index = self.tcx.field_index(field.hir_id, self.typeck_results());\n+                let index = self.typeck_results().field_index(field.hir_id);\n                 self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);\n             }\n         }"}]}