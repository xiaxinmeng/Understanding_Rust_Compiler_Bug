{"sha": "0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMThhM2IxMmYzYWNhOTdmYzAxOGJkYjFlMmJmOTcxMGM3NWZhMmI=", "commit": {"author": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-04-12T12:37:19Z"}, "committer": {"name": "Takayuki", "email": "takoyaki0316@gmail.com", "date": "2021-04-12T12:37:19Z"}, "message": "add tests for a false negative on `needless_return`", "tree": {"sha": "849b251991196a66a54fb86f0d59716922748673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/849b251991196a66a54fb86f0d59716922748673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b", "html_url": "https://github.com/rust-lang/rust/commit/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53260df2fa499f1e1908fb2a6b5ce3442f9a023e", "url": "https://api.github.com/repos/rust-lang/rust/commits/53260df2fa499f1e1908fb2a6b5ce3442f9a023e", "html_url": "https://github.com/rust-lang/rust/commit/53260df2fa499f1e1908fb2a6b5ce3442f9a023e"}], "stats": {"total": 352, "additions": 333, "deletions": 19}, "files": [{"sha": "70ee6e9b31a1bb5e37567cb288862dda8d925818", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// edition:2018\n \n #![allow(unused)]\n #![allow(\n@@ -125,6 +126,108 @@ mod issue6501 {\n     }\n }\n \n+async fn async_test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    true\n+}\n+\n+async fn async_test_no_semicolon() -> bool {\n+    true\n+}\n+\n+async fn async_test_if_block() -> bool {\n+    if true {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+async fn async_test_match(x: bool) -> bool {\n+    match x {\n+        true => false,\n+        false => {\n+            true\n+        },\n+    }\n+}\n+\n+async fn async_test_closure() {\n+    let _ = || {\n+        true\n+    };\n+    let _ = || true;\n+}\n+\n+async fn async_test_macro_call() -> i32 {\n+    return the_answer!();\n+}\n+\n+async fn async_test_void_fun() {\n+    \n+}\n+\n+async fn async_test_void_if_fun(b: bool) {\n+    if b {\n+        \n+    } else {\n+        \n+    }\n+}\n+\n+async fn async_test_void_match(x: u32) {\n+    match x {\n+        0 => (),\n+        _ => {},\n+    }\n+}\n+\n+async fn async_read_line() -> String {\n+    use std::io::BufRead;\n+    let stdin = ::std::io::stdin();\n+    return stdin.lock().lines().next().unwrap().unwrap();\n+}\n+\n+async fn async_borrows_but_not_last(value: bool) -> String {\n+    if value {\n+        use std::io::BufRead;\n+        let stdin = ::std::io::stdin();\n+        let _a = stdin.lock().lines().next().unwrap().unwrap();\n+        String::from(\"test\")\n+    } else {\n+        String::new()\n+    }\n+}\n+\n+async fn async_test_return_in_macro() {\n+    // This will return and the macro below won't be executed. Removing the `return` from the macro\n+    // will change semantics.\n+    needed_return!(10);\n+    needed_return!(0);\n+}\n+\n+mod async_issue6501 {\n+    async fn foo(bar: Result<(), ()>) {\n+        bar.unwrap_or_else(|_| {})\n+    }\n+\n+    async fn async_test_closure() {\n+        let _ = || {\n+            \n+        };\n+        let _ = || {};\n+    }\n+\n+    struct Foo;\n+    #[allow(clippy::unnecessary_lazy_evaluations)]\n+    async fn bar(res: Result<Foo, u8>) -> Foo {\n+        res.unwrap_or_else(|_| Foo)\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "d0da17cf8624897b4dfb4c28718325fca46a963c", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// edition:2018\n \n #![allow(unused)]\n #![allow(\n@@ -125,6 +126,108 @@ mod issue6501 {\n     }\n }\n \n+async fn async_test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    return true;\n+}\n+\n+async fn async_test_no_semicolon() -> bool {\n+    return true;\n+}\n+\n+async fn async_test_if_block() -> bool {\n+    if true {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+async fn async_test_match(x: bool) -> bool {\n+    match x {\n+        true => return false,\n+        false => {\n+            return true;\n+        },\n+    }\n+}\n+\n+async fn async_test_closure() {\n+    let _ = || {\n+        return true;\n+    };\n+    let _ = || return true;\n+}\n+\n+async fn async_test_macro_call() -> i32 {\n+    return the_answer!();\n+}\n+\n+async fn async_test_void_fun() {\n+    return;\n+}\n+\n+async fn async_test_void_if_fun(b: bool) {\n+    if b {\n+        return;\n+    } else {\n+        return;\n+    }\n+}\n+\n+async fn async_test_void_match(x: u32) {\n+    match x {\n+        0 => (),\n+        _ => return,\n+    }\n+}\n+\n+async fn async_read_line() -> String {\n+    use std::io::BufRead;\n+    let stdin = ::std::io::stdin();\n+    return stdin.lock().lines().next().unwrap().unwrap();\n+}\n+\n+async fn async_borrows_but_not_last(value: bool) -> String {\n+    if value {\n+        use std::io::BufRead;\n+        let stdin = ::std::io::stdin();\n+        let _a = stdin.lock().lines().next().unwrap().unwrap();\n+        return String::from(\"test\");\n+    } else {\n+        return String::new();\n+    }\n+}\n+\n+async fn async_test_return_in_macro() {\n+    // This will return and the macro below won't be executed. Removing the `return` from the macro\n+    // will change semantics.\n+    needed_return!(10);\n+    needed_return!(0);\n+}\n+\n+mod async_issue6501 {\n+    async fn foo(bar: Result<(), ()>) {\n+        bar.unwrap_or_else(|_| return)\n+    }\n+\n+    async fn async_test_closure() {\n+        let _ = || {\n+            return;\n+        };\n+        let _ = || return;\n+    }\n+\n+    struct Foo;\n+    #[allow(clippy::unnecessary_lazy_evaluations)]\n+    async fn bar(res: Result<Foo, u8>) -> Foo {\n+        res.unwrap_or_else(|_| return Foo)\n+    }\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "44b293618023e0cb58eeba76fc054698dfdb1441", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 127, "deletions": 19, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=0218a3b12f3aca97fc018bdb1e2bf9710c75fa2b", "patch": "@@ -1,112 +1,220 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:23:5\n+  --> $DIR/needless_return.rs:24:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:27:5\n+  --> $DIR/needless_return.rs:28:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:32:9\n+  --> $DIR/needless_return.rs:33:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:34:9\n+  --> $DIR/needless_return.rs:35:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:40:17\n+  --> $DIR/needless_return.rs:41:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:42:13\n+  --> $DIR/needless_return.rs:43:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:49:9\n+  --> $DIR/needless_return.rs:50:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:51:16\n+  --> $DIR/needless_return.rs:52:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:59:5\n+  --> $DIR/needless_return.rs:60:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:64:9\n+  --> $DIR/needless_return.rs:65:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:66:9\n+  --> $DIR/needless_return.rs:67:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:73:14\n+  --> $DIR/needless_return.rs:74:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:88:9\n+  --> $DIR/needless_return.rs:89:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:90:9\n+  --> $DIR/needless_return.rs:91:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:111:32\n+  --> $DIR/needless_return.rs:112:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:116:13\n+  --> $DIR/needless_return.rs:117:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:118:20\n+  --> $DIR/needless_return.rs:119:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:124:32\n+  --> $DIR/needless_return.rs:125:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n \n-error: aborting due to 18 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:134:5\n+   |\n+LL |     return true;\n+   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:138:5\n+   |\n+LL |     return true;\n+   |     ^^^^^^^^^^^^ help: remove `return`: `true`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:143:9\n+   |\n+LL |         return true;\n+   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:145:9\n+   |\n+LL |         return false;\n+   |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:151:17\n+   |\n+LL |         true => return false,\n+   |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:153:13\n+   |\n+LL |             return true;\n+   |             ^^^^^^^^^^^^ help: remove `return`: `true`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:160:9\n+   |\n+LL |         return true;\n+   |         ^^^^^^^^^^^^ help: remove `return`: `true`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:162:16\n+   |\n+LL |     let _ = || return true;\n+   |                ^^^^^^^^^^^ help: remove `return`: `true`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:170:5\n+   |\n+LL |     return;\n+   |     ^^^^^^^ help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:175:9\n+   |\n+LL |         return;\n+   |         ^^^^^^^ help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:177:9\n+   |\n+LL |         return;\n+   |         ^^^^^^^ help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:184:14\n+   |\n+LL |         _ => return,\n+   |              ^^^^^^ help: replace `return` with an empty block: `{}`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:199:9\n+   |\n+LL |         return String::from(\"test\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:201:9\n+   |\n+LL |         return String::new();\n+   |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:214:32\n+   |\n+LL |         bar.unwrap_or_else(|_| return)\n+   |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:219:13\n+   |\n+LL |             return;\n+   |             ^^^^^^^ help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:221:20\n+   |\n+LL |         let _ = || return;\n+   |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:227:32\n+   |\n+LL |         res.unwrap_or_else(|_| return Foo)\n+   |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n+\n+error: aborting due to 36 previous errors\n "}]}