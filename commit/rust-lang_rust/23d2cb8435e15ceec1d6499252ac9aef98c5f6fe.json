{"sha": "23d2cb8435e15ceec1d6499252ac9aef98c5f6fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDJjYjg0MzVlMTVjZWVjMWQ2NDk5MjUyYWM5YWVmOThjNWY2ZmU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T20:34:34Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T20:34:34Z"}, "message": "Don't suggest extra <> in dyn suggestion.", "tree": {"sha": "0bf56a95a765e4927b7ee797974ba3612e47766f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf56a95a765e4927b7ee797974ba3612e47766f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d2cb8435e15ceec1d6499252ac9aef98c5f6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d2cb8435e15ceec1d6499252ac9aef98c5f6fe", "html_url": "https://github.com/rust-lang/rust/commit/23d2cb8435e15ceec1d6499252ac9aef98c5f6fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d2cb8435e15ceec1d6499252ac9aef98c5f6fe/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13edc17f65bcad7fe9046720a16fc192e810970e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13edc17f65bcad7fe9046720a16fc192e810970e", "html_url": "https://github.com/rust-lang/rust/commit/13edc17f65bcad7fe9046720a16fc192e810970e"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "17e0c42440c219d35a0df6014ffbdfe07ad4de12", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23d2cb8435e15ceec1d6499252ac9aef98c5f6fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d2cb8435e15ceec1d6499252ac9aef98c5f6fe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=23d2cb8435e15ceec1d6499252ac9aef98c5f6fe", "patch": "@@ -914,7 +914,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n \n         if result.is_ok() {\n-            self.maybe_lint_bare_trait(qpath, hir_id);\n+            self.maybe_lint_bare_trait(qpath, hir_id, span);\n             self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n         }\n \n@@ -927,18 +927,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    fn maybe_lint_bare_trait(&self, qpath: &QPath<'_>, hir_id: hir::HirId) {\n+    fn maybe_lint_bare_trait(&self, qpath: &QPath<'_>, hir_id: hir::HirId, span: Span) {\n         if let QPath::TypeRelative(self_ty, _) = qpath {\n             if let TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n                 self_ty.kind\n             {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n                 let (sugg, app) = match self.tcx.sess.source_map().span_to_snippet(self_ty.span) {\n                     Ok(s) if poly_trait_ref.trait_ref.path.is_global() => {\n-                        (format!(\"<dyn ({})>\", s), Applicability::MachineApplicable)\n+                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n                     }\n-                    Ok(s) => (format!(\"<dyn {}>\", s), Applicability::MachineApplicable),\n-                    Err(_) => (\"<dyn <type>>\".to_string(), Applicability::HasPlaceholders),\n+                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                // Wrap in `<..>` if it isn't already.\n+                let sugg = match self.tcx.sess.source_map().span_to_snippet(span) {\n+                    Ok(s) if s.starts_with('<') => sugg,\n+                    _ => format!(\"<{}>\", sugg),\n                 };\n                 let replace = String::from(\"use `dyn`\");\n                 if self.sess().edition() >= Edition::Edition2021 {"}]}