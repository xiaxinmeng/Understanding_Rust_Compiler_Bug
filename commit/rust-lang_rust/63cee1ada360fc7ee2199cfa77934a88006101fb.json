{"sha": "63cee1ada360fc7ee2199cfa77934a88006101fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzY2VlMWFkYTM2MGZjN2VlMjE5OWNmYTc3OTM0YTg4MDA2MTAxZmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T16:59:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-19T16:59:45Z"}, "message": "rollup merge of #17041 : pcwalton/right-unboxed-closure-sugar", "tree": {"sha": "7578a660b73c42d0abe1434a2a6cd2d04407c9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7578a660b73c42d0abe1434a2a6cd2d04407c9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63cee1ada360fc7ee2199cfa77934a88006101fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63cee1ada360fc7ee2199cfa77934a88006101fb", "html_url": "https://github.com/rust-lang/rust/commit/63cee1ada360fc7ee2199cfa77934a88006101fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63cee1ada360fc7ee2199cfa77934a88006101fb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3889f6979647b9bd2dc5f5132d80e3e5b405a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3889f6979647b9bd2dc5f5132d80e3e5b405a5", "html_url": "https://github.com/rust-lang/rust/commit/af3889f6979647b9bd2dc5f5132d80e3e5b405a5"}, {"sha": "7c00d77e8bd18d2e1873e8e995885b3500a88a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c00d77e8bd18d2e1873e8e995885b3500a88a0d", "html_url": "https://github.com/rust-lang/rust/commit/7c00d77e8bd18d2e1873e8e995885b3500a88a0d"}], "stats": {"total": 324, "additions": 207, "deletions": 117}, "files": [{"sha": "15564f7bc531ba20776c821f57098f9cc3c9c096", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -4328,6 +4328,34 @@ impl<'a> Resolver<'a> {\n                 self.resolve_trait_reference(id, tref, reference_type)\n             }\n             UnboxedFnTyParamBound(ref unboxed_function) => {\n+                match self.resolve_path(unboxed_function.ref_id,\n+                                        &unboxed_function.path,\n+                                        TypeNS,\n+                                        true) {\n+                    None => {\n+                        let path_str = self.path_idents_to_string(\n+                            &unboxed_function.path);\n+                        self.resolve_error(unboxed_function.path.span,\n+                                           format!(\"unresolved trait `{}`\",\n+                                                   path_str).as_slice())\n+                    }\n+                    Some(def) => {\n+                        match def {\n+                            (DefTrait(_), _) => {\n+                                self.record_def(unboxed_function.ref_id, def);\n+                            }\n+                            _ => {\n+                                let msg =\n+                                    format!(\"`{}` is not a trait\",\n+                                            self.path_idents_to_string(\n+                                                &unboxed_function.path));\n+                                self.resolve_error(unboxed_function.path.span,\n+                                                   msg.as_slice());\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 for argument in unboxed_function.decl.inputs.iter() {\n                     self.resolve_type(&*argument.ty);\n                 }"}, {"sha": "2503fb2541b900824d4698e7bc48e46a6dfb1c5a", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -585,32 +585,29 @@ pub fn trait_ref_for_unboxed_function<'tcx, AC: AstConv<'tcx>,\n                                       RS:RegionScope>(\n                                       this: &AC,\n                                       rscope: &RS,\n-                                      unboxed_function: &ast::UnboxedFnTy,\n+                                      kind: ast::UnboxedClosureKind,\n+                                      decl: &ast::FnDecl,\n                                       self_ty: Option<ty::t>)\n                                       -> ty::TraitRef {\n-    let lang_item = match unboxed_function.kind {\n+    let lang_item = match kind {\n         ast::FnUnboxedClosureKind => FnTraitLangItem,\n         ast::FnMutUnboxedClosureKind => FnMutTraitLangItem,\n         ast::FnOnceUnboxedClosureKind => FnOnceTraitLangItem,\n     };\n     let trait_did = this.tcx().lang_items.require(lang_item).unwrap();\n-    let input_types =\n-        unboxed_function.decl\n-                        .inputs\n-                        .iter()\n-                        .map(|input| {\n+    let input_types = decl.inputs\n+                          .iter()\n+                          .map(|input| {\n                             ast_ty_to_ty(this, rscope, &*input.ty)\n-                        }).collect::<Vec<_>>();\n+                          }).collect::<Vec<_>>();\n     let input_tuple = if input_types.len() == 0 {\n         ty::mk_nil()\n     } else {\n         ty::mk_tup(this.tcx(), input_types)\n     };\n-    let output_type = ast_ty_to_ty(this,\n-                                   rscope,\n-                                   &*unboxed_function.decl.output);\n+    let output_type = ast_ty_to_ty(this, rscope, &*decl.output);\n     let mut substs = Substs::new_type(vec!(input_tuple, output_type),\n-                                             Vec::new());\n+                                      Vec::new());\n \n     match self_ty {\n         Some(s) => substs.types.push(SelfSpace, s),\n@@ -648,7 +645,8 @@ fn mk_pointer<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                 substs\n             } = trait_ref_for_unboxed_function(this,\n                                                rscope,\n-                                               &**unboxed_function,\n+                                               unboxed_function.kind,\n+                                               &*unboxed_function.decl,\n                                                None);\n             let r = ptr_ty.default_region();\n             let tr = ty::mk_trait(this.tcx(),\n@@ -1510,7 +1508,7 @@ fn compute_region_bound<'tcx, AC: AstConv<'tcx>, RS:RegionScope>(\n pub struct PartitionedBounds<'a> {\n     pub builtin_bounds: ty::BuiltinBounds,\n     pub trait_bounds: Vec<&'a ast::TraitRef>,\n-    pub unboxed_fn_ty_bounds: Vec<&'a ast::UnboxedFnTy>,\n+    pub unboxed_fn_ty_bounds: Vec<&'a ast::UnboxedFnBound>,\n     pub region_bounds: Vec<&'a ast::Lifetime>,\n }\n \n@@ -1574,7 +1572,7 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n                 region_bounds.push(l);\n             }\n             ast::UnboxedFnTyParamBound(ref unboxed_function) => {\n-                unboxed_fn_ty_bounds.push(unboxed_function);\n+                unboxed_fn_ty_bounds.push(&**unboxed_function);\n             }\n         }\n     }"}, {"sha": "40c52fd36b9c15a278fabe6597842c48857f8601", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -1427,7 +1427,8 @@ pub fn instantiate_unboxed_fn_ty<'tcx,AC>(this: &AC,\n     let param_ty = param_ty.to_ty(this.tcx());\n     Rc::new(astconv::trait_ref_for_unboxed_function(this,\n                                                     &rscope,\n-                                                    unboxed_function,\n+                                                    unboxed_function.kind,\n+                                                    &*unboxed_function.decl,\n                                                     Some(param_ty)))\n }\n \n@@ -2165,9 +2166,42 @@ fn conv_param_bounds<'tcx,AC>(this: &AC,\n                                      region_bounds,\n                                      unboxed_fn_ty_bounds } =\n         astconv::partition_bounds(this.tcx(), span, all_bounds.as_slice());\n-    let unboxed_fn_ty_bounds =\n-        unboxed_fn_ty_bounds.into_iter()\n-        .map(|b| instantiate_unboxed_fn_ty(this, b, param_ty));\n+\n+    let unboxed_fn_ty_bounds = unboxed_fn_ty_bounds.move_iter().map(|b| {\n+        let trait_id = this.tcx().def_map.borrow().get(&b.ref_id).def_id();\n+        let mut kind = None;\n+        for &(lang_item, this_kind) in [\n+            (this.tcx().lang_items.fn_trait(), ast::FnUnboxedClosureKind),\n+            (this.tcx().lang_items.fn_mut_trait(),\n+             ast::FnMutUnboxedClosureKind),\n+            (this.tcx().lang_items.fn_once_trait(),\n+             ast::FnOnceUnboxedClosureKind)\n+        ].iter() {\n+            if Some(trait_id) == lang_item {\n+                kind = Some(this_kind);\n+                break\n+            }\n+        }\n+\n+        let kind = match kind {\n+            Some(kind) => kind,\n+            None => {\n+                this.tcx().sess.span_err(b.path.span,\n+                                         \"unboxed function trait must be one \\\n+                                          of `Fn`, `FnMut`, or `FnOnce`\");\n+                ast::FnMutUnboxedClosureKind\n+            }\n+        };\n+\n+        let rscope = ExplicitRscope;\n+        let param_ty = param_ty.to_ty(this.tcx());\n+        Rc::new(astconv::trait_ref_for_unboxed_function(this,\n+                                                        &rscope,\n+                                                        kind,\n+                                                        &*b.decl,\n+                                                        Some(param_ty)))\n+    });\n+\n     let trait_bounds: Vec<Rc<ty::TraitRef>> =\n         trait_bounds.into_iter()\n         .map(|b| {"}, {"sha": "e74222fac09e74ab3734d0f7f8b8e831cf43efee", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -213,12 +213,19 @@ pub static DUMMY_NODE_ID: NodeId = -1;\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum TyParamBound {\n     TraitTyParamBound(TraitRef),\n-    UnboxedFnTyParamBound(UnboxedFnTy),\n+    UnboxedFnTyParamBound(P<UnboxedFnBound>),\n     RegionTyParamBound(Lifetime)\n }\n \n pub type TyParamBounds = OwnedSlice<TyParamBound>;\n \n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub struct UnboxedFnBound {\n+    pub path: Path,\n+    pub decl: P<FnDecl>,\n+    pub ref_id: NodeId,\n+}\n+\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct TyParam {\n     pub ident: Ident,"}, {"sha": "1441f5beb6aba4bfc9914e669f5c0742971e0f72", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -657,16 +657,26 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n     })\n }\n \n-pub fn noop_fold_ty_param_bound<T: Folder>(tpb: TyParamBound, fld: &mut T)\n-                                           -> TyParamBound {\n+pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n+                                   -> TyParamBound\n+                                   where T: Folder {\n     match tpb {\n         TraitTyParamBound(ty) => TraitTyParamBound(fld.fold_trait_ref(ty)),\n         RegionTyParamBound(lifetime) => RegionTyParamBound(fld.fold_lifetime(lifetime)),\n-        UnboxedFnTyParamBound(UnboxedFnTy {decl, kind}) => {\n-            UnboxedFnTyParamBound(UnboxedFnTy {\n-                decl: fld.fold_fn_decl(decl),\n-                kind: kind,\n-            })\n+        UnboxedFnTyParamBound(bound) => {\n+            match *bound {\n+                UnboxedFnBound {\n+                    ref path,\n+                    ref decl,\n+                    ref_id\n+                } => {\n+                    UnboxedFnTyParamBound(P(UnboxedFnBound {\n+                        path: fld.fold_path(path.clone()),\n+                        decl: fld.fold_fn_decl(decl.clone()),\n+                        ref_id: fld.new_id(ref_id),\n+                    }))\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "8a0027e5c06e691147cda76f1841d746321b5cee", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 27, "deletions": 49, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -55,7 +55,8 @@ use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyNil, TyParam, TyParamBound, TyParen, TyPath, TyPtr, TyQPath};\n use ast::{TyRptr, TyTup, TyU32, TyUnboxedFn, TyUniq, TyVec, UnUniq};\n use ast::{TypeImplItem, TypeTraitItem, Typedef, UnboxedClosureKind};\n-use ast::{UnboxedFnTy, UnboxedFnTyParamBound, UnnamedField, UnsafeBlock};\n+use ast::{UnboxedFnBound, UnboxedFnTy, UnboxedFnTyParamBound};\n+use ast::{UnnamedField, UnsafeBlock};\n use ast::{UnsafeFn, ViewItem, ViewItem_, ViewItemExternCrate, ViewItemUse};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause, WherePredicate};\n@@ -3666,39 +3667,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn parse_unboxed_function_type(&mut self) -> UnboxedFnTy {\n-        let (optional_unboxed_closure_kind, inputs) =\n-            if self.eat(&token::OROR) {\n-                (None, Vec::new())\n-            } else {\n-                self.expect_or();\n-\n-                let optional_unboxed_closure_kind =\n-                    self.parse_optional_unboxed_closure_kind();\n-\n-                let inputs = self.parse_seq_to_before_or(&token::COMMA,\n-                                                         |p| {\n-                    p.parse_arg_general(false)\n-                });\n-                self.expect_or();\n-                (optional_unboxed_closure_kind, inputs)\n-            };\n-\n-        let (return_style, output) = self.parse_ret_ty();\n-        UnboxedFnTy {\n-            decl: P(FnDecl {\n-                inputs: inputs,\n-                output: output,\n-                cf: return_style,\n-                variadic: false,\n-            }),\n-            kind: match optional_unboxed_closure_kind {\n-                Some(kind) => kind,\n-                None => FnMutUnboxedClosureKind,\n-            },\n-        }\n-    }\n-\n     // Parses a sequence of bounds if a `:` is found,\n     // otherwise returns empty list.\n     fn parse_colon_then_ty_param_bounds(&mut self)\n@@ -3730,13 +3698,31 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                 }\n                 token::MOD_SEP | token::IDENT(..) => {\n-                    let tref = self.parse_trait_ref();\n-                    result.push(TraitTyParamBound(tref));\n-                }\n-                token::BINOP(token::OR) | token::OROR => {\n-                    let unboxed_function_type =\n-                        self.parse_unboxed_function_type();\n-                    result.push(UnboxedFnTyParamBound(unboxed_function_type));\n+                    let path =\n+                        self.parse_path(LifetimeAndTypesWithoutColons).path;\n+                    if self.token == token::LPAREN {\n+                        self.bump();\n+                        let inputs = self.parse_seq_to_end(\n+                            &token::RPAREN,\n+                            seq_sep_trailing_allowed(token::COMMA),\n+                            |p| p.parse_arg_general(false));\n+                        let (return_style, output) = self.parse_ret_ty();\n+                        result.push(UnboxedFnTyParamBound(P(UnboxedFnBound {\n+                            path: path,\n+                            decl: P(FnDecl {\n+                                inputs: inputs,\n+                                output: output,\n+                                cf: return_style,\n+                                variadic: false,\n+                            }),\n+                            ref_id: ast::DUMMY_NODE_ID,\n+                        })));\n+                    } else {\n+                        result.push(TraitTyParamBound(ast::TraitRef {\n+                            path: path,\n+                            ref_id: ast::DUMMY_NODE_ID,\n+                        }))\n+                    }\n                 }\n                 _ => break,\n             }\n@@ -4423,14 +4409,6 @@ impl<'a> Parser<'a> {\n          Some(attrs))\n     }\n \n-    /// Parse a::B<String,int>\n-    fn parse_trait_ref(&mut self) -> TraitRef {\n-        ast::TraitRef {\n-            path: self.parse_path(LifetimeAndTypesWithoutColons).path,\n-            ref_id: ast::DUMMY_NODE_ID,\n-        }\n-    }\n-\n     /// Parse struct Foo { ... }\n     fn parse_item_struct(&mut self, is_virtual: bool) -> ItemInfo {\n         let class_name = self.parse_ident();"}, {"sha": "d7dd87a096e179a7711e4da96beb05fed7202743", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -2190,16 +2190,13 @@ impl<'a> State<'a> {\n                         self.print_lifetime(lt)\n                     }\n                     UnboxedFnTyParamBound(ref unboxed_function_type) => {\n-                        self.print_ty_fn(None,\n-                                         None,\n-                                         ast::NormalFn,\n-                                         ast::Many,\n-                                         &*unboxed_function_type.decl,\n-                                         None,\n-                                         &OwnedSlice::empty(),\n-                                         None,\n-                                         None,\n-                                         Some(unboxed_function_type.kind))\n+                        try!(self.print_path(&unboxed_function_type.path,\n+                                             false));\n+                        try!(self.popen());\n+                        try!(self.print_fn_args(&*unboxed_function_type.decl,\n+                                                None));\n+                        try!(self.pclose());\n+                        self.print_fn_output(&*unboxed_function_type.decl)\n                     }\n                 })\n             }\n@@ -2430,6 +2427,23 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n+    pub fn print_fn_output(&mut self, decl: &ast::FnDecl) -> IoResult<()> {\n+        match decl.output.node {\n+            ast::TyNil => Ok(()),\n+            _ => {\n+                try!(self.space_if_not_bol());\n+                try!(self.ibox(indent_unit));\n+                try!(self.word_space(\"->\"));\n+                if decl.cf == ast::NoReturn {\n+                    try!(self.word_nbsp(\"!\"));\n+                } else {\n+                    try!(self.print_type(&*decl.output));\n+                }\n+                self.end()\n+            }\n+        }\n+    }\n+\n     pub fn print_ty_fn(&mut self,\n                        opt_abi: Option<abi::Abi>,\n                        opt_sigil: Option<char>,\n@@ -2510,20 +2524,7 @@ impl<'a> State<'a> {\n \n         try!(self.maybe_print_comment(decl.output.span.lo));\n \n-        match decl.output.node {\n-            ast::TyNil => {}\n-            _ => {\n-                try!(self.space_if_not_bol());\n-                try!(self.ibox(indent_unit));\n-                try!(self.word_space(\"->\"));\n-                if decl.cf == ast::NoReturn {\n-                    try!(self.word_nbsp(\"!\"));\n-                } else {\n-                    try!(self.print_type(&*decl.output));\n-                }\n-                try!(self.end());\n-            }\n-        }\n+        try!(self.print_fn_output(decl));\n \n         match generics {\n             Some(generics) => try!(self.print_where_clause(generics)),"}, {"sha": "03438b1d7e1e515b4fe49da679a40a0a3169a4a6", "filename": "src/test/compile-fail/borrowck-unboxed-closures.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -10,17 +10,17 @@\n \n #![feature(overloaded_calls)]\n \n-fn a<F:|&: int, int| -> int>(mut f: F) {\n+fn a<F:Fn(int, int) -> int>(mut f: F) {\n     let g = &mut f;\n     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n     //~^ ERROR cannot borrow `f` as immutable\n }\n \n-fn b<F:|&mut: int, int| -> int>(f: F) {\n+fn b<F:FnMut(int, int) -> int>(f: F) {\n     f(1, 2);    //~ ERROR cannot borrow immutable argument\n }\n \n-fn c<F:|: int, int| -> int>(f: F) {\n+fn c<F:FnOnce(int, int) -> int>(f: F) {\n     f(1, 2);\n     f(1, 2);    //~ ERROR use of moved value\n }"}, {"sha": "f51160a1b233d3bc86d11fdf5d3861d7d0a3a2f0", "filename": "src/test/compile-fail/unboxed-closure-sugar-nonexistent-trait.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<F:Nonexist(int) -> int>(x: F) {} //~ ERROR unresolved trait\n+\n+type Typedef = int;\n+\n+fn g<F:Typedef(int) -> int>(x: F) {} //~ ERROR `Typedef` is not a trait\n+\n+fn main() {}\n+"}, {"sha": "a751ae1c518ea9bee7a19a0db18f090199728d62", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-trait.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {}\n+\n+fn f<F:Trait(int) -> int>(x: F) {}\n+//~^ ERROR unboxed function trait must be one of `Fn`, `FnMut`, or `FnOnce`\n+\n+fn main() {}\n+"}, {"sha": "97ad64a77baf44cb18c2d556fe648a2febdbf3c5", "filename": "src/test/compile-fail/unboxed-closures-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(lang_items, overloaded_calls, unboxed_closures)]\n \n-fn c<F:|: int, int| -> int>(f: F) -> int {\n+fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n     f(5, 6)\n }\n "}, {"sha": "b0947f46a86ae9b6ef6842b0c03792aa352b0a3f", "filename": "src/test/run-pass/fn-trait-sugar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Ffn-trait-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Ffn-trait-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-trait-sugar.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -21,7 +21,7 @@ impl FnMut<(int,),int> for S {\n     }\n }\n \n-fn call_it<F:|int|->int>(mut f: F, x: int) -> int {\n+fn call_it<F:FnMut(int)->int>(mut f: F, x: int) -> int {\n     f.call_mut((x,)) + 3\n }\n "}, {"sha": "d91204951551a3577649e7a164f3a74a1bd38e6f", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -10,15 +10,15 @@\n \n #![feature(lang_items, overloaded_calls, unboxed_closures)]\n \n-fn a<F:|&: int, int| -> int>(f: F) -> int {\n+fn a<F:Fn(int, int) -> int>(f: F) -> int {\n     f(1, 2)\n }\n \n-fn b<F:|&mut: int, int| -> int>(mut f: F) -> int {\n+fn b<F:FnMut(int, int) -> int>(mut f: F) -> int {\n     f(3, 4)\n }\n \n-fn c<F:|: int, int| -> int>(f: F) -> int {\n+fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n     f(5, 6)\n }\n "}, {"sha": "a455e4d2032630f21de4cfe5ef7ab80a52db474c", "filename": "src/test/run-pass/unboxed-closures-drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -41,15 +41,15 @@ impl Drop for Droppable {\n     }\n }\n \n-fn a<F:|&: int, int| -> int>(f: F) -> int {\n+fn a<F:Fn(int, int) -> int>(f: F) -> int {\n     f(1, 2)\n }\n \n-fn b<F:|&mut: int, int| -> int>(mut f: F) -> int {\n+fn b<F:FnMut(int, int) -> int>(mut f: F) -> int {\n     f(3, 4)\n }\n \n-fn c<F:|: int, int| -> int>(f: F) -> int {\n+fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n     f(5, 6)\n }\n "}, {"sha": "aef6956118ecb7b39b1bc5fcf0aa79426df631e4", "filename": "src/test/run-pass/unboxed-closures-single-word-env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -13,15 +13,15 @@\n \n #![feature(overloaded_calls, unboxed_closures)]\n \n-fn a<F:|&: int, int| -> int>(f: F) -> int {\n+fn a<F:Fn(int, int) -> int>(f: F) -> int {\n     f(1, 2)\n }\n \n-fn b<F:|&mut: int, int| -> int>(mut f: F) -> int {\n+fn b<F:FnMut(int, int) -> int>(mut f: F) -> int {\n     f(3, 4)\n }\n \n-fn c<F:|: int, int| -> int>(f: F) -> int {\n+fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n     f(5, 6)\n }\n "}, {"sha": "f35daa65a43900fcd5202ae665674f07ee72c927", "filename": "src/test/run-pass/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -21,8 +21,7 @@\n \n use std::ptr;\n \n-pub fn replace_map<'a, T, F>(src: &mut T, prod: F)\n-where F: |: T| -> T {\n+pub fn replace_map<'a, T, F>(src: &mut T, prod: F) where F: FnOnce(T) -> T {\n     unsafe { *src = prod(ptr::read(src as *mut T as *const T)); }\n }\n "}, {"sha": "808e937bc72e3d1c0ad46a6b3a773d4ac50535fe", "filename": "src/test/run-pass/where-clauses-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63cee1ada360fc7ee2199cfa77934a88006101fb/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs?ref=63cee1ada360fc7ee2199cfa77934a88006101fb", "patch": "@@ -13,7 +13,7 @@\n struct Bencher;\n \n // ICE\n-fn warm_up<'a, F>(f: F) where F: |&: &'a mut Bencher| {\n+fn warm_up<'a, F>(f: F) where F: Fn(&'a mut Bencher) {\n }\n \n fn main() {"}]}