{"sha": "9b0427fc943490fd0065c656afd185a219b672c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMDQyN2ZjOTQzNDkwZmQwMDY1YzY1NmFmZDE4NWEyMTliNjcyYzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-24T02:16:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T02:16:59Z"}, "message": "Rollup merge of #66411 - RalfJung:forget, r=sfackler\n\nmem::forget docs: mention ManuallyDrop\n\nCc @SimonSapin @Centril", "tree": {"sha": "17303d72b4d50f87b1e04b69cfad2446df2c1426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17303d72b4d50f87b1e04b69cfad2446df2c1426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0427fc943490fd0065c656afd185a219b672c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2egbCRBK7hj4Ov3rIwAAdHIIAEEHps2TSFTcYo/IF6j1jeTT\nLbECHC04ectJweqmLGWravwedu+UE6qphNmnKTTW0VA30oLsDw7wR1ascNWo4Yfs\nP8trqO0iW3A/J82xYMUOYEgOe6yXhANZ22ZOT5q9YgKVp0KmYOB6zmc3GqmnQOYI\ng+BetKuFQRRxxhtIzqTyfMNRml1OYflEdKEKSi9COlKkaQyzhdLnlDaSj/VV0a8B\nVKjFepvZbyaqeDADWePSRgKGZPQwsz3SU2TG8MGLewl+lhu9mwwCXKrtTRf8C/o/\nGSkRLv/vwf4BWIoLX5ZkLTOjcqq8XBsRtROj95UcINjsOclFGnoJsSvPAO74jSo=\n=rLns\n-----END PGP SIGNATURE-----\n", "payload": "tree 17303d72b4d50f87b1e04b69cfad2446df2c1426\nparent d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab\nparent 7009e6d001ebc807eca04c5b9f07779db02eca99\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574561819 +0100\ncommitter GitHub <noreply@github.com> 1574561819 +0100\n\nRollup merge of #66411 - RalfJung:forget, r=sfackler\n\nmem::forget docs: mention ManuallyDrop\n\nCc @SimonSapin @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0427fc943490fd0065c656afd185a219b672c4", "html_url": "https://github.com/rust-lang/rust/commit/9b0427fc943490fd0065c656afd185a219b672c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0427fc943490fd0065c656afd185a219b672c4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab", "html_url": "https://github.com/rust-lang/rust/commit/d845e6fc8d293cf8cf0c0ac987b9c917a1eb6fab"}, {"sha": "7009e6d001ebc807eca04c5b9f07779db02eca99", "url": "https://api.github.com/repos/rust-lang/rust/commits/7009e6d001ebc807eca04c5b9f07779db02eca99", "html_url": "https://github.com/rust-lang/rust/commit/7009e6d001ebc807eca04c5b9f07779db02eca99"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "bba441464ff35bf22452748bd111b82829249b00", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9b0427fc943490fd0065c656afd185a219b672c4/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0427fc943490fd0065c656afd185a219b672c4/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=9b0427fc943490fd0065c656afd185a219b672c4", "patch": "@@ -45,8 +45,9 @@ pub use crate::intrinsics::transmute;\n /// `mem::forget` from safe code does not fundamentally change Rust's safety\n /// guarantees.\n ///\n-/// That said, leaking resources such as memory or I/O objects is usually undesirable,\n-/// so `forget` is only recommended for specialized use cases like those shown below.\n+/// That said, leaking resources such as memory or I/O objects is usually undesirable.\n+/// The need comes up in some specialized use cases for FFI or unsafe code, but even\n+/// then, [`ManuallyDrop`] is typically preferred.\n ///\n /// Because forgetting a value is allowed, any `unsafe` code you write must\n /// allow for this possibility. You cannot return a value and expect that the\n@@ -68,7 +69,35 @@ pub use crate::intrinsics::transmute;\n /// ```\n ///\n /// The practical use cases for `forget` are rather specialized and mainly come\n-/// up in unsafe or FFI code.\n+/// up in unsafe or FFI code. However, [`ManuallyDrop`] is usually preferred\n+/// for such cases, e.g.:\n+///\n+/// ```\n+/// use std::mem::ManuallyDrop;\n+///\n+/// let v = vec![65, 122];\n+/// // Before we disassemble `v` into its raw parts, make sure it\n+/// // does not get dropped!\n+/// let mut v = ManuallyDrop::new(v);\n+/// // Now disassemble `v`. These operations cannot panic, so there cannot be a leak.\n+/// let ptr = v.as_mut_ptr();\n+/// let cap = v.capacity();\n+/// // Finally, build a `String`.\n+/// let s = unsafe { String::from_raw_parts(ptr, 2, cap) };\n+/// assert_eq!(s, \"Az\");\n+/// // `s` is implicitly dropped and its memory deallocated.\n+/// ```\n+///\n+/// Using `ManuallyDrop` here has two advantages:\n+///\n+/// * We do not \"touch\" `v` after disassembling it. For some types, operations\n+///   such as passing ownership (to a funcion like `mem::forget`) requires them to actually\n+///   be fully owned right now; that is a promise we do not want to make here as we are\n+///   in the process of transferring ownership to the new `String` we are building.\n+/// * In case of an unexpected panic, `ManuallyDrop` is not dropped, but if the panic\n+///   occurs before `mem::forget` was called we might end up dropping invalid data,\n+///   or double-dropping. In other words, `ManuallyDrop` errs on the side of leaking\n+///   instead of erring on the side of dropping.\n ///\n /// [drop]: fn.drop.html\n /// [uninit]: fn.uninitialized.html\n@@ -78,6 +107,7 @@ pub use crate::intrinsics::transmute;\n /// [leak]: ../../std/boxed/struct.Box.html#method.leak\n /// [into_raw]: ../../std/boxed/struct.Box.html#method.into_raw\n /// [ub]: ../../reference/behavior-considered-undefined.html\n+/// [`ManuallyDrop`]: struct.ManuallyDrop.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {"}]}