{"sha": "ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "node_id": "C_kwDOAAsO6NoAKGJhMmQ1ZWRlNzBlZDdlMzdkN2YxM2EzOTdiOWQ1NTRlMjM4NmExOWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-19T01:01:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-19T01:01:59Z"}, "message": "Rollup merge of #92519 - ChrisDenton:command-maybe-verbatim, r=dtolnay\n\nUse verbatim paths for `process::Command` if necessary\n\nIn #89174, the standard library started using verbatim paths so longer paths are usable by default. However, `Command` was originally left out because of the way `CreateProcessW` was being called. This was changed as a side effect of #87704 so now `Command` paths can be converted to verbatim too (if necessary).", "tree": {"sha": "078ea0f9241c1afbace170ba8ebc25f4bb4028ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/078ea0f9241c1afbace170ba8ebc25f4bb4028ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNSuHCRBK7hj4Ov3rIwAADf4IAAHlFg/JT6ozOSwqblx6Jt/E\nBeYsRtIwS694YtFQwsLGY7184MaCLkm/YrAZgnxpvR/zBsYvdFjZyWSu+J8r1dnL\ntwRPgNCVsrpER/7gmTi3XAL5TlsRStg5RpG2UGpgMsMAUyADNi8iskwTGc7ecMoU\nBNc70D5l8u99RYpQHcD7ErtymRY6my6yKjp5rW7nJ9xJwKFawBBJuMpUK2qFNl3I\nNZzkJoLbc/toFLkq/qBM38MURWhomfWH3Zu9SZKBYZqLto0VCUjqtQeaMc60nEKQ\nA4mYqveD2YL1cR8siAriB/w38TznhUwNCbKMoe0lCUIFzuWs95KNDLgDHlhj3uY=\n=DoFm\n-----END PGP SIGNATURE-----\n", "payload": "tree 078ea0f9241c1afbace170ba8ebc25f4bb4028ee\nparent 9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45\nparent 93f627daa53677f76ad50bcfa3c8eb618f5ca89f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647651719 +0100\ncommitter GitHub <noreply@github.com> 1647651719 +0100\n\nRollup merge of #92519 - ChrisDenton:command-maybe-verbatim, r=dtolnay\n\nUse verbatim paths for `process::Command` if necessary\n\nIn #89174, the standard library started using verbatim paths so longer paths are usable by default. However, `Command` was originally left out because of the way `CreateProcessW` was being called. This was changed as a side effect of #87704 so now `Command` paths can be converted to verbatim too (if necessary).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "html_url": "https://github.com/rust-lang/rust/commit/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45", "html_url": "https://github.com/rust-lang/rust/commit/9b701e7eaa08c2b2ef8c6e59b8b33436cb10aa45"}, {"sha": "93f627daa53677f76ad50bcfa3c8eb618f5ca89f", "url": "https://api.github.com/repos/rust-lang/rust/commits/93f627daa53677f76ad50bcfa3c8eb618f5ca89f", "html_url": "https://github.com/rust-lang/rust/commit/93f627daa53677f76ad50bcfa3c8eb618f5ca89f"}], "stats": {"total": 74, "additions": 44, "deletions": 30}, "files": [{"sha": "a13585a02224aed6e43f0cc1fd042635275c3b25", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "patch": "@@ -19,12 +19,12 @@ use crate::path::{Path, PathBuf};\n use crate::ptr;\n use crate::sys::c;\n use crate::sys::c::NonZeroDWORD;\n+use crate::sys::cvt;\n use crate::sys::fs::{File, OpenOptions};\n use crate::sys::handle::Handle;\n use crate::sys::path;\n use crate::sys::pipe::{self, AnonPipe};\n use crate::sys::stdio;\n-use crate::sys::{cvt, to_u16s};\n use crate::sys_common::mutex::StaticMutex;\n use crate::sys_common::process::{CommandEnv, CommandEnvs};\n use crate::sys_common::{AsInner, IntoInner};\n@@ -269,8 +269,13 @@ impl Command {\n             None\n         };\n         let program = resolve_exe(&self.program, || env::var_os(\"PATH\"), child_paths)?;\n+        // Case insensitive \"ends_with\" of UTF-16 encoded \".bat\" or \".cmd\"\n+        let is_batch_file = matches!(\n+            program.len().checked_sub(5).and_then(|i| program.get(i..)),\n+            Some([46, 98 | 66, 97 | 65, 116 | 84, 0] | [46, 99 | 67, 109 | 77, 100 | 68, 0])\n+        );\n         let mut cmd_str =\n-            make_command_line(program.as_os_str(), &self.args, self.force_quotes_enabled)?;\n+            make_command_line(&program, &self.args, self.force_quotes_enabled, is_batch_file)?;\n         cmd_str.push(0); // add null terminator\n \n         // stolen from the libuv code.\n@@ -309,7 +314,6 @@ impl Command {\n         si.hStdOutput = stdout.as_raw_handle();\n         si.hStdError = stderr.as_raw_handle();\n \n-        let program = to_u16s(&program)?;\n         unsafe {\n             cvt(c::CreateProcessW(\n                 program.as_ptr(),\n@@ -366,7 +370,7 @@ fn resolve_exe<'a>(\n     exe_path: &'a OsStr,\n     parent_paths: impl FnOnce() -> Option<OsString>,\n     child_paths: Option<&OsStr>,\n-) -> io::Result<PathBuf> {\n+) -> io::Result<Vec<u16>> {\n     // Early return if there is no filename.\n     if exe_path.is_empty() || path::has_trailing_slash(exe_path) {\n         return Err(io::const_io_error!(\n@@ -388,19 +392,19 @@ fn resolve_exe<'a>(\n         if has_exe_suffix {\n             // The application name is a path to a `.exe` file.\n             // Let `CreateProcessW` figure out if it exists or not.\n-            return Ok(exe_path.into());\n+            return path::maybe_verbatim(Path::new(exe_path));\n         }\n         let mut path = PathBuf::from(exe_path);\n \n         // Append `.exe` if not already there.\n         path = path::append_suffix(path, EXE_SUFFIX.as_ref());\n-        if program_exists(&path) {\n+        if let Some(path) = program_exists(&path) {\n             return Ok(path);\n         } else {\n             // It's ok to use `set_extension` here because the intent is to\n             // remove the extension that was just added.\n             path.set_extension(\"\");\n-            return Ok(path);\n+            return path::maybe_verbatim(&path);\n         }\n     } else {\n         ensure_no_nuls(exe_path)?;\n@@ -415,7 +419,7 @@ fn resolve_exe<'a>(\n             if !has_extension {\n                 path.set_extension(EXE_EXTENSION);\n             }\n-            if program_exists(&path) { Some(path) } else { None }\n+            program_exists(&path)\n         });\n         if let Some(path) = result {\n             return Ok(path);\n@@ -431,10 +435,10 @@ fn search_paths<Paths, Exists>(\n     parent_paths: Paths,\n     child_paths: Option<&OsStr>,\n     mut exists: Exists,\n-) -> Option<PathBuf>\n+) -> Option<Vec<u16>>\n where\n     Paths: FnOnce() -> Option<OsString>,\n-    Exists: FnMut(PathBuf) -> Option<PathBuf>,\n+    Exists: FnMut(PathBuf) -> Option<Vec<u16>>,\n {\n     // 1. Child paths\n     // This is for consistency with Rust's historic behaviour.\n@@ -486,17 +490,18 @@ where\n }\n \n /// Check if a file exists without following symlinks.\n-fn program_exists(path: &Path) -> bool {\n+fn program_exists(path: &Path) -> Option<Vec<u16>> {\n     unsafe {\n-        to_u16s(path)\n-            .map(|path| {\n-                // Getting attributes using `GetFileAttributesW` does not follow symlinks\n-                // and it will almost always be successful if the link exists.\n-                // There are some exceptions for special system files (e.g. the pagefile)\n-                // but these are not executable.\n-                c::GetFileAttributesW(path.as_ptr()) != c::INVALID_FILE_ATTRIBUTES\n-            })\n-            .unwrap_or(false)\n+        let path = path::maybe_verbatim(path).ok()?;\n+        // Getting attributes using `GetFileAttributesW` does not follow symlinks\n+        // and it will almost always be successful if the link exists.\n+        // There are some exceptions for special system files (e.g. the pagefile)\n+        // but these are not executable.\n+        if c::GetFileAttributesW(path.as_ptr()) == c::INVALID_FILE_ATTRIBUTES {\n+            None\n+        } else {\n+            Some(path)\n+        }\n     }\n }\n \n@@ -730,7 +735,12 @@ enum Quote {\n \n // Produces a wide string *without terminating null*; returns an error if\n // `prog` or any of the `args` contain a nul.\n-fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Result<Vec<u16>> {\n+fn make_command_line(\n+    prog: &[u16],\n+    args: &[Arg],\n+    force_quotes: bool,\n+    is_batch_file: bool,\n+) -> io::Result<Vec<u16>> {\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n@@ -739,17 +749,18 @@ fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Resu\n     // need to add an extra pair of quotes surrounding the whole command line\n     // so they are properly passed on to the script.\n     // See issue #91991.\n-    let is_batch_file = Path::new(prog)\n-        .extension()\n-        .map(|ext| ext.eq_ignore_ascii_case(\"cmd\") || ext.eq_ignore_ascii_case(\"bat\"))\n-        .unwrap_or(false);\n     if is_batch_file {\n         cmd.push(b'\"' as u16);\n     }\n \n-    // Always quote the program name so CreateProcess doesn't interpret args as\n-    // part of the name if the binary wasn't found first time.\n-    append_arg(&mut cmd, prog, Quote::Always)?;\n+    // Always quote the program name so CreateProcess to avoid ambiguity when\n+    // the child process parses its arguments.\n+    // Note that quotes aren't escaped here because they can't be used in arg0.\n+    // But that's ok because file paths can't contain quotes.\n+    cmd.push(b'\"' as u16);\n+    cmd.extend_from_slice(prog.strip_suffix(&[0]).unwrap_or(prog));\n+    cmd.push(b'\"' as u16);\n+\n     for arg in args {\n         cmd.push(' ' as u16);\n         let (arg, quote) = match arg {"}, {"sha": "96477fb19dafaf1802801e8e21ea9b04b1ab6125", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "patch": "@@ -3,11 +3,12 @@ use super::Arg;\n use crate::env;\n use crate::ffi::{OsStr, OsString};\n use crate::process::Command;\n+use crate::sys::to_u16s;\n \n #[test]\n fn test_raw_args() {\n     let command_line = &make_command_line(\n-        OsStr::new(\"quoted exe\"),\n+        &to_u16s(\"quoted exe\").unwrap(),\n         &[\n             Arg::Regular(OsString::from(\"quote me\")),\n             Arg::Raw(OsString::from(\"quote me *not*\")),\n@@ -16,6 +17,7 @@ fn test_raw_args() {\n             Arg::Regular(OsString::from(\"optional-quotes\")),\n         ],\n         false,\n+        false,\n     )\n     .unwrap();\n     assert_eq!(\n@@ -28,9 +30,10 @@ fn test_raw_args() {\n fn test_make_command_line() {\n     fn test_wrapper(prog: &str, args: &[&str], force_quotes: bool) -> String {\n         let command_line = &make_command_line(\n-            OsStr::new(prog),\n+            &to_u16s(prog).unwrap(),\n             &args.iter().map(|a| Arg::Regular(OsString::from(a))).collect::<Vec<_>>(),\n             force_quotes,\n+            false,\n         )\n         .unwrap();\n         String::from_utf16(command_line).unwrap()"}]}