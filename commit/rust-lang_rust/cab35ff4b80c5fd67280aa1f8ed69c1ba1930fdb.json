{"sha": "cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYjM1ZmY0YjgwYzVmZDY3MjgwYWExZjhlZDY5YzFiYTE5MzBmZGI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-25T08:58:08Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-05T11:41:02Z"}, "message": "trans: support uses of projections of immediate pairs.", "tree": {"sha": "6ddca8b18b457f259bfdc422422acf2b9ff997cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ddca8b18b457f259bfdc422422acf2b9ff997cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "html_url": "https://github.com/rust-lang/rust/commit/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f453cf3b124711b2e20315937403d89913bcd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f453cf3b124711b2e20315937403d89913bcd2", "html_url": "https://github.com/rust-lang/rust/commit/f1f453cf3b124711b2e20315937403d89913bcd2"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "59143bc01bf7a7ce74b0b3323f0b5d6e38dda653", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "patch": "@@ -39,6 +39,8 @@ pub fn lvalue_temps<'bcx,'tcx>(bcx: Block<'bcx,'tcx>,\n             // in an ValueRef without an alloca.\n             assert!(common::type_is_immediate(bcx.ccx(), ty) ||\n                     common::type_is_fat_ptr(bcx.tcx(), ty));\n+        } else if common::type_is_imm_pair(bcx.ccx(), ty) {\n+            // We allow pairs and uses of any of their 2 fields.\n         } else {\n             // These sorts of types require an alloca. Note that\n             // type_is_immediate() may *still* be true, particularly\n@@ -111,6 +113,21 @@ impl<'mir, 'bcx, 'tcx> Visitor<'tcx> for TempAnalyzer<'mir, 'bcx, 'tcx> {\n                     context: LvalueContext) {\n         debug!(\"visit_lvalue(lvalue={:?}, context={:?})\", lvalue, context);\n \n+        // Allow uses of projections of immediate pair fields.\n+        if let mir::Lvalue::Projection(ref proj) = *lvalue {\n+            if let mir::Lvalue::Temp(index) = proj.base {\n+                let ty = self.mir.temp_decls[index as usize].ty;\n+                let ty = self.bcx.monomorphize(&ty);\n+                if common::type_is_imm_pair(self.bcx.ccx(), ty) {\n+                    if let mir::ProjectionElem::Field(..) = proj.elem {\n+                        if let LvalueContext::Consume = context {\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n         match *lvalue {\n             mir::Lvalue::Temp(index) => {\n                 match context {"}, {"sha": "c21f112b5f60380f6db299ab13bf534c78149fbb", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=cab35ff4b80c5fd67280aa1f8ed69c1ba1930fdb", "patch": "@@ -187,6 +187,26 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     }\n                 }\n \n+                // Moves out of pair fields are trivial.\n+                if let &mir::Lvalue::Projection(ref proj) = lvalue {\n+                    if let mir::Lvalue::Temp(index) = proj.base {\n+                        let temp_ref = &self.temps[index as usize];\n+                        if let &TempRef::Operand(Some(o)) = temp_ref {\n+                            match (o.val, &proj.elem) {\n+                                (OperandValue::Pair(a, b),\n+                                 &mir::ProjectionElem::Field(ref f, ty)) => {\n+                                    let llval = [a, b][f.index()];\n+                                    return OperandRef {\n+                                        val: OperandValue::Immediate(llval),\n+                                        ty: bcx.monomorphize(&ty)\n+                                    };\n+                                }\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 // for most lvalues, to consume them we just load them\n                 // out from their home\n                 let tr_lvalue = self.trans_lvalue(bcx, lvalue);"}]}