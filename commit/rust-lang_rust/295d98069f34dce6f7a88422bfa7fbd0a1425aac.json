{"sha": "295d98069f34dce6f7a88422bfa7fbd0a1425aac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NWQ5ODA2OWYzNGRjZTZmN2E4ODQyMmJmYTdmYmQwYTE0MjVhYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T04:56:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T04:56:01Z"}, "message": "Auto merge of #50390 - hdhoang:46205_deny_by_default, r=nikomatsakis\n\nlint: deny incoherent_fundamental_impls by default\n\nWarn the ecosystem of the pending intent-to-disallow in #49799.\n\nThere are 4 ICEs on my machine, look unrelated (having happened before in https://github.com/rust-lang/rust/issues/49146#issuecomment-384473523)\n\n```rust\nthread 'main' panicked at 'assertion failed: position <= slice.len()', libserialize/leb128.rs:97:1\n```\n\n```\n    [run-pass] run-pass/allocator/xcrate-use2.rs\n    [run-pass] run-pass/issue-12133-3.rs\n    [run-pass] run-pass/issue-32518.rs\n    [run-pass] run-pass/trait-default-method-xc-2.rs\n```\n\nr? @nikomatsakis", "tree": {"sha": "24148550b68ba0f9d9eae2ae66db79ec1411da55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24148550b68ba0f9d9eae2ae66db79ec1411da55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295d98069f34dce6f7a88422bfa7fbd0a1425aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295d98069f34dce6f7a88422bfa7fbd0a1425aac", "html_url": "https://github.com/rust-lang/rust/commit/295d98069f34dce6f7a88422bfa7fbd0a1425aac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295d98069f34dce6f7a88422bfa7fbd0a1425aac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "html_url": "https://github.com/rust-lang/rust/commit/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2"}, {"sha": "cabbe50c550a7eaba9a6877458f4598d2e63a3ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/cabbe50c550a7eaba9a6877458f4598d2e63a3ac", "html_url": "https://github.com/rust-lang/rust/commit/cabbe50c550a7eaba9a6877458f4598d2e63a3ac"}], "stats": {"total": 122, "additions": 42, "deletions": 80}, "files": [{"sha": "ef76295f04d587a469fcfa38a2e0fbc4b35478fc", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=295d98069f34dce6f7a88422bfa7fbd0a1425aac", "patch": "@@ -239,3 +239,44 @@ error: invalid `crate_type` value\n   | ^^^^^^^^^^^^^^^^^^^^\n   |\n ```\n+\n+## incoherent-fundamental-impls\n+\n+This lint detects potentially-conflicting impls that were erroneously allowed. Some\n+example code that triggers this lint:\n+\n+```rust,ignore\n+pub trait Trait1<X> {\n+    type Output;\n+}\n+\n+pub trait Trait2<X> {}\n+\n+pub struct A;\n+\n+impl<X, T> Trait1<X> for T where T: Trait2<X> {\n+    type Output = ();\n+}\n+\n+impl<X> Trait1<Box<X>> for A {\n+    type Output = i32;\n+}\n+```\n+\n+This will produce:\n+\n+```text\n+error: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`: (E0119)\n+  --> src/main.rs:13:1\n+   |\n+9  | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n+   | --------------------------------------------- first implementation here\n+...\n+13 | impl<X> Trait1<Box<X>> for A {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `A`\n+   |\n+   = note: #[deny(incoherent_fundamental_impls)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46205 <https://github.com/rust-lang/rust/issues/46205>\n+   = note: downstream crates may implement trait `Trait2<std::boxed::Box<_>>` for type `A`\n+```"}, {"sha": "b49708ff6adcd2e11fb0276eb318904b22ba082c", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=295d98069f34dce6f7a88422bfa7fbd0a1425aac", "patch": "@@ -117,47 +117,6 @@ warning: found struct without foreign-function-safe representation annotation in\n   |\n ```\n \n-## incoherent-fundamental-impls\n-\n-This lint detects potentially-conflicting impls that were erroneously allowed. Some\n-example code that triggers this lint:\n-\n-```rust\n-pub trait Trait1<X> {\n-    type Output;\n-}\n-\n-pub trait Trait2<X> {}\n-\n-pub struct A;\n-\n-impl<X, T> Trait1<X> for T where T: Trait2<X> {\n-    type Output = ();\n-}\n-\n-impl<X> Trait1<Box<X>> for A {\n-    type Output = i32;\n-}\n-```\n-\n-This will produce:\n-\n-```text\n-warning: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`: (E0119)\n-  --> src/main.rs:13:1\n-   |\n-9  | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n-   | --------------------------------------------- first implementation here\n-...\n-13 | impl<X> Trait1<Box<X>> for A {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `A`\n-   |\n-   = note: #[warn(incoherent_fundamental_impls)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #46205 <https://github.com/rust-lang/rust/issues/46205>\n-   = note: downstream crates may implement trait `Trait2<std::boxed::Box<_>>` for type `A`\n-```\n-\n ## late-bound-lifetime-arguments\n \n This lint detects detects generic lifetime arguments in path segments with"}, {"sha": "398d7d5704c7fb4be1f0ca15388f30546efe65d1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=295d98069f34dce6f7a88422bfa7fbd0a1425aac", "patch": "@@ -208,7 +208,7 @@ declare_lint! {\n \n declare_lint! {\n     pub INCOHERENT_FUNDAMENTAL_IMPLS,\n-    Warn,\n+    Deny,\n     \"potentially-conflicting impls were erroneously allowed\"\n }\n "}, {"sha": "d793a78799a70714ef6d1d832aa1c78eed34f8d6", "filename": "src/test/compile-fail/issue-43355.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Ftest%2Fcompile-fail%2Fissue-43355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295d98069f34dce6f7a88422bfa7fbd0a1425aac/src%2Ftest%2Fcompile-fail%2Fissue-43355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43355.rs?ref=295d98069f34dce6f7a88422bfa7fbd0a1425aac", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(incoherent_fundamental_impls)]\n-\n pub trait Trait1<X> {\n     type Output;\n }"}, {"sha": "19431a6a429239eb98eb03f52047701a5ac2be2f", "filename": "src/test/run-pass/issue-43355.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Ftest%2Frun-pass%2Fissue-43355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Ftest%2Frun-pass%2Fissue-43355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43355.rs?ref=0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Check that the code for issue #43355 can run without an ICE, please remove\n-// this test when it becomes an hard error.\n-\n-pub trait Trait1<X> {\n-    type Output;\n-}\n-pub trait Trait2<X> {}\n-\n-impl<X, T> Trait1<X> for T where T: Trait2<X> {\n-    type Output = ();\n-}\n-impl<X> Trait1<Box<X>> for A {\n-    type Output = i32;\n-}\n-\n-pub struct A;\n-\n-fn f<X, T: Trait1<Box<X>>>() {\n-    println!(\"k: {}\", ::std::mem::size_of::<<T as Trait1<Box<X>>>::Output>());\n-}\n-\n-pub fn g<X, T: Trait2<Box<X>>>() {\n-    f::<X, T>();\n-}\n-\n-fn main() {}"}]}