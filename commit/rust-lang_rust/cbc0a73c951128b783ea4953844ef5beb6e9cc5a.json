{"sha": "cbc0a73c951128b783ea4953844ef5beb6e9cc5a", "node_id": "C_kwDOAAsO6NoAKGNiYzBhNzNjOTUxMTI4Yjc4M2VhNDk1Mzg0NGVmNWJlYjZlOWNjNWE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-10-16T02:41:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-16T02:41:12Z"}, "message": "Rollup merge of #101717 - Pointerbender:unsafecell-memory-layout, r=Amanieu\n\nAdd documentation about the memory layout of `UnsafeCell<T>`\n\nThe documentation for `UnsafeCell<T>` currently does not make any promises about its memory layout. This PR adds this documentation, namely that the memory layout of `UnsafeCell<T>` is the same as the memory layout of its inner `T`.\n\n# Use case\nWithout this layout promise, the following cast would not be legally possible:\n\n```rust\nfn example<T>(ptr: *mut T) -> *const UnsafeCell<T> {\n  ptr as *const UnsafeCell<T>\n}\n```\n\nA use case where this can come up involves FFI. If Rust receives a pointer over a FFI boundary which provides shared read-write access (with some form of custom synchronization), and this pointer is managed by some Rust struct with lifetime `'a`, then it would greatly simplify its (internal) API and safety contract if a `&'a UnsafeCell<T>` can be created from a raw FFI pointer `*mut T`. A lot of safety checks can be done when receiving the pointer for the first time through FFI (non-nullness, alignment, initialize uninit bytes, etc.) and these properties can then be encoded into the `&UnsafeCell<T>` type. Without this documentation guarantee, this is not legal today outside of the standard library.\n\n# Caveats\nCasting in the opposite direction is still not valid, even with this documentation change:\n\n```rust\nfn example2<T>(ptr: &UnsafeCell<T>) -> &mut T {\n  let t = ptr as *const UnsafeCell<T> as *mut T;\n  unsafe { &mut *t }\n}\n```\n\nThis is because the only legal way to obtain a mutable pointer to the contents of the shared reference is through [`UnsafeCell::get`](https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#method.get) and [`UnsafeCell::raw_get`](https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#method.raw_get). Although there might be a desire to also make this legal at some point in the future, that part is outside the scope of this PR. Also see this relevant [Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/transmuting.20.26.20-.3E.20.26mut).\n\n# Alternatives\nInstead of adding a new documentation promise, it's also possible to add a new method to `UnsafeCell<T>` with signature `pub fn from_ptr_bikeshed(ptr: *mut T) -> *const UnsafeCell<T>` which indirectly only allows one-way casting to `*const UnsafeCell<T>`.", "tree": {"sha": "68be4b2b83e17c8c8be1d57abd3c6299c0ab3b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68be4b2b83e17c8c8be1d57abd3c6299c0ab3b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc0a73c951128b783ea4953844ef5beb6e9cc5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjS29ICRBK7hj4Ov3rIwAANucIAByLCZkfkNq9CQcHmsEKgsOj\nTSoLZLqavE1fOVT4sRi7v+9fk2wS1vBHabX9qIO3esI0ZvLS/aZNs1GXC4hvFceT\nDAOSxGRAgND4of+86reOJRLJ3f/nHp3Ytsb3IEek8Wn/2XHBT9ovYhqb0pziz58k\nYTflZJBt7T5BAsS2GoEYSUWzpwB4EbTCN1buVo0NWCdRNwLr00hZDWaYGbdKQmND\n0eVlvcl+8hWXVyKk5JPVGA1/Sj/eN3D8DeysBZ8TUP/ACZ59FTe632Rt2tGkCzIb\nVppwwnUYPajB8kR2bMkNN1bFm77Y834B8Q8p/Y91Bbp7fz2bz30PkZDpdTk2woI=\n=9xCW\n-----END PGP SIGNATURE-----\n", "payload": "tree 68be4b2b83e17c8c8be1d57abd3c6299c0ab3b7b\nparent ddc7fd983736bef0e610e02f5ef08955ecd562bb\nparent ddd119b2fed57eb6b19c44c18108de95c564a48d\nauthor Yuki Okushi <jtitor@2k36.org> 1665888072 +0900\ncommitter GitHub <noreply@github.com> 1665888072 +0900\n\nRollup merge of #101717 - Pointerbender:unsafecell-memory-layout, r=Amanieu\n\nAdd documentation about the memory layout of `UnsafeCell<T>`\n\nThe documentation for `UnsafeCell<T>` currently does not make any promises about its memory layout. This PR adds this documentation, namely that the memory layout of `UnsafeCell<T>` is the same as the memory layout of its inner `T`.\n\n# Use case\nWithout this layout promise, the following cast would not be legally possible:\n\n```rust\nfn example<T>(ptr: *mut T) -> *const UnsafeCell<T> {\n  ptr as *const UnsafeCell<T>\n}\n```\n\nA use case where this can come up involves FFI. If Rust receives a pointer over a FFI boundary which provides shared read-write access (with some form of custom synchronization), and this pointer is managed by some Rust struct with lifetime `'a`, then it would greatly simplify its (internal) API and safety contract if a `&'a UnsafeCell<T>` can be created from a raw FFI pointer `*mut T`. A lot of safety checks can be done when receiving the pointer for the first time through FFI (non-nullness, alignment, initialize uninit bytes, etc.) and these properties can then be encoded into the `&UnsafeCell<T>` type. Without this documentation guarantee, this is not legal today outside of the standard library.\n\n# Caveats\nCasting in the opposite direction is still not valid, even with this documentation change:\n\n```rust\nfn example2<T>(ptr: &UnsafeCell<T>) -> &mut T {\n  let t = ptr as *const UnsafeCell<T> as *mut T;\n  unsafe { &mut *t }\n}\n```\n\nThis is because the only legal way to obtain a mutable pointer to the contents of the shared reference is through [`UnsafeCell::get`](https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#method.get) and [`UnsafeCell::raw_get`](https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#method.raw_get). Although there might be a desire to also make this legal at some point in the future, that part is outside the scope of this PR. Also see this relevant [Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/transmuting.20.26.20-.3E.20.26mut).\n\n# Alternatives\nInstead of adding a new documentation promise, it's also possible to add a new method to `UnsafeCell<T>` with signature `pub fn from_ptr_bikeshed(ptr: *mut T) -> *const UnsafeCell<T>` which indirectly only allows one-way casting to `*const UnsafeCell<T>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc0a73c951128b783ea4953844ef5beb6e9cc5a", "html_url": "https://github.com/rust-lang/rust/commit/cbc0a73c951128b783ea4953844ef5beb6e9cc5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc0a73c951128b783ea4953844ef5beb6e9cc5a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddc7fd983736bef0e610e02f5ef08955ecd562bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc7fd983736bef0e610e02f5ef08955ecd562bb", "html_url": "https://github.com/rust-lang/rust/commit/ddc7fd983736bef0e610e02f5ef08955ecd562bb"}, {"sha": "ddd119b2fed57eb6b19c44c18108de95c564a48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd119b2fed57eb6b19c44c18108de95c564a48d", "html_url": "https://github.com/rust-lang/rust/commit/ddd119b2fed57eb6b19c44c18108de95c564a48d"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "3451a25504e34c008d930819282942628bf73a0d", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cbc0a73c951128b783ea4953844ef5beb6e9cc5a/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc0a73c951128b783ea4953844ef5beb6e9cc5a/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=cbc0a73c951128b783ea4953844ef5beb6e9cc5a", "patch": "@@ -1816,6 +1816,50 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// [`.get_mut()`]: `UnsafeCell::get_mut`\n ///\n+/// `UnsafeCell<T>` has the same in-memory representation as its inner type `T`. A consequence\n+/// of this guarantee is that it is possible to convert between `T` and `UnsafeCell<T>`.\n+/// Special care has to be taken when converting a nested `T` inside of an `Outer<T>` type\n+/// to an `Outer<UnsafeCell<T>>` type: this is not sound when the `Outer<T>` type enables [niche]\n+/// optimizations. For example, the type `Option<NonNull<u8>>` is typically 8 bytes large on\n+/// 64-bit platforms, but the type `Option<UnsafeCell<NonNull<u8>>>` takes up 16 bytes of space.\n+/// Therefore this is not a valid conversion, despite `NonNull<u8>` and `UnsafeCell<NonNull<u8>>>`\n+/// having the same memory layout. This is because `UnsafeCell` disables niche optimizations in\n+/// order to avoid its interior mutability property from spreading from `T` into the `Outer` type,\n+/// thus this can cause distortions in the type size in these cases. Furthermore, it is only valid\n+/// to obtain a `*mut T` pointer to the contents of a _shared_ `UnsafeCell<T>` through [`.get()`]\n+/// or [`.raw_get()`]. A `&mut T` reference can be obtained by either dereferencing this pointer or\n+/// by calling [`.get_mut()`] on an _exclusive_ `UnsafeCell<T>`, e.g.:\n+///\n+/// ```rust\n+/// use std::cell::UnsafeCell;\n+///\n+/// let mut x: UnsafeCell<u32> = UnsafeCell::new(5);\n+/// let shared: &UnsafeCell<u32> = &x;\n+/// // using `.get()` is okay:\n+/// unsafe {\n+///     // SAFETY: there exist no other references to the contents of `x`\n+///     let exclusive: &mut u32 = &mut *shared.get();\n+/// };\n+/// // using `.raw_get()` is also okay:\n+/// unsafe {\n+///     // SAFETY: there exist no other references to the contents of `x` in this scope\n+///     let exclusive: &mut u32 = &mut *UnsafeCell::raw_get(shared as *const _);\n+/// };\n+/// // using `.get_mut()` is always safe:\n+/// let exclusive: &mut u32 = x.get_mut();\n+///\n+/// // when we have exclusive access, we can convert it to a shared `&UnsafeCell`:\n+/// unsafe {\n+///     // SAFETY: `u32` has no niche, therefore it has the same layout as `UnsafeCell<u32>`\n+///     let shared: &UnsafeCell<u32> = &*(exclusive as *mut _ as *const UnsafeCell<u32>);\n+///     // SAFETY: there exist no other *active* references to the contents of `x` in this scope\n+///     let exclusive: &mut u32 = &mut *shared.get();\n+/// }\n+/// ```\n+///\n+/// [niche]: https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#niche\n+/// [`.raw_get()`]: `UnsafeCell::raw_get`\n+///\n /// # Examples\n ///\n /// Here is an example showcasing how to soundly mutate the contents of an `UnsafeCell<_>` despite"}]}