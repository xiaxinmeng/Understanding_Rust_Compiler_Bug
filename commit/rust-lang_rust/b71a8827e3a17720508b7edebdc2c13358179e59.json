{"sha": "b71a8827e3a17720508b7edebdc2c13358179e59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWE4ODI3ZTNhMTc3MjA1MDhiN2VkZWJkYzJjMTMzNTgxNzllNTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-17T23:49:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-17T23:49:54Z"}, "message": "rustc: Fix coherence errors in the build", "tree": {"sha": "0518d4c11018edca289dec634925979eb538d553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0518d4c11018edca289dec634925979eb538d553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71a8827e3a17720508b7edebdc2c13358179e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71a8827e3a17720508b7edebdc2c13358179e59", "html_url": "https://github.com/rust-lang/rust/commit/b71a8827e3a17720508b7edebdc2c13358179e59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71a8827e3a17720508b7edebdc2c13358179e59/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db020ab63cd51dd4a25cba2d00117f016128762b", "url": "https://api.github.com/repos/rust-lang/rust/commits/db020ab63cd51dd4a25cba2d00117f016128762b", "html_url": "https://github.com/rust-lang/rust/commit/db020ab63cd51dd4a25cba2d00117f016128762b"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "4c175490b4185ce83df344fdc5e3123b0f697760", "filename": "src/libcore/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=b71a8827e3a17720508b7edebdc2c13358179e59", "patch": "@@ -5,7 +5,7 @@\n import option::{some, none};\n import option = option::option;\n import path = path::path;\n-import tuple::extensions;\n+import tuple::{extensions, tuple_ops, extended_tuple_ops};\n import str::{extensions, str_slice, unique_str};\n import vec::extensions;\n import vec::{const_vector, copyable_vector, immutable_vector};\n@@ -40,6 +40,7 @@ export str_slice, unique_str;\n export const_vector, copyable_vector, immutable_vector;\n export immutable_copyable_vector, iter_trait_extensions, vec_concat;\n export base_iter, copyable_iter, extended_iter;\n+export tuple_ops, extended_tuple_ops;\n export ptr;\n \n // Export the log levels as global constants. Higher levels mean"}, {"sha": "681d94c475ba5271be9eac8fb9db8cb919adfee4", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=b71a8827e3a17720508b7edebdc2c13358179e59", "patch": "@@ -1,7 +1,12 @@\n //! Operations on tuples\n \n+trait tuple_ops<T,U> {\n+    pure fn first() -> T;\n+    pure fn second() -> U;\n+    pure fn swap() -> (U, T);\n+}\n \n-impl extensions <T:copy, U:copy> for (T, U) {\n+impl extensions <T:copy, U:copy> of tuple_ops<T,U> for (T, U) {\n \n     /// Return the first element of self\n     pure fn first() -> T {\n@@ -23,7 +28,14 @@ impl extensions <T:copy, U:copy> for (T, U) {\n \n }\n \n-impl extensions<A: copy, B: copy> for (&[A], &[B]) {\n+trait extended_tuple_ops<A,B> {\n+    fn zip() -> ~[(A, B)];\n+    fn map<C>(f: fn(A, B) -> C) -> ~[C];\n+}\n+\n+impl extensions<A: copy, B: copy> of extended_tuple_ops<A,B>\n+        for (&[A], &[B]) {\n+\n     fn zip() -> ~[(A, B)] {\n         let (a, b) = self;\n         vec::zip(a, b)\n@@ -35,7 +47,9 @@ impl extensions<A: copy, B: copy> for (&[A], &[B]) {\n     }\n }\n \n-impl extensions<A: copy, B: copy> for (~[A], ~[B]) {\n+impl extensions<A: copy, B: copy> of extended_tuple_ops<A,B>\n+        for (~[A], ~[B]) {\n+\n     fn zip() -> ~[(A, B)] {\n         let (a, b) = self;\n         vec::zip(a, b)"}, {"sha": "eb92be1149d38645744ed3e56fd6783bb729176d", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=b71a8827e3a17720508b7edebdc2c13358179e59", "patch": "@@ -202,7 +202,7 @@ impl ast_builder of ext_ctxt_ast_builder for ext_ctxt {\n           span: empty_span()}\n     }\n \n-    fn ty_nil() -> @ast::ty {\n+    fn ty_nil_ast_builder() -> @ast::ty {\n         @{id: self.next_id(),\n           node: ast::ty_nil,\n           span: empty_span()}"}, {"sha": "c6b1a2d6932fb835255ac4eb3f99be4ba3b00377", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=b71a8827e3a17720508b7edebdc2c13358179e59", "patch": "@@ -22,7 +22,21 @@ import ast_builder::ast_builder;\n import ast_builder::methods;\n import ast_builder::path;\n \n-impl compile for message {\n+trait gen_send {\n+    fn gen_send(cx: ext_ctxt) -> @ast::item;\n+}\n+\n+trait to_type_decls {\n+    fn to_type_decls(cx: ext_ctxt) -> ~[@ast::item];\n+    fn to_endpoint_decls(cx: ext_ctxt, dir: direction) -> ~[@ast::item];\n+}\n+\n+trait gen_init {\n+    fn gen_init(cx: ext_ctxt) -> @ast::item;\n+    fn compile(cx: ext_ctxt) -> @ast::item;\n+}\n+\n+impl compile of gen_send for message {\n     fn gen_send(cx: ext_ctxt) -> @ast::item {\n         #debug(\"pipec: gen_send\");\n         alt self {\n@@ -80,7 +94,7 @@ impl compile for message {\n \n             let args_ast = vec::append(\n                 ~[cx.arg_mode(@~\"pipe\",\n-                              cx.ty_path(path(this.data_name())\n+                              cx.ty_path_ast_builder(path(this.data_name())\n                                         .add_tys(cx.ty_vars(this.ty_params))),\n                               ast::by_copy)],\n                 args_ast);\n@@ -104,20 +118,20 @@ impl compile for message {\n \n             cx.item_fn_poly(self.name(),\n                             args_ast,\n-                            cx.ty_nil(),\n+                            cx.ty_nil_ast_builder(),\n                             self.get_params(),\n                             cx.expr_block(body))\n           }\n         }\n     }\n \n     fn to_ty(cx: ext_ctxt) -> @ast::ty {\n-        cx.ty_path_ast_builder(path(self.name)\n-          .add_tys(cx.ty_vars(self.ty_params)))\n+        cx.ty_path_ast_builder(path(self.name())\n+          .add_tys(cx.ty_vars(self.get_params())))\n     }\n }\n \n-impl compile for state {\n+impl compile of to_type_decls for state {\n     fn to_type_decls(cx: ext_ctxt) -> ~[@ast::item] {\n         #debug(\"pipec: to_type_decls\");\n         // This compiles into two different type declarations. Say the\n@@ -144,7 +158,7 @@ impl compile for state {\n                 };\n \n                 vec::append_one(tys,\n-                                cx.ty_path((dir + next_name)\n+                                cx.ty_path_ast_builder((dir + next_name)\n                                            .add_tys(next_tys)))\n               }\n               none { tys }\n@@ -184,7 +198,7 @@ impl compile for state {\n     }\n }\n \n-impl compile for protocol {\n+impl compile of gen_init for protocol {\n     fn gen_init(cx: ext_ctxt) -> @ast::item {\n         let start_state = self.states[0];\n \n@@ -303,19 +317,3 @@ impl parse_utils of ext_ctxt_parse_utils for ext_ctxt {\n     }\n }\n \n-trait two_vector_utils<A, B> {\n-    fn zip() -> ~[(A, B)];\n-    fn map<C>(f: fn(A, B) -> C) -> ~[C];\n-}\n-\n-impl methods<A: copy, B: copy> of two_vector_utils<A, B> for (~[A], ~[B]) {\n-    fn zip() -> ~[(A, B)] {\n-        let (a, b) = self;\n-        vec::zip(a, b)\n-    }\n-\n-    fn map<C>(f: fn(A, B) -> C) -> ~[C] {\n-        let (a, b) = self;\n-        vec::map2(a, b, f)\n-    }\n-}"}, {"sha": "1c88732adb09786826ef694a2ef686c9120ee244", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71a8827e3a17720508b7edebdc2c13358179e59/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=b71a8827e3a17720508b7edebdc2c13358179e59", "patch": "@@ -3,7 +3,7 @@ import dvec::{dvec, extensions};\n \n import ast::{ident};\n \n-import ast_builder::{path, methods, ast_builder};\n+import ast_builder::{path, methods, ast_builder, append_types};\n \n enum direction {\n     send, recv\n@@ -78,7 +78,8 @@ impl methods for state {\n     }\n \n     fn to_ty(cx: ext_ctxt) -> @ast::ty {\n-        cx.ty_path(path(self.name).add_tys(cx.ty_vars(self.ty_params)))\n+        cx.ty_path_ast_builder\n+            (path(self.name).add_tys(cx.ty_vars(self.ty_params)))\n     }\n }\n "}]}