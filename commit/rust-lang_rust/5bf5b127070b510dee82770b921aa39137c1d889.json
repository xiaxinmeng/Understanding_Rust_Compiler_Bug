{"sha": "5bf5b127070b510dee82770b921aa39137c1d889", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjViMTI3MDcwYjUxMGRlZTgyNzcwYjkyMWFhMzkxMzdjMWQ4ODk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-01T14:35:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-01T15:34:22Z"}, "message": "Add suggestion in case a \"ignore\" doc block has invalid rust code inside", "tree": {"sha": "2d6fd86dca5d52a423972523e67bfbf02999f0df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6fd86dca5d52a423972523e67bfbf02999f0df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf5b127070b510dee82770b921aa39137c1d889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5b127070b510dee82770b921aa39137c1d889", "html_url": "https://github.com/rust-lang/rust/commit/5bf5b127070b510dee82770b921aa39137c1d889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5b127070b510dee82770b921aa39137c1d889/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "html_url": "https://github.com/rust-lang/rust/commit/75e1acb63a642fa78cb8c382d7462b41fa2b56cd"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "f1d00b81eed1cf61b97f8170737586cfe86daac4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5bf5b127070b510dee82770b921aa39137c1d889/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf5b127070b510dee82770b921aa39137c1d889/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5bf5b127070b510dee82770b921aa39137c1d889", "patch": "@@ -1213,6 +1213,7 @@ crate struct RustCodeBlock {\n     crate code: Range<usize>,\n     crate is_fenced: bool,\n     crate syntax: Option<String>,\n+    crate is_ignore: bool,\n }\n \n /// Returns a range of bytes for each code block in the markdown that is tagged as `rust` or\n@@ -1228,7 +1229,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_, '_>) -> Vec<RustC\n \n     while let Some((event, offset)) = p.next() {\n         if let Event::Start(Tag::CodeBlock(syntax)) = event {\n-            let (syntax, code_start, code_end, range, is_fenced) = match syntax {\n+            let (syntax, code_start, code_end, range, is_fenced, is_ignore) = match syntax {\n                 CodeBlockKind::Fenced(syntax) => {\n                     let syntax = syntax.as_ref();\n                     let lang_string = if syntax.is_empty() {\n@@ -1249,6 +1250,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_, '_>) -> Vec<RustC\n                                 range: offset,\n                                 code,\n                                 syntax,\n+                                is_ignore: lang_string.ignore != Ignore::None,\n                             });\n                             continue;\n                         }\n@@ -1259,14 +1261,15 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_, '_>) -> Vec<RustC\n                                 range: offset,\n                                 code,\n                                 syntax,\n+                                is_ignore: lang_string.ignore != Ignore::None,\n                             });\n                             continue;\n                         }\n                     };\n                     while let Some((Event::Text(_), offset)) = p.next() {\n                         code_end = offset.end;\n                     }\n-                    (syntax, code_start, code_end, offset, true)\n+                    (syntax, code_start, code_end, offset, true, lang_string.ignore != Ignore::None)\n                 }\n                 CodeBlockKind::Indented => {\n                     // The ending of the offset goes too far sometime so we reduce it by one in\n@@ -1278,9 +1281,10 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_, '_>) -> Vec<RustC\n                             offset.end,\n                             Range { start: offset.start, end: offset.end - 1 },\n                             false,\n+                            false,\n                         )\n                     } else {\n-                        (None, offset.start, offset.end, offset, false)\n+                        (None, offset.start, offset.end, offset, false, false)\n                     }\n                 }\n             };\n@@ -1290,6 +1294,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_, '_>) -> Vec<RustC\n                 range,\n                 code: Range { start: code_start, end: code_end },\n                 syntax,\n+                is_ignore,\n             });\n         }\n     }"}, {"sha": "554392c213e247ac0ad2a59b7dd8518079e759a4", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bf5b127070b510dee82770b921aa39137c1d889/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf5b127070b510dee82770b921aa39137c1d889/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=5bf5b127070b510dee82770b921aa39137c1d889", "patch": "@@ -51,10 +51,10 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             let mut diag = if let Some(sp) =\n                 super::source_span_for_markdown_range(self.cx, &dox, &code_block.range, &item.attrs)\n             {\n-                let warning_message = if buffer.has_errors {\n-                    \"could not parse code block as Rust code\"\n+                let (warning_message, suggest_using_text) = if buffer.has_errors {\n+                    (\"could not parse code block as Rust code\", true)\n                 } else {\n-                    \"Rust code block is empty\"\n+                    (\"Rust code block is empty\", false)\n                 };\n \n                 let mut diag = self.cx.sess().struct_span_warn(sp, warning_message);\n@@ -67,6 +67,15 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                         String::from(\"```text\"),\n                         Applicability::MachineApplicable,\n                     );\n+                } else if suggest_using_text && code_block.is_ignore {\n+                    let sp = sp.from_inner(InnerSpan::new(0, 3));\n+                    diag.span_suggestion(\n+                        sp,\n+                        \"`ignore` code blocks require valid Rust code for syntax highlighting. \\\n+                         Mark blocks that do not contain Rust code as text\",\n+                        String::from(\"```text,\"),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n \n                 diag"}]}