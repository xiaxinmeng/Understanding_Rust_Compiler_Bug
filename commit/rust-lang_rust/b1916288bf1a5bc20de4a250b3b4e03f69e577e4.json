{"sha": "b1916288bf1a5bc20de4a250b3b4e03f69e577e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOTE2Mjg4YmYxYTViYzIwZGU0YTI1MGIzYjRlMDNmNjllNTc3ZTQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-09T06:22:20Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-09T06:22:20Z"}, "message": "Handle `Sized?` in `type` items.\n\nResolves bounds for `type` and adds the warning for 'unbounds' (? bounds) that we have for bounds.\n\nCloses #16888", "tree": {"sha": "6c5e648a355fb6ee43d5bebfbcffa4d1f168b737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c5e648a355fb6ee43d5bebfbcffa4d1f168b737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1916288bf1a5bc20de4a250b3b4e03f69e577e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1916288bf1a5bc20de4a250b3b4e03f69e577e4", "html_url": "https://github.com/rust-lang/rust/commit/b1916288bf1a5bc20de4a250b3b4e03f69e577e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1916288bf1a5bc20de4a250b3b4e03f69e577e4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c73e5fc5f212d30bb46b96cb45b51251217a199", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c73e5fc5f212d30bb46b96cb45b51251217a199", "html_url": "https://github.com/rust-lang/rust/commit/0c73e5fc5f212d30bb46b96cb45b51251217a199"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "ae3a109a505a388a9db7469838e61be9018fd72b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1916288bf1a5bc20de4a250b3b4e03f69e577e4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1916288bf1a5bc20de4a250b3b4e03f69e577e4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b1916288bf1a5bc20de4a250b3b4e03f69e577e4", "patch": "@@ -3936,6 +3936,7 @@ impl<'a> Resolver<'a> {\n                                                                item.id,\n                                                                ItemRibKind),\n                                              |this| {\n+                    this.resolve_type_parameters(&generics.ty_params);\n                     visit::walk_item(this, item, ());\n                 });\n             }"}, {"sha": "d1d76734941e8b68cac3fde546cd8f00bd02a144", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1916288bf1a5bc20de4a250b3b4e03f69e577e4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1916288bf1a5bc20de4a250b3b4e03f69e577e4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=b1916288bf1a5bc20de4a250b3b4e03f69e577e4", "patch": "@@ -488,7 +488,9 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n                                  generics: &ast::Generics,\n                                  thing: &'static str) {\n     for ty_param in generics.ty_params.iter() {\n-        for bound in ty_param.bounds.iter() {\n+        let bounds = ty_param.bounds.iter();\n+        let mut bounds = bounds.chain(ty_param.unbound.iter());\n+        for bound in bounds {\n             match *bound {\n                 ast::TraitTyParamBound(..) | ast::UnboxedFnTyParamBound(..) => {\n                     // According to accepted RFC #XXX, we should\n@@ -1076,9 +1078,10 @@ fn add_unsized_bound(ccx: &CrateCtxt,\n                      desc: &str,\n                      span: Span) {\n     let kind_id = ccx.tcx.lang_items.require(SizedTraitLangItem);\n+\n     match unbound {\n         &Some(ast::TraitTyParamBound(ref tpb)) => {\n-            // #FIXME(8559) currently requires the unbound to be built-in.\n+            // FIXME(#8559) currently requires the unbound to be built-in.\n             let trait_def_id = ty::trait_ref_to_def_id(ccx.tcx, tpb);\n             match kind_id {\n                 Ok(kind_id) if trait_def_id != kind_id => {"}, {"sha": "141d6c88dd96108607083019bdceb5d4cf6928b7", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1916288bf1a5bc20de4a250b3b4e03f69e577e4/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1916288bf1a5bc20de4a250b3b4e03f69e577e4/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=b1916288bf1a5bc20de4a250b3b4e03f69e577e4", "patch": "@@ -24,6 +24,7 @@ struct S1<Sized? X>;\n enum E<Sized? X> {}\n impl <Sized? X> T1 for S1<X> {}\n fn f<Sized? X>() {}\n+type TT<Sized? T> = T;\n \n pub fn main() {\n }"}]}