{"sha": "b6ae1453cbe677deea362628c69efa501b4faa4b", "node_id": "C_kwDOAAsO6NoAKGI2YWUxNDUzY2JlNjc3ZGVlYTM2MjYyOGM2OWVmYTUwMWI0ZmFhNGI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-07T05:17:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T21:09:36Z"}, "message": "Inline and remove `create_compiler_and_run`.\n\nIt has a single call site.", "tree": {"sha": "d6886b678e9fc98c8b85028d44c89f4a308e6ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6886b678e9fc98c8b85028d44c89f4a308e6ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6ae1453cbe677deea362628c69efa501b4faa4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ae1453cbe677deea362628c69efa501b4faa4b", "html_url": "https://github.com/rust-lang/rust/commit/b6ae1453cbe677deea362628c69efa501b4faa4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6ae1453cbe677deea362628c69efa501b4faa4b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc194e4bfb879220306538efe2666b0381b11c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc194e4bfb879220306538efe2666b0381b11c1", "html_url": "https://github.com/rust-lang/rust/commit/dcc194e4bfb879220306538efe2666b0381b11c1"}], "stats": {"total": 104, "additions": 51, "deletions": 53}, "files": [{"sha": "59b89ce01a62b81df6d933b37396c3734ba78d00", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 51, "deletions": 53, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b6ae1453cbe677deea362628c69efa501b4faa4b/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ae1453cbe677deea362628c69efa501b4faa4b/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=b6ae1453cbe677deea362628c69efa501b4faa4b", "patch": "@@ -275,66 +275,64 @@ pub struct Config {\n     pub registry: Registry,\n }\n \n-fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R) -> R {\n-    crate::callbacks::setup_callbacks();\n-\n-    let registry = &config.registry;\n-    let (mut sess, codegen_backend) = util::create_session(\n-        config.opts,\n-        config.crate_cfg,\n-        config.crate_check_cfg,\n-        config.file_loader,\n-        config.input_path.clone(),\n-        config.lint_caps,\n-        config.make_codegen_backend,\n-        registry.clone(),\n-    );\n-\n-    if let Some(parse_sess_created) = config.parse_sess_created {\n-        parse_sess_created(\n-            &mut Lrc::get_mut(&mut sess)\n-                .expect(\"create_session() should never share the returned session\")\n-                .parse_sess,\n-        );\n-    }\n-\n-    let temps_dir = sess.opts.unstable_opts.temps_dir.as_ref().map(|o| PathBuf::from(&o));\n-\n-    let compiler = Compiler {\n-        sess,\n-        codegen_backend,\n-        input: config.input,\n-        input_path: config.input_path,\n-        output_dir: config.output_dir,\n-        output_file: config.output_file,\n-        temps_dir,\n-        register_lints: config.register_lints,\n-        override_queries: config.override_queries,\n-    };\n-\n-    rustc_span::with_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n-        let r = {\n-            let _sess_abort_error = OnDrop(|| {\n-                compiler.sess.finish_diagnostics(registry);\n-            });\n-\n-            f(&compiler)\n-        };\n-\n-        let prof = compiler.sess.prof.clone();\n-        prof.generic_activity(\"drop_compiler\").run(move || drop(compiler));\n-        r\n-    })\n-}\n-\n // JUSTIFICATION: before session exists, only config\n #[allow(rustc::bad_opt_access)]\n pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n     trace!(\"run_compiler\");\n     util::run_in_thread_pool_with_globals(\n         config.opts.edition,\n         config.opts.unstable_opts.threads,\n-        || create_compiler_and_run(config, f),\n+        || {\n+            crate::callbacks::setup_callbacks();\n+\n+            let registry = &config.registry;\n+            let (mut sess, codegen_backend) = util::create_session(\n+                config.opts,\n+                config.crate_cfg,\n+                config.crate_check_cfg,\n+                config.file_loader,\n+                config.input_path.clone(),\n+                config.lint_caps,\n+                config.make_codegen_backend,\n+                registry.clone(),\n+            );\n+\n+            if let Some(parse_sess_created) = config.parse_sess_created {\n+                parse_sess_created(\n+                    &mut Lrc::get_mut(&mut sess)\n+                        .expect(\"create_session() should never share the returned session\")\n+                        .parse_sess,\n+                );\n+            }\n+\n+            let temps_dir = sess.opts.unstable_opts.temps_dir.as_ref().map(|o| PathBuf::from(&o));\n+\n+            let compiler = Compiler {\n+                sess,\n+                codegen_backend,\n+                input: config.input,\n+                input_path: config.input_path,\n+                output_dir: config.output_dir,\n+                output_file: config.output_file,\n+                temps_dir,\n+                register_lints: config.register_lints,\n+                override_queries: config.override_queries,\n+            };\n+\n+            rustc_span::with_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n+                let r = {\n+                    let _sess_abort_error = OnDrop(|| {\n+                        compiler.sess.finish_diagnostics(registry);\n+                    });\n+\n+                    f(&compiler)\n+                };\n+\n+                let prof = compiler.sess.prof.clone();\n+                prof.generic_activity(\"drop_compiler\").run(move || drop(compiler));\n+                r\n+            })\n+        },\n     )\n }\n "}]}