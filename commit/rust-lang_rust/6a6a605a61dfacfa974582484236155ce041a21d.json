{"sha": "6a6a605a61dfacfa974582484236155ce041a21d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNmE2MDVhNjFkZmFjZmE5NzQ1ODI0ODQyMzYxNTVjZTA0MWEyMWQ=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-04T20:46:57Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-04T22:31:28Z"}, "message": "Fix handling of unmatched angle brackets in parser", "tree": {"sha": "b1ce4779377fc66b62ff873d1e7de37cf08586e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ce4779377fc66b62ff873d1e7de37cf08586e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a6a605a61dfacfa974582484236155ce041a21d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6a605a61dfacfa974582484236155ce041a21d", "html_url": "https://github.com/rust-lang/rust/commit/6a6a605a61dfacfa974582484236155ce041a21d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a6a605a61dfacfa974582484236155ce041a21d/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e219e6335a04cae15a784063f8cbe021076c933", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e219e6335a04cae15a784063f8cbe021076c933", "html_url": "https://github.com/rust-lang/rust/commit/4e219e6335a04cae15a784063f8cbe021076c933"}], "stats": {"total": 157, "additions": 120, "deletions": 37}, "files": [{"sha": "953c6915068afd49409201f91b0ad485cb94c953", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6a6a605a61dfacfa974582484236155ce041a21d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6a605a61dfacfa974582484236155ce041a21d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=6a6a605a61dfacfa974582484236155ce041a21d", "patch": "@@ -352,49 +352,59 @@ impl<'a> Parser<'a> {\n         debug!(\"parse_generic_args_with_leading_angle_bracket_recovery: (snapshotting)\");\n         match self.parse_angle_args() {\n             Ok(args) => Ok(args),\n-            Err(ref mut e) if is_first_invocation && self.unmatched_angle_bracket_count > 0 => {\n-                // Cancel error from being unable to find `>`. We know the error\n-                // must have been this due to a non-zero unmatched angle bracket\n-                // count.\n-                e.cancel();\n-\n+            Err(mut e) if is_first_invocation && self.unmatched_angle_bracket_count > 0 => {\n                 // Swap `self` with our backup of the parser state before attempting to parse\n                 // generic arguments.\n                 let snapshot = mem::replace(self, snapshot.unwrap());\n \n-                debug!(\n-                    \"parse_generic_args_with_leading_angle_bracket_recovery: (snapshot failure) \\\n-                     snapshot.count={:?}\",\n-                    snapshot.unmatched_angle_bracket_count,\n-                );\n-\n                 // Eat the unmatched angle brackets.\n-                for _ in 0..snapshot.unmatched_angle_bracket_count {\n-                    self.eat_lt();\n-                }\n-\n-                // Make a span over ${unmatched angle bracket count} characters.\n-                let span = lo.with_hi(lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count));\n-                self.struct_span_err(\n-                    span,\n-                    &format!(\n-                        \"unmatched angle bracket{}\",\n-                        pluralize!(snapshot.unmatched_angle_bracket_count)\n-                    ),\n-                )\n-                .span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"remove extra angle bracket{}\",\n-                        pluralize!(snapshot.unmatched_angle_bracket_count)\n-                    ),\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                let all_angle_brackets = (0..snapshot.unmatched_angle_bracket_count)\n+                    .fold(true, |a, _| a && self.eat_lt());\n+\n+                if !all_angle_brackets {\n+                    // If there are other tokens in between the extraneous `<`s, we cannot simply\n+                    // suggest to remove them. This check also prevents us from accidentally ending\n+                    // up in the middle of a multibyte character (issue #84104).\n+                    let _ = mem::replace(self, snapshot);\n+                    Err(e)\n+                } else {\n+                    // Cancel error from being unable to find `>`. We know the error\n+                    // must have been this due to a non-zero unmatched angle bracket\n+                    // count.\n+                    e.cancel();\n+\n+                    debug!(\n+                        \"parse_generic_args_with_leading_angle_bracket_recovery: (snapshot failure) \\\n+                         snapshot.count={:?}\",\n+                        snapshot.unmatched_angle_bracket_count,\n+                    );\n+\n+                    // Make a span over ${unmatched angle bracket count} characters.\n+                    // This is safe because `all_angle_brackets` ensures that there are only `<`s,\n+                    // i.e. no multibyte characters, in this range.\n+                    let span =\n+                        lo.with_hi(lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count));\n+                    self.struct_span_err(\n+                        span,\n+                        &format!(\n+                            \"unmatched angle bracket{}\",\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n+                        ),\n+                    )\n+                    .span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"remove extra angle bracket{}\",\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n+                        ),\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n \n-                // Try again without unmatched angle bracket characters.\n-                self.parse_angle_args()\n+                    // Try again without unmatched angle bracket characters.\n+                    self.parse_angle_args()\n+                }\n             }\n             Err(e) => Err(e),\n         }"}, {"sha": "998949b94a4baf1456b6c1cfc77306c642a45dfc", "filename": "src/test/ui/parser/issue-84104.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs?ref=6a6a605a61dfacfa974582484236155ce041a21d", "patch": "@@ -0,0 +1,3 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected one of\n+#[i=i::<\u069a\u0716<"}, {"sha": "aff31f2c97149210580a801c7d96b7da442aa065", "filename": "src/test/ui/parser/issue-84104.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr?ref=6a6a605a61dfacfa974582484236155ce041a21d", "patch": "@@ -0,0 +1,16 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-84104.rs:3:13\n+   |\n+LL | #[i=i::<\u069a\u0716<\n+   |  -          ^\n+   |  |\n+   |  unclosed delimiter\n+\n+error: expected one of `>`, a const expression, lifetime, or type, found `]`\n+  --> $DIR/issue-84104.rs:3:13\n+   |\n+LL | #[i=i::<\u069a\u0716<\n+   |             ^ expected one of `>`, a const expression, lifetime, or type\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fdf2ae398014b4e22716eca583dd301ba37f9809", "filename": "src/test/ui/parser/unmatched-langle-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs?ref=6a6a605a61dfacfa974582484236155ce041a21d", "patch": "@@ -0,0 +1,9 @@\n+// Check that a suggestion is issued if there are too many `<`s in a\n+// generic argument list, and that the parser recovers properly.\n+\n+fn main() {\n+    foo::<<<<Ty<i32>>();\n+    //~^ ERROR: unmatched angle brackets\n+    //~| ERROR: cannot find function `foo` in this scope [E0425]\n+    //~| ERROR: cannot find type `Ty` in this scope [E0412]\n+}"}, {"sha": "c8072b4c59ad279f2c4863efe6546e29879fea78", "filename": "src/test/ui/parser/unmatched-langle-1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr?ref=6a6a605a61dfacfa974582484236155ce041a21d", "patch": "@@ -0,0 +1,22 @@\n+error: unmatched angle brackets\n+  --> $DIR/unmatched-langle-1.rs:5:10\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |          ^^^ help: remove extra angle brackets\n+\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/unmatched-langle-1.rs:5:5\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |     ^^^ not found in this scope\n+\n+error[E0412]: cannot find type `Ty` in this scope\n+  --> $DIR/unmatched-langle-1.rs:5:14\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |              ^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0412, E0425.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "8de0d7d89e4e72b2134b7e140b142c46a4f363a7", "filename": "src/test/ui/parser/unmatched-langle-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs?ref=6a6a605a61dfacfa974582484236155ce041a21d", "patch": "@@ -0,0 +1,15 @@\n+// When there are too many opening `<`s, the compiler would previously\n+// suggest nonsense if the `<`s were interspersed with other tokens:\n+//\n+//   error: unmatched angle brackets\n+//    --> unmatched-langle.rs:2:10\n+//     |\n+//   2 |     foo::<Ty<<<i32>();\n+//     |          ^^^ help: remove extra angle brackets\n+//\n+// This test makes sure that this is no longer happening.\n+\n+fn main() {\n+    foo::<Ty<<<i32>();\n+    //~^ ERROR: expected `::`, found `(`\n+}"}, {"sha": "773bb33d8d3f3956b15850baf503bd62625b1b60", "filename": "src/test/ui/parser/unmatched-langle-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6a605a61dfacfa974582484236155ce041a21d/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr?ref=6a6a605a61dfacfa974582484236155ce041a21d", "patch": "@@ -0,0 +1,8 @@\n+error: expected `::`, found `(`\n+  --> $DIR/unmatched-langle-2.rs:13:20\n+   |\n+LL |     foo::<Ty<<<i32>();\n+   |                    ^ expected `::`\n+\n+error: aborting due to previous error\n+"}]}