{"sha": "c1a98416e3e615e2d195a05eec4bad4705c9fc95", "node_id": "C_kwDOAAsO6NoAKGMxYTk4NDE2ZTNlNjE1ZTJkMTk1YTA1ZWVjNGJhZDQ3MDVjOWZjOTU", "commit": {"author": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-16T20:07:47Z"}, "committer": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-16T20:07:47Z"}, "message": "Migrate emoji identifier diagnostics to `SessionDiagnostic`", "tree": {"sha": "64799f9694bef2074fb258782021c000d1b221dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64799f9694bef2074fb258782021c000d1b221dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a98416e3e615e2d195a05eec4bad4705c9fc95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a98416e3e615e2d195a05eec4bad4705c9fc95", "html_url": "https://github.com/rust-lang/rust/commit/c1a98416e3e615e2d195a05eec4bad4705c9fc95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a98416e3e615e2d195a05eec4bad4705c9fc95/comments", "author": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "committer": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39bdb1d6b9eaf23f2636baee0949d67890abcd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39bdb1d6b9eaf23f2636baee0949d67890abcd8", "html_url": "https://github.com/rust-lang/rust/commit/a39bdb1d6b9eaf23f2636baee0949d67890abcd8"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "c2799e39fd30c7badbebad627ad82e39a975e0ba", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1a98416e3e615e2d195a05eec4bad4705c9fc95/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c1a98416e3e615e2d195a05eec4bad4705c9fc95/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c1a98416e3e615e2d195a05eec4bad4705c9fc95", "patch": "@@ -4011,6 +4011,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_incremental\",\n  \"rustc_lint\",\n+ \"rustc_macros\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_mir_build\","}, {"sha": "2c05abd8c0996300b7e24dfaeb1922e013d1c6bd", "filename": "compiler/rustc_error_messages/locales/en-US/interface.ftl", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl?ref=c1a98416e3e615e2d195a05eec4bad4705c9fc95", "patch": "@@ -0,0 +1,6 @@\n+interface_ferris_identifier =\n+    Ferris cannot be used as an identifier\n+    .suggestion = try using their name instead\n+\n+interface_emoji_identifier =\n+    identifiers cannot contain emoji: `{$ident}`"}, {"sha": "6ae4dab3a35eb18898559beaa9dad4fe1e36eb0c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=c1a98416e3e615e2d195a05eec4bad4705c9fc95", "patch": "@@ -34,6 +34,7 @@ fluent_messages! {\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n     const_eval => \"../locales/en-US/const_eval.ftl\",\n     expand => \"../locales/en-US/expand.ftl\",\n+    interface => \"../locales/en-US/interface.ftl\",\n     lint => \"../locales/en-US/lint.ftl\",\n     parser => \"../locales/en-US/parser.ftl\",\n     passes => \"../locales/en-US/passes.ftl\","}, {"sha": "da4002d09ad029db6f397df74f946a333b4a6a26", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=c1a98416e3e615e2d195a05eec4bad4705c9fc95", "patch": "@@ -17,6 +17,7 @@ rustc_attr = { path = \"../rustc_attr\" }\n rustc_borrowck = { path = \"../rustc_borrowck\" }\n rustc_builtin_macros = { path = \"../rustc_builtin_macros\" }\n rustc_expand = { path = \"../rustc_expand\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "e00d0b7d0d82fc51653becf3be09135a50de9f27", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a98416e3e615e2d195a05eec4bad4705c9fc95/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c1a98416e3e615e2d195a05eec4bad4705c9fc95", "patch": "@@ -8,11 +8,12 @@ use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n-use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan, PResult};\n+use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::StableCrateId;\n use rustc_hir::definitions::Definitions;\n use rustc_lint::{BufferedEarlyLint, EarlyCheckNode, LintStore};\n+use rustc_macros::SessionDiagnostic;\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n@@ -30,7 +31,7 @@ use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::FileName;\n+use rustc_span::{FileName, Span};\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tracing::{info, warn};\n@@ -263,6 +264,23 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n     }\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(interface::ferris_identifier)]\n+struct FerrisIdentifier {\n+    #[primary_span]\n+    spans: Vec<Span>,\n+    #[suggestion(code = \"ferris\", applicability = \"maybe-incorrect\")]\n+    first_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(interface::emoji_identifier)]\n+struct EmojiIdentifier {\n+    #[primary_span]\n+    spans: Vec<Span>,\n+    ident: Symbol,\n+}\n+\n /// Runs the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins,\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n@@ -443,23 +461,9 @@ pub fn configure_and_expand(\n             spans.sort();\n             if ident == sym::ferris {\n                 let first_span = spans[0];\n-                sess.diagnostic()\n-                    .struct_span_err(\n-                        MultiSpan::from(spans),\n-                        \"Ferris cannot be used as an identifier\",\n-                    )\n-                    .span_suggestion(\n-                        first_span,\n-                        \"try using their name instead\",\n-                        \"ferris\",\n-                        Applicability::MaybeIncorrect,\n-                    )\n-                    .emit();\n+                sess.emit_err(FerrisIdentifier { spans, first_span });\n             } else {\n-                sess.diagnostic().span_err(\n-                    MultiSpan::from(spans),\n-                    &format!(\"identifiers cannot contain emoji: `{}`\", ident),\n-                );\n+                sess.emit_err(EmojiIdentifier { spans, ident });\n             }\n         }\n     });"}]}