{"sha": "8e70c82f572be26a9d838e52f451b270160ffdba", "node_id": "C_kwDOAAsO6NoAKDhlNzBjODJmNTcyYmUyNmE5ZDgzOGU1MmY0NTFiMjcwMTYwZmZkYmE", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-09-29T09:04:25Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-10-06T07:02:22Z"}, "message": "Prevent UB in child process after calling libc::fork\n\nAfter calling libc::fork, the child process tried to access\na TLS variable when processing a panic. This caused\na memory allocation which is UB in the child.\nTo prevent this from happening, the panic handler will\nnot access the TLS variable in case `panic::always_abort`\nwas called before.", "tree": {"sha": "b4e53c247716a05dbdf83f7249feabca49d548e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4e53c247716a05dbdf83f7249feabca49d548e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e70c82f572be26a9d838e52f451b270160ffdba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e70c82f572be26a9d838e52f451b270160ffdba", "html_url": "https://github.com/rust-lang/rust/commit/8e70c82f572be26a9d838e52f451b270160ffdba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e70c82f572be26a9d838e52f451b270160ffdba/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0152393048c4eb6c6d2aec63e9899cc86a269b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/0152393048c4eb6c6d2aec63e9899cc86a269b44", "html_url": "https://github.com/rust-lang/rust/commit/0152393048c4eb6c6d2aec63e9899cc86a269b44"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "cd4d41fe123777c2d49892cfe7c8dfbfd4b21577", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8e70c82f572be26a9d838e52f451b270160ffdba/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e70c82f572be26a9d838e52f451b270160ffdba/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=8e70c82f572be26a9d838e52f451b270160ffdba", "patch": "@@ -308,6 +308,14 @@ pub mod panic_count {\n     // Additionally, the top bit of GLOBAL_PANIC_COUNT (GLOBAL_ALWAYS_ABORT_FLAG)\n     // records whether panic::always_abort() has been called.  This can only be\n     // set, never cleared.\n+    // panic::always_abort() is usually called to prevent memory allocations done by\n+    // the panic handling in the child created by `libc::fork`. \n+    // Memory allocations performed in  a child created with `libc::fork` are undefined\n+    // behavior in most operating systems.\n+    // Accessing LOCAL_PANIC_COUNT in a child created by `libc::fork` would lead to a memory \n+    // allocation. Only GLOBAL_PANIC_COUNT can be accessed in this situation. This is\n+    // sufficient because a child process will always have exactly one thread only.\n+    // See also #85261 for details.\n     //\n     // This could be viewed as a struct containing a single bit and an n-1-bit\n     // value, but if we wrote it like that it would be more than a single word,\n@@ -318,15 +326,26 @@ pub mod panic_count {\n     // panicking thread consumes at least 2 bytes of address space.\n     static GLOBAL_PANIC_COUNT: AtomicUsize = AtomicUsize::new(0);\n \n+    // Return the state of the ALWAYS_ABORT_FLAG and number of panics.\n+    //\n+    // If ALWAYS_ABORT_FLAG is not set, the number is determined on a per-thread\n+    // base (stored in LOCAL_PANIC_COUNT), i.e. it is the amount of recursive calls\n+    // of the calling thread.\n+    // If ALWAYS_ABORT_FLAG is set, the number equals the *global* number of panic\n+    // calls. See above why LOCAL_PANIC_COUNT is not used.\n     pub fn increase() -> (bool, usize) {\n-        (\n-            GLOBAL_PANIC_COUNT.fetch_add(1, Ordering::Relaxed) & ALWAYS_ABORT_FLAG != 0,\n+        let global_count = GLOBAL_PANIC_COUNT.fetch_add(1, Ordering::Relaxed);\n+        let must_abort = global_count & ALWAYS_ABORT_FLAG != 0;\n+        let panics = if must_abort {\n+            global_count & !ALWAYS_ABORT_FLAG\n+        } else {\n             LOCAL_PANIC_COUNT.with(|c| {\n                 let next = c.get() + 1;\n                 c.set(next);\n                 next\n-            }),\n-        )\n+            })\n+        };\n+        (must_abort, panics)\n     }\n \n     pub fn decrease() {"}]}