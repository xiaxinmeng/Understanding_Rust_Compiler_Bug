{"sha": "68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDJjZDVmMTcwYzZmYjQ2ZGM1OTI5NGViZDU3YTcwYmM4NGQ0OGQ=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-10-30T14:34:12Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-10-30T14:34:12Z"}, "message": "Use check-pass instead of build-pass in regions ui test suite", "tree": {"sha": "36b9c4112ed13c62374ba261a8a27f56814367d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b9c4112ed13c62374ba261a8a27f56814367d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "html_url": "https://github.com/rust-lang/rust/commit/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6", "html_url": "https://github.com/rust-lang/rust/commit/1d6a0b0c7206448d22b17a0f8170b0d8e7c129f6"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "72d82da45344e70a487ca92b235e5d105bd584d7", "filename": "src/test/ui/regions/region-bound-extra-bound-in-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -1,7 +1,7 @@\n // Test related to #22779. In this case, the impl is an inherent impl,\n // so it doesn't have to match any trait, so no error results.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n struct MySlice<'a, T:'a>(&'a mut [T]);"}, {"sha": "68056370c44892952ffe1e7fddc11b0d3eeb4f81", "filename": "src/test/ui/regions/region-bound-same-bounds-in-trait-and-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -1,7 +1,7 @@\n // Test related to #22779, but where the `'a:'b` relation\n // appears in the trait too. No error here.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n trait Tr<'a, T> {\n     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b;"}, {"sha": "ddf3be690dd79d8eacc51aa8d41aa39314f6ad16", "filename": "src/test/ui/regions/region-object-lifetime-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -1,7 +1,7 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(warnings)]\n \n trait Foo {"}, {"sha": "0536fa2a20f450829660521b2272eb6f118b8702", "filename": "src/test/ui/regions/region-object-lifetime-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -1,7 +1,7 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(warnings)]\n \n trait Foo {"}, {"sha": "a481a9cc5fe8e4f223476ffb4df68e083bbc1202", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -2,7 +2,7 @@\n // \"projection gap\": in this test, we know that `T: 'x`, and that is\n // enough to conclude that `T::Foo: 'x`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "a627cbbd88f1881d3b3d9a448ce4e1ae8c4cef61", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -2,7 +2,7 @@\n // \"projection gap\": in this test, we know that `T::Foo: 'x`, and that\n // is (naturally) enough to conclude that `T::Foo: 'x`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "5158c2893404dd6ff62bc1bb6ee8046dba071b02", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -2,7 +2,7 @@\n // \"projection gap\": in this test, we know that `T: 'x`, and that\n // is (naturally) enough to conclude that `T: 'x`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "15deaba5638aa1a8b95b58ddc5d1fbce999fc871", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "7767c13c825b30ace67327236c3a0182096666bf", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "37415994210cda57ff18a3fb8242333dfca5fd22", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "2e7f198d8c7c22feddec6bb6b6acbb28baacc9dc", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "45155c7216603846716cd9d59e482c91c6589441", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "bba8b2445249676b45a08bb2ecb0d3c5f6d4ad97", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "220d2e83cc0a68dd17270e536002444803b5cad0", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "9ddcdb649d8ddcef6ac87198d32dbe29601fc60e", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "5f9700df1cbd6bc84b30ff1c6aad8267044c807b", "filename": "src/test/ui/regions/regions-outlives-projection-hrtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -5,7 +5,7 @@\n // `'r` is bound, that leads to badness. This test checks that\n // everything works.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n trait TheTrait {"}, {"sha": "5c37a585a40b1c0fd9d83cad856a81338d714c8e", "filename": "src/test/ui/regions/regions-outlives-projection-trait-def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -1,7 +1,7 @@\n // Test that `<F as Foo<'a>>::Type: 'b`, where `trait Foo<'a> { Type:\n // 'a; }`, does not require that `F: 'b`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n trait SomeTrait<'a> {"}, {"sha": "ce34ffcc858151317e3fbd87379add0dd3bc3789", "filename": "src/test/ui/regions/regions-outlives-scalar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d2cd5f170c6fb46dc59294ebd57a70bc84d48d/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs?ref=68d2cd5f170c6fb46dc59294ebd57a70bc84d48d", "patch": "@@ -1,7 +1,7 @@\n // Test that scalar values outlive all regions.\n // Rule OutlivesScalar from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n struct Foo<'a> {"}]}