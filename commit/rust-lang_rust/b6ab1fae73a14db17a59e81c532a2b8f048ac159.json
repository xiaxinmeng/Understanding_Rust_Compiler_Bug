{"sha": "b6ab1fae73a14db17a59e81c532a2b8f048ac159", "node_id": "C_kwDOAAsO6NoAKGI2YWIxZmFlNzNhMTRkYjE3YTU5ZTgxYzUzMmEyYjhmMDQ4YWMxNTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T14:07:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-06T14:07:27Z"}, "message": "Auto merge of #95707 - RalfJung:initialized, r=oli-obk\n\ninterp/validity: enforce Scalar::Initialized\n\nThis is a follow-up to https://github.com/rust-lang/rust/pull/94527, to also account for the new kind of `Scalar` layout inside the validity checker.\n\nr? `@oli-obk`", "tree": {"sha": "f71ba4a5cf0fee914a7dae24bcfe392f7f7d39d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71ba4a5cf0fee914a7dae24bcfe392f7f7d39d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6ab1fae73a14db17a59e81c532a2b8f048ac159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ab1fae73a14db17a59e81c532a2b8f048ac159", "html_url": "https://github.com/rust-lang/rust/commit/b6ab1fae73a14db17a59e81c532a2b8f048ac159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6ab1fae73a14db17a59e81c532a2b8f048ac159/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "201cf3dba302cec9b62e9b988858dcad47a88a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/201cf3dba302cec9b62e9b988858dcad47a88a4f", "html_url": "https://github.com/rust-lang/rust/commit/201cf3dba302cec9b62e9b988858dcad47a88a4f"}, {"sha": "d214b3875536a4243ccd0919af375fccda6344f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d214b3875536a4243ccd0919af375fccda6344f3", "html_url": "https://github.com/rust-lang/rust/commit/d214b3875536a4243ccd0919af375fccda6344f3"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "349806d997945f1bc3458c065cb4f23a81cc286b", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6ab1fae73a14db17a59e81c532a2b8f048ac159/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ab1fae73a14db17a59e81c532a2b8f048ac159/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=b6ab1fae73a14db17a59e81c532a2b8f048ac159", "patch": "@@ -629,11 +629,24 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         op: &OpTy<'tcx, M::PointerTag>,\n         scalar_layout: ScalarAbi,\n     ) -> InterpResult<'tcx> {\n-        if scalar_layout.valid_range(self.ecx).is_full_for(op.layout.size) {\n+        // We check `is_full_range` in a slightly complicated way because *if* we are checking\n+        // number validity, then we want to ensure that `Scalar::Initialized` is indeed initialized,\n+        // i.e. that we go over the `check_init` below.\n+        let is_full_range = match scalar_layout {\n+            ScalarAbi::Initialized { valid_range, .. } => {\n+                if M::enforce_number_validity(self.ecx) {\n+                    false // not \"full\" since uninit is not accepted\n+                } else {\n+                    valid_range.is_full_for(op.layout.size)\n+                }\n+            }\n+            ScalarAbi::Union { .. } => true,\n+        };\n+        if is_full_range {\n             // Nothing to check\n             return Ok(());\n         }\n-        // At least one value is excluded.\n+        // We have something to check.\n         let valid_range = scalar_layout.valid_range(self.ecx);\n         let WrappingRange { start, end } = valid_range;\n         let max_value = op.layout.size.unsigned_int_max();\n@@ -647,9 +660,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 expected { \"something {}\", wrapping_range_format(valid_range, max_value) },\n         );\n         let bits = match value.try_to_int() {\n+            Ok(int) => int.assert_bits(op.layout.size),\n             Err(_) => {\n                 // So this is a pointer then, and casting to an int failed.\n                 // Can only happen during CTFE.\n+                // We support 2 kinds of ranges here: full range, and excluding zero.\n                 if start == 1 && end == max_value {\n                     // Only null is the niche.  So make sure the ptr is NOT null.\n                     if self.ecx.scalar_may_be_null(value) {\n@@ -660,7 +675,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                                 wrapping_range_format(valid_range, max_value)\n                             }\n                         )\n+                    } else {\n+                        return Ok(());\n                     }\n+                } else if scalar_layout.valid_range(self.ecx).is_full_for(op.layout.size) {\n+                    // Easy. (This is reachable if `enforce_number_validity` is set.)\n                     return Ok(());\n                 } else {\n                     // Conservatively, we reject, because the pointer *could* have a bad\n@@ -674,9 +693,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     )\n                 }\n             }\n-            Ok(int) => int.assert_bits(op.layout.size),\n         };\n-        // Now compare. This is slightly subtle because this is a special \"wrap-around\" range.\n+        // Now compare.\n         if valid_range.contains(bits) {\n             Ok(())\n         } else {"}]}