{"sha": "0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNWRlMjZlZjJhYzgyNzRkYjYyNTEzYTZlZDhkMjhmMTY0MmJiM2E=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-12-02T18:05:04Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-12-02T18:05:04Z"}, "message": "Merge pull request #663 from SingingTree/match_trailing_comma\n\nWIP: Trailing commas for match block arms", "tree": {"sha": "35264f387a1f82a90cb949aee17d58ee18977d08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35264f387a1f82a90cb949aee17d58ee18977d08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "html_url": "https://github.com/rust-lang/rust/commit/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d65e45380372f77c89fdca1f87daac902e04c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d65e45380372f77c89fdca1f87daac902e04c9", "html_url": "https://github.com/rust-lang/rust/commit/36d65e45380372f77c89fdca1f87daac902e04c9"}, {"sha": "74d40c042f9f2d6d39881465aca91a4daf1ea7a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d40c042f9f2d6d39881465aca91a4daf1ea7a9", "html_url": "https://github.com/rust-lang/rust/commit/74d40c042f9f2d6d39881465aca91a4daf1ea7a9"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "2ea175c385f308fd6bbc6487492285a30af20f32", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "patch": "@@ -308,4 +308,6 @@ create_config! {\n     hard_tabs: bool, false, \"Use tab characters for indentation, spaces for alignment\";\n     wrap_comments: bool, false, \"Break comments to fit on the line\";\n     wrap_match_arms: bool, true, \"Wrap multiline match arms in blocks\";\n+    match_block_trailing_comma: bool, false,\n+        \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n }"}, {"sha": "78c3a82e223db81ed4f3251181b10ceae9c90edd", "filename": "src/expr.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "patch": "@@ -20,7 +20,7 @@ use string::{StringFormat, rewrite_string};\n use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt};\n use visitor::FmtVisitor;\n-use config::{StructLitStyle, MultilineStyle};\n+use config::{Config, StructLitStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment};\n use types::rewrite_path;\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -823,7 +823,7 @@ fn rewrite_match(context: &RewriteContext,\n             // We couldn't format the arm, just reproduce the source.\n             let snippet = context.snippet(mk_sp(arm_start_pos(arm), arm_end_pos(arm)));\n             result.push_str(&snippet);\n-            result.push_str(arm_comma(&arm.body));\n+            result.push_str(arm_comma(&context.config, &arm.body));\n         }\n     }\n     // BytePos(1) = closing match brace.\n@@ -854,8 +854,10 @@ fn arm_end_pos(arm: &ast::Arm) -> BytePos {\n     arm.body.span.hi\n }\n \n-fn arm_comma(body: &ast::Expr) -> &'static str {\n-    if let ast::ExprBlock(ref block) = body.node {\n+fn arm_comma(config: &Config, body: &ast::Expr) -> &'static str {\n+    if config.match_block_trailing_comma {\n+        \",\"\n+    } else if let ast::ExprBlock(ref block) = body.node {\n         if let ast::DefaultBlock = block.rules {\n             \"\"\n         } else {\n@@ -950,18 +952,23 @@ impl Rewrite for ast::Arm {\n             ref x => x,\n         };\n \n-        let comma = arm_comma(body);\n+        let comma = arm_comma(&context.config, body);\n \n         // Let's try and get the arm body on the same line as the condition.\n         // 4 = ` => `.len()\n         if context.config.max_width > line_start + comma.len() + 4 {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n             let offset = Indent::new(offset.block_indent, line_start + 4 - offset.block_indent);\n             let rewrite = nop_block_collapse(body.rewrite(context, budget, offset), budget);\n+            let is_block = if let ast::ExprBlock(ref block) = body.node {\n+                true\n+            } else {\n+                false\n+            };\n \n             match rewrite {\n                 Some(ref body_str) if !body_str.contains('\\n') || !context.config.wrap_match_arms ||\n-                                      comma.is_empty() => {\n+                                      is_block => {\n                     return Some(format!(\"{}{} => {}{}\",\n                                         attr_str.trim_left(),\n                                         pats_str,\n@@ -983,7 +990,11 @@ impl Rewrite for ast::Arm {\n                                                          body_budget));\n         let indent_str = offset.block_indent(context.config).to_string(context.config);\n         let (body_prefix, body_suffix) = if context.config.wrap_match_arms {\n-            (\" {\", \"}\")\n+            if context.config.match_block_trailing_comma {\n+                (\" {\", \"},\")\n+            } else {\n+                (\" {\", \"}\")\n+            }\n         } else {\n             (\"\", \"\")\n         };"}, {"sha": "e9daac13bf96f03674eed676d5b8552e5397908e", "filename": "tests/source/match-block-trailing-comma.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Fsource%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Fsource%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch-block-trailing-comma.rs?ref=0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-match_block_trailing_comma: true\n+// Match expressions, no unwrapping of block arms or wrapping of multiline\n+// expressions.\n+\n+fn foo() {\n+    match x {\n+        a => {\n+            \"line1\";\n+            \"line2\"\n+        }\n+        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+    }\n+}"}, {"sha": "f6e88406bb46218021697a58f52890032e9cf6ec", "filename": "tests/source/match-nowrap-trailing-comma.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Fsource%2Fmatch-nowrap-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Fsource%2Fmatch-nowrap-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch-nowrap-trailing-comma.rs?ref=0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-wrap_match_arms: false\n+// rustfmt-match_block_trailing_comma: true\n+// Match expressions, no unwrapping of block arms or wrapping of multiline\n+// expressions.\n+\n+fn foo() {\n+    match x {\n+        a => {\n+            \"line1\";\n+            \"line2\"\n+        }\n+        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+    }\n+}"}, {"sha": "b00def007e8a14efa719b6f156cf6a50e304115f", "filename": "tests/target/match-block-trailing-comma.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Ftarget%2Fmatch-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-block-trailing-comma.rs?ref=0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-match_block_trailing_comma: true\n+// Match expressions, no unwrapping of block arms or wrapping of multiline\n+// expressions.\n+\n+fn foo() {\n+    match x {\n+        a => {\n+            \"line1\";\n+            \"line2\"\n+        },\n+        b => {\n+            (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+             bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)\n+        },\n+    }\n+}"}, {"sha": "6b2e430123d5f22504f27bce42d4c9a0f3a1c322", "filename": "tests/target/match-nowrap-trailing-comma.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5de26ef2ac8274db62513a6ed8d28f1642bb3a/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch-nowrap-trailing-comma.rs?ref=0c5de26ef2ac8274db62513a6ed8d28f1642bb3a", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-wrap_match_arms: false\n+// rustfmt-match_block_trailing_comma: true\n+// Match expressions, no unwrapping of block arms or wrapping of multiline\n+// expressions.\n+\n+fn foo() {\n+    match x {\n+        a => {\n+            \"line1\";\n+            \"line2\"\n+        },\n+        b => (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb),\n+    }\n+}"}]}