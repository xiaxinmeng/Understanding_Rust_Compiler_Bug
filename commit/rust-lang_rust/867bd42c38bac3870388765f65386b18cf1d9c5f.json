{"sha": "867bd42c38bac3870388765f65386b18cf1d9c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2N2JkNDJjMzhiYWMzODcwMzg4NzY1ZjY1Mzg2YjE4Y2YxZDljNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T18:43:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T18:43:48Z"}, "message": "Auto merge of #75810 - hug-dev:cmse-nonsecure-entry, r=jonas-schievink\n\nAdd support for cmse_nonsecure_entry attribute\n\nThis pull request adds the `cmse_nonsecure_entry` attribute under an unstable feature.\n\nI was not sure if it was fine for me to send directly the pull-request or if I should submit a RFC first. I was told on Zulip that it was fine to do so but please close it if I need first submit a RFC or follow another process instead.\n\nThe `cmse_nonsecure_entry` attribute is a LLVM attribute that will be available in LLVM 11. I plan to rebase on the [upgrade PR](https://github.com/rust-lang/rust/pull/73526) once merged to make this one compile.\n\nThis attribute modifies code generation of the function as explained [here](https://developer.arm.com/documentation/ecm0359818/latest/) to make it work with the TrustZone-M hardware feature. This feature is only available on `thumbv8m` targets so I created an error for that if one tries to use this attribute for another target.\n\nI added this attribute in Rust as any other LLVM attribute are added but since this one is target-dependent I am not sure if it was the best thing to do. Please indicate me if you think of other ways, like isolating target-dependent attributes together.\n\n----------------\n\nTracking issue: https://github.com/rust-lang/rust/issues/75835", "tree": {"sha": "4323cb7195b1b266abd5d7460b25a15ba532c282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4323cb7195b1b266abd5d7460b25a15ba532c282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/867bd42c38bac3870388765f65386b18cf1d9c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/867bd42c38bac3870388765f65386b18cf1d9c5f", "html_url": "https://github.com/rust-lang/rust/commit/867bd42c38bac3870388765f65386b18cf1d9c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/867bd42c38bac3870388765f65386b18cf1d9c5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92d28e523bf056ab4eb752510ec52fe4f1c6311", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92d28e523bf056ab4eb752510ec52fe4f1c6311", "html_url": "https://github.com/rust-lang/rust/commit/d92d28e523bf056ab4eb752510ec52fe4f1c6311"}, {"sha": "2588287deffd92c4ca0b5b39f92b9cca894a3983", "url": "https://api.github.com/repos/rust-lang/rust/commits/2588287deffd92c4ca0b5b39f92b9cca894a3983", "html_url": "https://github.com/rust-lang/rust/commit/2588287deffd92c4ca0b5b39f92b9cca894a3983"}], "stats": {"total": 255, "additions": 254, "deletions": 1}, "files": [{"sha": "73c34818446a6427341127cb3e5d7ea3cb6e399b", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -294,6 +294,9 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         Attribute::NoAlias.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n     }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY) {\n+        llvm::AddFunctionAttrString(llfn, Function, const_cstr!(\"cmse_nonsecure_entry\"));\n+    }\n     sanitize(cx, codegen_fn_attrs.no_sanitize, llfn);\n \n     // Always annotate functions with the target-cpu they are compiled for."}, {"sha": "f35c1016f86be77fcf0f9cec5275f2ca8f9adc4c", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -344,6 +344,13 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n             .expect(\"non-UTF8 diagnostic\");\n             diag_handler.warn(&msg);\n         }\n+        llvm::diagnostic::Unsupported(diagnostic_ref) => {\n+            let msg = llvm::build_string(|s| {\n+                llvm::LLVMRustWriteDiagnosticInfoToString(diagnostic_ref, s)\n+            })\n+            .expect(\"non-UTF8 diagnostic\");\n+            diag_handler.err(&msg);\n+        }\n         llvm::diagnostic::UnknownDiagnostic(..) => {}\n     }\n }"}, {"sha": "ccd3e42e458fd3aa9b7ff4c0e67adb1e0d898eb6", "filename": "compiler/rustc_codegen_llvm/src/llvm/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -118,6 +118,7 @@ pub enum Diagnostic<'ll> {\n     InlineAsm(InlineAsmDiagnostic<'ll>),\n     PGO(&'ll DiagnosticInfo),\n     Linker(&'ll DiagnosticInfo),\n+    Unsupported(&'ll DiagnosticInfo),\n \n     /// LLVM has other types that we do not wrap here.\n     UnknownDiagnostic(&'ll DiagnosticInfo),\n@@ -159,6 +160,7 @@ impl Diagnostic<'ll> {\n \n             Dk::PGOProfile => PGO(di),\n             Dk::Linker => Linker(di),\n+            Dk::Unsupported => Unsupported(di),\n \n             _ => UnknownDiagnostic(di),\n         }"}, {"sha": "af3f3e7aa03c0bbdae75a4c4ef665a8bd9836bc0", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -483,6 +483,7 @@ pub enum DiagnosticKind {\n     OptimizationFailure,\n     PGOProfile,\n     Linker,\n+    Unsupported,\n }\n \n /// LLVMRustDiagnosticLevel"}, {"sha": "ed9b99188bb9032deab557d0749b396a5b85c738", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -37,6 +37,12 @@ pub fn AddFunctionAttrStringValue(llfn: &'a Value, idx: AttributePlace, attr: &C\n     }\n }\n \n+pub fn AddFunctionAttrString(llfn: &'a Value, idx: AttributePlace, attr: &CStr) {\n+    unsafe {\n+        LLVMRustAddFunctionAttrStringValue(llfn, idx.as_uint(), attr.as_ptr(), std::ptr::null())\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub enum AttributePlace {\n     ReturnValue,"}, {"sha": "8b21dacf7872428d5140baa1b3590139ae2bf13a", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -458,6 +458,8 @@ E0770: include_str!(\"./error_codes/E0770.md\"),\n E0771: include_str!(\"./error_codes/E0771.md\"),\n E0773: include_str!(\"./error_codes/E0773.md\"),\n E0774: include_str!(\"./error_codes/E0774.md\"),\n+E0775: include_str!(\"./error_codes/E0775.md\"),\n+E0776: include_str!(\"./error_codes/E0776.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "9bafd52f75cf2d63c0dd97a0c7b4b60d90fa6361", "filename": "compiler/rustc_error_codes/src/error_codes/E0775.md", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0775.md", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0775.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0775.md?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,17 @@\n+`#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M\n+extension.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0775\n+#![feature(cmse_nonsecure_entry)]\n+\n+#[cmse_nonsecure_entry]\n+pub extern \"C\" fn entry_function() {}\n+```\n+\n+To fix this error, compile your code for a Rust target that supports the\n+TrustZone-M extension. The current possible targets are:\n+* `thumbv8m.main-none-eabi`\n+* `thumbv8m.main-none-eabihf`\n+* `thumbv8m.base-none-eabi`"}, {"sha": "d65beebe07c61b27c7fea14f162e00a12d1de98e", "filename": "compiler/rustc_error_codes/src/error_codes/E0776.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0776.md", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0776.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0776.md?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,13 @@\n+`#[cmse_nonsecure_entry]` functions require a C ABI\n+\n+Erroneous code example:\n+\n+```compile_fail,E0776\n+#![feature(cmse_nonsecure_entry)]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+pub fn entry_function(input: Vec<u32>) {}\n+```\n+\n+To fix this error, declare your entry function with a C ABI, using `extern \"C\"`."}, {"sha": "348cff8d2dad2eb66816deb93f1af57773a38428", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -590,6 +590,9 @@ declare_features! (\n     /// Allows using and casting function pointers in a `const fn`.\n     (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n \n+    /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n+    (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "b7e113e601007b3d39a3096966bf0cfae158573e", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -349,6 +349,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         experimental!(register_tool),\n     ),\n \n+    gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+\n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // =========================================================================="}, {"sha": "9f8ea7f43d84bcc6ec6e9a9842bbe858a6017d46", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -1171,6 +1171,7 @@ enum class LLVMRustDiagnosticKind {\n   OptimizationFailure,\n   PGOProfile,\n   Linker,\n+  Unsupported,\n };\n \n static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n@@ -1197,6 +1198,8 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n     return LLVMRustDiagnosticKind::PGOProfile;\n   case DK_Linker:\n     return LLVMRustDiagnosticKind::Linker;\n+  case DK_Unsupported:\n+    return LLVMRustDiagnosticKind::Unsupported;\n   default:\n     return (Kind >= DK_FirstRemark && Kind <= DK_LastRemark)\n                ? LLVMRustDiagnosticKind::OptimizationRemarkOther"}, {"sha": "d71cdc4e67de4885ecd0587cf2731d859785ed16", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -79,6 +79,9 @@ bitflags! {\n         /// #[ffi_const]: applies clang's `const` attribute to a foreign function\n         /// declaration.\n         const FFI_CONST                 = 1 << 13;\n+        /// #[cmse_nonsecure_entry]: with a TrustZone-M extension, declare a\n+        /// function as an entry function from Non-Secure code.\n+        const CMSE_NONSECURE_ENTRY      = 1 << 14;\n     }\n }\n "}, {"sha": "e3ad31469b237e7a3d309623b39451a0c2046496", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -337,6 +337,7 @@ symbols! {\n         closure_to_fn_coercion,\n         cmp,\n         cmpxchg16b_target_feature,\n+        cmse_nonsecure_entry,\n         coerce_unsized,\n         cold,\n         column,"}, {"sha": "9aca112a9142df404477e1f032a8580c9d815bae", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -2543,6 +2543,21 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if tcx.sess.check_name(attr, sym::used) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n+        } else if tcx.sess.check_name(attr, sym::cmse_nonsecure_entry) {\n+            if tcx.fn_sig(id).abi() != abi::Abi::C {\n+                struct_span_err!(\n+                    tcx.sess,\n+                    attr.span,\n+                    E0776,\n+                    \"`#[cmse_nonsecure_entry]` requires C ABI\"\n+                )\n+                .emit();\n+            }\n+            if !tcx.sess.target.target.llvm_target.contains(\"thumbv8m\") {\n+                struct_span_err!(tcx.sess, attr.span, E0775, \"`#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\")\n+                    .emit();\n+            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::CMSE_NONSECURE_ENTRY;\n         } else if tcx.sess.check_name(attr, sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if tcx.sess.check_name(attr, sym::track_caller) {"}, {"sha": "338fbc4b2bfca418f56878b836047b01e55e248c", "filename": "src/doc/unstable-book/src/language-features/cmse-nonsecure-entry.md", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcmse-nonsecure-entry.md", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcmse-nonsecure-entry.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcmse-nonsecure-entry.md?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,81 @@\n+# `cmse_nonsecure_entry`\n+\n+The tracking issue for this feature is: [#75835]\n+\n+[#75835]: https://github.com/rust-lang/rust/issues/75835\n+\n+------------------------\n+\n+The [TrustZone-M\n+feature](https://developer.arm.com/documentation/100690/latest/) is available\n+for targets with the Armv8-M architecture profile (`thumbv8m` in their target\n+name).\n+LLVM, the Rust compiler and the linker are providing\n+[support](https://developer.arm.com/documentation/ecm0359818/latest/) for the\n+TrustZone-M feature.\n+\n+One of the things provided, with this unstable feature, is the\n+`cmse_nonsecure_entry` attribute.  This attribute marks a Secure function as an\n+entry function (see [section\n+5.4](https://developer.arm.com/documentation/ecm0359818/latest/) for details).\n+With this attribute, the compiler will do the following:\n+* add a special symbol on the function which is the `__acle_se_` prefix and the\n+  standard function name\n+* constrain the number of parameters to avoid using the Non-Secure stack\n+* before returning from the function, clear registers that might contain Secure\n+  information\n+* use the `BXNS` instruction to return\n+\n+Because the stack can not be used to pass parameters, there will be compilation\n+errors if:\n+* the total size of all parameters is too big (for example more than four 32\n+  bits integers)\n+* the entry function is not using a C ABI\n+\n+The special symbol `__acle_se_` will be used by the linker to generate a secure\n+gateway veneer.\n+\n+<!-- NOTE(ignore) this example is specific to thumbv8m targets -->\n+\n+``` rust,ignore\n+#![feature(cmse_nonsecure_entry)]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+pub extern \"C\" fn entry_function(input: u32) -> u32 {\n+    input + 6\n+}\n+```\n+\n+``` text\n+$ rustc --emit obj --crate-type lib --target thumbv8m.main-none-eabi function.rs\n+$ arm-none-eabi-objdump -D function.o\n+\n+00000000 <entry_function>:\n+   0:   b580            push    {r7, lr}\n+   2:   466f            mov     r7, sp\n+   4:   b082            sub     sp, #8\n+   6:   9001            str     r0, [sp, #4]\n+   8:   1d81            adds    r1, r0, #6\n+   a:   460a            mov     r2, r1\n+   c:   4281            cmp     r1, r0\n+   e:   9200            str     r2, [sp, #0]\n+  10:   d30b            bcc.n   2a <entry_function+0x2a>\n+  12:   e7ff            b.n     14 <entry_function+0x14>\n+  14:   9800            ldr     r0, [sp, #0]\n+  16:   b002            add     sp, #8\n+  18:   e8bd 4080       ldmia.w sp!, {r7, lr}\n+  1c:   4671            mov     r1, lr\n+  1e:   4672            mov     r2, lr\n+  20:   4673            mov     r3, lr\n+  22:   46f4            mov     ip, lr\n+  24:   f38e 8800       msr     CPSR_f, lr\n+  28:   4774            bxns    lr\n+  2a:   f240 0000       movw    r0, #0\n+  2e:   f2c0 0000       movt    r0, #0\n+  32:   f240 0200       movw    r2, #0\n+  36:   f2c0 0200       movt    r2, #0\n+  3a:   211c            movs    r1, #28\n+  3c:   f7ff fffe       bl      0 <_ZN4core9panicking5panic17h5c028258ca2fb3f5E>\n+  40:   defe            udf     #254    ; 0xfe\n+```"}, {"sha": "2c56ba7db75b536b0432228b4760ed79174eca30", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -1 +1 @@\n-Subproject commit 7075196da1aa3527f7c87943607e25f3cf24997a\n+Subproject commit 2c56ba7db75b536b0432228b4760ed79174eca30"}, {"sha": "02d5f20febc4acf8f49f7ef88579048bb8d39ed6", "filename": "src/test/ui/cmse-nonsecure-entry/gate_test.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fgate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fgate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fgate_test.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,11 @@\n+// gate-test-cmse_nonsecure_entry\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+//~^ ERROR [E0775]\n+//~| ERROR [E0658]\n+pub extern \"C\" fn entry_function(input: u32) -> u32 {\n+    input + 6\n+}\n+\n+fn main() {}"}, {"sha": "75a29b317df87bcd9e40bd809c694e91929fcc76", "filename": "src/test/ui/cmse-nonsecure-entry/gate_test.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fgate_test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fgate_test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fgate_test.stderr?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: the `#[cmse_nonsecure_entry]` attribute is an experimental feature\n+  --> $DIR/gate_test.rs:4:1\n+   |\n+LL | #[cmse_nonsecure_entry]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #75835 <https://github.com/rust-lang/rust/issues/75835> for more information\n+   = help: add `#![feature(cmse_nonsecure_entry)]` to the crate attributes to enable\n+\n+error[E0775]: `#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\n+  --> $DIR/gate_test.rs:4:1\n+   |\n+LL | #[cmse_nonsecure_entry]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0658, E0775.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "a723eb734731d2d53ee8e06ec6b8e51c9d53a355", "filename": "src/test/ui/cmse-nonsecure-entry/params-on-registers.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,11 @@\n+// build-pass\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(cmse_nonsecure_entry)]\n+#![no_std]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+pub extern \"C\" fn entry_function(a: u32, b: u32, c: u32, d: u32) -> u32 {\n+    a + b + c + d\n+}"}, {"sha": "553d3a8cb0be7966dc2ee857a0c0b5f26e4d6631", "filename": "src/test/ui/cmse-nonsecure-entry/params-on-stack.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(cmse_nonsecure_entry)]\n+#![no_std]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+pub extern \"C\" fn entry_function(a: u32, b: u32, c: u32, d: u32, e: u32) -> u32 { //~ ERROR\n+    a + b + c + d + e\n+}"}, {"sha": "d9956acbe75771f03d1935fef27476e8482159d6", "filename": "src/test/ui/cmse-nonsecure-entry/params-on-stack.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,5 @@\n+error: <unknown>:0:0: in function entry_function i32 (i32, i32, i32, i32, i32): secure entry function requires arguments on stack\n+\n+\n+error: aborting due to previous error\n+"}, {"sha": "3783e2794021f5e53a76b7160c6884835f578326", "filename": "src/test/ui/cmse-nonsecure-entry/trustzone-only.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,10 @@\n+// ignore-thumbv8m.main-none-eabi\n+#![feature(cmse_nonsecure_entry)]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry] //~ ERROR [E0775]\n+pub extern \"C\" fn entry_function(input: u32) -> u32 {\n+    input + 6\n+}\n+\n+fn main() {}"}, {"sha": "7e8862f9ab7f2fd9ad75f2200c0fc45303d0e899", "filename": "src/test/ui/cmse-nonsecure-entry/trustzone-only.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,9 @@\n+error[E0775]: `#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\n+  --> $DIR/trustzone-only.rs:5:1\n+   |\n+LL | #[cmse_nonsecure_entry]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0775`."}, {"sha": "611c8643dcb0227e7e3c5da226eec8685a588144", "filename": "src/test/ui/cmse-nonsecure-entry/wrong-abi.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fwrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fwrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fwrong-abi.rs?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(cmse_nonsecure_entry)]\n+#![no_std]\n+\n+#[no_mangle]\n+#[cmse_nonsecure_entry]\n+pub fn entry_function(a: u32, b: u32, c: u32, d: u32) -> u32 { //~ ERROR [E0776]\n+    a + b + c + d\n+}"}, {"sha": "d6967a11e6bf7d7ff1c8c6e0df505b113459b9e6", "filename": "src/test/ui/cmse-nonsecure-entry/wrong-abi.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fwrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/867bd42c38bac3870388765f65386b18cf1d9c5f/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fwrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure-entry%2Fwrong-abi.stderr?ref=867bd42c38bac3870388765f65386b18cf1d9c5f", "patch": "@@ -0,0 +1,9 @@\n+error[E0776]: `#[cmse_nonsecure_entry]` functions require C ABI\n+  --> $DIR/wrong-abi.rs:7:1\n+   |\n+LL | #[cmse_nonsecure_entry]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0776`."}]}