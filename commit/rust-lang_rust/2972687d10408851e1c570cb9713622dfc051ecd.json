{"sha": "2972687d10408851e1c570cb9713622dfc051ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NzI2ODdkMTA0MDg4NTFlMWM1NzBjYjk3MTM2MjJkZmMwNTFlY2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-25T15:39:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-31T13:58:58Z"}, "message": "Update bootstrap compiler\n\nThis commit updates the bootstrap compiler and clears out a number\nof #[cfg(stage0)] annotations and related business", "tree": {"sha": "a6067fc2a3460c78c0a7b16e2eef14342bc78e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6067fc2a3460c78c0a7b16e2eef14342bc78e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2972687d10408851e1c570cb9713622dfc051ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2972687d10408851e1c570cb9713622dfc051ecd", "html_url": "https://github.com/rust-lang/rust/commit/2972687d10408851e1c570cb9713622dfc051ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2972687d10408851e1c570cb9713622dfc051ecd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b01abf3d222523d0db4f79c13ed45e7fef27e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b01abf3d222523d0db4f79c13ed45e7fef27e3", "html_url": "https://github.com/rust-lang/rust/commit/97b01abf3d222523d0db4f79c13ed45e7fef27e3"}], "stats": {"total": 201, "additions": 5, "deletions": 196}, "files": [{"sha": "6a7926fecde38676261b62428dea65d93cbe7a1e", "filename": "src/libcore/array.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -123,14 +123,6 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            impl<T:Copy> Clone for [T; $N] {\n-                fn clone(&self) -> [T; $N] {\n-                    *self\n-                }\n-            }\n-\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T: Hash> Hash for [T; $N] {\n                 fn hash<H: hash::Hasher>(&self, state: &mut H) {"}, {"sha": "826420a0c001c3b862b10855c7926841e8983714", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -88,7 +88,7 @@\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(stage0), lang = \"clone\")]\n+#[lang = \"clone\"]\n pub trait Clone : Sized {\n     /// Returns a copy of the value.\n     ///\n@@ -130,45 +130,3 @@ pub struct AssertParamIsClone<T: Clone + ?Sized> { _field: ::marker::PhantomData\n            reason = \"deriving hack, should not be public\",\n            issue = \"0\")]\n pub struct AssertParamIsCopy<T: Copy + ?Sized> { _field: ::marker::PhantomData<T> }\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-impl<'a, T: ?Sized> Clone for &'a T {\n-    /// Returns a shallow copy of the reference.\n-    #[inline]\n-    fn clone(&self) -> &'a T { *self }\n-}\n-\n-macro_rules! clone_impl {\n-    ($t:ty) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(stage0)]\n-        impl Clone for $t {\n-            /// Returns a deep copy of the value.\n-            #[inline]\n-            fn clone(&self) -> $t { *self }\n-        }\n-    }\n-}\n-\n-clone_impl! { isize }\n-clone_impl! { i8 }\n-clone_impl! { i16 }\n-clone_impl! { i32 }\n-clone_impl! { i64 }\n-clone_impl! { i128 }\n-\n-clone_impl! { usize }\n-clone_impl! { u8 }\n-clone_impl! { u16 }\n-clone_impl! { u32 }\n-clone_impl! { u64 }\n-clone_impl! { u128 }\n-\n-clone_impl! { f32 }\n-clone_impl! { f64 }\n-\n-clone_impl! { ! }\n-clone_impl! { () }\n-clone_impl! { bool }\n-clone_impl! { char }"}, {"sha": "ce183389a808331cb0fce1984a2c7f9021f23407", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -8,16 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_export]\n-// This stability attribute is totally useless.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-macro_rules! __rust_unstable_column {\n-    () => {\n-        column!()\n-    }\n-}\n-\n /// Entry point of thread panic, for details, see std::macros\n #[macro_export]\n #[allow_internal_unstable]"}, {"sha": "272d75da28939368f76d5eb1a9550d8d87667a4c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -188,26 +188,6 @@ pub fn forget<T>(t: T) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-pub fn size_of<T>() -> usize {\n-    unsafe { intrinsics::size_of::<T>() }\n-}\n-\n-/// Returns the size of a type in bytes.\n-///\n-/// More specifically, this is the offset in bytes between successive\n-/// items of the same type, including alignment padding.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::mem;\n-///\n-/// assert_eq!(4, mem::size_of::<i32>());\n-/// ```\n-#[inline]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(stage0))]\n pub const fn size_of<T>() -> usize {\n     unsafe { intrinsics::size_of::<T>() }\n }\n@@ -299,29 +279,6 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-pub fn align_of<T>() -> usize {\n-    unsafe { intrinsics::min_align_of::<T>() }\n-}\n-\n-/// Returns the [ABI]-required minimum alignment of a type.\n-///\n-/// Every reference to a value of the type `T` must be a multiple of this number.\n-///\n-/// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n-///\n-/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::mem;\n-///\n-/// assert_eq!(4, mem::align_of::<i32>());\n-/// ```\n-#[inline]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(not(stage0))]\n pub const fn align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }"}, {"sha": "43d38926c9718c37e6da208ed0a83c9702162932", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -10,8 +10,6 @@\n \n //! Operations and constants for 32-bits floats (`f32` type)\n \n-#![cfg_attr(stage0, allow(overflowing_literals))]\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use intrinsics;"}, {"sha": "2e42e0dfd550d3b04d5a67907f2807054e100c02", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -875,36 +875,9 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n     a == b\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-impl<T: ?Sized> Clone for *const T {\n-    #[inline]\n-    fn clone(&self) -> *const T {\n-        *self\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-impl<T: ?Sized> Clone for *mut T {\n-    #[inline]\n-    fn clone(&self) -> *mut T {\n-        *self\n-    }\n-}\n-\n // Impls for function pointers\n macro_rules! fnptr_impls_safety_abi {\n     ($FnTy: ty, $($Arg: ident),*) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(stage0)]\n-        impl<Ret, $($Arg),*> Clone for $FnTy {\n-            #[inline]\n-            fn clone(&self) -> Self {\n-                *self\n-            }\n-        }\n-\n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> PartialEq for $FnTy {\n             #[inline]"}, {"sha": "4c5370194fecb240bdc9c3bea065db15381dce4f", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -21,14 +21,6 @@ macro_rules! tuple_impls {\n         }\n     )+) => {\n         $(\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            impl<$($T:Clone),+> Clone for ($($T,)+) {\n-                fn clone(&self) -> ($($T,)+) {\n-                    ($(self.$idx.clone(),)+)\n-                }\n-            }\n-\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]"}, {"sha": "72d561fae3bd9c249cdc2c7e563436f3e831e97b", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -14,16 +14,6 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-#[macro_export]\n-// This stability attribute is totally useless.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-macro_rules! __rust_unstable_column {\n-    () => {\n-        column!()\n-    }\n-}\n-\n /// The entry point for panic of Rust threads.\n ///\n /// This allows a program to to terminate immediately and provide feedback"}, {"sha": "80ce15944a5c374cdcb99322bc998ee2880a4f0c", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -522,40 +522,6 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n     begin_panic(s, file_line_col)\n }\n \n-// FIXME: In PR #42938, we have added the column as info passed to the panic\n-// handling code. For this, we want to break the ABI of begin_panic.\n-// This is not possible to do directly, as the stage0 compiler is hardcoded\n-// to emit a call to begin_panic in src/libsyntax/ext/build.rs, only\n-// with the file and line number being passed, but not the colum number.\n-// By changing the compiler source, we can only affect behaviour of higher\n-// stages. We need to perform the switch over two stage0 replacements, using\n-// a temporary function begin_panic_new while performing the switch:\n-// 0. Before the current switch, we told stage1 onward to emit a call\n-//    to begin_panic_new.\n-// 1. Right now, stage0 calls begin_panic_new with the new ABI,\n-//    begin_panic stops being used. We have changed begin_panic to\n-//    the new ABI, and started to emit calls to begin_panic in higher\n-//    stages again, this time with the new ABI.\n-// 2. After the second SNAP, stage0 calls begin_panic with the new ABI,\n-//    and we can remove the temporary begin_panic_new function.\n-\n-/// This is the entry point of panicking for panic!() and assert!().\n-#[cfg(stage0)]\n-#[unstable(feature = \"libstd_sys_internals\",\n-           reason = \"used by the panic! macro\",\n-           issue = \"0\")]\n-#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-pub fn begin_panic_new<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n-    // Note that this should be the only allocation performed in this code path.\n-    // Currently this means that panic!() on OOM will invoke this code path,\n-    // but then again we're not really ready for panic on OOM anyway. If\n-    // we do start doing this, then we should propagate this allocation to\n-    // be performed in the parent of this thread instead of the thread that's\n-    // panicking.\n-\n-    rust_panic_with_hook(Box::new(msg), file_line_col)\n-}\n-\n /// This is the entry point of panicking for panic!() and assert!().\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\","}, {"sha": "06fd838ea06d966b047f8e1a257d1acd253433cd", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -25,8 +25,6 @@\n \n \n // Reexport some of our utilities which are expected by other crates.\n-#[cfg(stage0)]\n-pub use panicking::begin_panic_new;\n pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n #[cfg(not(test))]"}, {"sha": "02347bf4906a6c21f475ade14a88ed791b693911", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -157,7 +157,7 @@ macro_rules! thread_local {\n            issue = \"0\")]\n #[macro_export]\n #[allow_internal_unstable]\n-#[cfg_attr(not(stage0), allow_internal_unsafe)]\n+#[allow_internal_unsafe]\n macro_rules! __thread_local_inner {\n     ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $init:expr) => {\n         $(#[$attr])* $vis static $name: $crate::thread::LocalKey<$t> = {\n@@ -394,9 +394,6 @@ pub mod fast {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    unsafe impl<T> ::marker::Sync for Key<T> { }\n-\n     impl<T> Key<T> {\n         pub const fn new() -> Key<T> {\n             Key {"}, {"sha": "67cb282c09d5005f3c1f8d2c992d8134f0591a84", "filename": "src/stage0.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -12,9 +12,9 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2017-07-18\n-rustc: beta\n-cargo: beta\n+date: 2017-08-25\n+rustc: nightly\n+cargo: nightly\n \n # When making a stable release the process currently looks like:\n #"}, {"sha": "7011d7f64e786a9d60ea0b08b53790877d36743c", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2972687d10408851e1c570cb9713622dfc051ecd/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2972687d10408851e1c570cb9713622dfc051ecd/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=2972687d10408851e1c570cb9713622dfc051ecd", "patch": "@@ -65,11 +65,9 @@ const EXCEPTION_PATHS: &'static [&'static str] = &[\n     \"src/rtstartup\", // Not sure what to do about this. magic stuff for mingw\n \n     // temporary exceptions\n-    \"src/libstd/rtdeps.rs\", // Until rustbuild replaces make\n     \"src/libstd/path.rs\",\n     \"src/libstd/f32.rs\",\n     \"src/libstd/f64.rs\",\n-    \"src/libstd/lib.rs\", // Until next stage0 snapshot bump\n     \"src/libstd/sys_common/mod.rs\",\n     \"src/libstd/sys_common/net.rs\",\n     \"src/libterm\", // Not sure how to make this crate portable, but test needs it"}]}