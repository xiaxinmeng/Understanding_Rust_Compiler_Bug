{"sha": "a15dda48c696cb14d490ee91f40949d5cd538aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNWRkYTQ4YzY5NmNiMTRkNDkwZWU5MWY0MDk0OWQ1Y2Q1MzhhYmE=", "commit": {"author": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-11-15T16:43:14Z"}, "committer": {"name": "Roland Ruckerbauer", "email": "roland.rucky@gmail.com", "date": "2020-11-15T16:43:14Z"}, "message": "format string highlighting: handle hex + debug type specifier", "tree": {"sha": "dea06f18c2047a9616deabd347206e6bd3be03d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea06f18c2047a9616deabd347206e6bd3be03d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15dda48c696cb14d490ee91f40949d5cd538aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15dda48c696cb14d490ee91f40949d5cd538aba", "html_url": "https://github.com/rust-lang/rust/commit/a15dda48c696cb14d490ee91f40949d5cd538aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15dda48c696cb14d490ee91f40949d5cd538aba/comments", "author": null, "committer": null, "parents": [{"sha": "e8c803937ce23a6cf74583ad03f9868869c7eea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c803937ce23a6cf74583ad03f9868869c7eea1", "html_url": "https://github.com/rust-lang/rust/commit/e8c803937ce23a6cf74583ad03f9868869c7eea1"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "d398e1ec85bef0652bd7716a01e709fe1918bcea", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a15dda48c696cb14d490ee91f40949d5cd538aba/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/a15dda48c696cb14d490ee91f40949d5cd538aba/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=a15dda48c696cb14d490ee91f40949d5cd538aba", "patch": "@@ -93,4 +93,6 @@\n \n     <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+\n+    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"punctuation\">,</span> thingy<span class=\"punctuation\">,</span> n2<span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "1dc018a167bbbea9fa8da1fb31d19304a728cf09", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a15dda48c696cb14d490ee91f40949d5cd538aba/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15dda48c696cb14d490ee91f40949d5cd538aba/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=a15dda48c696cb14d490ee91f40949d5cd538aba", "patch": "@@ -340,6 +340,8 @@ fn main() {\n \n     println!(\"{\\x41}\", A = 92);\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n+\n+    println!(\"{:x?} {} \", thingy, n2);\n }\"#\n         .trim(),\n         expect_file![\"./test_data/highlight_strings.html\"],"}, {"sha": "ac03264205a087ebd9cfd4df92d7c8e0dcbff3dd", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a15dda48c696cb14d490ee91f40949d5cd538aba/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15dda48c696cb14d490ee91f40949d5cd538aba/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=a15dda48c696cb14d490ee91f40949d5cd538aba", "patch": "@@ -331,10 +331,22 @@ pub trait HasFormatSpecifier: AstToken {\n                             }\n                             c if c == '_' || c.is_alphabetic() => {\n                                 read_identifier(&mut chars, &mut callback);\n+\n+                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n+                                    == Some('?')\n+                                {\n+                                    skip_char_and_emit(\n+                                        &mut chars,\n+                                        FormatSpecifier::QuestionMark,\n+                                        &mut callback,\n+                                    );\n+                                }\n+\n                                 // can be either width (indicated by dollar sign, or type in which case\n                                 // the next sign has to be `}`)\n                                 let next =\n                                     chars.peek().and_then(|next| next.1.as_ref().ok()).copied();\n+\n                                 match next {\n                                     Some('$') => skip_char_and_emit(\n                                         &mut chars,\n@@ -417,6 +429,16 @@ pub trait HasFormatSpecifier: AstToken {\n                             }\n                             c if c == '_' || c.is_alphabetic() => {\n                                 read_identifier(&mut chars, &mut callback);\n+\n+                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n+                                    == Some('?')\n+                                {\n+                                    skip_char_and_emit(\n+                                        &mut chars,\n+                                        FormatSpecifier::QuestionMark,\n+                                        &mut callback,\n+                                    );\n+                                }\n                             }\n                             _ => {}\n                         }"}]}