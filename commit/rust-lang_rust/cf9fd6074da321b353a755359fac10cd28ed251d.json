{"sha": "cf9fd6074da321b353a755359fac10cd28ed251d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOWZkNjA3NGRhMzIxYjM1M2E3NTUzNTlmYWMxMGNkMjhlZDI1MWQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-19T10:47:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-19T10:47:04Z"}, "message": "Rollup merge of #56363 - Lucretiel:patch-3, r=shepmaster\n\nDefactored Bytes::read\n\nRemoved unneeded refactoring of read_one_byte, which removed the unneeded dynamic dispatch (`dyn Read`) used by that function.\n\nThis function is only used in one place in the entire Rust codebase; there doesn't seem to be a reason for it to exist (and there especially doesn't seem to be a reason for it to use dynamic dispatch)", "tree": {"sha": "3d91966504b019e969eff6562c053a904629114b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d91966504b019e969eff6562c053a904629114b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf9fd6074da321b353a755359fac10cd28ed251d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGiGoCRBK7hj4Ov3rIwAAdHIIADdrftIZaQ2MTV64P2HCzitq\nUsRImlAV5ltuKJAMU5XThtnuK7PkGrSgBYuJtPzJk93/8cq0WeMQOc6/3TNNxBRx\n/kzv3rnqVpffyPJT0Lq2cmjwzemrxcI+sVqBxfrnCrK17r5/Vw94V0xmIk+pCRDX\n7poPri9IH2hi6TEMW1GalwIy7wFWhvqmvIN0k/xE/DADylRsTJ+wFTbgHwgQD/pU\n5Ko78AP0/8SKa3VMV3Y7YZH2rHWIVA5zdzVHIykh+oUsFfBHfeQKKFTxCiT7v7e/\ntLh9TWqXBjUXuC4ihcO608WmupAPIfVOptMKnIx0Z2etYUkoDXJ4vkDLW8sQCvQ=\n=ddzC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d91966504b019e969eff6562c053a904629114b\nparent e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2\nparent a1790e8c200335b6f41f09bb7c7d17bd65b43f8a\nauthor Pietro Albini <pietro@pietroalbini.org> 1545216424 +0100\ncommitter GitHub <noreply@github.com> 1545216424 +0100\n\nRollup merge of #56363 - Lucretiel:patch-3, r=shepmaster\n\nDefactored Bytes::read\n\nRemoved unneeded refactoring of read_one_byte, which removed the unneeded dynamic dispatch (`dyn Read`) used by that function.\n\nThis function is only used in one place in the entire Rust codebase; there doesn't seem to be a reason for it to exist (and there especially doesn't seem to be a reason for it to use dynamic dispatch)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9fd6074da321b353a755359fac10cd28ed251d", "html_url": "https://github.com/rust-lang/rust/commit/cf9fd6074da321b353a755359fac10cd28ed251d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf9fd6074da321b353a755359fac10cd28ed251d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "html_url": "https://github.com/rust-lang/rust/commit/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2"}, {"sha": "a1790e8c200335b6f41f09bb7c7d17bd65b43f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1790e8c200335b6f41f09bb7c7d17bd65b43f8a", "html_url": "https://github.com/rust-lang/rust/commit/a1790e8c200335b6f41f09bb7c7d17bd65b43f8a"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "5137a9432ae0cf0a6fa04be8f7a0238e176a35a4", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf9fd6074da321b353a755359fac10cd28ed251d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9fd6074da321b353a755359fac10cd28ed251d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=cf9fd6074da321b353a755359fac10cd28ed251d", "patch": "@@ -271,6 +271,7 @@\n \n use cmp;\n use fmt;\n+use slice;\n use str;\n use memchr;\n use ptr;\n@@ -1936,18 +1937,6 @@ impl<T: BufRead> BufRead for Take<T> {\n     }\n }\n \n-fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {\n-    let mut buf = [0];\n-    loop {\n-        return match reader.read(&mut buf) {\n-            Ok(0) => None,\n-            Ok(..) => Some(Ok(buf[0])),\n-            Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n-            Err(e) => Some(Err(e)),\n-        };\n-    }\n-}\n-\n /// An iterator over `u8` values of a reader.\n ///\n /// This struct is generally created by calling [`bytes`] on a reader.\n@@ -1965,7 +1954,15 @@ impl<R: Read> Iterator for Bytes<R> {\n     type Item = Result<u8>;\n \n     fn next(&mut self) -> Option<Result<u8>> {\n-        read_one_byte(&mut self.inner)\n+        let mut byte = 0;\n+        loop {\n+            return match self.inner.read(slice::from_mut(&mut byte)) {\n+                Ok(0) => None,\n+                Ok(..) => Some(Ok(byte)),\n+                Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n+                Err(e) => Some(Err(e)),\n+            };\n+        }\n     }\n }\n "}]}