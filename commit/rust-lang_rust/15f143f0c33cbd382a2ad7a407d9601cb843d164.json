{"sha": "15f143f0c33cbd382a2ad7a407d9601cb843d164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZjE0M2YwYzMzY2JkMzgyYTJhZDdhNDA3ZDk2MDFjYjg0M2QxNjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-03T14:02:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-03T14:02:23Z"}, "message": "Merge #2468\n\n2468: Fix #2467 r=flodiebold a=flodiebold\n\nThe stand-alone `unify` requires that the type doesn't contain any type\r\nvariables. So we can't share the code here for now (without more refactoring)...\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "0a357e2d3333a06e37f5cb8d6613733c1c0c78ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a357e2d3333a06e37f5cb8d6613733c1c0c78ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15f143f0c33cbd382a2ad7a407d9601cb843d164", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5mrvCRBK7hj4Ov3rIwAAdHIIAGsv+KUPzh0YlfouahgS97s1\nkC4oM0rmPKv2eClNs1y4D2YISWzaczkm4F04fIGcKTKnqsQtYnR7osbdS0MDYcYn\nFN11bze5IrOgj736+6vtB8wb9sILfU8720HFmK19mASD/8r4uNVjHWrLMVqTUvCn\np5pf3j/uYqmjTalMZLlBvWiToxhy/BHxGt+DA5Uu+Uq4YRGc7nq466Uw7ad6uMvA\nRDMGQ7PTyfdEfWrJ8CQq19P32U0cPPU+nlOUgG84zIhNJQck6nOhkKTBy0VUiFHo\nuV0exBmAC6R6cGuskkiNhMpwp1m7WqvI62jwt+v4hZnW1QH0uxO3evUmeUaXoKA=\n=VObb\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a357e2d3333a06e37f5cb8d6613733c1c0c78ac\nparent ba4f7fa02f746e5bb3efdaa06c2b35beaa4e3440\nparent e4add45951511f9afe348bf6066a724deb0d3ccf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1575381743 +0000\ncommitter GitHub <noreply@github.com> 1575381743 +0000\n\nMerge #2468\n\n2468: Fix #2467 r=flodiebold a=flodiebold\n\nThe stand-alone `unify` requires that the type doesn't contain any type\r\nvariables. So we can't share the code here for now (without more refactoring)...\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15f143f0c33cbd382a2ad7a407d9601cb843d164", "html_url": "https://github.com/rust-lang/rust/commit/15f143f0c33cbd382a2ad7a407d9601cb843d164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15f143f0c33cbd382a2ad7a407d9601cb843d164/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba4f7fa02f746e5bb3efdaa06c2b35beaa4e3440", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4f7fa02f746e5bb3efdaa06c2b35beaa4e3440", "html_url": "https://github.com/rust-lang/rust/commit/ba4f7fa02f746e5bb3efdaa06c2b35beaa4e3440"}, {"sha": "e4add45951511f9afe348bf6066a724deb0d3ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4add45951511f9afe348bf6066a724deb0d3ccf", "html_url": "https://github.com/rust-lang/rust/commit/e4add45951511f9afe348bf6066a724deb0d3ccf"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "37db005ea5fabd9543213e61d0342d0e1b27ac98", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=15f143f0c33cbd382a2ad7a407d9601cb843d164", "patch": "@@ -1,5 +1,7 @@\n //! Path expression resolution.\n \n+use std::iter;\n+\n use hir_def::{\n     path::{Path, PathKind, PathSegment},\n     resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n@@ -207,7 +209,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 };\n                 let substs = match container {\n                     ContainerId::ImplId(impl_id) => {\n-                        method_resolution::inherent_impl_substs(self.db, impl_id, &ty)\n+                        let impl_substs = Substs::build_for_def(self.db, impl_id)\n+                            .fill(iter::repeat_with(|| self.table.new_type_var()))\n+                            .build();\n+                        let impl_self_ty = self.db.impl_self_ty(impl_id).subst(&impl_substs);\n+                        let substs = Substs::build_for_def(self.db, item)\n+                            .use_parent_substs(&impl_substs)\n+                            .fill_with_params()\n+                            .build();\n+                        self.unify(&impl_self_ty, &ty);\n+                        Some(substs)\n                     }\n                     ContainerId::TraitId(trait_) => {\n                         // we're picking this method"}, {"sha": "fe05642ae3d8e4c6f11a427e0e5a58f2bf25f9e9", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=15f143f0c33cbd382a2ad7a407d9601cb843d164", "patch": "@@ -167,12 +167,12 @@ impl<T> Canonicalized<T> {\n     }\n }\n \n-pub fn unify(ty1: Canonical<&Ty>, ty2: &Ty) -> Option<Substs> {\n+pub fn unify(ty1: &Canonical<Ty>, ty2: &Canonical<Ty>) -> Option<Substs> {\n     let mut table = InferenceTable::new();\n     let vars =\n         Substs::builder(ty1.num_vars).fill(std::iter::repeat_with(|| table.new_type_var())).build();\n     let ty_with_vars = ty1.value.clone().subst_bound_vars(&vars);\n-    if !table.unify(&ty_with_vars, ty2) {\n+    if !table.unify(&ty_with_vars, &ty2.value) {\n         return None;\n     }\n     Some("}, {"sha": "7220d6e0a7e7e167c5242a1b5be00a1099a5ec94", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=15f143f0c33cbd382a2ad7a407d9601cb843d164", "patch": "@@ -437,12 +437,12 @@ fn is_valid_candidate(\n pub(crate) fn inherent_impl_substs(\n     db: &impl HirDatabase,\n     impl_id: ImplId,\n-    self_ty: &Ty,\n+    self_ty: &Canonical<Ty>,\n ) -> Option<Substs> {\n     let vars = Substs::build_for_def(db, impl_id).fill_with_bound_vars(0).build();\n     let self_ty_with_vars = db.impl_self_ty(impl_id).subst(&vars);\n-    let self_ty_with_vars = Canonical { num_vars: vars.len(), value: &self_ty_with_vars };\n-    super::infer::unify(self_ty_with_vars, self_ty)\n+    let self_ty_with_vars = Canonical { num_vars: vars.len(), value: self_ty_with_vars };\n+    super::infer::unify(&self_ty_with_vars, self_ty)\n }\n \n fn transform_receiver_ty(\n@@ -455,7 +455,7 @@ fn transform_receiver_ty(\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n-        hir_def::ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty.value)?,\n+        hir_def::ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n         hir_def::ContainerId::ModuleId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());"}, {"sha": "2ea9e261cd8a0dcf040497a37f7a60002611ef0c", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=15f143f0c33cbd382a2ad7a407d9601cb843d164", "patch": "@@ -4820,6 +4820,53 @@ fn test<T, U>() where T: Trait<U::Item>, U: Trait<T::Item> {\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn bug_2467() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn foo(self) -> T;\n+}\n+fn test() {\n+    // needs to nest multiple times for variable indices to get high enough\n+    let a = S::foo(S(1));\n+    let b = S::foo(S(a));\n+    let c = S::foo(S(b));\n+    let d: u32 = S::foo(S(c));\n+}\n+\"#),\n+        @r###\"\n+    [43; 47) 'self': S<T>\n+    [67; 255) '{     ...c)); }': ()\n+    [153; 154) 'a': u32\n+    [157; 163) 'S::foo': fn foo<u32>(S<T>) -> T\n+    [157; 169) 'S::foo(S(1))': u32\n+    [164; 165) 'S': S<u32>(T) -> S<T>\n+    [164; 168) 'S(1)': S<u32>\n+    [166; 167) '1': u32\n+    [179; 180) 'b': u32\n+    [183; 189) 'S::foo': fn foo<u32>(S<T>) -> T\n+    [183; 195) 'S::foo(S(a))': u32\n+    [190; 191) 'S': S<u32>(T) -> S<T>\n+    [190; 194) 'S(a)': S<u32>\n+    [192; 193) 'a': u32\n+    [205; 206) 'c': u32\n+    [209; 215) 'S::foo': fn foo<u32>(S<T>) -> T\n+    [209; 221) 'S::foo(S(b))': u32\n+    [216; 217) 'S': S<u32>(T) -> S<T>\n+    [216; 220) 'S(b)': S<u32>\n+    [218; 219) 'b': u32\n+    [231; 232) 'd': u32\n+    [240; 246) 'S::foo': fn foo<u32>(S<T>) -> T\n+    [240; 252) 'S::foo(S(c))': u32\n+    [247; 248) 'S': S<u32>(T) -> S<T>\n+    [247; 251) 'S(c)': S<u32>\n+    [249; 250) 'c': u32\n+    \"###\n+    );\n+}\n+\n fn type_at_pos(db: &TestDB, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}]}