{"sha": "0fd75c98ac81c9f6581712ec8802940e547315e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZDc1Yzk4YWM4MWM5ZjY1ODE3MTJlYzg4MDI5NDBlNTQ3MzE1ZTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-27T13:30:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-27T13:30:06Z"}, "message": "Merge #7047\n\n7047: Add force_show_panics flag for proc-macro bridge r=jonas-schievink a=edwin0cheng\n\nhttps://github.com/rust-lang/rust/pull/75082 and https://github.com/rust-lang/rust/pull/76292 added a new flag in `proc_macro::Bridge` such that the ABI was changed. These ABI changing are the reason of some weird panics which caused #6880 and maybe related to the panic mentioned in #6820.\r\n\r\nThese changes are landed on rust stable 1.48 so I think it is okay to apply it now.\r\n\r\nfixes #6880\r\n\r\nr @jonas-schievink \r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "7d7dc80327900207912b1d4e952c012d4dd403b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7dc80327900207912b1d4e952c012d4dd403b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fd75c98ac81c9f6581712ec8802940e547315e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6IxeCRBK7hj4Ov3rIwAAdHIIAHi3f4TCjrxZipsUCsOxuqQZ\n7i5c/YM2SCja2n4w8Uji/EJQcUPeOqMPoCkg4+d80IlStwEndQAYmtrHrJ3IMbcB\nzqBY9p9QS4tJ9HjwwuhDPwUNcF3qJ65HE51UZEbZpgDKTQPIhdIrQnn8X1v19bxJ\nGmbJ4/P27vn57aiG4LsKr6Wah4ggfl0j44J/fahC34mH4LgOBACD6YvMZdbyu4U9\ndXO2cwEv8lYeA2vUhv+vZIj3c+fXi34oIUamwEY8w4JVKP/GRLWCnINvEwNL3UYk\n6ubSwbMCwC2DbwqjYKEWVFyL8/eg8Cijw1FwOfDT60RAsDIXqgbMzmzDnh1Xeoo=\n=msGm\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d7dc80327900207912b1d4e952c012d4dd403b7\nparent 1d874a2a65278548a781c6cc518ae7dd7c741229\nparent da92f46cc8b5fc7e45cd35117ca4cb0cff80405e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609075806 +0000\ncommitter GitHub <noreply@github.com> 1609075806 +0000\n\nMerge #7047\n\n7047: Add force_show_panics flag for proc-macro bridge r=jonas-schievink a=edwin0cheng\n\nhttps://github.com/rust-lang/rust/pull/75082 and https://github.com/rust-lang/rust/pull/76292 added a new flag in `proc_macro::Bridge` such that the ABI was changed. These ABI changing are the reason of some weird panics which caused #6880 and maybe related to the panic mentioned in #6820.\r\n\r\nThese changes are landed on rust stable 1.48 so I think it is okay to apply it now.\r\n\r\nfixes #6880\r\n\r\nr @jonas-schievink \r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd75c98ac81c9f6581712ec8802940e547315e3", "html_url": "https://github.com/rust-lang/rust/commit/0fd75c98ac81c9f6581712ec8802940e547315e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fd75c98ac81c9f6581712ec8802940e547315e3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d874a2a65278548a781c6cc518ae7dd7c741229", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d874a2a65278548a781c6cc518ae7dd7c741229", "html_url": "https://github.com/rust-lang/rust/commit/1d874a2a65278548a781c6cc518ae7dd7c741229"}, {"sha": "da92f46cc8b5fc7e45cd35117ca4cb0cff80405e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da92f46cc8b5fc7e45cd35117ca4cb0cff80405e", "html_url": "https://github.com/rust-lang/rust/commit/da92f46cc8b5fc7e45cd35117ca4cb0cff80405e"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "4e719f3aa0f14a881241bc4d23b91c815feff842", "filename": "crates/proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fdylib.rs?ref=0fd75c98ac81c9f6581712ec8802940e547315e3", "patch": "@@ -136,6 +136,7 @@ impl Expander {\n                         &crate::proc_macro::bridge::server::SameThread,\n                         crate::rustc_server::Rustc::default(),\n                         parsed_body,\n+                        false,\n                     );\n                     return res.map(|it| it.subtree);\n                 }\n@@ -144,6 +145,7 @@ impl Expander {\n                         &crate::proc_macro::bridge::server::SameThread,\n                         crate::rustc_server::Rustc::default(),\n                         parsed_body,\n+                        false,\n                     );\n                     return res.map(|it| it.subtree);\n                 }\n@@ -153,6 +155,7 @@ impl Expander {\n                         crate::rustc_server::Rustc::default(),\n                         parsed_attributes,\n                         parsed_body,\n+                        false,\n                     );\n                     return res.map(|it| it.subtree);\n                 }"}, {"sha": "ca6749b9bc72b745a1fe850def63545df3447933", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/client.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fclient.rs?ref=0fd75c98ac81c9f6581712ec8802940e547315e3", "patch": "@@ -303,17 +303,21 @@ impl BridgeState<'_> {\n \n impl Bridge<'_> {\n     fn enter<R>(self, f: impl FnOnce() -> R) -> R {\n+        let force_show_panics = self.force_show_panics;\n+\n         // Hide the default panic output within `proc_macro` expansions.\n         // NB. the server can't do this because it may use a different libstd.\n         static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();\n         HIDE_PANICS_DURING_EXPANSION.call_once(|| {\n             let prev = panic::take_hook();\n             panic::set_hook(Box::new(move |info| {\n-                let hide = BridgeState::with(|state| match state {\n-                    BridgeState::NotConnected => false,\n-                    BridgeState::Connected(_) | BridgeState::InUse => true,\n+                let show = BridgeState::with(|state| match state {\n+                    BridgeState::NotConnected => true,\n+                    // Something weird is going on, so don't suppress any backtraces\n+                    BridgeState::InUse => true,\n+                    BridgeState::Connected(bridge) => force_show_panics,\n                 });\n-                if !hide {\n+                if show {\n                     prev(info)\n                 }\n             }));"}, {"sha": "e4006a5ab0c12b63749eae2734a3971b9aac1239", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fmod.rs?ref=0fd75c98ac81c9f6581712ec8802940e547315e3", "patch": "@@ -225,6 +225,9 @@ pub struct Bridge<'a> {\n \n     /// Server-side function that the client uses to make requests.\n     dispatch: closure::Closure<'a, Buffer<u8>, Buffer<u8>>,\n+\n+    /// If 'true', always invoke the default panic hook\n+    force_show_panics: bool,\n }\n \n // impl<'a> !Sync for Bridge<'a> {}"}, {"sha": "88fbdc078cba26c232bc30ee24fba34b33c17fd6", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/server.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd75c98ac81c9f6581712ec8802940e547315e3/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Fserver.rs?ref=0fd75c98ac81c9f6581712ec8802940e547315e3", "patch": "@@ -138,6 +138,7 @@ pub trait ExecutionStrategy {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8>;\n }\n \n@@ -150,10 +151,14 @@ impl ExecutionStrategy for SameThread {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8> {\n         let mut dispatch = |b| dispatcher.dispatch(b);\n \n-        run_client(Bridge { cached_buffer: input, dispatch: (&mut dispatch).into() }, client_data)\n+        run_client(\n+            Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },\n+            client_data,\n+        )\n     }\n }\n \n@@ -169,6 +174,7 @@ impl ExecutionStrategy for CrossThread1 {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8> {\n         use std::sync::mpsc::channel;\n \n@@ -182,7 +188,11 @@ impl ExecutionStrategy for CrossThread1 {\n             };\n \n             run_client(\n-                Bridge { cached_buffer: input, dispatch: (&mut dispatch).into() },\n+                Bridge {\n+                    cached_buffer: input,\n+                    dispatch: (&mut dispatch).into(),\n+                    force_show_panics,\n+                },\n                 client_data,\n             )\n         });\n@@ -204,6 +214,7 @@ impl ExecutionStrategy for CrossThread2 {\n         input: Buffer<u8>,\n         run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n+        force_show_panics: bool,\n     ) -> Buffer<u8> {\n         use std::sync::{Arc, Mutex};\n \n@@ -229,7 +240,11 @@ impl ExecutionStrategy for CrossThread2 {\n             };\n \n             let r = run_client(\n-                Bridge { cached_buffer: input, dispatch: (&mut dispatch).into() },\n+                Bridge {\n+                    cached_buffer: input,\n+                    dispatch: (&mut dispatch).into(),\n+                    force_show_panics,\n+                },\n                 client_data,\n             );\n \n@@ -268,14 +283,21 @@ fn run_server<\n     input: I,\n     run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n     client_data: D,\n+    force_show_panics: bool,\n ) -> Result<O, PanicMessage> {\n     let mut dispatcher =\n         Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };\n \n     let mut b = Buffer::new();\n     input.encode(&mut b, &mut dispatcher.handle_store);\n \n-    b = strategy.run_bridge_and_client(&mut dispatcher, b, run_client, client_data);\n+    b = strategy.run_bridge_and_client(\n+        &mut dispatcher,\n+        b,\n+        run_client,\n+        client_data,\n+        force_show_panics,\n+    );\n \n     Result::decode(&mut &b[..], &mut dispatcher.handle_store)\n }\n@@ -286,6 +308,7 @@ impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {\n         strategy: &impl ExecutionStrategy,\n         server: S,\n         input: S::TokenStream,\n+        force_show_panics: bool,\n     ) -> Result<S::TokenStream, PanicMessage> {\n         let client::Client { get_handle_counters, run, f } = *self;\n         run_server(\n@@ -295,6 +318,7 @@ impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {\n             <MarkedTypes<S> as Types>::TokenStream::mark(input),\n             run,\n             f,\n+            force_show_panics,\n         )\n         .map(<MarkedTypes<S> as Types>::TokenStream::unmark)\n     }\n@@ -307,6 +331,7 @@ impl client::Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenSt\n         server: S,\n         input: S::TokenStream,\n         input2: S::TokenStream,\n+        force_show_panics: bool,\n     ) -> Result<S::TokenStream, PanicMessage> {\n         let client::Client { get_handle_counters, run, f } = *self;\n         run_server(\n@@ -319,6 +344,7 @@ impl client::Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenSt\n             ),\n             run,\n             f,\n+            force_show_panics,\n         )\n         .map(<MarkedTypes<S> as Types>::TokenStream::unmark)\n     }"}]}