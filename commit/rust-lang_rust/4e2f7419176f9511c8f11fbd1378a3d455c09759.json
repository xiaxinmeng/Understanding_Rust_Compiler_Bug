{"sha": "4e2f7419176f9511c8f11fbd1378a3d455c09759", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMmY3NDE5MTc2Zjk1MTFjOGYxMWZiZDEzNzhhM2Q0NTVjMDk3NTk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-11-09T02:46:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-09T02:46:23Z"}, "message": "Merge pull request #3175 from kestred/kstenerson/delimited-overflow\n\nAdd config option to more aggressively allow overflow", "tree": {"sha": "640537a5eb3fc6983e3e50c02811cf877a24bbf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/640537a5eb3fc6983e3e50c02811cf877a24bbf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e2f7419176f9511c8f11fbd1378a3d455c09759", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb5PT/CRBK7hj4Ov3rIwAAdHIIAG8HPTTOiIoj8rj3pyjs0p6b\n9IZ3NDO25g5nqISvC8TZ7MEELLgHaCDlWcSHCK8I0WV+NwGGcx3SoJMW5+7+2ub5\n8fEKddrYfWBTeog3hgIyNy8ikbGha2dj01F5EU20TYbAEJ87jjpIVXUDPzdwSYlF\nu85//L3ACIoo2HVn2ep3+7ntSprBbH2yxSbPRGrgZLBDFuer2NgifmrZWZh79e3h\nUSSZFM5m6S/vgfPByTJtKU2rTdI8bjV56nbDh8iNW9/2EnBJKMxOG+RTyCwozbE9\ndSDswyxNC5McDl9baxqabRypHXzaDDYJ5RgkNeT/r3vY4ExPOR/zMs1PxHhfbOY=\n=eMbg\n-----END PGP SIGNATURE-----\n", "payload": "tree 640537a5eb3fc6983e3e50c02811cf877a24bbf1\nparent 6efc96324556d9d2bd0a60b652831e655f335d58\nparent 3330e6717eec179b57a004e81403d007007afee3\nauthor Nick Cameron <nrc@ncameron.org> 1541731583 +1300\ncommitter GitHub <noreply@github.com> 1541731583 +1300\n\nMerge pull request #3175 from kestred/kstenerson/delimited-overflow\n\nAdd config option to more aggressively allow overflow"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2f7419176f9511c8f11fbd1378a3d455c09759", "html_url": "https://github.com/rust-lang/rust/commit/4e2f7419176f9511c8f11fbd1378a3d455c09759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e2f7419176f9511c8f11fbd1378a3d455c09759/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6efc96324556d9d2bd0a60b652831e655f335d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6efc96324556d9d2bd0a60b652831e655f335d58", "html_url": "https://github.com/rust-lang/rust/commit/6efc96324556d9d2bd0a60b652831e655f335d58"}, {"sha": "3330e6717eec179b57a004e81403d007007afee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3330e6717eec179b57a004e81403d007007afee3", "html_url": "https://github.com/rust-lang/rust/commit/3330e6717eec179b57a004e81403d007007afee3"}], "stats": {"total": 394, "additions": 384, "deletions": 10}, "files": [{"sha": "4d41fe52e3d332dea44916ae8a193756e6288db5", "filename": "Configurations.md", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4e2f7419176f9511c8f11fbd1378a3d455c09759/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/4e2f7419176f9511c8f11fbd1378a3d455c09759/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=4e2f7419176f9511c8f11fbd1378a3d455c09759", "patch": "@@ -2089,6 +2089,88 @@ fn main() {\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n \n+## `overflow_delimited_expr`\n+\n+When structs, slices, arrays, and block/array-like macros are used as the last\n+argument in an expression list, allow them to overflow (like blocks/closures)\n+instead of being indented on a new line.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `false` (default):\n+\n+```rust\n+fn example() {\n+    foo(ctx, |param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    foo(\n+        ctx,\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    foo(\n+        ctx,\n+        &[\n+            MAROON_TOMATOES,\n+            PURPLE_POTATOES,\n+            ORGANE_ORANGES,\n+            GREEN_PEARS,\n+            RED_APPLES,\n+        ],\n+    );\n+\n+    foo(\n+        ctx,\n+        vec![\n+            MAROON_TOMATOES,\n+            PURPLE_POTATOES,\n+            ORGANE_ORANGES,\n+            GREEN_PEARS,\n+            RED_APPLES,\n+        ],\n+    );\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+fn example() {\n+    foo(ctx, |param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    foo(ctx, Bar {\n+        x: value,\n+        y: value2,\n+    });\n+\n+    foo(ctx, &[\n+        MAROON_TOMATOES,\n+        PURPLE_POTATOES,\n+        ORGANE_ORANGES,\n+        GREEN_PEARS,\n+        RED_APPLES,\n+    ]);\n+\n+    foo(ctx, vec![\n+        MAROON_TOMATOES,\n+        PURPLE_POTATOES,\n+        ORGANE_ORANGES,\n+        GREEN_PEARS,\n+        RED_APPLES,\n+    ]);\n+}\n+```\n \n ## `blank_lines_upper_bound`\n "}, {"sha": "84d94fada7768523c3ff7eabb32107e44e15e183", "filename": "src/config/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e2f7419176f9511c8f11fbd1378a3d455c09759/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2f7419176f9511c8f11fbd1378a3d455c09759/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=4e2f7419176f9511c8f11fbd1378a3d455c09759", "patch": "@@ -88,8 +88,10 @@ create_config! {\n     // Misc.\n     remove_nested_parens: bool, true, true, \"Remove nested parens\";\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls\";\n-    struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n-                                             threshold\";\n+    overflow_delimited_expr: bool, false, false,\n+        \"Allow trailing bracket/brace delimited expressions to overflow\";\n+    struct_field_align_threshold: usize, 0, false,\n+        \"Align struct fields if their diffs fits within threshold\";\n     enum_discrim_align_threshold: usize, 0, false,\n         \"Align enum variants discrims, if their diffs fit within threshold\";\n     match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\"}, {"sha": "aea5fa5f96fe0f6a58d16a46e91c4c00372f48e4", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4e2f7419176f9511c8f11fbd1378a3d455c09759/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2f7419176f9511c8f11fbd1378a3d455c09759/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4e2f7419176f9511c8f11fbd1378a3d455c09759", "patch": "@@ -1340,15 +1340,28 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n         | ast::ExprKind::WhileLet(..) => {\n             context.config.combine_control_expr() && context.use_block_indent() && args_len == 1\n         }\n-        ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => {\n-            context.use_block_indent() || context.config.indent_style() == IndentStyle::Visual\n+\n+        // Handle always block-like expressions\n+        ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => true,\n+\n+        // Handle `[]` and `{}`-like expressions\n+        ast::ExprKind::Array(..) | ast::ExprKind::Struct(..) => {\n+            context.config.overflow_delimited_expr()\n+                || (context.use_block_indent() && args_len == 1)\n+        }\n+        ast::ExprKind::Mac(ref macro_) => {\n+            match (macro_.node.delim, context.config.overflow_delimited_expr()) {\n+                (ast::MacDelimiter::Bracket, true) | (ast::MacDelimiter::Brace, true) => true,\n+                _ => context.use_block_indent() && args_len == 1,\n+            }\n         }\n-        ast::ExprKind::Array(..)\n-        | ast::ExprKind::Call(..)\n-        | ast::ExprKind::Mac(..)\n-        | ast::ExprKind::MethodCall(..)\n-        | ast::ExprKind::Struct(..)\n-        | ast::ExprKind::Tup(..) => context.use_block_indent() && args_len == 1,\n+\n+        // Handle parenthetical expressions\n+        ast::ExprKind::Call(..) | ast::ExprKind::MethodCall(..) | ast::ExprKind::Tup(..) => {\n+            context.use_block_indent() && args_len == 1\n+        }\n+\n+        // Handle unary-like expressions\n         ast::ExprKind::AddrOf(_, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)"}, {"sha": "4a583fc1de838773582e434dbe6b292cb1e3ffcd", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e2f7419176f9511c8f11fbd1378a3d455c09759/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2f7419176f9511c8f11fbd1378a3d455c09759/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=4e2f7419176f9511c8f11fbd1378a3d455c09759", "patch": "@@ -404,6 +404,7 @@ impl<'a> Context<'a> {\n                             closures::rewrite_last_closure(self.context, expr, shape)\n                         }\n                     }\n+\n                     // When overflowing the expressions which consists of a control flow\n                     // expression, avoid condition to use multi line.\n                     ast::ExprKind::If(..)\n@@ -422,6 +423,7 @@ impl<'a> Context<'a> {\n                             expr.rewrite(self.context, shape)\n                         }\n                     }\n+\n                     _ => expr.rewrite(self.context, shape),\n                 }\n             }"}, {"sha": "cd80ca6fcebcc430cc1c930cfbbdc456c31ab1ff", "filename": "tests/source/expr-overflow-delimited.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/4e2f7419176f9511c8f11fbd1378a3d455c09759/tests%2Fsource%2Fexpr-overflow-delimited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2f7419176f9511c8f11fbd1378a3d455c09759/tests%2Fsource%2Fexpr-overflow-delimited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-overflow-delimited.rs?ref=4e2f7419176f9511c8f11fbd1378a3d455c09759", "patch": "@@ -0,0 +1,155 @@\n+// rustfmt-overflow_delimited_expr: true\n+\n+fn combine_blocklike() {\n+    do_thing(\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    do_thing(\n+        x,\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    do_thing(\n+        x,\n+\n+        // I'll be discussing the `action` with your para(m)legal counsel\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    do_thing(\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    do_thing(\n+        x,\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    do_thing(\n+        x,\n+\n+        // Let me tell you about that one time at the `Bar`\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    do_thing(\n+        &[\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+        &[\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+\n+        // Just admit it; my list is longer than can be folded on to one line\n+        &[\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        vec![\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+        vec![\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+\n+        // Just admit it; my list is longer than can be folded on to one line\n+        vec![\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+        (\n+            1,\n+            2,\n+            3,\n+            |param| {\n+                action();\n+                foo(param)\n+            },\n+        ),\n+    );\n+}\n+\n+fn combine_struct_sample() {\n+    let identity = verify(\n+        &ctx,\n+        VerifyLogin {\n+            type_: LoginType::Username,\n+            username: args.username.clone(),\n+            password: Some(args.password.clone()),\n+            domain: None,\n+        },\n+    )?;\n+}\n+\n+fn combine_macro_sample() {\n+    rocket::ignite()\n+        .mount(\n+            \"/\",\n+            routes![\n+                http::auth::login,\n+                http::auth::logout,\n+                http::cors::options,\n+                http::action::dance,\n+                http::action::sleep,\n+            ],\n+        )\n+        .launch();\n+}"}, {"sha": "b00e81fcd5a500df3145c87fe5ea34c110834ca7", "filename": "tests/target/expr-overflow-delimited.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4e2f7419176f9511c8f11fbd1378a3d455c09759/tests%2Ftarget%2Fexpr-overflow-delimited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e2f7419176f9511c8f11fbd1378a3d455c09759/tests%2Ftarget%2Fexpr-overflow-delimited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-overflow-delimited.rs?ref=4e2f7419176f9511c8f11fbd1378a3d455c09759", "patch": "@@ -0,0 +1,120 @@\n+// rustfmt-overflow_delimited_expr: true\n+\n+fn combine_blocklike() {\n+    do_thing(|param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    do_thing(x, |param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    do_thing(\n+        x,\n+        // I'll be discussing the `action` with your para(m)legal counsel\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    do_thing(Bar {\n+        x: value,\n+        y: value2,\n+    });\n+\n+    do_thing(x, Bar {\n+        x: value,\n+        y: value2,\n+    });\n+\n+    do_thing(\n+        x,\n+        // Let me tell you about that one time at the `Bar`\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    do_thing(&[\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(x, &[\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(\n+        x,\n+        // Just admit it; my list is longer than can be folded on to one line\n+        &[\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(vec![\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(x, vec![\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(\n+        x,\n+        // Just admit it; my list is longer than can be folded on to one line\n+        vec![\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+        (1, 2, 3, |param| {\n+            action();\n+            foo(param)\n+        }),\n+    );\n+}\n+\n+fn combine_struct_sample() {\n+    let identity = verify(&ctx, VerifyLogin {\n+        type_: LoginType::Username,\n+        username: args.username.clone(),\n+        password: Some(args.password.clone()),\n+        domain: None,\n+    })?;\n+}\n+\n+fn combine_macro_sample() {\n+    rocket::ignite()\n+        .mount(\"/\", routes![\n+            http::auth::login,\n+            http::auth::logout,\n+            http::cors::options,\n+            http::action::dance,\n+            http::action::sleep,\n+        ])\n+        .launch();\n+}"}]}