{"sha": "fc9650b1467a7388e60838ddbeb1755d5fe149b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTY1MGIxNDY3YTczODhlNjA4MzhkZGJlYjE3NTVkNWZlMTQ5YjU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-29T02:55:44Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-29T03:41:56Z"}, "message": "testsuite: De-record most bench tests", "tree": {"sha": "f95331937a7159dd0289bb01a648c793627fb4b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95331937a7159dd0289bb01a648c793627fb4b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9650b1467a7388e60838ddbeb1755d5fe149b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9650b1467a7388e60838ddbeb1755d5fe149b5", "html_url": "https://github.com/rust-lang/rust/commit/fc9650b1467a7388e60838ddbeb1755d5fe149b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9650b1467a7388e60838ddbeb1755d5fe149b5/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b36708ca78f82d226d53ed66b1878f482ced468", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b36708ca78f82d226d53ed66b1878f482ced468", "html_url": "https://github.com/rust-lang/rust/commit/3b36708ca78f82d226d53ed66b1878f482ced468"}], "stats": {"total": 140, "additions": 78, "deletions": 62}, "files": [{"sha": "5853e6e0e877dd8b9591d76df6ccff47515dc47a", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=fc9650b1467a7388e60838ddbeb1755d5fe149b5", "patch": "@@ -27,7 +27,10 @@ fn print_complements() {\n \n enum color { Red, Yellow, Blue }\n \n-type creature_info = { name: uint, color: color };\n+struct CreatureInfo {\n+    name: uint,\n+    color: color\n+}\n \n fn show_color(cc: color) -> ~str {\n     match (cc) {\n@@ -95,8 +98,8 @@ fn transform(aa: color, bb: color) -> color {\n fn creature(\n     name: uint,\n     color: color,\n-    from_rendezvous: oldcomm::Port<Option<creature_info>>,\n-    to_rendezvous: oldcomm::Chan<creature_info>,\n+    from_rendezvous: oldcomm::Port<Option<CreatureInfo>>,\n+    to_rendezvous: oldcomm::Chan<CreatureInfo>,\n     to_rendezvous_log: oldcomm::Chan<~str>\n ) {\n     let mut color = color;\n@@ -105,7 +108,7 @@ fn creature(\n \n     loop {\n         // ask for a pairing\n-        oldcomm::send(to_rendezvous, {name: name, color: color});\n+        oldcomm::send(to_rendezvous, CreatureInfo {name: name, color: color});\n         let resp = oldcomm::recv(from_rendezvous);\n \n         // log and change, or print and quit\n@@ -145,15 +148,15 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     }\n \n     // these ports will allow us to hear from the creatures\n-    let from_creatures:     oldcomm::Port<creature_info> = oldcomm::Port();\n+    let from_creatures:     oldcomm::Port<CreatureInfo> = oldcomm::Port();\n     let from_creatures_log: oldcomm::Port<~str> = oldcomm::Port();\n \n     // these channels will be passed to the creatures so they can talk to us\n     let to_rendezvous     = oldcomm::Chan(&from_creatures);\n     let to_rendezvous_log = oldcomm::Chan(&from_creatures_log);\n \n     // these channels will allow us to talk to each creature by 'name'/index\n-    let to_creature: ~[oldcomm::Chan<Option<creature_info>>] =\n+    let to_creature: ~[oldcomm::Chan<Option<CreatureInfo>>] =\n         vec::mapi(set, |ii, col| {\n             // create each creature as a listener with a port, and\n             // give us a channel to talk to each\n@@ -169,8 +172,8 @@ fn rendezvous(nn: uint, set: ~[color]) {\n \n     // set up meetings...\n     for nn.times {\n-        let fst_creature: creature_info = oldcomm::recv(from_creatures);\n-        let snd_creature: creature_info = oldcomm::recv(from_creatures);\n+        let fst_creature: CreatureInfo = oldcomm::recv(from_creatures);\n+        let snd_creature: CreatureInfo = oldcomm::recv(from_creatures);\n \n         creatures_met += 2;\n "}, {"sha": "da2f2d5c3d2216d26f9c565a4004b9e6bbfc4217", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=fc9650b1467a7388e60838ddbeb1755d5fe149b5", "patch": "@@ -20,38 +20,46 @@ use io::WriterUtil;\n \n fn LINE_LENGTH() -> uint { return 60u; }\n \n-type myrandom = @{mut last: u32};\n+struct MyRandom {\n+    mut last: u32\n+}\n \n-fn myrandom_next(r: myrandom, mx: u32) -> u32 {\n+fn myrandom_next(r: @MyRandom, mx: u32) -> u32 {\n     r.last = (r.last * 3877u32 + 29573u32) % 139968u32;\n     mx * r.last / 139968u32\n }\n \n-type aminoacids = {ch: char, prob: u32};\n+struct AminoAcids {\n+    ch: char,\n+    prob: u32\n+}\n \n-fn make_cumulative(aa: ~[aminoacids]) -> ~[aminoacids] {\n+fn make_cumulative(aa: ~[AminoAcids]) -> ~[AminoAcids] {\n     let mut cp: u32 = 0u32;\n-    let mut ans: ~[aminoacids] = ~[];\n-    for aa.each |a| { cp += a.prob; ans += ~[{ch: a.ch, prob: cp}]; }\n+    let mut ans: ~[AminoAcids] = ~[];\n+    for aa.each |a| {\n+        cp += a.prob;\n+        ans += ~[AminoAcids {ch: a.ch, prob: cp}];\n+    }\n     return ans;\n }\n \n-fn select_random(r: u32, genelist: ~[aminoacids]) -> char {\n+fn select_random(r: u32, genelist: ~[AminoAcids]) -> char {\n     if r < genelist[0].prob { return genelist[0].ch; }\n-    fn bisect(v: ~[aminoacids], lo: uint, hi: uint, target: u32) -> char {\n+    fn bisect(v: ~[AminoAcids], lo: uint, hi: uint, target: u32) -> char {\n         if hi > lo + 1u {\n             let mid: uint = lo + (hi - lo) / 2u;\n             if target < v[mid].prob {\n                 return bisect(v, lo, mid, target);\n             } else { return bisect(v, mid, hi, target); }\n         } else { return v[hi].ch; }\n     }\n-    return bisect(copy genelist, 0, vec::len::<aminoacids>(genelist) - 1, r);\n+    return bisect(copy genelist, 0, vec::len::<AminoAcids>(genelist) - 1, r);\n }\n \n-fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[aminoacids], n: int) {\n+fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[AminoAcids], n: int) {\n     wr.write_line(~\">\" + id + ~\" \" + desc);\n-    let rng = @{mut last: rand::Rng().next()};\n+    let rng = @MyRandom {mut last: rand::Rng().next()};\n     let mut op: ~str = ~\"\";\n     for uint::range(0u, n as uint) |_i| {\n         str::push_char(&mut op, select_random(myrandom_next(rng, 100u32),\n@@ -80,7 +88,9 @@ fn make_repeat_fasta(wr: io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n     }\n }\n \n-fn acid(ch: char, prob: u32) -> aminoacids { return {ch: ch, prob: prob}; }\n+fn acid(ch: char, prob: u32) -> AminoAcids {\n+    return AminoAcids {ch: ch, prob: prob};\n+}\n \n fn main() {\n     let args = os::args();\n@@ -102,13 +112,13 @@ fn main() {\n \n     let n = int::from_str(args[1]).get();\n \n-    let iub: ~[aminoacids] =\n+    let iub: ~[AminoAcids] =\n         make_cumulative(~[acid('a', 27u32), acid('c', 12u32), acid('g', 12u32),\n                          acid('t', 27u32), acid('B', 2u32), acid('D', 2u32),\n                          acid('H', 2u32), acid('K', 2u32), acid('M', 2u32),\n                          acid('N', 2u32), acid('R', 2u32), acid('S', 2u32),\n                          acid('V', 2u32), acid('W', 2u32), acid('Y', 2u32)]);\n-    let homosapiens: ~[aminoacids] =\n+    let homosapiens: ~[AminoAcids] =\n         make_cumulative(~[acid('a', 30u32), acid('c', 20u32), acid('g', 20u32),\n                          acid('t', 30u32)]);\n     let alu: ~str ="}, {"sha": "c915820a45a2f11efb7bde3bc91ea0d3163091df", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=fc9650b1467a7388e60838ddbeb1755d5fe149b5", "patch": "@@ -36,7 +36,7 @@ fn main() {\n         args\n     };\n     let n = int::from_str(args[1]).get();\n-    let mut bodies: ~[Body::props] = NBodySystem::make();\n+    let mut bodies: ~[Body::Props] = NBodySystem::make();\n     io::println(fmt!(\"%f\", NBodySystem::energy(bodies)));\n     let mut i = 0;\n     while i < n {\n@@ -49,8 +49,8 @@ fn main() {\n mod NBodySystem {\n     use Body;\n \n-    pub fn make() -> ~[Body::props] {\n-        let mut bodies: ~[Body::props] =\n+    pub fn make() -> ~[Body::Props] {\n+        let mut bodies: ~[Body::Props] =\n             ~[Body::sun(),\n               Body::jupiter(),\n               Body::saturn(),\n@@ -76,7 +76,7 @@ mod NBodySystem {\n         return bodies;\n     }\n \n-    pub fn advance(bodies: &mut [Body::props], dt: float) {\n+    pub fn advance(bodies: &mut [Body::Props], dt: float) {\n         let mut i = 0;\n         while i < 5 {\n             let mut j = i + 1;\n@@ -96,8 +96,8 @@ mod NBodySystem {\n         }\n     }\n \n-    pub fn advance_one(bi: &mut Body::props,\n-                       bj: &mut Body::props,\n+    pub fn advance_one(bi: &mut Body::Props,\n+                       bj: &mut Body::Props,\n                        dt: float) {\n         unsafe {\n             let dx = bi.x - bj.x;\n@@ -119,13 +119,13 @@ mod NBodySystem {\n         }\n     }\n \n-    pub fn move_(b: &mut Body::props, dt: float) {\n+    pub fn move_(b: &mut Body::Props, dt: float) {\n         b.x += dt * b.vx;\n         b.y += dt * b.vy;\n         b.z += dt * b.vz;\n     }\n \n-    pub fn energy(bodies: &[Body::props]) -> float {\n+    pub fn energy(bodies: &[Body::Props]) -> float {\n         unsafe {\n             let mut dx;\n             let mut dy;\n@@ -171,17 +171,17 @@ mod Body {\n     // was 4 * PI * PI originally\n     pub const DAYS_PER_YEAR: float = 365.24;\n \n-    pub type props =\n+    pub struct Props\n         {mut x: float,\n          mut y: float,\n          mut z: float,\n          mut vx: float,\n          mut vy: float,\n          mut vz: float,\n-         mass: float};\n+         mass: float}\n \n-    pub fn jupiter() -> Body::props {\n-        return {mut x: 4.84143144246472090e+00,\n+    pub fn jupiter() -> Body::Props {\n+        return Props {mut x: 4.84143144246472090e+00,\n              mut y: -1.16032004402742839e+00,\n              mut z: -1.03622044471123109e-01,\n              mut vx: 1.66007664274403694e-03 * DAYS_PER_YEAR,\n@@ -190,8 +190,8 @@ mod Body {\n              mass: 9.54791938424326609e-04 * SOLAR_MASS};\n     }\n \n-    pub fn saturn() -> Body::props {\n-        return {mut x: 8.34336671824457987e+00,\n+    pub fn saturn() -> Body::Props {\n+        return Props {mut x: 8.34336671824457987e+00,\n              mut y: 4.12479856412430479e+00,\n              mut z: -4.03523417114321381e-01,\n              mut vx: -2.76742510726862411e-03 * DAYS_PER_YEAR,\n@@ -200,8 +200,8 @@ mod Body {\n              mass: 2.85885980666130812e-04 * SOLAR_MASS};\n     }\n \n-    pub fn uranus() -> Body::props {\n-        return {mut x: 1.28943695621391310e+01,\n+    pub fn uranus() -> Body::Props {\n+        return Props {mut x: 1.28943695621391310e+01,\n              mut y: -1.51111514016986312e+01,\n              mut z: -2.23307578892655734e-01,\n              mut vx: 2.96460137564761618e-03 * DAYS_PER_YEAR,\n@@ -210,8 +210,8 @@ mod Body {\n              mass: 4.36624404335156298e-05 * SOLAR_MASS};\n     }\n \n-    pub fn neptune() -> Body::props {\n-        return {mut x: 1.53796971148509165e+01,\n+    pub fn neptune() -> Body::Props {\n+        return Props {mut x: 1.53796971148509165e+01,\n              mut y: -2.59193146099879641e+01,\n              mut z: 1.79258772950371181e-01,\n              mut vx: 2.68067772490389322e-03 * DAYS_PER_YEAR,\n@@ -220,8 +220,8 @@ mod Body {\n              mass: 5.15138902046611451e-05 * SOLAR_MASS};\n     }\n \n-    pub fn sun() -> Body::props {\n-        return {mut x: 0.0,\n+    pub fn sun() -> Body::Props {\n+        return Props {mut x: 0.0,\n              mut y: 0.0,\n              mut z: 0.0,\n              mut vx: 0.0,\n@@ -230,7 +230,7 @@ mod Body {\n              mass: SOLAR_MASS};\n     }\n \n-    pub fn offset_momentum(props: &mut Body::props,\n+    pub fn offset_momentum(props: &mut Body::Props,\n                        px: float, py: float, pz: float) {\n         props.vx = -px / SOLAR_MASS;\n         props.vy = -py / SOLAR_MASS;"}, {"sha": "b56552d46fe0009e3b01637d59a30472e059a426", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=fc9650b1467a7388e60838ddbeb1755d5fe149b5", "patch": "@@ -55,15 +55,19 @@ fn fib(n: int) -> int {\n     p.recv()\n }\n \n-type config = {stress: bool};\n+struct Config {\n+    stress: bool\n+}\n \n-fn parse_opts(argv: ~[~str]) -> config {\n+fn parse_opts(argv: ~[~str]) -> Config {\n     let opts = ~[getopts::optflag(~\"stress\")];\n \n-    let opt_args = vec::slice(argv, 1u, vec::len(argv));\n+    let opt_args = vec::slice(argv, 1, argv.len());\n \n     match getopts::getopts(opt_args, opts) {\n-      Ok(ref m) => { return {stress: getopts::opt_present(m, ~\"stress\")} }\n+      Ok(ref m) => {\n+          return Config {stress: getopts::opt_present(m, ~\"stress\")}\n+      }\n       Err(_) => { fail; }\n     }\n }"}, {"sha": "52826752922d567fe7f2bfd083a7c6e50a2e8d4d", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9650b1467a7388e60838ddbeb1755d5fe149b5/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=fc9650b1467a7388e60838ddbeb1755d5fe149b5", "patch": "@@ -38,16 +38,15 @@ fn run(repeat: int, depth: int) {\n type nillist = List<()>;\n \n // Filled with things that have to be unwound\n-enum st {\n-    st_({\n-        box: @nillist,\n-        unique: ~nillist,\n-        fn_box: fn@() -> @nillist,\n-        fn_unique: fn~() -> ~nillist,\n-        tuple: (@nillist, ~nillist),\n-        vec: ~[@nillist],\n-        res: r\n-    })\n+\n+struct State {\n+    box: @nillist,\n+    unique: ~nillist,\n+    fn_box: fn@() -> @nillist,\n+    fn_unique: fn~() -> ~nillist,\n+    tuple: (@nillist, ~nillist),\n+    vec: ~[@nillist],\n+    res: r\n }\n \n struct r {\n@@ -64,7 +63,7 @@ fn r(l: @nillist) -> r {\n     }\n }\n \n-fn recurse_or_fail(depth: int, st: Option<st>) {\n+fn recurse_or_fail(depth: int, st: Option<State>) {\n     if depth == 0 {\n         debug!(\"unwinding %.4f\", precise_time_s());\n         fail;\n@@ -73,21 +72,21 @@ fn recurse_or_fail(depth: int, st: Option<st>) {\n \n         let st = match st {\n           None => {\n-            st_({\n+            State {\n                 box: @Nil,\n                 unique: ~Nil,\n                 fn_box: fn@() -> @nillist { @Nil::<()> },\n                 fn_unique: fn~() -> ~nillist { ~Nil::<()> },\n                 tuple: (@Nil, ~Nil),\n                 vec: ~[@Nil],\n                 res: r(@Nil)\n-            })\n+            }\n           }\n           Some(st) => {\n             let fn_box = st.fn_box;\n             let fn_unique = copy st.fn_unique;\n \n-            st_({\n+            State {\n                 box: @Cons((), st.box),\n                 unique: ~Cons((), @*st.unique),\n                 fn_box: fn@() -> @nillist { @Cons((), fn_box()) },\n@@ -97,7 +96,7 @@ fn recurse_or_fail(depth: int, st: Option<st>) {\n                         ~Cons((), @*st.tuple.second())),\n                 vec: st.vec + ~[@Cons((), st.vec.last())],\n                 res: r(@Cons((), st.res._l))\n-            })\n+            }\n           }\n         };\n "}]}