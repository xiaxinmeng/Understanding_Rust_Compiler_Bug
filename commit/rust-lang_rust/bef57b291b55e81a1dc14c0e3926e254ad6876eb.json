{"sha": "bef57b291b55e81a1dc14c0e3926e254ad6876eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZjU3YjI5MWI1NWU4MWExZGMxNGMwZTM5MjZlMjU0YWQ2ODc2ZWI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-07T08:02:30Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-07T08:02:30Z"}, "message": "Simplify intrinsic/c_abi call argument evaluation.", "tree": {"sha": "48bb5dee02338c385a78ed3890205fc79fc108d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48bb5dee02338c385a78ed3890205fc79fc108d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef57b291b55e81a1dc14c0e3926e254ad6876eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef57b291b55e81a1dc14c0e3926e254ad6876eb", "html_url": "https://github.com/rust-lang/rust/commit/bef57b291b55e81a1dc14c0e3926e254ad6876eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef57b291b55e81a1dc14c0e3926e254ad6876eb/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f97eb352225fc6b971c6db799458133301e5d6f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97eb352225fc6b971c6db799458133301e5d6f3", "html_url": "https://github.com/rust-lang/rust/commit/f97eb352225fc6b971c6db799458133301e5d6f3"}], "stats": {"total": 109, "additions": 42, "deletions": 67}, "files": [{"sha": "5ea2a117b8c58374a8debc36fa2d7b4975c4a4ba", "filename": "src/interpreter.rs", "status": "modified", "additions": 42, "deletions": 67, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/bef57b291b55e81a1dc14c0e3926e254ad6876eb/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef57b291b55e81a1dc14c0e3926e254ad6876eb/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=bef57b291b55e81a1dc14c0e3926e254ad6876eb", "patch": "@@ -371,25 +371,28 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(target)\n     }\n \n-    fn call_intrinsic(&mut self, name: &str, substs: &'tcx Substs<'tcx>,\n-        args: &[mir::Operand<'tcx>], dest: Pointer, dest_size: usize)\n-        -> EvalResult<TerminatorTarget>\n-    {\n+    fn call_intrinsic(\n+        &mut self,\n+        name: &str,\n+        substs: &'tcx Substs<'tcx>,\n+        args: &[mir::Operand<'tcx>],\n+        dest: Pointer,\n+        dest_size: usize\n+    ) -> EvalResult<TerminatorTarget> {\n+        let args_res: EvalResult<Vec<Pointer>> = args.iter()\n+            .map(|arg| self.eval_operand(arg))\n+            .collect();\n+        let args = try!(args_res);\n+\n         match name {\n             \"assume\" => {}\n \n             \"copy_nonoverlapping\" => {\n                 let elem_ty = *substs.types.get(subst::FnSpace, 0);\n                 let elem_size = self.type_size(elem_ty);\n-\n-                let src_arg   = try!(self.eval_operand(&args[0]));\n-                let dest_arg  = try!(self.eval_operand(&args[1]));\n-                let count_arg = try!(self.eval_operand(&args[2]));\n-\n-                let src   = try!(self.memory.read_ptr(src_arg));\n-                let dest  = try!(self.memory.read_ptr(dest_arg));\n-                let count = try!(self.memory.read_isize(count_arg));\n-\n+                let src = try!(self.memory.read_ptr(args[0]));\n+                let dest = try!(self.memory.read_ptr(args[1]));\n+                let count = try!(self.memory.read_isize(args[2]));\n                 try!(self.memory.copy(src, dest, count as usize * elem_size));\n             }\n \n@@ -403,29 +406,19 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             \"move_val_init\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n                 let size = self.type_size(ty);\n-\n-                let ptr_arg = try!(self.eval_operand(&args[0]));\n-                let ptr = try!(self.memory.read_ptr(ptr_arg));\n-\n-                let val = try!(self.eval_operand(&args[1]));\n-                try!(self.memory.copy(val, ptr, size));\n+                let ptr = try!(self.memory.read_ptr(args[0]));\n+                try!(self.memory.copy(args[1], ptr, size));\n             }\n \n             // FIXME(tsion): Handle different integer types correctly.\n             \"add_with_overflow\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n                 let size = self.type_size(ty);\n-\n-                let left_arg  = try!(self.eval_operand(&args[0]));\n-                let right_arg = try!(self.eval_operand(&args[1]));\n-\n-                let left = try!(self.memory.read_int(left_arg, size));\n-                let right = try!(self.memory.read_int(right_arg, size));\n-\n+                let left = try!(self.memory.read_int(args[0], size));\n+                let right = try!(self.memory.read_int(args[1], size));\n                 let (n, overflowed) = unsafe {\n                     ::std::intrinsics::add_with_overflow::<i64>(left, right)\n                 };\n-\n                 try!(self.memory.write_int(dest, n, size));\n                 try!(self.memory.write_bool(dest.offset(size as isize), overflowed));\n             }\n@@ -434,29 +427,20 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             \"mul_with_overflow\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n                 let size = self.type_size(ty);\n-\n-                let left_arg  = try!(self.eval_operand(&args[0]));\n-                let right_arg = try!(self.eval_operand(&args[1]));\n-\n-                let left = try!(self.memory.read_int(left_arg, size));\n-                let right = try!(self.memory.read_int(right_arg, size));\n-\n+                let left = try!(self.memory.read_int(args[0], size));\n+                let right = try!(self.memory.read_int(args[1], size));\n                 let (n, overflowed) = unsafe {\n                     ::std::intrinsics::mul_with_overflow::<i64>(left, right)\n                 };\n-\n                 try!(self.memory.write_int(dest, n, size));\n                 try!(self.memory.write_bool(dest.offset(size as isize), overflowed));\n             }\n \n             \"offset\" => {\n                 let pointee_ty = *substs.types.get(subst::FnSpace, 0);\n                 let pointee_size = self.type_size(pointee_ty) as isize;\n-\n-                let ptr_arg    = try!(self.eval_operand(&args[0]));\n-                let offset_arg = try!(self.eval_operand(&args[1]));\n-\n-                let offset = try!(self.memory.read_isize(offset_arg));\n+                let ptr_arg = args[0];\n+                let offset = try!(self.memory.read_isize(args[1]));\n \n                 match self.memory.read_ptr(ptr_arg) {\n                     Ok(ptr) => {\n@@ -476,13 +460,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             \"overflowing_sub\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n                 let size = self.type_size(ty);\n-\n-                let left_arg  = try!(self.eval_operand(&args[0]));\n-                let right_arg = try!(self.eval_operand(&args[1]));\n-\n-                let left = try!(self.memory.read_int(left_arg, size));\n-                let right = try!(self.memory.read_int(right_arg, size));\n-\n+                let left = try!(self.memory.read_int(args[0], size));\n+                let right = try!(self.memory.read_int(args[1], size));\n                 let n = left.wrapping_sub(right);\n                 try!(self.memory.write_int(dest, n, size));\n             }\n@@ -493,14 +472,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 try!(self.memory.write_uint(dest, size, dest_size));\n             }\n \n-            \"transmute\" => {\n-                let src = try!(self.eval_operand(&args[0]));\n-                try!(self.memory.copy(src, dest, dest_size));\n-            }\n-\n-            \"uninit\" => {\n-                try!(self.memory.mark_definedness(dest, dest_size, false));\n-            }\n+            \"transmute\" => try!(self.memory.copy(args[0], dest, dest_size)),\n+            \"uninit\" => try!(self.memory.mark_definedness(dest, dest_size, false)),\n \n             name => panic!(\"can't handle intrinsic: {}\", name),\n         }\n@@ -511,32 +484,34 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(TerminatorTarget::Call)\n     }\n \n-    fn call_c_abi(&mut self, def_id: DefId, args: &[mir::Operand<'tcx>], dest: Pointer)\n-        -> EvalResult<TerminatorTarget>\n-    {\n+    fn call_c_abi(\n+        &mut self,\n+        def_id: DefId,\n+        args: &[mir::Operand<'tcx>],\n+        dest: Pointer\n+    ) -> EvalResult<TerminatorTarget> {\n         let name = self.tcx.item_name(def_id);\n         let attrs = self.tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n             Some(ln) => ln.clone(),\n             None => name.as_str(),\n         };\n \n+        let args_res: EvalResult<Vec<Pointer>> = args.iter()\n+            .map(|arg| self.eval_operand(arg))\n+            .collect();\n+        let args = try!(args_res);\n+\n         match &link_name[..] {\n             \"__rust_allocate\" => {\n-                let size_arg  = try!(self.eval_operand(&args[0]));\n-                let _align_arg = try!(self.eval_operand(&args[1]));\n-                let size = try!(self.memory.read_usize(size_arg));\n+                let size = try!(self.memory.read_usize(args[0]));\n                 let ptr = self.memory.allocate(size as usize);\n                 try!(self.memory.write_ptr(dest, ptr));\n             }\n \n             \"__rust_reallocate\" => {\n-                let ptr_arg = try!(self.eval_operand(&args[0]));\n-                let _old_size_arg = try!(self.eval_operand(&args[1]));\n-                let size_arg = try!(self.eval_operand(&args[2]));\n-                let _align_arg = try!(self.eval_operand(&args[3]));\n-                let ptr = try!(self.memory.read_ptr(ptr_arg));\n-                let size = try!(self.memory.read_usize(size_arg));\n+                let ptr = try!(self.memory.read_ptr(args[0]));\n+                let size = try!(self.memory.read_usize(args[2]));\n                 try!(self.memory.reallocate(ptr, size as usize));\n                 try!(self.memory.write_ptr(dest, ptr));\n             }"}]}