{"sha": "9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZDhkN2EyNGY3M2U3ZGU5MWNjM2JhNDQ2MWVlYjZmZThhMDg2ZjM=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-18T15:52:05Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:26:41Z"}, "message": "Factor write_ty out of function checking functions", "tree": {"sha": "9a381a4e40d6511e8cb0ba0c73177835a5d9653c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a381a4e40d6511e8cb0ba0c73177835a5d9653c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3", "html_url": "https://github.com/rust-lang/rust/commit/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21720641dc4d3b921eb5be2a4c66900003a742dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/21720641dc4d3b921eb5be2a4c66900003a742dd", "html_url": "https://github.com/rust-lang/rust/commit/21720641dc4d3b921eb5be2a4c66900003a742dd"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "5bd4f13a1119c7e9a9144a48d197bd99d6f2cc75", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3", "patch": "@@ -15,7 +15,7 @@ use CrateCtxt;\n use middle::cstore::LOCAL_CRATE;\n use hir::def::Def;\n use hir::def_id::DefId;\n-use rustc::infer;\n+use rustc::{infer, traits};\n use rustc::ty::{self, LvaluePreference, Ty};\n use syntax::parse::token;\n use syntax::ptr::P;\n@@ -56,7 +56,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let callee_ty = autoderef.unambiguous_final_ty();\n         autoderef.finalize(LvaluePreference::NoPreference, Some(callee_expr));\n \n-        match result {\n+        let output = match result {\n             None => {\n                 // this will report an error since original_callee_ty is not a fn\n                 self.confirm_builtin_call(call_expr, original_callee_ty, arg_exprs, expected)\n@@ -74,7 +74,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.confirm_overloaded_call(call_expr, callee_expr,\n                                              arg_exprs, expected, method_callee)\n             }\n-        }\n+        };\n+\n+        // we must check that return type of called functions is WF:\n+        self.register_wf_obligation(output, call_expr.span, traits::MiscObligation);\n+\n+        output\n     }\n \n     fn try_overloaded_call_step(&self,\n@@ -244,7 +249,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   fn_sig.variadic,\n                                   TupleArgumentsFlag::DontTupleArguments);\n \n-        self.write_ty(call_expr.id, fn_sig.output)\n+        fn_sig.output\n     }\n \n     fn confirm_deferred_closure_call(&self,\n@@ -271,7 +276,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   fn_sig.variadic,\n                                   TupleArgumentsFlag::TupleArguments);\n \n-        self.write_ty(call_expr.id, fn_sig.output)\n+        fn_sig.output\n     }\n \n     fn confirm_overloaded_call(&self,\n@@ -288,10 +293,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                              arg_exprs,\n                                              TupleArgumentsFlag::TupleArguments,\n                                              expected);\n-        let ty = self.write_ty(call_expr.id, output_type);\n \n         self.write_overloaded_call_method_map(call_expr, method_callee);\n-        ty\n+        output_type\n     }\n \n     fn write_overloaded_call_method_map(&self,"}, {"sha": "8406b491737eccb430294492f3defe027cc7e920", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9cd8d7a24f73e7de91cc3ba4461eeb6fe8a086f3", "patch": "@@ -2847,7 +2847,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                       DontTupleArguments,\n                                                       expected);\n \n-        self.write_ty(expr.id, ret_ty)\n+        ret_ty\n     }\n \n     // A generic function for checking the then and else in an if\n@@ -3541,13 +3541,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprCall(ref callee, ref args) => {\n               let ret_ty = self.check_call(expr, &callee, &args[..], expected);\n-\n-              // we must check that return type of called functions is WF:\n-              self.register_wf_obligation(ret_ty, expr.span, traits::MiscObligation);\n-              ret_ty\n+              self.write_ty(id, ret_ty)\n           }\n           hir::ExprMethodCall(name, ref tps, ref args) => {\n-              self.check_method_call(expr, name, &args[..], &tps[..], expected, lvalue_pref)\n+              let ret_ty = self.check_method_call(expr, name, &args[..], &tps[..], expected, lvalue_pref);\n+              self.write_ty(id, ret_ty)\n           }\n           hir::ExprCast(ref e, ref t) => {\n             if let hir::TyFixedLengthVec(_, ref count_expr) = t.node {"}]}