{"sha": "6ed9f8f62ebe52f388f9098fb4c05791f588729b", "node_id": "C_kwDOAAsO6NoAKDZlZDlmOGY2MmViZTUyZjM4OGY5MDk4ZmI0YzA1NzkxZjU4ODcyOWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-12T18:23:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:22:45Z"}, "message": "Implement SSA CopyProp pass.", "tree": {"sha": "11c6995c91a5bc3adb8ce53d6ca97e97c2d14a1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c6995c91a5bc3adb8ce53d6ca97e97c2d14a1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ed9f8f62ebe52f388f9098fb4c05791f588729b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed9f8f62ebe52f388f9098fb4c05791f588729b", "html_url": "https://github.com/rust-lang/rust/commit/6ed9f8f62ebe52f388f9098fb4c05791f588729b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ed9f8f62ebe52f388f9098fb4c05791f588729b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fe96c3234a1e21b2d61fc3e6f28e6522ad7ab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fe96c3234a1e21b2d61fc3e6f28e6522ad7ab2", "html_url": "https://github.com/rust-lang/rust/commit/c4fe96c3234a1e21b2d61fc3e6f28e6522ad7ab2"}], "stats": {"total": 1473, "additions": 935, "deletions": 538}, "files": [{"sha": "e39e661d4a14a81ada517801ff326dd72d0978d5", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "added", "additions": 267, "deletions": 0, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -0,0 +1,267 @@\n+use either::Either;\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::middle::resolve_lifetime::Set1;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{ParamEnv, TyCtxt};\n+use rustc_mir_dataflow::impls::borrowed_locals;\n+\n+use crate::MirPass;\n+\n+/// Unify locals that copy each other.\n+///\n+/// We consider patterns of the form\n+///   _a = rvalue\n+///   _b = move? _a\n+///   _c = move? _a\n+///   _d = move? _c\n+/// where each of the locals is only assigned once.\n+///\n+/// We want to replace all those locals by `_a`, either copied or moved.\n+pub struct CopyProp;\n+\n+impl<'tcx> MirPass<'tcx> for CopyProp {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n+    #[instrument(level = \"trace\", skip(self, tcx, body))]\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(def_id = ?body.source.def_id());\n+        propagate_ssa(tcx, body);\n+    }\n+}\n+\n+fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n+    let ssa = SsaLocals::new(tcx, param_env, body);\n+\n+    let (copy_classes, fully_moved) = compute_copy_classes(&ssa, body);\n+    debug!(?copy_classes);\n+\n+    let mut storage_to_remove = BitSet::new_empty(fully_moved.domain_size());\n+    for (local, &head) in copy_classes.iter_enumerated() {\n+        if local != head {\n+            storage_to_remove.insert(head);\n+            storage_to_remove.insert(local);\n+        }\n+    }\n+\n+    let any_replacement = copy_classes.iter_enumerated().any(|(l, &h)| l != h);\n+\n+    Replacer { tcx, copy_classes, fully_moved, storage_to_remove }.visit_body_preserves_cfg(body);\n+\n+    if any_replacement {\n+        crate::simplify::remove_unused_definitions(body);\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum LocationExtended {\n+    Plain(Location),\n+    Arg,\n+}\n+\n+#[derive(Debug)]\n+struct SsaLocals {\n+    /// Assignments to each local.  This defines whether the local is SSA.\n+    assignments: IndexVec<Local, Set1<LocationExtended>>,\n+    /// We visit the body in reverse postorder, to ensure each local is assigned before it is used.\n+    /// We remember the order in which we saw the assignments to compute the SSA values in a single\n+    /// pass.\n+    assignment_order: Vec<Local>,\n+}\n+\n+impl SsaLocals {\n+    fn new<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, body: &Body<'tcx>) -> SsaLocals {\n+        let assignment_order = Vec::new();\n+\n+        let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n+        let mut this = SsaLocals { assignments, assignment_order };\n+\n+        let borrowed = borrowed_locals(body);\n+        for (local, decl) in body.local_decls.iter_enumerated() {\n+            if matches!(body.local_kind(local), LocalKind::Arg) {\n+                this.assignments[local] = Set1::One(LocationExtended::Arg);\n+            }\n+            if borrowed.contains(local) && !decl.ty.is_freeze(tcx, param_env) {\n+                this.assignments[local] = Set1::Many;\n+            }\n+        }\n+\n+        for (bb, data) in traversal::reverse_postorder(body) {\n+            this.visit_basic_block_data(bb, data);\n+        }\n+\n+        for var_debug_info in &body.var_debug_info {\n+            this.visit_var_debug_info(var_debug_info);\n+        }\n+\n+        debug!(?this.assignments);\n+\n+        this.assignment_order.retain(|&local| matches!(this.assignments[local], Set1::One(_)));\n+        debug!(?this.assignment_order);\n+\n+        this\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for SsaLocals {\n+    fn visit_local(&mut self, local: Local, ctxt: PlaceContext, loc: Location) {\n+        match ctxt {\n+            PlaceContext::MutatingUse(MutatingUseContext::Store) => {\n+                self.assignments[local].insert(LocationExtended::Plain(loc));\n+                self.assignment_order.push(local);\n+            }\n+            PlaceContext::MutatingUse(_) => self.assignments[local] = Set1::Many,\n+            // Immutable borrows and AddressOf are taken into account in `SsaLocals::new` by\n+            // removing non-freeze locals.\n+            PlaceContext::NonMutatingUse(_) | PlaceContext::NonUse(_) => {}\n+        }\n+    }\n+}\n+\n+/// Compute the equivalence classes for locals, based on copy statements.\n+///\n+/// The returned vector maps each local to the one it copies. In the following case:\n+///   _a = &mut _0\n+///   _b = move? _a\n+///   _c = move? _a\n+///   _d = move? _c\n+/// We return the mapping\n+///   _a => _a // not a copy so, represented by itself\n+///   _b => _a\n+///   _c => _a\n+///   _d => _a // transitively through _c\n+///\n+/// This function also returns whether all the `move?` in the pattern are `move` and not copies.\n+/// A local which is in the bitset can be replaced by `move _a`.  Otherwise, it must be\n+/// replaced by `copy _a`, as we cannot move multiple times from `_a`.\n+///\n+/// If an operand copies `_c`, it must happen before the assignment `_d = _c`, otherwise it is UB.\n+/// This means that replacing it by a copy of `_a` if ok, since this copy happens before `_c` is\n+/// moved, and therefore that `_d` is moved.\n+#[instrument(level = \"trace\", skip(ssa, body))]\n+fn compute_copy_classes(\n+    ssa: &SsaLocals,\n+    body: &Body<'_>,\n+) -> (IndexVec<Local, Local>, BitSet<Local>) {\n+    let mut copies = IndexVec::from_fn_n(|l| l, body.local_decls.len());\n+    let mut fully_moved = BitSet::new_filled(copies.len());\n+\n+    for &local in &ssa.assignment_order {\n+        debug!(?local);\n+\n+        if local == RETURN_PLACE {\n+            // `_0` is special, we cannot rename it.\n+            continue;\n+        }\n+\n+        // This is not SSA: mark that we don't know the value.\n+        debug!(assignments = ?ssa.assignments[local]);\n+        let Set1::One(LocationExtended::Plain(loc)) = ssa.assignments[local] else { continue };\n+\n+        // `loc` must point to a direct assignment to `local`.\n+        let Either::Left(stmt) = body.stmt_at(loc) else { bug!() };\n+        let Some((_target, rvalue)) = stmt.kind.as_assign() else { bug!() };\n+        assert_eq!(_target.as_local(), Some(local));\n+\n+        let (Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) | Rvalue::CopyForDeref(place))\n+            = rvalue\n+        else { continue };\n+\n+        let Some(rhs) = place.as_local() else { continue };\n+        let Set1::One(_) = ssa.assignments[rhs] else { continue };\n+\n+        // We visit in `assignment_order`, ie. reverse post-order, so `rhs` has been\n+        // visited before `local`, and we just have to copy the representing local.\n+        copies[local] = copies[rhs];\n+\n+        if let Rvalue::Use(Operand::Copy(_)) | Rvalue::CopyForDeref(_) = rvalue {\n+            fully_moved.remove(rhs);\n+        }\n+    }\n+\n+    debug!(?copies);\n+\n+    // Invariant: `copies` must point to the head of an equivalence class.\n+    #[cfg(debug_assertions)]\n+    for &head in copies.iter() {\n+        assert_eq!(copies[head], head);\n+    }\n+\n+    meet_copy_equivalence(&copies, &mut fully_moved);\n+\n+    (copies, fully_moved)\n+}\n+\n+/// Make a property uniform on a copy equivalence class by removing elements.\n+fn meet_copy_equivalence(copies: &IndexVec<Local, Local>, property: &mut BitSet<Local>) {\n+    // Consolidate to have a local iff all its copies are.\n+    //\n+    // `copies` defines equivalence classes between locals.  The `local`s that recursively\n+    // move/copy the same local all have the same `head`.\n+    for (local, &head) in copies.iter_enumerated() {\n+        // If any copy does not have `property`, then the head is not.\n+        if !property.contains(local) {\n+            property.remove(head);\n+        }\n+    }\n+    for (local, &head) in copies.iter_enumerated() {\n+        // If any copy does not have `property`, then the head doesn't either,\n+        // then no copy has `property`.\n+        if !property.contains(head) {\n+            property.remove(local);\n+        }\n+    }\n+\n+    // Verify that we correctly computed equivalence classes.\n+    #[cfg(debug_assertions)]\n+    for (local, &head) in copies.iter_enumerated() {\n+        assert_eq!(property.contains(local), property.contains(head));\n+    }\n+}\n+\n+/// Utility to help performing subtitution of `*pattern` by `target`.\n+struct Replacer<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    fully_moved: BitSet<Local>,\n+    storage_to_remove: BitSet<Local>,\n+    copy_classes: IndexVec<Local, Local>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n+        *local = self.copy_classes[*local];\n+    }\n+\n+    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n+        if let Operand::Move(place) = *operand\n+            && let Some(local) = place.as_local()\n+            && !self.fully_moved.contains(local)\n+        {\n+            *operand = Operand::Copy(place);\n+        }\n+        self.super_operand(operand, loc);\n+    }\n+\n+    fn visit_statement(&mut self, stmt: &mut Statement<'tcx>, loc: Location) {\n+        if let StatementKind::StorageLive(l) | StatementKind::StorageDead(l) = stmt.kind\n+            && self.storage_to_remove.contains(l)\n+        {\n+            stmt.make_nop();\n+        }\n+        if let StatementKind::Assign(box (ref place, _)) = stmt.kind\n+            && let Some(l) = place.as_local()\n+            && self.copy_classes[l] != l\n+        {\n+            stmt.make_nop();\n+        }\n+        self.super_statement(stmt, loc);\n+    }\n+}"}, {"sha": "1330f1e26b8ed686fe57cbaa58b9d0da218dacc8", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -54,6 +54,7 @@ mod const_debuginfo;\n mod const_goto;\n mod const_prop;\n mod const_prop_lint;\n+mod copy_prop;\n mod coverage;\n mod dataflow_const_prop;\n mod dead_store_elimination;\n@@ -556,6 +557,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &instcombine::InstCombine,\n             &separate_const_switch::SeparateConstSwitch,\n             &simplify::SimplifyLocals::new(\"before-const-prop\"),\n+            &copy_prop::CopyProp,\n             //\n             // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n             &const_prop::ConstProp,"}, {"sha": "4405b55875ed92ed4f401c9ead6a1cfa5e4230c7", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -56,25 +56,13 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_debuginfo.rs:+1:9: +1:10\n           _1 = const 1_u8;                 // scope 0 at $DIR/const_debuginfo.rs:+1:13: +1:16\n-          StorageLive(_2);                 // scope 1 at $DIR/const_debuginfo.rs:+2:9: +2:10\n           _2 = const 2_u8;                 // scope 1 at $DIR/const_debuginfo.rs:+2:13: +2:16\n-          StorageLive(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+3:9: +3:10\n           _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:+3:13: +3:16\n           StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n           StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n-          StorageLive(_6);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:16\n-          _6 = const 1_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:16\n-          StorageLive(_7);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n-          _7 = const 2_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n           _5 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n-          StorageDead(_7);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n-          StorageDead(_6);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n-          StorageLive(_8);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-          _8 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n           _4 = const 6_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:24\n-          StorageDead(_8);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n           StorageDead(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n           StorageLive(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+6:9: +6:10\n           _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:+6:13: +6:28\n@@ -117,9 +105,6 @@\n           StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_2);                 // scope 1 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/const_debuginfo.rs:+14:2: +14:2\n       }\n   }"}, {"sha": "ae9ffd519a148ec6efd25eed5dbe487e231ee483", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -18,35 +18,27 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _4 = Eq(_1, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _5 = Eq(_1, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _1) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _1) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n--         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+          _2 = Rem(const 1_i32, _1);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n       }\n   }"}, {"sha": "4bd0aa09872398959e3fbe0a1ea2c12050020756", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -23,16 +23,13 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _8;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n           StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24"}, {"sha": "4bd0aa09872398959e3fbe0a1ea2c12050020756", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -23,16 +23,13 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _8;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n           StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24"}, {"sha": "549b4711e874d281f62050ad68226ced07af3c9f", "filename": "tests/mir-opt/const_prop/boolean_identities.test.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -12,18 +12,12 @@\n   \n       bb0: {\n           StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-          StorageLive(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n-          _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n--         _3 = BitOr(move _4, const true); // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+-         _3 = BitOr(_2, const true);      // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n +         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-          StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:14: +1:15\n           StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-          StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n-          _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n--         _5 = BitAnd(move _6, const false); // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-+         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-          StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+-         _5 = BitAnd(_1, const false);    // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n -         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n++         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n +         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n           StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n           StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29"}, {"sha": "1cfe47d0a86124a119b2ecd87221cbc9d2a4f38e", "filename": "tests/mir-opt/const_prop/mult_by_zero.test.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -7,11 +7,8 @@\n       let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n-          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n--         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+-         _0 = Mul(_1, const 0_i32);       // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n +         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n-          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n           return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "22f710387db71d8321606cc4c303f361bfd09a65", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -11,23 +11,17 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-+         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n +         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n           StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n-          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n       }\n   }"}, {"sha": "9c3f87f47c12c0ebab94e7691ada61e6f4ca4e79", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -16,23 +16,13 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _1 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _2 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          _3 = const u8::MAX;              // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          _4 = const 1_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           _5 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           assert(!move (_5.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "1a7fb916e56dbaf3d8ba15a4e84b422557117c16", "filename": "tests/mir-opt/div_overflow.const_dividend.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -11,7 +11,7 @@ fn const_dividend(_1: i32) -> i32 {\n     }\n \n     bb1: {\n-        _0 = Div(const 256_i32, move _1); // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+        _0 = Div(const 256_i32, _1);     // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n         return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n     }\n }"}, {"sha": "5526a194be563cb8ab98f4c0b4cab1669ed90ef4", "filename": "tests/mir-opt/div_overflow.const_divisor.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -5,7 +5,7 @@ fn const_divisor(_1: i32) -> i32 {\n     let mut _0: i32;                     // return place in scope 0 at $DIR/div_overflow.rs:+0:33: +0:36\n \n     bb0: {\n-        _0 = Div(move _1, const 256_i32); // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+        _0 = Div(_1, const 256_i32);     // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n         return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n     }\n }"}, {"sha": "7c5d28069d59d4f2bf1ec800f8fd4e1a7e179eb3", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -79,59 +79,42 @@\n       }\n   \n       bb6: {\n-          StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n           _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n           StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n           _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n-          StorageLive(_12);                // scope 3 at $DIR/funky_arms.rs:+15:48: +15:51\n-          _12 = _2;                        // scope 3 at $DIR/funky_arms.rs:+15:48: +15:51\n           StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n           _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n           StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n-          StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n-          _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n-          _15 = move _16 as u32 (IntToInt); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n-          StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:+15:74: +15:75\n+          _15 = _10 as u32 (IntToInt);     // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79\n-          StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:+15:81: +15:86\n-          _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:+15:81: +15:86\n-          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n+          _0 = float_to_exponential_common_exact::<T>(move _11, _2, move _13, move _14, _3) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb7: {\n-          StorageDead(_17);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n-          StorageDead(_12);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n-          StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:+16:5: +16:6\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }\n   \n       bb8: {\n           StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n           _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n-          StorageLive(_19);                // scope 2 at $DIR/funky_arms.rs:+17:51: +17:54\n-          _19 = _2;                        // scope 2 at $DIR/funky_arms.rs:+17:51: +17:54\n           StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n           _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n-          StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:+17:62: +17:67\n-          _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:+17:62: +17:67\n-          _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n+          _0 = float_to_exponential_common_shortest::<T>(move _18, _2, move _20, _3) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {\n-          StorageDead(_21);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n           StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n-          StorageDead(_19);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n           StorageDead(_18);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }"}, {"sha": "64c3e47ff46edb7b40ca5853b413e2773923d3ac", "filename": "tests/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -35,8 +35,8 @@\n           _4 = &(*_2);                     // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n -         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn_trait.rs:+2:5: +2:25\n +         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _5 = move _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _5 = _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(_5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn_trait.rs:34:5: 34:22\n -                                          // + literal: Const { ty: for<'a> fn(&'a <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }"}, {"sha": "3fa9c3e88f6349b265f00d3f0d3b91eb9707f50d", "filename": "tests/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -17,7 +17,7 @@\n           _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n           StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n -         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:16\n-+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(_2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn_trait.rs:27:5: 27:13\n -                                          // + literal: Const { ty: for<'a> fn(&'a (dyn Cache<V = <C as Cache>::V> + 'a)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }"}, {"sha": "20f737cc29f62904d92d2c6eaed05d054610357b", "filename": "tests/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -26,7 +26,7 @@ fn bar() -> bool {\n         _3 = const 1_i32;                // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         StorageLive(_4);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         _4 = const -1_i32;               // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n-        _0 = Eq(move _3, move _4);       // scope 2 at $DIR/inline_any_operand.rs:17:5: 17:11\n+        _0 = Eq(_3, _4);                 // scope 2 at $DIR/inline_any_operand.rs:17:5: 17:11\n         StorageDead(_4);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         StorageDead(_3);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline_any_operand.rs:+2:12: +2:13"}, {"sha": "57574acf92354e375130f3997eb20351aa41309d", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -92,7 +92,7 @@\n + \n +     bb3: {\n +         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n-+         switchInt(move _7) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         switchInt(_7) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n@@ -118,7 +118,7 @@\n +         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n +         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         ((_1 as Complete).0: bool) = move _7; // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         ((_1 as Complete).0: bool) = _7; // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         discriminant(_1) = 1;            // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         _12 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         discriminant((*_12)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41"}, {"sha": "b7c5bbecb6883a97306779d8f5e65278fe511dea", "filename": "tests/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -15,7 +15,7 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n-        _0 = <dyn X as X>::y(move _2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n+        _0 = <dyn X as X>::y(_2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline_trait_method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }"}, {"sha": "002392c5cf81a24c59eb8b600647cda96a1427a9", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -15,7 +15,7 @@\n       let mut _10: (u32, bool);            // in scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       let mut _11: (u32, bool);            // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n       scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:14:5: 14:17\n-          debug x => _5;                   // in scope 1 at $DIR/issue_101973.rs:5:13: 5:14\n+          debug x => _1;                   // in scope 1 at $DIR/issue_101973.rs:5:13: 5:14\n           let mut _12: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:27\n           let mut _13: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n           let mut _14: (u32, bool);        // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n@@ -33,18 +33,14 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n-          StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n-          StorageLive(_5);                 // scope 0 at $DIR/issue_101973.rs:+1:10: +1:16\n-          _5 = _1;                         // scope 0 at $DIR/issue_101973.rs:+1:10: +1:16\n           StorageLive(_12);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n           StorageLive(_13);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n-          _14 = CheckedShr(_5, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n+          _14 = CheckedShr(_1, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n           assert(!move (_14.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 0_i32) -> bb3; // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n       }\n   \n       bb1: {\n           _8 = move (_10.0: u32);          // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n-          StorageDead(_9);                 // scope 0 at $DIR/issue_101973.rs:+1:44: +1:45\n           _7 = BitAnd(move _8, const 15_u32); // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageDead(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:51: +1:52\n           _11 = CheckedShl(_7, const 1_i32); // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n@@ -54,11 +50,7 @@\n       bb2: {\n           _6 = move (_11.0: u32);          // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageDead(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:56: +1:57\n-          StorageLive(_15);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          _15 = _4;                        // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          StorageLive(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          _16 = _6;                        // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          _3 = rotate_right::<u32>(move _15, move _16) -> bb4; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          _3 = rotate_right::<u32>(_4, _6) -> bb4; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn(u32, u32) -> u32 {rotate_right::<u32>}, val: Value(<ZST>) }\n@@ -70,21 +62,13 @@\n           StorageDead(_13);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n           _4 = BitOr(const 0_u32, move _12); // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n           StorageDead(_12);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n-          StorageDead(_5);                 // scope 0 at $DIR/issue_101973.rs:+1:16: +1:17\n-          StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n-          StorageLive(_9);                 // scope 0 at $DIR/issue_101973.rs:+1:33: +1:39\n-          _9 = _1;                         // scope 0 at $DIR/issue_101973.rs:+1:33: +1:39\n-          _10 = CheckedShr(_9, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n+          _10 = CheckedShr(_1, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n           assert(!move (_10.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 8_i32) -> bb1; // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       }\n   \n       bb4: {\n-          StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          StorageDead(_15);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          StorageDead(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n-          StorageDead(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n           _2 = move _3 as i32 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageDead(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:64: +1:65\n           _0 = move _2 as i64 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:72"}, {"sha": "cc4f7cc06991f6b77ce66f0cee3f33c8789ede9e", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -29,24 +29,10 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_76432.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          StorageLive(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageLive(_5);                 // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n-          StorageLive(_6);                 // scope 0 at $DIR/issue_76432.rs:+1:21: +1:22\n-          _6 = _1;                         // scope 0 at $DIR/issue_76432.rs:+1:21: +1:22\n-          StorageLive(_7);                 // scope 0 at $DIR/issue_76432.rs:+1:24: +1:25\n-          _7 = _1;                         // scope 0 at $DIR/issue_76432.rs:+1:24: +1:25\n-          StorageLive(_8);                 // scope 0 at $DIR/issue_76432.rs:+1:27: +1:28\n-          _8 = _1;                         // scope 0 at $DIR/issue_76432.rs:+1:27: +1:28\n-          _5 = [move _6, move _7, move _8]; // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n-          StorageDead(_8);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n-          StorageDead(_7);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n-          StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n+          _5 = [_1, _1, _1];               // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          _3 = _4;                         // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n-          StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:29: +1:30\n+          _2 = _4 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           _9 = Len((*_2));                 // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n           _10 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n -         _11 = Eq(move _9, const 3_usize); // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33"}, {"sha": "dee1d538395ef86b9b5ec4b86666ae6478b72943", "filename": "tests/mir-opt/lower_array_len_e2e.array_bound.PreCodegen.after.mir", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -5,27 +5,23 @@ fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n     debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:50: +0:55\n     let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:70: +0:72\n     let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-    let mut _6: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let mut _7: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _6: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        _4 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        StorageLive(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _4 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _3 = Lt(_1, move _4);            // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n         switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n     }\n \n     bb1: {\n-        _6 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        _7 = Lt(_1, _6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _6 = Lt(_1, _5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n     }\n \n     bb2: {"}, {"sha": "e35fe758ab12ddea899bddedcba028e5e02fc4c3", "filename": "tests/mir-opt/lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -5,30 +5,26 @@ fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n     debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:54: +0:59\n     let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:78: +0:80\n     let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-    let mut _6: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let mut _7: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let _8: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-    let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-    let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _6: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let _7: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+    let mut _8: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+    let mut _9: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        _4 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        StorageLive(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _4 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _3 = Lt(_1, move _4);            // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n         switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n     }\n \n     bb1: {\n-        _6 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        _7 = Lt(_1, _6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _6 = Lt(_1, _5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n     }\n \n     bb2: {\n@@ -37,16 +33,16 @@ fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n     }\n \n     bb3: {\n-        StorageLive(_8);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-        _8 = const 0_usize;              // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-        _9 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-        _10 = Lt(const 0_usize, _9);     // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-        assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        StorageLive(_7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+        _7 = const 0_usize;              // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+        _8 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        _9 = Lt(const 0_usize, _8);      // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n     }\n \n     bb4: {\n-        (*_2)[_8] = const 42_u8;         // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:22\n-        StorageDead(_8);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:22: +4:23\n+        (*_2)[_7] = const 42_u8;         // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:22\n+        StorageDead(_7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:22: +4:23\n         _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len_e2e.rs:+6:9: +6:11\n         goto -> bb5;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +7:6\n     }"}, {"sha": "760f48d956d6288b3d72ea8edc06ed83e0e3ed90", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -37,7 +37,7 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     bb3: {\n         _5 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _4 = Add(move _5, const 1_i32);  // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n+        _4 = Add(_5, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n         Deinit(_0);                      // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n         ((_0 as Some).0: i32) = move _4; // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n         discriminant(_0) = 1;            // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30"}, {"sha": "b700adfb105b041ff1401f8de61169c5842846cf", "filename": "tests/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -10,13 +10,8 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify_match.rs:+1:11: +1:31\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_match.rs:+1:17: +1:18\n           _2 = const false;                // scope 0 at $DIR/simplify_match.rs:+1:21: +1:26\n--         _1 = _2;                         // scope 1 at $DIR/simplify_match.rs:+1:28: +1:29\n-+         _1 = const false;                // scope 1 at $DIR/simplify_match.rs:+1:28: +1:29\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_match.rs:+1:30: +1:31\n--         switchInt(_1) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n+-         switchInt(_2) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n +         switchInt(const false) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n       }\n   \n@@ -32,7 +27,6 @@\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify_match.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/simplify_match.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "97c18af31de7f9631017b3ad6c57b56f4ffc4af2", "filename": "tests/mir-opt/slice_filter.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.rs?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -1,21 +1,18 @@\n fn main() {\n     let input = vec![];\n-\n-    // 1761ms on my machine\n     let _variant_a_result = variant_a(&input);\n-\n-    //  656ms on my machine\n     let _variant_b_result = variant_b(&input);\n }\n \n-\n-// EMIT_MIR slice_filter.variant_a-{closure#0}.DestinationPropagation.diff\n pub fn variant_a(input: &[(usize, usize, usize, usize)]) -> usize {\n     input.iter().filter(|(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n }\n \n-\n-// EMIT_MIR slice_filter.variant_b-{closure#0}.DestinationPropagation.diff\n pub fn variant_b(input: &[(usize, usize, usize, usize)]) -> usize {\n     input.iter().filter(|&&(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n }\n+\n+// EMIT_MIR slice_filter.variant_a-{closure#0}.CopyProp.diff\n+// EMIT_MIR slice_filter.variant_a-{closure#0}.DestinationPropagation.diff\n+// EMIT_MIR slice_filter.variant_b-{closure#0}.CopyProp.diff\n+// EMIT_MIR slice_filter.variant_b-{closure#0}.DestinationPropagation.diff"}, {"sha": "ca8c04c386fa541b2b10565e3bb77320344e6f93", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "added", "additions": 283, "deletions": 0, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -0,0 +1,283 @@\n+- // MIR for `variant_a::{closure#0}` before CopyProp\n++ // MIR for `variant_a::{closure#0}` after CopyProp\n+  \n+  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n+      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n+      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n+      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n+      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n+              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _31: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _32: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _31;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _32;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n+              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _37: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _38: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _37;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _38;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n+              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _43: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _44: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _43;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _44;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n+              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _49: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _50: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _49;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _50;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _10 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _31 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _29 = _31;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _32 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _30 = _32;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _33 = (*_31);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _34 = (*_32);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb2: {\n+          StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _19 = &_3;                       // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _37 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _35 = _37;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _38 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _36 = _38;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _39 = (*_37);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _40 = (*_38);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb3: {\n+          StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n+      }\n+  \n+      bb4: {\n+          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb5: {\n+          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _14 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _43 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _41 = _43;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _44 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _42 = _44;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _45 = (*_43);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _46 = (*_44);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb6: {\n+          _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb7: {\n+          StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _23 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _49 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _47 = _49;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _50 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _48 = _50;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _51 = (*_49);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _52 = (*_50);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb8: {\n+          StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  }\n+  "}, {"sha": "30b49158b4ff89461f7c2fdfdbea99512413c9fd", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 127, "deletions": 223, "changes": 350, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -1,7 +1,7 @@\n - // MIR for `variant_a::{closure#0}` before DestinationPropagation\n + // MIR for `variant_a::{closure#0}` after DestinationPropagation\n   \n-  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:14:25: 14:39], _2: &&(usize, usize, usize, usize)) -> bool {\n+  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n       let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n       let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n@@ -11,141 +11,100 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n       let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n       let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n-      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n-      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _12: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _16: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n+      let mut _17: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n+      let mut _20: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       scope 1 {\n           debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n           debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n           debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n           debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:14:40: 14:46\n+          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n               debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _31: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _32: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _25: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _26: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _31;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _32;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _25;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _26;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _27: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _28: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n-          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:14:60: 14:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _37: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _38: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n+              debug self => _16;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _17;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _29: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _30: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _37;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _38;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _29;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _30;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _31: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _32: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n-          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:14:50: 14:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _43: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _44: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n+              debug self => _12;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _13;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _33: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _34: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _43;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _44;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _33;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _34;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _35: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _36: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n-          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:14:70: 14:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _49: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _50: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n+              debug self => _19;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _20;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _37: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _38: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _49;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _50;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _37;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _38;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _39: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _40: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _3 = &((*_21).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _4 = &((*_22).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _5 = &((*_23).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _6 = &((*_24).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n           StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n           _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n           StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageLive(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _31 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _29 = _31;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _32 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _30 = _32;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _33 = (*_31);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _34 = (*_32);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _10 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _25 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _26 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_27);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _27 = (*_25);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_28);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _28 = (*_26);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _8 = Le(move _27, move _28);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_28);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_27);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -157,159 +116,104 @@\n       }\n   \n       bb2: {\n--         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _37 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _35 = _37;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _38 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _36 = _38;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _39 = (*_37);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _40 = (*_38);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          _16 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _17 = &_3;                       // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _29 = deref_copy (*_16);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _30 = deref_copy (*_17);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_31);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _31 = (*_29);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_32);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _32 = (*_30);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _15 = Le(move _31, move _32);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_32);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_31);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n--         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n       bb4: {\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb5: {\n--         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+-         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageLive(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _43 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _41 = _43;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _44 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _42 = _44;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _45 = (*_43);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _46 = (*_44);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          _12 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _13 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _33 = deref_copy (*_12);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _34 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_35);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _35 = (*_33);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_36);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _36 = (*_34);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _11 = Le(move _35, move _36);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_36);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_35);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }\n   \n       bb6: {\n--         _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb7: {\n--         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+-         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageLive(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _49 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _47 = _49;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _50 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _48 = _50;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _51 = (*_49);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _52 = (*_50);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _0 = Le(move _51, move _52);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          _19 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _20 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _37 = deref_copy (*_19);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _38 = deref_copy (*_20);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_39);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _39 = (*_37);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_40);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _40 = (*_38);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _18 = Le(move _39, move _40);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _0 = Le(move _39, move _40);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_40);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_39);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb8: {\n--         StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n           goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }"}, {"sha": "5e4bdbdfa2e2f9683e0b5206db7181c30c81db94", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.CopyProp.diff", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -0,0 +1,139 @@\n+- // MIR for `variant_b::{closure#0}` before CopyProp\n++ // MIR for `variant_b::{closure#0}` after CopyProp\n+  \n+  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n+      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n+      let mut _9: usize;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:43\n+      let mut _10: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:47: +0:48\n+      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+      let mut _12: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:53\n+      let mut _13: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:57: +0:58\n+      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n+      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n+      let mut _16: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:63\n+      let mut _17: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:67: +0:68\n+      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n+      let mut _19: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:73\n+      let mut _20: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n+-         _9 = _3;                         // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n+-         _10 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n+-         _8 = Le(move _9, move _10);      // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n++         _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb2: {\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+-         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n+-         _16 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n+-         StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n+-         _17 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n+-         _15 = Le(move _16, move _17);    // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+-         StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n+-         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n++         _15 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb3: {\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n+      }\n+  \n+      bb4: {\n+          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb5: {\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+-         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n+-         _12 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n+-         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         _13 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         _11 = Le(move _12, move _13);    // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+-         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n++         _11 = Le(_6, _4);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+          _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb6: {\n+          _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb7: {\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n+-         _19 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n+-         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         _20 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         _18 = Le(move _19, move _20);    // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n++         _18 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+          _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb8: {\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  }\n+  "}, {"sha": "45af6600cd4e8ed268756a700123dbe015795fea", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 41, "deletions": 113, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -1,74 +1,42 @@\n - // MIR for `variant_b::{closure#0}` before DestinationPropagation\n + // MIR for `variant_b::{closure#0}` after DestinationPropagation\n   \n-  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:20:25: 20:41], _2: &&(usize, usize, usize, usize)) -> bool {\n+  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n       let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n       let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n       let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n       let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n       let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n-      let mut _9: usize;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:43\n-      let mut _10: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:47: +0:48\n-      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n-      let mut _12: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:53\n-      let mut _13: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:57: +0:58\n-      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n-      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n-      let mut _16: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:63\n-      let mut _17: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:67: +0:68\n-      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n-      let mut _19: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:73\n-      let mut _20: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n-      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n-      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _9: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+      let mut _10: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n+      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n+      let mut _13: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _14: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _15: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _16: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n       scope 1 {\n--         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n--         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n--         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n--         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n-+         debug a => _17;                  // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n-+         debug b => _19;                  // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n-+         debug c => _16;                  // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n-+         debug d => _20;                  // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n--         _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-+         _17 = ((*_21).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n--         _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-+         _19 = ((*_22).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n--         _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-+         _16 = ((*_23).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n--         _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _13 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _3 = ((*_13).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _14 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _4 = ((*_14).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _15 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _5 = ((*_15).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _16 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _6 = ((*_16).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-+         _20 = ((*_24).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n--         _9 = _3;                         // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n-+         _9 = _17;                        // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n--         _10 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n-+         _10 = _16;                       // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n-          _8 = Le(move _9, move _10);      // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n+          _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n       }\n   \n@@ -78,102 +46,62 @@\n       }\n   \n       bb2: {\n--         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n--         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n--         _16 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n--         StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n--         _17 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n-          _15 = Le(move _16, move _17);    // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n--         StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n--         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n-          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          _11 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          switchInt(move _11) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n       }\n   \n       bb3: {\n--         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n -         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n       }\n   \n       bb4: {\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n           goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n       }\n   \n       bb5: {\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n--         _12 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n-+         _12 = _20;                       // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n--         _13 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-+         _13 = _19;                       // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          _11 = Le(move _12, move _13);    // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n--         _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          _9 = Le(_6, _4);                 // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+-         _7 = move _9;                    // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n -         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-+         switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n++         switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n       }\n   \n       bb6: {\n--         _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+-         _10 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n +         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n       }\n   \n       bb7: {\n--         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n--         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n--         _19 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n--         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         _20 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         _18 = Le(move _19, move _20);    // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n--         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+-         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         _12 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         _10 = move _12;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         _0 = Le(move _19, move _20);     // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n++         _0 = Le(_4, _6);                 // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n       }\n   \n       bb8: {\n--         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n--         _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         _0 = move _10;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n           goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n       }"}, {"sha": "a4d2660ca6aeb54ff421adcb22bbd51462ab335b", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -5,11 +5,11 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n     let mut _2: std::ops::ControlFlow<E, T>; // in scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n     let mut _3: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:22\n-    let mut _4: T;                       // in scope 0 at $DIR/try_identity_e2e.rs:+4:48: +4:49\n-    let mut _5: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+5:46: +5:47\n+    let _4: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n+    let _5: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n     let mut _6: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+8:13: +8:37\n     let _7: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n-    let mut _8: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+9:49: +9:50\n+    let _8: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n     scope 1 {\n         debug v => _4;                   // in scope 1 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n     }"}, {"sha": "37851c66a6076006578e735fee0b181559b75db8", "filename": "tests/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -5,7 +5,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n     let mut _2: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:18\n     let _3: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n-    let mut _4: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+4:34: +4:35\n+    let _4: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n     scope 1 {\n         debug v => _3;                   // in scope 1 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n     }"}, {"sha": "318119bd477c1572cb3e155597251d5723ffa9b8", "filename": "tests/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ed9f8f62ebe52f388f9098fb4c05791f588729b/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=6ed9f8f62ebe52f388f9098fb4c05791f588729b", "patch": "@@ -4,51 +4,43 @@ fn while_loop(_1: bool) -> () {\n     debug c => _1;                       // in scope 0 at $DIR/while_storage.rs:+0:15: +0:16\n     let mut _0: ();                      // return place in scope 0 at $DIR/while_storage.rs:+0:24: +0:24\n     let mut _2: bool;                    // in scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n-    let mut _3: bool;                    // in scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n-    let mut _4: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n-    let mut _5: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n+    let mut _3: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n \n     bb0: {\n         goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n     }\n \n     bb1: {\n         StorageLive(_2);                 // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n-        StorageLive(_3);                 // scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n-        _3 = _1;                         // scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n-        _2 = get_bool(move _3) -> bb2;   // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n+        _2 = get_bool(_1) -> bb2;        // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n                                          // mir::Constant\n                                          // + span: $DIR/while_storage.rs:10:11: 10:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+1:21: +1:22\n         switchInt(move _2) -> [0: bb7, otherwise: bb3]; // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n     }\n \n     bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n-        StorageLive(_5);                 // scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n-        _5 = _1;                         // scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n-        _4 = get_bool(move _5) -> bb4;   // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        StorageLive(_3);                 // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        _3 = get_bool(_1) -> bb4;        // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n                                          // mir::Constant\n                                          // + span: $DIR/while_storage.rs:11:12: 11:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 0 at $DIR/while_storage.rs:+2:22: +2:23\n-        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        switchInt(move _3) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n+        StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n         goto -> bb7;                     // scope 0 at no-location\n     }\n \n     bb6: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n+        StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n         StorageDead(_2);                 // scope 0 at $DIR/while_storage.rs:+5:5: +5:6\n         goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n     }"}]}