{"sha": "41dd35503a358b652cfbbf7fba499cbaf1234637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZGQzNTUwM2EzNThiNjUyY2ZiYmY3ZmJhNDk5Y2JhZjEyMzQ2Mzc=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-01-10T23:58:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-10T10:23:08Z"}, "message": "Implement `discriminant_value` intrinsic\n\nImplements an intrinsic for extracting the value of the discriminant\nenum variant values. For non-enum types, this returns zero, otherwise it\nreturns the value we use for discriminant comparisons. This means that\nenum types that do not have a discriminant will also work in this\narrangement.\n\nThis is (at least part of) the work on Issue #24263", "tree": {"sha": "02479899a1c7e3fa021bf26cf22fe8636c4b323d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02479899a1c7e3fa021bf26cf22fe8636c4b323d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41dd35503a358b652cfbbf7fba499cbaf1234637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41dd35503a358b652cfbbf7fba499cbaf1234637", "html_url": "https://github.com/rust-lang/rust/commit/41dd35503a358b652cfbbf7fba499cbaf1234637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41dd35503a358b652cfbbf7fba499cbaf1234637/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b95d8bed8afff7262ec5623677e320bf63d2230", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b95d8bed8afff7262ec5623677e320bf63d2230", "html_url": "https://github.com/rust-lang/rust/commit/6b95d8bed8afff7262ec5623677e320bf63d2230"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "80f506ebc0643053bad8190a616e3d9550218dc6", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41dd35503a358b652cfbbf7fba499cbaf1234637/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dd35503a358b652cfbbf7fba499cbaf1234637/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=41dd35503a358b652cfbbf7fba499cbaf1234637", "patch": "@@ -569,4 +569,10 @@ extern \"rust-intrinsic\" {\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2^N, where N is the width of N in bits.\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n+\n+    /// Returns the value of the discriminant for the variant in 'v',\n+    /// cast to a `u64`; if `T` has no discriminant, returns 0.\n+    // SNAP 5520801\n+    #[cfg(not(stage0))]\n+    pub fn discriminant_value<T>(v: &T) -> u64;\n }"}, {"sha": "fc3c0841dd84e9a3c6f837dfe7c64cc84baaf862", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41dd35503a358b652cfbbf7fba499cbaf1234637/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dd35503a358b652cfbbf7fba499cbaf1234637/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=41dd35503a358b652cfbbf7fba499cbaf1234637", "patch": "@@ -14,6 +14,7 @@ use llvm;\n use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef, TypeKind};\n use middle::subst;\n use middle::subst::FnSpace;\n+use trans::adt;\n use trans::base::*;\n use trans::build::*;\n use trans::callee;\n@@ -683,6 +684,17 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n+        (_, \"discriminant_value\") => {\n+            let val_ty = substs.types.get(FnSpace, 0);\n+            match val_ty.sty {\n+                ty::ty_enum(..) => {\n+                    let repr = adt::represent_type(ccx, *val_ty);\n+                    adt::trans_get_discr(bcx, &*repr, llargs[0], Some(llret_ty))\n+                }\n+                _ => C_null(llret_ty)\n+            }\n+        }\n+\n         // This requires that atomic intrinsics follow a specific naming pattern:\n         // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n         (_, name) if name.starts_with(\"atomic_\") => {"}, {"sha": "31039e3abca6eb6729f9c5d2b16fa2b1cdca9bae", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41dd35503a358b652cfbbf7fba499cbaf1234637/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dd35503a358b652cfbbf7fba499cbaf1234637/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=41dd35503a358b652cfbbf7fba499cbaf1234637", "patch": "@@ -5073,6 +5073,12 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n \n             \"assume\" => (0, vec![tcx.types.bool], ty::mk_nil(tcx)),\n \n+            \"discriminant_value\" => (1, vec![\n+                    ty::mk_imm_rptr(tcx,\n+                                    tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1),\n+                                                                  ty::BrAnon(0))),\n+                                    param(ccx, 0))], tcx.types.u64),\n+\n             ref other => {\n                 span_err!(tcx.sess, it.span, E0093,\n                     \"unrecognized intrinsic function: `{}`\", *other);"}]}