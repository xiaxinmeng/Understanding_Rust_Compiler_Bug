{"sha": "425297a93035bc89663ff5f83d229f6c19341ffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNTI5N2E5MzAzNWJjODk2NjNmZjVmODNkMjI5ZjZjMTkzNDFmZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-11T23:51:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-11T23:51:30Z"}, "message": "Auto merge of #23156 - GuillaumeGomez:remove-proc, r=alexcrichton\n\nThis is the implementation of the [RFC 584](https://github.com/rust-lang/rfcs/pull/584).", "tree": {"sha": "5e2406b181498f03ec352b883f4be61862114f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e2406b181498f03ec352b883f4be61862114f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/425297a93035bc89663ff5f83d229f6c19341ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/425297a93035bc89663ff5f83d229f6c19341ffb", "html_url": "https://github.com/rust-lang/rust/commit/425297a93035bc89663ff5f83d229f6c19341ffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/425297a93035bc89663ff5f83d229f6c19341ffb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4812b6136797bbe3daec7fb8c6673a87998b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4812b6136797bbe3daec7fb8c6673a87998b37", "html_url": "https://github.com/rust-lang/rust/commit/ae4812b6136797bbe3daec7fb8c6673a87998b37"}, {"sha": "db726faf324c9258c3e93f15d41ada4f9d008f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/db726faf324c9258c3e93f15d41ada4f9d008f66", "html_url": "https://github.com/rust-lang/rust/commit/db726faf324c9258c3e93f15d41ada4f9d008f66"}], "stats": {"total": 84, "additions": 8, "deletions": 76}, "files": [{"sha": "ee646d95f35a42f8f9de737f7beeece3ef8aa37e", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=425297a93035bc89663ff5f83d229f6c19341ffb", "patch": "@@ -24,8 +24,6 @@ use ptr::P;\n pub enum ObsoleteSyntax {\n     Sized,\n     ForSized,\n-    ProcType,\n-    ProcExpr,\n     ClosureType,\n     ClosureKind,\n     EmptyIndex,\n@@ -57,16 +55,6 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                  by default\",\n                 true,\n             ),\n-            ObsoleteSyntax::ProcType => (\n-                \"the `proc` type\",\n-                \"use unboxed closures instead\",\n-                true,\n-            ),\n-            ObsoleteSyntax::ProcExpr => (\n-                \"`proc` expression\",\n-                \"use a `move ||` expression instead\",\n-                true,\n-            ),\n             ObsoleteSyntax::ClosureType => (\n                 \"`|usize| -> bool` closure type\",\n                 \"use unboxed closures instead, no type annotation needed\","}, {"sha": "b0ae612d4b0c2b7e9da382259837cc5b4f28efa9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=425297a93035bc89663ff5f83d229f6c19341ffb", "patch": "@@ -1051,9 +1051,7 @@ impl<'a> Parser<'a> {\n         let lifetime_defs = self.parse_late_bound_lifetime_defs();\n \n         // examine next token to decide to do\n-        if self.eat_keyword_noexpect(keywords::Proc) {\n-            self.parse_proc_type(lifetime_defs)\n-        } else if self.token_is_bare_fn_keyword() || self.token_is_closure_keyword() {\n+        if self.token_is_bare_fn_keyword() || self.token_is_closure_keyword() {\n             self.parse_ty_bare_fn_or_ty_closure(lifetime_defs)\n         } else if self.check(&token::ModSep) ||\n                   self.token.is_ident() ||\n@@ -1121,35 +1119,6 @@ impl<'a> Parser<'a> {\n         }))\n     }\n \n-    /// Parses a procedure type (`proc`). The initial `proc` keyword must\n-    /// already have been parsed.\n-    pub fn parse_proc_type(&mut self, lifetime_defs: Vec<ast::LifetimeDef>) -> Ty_ {\n-        /*\n-\n-        proc <'lt> (S) [:Bounds] -> T\n-        ^~~^ ^~~~^  ^  ^~~~~~~~^    ^\n-         |     |    |      |        |\n-         |     |    |      |      Return type\n-         |     |    |    Bounds\n-         |     |  Argument types\n-         |   Legacy lifetimes\n-        the `proc` keyword (already consumed)\n-\n-        */\n-\n-        let proc_span = self.last_span;\n-\n-        // To be helpful, parse the proc as ever\n-        let _ = self.parse_legacy_lifetime_defs(lifetime_defs);\n-        let _ = self.parse_fn_args(false, false);\n-        let _ = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n-        let _ = self.parse_ret_ty();\n-\n-        self.obsolete(proc_span, ObsoleteSyntax::ProcType);\n-\n-        TyInfer\n-    }\n-\n     /// Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).\n     pub fn parse_obsolete_closure_kind(&mut self) {\n          let lo = self.span.lo;\n@@ -1522,8 +1491,6 @@ impl<'a> Parser<'a> {\n             let e = self.parse_expr();\n             self.expect(&token::CloseDelim(token::Paren));\n             TyTypeof(e)\n-        } else if self.eat_keyword_noexpect(keywords::Proc) {\n-            self.parse_proc_type(Vec::new())\n         } else if self.eat_lt() {\n             // QUALIFIED PATH `<TYPE as TRAIT_REF>::item`\n             let self_type = self.parse_ty_sum();\n@@ -2285,12 +2252,6 @@ impl<'a> Parser<'a> {\n                 if self.eat_keyword(keywords::Move) {\n                     return self.parse_lambda_expr(CaptureByValue);\n                 }\n-                if self.eat_keyword_noexpect(keywords::Proc) {\n-                    let span = self.last_span;\n-                    let _ = self.parse_proc_decl();\n-                    let _ = self.parse_expr();\n-                    return self.obsolete_expr(span, ObsoleteSyntax::ProcExpr);\n-                }\n                 if self.eat_keyword(keywords::If) {\n                     return self.parse_if_expr();\n                 }\n@@ -4645,23 +4606,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Parses the `(arg, arg) -> return_type` header on a procedure.\n-    fn parse_proc_decl(&mut self) -> P<FnDecl> {\n-        let inputs =\n-            self.parse_unspanned_seq(&token::OpenDelim(token::Paren),\n-                                     &token::CloseDelim(token::Paren),\n-                                     seq_sep_trailing_allowed(token::Comma),\n-                                     |p| p.parse_fn_block_arg());\n-\n-        let output = self.parse_ret_ty();\n-\n-        P(FnDecl {\n-            inputs: inputs,\n-            output: output,\n-            variadic: false\n-        })\n-    }\n-\n     /// Parse the name and optional generic types of a function header.\n     fn parse_fn_header(&mut self) -> (Ident, ast::Generics) {\n         let id = self.parse_ident();"}, {"sha": "4a3ea971c7a36e5a09368830dc500764329b3919", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=425297a93035bc89663ff5f83d229f6c19341ffb", "patch": "@@ -561,11 +561,11 @@ declare_special_idents_and_keywords! {\n         (39,                         Virtual,    \"virtual\");\n         (40,                         While,      \"while\");\n         (41,                         Continue,   \"continue\");\n-        (42,                         Proc,       \"proc\");\n-        (43,                         Box,        \"box\");\n-        (44,                         Const,      \"const\");\n-        (45,                         Where,      \"where\");\n+        (42,                         Box,        \"box\");\n+        (43,                         Const,      \"const\");\n+        (44,                         Where,      \"where\");\n         'reserved:\n+        (45,                         Proc,       \"proc\");\n         (46,                         Alignof,    \"alignof\");\n         (47,                         Become,     \"become\");\n         (48,                         Offsetof,   \"offsetof\");"}, {"sha": "f1ed0be7640a96b69237b771c609f00f4c540a21", "filename": "src/test/parse-fail/obsolete-proc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/425297a93035bc89663ff5f83d229f6c19341ffb/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fobsolete-proc.rs?ref=425297a93035bc89663ff5f83d229f6c19341ffb", "patch": "@@ -10,8 +10,8 @@\n \n // Test that we generate obsolete syntax errors around usages of `proc`.\n \n-fn foo(p: proc()) { } //~ ERROR obsolete syntax: the `proc` type\n+fn foo(p: proc()) { } //~ ERROR `proc` is a reserved keyword\n \n-fn bar() { proc() 1; } //~ ERROR obsolete syntax: `proc` expression\n+fn bar() { proc() 1; }\n \n-fn main() { }\n+fn main() { }\n\\ No newline at end of file"}]}