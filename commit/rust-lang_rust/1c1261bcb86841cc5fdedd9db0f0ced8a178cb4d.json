{"sha": "1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMTI2MWJjYjg2ODQxY2M1ZmRlZGQ5ZGIwZjBjZWQ4YTE3OGNiNGQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-17T14:45:38Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-17T21:47:03Z"}, "message": "Simplify get_tydesc's API", "tree": {"sha": "2145e09239b9448cc97a9426cfd6ea38510f2152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2145e09239b9448cc97a9426cfd6ea38510f2152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "html_url": "https://github.com/rust-lang/rust/commit/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4206cdc4e731d0b172d76b2d652bf0ecaa9ca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4206cdc4e731d0b172d76b2d652bf0ecaa9ca1", "html_url": "https://github.com/rust-lang/rust/commit/9f4206cdc4e731d0b172d76b2d652bf0ecaa9ca1"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "62039d472a9cf79f5be6faa5975a6535187ef0c5", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "patch": "@@ -343,8 +343,7 @@ fn dynastack_alloca(cx: @block_ctxt, t: TypeRef, n: ValueRef, ty: ty::t) ->\n                    C_uint(bcx_ccx(bcx), llsize_of_real(bcx_ccx(bcx), t)),\n                    n);\n \n-    let ti = none;\n-    let lltydesc = get_tydesc(cx, ty, false, ti).result.val;\n+    let lltydesc = get_tydesc_simple(cx, ty, false).val;\n \n     let llresult = Call(dy_cx, dynastack_alloc, [llsz, lltydesc]);\n     ret PointerCast(dy_cx, llresult, T_ptr(t));\n@@ -531,7 +530,7 @@ fn trans_malloc_boxed_raw(bcx: @block_ctxt, t: ty::t,\n     let llty = type_of(ccx, box_ptr);\n \n     // Get the tydesc for the body:\n-    let {bcx, val: lltydesc} = get_tydesc(bcx, t, true, static_ti).result;\n+    let {bcx, val: lltydesc} = get_tydesc(bcx, t, true, static_ti);\n     lazily_emit_all_tydesc_glue(ccx, static_ti);\n \n     // Allocate space:\n@@ -556,8 +555,7 @@ fn trans_malloc_boxed(bcx: @block_ctxt, t: ty::t) ->\n // tydesc if necessary.\n fn field_of_tydesc(cx: @block_ctxt, t: ty::t, escapes: bool, field: int) ->\n    result {\n-    let ti = none::<@tydesc_info>;\n-    let tydesc = get_tydesc(cx, t, escapes, ti).result;\n+    let tydesc = get_tydesc_simple(cx, t, escapes);\n     ret rslt(tydesc.bcx,\n              GEPi(tydesc.bcx, tydesc.val, [0, field]));\n }\n@@ -678,36 +676,28 @@ fn get_derived_tydesc(cx: @block_ctxt, t: ty::t, escapes: bool,\n     ret rslt(cx, v);\n }\n \n-type get_tydesc_result = {kind: tydesc_kind, result: result};\n+fn get_tydesc_simple(bcx: block, t: ty::t, escapes: bool) -> result {\n+    let ti = none;\n+    get_tydesc(bcx, t, escapes, ti)\n+}\n \n fn get_tydesc(cx: @block_ctxt, t: ty::t, escapes: bool,\n-              &static_ti: option<@tydesc_info>)\n-   -> get_tydesc_result {\n+              &static_ti: option<@tydesc_info>) -> result {\n \n     // Is the supplied type a type param? If so, return the passed-in tydesc.\n     alt ty::type_param(t) {\n-      some(id) {\n-        if id < cx.fcx.lltyparams.len() {\n-            ret {kind: tk_param,\n-                 result: rslt(cx, cx.fcx.lltyparams[id].desc)};\n-        } else {\n-            bcx_tcx(cx).sess.bug(\"Unbound typaram in get_tydesc: t = \" +\n-                                 ty_to_str(bcx_tcx(cx), t) + \" ty_param = \" +\n-                                 uint::str(id));\n-        }\n-      }\n+      some(id) { ret rslt(cx, cx.fcx.lltyparams[id].desc); }\n       none {/* fall through */ }\n     }\n \n     // Does it contain a type param? If so, generate a derived tydesc.\n     if ty::type_has_params(t) {\n-        ret {kind: tk_derived,\n-             result: get_derived_tydesc(cx, t, escapes, static_ti)};\n+        ret get_derived_tydesc(cx, t, escapes, static_ti);\n     }\n     // Otherwise, generate a tydesc if necessary, and return it.\n     let info = get_static_tydesc(bcx_ccx(cx), t, []);\n     static_ti = some(info);\n-    ret {kind: tk_static, result: rslt(cx, info.tydesc)};\n+    ret rslt(cx, info.tydesc);\n }\n \n fn get_static_tydesc(ccx: @crate_ctxt, t: ty::t, ty_params: [uint])\n@@ -1062,8 +1052,7 @@ fn trans_res_drop(cx: @block_ctxt, rs: ValueRef, did: ast::def_id,\n     let dtor_addr = common::get_res_dtor(ccx, did, inner_t);\n     let args = [cx.fcx.llretptr, null_env_ptr(cx)];\n     for tp: ty::t in tps {\n-        let ti: option<@tydesc_info> = none;\n-        let td = get_tydesc(cx, tp, false, ti).result;\n+        let td = get_tydesc_simple(cx, tp, false);\n         args += [td.val];\n         cx = td.bcx;\n     }\n@@ -1448,7 +1437,7 @@ fn call_tydesc_glue_full(cx: @block_ctxt, v: ValueRef, tydesc: ValueRef,\n fn call_tydesc_glue(cx: @block_ctxt, v: ValueRef, t: ty::t, field: int) ->\n    @block_ctxt {\n     let ti: option<@tydesc_info> = none::<@tydesc_info>;\n-    let {bcx: bcx, val: td} = get_tydesc(cx, t, false, ti).result;\n+    let {bcx: bcx, val: td} = get_tydesc(cx, t, false, ti);\n     call_tydesc_glue_full(bcx, v, td, field, ti);\n     ret bcx;\n }\n@@ -1469,8 +1458,7 @@ fn call_cmp_glue(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n \n     let llrawlhsptr = BitCast(bcx, lllhs, T_ptr(T_i8()));\n     let llrawrhsptr = BitCast(bcx, llrhs, T_ptr(T_i8()));\n-    let ti = none;\n-    r = get_tydesc(bcx, t, false, ti).result;\n+    r = get_tydesc_simple(bcx, t, false);\n     let lltydesc = r.val;\n     bcx = r.bcx;\n     let lltydescs =\n@@ -2356,7 +2344,7 @@ fn lval_static_fn(bcx: @block_ctxt, fn_id: ast::def_id, id: ast::node_id,\n         for t in tys {\n             // TODO: Doesn't always escape.\n             let ti = none;\n-            let td = get_tydesc(bcx, t, true, ti).result;\n+            let td = get_tydesc(bcx, t, true, ti);\n             tis += [ti];\n             bcx = td.bcx;\n             tydescs += [td.val];\n@@ -3489,8 +3477,7 @@ fn trans_log(lvl: @ast::expr, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n     let e_ty = expr_ty(cx, e);\n     let log_bcx = sub.bcx;\n \n-    let ti = none::<@tydesc_info>;\n-    let r = get_tydesc(log_bcx, e_ty, false, ti).result;\n+    let r = get_tydesc_simple(log_bcx, e_ty, false);\n     log_bcx = r.bcx;\n     let lltydesc = r.val;\n "}, {"sha": "2f311137bf6a7a35fa62f26db6c7cc406c3e09bd", "filename": "src/comp/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs?ref=1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "patch": "@@ -185,8 +185,7 @@ fn allocate_cbox(bcx: @block_ctxt,\n                          &ti: option::t<@tydesc_info>) -> @block_ctxt {\n         let ccx = bcx_ccx(bcx);\n         let bound_tydesc = GEPi(bcx, box, [0, abi::box_field_tydesc]);\n-        let {bcx, val: td} =\n-            base::get_tydesc(bcx, cdata_ty, true, ti).result;\n+        let {bcx, val: td} = base::get_tydesc(bcx, cdata_ty, true, ti);\n         let td = Call(bcx, ccx.upcalls.create_shared_type_desc, [td]);\n         Store(bcx, td, bound_tydesc);\n         bcx"}, {"sha": "00587c03144aca37b4487473226becfbc25770a5", "filename": "src/comp/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "patch": "@@ -31,12 +31,6 @@ fn new_namegen() -> namegen {\n \n type derived_tydesc_info = {lltydesc: ValueRef, escapes: bool};\n \n-enum tydesc_kind {\n-    tk_static, // Static (monomorphic) type descriptor\n-    tk_param, // Type parameter.\n-    tk_derived, // Derived from a typaram or another derived tydesc.\n-}\n-\n type tydesc_info =\n     {ty: ty::t,\n      tydesc: ValueRef,"}, {"sha": "e3970a3297df624daf7f8f92fa950051443ab76a", "filename": "src/comp/middle/trans/impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs?ref=1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "patch": "@@ -124,7 +124,7 @@ fn trans_vtable_callee(bcx: @block_ctxt, env: callee_env, dict: ValueRef,\n         let tptys = node_id_type_params(bcx, callee_id);\n         for t in vec::tail_n(tptys, tptys.len() - (*method.tps).len()) {\n             let ti = none;\n-            let td = get_tydesc(bcx, t, true, ti).result;\n+            let td = get_tydesc(bcx, t, true, ti);\n             tis += [ti];\n             tydescs += [td.val];\n             bcx = td.bcx;\n@@ -489,9 +489,9 @@ fn get_dict_ptrs(bcx: @block_ctxt, origin: typeck::dict_origin)\n       typeck::dict_static(impl_did, tys, sub_origins) {\n         let impl_params = ty::lookup_item_type(ccx.tcx, impl_did).bounds;\n         let ptrs = [get_vtable(ccx, impl_did)];\n-        let origin = 0u, ti = none, bcx = bcx;\n+        let origin = 0u, bcx = bcx;\n         vec::iter2(*impl_params, tys) {|param, ty|\n-            let rslt = get_tydesc(bcx, ty, true, ti).result;\n+            let rslt = get_tydesc_simple(bcx, ty, true);\n             ptrs += [rslt.val];\n             bcx = rslt.bcx;\n             for bound in *param {"}, {"sha": "3a4cb891a3e73e430fae1704030a12de4d9d4bd0", "filename": "src/comp/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fshape.rs?ref=1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "patch": "@@ -717,8 +717,7 @@ fn dynamic_metrics(cx: @block_ctxt, t: ty::t) -> metrics {\n \n     alt ty::get(t).struct {\n       ty::ty_param(p, _) {\n-        let ti = none;\n-        let {bcx, val: tydesc} = base::get_tydesc(cx, t, false, ti).result;\n+        let {bcx, val: tydesc} = base::get_tydesc_simple(cx, t, false);\n         let szptr = GEPi(bcx, tydesc, [0, abi::tydesc_field_size]);\n         let aptr = GEPi(bcx, tydesc, [0, abi::tydesc_field_align]);\n         {bcx: bcx, sz: Load(bcx, szptr), align: Load(bcx, aptr)}"}, {"sha": "b0f4ced69aef19543571e869b7d66922c7fec7ed", "filename": "src/comp/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d/src%2Fcomp%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Ftvec.rs?ref=1c1261bcb86841cc5fdedd9db0f0ced8a178cb4d", "patch": "@@ -211,8 +211,7 @@ fn trans_append_literal(bcx: @block_ctxt, vptrptr: ValueRef, vec_ty: ty::t,\n     let ccx = bcx_ccx(bcx);\n     let elt_ty = ty::sequence_element_type(bcx_tcx(bcx), vec_ty);\n     let ti = none;\n-    let {bcx: bcx, val: td} =\n-        get_tydesc(bcx, elt_ty, false, ti).result;\n+    let {bcx: bcx, val: td} = get_tydesc(bcx, elt_ty, false, ti);\n     base::lazily_emit_tydesc_glue(ccx, abi::tydesc_field_take_glue, ti);\n     let opaque_v = PointerCast(bcx, vptrptr,\n                                T_ptr(T_ptr(ccx.opaque_vec_type)));"}]}