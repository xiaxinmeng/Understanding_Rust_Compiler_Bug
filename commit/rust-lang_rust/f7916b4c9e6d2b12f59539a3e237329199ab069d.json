{"sha": "f7916b4c9e6d2b12f59539a3e237329199ab069d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OTE2YjRjOWU2ZDJiMTJmNTk1MzlhM2UyMzczMjkxOTlhYjA2OWQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-24T10:54:26Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-25T18:11:29Z"}, "message": "Fix `unused_unsafe` in THIR unsafeck", "tree": {"sha": "0e14b7b0e88567827e0246d3eb552bca861f5f17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e14b7b0e88567827e0246d3eb552bca861f5f17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7916b4c9e6d2b12f59539a3e237329199ab069d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7916b4c9e6d2b12f59539a3e237329199ab069d", "html_url": "https://github.com/rust-lang/rust/commit/f7916b4c9e6d2b12f59539a3e237329199ab069d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7916b4c9e6d2b12f59539a3e237329199ab069d/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0835410bbd8c80af3a1376d112291030d08f9c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0835410bbd8c80af3a1376d112291030d08f9c6", "html_url": "https://github.com/rust-lang/rust/commit/b0835410bbd8c80af3a1376d112291030d08f9c6"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "971b6dd9e1c8905bcd592f56342eba299fc9cd1e", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f7916b4c9e6d2b12f59539a3e237329199ab069d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7916b4c9e6d2b12f59539a3e237329199ab069d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=f7916b4c9e6d2b12f59539a3e237329199ab069d", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             self.warn_unused_unsafe(\n                 hir_id,\n                 block_span,\n-                Some(self.tcx.sess.source_map().guess_head_span(enclosing_span)),\n+                Some((self.tcx.sess.source_map().guess_head_span(enclosing_span), \"block\")),\n             );\n             f(self);\n         } else {\n@@ -52,7 +52,15 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             f(self);\n \n             if let SafetyContext::UnsafeBlock { used: false, span, hir_id } = self.safety_context {\n-                self.warn_unused_unsafe(hir_id, span, self.body_unsafety.unsafe_fn_sig_span());\n+                self.warn_unused_unsafe(\n+                    hir_id,\n+                    span,\n+                    if self.unsafe_op_in_unsafe_fn_allowed() {\n+                        self.body_unsafety.unsafe_fn_sig_span().map(|span| (span, \"fn\"))\n+                    } else {\n+                        None\n+                    },\n+                );\n             }\n             self.safety_context = prev_context;\n             return;\n@@ -108,18 +116,15 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         block_span: Span,\n-        enclosing_span: Option<Span>,\n+        enclosing_unsafe: Option<(Span, &'static str)>,\n     ) {\n         let block_span = self.tcx.sess.source_map().guess_head_span(block_span);\n         self.tcx.struct_span_lint_hir(UNUSED_UNSAFE, hir_id, block_span, |lint| {\n             let msg = \"unnecessary `unsafe` block\";\n             let mut db = lint.build(msg);\n             db.span_label(block_span, msg);\n-            if let Some(enclosing_span) = enclosing_span {\n-                db.span_label(\n-                    enclosing_span,\n-                    format!(\"because it's nested under this `unsafe` block\"),\n-                );\n+            if let Some((span, kind)) = enclosing_unsafe {\n+                db.span_label(span, format!(\"because it's nested under this `unsafe` {}\", kind));\n             }\n             db.emit();\n         });"}]}