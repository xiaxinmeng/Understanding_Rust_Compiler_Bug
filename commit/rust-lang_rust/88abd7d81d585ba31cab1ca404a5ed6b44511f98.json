{"sha": "88abd7d81d585ba31cab1ca404a5ed6b44511f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YWJkN2Q4MWQ1ODViYTMxY2FiMWNhNDA0YTVlZDZiNDQ1MTFmOTg=", "commit": {"author": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-06-18T07:09:40Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-06-18T07:09:40Z"}, "message": "Lint for unused borrows as part of UNUSED_MUST_USE", "tree": {"sha": "55606dc550df3ae61e23c55d6d8ca8a74ba1e461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55606dc550df3ae61e23c55d6d8ca8a74ba1e461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88abd7d81d585ba31cab1ca404a5ed6b44511f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88abd7d81d585ba31cab1ca404a5ed6b44511f98", "html_url": "https://github.com/rust-lang/rust/commit/88abd7d81d585ba31cab1ca404a5ed6b44511f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88abd7d81d585ba31cab1ca404a5ed6b44511f98/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a462831ad4c6966f3baabe5cbf21cb9f330ffc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a462831ad4c6966f3baabe5cbf21cb9f330ffc4", "html_url": "https://github.com/rust-lang/rust/commit/1a462831ad4c6966f3baabe5cbf21cb9f330ffc4"}], "stats": {"total": 148, "additions": 113, "deletions": 35}, "files": [{"sha": "c431c048ca01c1179dbfdf976b4a982a4905de39", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -154,6 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 | hir::BinOpKind::Shl\n                 | hir::BinOpKind::Shr => Some(\"bitwise operation\"),\n             },\n+            hir::ExprKind::AddrOf(..) => Some(\"borrow\"),\n             hir::ExprKind::Unary(..) => Some(\"unary operation\"),\n             _ => None,\n         };"}, {"sha": "b916113a0e551f8e50df375831751344139f0fdd", "filename": "compiler/rustc_macros/src/hash_stable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -54,7 +54,7 @@ pub fn hash_stable_generic_derive(mut s: synstructure::Structure<'_>) -> proc_ma\n             quote! {}\n         } else if let Some(project) = attrs.project {\n             quote! {\n-                &#bi.#project.hash_stable(__hcx, __hasher);\n+                (&#bi.#project).hash_stable(__hcx, __hasher);\n             }\n         } else {\n             quote! {\n@@ -96,7 +96,7 @@ pub fn hash_stable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::To\n             quote! {}\n         } else if let Some(project) = attrs.project {\n             quote! {\n-                &#bi.#project.hash_stable(__hcx, __hasher);\n+                (&#bi.#project).hash_stable(__hcx, __hasher);\n             }\n         } else {\n             quote! {"}, {"sha": "a1e819cf8f9e44b1cdfb53905b3dcf92212c4661", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -534,7 +534,7 @@ mod slice_index {\n     #[test]\n     #[should_panic]\n     fn test_slice_fail() {\n-        &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n+        let _ = &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n     }\n \n     panic_cases! {\n@@ -714,13 +714,13 @@ mod slice_index {\n     #[test]\n     #[should_panic(expected = \"byte index 1024 is out of bounds of `Lorem ipsum dolor sit amet\")]\n     fn test_slice_fail_truncated_1() {\n-        &LOREM_PARAGRAPH[..1024];\n+        let _ = &LOREM_PARAGRAPH[..1024];\n     }\n     // check the truncation in the panic message\n     #[test]\n     #[should_panic(expected = \"luctus, im`[...]\")]\n     fn test_slice_fail_truncated_2() {\n-        &LOREM_PARAGRAPH[..1024];\n+        let _ = &LOREM_PARAGRAPH[..1024];\n     }\n }\n \n@@ -735,7 +735,7 @@ fn test_str_slice_rangetoinclusive_ok() {\n #[should_panic]\n fn test_str_slice_rangetoinclusive_notok() {\n     let s = \"abc\u03b1\u03b2\u03b3\";\n-    &s[..=3];\n+    let _ = &s[..=3];\n }\n \n #[test]\n@@ -751,7 +751,7 @@ fn test_str_slicemut_rangetoinclusive_ok() {\n fn test_str_slicemut_rangetoinclusive_notok() {\n     let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n     let s: &mut str = &mut s;\n-    &mut s[..=3];\n+    let _ = &mut s[..=3];\n }\n \n #[test]"}, {"sha": "3b7237016800fac107de9030ec87d79089c279b0", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -542,35 +542,35 @@ fn test_index_out_of_bounds() {\n #[should_panic]\n fn test_slice_out_of_bounds_1() {\n     let x = vec![1, 2, 3, 4, 5];\n-    &x[!0..];\n+    let _ = &x[!0..];\n }\n \n #[test]\n #[should_panic]\n fn test_slice_out_of_bounds_2() {\n     let x = vec![1, 2, 3, 4, 5];\n-    &x[..6];\n+    let _ = &x[..6];\n }\n \n #[test]\n #[should_panic]\n fn test_slice_out_of_bounds_3() {\n     let x = vec![1, 2, 3, 4, 5];\n-    &x[!0..4];\n+    let _ = &x[!0..4];\n }\n \n #[test]\n #[should_panic]\n fn test_slice_out_of_bounds_4() {\n     let x = vec![1, 2, 3, 4, 5];\n-    &x[1..6];\n+    let _ = &x[1..6];\n }\n \n #[test]\n #[should_panic]\n fn test_slice_out_of_bounds_5() {\n     let x = vec![1, 2, 3, 4, 5];\n-    &x[3..2];\n+    let _ = &x[3..2];\n }\n \n #[test]"}, {"sha": "cd9c6ee325081b174c396cc290702e300cb24869", "filename": "library/std/src/sys_common/wtf8/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8%2Ftests.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -301,7 +301,7 @@ fn wtf8_slice() {\n #[test]\n #[should_panic]\n fn wtf8_slice_not_code_point_boundary() {\n-    &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[2..4];\n+    let _ = &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[2..4];\n }\n \n #[test]\n@@ -312,7 +312,7 @@ fn wtf8_slice_from() {\n #[test]\n #[should_panic]\n fn wtf8_slice_from_not_code_point_boundary() {\n-    &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[2..];\n+    let _ = &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[2..];\n }\n \n #[test]\n@@ -323,7 +323,7 @@ fn wtf8_slice_to() {\n #[test]\n #[should_panic]\n fn wtf8_slice_to_not_code_point_boundary() {\n-    &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[5..];\n+    let _ = &Wtf8::from_str(\"a\u00e9 \ud83d\udca9\")[5..];\n }\n \n #[test]"}, {"sha": "4134c62377835003796144bce8079c00204c7a7a", "filename": "src/test/ui/array-slice-vec/slice-panic-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-1.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -17,7 +17,7 @@ impl Drop for Foo {\n \n fn foo() {\n     let x: &[_] = &[Foo, Foo];\n-    &x[3..4];\n+    let _ = &x[3..4];\n }\n \n fn main() {"}, {"sha": "2f7178fb3e1326a74816db0af2142288a289d733", "filename": "src/test/ui/array-slice-vec/slice-panic-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-panic-2.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -21,7 +21,7 @@ fn bar() -> usize {\n \n fn foo() {\n     let x: &[_] = &[Foo, Foo];\n-    &x[3..bar()];\n+    let _ = &x[3..bar()];\n }\n \n fn main() {"}, {"sha": "a514e20277365e43e798ff7553fef84adcc1ebd1", "filename": "src/test/ui/array-slice-vec/slice.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -67,14 +67,14 @@ impl IndexMut<RangeFull> for Foo {\n \n fn main() {\n     let mut x = Foo;\n-    &x[..];\n-    &x[Foo..];\n-    &x[..Foo];\n-    &x[Foo..Foo];\n-    &mut x[..];\n-    &mut x[Foo..];\n-    &mut x[..Foo];\n-    &mut x[Foo..Foo];\n+    let _ = &x[..];\n+    let _ = &x[Foo..];\n+    let _ = &x[..Foo];\n+    let _ = &x[Foo..Foo];\n+    let _ = &mut x[..];\n+    let _ = &mut x[Foo..];\n+    let _ = &mut x[..Foo];\n+    let _ = &mut x[Foo..Foo];\n     unsafe {\n         assert_eq!(COUNT, 8);\n     }"}, {"sha": "97ab07daccefb94843eac8d33c3ebd3dceca98ad", "filename": "src/test/ui/const-generics/issues/issue-61432.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -6,9 +6,9 @@ fn promote<const N: i32>() {\n     // works:\n     //\n     // let n = N;\n-    // &n;\n+    // let _ = &n;\n \n-    &N;\n+    let _ = &N;\n }\n \n fn main() {"}, {"sha": "8aa65bbfdc9e7bd233ef93860622538b063b83b8", "filename": "src/test/ui/dynamically-sized-types/dst-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-index.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -29,6 +29,6 @@ impl Index<usize> for T {\n \n fn main() {\n     assert_eq!(&S[0], \"hello\");\n-    &T[0];\n+    let _ = &T[0];\n     // let x = &x as &Debug;\n }"}, {"sha": "e0b856db7a55d9f9d8334642aa437f14335fdb65", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -15,7 +15,7 @@ fn main() {\n                 yield ();\n                 4i32\n             };\n-            &a;\n+            let _ = &a;\n         };\n     }\n }"}, {"sha": "72a2bd4ebc55c3a7501ebd345688e6dc303a7e39", "filename": "src/test/ui/generator/too-live-local-in-immovable-gen.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-live-local-in-immovable-gen.stderr?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -6,7 +6,7 @@ LL | |             // Tests that the generator transformation finds out that `a`\n LL | |             // during the yield expression. Type checking will also compute liveness\n LL | |             // and it should also find out that `a` is not live.\n ...  |\n-LL | |             &a;\n+LL | |             let _ = &a;\n LL | |         };\n    | |__________^\n    |"}, {"sha": "0cab36e5f2880017d77000ff050150b078165961", "filename": "src/test/ui/generator/yield-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-initializer.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -11,7 +11,7 @@ fn main() {\n                 yield;\n                 true\n             };\n-            &opt;\n+            let _ = &opt;\n         }\n     };\n }"}, {"sha": "f47d5a347bb11823fdca66d33cab33e60c793d16", "filename": "src/test/ui/issues/issue-43205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fissues%2Fissue-43205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fissues%2Fissue-43205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43205.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n fn main() {\n-   &&[()][0];\n+   let _ = &&[()][0];\n    println!(\"{:?}\", &[(),()][1]);\n }"}, {"sha": "5c5ce6c987ad124a2bc7662418e98fbf88a1428a", "filename": "src/test/ui/issues/issue-5280.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fissues%2Fissue-5280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fissues%2Fissue-5280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5280.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -9,7 +9,7 @@ trait FontTableTagConversions {\n \n impl FontTableTagConversions for FontTableTag {\n   fn tag_to_string(self) {\n-    &self;\n+      let _ = &self;\n   }\n }\n "}, {"sha": "15355d30db6a561bc5d0512a3609c3bcc2acb203", "filename": "src/test/ui/issues/issue-54696.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fissues%2Fissue-54696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Fissues%2Fissue-54696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54696.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     // We shouldn't promote this\n-    &(main as fn() == main as fn());\n+    let _ = &(main as fn() == main as fn());\n     // Also check nested case\n-    &(&(main as fn()) == &(main as fn()));\n+    let _ = &(&(main as fn()) == &(main as fn()));\n }"}, {"sha": "4518522ae00f7eca3371d49a6072fa71be6f2f1d", "filename": "src/test/ui/lint/unused-borrows.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Flint%2Funused-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Flint%2Funused-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused-borrows.rs?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -0,0 +1,33 @@\n+#![deny(unused_must_use)]\n+\n+fn foo(_: i32) -> bool { todo!() }\n+\n+fn bar() -> &'static i32 {\n+    &42;\n+    //~^ unused\n+\n+    &mut foo(42);\n+    //~^ unused\n+\n+    &&42;\n+    //~^ unused\n+\n+    &&mut 42;\n+    //~^ unused\n+\n+    &mut &42;\n+    //~^ unused\n+\n+    let _result = foo(4)\n+        && foo(2); // Misplaced semi-colon (perhaps due to reordering of lines)\n+    && foo(42);\n+    //~^ unused\n+\n+    let _ = &42; // ok\n+\n+    &42 // ok\n+}\n+\n+fn main() {\n+    let _ = bar();\n+}"}, {"sha": "24899fe992b9f2d3c8443c7adf51ce8944555253", "filename": "src/test/ui/lint/unused-borrows.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Flint%2Funused-borrows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88abd7d81d585ba31cab1ca404a5ed6b44511f98/src%2Ftest%2Fui%2Flint%2Funused-borrows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused-borrows.stderr?ref=88abd7d81d585ba31cab1ca404a5ed6b44511f98", "patch": "@@ -0,0 +1,44 @@\n+error: unused borrow that must be used\n+  --> $DIR/unused-borrows.rs:6:5\n+   |\n+LL |     &42;\n+   |     ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-borrows.rs:1:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: unused borrow that must be used\n+  --> $DIR/unused-borrows.rs:9:5\n+   |\n+LL |     &mut foo(42);\n+   |     ^^^^^^^^^^^^\n+\n+error: unused borrow that must be used\n+  --> $DIR/unused-borrows.rs:12:5\n+   |\n+LL |     &&42;\n+   |     ^^^^\n+\n+error: unused borrow that must be used\n+  --> $DIR/unused-borrows.rs:15:5\n+   |\n+LL |     &&mut 42;\n+   |     ^^^^^^^^\n+\n+error: unused borrow that must be used\n+  --> $DIR/unused-borrows.rs:18:5\n+   |\n+LL |     &mut &42;\n+   |     ^^^^^^^^\n+\n+error: unused borrow that must be used\n+  --> $DIR/unused-borrows.rs:23:5\n+   |\n+LL |     && foo(42);\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}