{"sha": "afd9a75c9ebf56b0a387928cdbef7d086200f534", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZDlhNzVjOWViZjU2YjBhMzg3OTI4Y2RiZWY3ZDA4NjIwMGY1MzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-26T22:29:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-26T22:30:15Z"}, "message": "rustc: Fix cross-crate max/min-class-style constructors", "tree": {"sha": "24a3e8ed1246c06b4afe8db88c383ca054cf0423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a3e8ed1246c06b4afe8db88c383ca054cf0423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afd9a75c9ebf56b0a387928cdbef7d086200f534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afd9a75c9ebf56b0a387928cdbef7d086200f534", "html_url": "https://github.com/rust-lang/rust/commit/afd9a75c9ebf56b0a387928cdbef7d086200f534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afd9a75c9ebf56b0a387928cdbef7d086200f534/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cf99c585ac16ad8c990c134333e61ea3bf591fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf99c585ac16ad8c990c134333e61ea3bf591fb", "html_url": "https://github.com/rust-lang/rust/commit/5cf99c585ac16ad8c990c134333e61ea3bf591fb"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "4988adf93734a8d137cedbce8dff837565482bf1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -87,7 +87,7 @@ enum def {\n     def_upvar(node_id /* local id of closed over var */,\n               @def    /* closed over def */,\n               node_id /* expr node that creates the closure */),\n-    def_class(def_id),\n+    def_class(def_id, bool /* has constructor */),\n     def_region(node_id)\n }\n "}, {"sha": "0cf593efdc304918d77f5f7d384848094f23e090", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -53,7 +53,7 @@ pure fn def_id_of_def(d: def) -> def_id {\n       def_fn(id, _) | def_mod(id) |\n       def_foreign_mod(id) | def_const(id) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n-      def_use(id) | def_class(id) { id }\n+      def_use(id) | def_class(id, _) { id }\n       def_arg(id, _) | def_local(id, _) | def_self(id) |\n       def_upvar(id, _, _) | def_binding(id) | def_region(id) {\n         local_def(id)"}, {"sha": "83684413641f30d105d297d5aa853f09d9a6ca6b", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -283,7 +283,8 @@ fn item_to_def_like(item: ebml::doc, did: ast::def_id, cnum: ast::crate_num)\n     let fam_ch = item_family(item);\n     alt fam_ch {\n       'c' { dl_def(ast::def_const(did)) }\n-      'C' { dl_def(ast::def_class(did)) }\n+      'C' { dl_def(ast::def_class(did, true)) }\n+      'S' { dl_def(ast::def_class(did, false)) }\n       'u' { dl_def(ast::def_fn(did, ast::unsafe_fn)) }\n       'f' { dl_def(ast::def_fn(did, ast::impure_fn)) }\n       'p' { dl_def(ast::def_fn(did, ast::pure_fn)) }\n@@ -707,7 +708,7 @@ fn family_has_type_params(fam_ch: char) -> bool {\n     alt check fam_ch {\n       'c' | 'T' | 'm' | 'n' | 'g' | 'h' | 'j' { false }\n       'f' | 'u' | 'p' | 'F' | 'U' | 'P' | 'y' | 't' | 'v' | 'i' | 'I' | 'C'\n-          | 'a'\n+          | 'a' | 'S'\n           { true }\n     }\n }\n@@ -751,6 +752,7 @@ fn item_family_to_str(fam: char) -> ~str {\n       'i' { ret ~\"impl\"; }\n       'I' { ret ~\"trait\"; }\n       'C' { ret ~\"class\"; }\n+      'S' { ret ~\"struct\"; }\n       'g' { ret ~\"public field\"; }\n       'j' { ret ~\"private field\"; }\n     }"}, {"sha": "e1ed9fe396aae30b83f3f28990dcec1fd7f919ba", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -663,7 +663,16 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         /* Now, make an item for the class itself */\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n-        encode_family(ebml_w, 'C');\n+\n+        alt ctor {\n+            none {\n+                encode_family(ebml_w, 'S');\n+            }\n+            some(_) {\n+                encode_family(ebml_w, 'C');\n+            }\n+        }\n+\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_name(ebml_w, item.ident);"}, {"sha": "1f5f7c4518d597923431fadd5fe8cd9fbde2e892", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -369,8 +369,8 @@ impl of tr for ast::def {\n           ast::def_upvar(nid1, def, nid2) {\n             ast::def_upvar(xcx.tr_id(nid1), @(*def).tr(xcx), xcx.tr_id(nid2))\n           }\n-          ast::def_class(did) {\n-            ast::def_class(did.tr(xcx))\n+          ast::def_class(did, has_constructor) {\n+            ast::def_class(did.tr(xcx), has_constructor)\n           }\n           ast::def_region(nid) { ast::def_region(xcx.tr_id(nid)) }\n         }"}, {"sha": "4088945e550e1b2c29e4db3984806f5ce5317392", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -196,7 +196,7 @@ impl public_methods for borrowck_ctxt {\n           ast::def_foreign_mod(_) | ast::def_const(_) |\n           ast::def_use(_) | ast::def_variant(_, _) |\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n-          ast::def_ty_param(_, _) | ast::def_class(_) |\n+          ast::def_ty_param(_, _) | ast::def_class(_, _) |\n           ast::def_region(_) {\n             @{id:id, span:span,\n               cat:cat_special(sk_static_item), lp:none,"}, {"sha": "cc6874bc9679b5e5590eb444b6b085a2a86112f1", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -467,7 +467,7 @@ fn determine_rp_in_ty(ty: @ast::ty,\n     alt ty.node {\n       ast::ty_path(_, id) {\n         alt cx.def_map.get(id) {\n-          ast::def_ty(did) | ast::def_class(did) {\n+          ast::def_ty(did) | ast::def_class(did, _) {\n             if did.crate == ast::local_crate {\n                 cx.add_dep(did.node, cx.item_id);\n             } else {"}, {"sha": "e75268cde7f6cef07acfa95923c63950d198640c", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -41,7 +41,7 @@ import syntax::visit::{visit_mod, visit_ty, vt};\n \n import box::ptr_eq;\n import dvec::{dvec, extensions};\n-import option::get;\n+import option::{get, is_some};\n import str::{connect, split_str};\n import vec::pop;\n \n@@ -604,7 +604,7 @@ class Resolver {\n     let unused_import_lint_level: level;\n \n     let trait_info: hashmap<def_id,@hashmap<Atom,()>>;\n-    let structs: hashmap<def_id,()>;\n+    let structs: hashmap<def_id,bool>;\n \n     // The number of imports that are currently unresolved.\n     let mut unresolved_imports: uint;\n@@ -926,7 +926,8 @@ class Resolver {\n                 (*name_bindings).define_impl(impl_info);\n \n                 // Record the def ID of this struct.\n-                self.structs.insert(local_def(item.id), ());\n+                self.structs.insert(local_def(item.id),\n+                                    is_some(optional_ctor));\n \n                 visit_item(item, new_parent, visitor);\n             }\n@@ -1378,12 +1379,16 @@ class Resolver {\n \n                             (*child_name_bindings).define_type(def);\n                         }\n-                        def_class(def_id) {\n+                        def_class(def_id, has_constructor) {\n                             #debug(\"(building reduced graph for external \\\n-                                    crate) building value and type %s\",\n-                                    final_ident);\n-                            (*child_name_bindings).define_value(def);\n+                                    crate) building type %s (value? %d)\",\n+                                    final_ident,\n+                                    if has_constructor { 1 } else { 0 });\n                             (*child_name_bindings).define_type(def);\n+\n+                            if has_constructor {\n+                                (*child_name_bindings).define_value(def);\n+                            }\n                         }\n                         def_self(*) | def_arg(*) | def_local(*) |\n                         def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n@@ -4201,7 +4206,9 @@ class Resolver {\n                     some(definition @ def_ty(class_id))\n                             if self.structs.contains_key(class_id) {\n \n-                        self.record_def(expr.id, def_class(class_id));\n+                        let has_constructor = self.structs.get(class_id);\n+                        let class_def = def_class(class_id, has_constructor);\n+                        self.record_def(expr.id, class_def);\n                     }\n                     _ {\n                         self.session.span_err(path.span,"}, {"sha": "465aeebe3af2e86f04db171b0fc102d9b08dbde0", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -2587,7 +2587,7 @@ fn type_err_to_str(cx: ctxt, err: type_err) -> ~str {\n \n fn def_has_ty_params(def: ast::def) -> bool {\n     alt def {\n-      ast::def_fn(_, _) | ast::def_variant(_, _) | ast::def_class(_)\n+      ast::def_fn(_, _) | ast::def_variant(_, _) | ast::def_class(_, _)\n         { true }\n       _ { false }\n     }"}, {"sha": "3baea12ab484f4db3adc3638e69d71af1048a332", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -270,7 +270,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n                                                        path_to_str(path))); }\n           some(d) { d }};\n         alt a_def {\n-          ast::def_ty(did) | ast::def_class(did) {\n+          ast::def_ty(did) | ast::def_class(did, _) {\n             ast_path_to_ty(self, rscope, did, path, id).ty\n           }\n           ast::def_prim_ty(nty) {"}, {"sha": "eaf0e90b26d624372d80c49cc288ac2a5d84ddb4", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -1649,7 +1649,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // Resolve the path.\n         let class_id;\n         alt tcx.def_map.find(id) {\n-            some(ast::def_class(type_def_id)) => {\n+            some(ast::def_class(type_def_id, _)) => {\n                 class_id = type_def_id;\n             }\n             _ => {\n@@ -2160,7 +2160,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       }\n \n       ast::def_fn(id, _) | ast::def_const(id) |\n-      ast::def_variant(_, id) | ast::def_class(id) {\n+      ast::def_variant(_, id) | ast::def_class(id, _) {\n         ret ty::lookup_item_type(fcx.ccx.tcx, id);\n       }\n       ast::def_binding(nid) {"}, {"sha": "d1052fd6a2abf78b75e0adcd69d89b3b3ba181c1", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd9a75c9ebf56b0a387928cdbef7d086200f534/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=afd9a75c9ebf56b0a387928cdbef7d086200f534", "patch": "@@ -200,7 +200,7 @@ fn region_of(fcx: @fn_ctxt, expr: @ast::expr) -> ty::region {\n           ast::def_foreign_mod(_) | ast::def_const(_) |\n           ast::def_use(_) | ast::def_variant(_, _) |\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n-          ast::def_ty_param(_, _) | ast::def_class(_) |\n+          ast::def_ty_param(_, _) | ast::def_class(_, _) |\n           ast::def_region(_) {\n             ty::re_static\n           }"}]}