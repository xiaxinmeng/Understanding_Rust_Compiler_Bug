{"sha": "bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "node_id": "C_kwDOAAsO6NoAKGJmMjI4YWNlNWNmNjgyNDA3OGQ2ZDM2MTQ0YWQ4YTY1ZjA3ZmE4ZDM", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-12-25T22:03:24Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-01-07T10:42:16Z"}, "message": "don't eagerly normalize SelfCtor type\n\nDelay until user annotations are registered.\nSee the added test.", "tree": {"sha": "94b4721d3a1b4ff0150ffb8d2129109916583e87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b4721d3a1b4ff0150ffb8d2129109916583e87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "html_url": "https://github.com/rust-lang/rust/commit/bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "html_url": "https://github.com/rust-lang/rust/commit/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2"}], "stats": {"total": 184, "additions": 148, "deletions": 36}, "files": [{"sha": "4f48506b5af4f0ebab7b0236cc92a130eac64d2f", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -4134,7 +4134,6 @@ dependencies = [\n name = \"rustc_hir_typeck\"\n version = \"0.1.0\"\n dependencies = [\n- \"either\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "093f9bb84486e267cc72919c00a1f14de33cbf93", "filename": "compiler/rustc_hir_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/compiler%2Frustc_hir_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/compiler%2Frustc_hir_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2FCargo.toml?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -8,7 +8,6 @@ edition = \"2021\"\n [dependencies]\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n tracing = \"0.1\"\n-either = \"1.5.0\"\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }"}, {"sha": "b7681d108ed01febb082121e5589dec25f117770", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -392,6 +392,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty.normalized\n     }\n \n+    pub(super) fn user_substs_for_adt(ty: RawTy<'tcx>) -> UserSubsts<'tcx> {\n+        match (ty.raw.kind(), ty.normalized.kind()) {\n+            (ty::Adt(_, substs), _) => UserSubsts { substs, user_self_ty: None },\n+            (_, ty::Adt(adt, substs)) => UserSubsts {\n+                substs,\n+                user_self_ty: Some(UserSelfTy { impl_def_id: adt.did(), self_ty: ty.raw }),\n+            },\n+            _ => bug!(\"non-adt type {:?}\", ty),\n+        }\n+    }\n+\n     pub fn array_length_to_const(&self, length: &hir::ArrayLen) -> ty::Const<'tcx> {\n         match length {\n             &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n@@ -1082,20 +1093,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .unwrap_or(false);\n \n         let (res, self_ctor_substs) = if let Res::SelfCtor(impl_def_id) = res {\n-            let ty = tcx.at(span).type_of(impl_def_id);\n-            let ty = self.normalize(span, ty);\n-            match *ty.kind() {\n-                ty::Adt(adt_def, substs) if adt_def.has_ctor() => {\n-                    let variant = adt_def.non_enum_variant();\n-                    let (ctor_kind, ctor_def_id) = variant.ctor.unwrap();\n-                    (Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id), Some(substs))\n+            let ty = self.handle_raw_ty(span, tcx.at(span).type_of(impl_def_id));\n+            match ty.normalized.ty_adt_def() {\n+                Some(adt_def) if adt_def.has_ctor() => {\n+                    let (ctor_kind, ctor_def_id) = adt_def.non_enum_variant().ctor.unwrap();\n+                    let new_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n+                    let user_substs = Self::user_substs_for_adt(ty);\n+                    user_self_ty = user_substs.user_self_ty;\n+                    (new_res, Some(user_substs.substs))\n                 }\n                 _ => {\n                     let mut err = tcx.sess.struct_span_err(\n                         span,\n                         \"the `Self` constructor can only be used with tuple or unit structs\",\n                     );\n-                    if let Some(adt_def) = ty.ty_adt_def() {\n+                    if let Some(adt_def) = ty.normalized.ty_adt_def() {\n                         match adt_def.adt_kind() {\n                             AdtKind::Enum => {\n                                 err.help(\"did you mean to use one of the enum's variants?\");"}, {"sha": "da411d0642e728d5aa0065d8e59a6ea2a67f92c2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -32,8 +32,6 @@ use rustc_span::symbol::{kw, Ident};\n use rustc_span::{self, sym, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n-use either::Either;\n-\n use std::iter;\n use std::mem;\n use std::ops::ControlFlow;\n@@ -1233,44 +1231,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 return None;\n             }\n-            Res::Def(DefKind::Variant, _) => match (ty.raw.kind(), ty.normalized.kind()) {\n-                (ty::Adt(adt, substs), _) => {\n-                    Some((adt.variant_of_res(def), adt.did(), substs, Either::Left(substs)))\n-                }\n-                (_, ty::Adt(adt, substs)) => {\n-                    Some((adt.variant_of_res(def), adt.did(), substs, Either::Right(ty.raw)))\n+            Res::Def(DefKind::Variant, _) => match ty.normalized.ty_adt_def() {\n+                Some(adt) => {\n+                    Some((adt.variant_of_res(def), adt.did(), Self::user_substs_for_adt(ty)))\n                 }\n                 _ => bug!(\"unexpected type: {:?}\", ty.normalized),\n             },\n             Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n             | Res::SelfTyParam { .. }\n-            | Res::SelfTyAlias { .. } => match (ty.raw.kind(), ty.normalized.kind()) {\n-                (ty::Adt(adt, substs), _) if !adt.is_enum() => {\n-                    Some((adt.non_enum_variant(), adt.did(), substs, Either::Left(substs)))\n-                }\n-                (_, ty::Adt(adt, substs)) if !adt.is_enum() => {\n-                    Some((adt.non_enum_variant(), adt.did(), substs, Either::Right(ty.raw)))\n+            | Res::SelfTyAlias { .. } => match ty.normalized.ty_adt_def() {\n+                Some(adt) if !adt.is_enum() => {\n+                    Some((adt.non_enum_variant(), adt.did(), Self::user_substs_for_adt(ty)))\n                 }\n                 _ => None,\n             },\n             _ => bug!(\"unexpected definition: {:?}\", def),\n         };\n \n-        if let Some((variant, did, substs, user_annotation)) = variant {\n+        if let Some((variant, did, ty::UserSubsts { substs, user_self_ty })) = variant {\n             debug!(\"check_struct_path: did={:?} substs={:?}\", did, substs);\n \n             // Register type annotation.\n-            self.probe(|_| {\n-                // UserSubsts and UserSelfTy are mutually exclusive here.\n-                let (user_substs, self_ty) = match user_annotation {\n-                    Either::Left(substs) => (*substs, None),\n-                    Either::Right(self_ty) => {\n-                        (self.fresh_substs_for_item(path_span, did), Some(self_ty))\n-                    }\n-                };\n-                let self_ty = self_ty.map(|self_ty| ty::UserSelfTy { impl_def_id: did, self_ty });\n-                self.write_user_type_annotation_from_substs(hir_id, did, user_substs, self_ty);\n-            });\n+            self.write_user_type_annotation_from_substs(hir_id, did, substs, user_self_ty);\n \n             // Check bounds on type arguments used in the path.\n             self.add_required_obligations_for_hir(path_span, did, substs, hir_id);"}, {"sha": "fa52e6d857f6f62e3b3d6f57265f701fb053ba9e", "filename": "src/test/ui/nll/user-annotations/normalization-default.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-default.rs?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -0,0 +1,22 @@\n+// check-fail\n+\n+trait Trait { type Assoc; }\n+impl<'a> Trait for &'a () { type Assoc = &'a (); }\n+\n+struct MyTuple<T, U = <&'static () as Trait>::Assoc>(T, U);\n+fn test_tuple(x: &(), y: &()) {\n+    MyTuple::<_>((), x);\n+    //~^ ERROR\n+    let _: MyTuple::<_> = MyTuple((), y);\n+    //~^ ERROR\n+}\n+\n+struct MyStruct<T, U = <&'static () as Trait>::Assoc> { val: (T, U), }\n+fn test_struct(x: &(), y: &()) {\n+    MyStruct::<_> { val: ((), x) };\n+    //~^ ERROR\n+    let _: MyStruct::<_> = MyStruct { val: ((), y) };\n+    //~^ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "6c73ac69254815f6467e838597b5244642d28104", "filename": "src/test/ui/nll/user-annotations/normalization-default.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-default.stderr?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -0,0 +1,36 @@\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-default.rs:8:22\n+   |\n+LL | fn test_tuple(x: &(), y: &()) {\n+   |                  - let's call the lifetime of this reference `'1`\n+LL |     MyTuple::<_>((), x);\n+   |                      ^ this usage requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-default.rs:10:12\n+   |\n+LL | fn test_tuple(x: &(), y: &()) {\n+   |                          - let's call the lifetime of this reference `'2`\n+...\n+LL |     let _: MyTuple::<_> = MyTuple((), y);\n+   |            ^^^^^^^^^^^^ type annotation requires that `'2` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-default.rs:16:26\n+   |\n+LL | fn test_struct(x: &(), y: &()) {\n+   |                   - let's call the lifetime of this reference `'1`\n+LL |     MyStruct::<_> { val: ((), x) };\n+   |                          ^^^^^^^ this usage requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-default.rs:18:12\n+   |\n+LL | fn test_struct(x: &(), y: &()) {\n+   |                           - let's call the lifetime of this reference `'2`\n+...\n+LL |     let _: MyStruct::<_> = MyStruct { val: ((), y) };\n+   |            ^^^^^^^^^^^^^ type annotation requires that `'2` must outlive `'static`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c18760b53cffbdc5b302908363a09a4bc9c8d999", "filename": "src/test/ui/nll/user-annotations/normalization-self.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-self.rs?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -0,0 +1,26 @@\n+// check-fail\n+\n+trait Trait { type Assoc; }\n+impl<'a> Trait for &'a () { type Assoc = &'a (); }\n+\n+struct MyTuple<T>(T);\n+impl MyTuple<<&'static () as Trait>::Assoc> {\n+    fn test(x: &(), y: &()) {\n+        Self(x);\n+        //~^ ERROR\n+        let _: Self = MyTuple(y);\n+        //~^ ERROR\n+    }\n+}\n+\n+struct MyStruct<T> { val: T, }\n+impl MyStruct<<&'static () as Trait>::Assoc> {\n+    fn test(x: &(), y: &()) {\n+        Self { val: x };\n+        //~^ ERROR\n+        let _: Self = MyStruct { val: y };\n+        //~^ ERROR\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e231ed03c2eea144850846dd60e0d1969841aebd", "filename": "src/test/ui/nll/user-annotations/normalization-self.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf228ace5cf6824078d6d36144ad8a65f07fa8d3/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-self.stderr?ref=bf228ace5cf6824078d6d36144ad8a65f07fa8d3", "patch": "@@ -0,0 +1,36 @@\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-self.rs:9:14\n+   |\n+LL |     fn test(x: &(), y: &()) {\n+   |                - let's call the lifetime of this reference `'1`\n+LL |         Self(x);\n+   |              ^ this usage requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-self.rs:11:16\n+   |\n+LL |     fn test(x: &(), y: &()) {\n+   |                        - let's call the lifetime of this reference `'2`\n+...\n+LL |         let _: Self = MyTuple(y);\n+   |                ^^^^ type annotation requires that `'2` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-self.rs:19:21\n+   |\n+LL |     fn test(x: &(), y: &()) {\n+   |                - let's call the lifetime of this reference `'1`\n+LL |         Self { val: x };\n+   |                     ^ this usage requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-self.rs:21:16\n+   |\n+LL |     fn test(x: &(), y: &()) {\n+   |                        - let's call the lifetime of this reference `'2`\n+...\n+LL |         let _: Self = MyStruct { val: y };\n+   |                ^^^^ type annotation requires that `'2` must outlive `'static`\n+\n+error: aborting due to 4 previous errors\n+"}]}