{"sha": "fe0c10019d7ee96909cc42cc265ef999a6b5dd70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMGMxMDAxOWQ3ZWU5NjkwOWNjNDJjYzI2NWVmOTk5YTZiNWRkNzA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-25T08:25:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:51:29Z"}, "message": "Split out creation of the resolver arena in phase_2_configure_and_expand", "tree": {"sha": "69e6c37ebd7ce58c18210a0b313cf650e842a5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e6c37ebd7ce58c18210a0b313cf650e842a5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe0c10019d7ee96909cc42cc265ef999a6b5dd70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0c10019d7ee96909cc42cc265ef999a6b5dd70", "html_url": "https://github.com/rust-lang/rust/commit/fe0c10019d7ee96909cc42cc265ef999a6b5dd70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe0c10019d7ee96909cc42cc265ef999a6b5dd70/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18b344afba6ab301bef297c161265e1aa6be79e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18b344afba6ab301bef297c161265e1aa6be79e", "html_url": "https://github.com/rust-lang/rust/commit/d18b344afba6ab301bef297c161265e1aa6be79e"}], "stats": {"total": 79, "additions": 55, "deletions": 24}, "files": [{"sha": "31e7b3617990fc143a2597281f72209590a4eac7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 55, "deletions": 24, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/fe0c10019d7ee96909cc42cc265ef999a6b5dd70/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0c10019d7ee96909cc42cc265ef999a6b5dd70/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fe0c10019d7ee96909cc42cc265ef999a6b5dd70", "patch": "@@ -140,13 +140,6 @@ pub fn compile_input(trans: Box<TransCrate>,\n         let crate_name =\n             ::rustc_trans_utils::link::find_crate_name(Some(sess), &krate.attrs, input);\n \n-        // Currently, we ignore the name resolution data structures for the purposes of dependency\n-        // tracking. Instead we will run name resolution and include its output in the hash of each\n-        // item, much like we do for macro expansion. In other words, the hash reflects not just\n-        // its contents but the results of name resolution on those contents. Hopefully we'll push\n-        // this back at some point.\n-        let mut crate_loader = CrateLoader::new(sess, &cstore, &crate_name);\n-        let resolver_arenas = Resolver::arenas();\n         let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {\n             phase_2_configure_and_expand(\n                 sess,\n@@ -156,8 +149,6 @@ pub fn compile_input(trans: Box<TransCrate>,\n                 &crate_name,\n                 addl_plugins,\n                 control.make_glob_map,\n-                &resolver_arenas,\n-                &mut crate_loader,\n                 |expanded_crate| {\n                     let mut state = CompileState::state_after_expand(\n                         input, sess, outdir, output, &cstore, expanded_crate, &crate_name,\n@@ -572,6 +563,12 @@ pub struct ExpansionResult {\n     pub hir_forest: hir_map::Forest,\n }\n \n+pub struct InnerExpansionResult<'a> {\n+    pub expanded_crate: ast::Crate,\n+    pub resolver: Resolver<'a>,\n+    pub hir_forest: hir_map::Forest,\n+}\n+\n /// Run the \"early phases\" of the compiler: initial `cfg` processing,\n /// loading compiler plugins (including those from `addl_plugins`),\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n@@ -580,6 +577,52 @@ pub struct ExpansionResult {\n ///\n /// Returns `None` if we're aborting after handling -W help.\n pub fn phase_2_configure_and_expand<'a, F>(sess: &'a Session,\n+                                       cstore: &'a CStore,\n+                                       krate: ast::Crate,\n+                                       registry: Option<Registry>,\n+                                       crate_name: &str,\n+                                       addl_plugins: Option<Vec<String>>,\n+                                       make_glob_map: MakeGlobMap,\n+                                       after_expand: F)\n+                                       -> Result<ExpansionResult, CompileIncomplete>\n+    where F: FnOnce(&ast::Crate) -> CompileResult {\n+    // Currently, we ignore the name resolution data structures for the purposes of dependency\n+    // tracking. Instead we will run name resolution and include its output in the hash of each\n+    // item, much like we do for macro expansion. In other words, the hash reflects not just\n+    // its contents but the results of name resolution on those contents. Hopefully we'll push\n+    // this back at some point.\n+    let mut crate_loader = CrateLoader::new(sess, &cstore, &crate_name);\n+    let resolver_arenas = Resolver::arenas();\n+    let result = phase_2_configure_and_expand_inner(sess, cstore, krate, registry, crate_name, addl_plugins,\n+                                                    make_glob_map, &resolver_arenas, &mut crate_loader, after_expand);\n+    match result {\n+        Ok(InnerExpansionResult {expanded_crate, resolver, hir_forest}) => {\n+            Ok(ExpansionResult {\n+                expanded_crate,\n+                defs: resolver.definitions,\n+                hir_forest,\n+                resolutions: Resolutions {\n+                    freevars: resolver.freevars,\n+                    export_map: resolver.export_map,\n+                    trait_map: resolver.trait_map,\n+                    maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n+                    maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n+                },\n+\n+                analysis: ty::CrateAnalysis {\n+                    access_levels: Rc::new(AccessLevels::default()),\n+                    name: crate_name.to_string(),\n+                    glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n+                },\n+            })\n+        }\n+        Err(x) => Err(x)\n+    }\n+}\n+\n+/// Same as phase_2_configure_and_expand, but doesn't let you keep the resolver\n+/// around\n+pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n                                        cstore: &'a CStore,\n                                        krate: ast::Crate,\n                                        registry: Option<Registry>,\n@@ -589,7 +632,7 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &'a Session,\n                                        resolver_arenas: &'a ResolverArenas<'a>,\n                                        crate_loader: &'a mut CrateLoader,\n                                        after_expand: F)\n-                                       -> Result<ExpansionResult, CompileIncomplete>\n+                                       -> Result<InnerExpansionResult<'a>, CompileIncomplete>\n     where F: FnOnce(&ast::Crate) -> CompileResult,\n {\n     let time_passes = sess.time_passes();\n@@ -860,21 +903,9 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &'a Session,\n         syntax::ext::hygiene::clear_markings();\n     }\n \n-    Ok(ExpansionResult {\n+    Ok(InnerExpansionResult {\n         expanded_crate: krate,\n-        defs: resolver.definitions,\n-        analysis: ty::CrateAnalysis {\n-            access_levels: Rc::new(AccessLevels::default()),\n-            name: crate_name.to_string(),\n-            glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n-        },\n-        resolutions: Resolutions {\n-            freevars: resolver.freevars,\n-            export_map: resolver.export_map,\n-            trait_map: resolver.trait_map,\n-            maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n-            maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n-        },\n+        resolver,\n         hir_forest,\n     })\n }"}]}