{"sha": "de6742bb1cf43e7e11d16de8c0fb6386e06e7496", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNjc0MmJiMWNmNDNlN2UxMWQxNmRlOGMwZmI2Mzg2ZTA2ZTc0OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-05T16:14:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-05T16:14:11Z"}, "message": "Auto merge of #24053 - kvark:get_mut, r=alexcrichton\n\nAs requested by @kballard in #23844", "tree": {"sha": "6c5259af64db40269ee931851e52a4a56e9819b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c5259af64db40269ee931851e52a4a56e9819b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de6742bb1cf43e7e11d16de8c0fb6386e06e7496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de6742bb1cf43e7e11d16de8c0fb6386e06e7496", "html_url": "https://github.com/rust-lang/rust/commit/de6742bb1cf43e7e11d16de8c0fb6386e06e7496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de6742bb1cf43e7e11d16de8c0fb6386e06e7496/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529de5f45b8070b3930073b711500c4633dffcf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/529de5f45b8070b3930073b711500c4633dffcf4", "html_url": "https://github.com/rust-lang/rust/commit/529de5f45b8070b3930073b711500c4633dffcf4"}, {"sha": "bc1aef3e7b46db3d3eee4eca80f6462f8a56bbeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1aef3e7b46db3d3eee4eca80f6462f8a56bbeb", "html_url": "https://github.com/rust-lang/rust/commit/bc1aef3e7b46db3d3eee4eca80f6462f8a56bbeb"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "68bde1476118d79108a11112d905dd61ee376237", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/de6742bb1cf43e7e11d16de8c0fb6386e06e7496/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6742bb1cf43e7e11d16de8c0fb6386e06e7496/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=de6742bb1cf43e7e11d16de8c0fb6386e06e7496", "patch": "@@ -243,27 +243,29 @@ pub fn weak_count<T>(this: &Arc<T>) -> usize { this.inner().weak.load(SeqCst) -\n pub fn strong_count<T>(this: &Arc<T>) -> usize { this.inner().strong.load(SeqCst) }\n \n \n-/// Try accessing a mutable reference to the contents behind an unique `Arc<T>`.\n+/// Returns a mutable reference to the contained value if the `Arc<T>` is unique.\n ///\n-/// The access is granted only if this is the only reference to the object.\n-/// Otherwise, `None` is returned.\n+/// Returns `None` if the `Arc<T>` is not unique.\n ///\n /// # Examples\n ///\n /// ```\n /// # #![feature(alloc)]\n /// extern crate alloc;\n /// # fn main() {\n-/// use alloc::arc;\n+/// use alloc::arc::{Arc, get_mut};\n ///\n-/// let mut four = arc::Arc::new(4);\n+/// let mut x = Arc::new(3);\n+/// *get_mut(&mut x).unwrap() = 4;\n+/// assert_eq!(*x, 4);\n ///\n-/// arc::unique(&mut four).map(|num| *num = 5);\n+/// let _y = x.clone();\n+/// assert!(get_mut(&mut x).is_none());\n /// # }\n /// ```\n #[inline]\n #[unstable(feature = \"alloc\")]\n-pub fn unique<T>(this: &mut Arc<T>) -> Option<&mut T> {\n+pub fn get_mut<T>(this: &mut Arc<T>) -> Option<&mut T> {\n     if strong_count(this) == 1 && weak_count(this) == 0 {\n         // This unsafety is ok because we're guaranteed that the pointer\n         // returned is the *only* pointer that will ever be returned to T. Our\n@@ -347,7 +349,7 @@ impl<T: Clone> Arc<T> {\n            self.inner().weak.load(SeqCst) != 1 {\n             *self = Arc::new((**self).clone())\n         }\n-        // As with `unique()`, the unsafety is ok because our reference was\n+        // As with `get_mut()`, the unsafety is ok because our reference was\n         // either unique to begin with, or became one upon cloning the contents.\n         let inner = unsafe { &mut **self._ptr };\n         &mut inner.data\n@@ -691,7 +693,7 @@ mod tests {\n     use std::sync::atomic::Ordering::{Acquire, SeqCst};\n     use std::thread;\n     use std::vec::Vec;\n-    use super::{Arc, Weak, weak_count, strong_count, unique};\n+    use super::{Arc, Weak, get_mut, weak_count, strong_count};\n     use std::sync::Mutex;\n \n     struct Canary(*mut atomic::AtomicUsize);\n@@ -728,18 +730,16 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_arc_unique() {\n-        let mut x = Arc::new(10);\n-        assert!(unique(&mut x).is_some());\n-        {\n-            let y = x.clone();\n-            assert!(unique(&mut x).is_none());\n-        }\n-        {\n-            let z = x.downgrade();\n-            assert!(unique(&mut x).is_none());\n-        }\n-        assert!(unique(&mut x).is_some());\n+    fn test_arc_get_mut() {\n+        let mut x = Arc::new(3);\n+        *get_mut(&mut x).unwrap() = 4;\n+        assert_eq!(*x, 4);\n+        let y = x.clone();\n+        assert!(get_mut(&mut x).is_none());\n+        drop(y);\n+        assert!(get_mut(&mut x).is_some());\n+        let _w = x.downgrade();\n+        assert!(get_mut(&mut x).is_none());\n     }\n \n     #[test]"}, {"sha": "56822cfe28a3588296bba06b899ab749969c3235", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de6742bb1cf43e7e11d16de8c0fb6386e06e7496/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6742bb1cf43e7e11d16de8c0fb6386e06e7496/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=de6742bb1cf43e7e11d16de8c0fb6386e06e7496", "patch": "@@ -324,7 +324,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// ```\n #[inline]\n #[unstable(feature = \"alloc\")]\n-pub fn get_mut<'a, T>(rc: &'a mut Rc<T>) -> Option<&'a mut T> {\n+pub fn get_mut<T>(rc: &mut Rc<T>) -> Option<&mut T> {\n     if is_unique(rc) {\n         let inner = unsafe { &mut **rc._ptr };\n         Some(&mut inner.value)"}]}