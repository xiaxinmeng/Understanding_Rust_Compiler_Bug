{"sha": "96d080a542681ad57da85c3e3ad3602967650397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZDA4MGE1NDI2ODFhZDU3ZGE4NWMzZTNhZDM2MDI5Njc2NTAzOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T17:02:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T17:02:28Z"}, "message": "Auto merge of #1217 - christianpoveda:environ-shim, r=RalfJung\n\nmove environ place to EnvVars\n\nr? @RalfJung", "tree": {"sha": "68a9ba35a1e893ccc281e63c3ede3b36310c7697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68a9ba35a1e893ccc281e63c3ede3b36310c7697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96d080a542681ad57da85c3e3ad3602967650397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96d080a542681ad57da85c3e3ad3602967650397", "html_url": "https://github.com/rust-lang/rust/commit/96d080a542681ad57da85c3e3ad3602967650397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96d080a542681ad57da85c3e3ad3602967650397/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4032a86ea97a4a15fb2274f4af9d749cb68e483", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4032a86ea97a4a15fb2274f4af9d749cb68e483", "html_url": "https://github.com/rust-lang/rust/commit/b4032a86ea97a4a15fb2274f4af9d749cb68e483"}, {"sha": "5dc60d974b0a76a1f4107790ea2249993d529e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc60d974b0a76a1f4107790ea2249993d529e80", "html_url": "https://github.com/rust-lang/rust/commit/5dc60d974b0a76a1f4107790ea2249993d529e80"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "f69606e48f52c7a76054dcb4f63876eb51f1acae", "filename": "src/machine.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96d080a542681ad57da85c3e3ad3602967650397/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d080a542681ad57da85c3e3ad3602967650397/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=96d080a542681ad57da85c3e3ad3602967650397", "patch": "@@ -70,7 +70,7 @@ pub struct AllocExtra {\n \n /// Extra global memory data\n #[derive(Clone, Debug)]\n-pub struct MemoryExtra<'tcx> {\n+pub struct MemoryExtra {\n     pub stacked_borrows: Option<stacked_borrows::MemoryExtra>,\n     pub intptrcast: intptrcast::MemoryExtra,\n \n@@ -84,12 +84,9 @@ pub struct MemoryExtra<'tcx> {\n     /// An allocation ID to report when it is being allocated\n     /// (helps for debugging memory leaks).\n     tracked_alloc_id: Option<AllocId>,\n-\n-    /// Place where the `environ` static is stored. Lazily initialized, but then never changes.\n-    pub(crate) environ: Option<MPlaceTy<'tcx, Tag>>,\n }\n \n-impl<'tcx> MemoryExtra<'tcx> {\n+impl MemoryExtra {\n     pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>, tracked_alloc_id: Option<AllocId>) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n@@ -102,12 +99,11 @@ impl<'tcx> MemoryExtra<'tcx> {\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n             tracked_alloc_id,\n-            environ: None,\n         }\n     }\n \n     /// Sets up the \"extern statics\" for this machine.\n-    pub fn init_extern_statics<'mir>(\n+    pub fn init_extern_statics<'tcx, 'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         let target_os = this.tcx.sess.target.target.target_os.as_str();\n@@ -127,7 +123,7 @@ impl<'tcx> MemoryExtra<'tcx> {\n                 this.memory\n                     .extra\n                     .extern_statics\n-                    .insert(Symbol::intern(\"environ\"), this.memory.extra.environ.unwrap().ptr.assert_ptr().alloc_id)\n+                    .insert(Symbol::intern(\"environ\"), this.machine.env_vars.environ.unwrap().ptr.assert_ptr().alloc_id)\n                     .unwrap_none();\n             }\n             _ => {} // No \"extern statics\" supported on this platform\n@@ -140,7 +136,7 @@ impl<'tcx> MemoryExtra<'tcx> {\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`.\n     /// Miri does not expose env vars from the host to the emulated program.\n-    pub(crate) env_vars: EnvVars,\n+    pub(crate) env_vars: EnvVars<'tcx>,\n \n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n@@ -214,7 +210,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n     type FrameExtra = FrameData<'tcx>;\n-    type MemoryExtra = MemoryExtra<'tcx>;\n+    type MemoryExtra = MemoryExtra;\n     type AllocExtra = AllocExtra;\n     type PointerTag = Tag;\n     type ExtraFnVal = Dlsym;\n@@ -340,7 +336,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn init_allocation_extra<'b>(\n-        memory_extra: &MemoryExtra<'tcx>,\n+        memory_extra: &MemoryExtra,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n@@ -377,7 +373,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn tag_static_base_pointer(memory_extra: &MemoryExtra<'tcx>, id: AllocId) -> Self::PointerTag {\n+    fn tag_static_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n         if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n             stacked_borrows.borrow_mut().static_base_ptr(id)\n         } else {"}, {"sha": "7c6b6c942e5e3aee470015f4726177aa441c65cd", "filename": "src/shims/env.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96d080a542681ad57da85c3e3ad3602967650397/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d080a542681ad57da85c3e3ad3602967650397/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=96d080a542681ad57da85c3e3ad3602967650397", "patch": "@@ -10,14 +10,17 @@ use rustc::ty::layout::Size;\n use rustc_mir::interpret::Pointer;\n \n #[derive(Default)]\n-pub struct EnvVars {\n+pub struct EnvVars<'tcx> {\n     /// Stores pointers to the environment variables. These variables must be stored as\n     /// null-terminated C strings with the `\"{name}={value}\"` format.\n     map: FxHashMap<OsString, Pointer<Tag>>,\n+\n+    /// Place where the `environ` static is stored. Lazily initialized, but then never changes.\n+    pub(crate) environ: Option<MPlaceTy<'tcx, Tag>>,\n }\n \n-impl EnvVars {\n-    pub(crate) fn init<'mir, 'tcx>(\n+impl<'tcx> EnvVars<'tcx> {\n+    pub(crate) fn init<'mir>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n         excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n@@ -160,15 +163,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn update_environ(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         // Deallocate the old environ value, if any.\n-        if let Some(environ) = this.memory.extra.environ {\n+        if let Some(environ) = this.machine.env_vars.environ {\n             let old_vars_ptr = this.read_scalar(environ.into())?.not_undef()?;\n             this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Machine.into())?;\n         } else {\n             // No `environ` allocated yet, let's do that.\n             let layout = this.layout_of(this.tcx.types.usize)?;\n             let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n             this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n-            this.memory.extra.environ = Some(place);\n+            this.machine.env_vars.environ = Some(place);\n         }\n \n         // Collect all the pointers to each variable in a vector.\n@@ -186,7 +189,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         this.write_scalar(\n             vars_place.ptr,\n-            this.memory.extra.environ.unwrap().into(),\n+            this.machine.env_vars.environ.unwrap().into(),\n         )?;\n \n         Ok(())"}, {"sha": "0d067cc04138a6015b2ed7dc4fb10d54c913052a", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96d080a542681ad57da85c3e3ad3602967650397/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d080a542681ad57da85c3e3ad3602967650397/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=96d080a542681ad57da85c3e3ad3602967650397", "patch": "@@ -58,7 +58,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Environment related shims\n             \"_NSGetEnviron\" => {\n-                this.write_scalar(this.memory.extra.environ.unwrap().ptr, dest)?;\n+                this.write_scalar(this.machine.env_vars.environ.unwrap().ptr, dest)?;\n             }\n \n             // Time related shims"}]}