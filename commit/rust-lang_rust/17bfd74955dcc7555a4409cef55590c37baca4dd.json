{"sha": "17bfd74955dcc7555a4409cef55590c37baca4dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YmZkNzQ5NTVkY2M3NTU1YTQ0MDljZWY1NTU5MGMzN2JhY2E0ZGQ=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-10-26T08:14:21Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:48Z"}, "message": "Rename more functions from trans to mono", "tree": {"sha": "c57e676c81741aa0eafa44668b398c62a05e27ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57e676c81741aa0eafa44668b398c62a05e27ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17bfd74955dcc7555a4409cef55590c37baca4dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17bfd74955dcc7555a4409cef55590c37baca4dd", "html_url": "https://github.com/rust-lang/rust/commit/17bfd74955dcc7555a4409cef55590c37baca4dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17bfd74955dcc7555a4409cef55590c37baca4dd/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9ab487a7abaab1a64b081a81d7f81eee299c587", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ab487a7abaab1a64b081a81d7f81eee299c587", "html_url": "https://github.com/rust-lang/rust/commit/b9ab487a7abaab1a64b081a81d7f81eee299c587"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "dfb282b98de0be1d21ec99cb540ca6cd99f294c4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/17bfd74955dcc7555a4409cef55590c37baca4dd/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17bfd74955dcc7555a4409cef55590c37baca4dd/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=17bfd74955dcc7555a4409cef55590c37baca4dd", "patch": "@@ -294,9 +294,9 @@ impl<'tcx> InliningMap<'tcx> {\n     }\n }\n \n-pub fn collect_crate_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                 mode: MonoItemCollectionMode)\n-                                                 -> (FxHashSet<MonoItem<'tcx>>,\n+pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                          mode: MonoItemCollectionMode)\n+                                          -> (FxHashSet<MonoItem<'tcx>>,\n                                                      InliningMap<'tcx>) {\n     let roots = collect_roots(tcx, mode);\n \n@@ -521,10 +521,10 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 // from a fixed sized array to a slice. But we are only\n                 // interested in things that produce a vtable.\n                 if target_ty.is_trait() && !source_ty.is_trait() {\n-                    create_trans_items_for_vtable_methods(self.tcx,\n-                                                          target_ty,\n-                                                          source_ty,\n-                                                          self.output);\n+                    create_mono_items_for_vtable_methods(self.tcx,\n+                                                         target_ty,\n+                                                         source_ty,\n+                                                         self.output);\n                 }\n             }\n             mir::Rvalue::Cast(mir::CastKind::ReifyFnPointer, ref operand, _) => {\n@@ -844,10 +844,10 @@ fn create_fn_trans_item<'a, 'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n \n /// Creates a `TransItem` for each method that is referenced by the vtable for\n /// the given trait/impl pair.\n-fn create_trans_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                   trait_ty: Ty<'tcx>,\n-                                                   impl_ty: Ty<'tcx>,\n-                                                   output: &mut Vec<MonoItem<'tcx>>) {\n+fn create_mono_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                  trait_ty: Ty<'tcx>,\n+                                                  impl_ty: Ty<'tcx>,\n+                                                  output: &mut Vec<MonoItem<'tcx>>) {\n     assert!(!trait_ty.needs_subst() && !trait_ty.has_escaping_regions() &&\n             !impl_ty.needs_subst() && !impl_ty.has_escaping_regions());\n \n@@ -900,9 +900,9 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n \n             hir::ItemImpl(..) => {\n                 if self.mode == MonoItemCollectionMode::Eager {\n-                    create_trans_items_for_default_impls(self.tcx,\n-                                                         item,\n-                                                         self.output);\n+                    create_mono_items_for_default_impls(self.tcx,\n+                                                        item,\n+                                                        self.output);\n                 }\n             }\n \n@@ -996,9 +996,9 @@ fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     generics.parent_types as usize + generics.types.len() > 0\n }\n \n-fn create_trans_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                  item: &'tcx hir::Item,\n-                                                  output: &mut Vec<MonoItem<'tcx>>) {\n+fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                                 item: &'tcx hir::Item,\n+                                                 output: &mut Vec<MonoItem<'tcx>>) {\n     match item.node {\n         hir::ItemImpl(_,\n                       _,"}, {"sha": "f314f8cb4c736c223a3125130d7510e788e6ad76", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17bfd74955dcc7555a4409cef55590c37baca4dd/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17bfd74955dcc7555a4409cef55590c37baca4dd/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=17bfd74955dcc7555a4409cef55590c37baca4dd", "patch": "@@ -1019,7 +1019,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n \n     let (items, inlining_map) =\n         time(time_passes, \"translation item collection\", || {\n-            collector::collect_crate_translation_items(tcx, collection_mode)\n+            collector::collect_crate_mono_items(tcx, collection_mode)\n     });\n \n     assert_symbols_are_distinct(tcx, items.iter());"}]}