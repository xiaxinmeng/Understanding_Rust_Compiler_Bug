{"sha": "d6da5254a0cc6e896685fa32e2a4c0979933dda5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZGE1MjU0YTBjYzZlODk2Njg1ZmEzMmUyYTRjMDk3OTkzM2RkYTU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-17T09:06:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T09:06:16Z"}, "message": "Rollup merge of #78138 - fortanix:raoul/dlmalloc0.2, r=Mark-Simulacrum\n\nUpgrade dlmalloc to version 0.2\n\nIn preparation of adding dynamic memory management support for SGXv2-enabled platforms, the dlmalloc crate has been refactored. More specifically, support has been added to implement platform specification outside of the dlmalloc crate. (see https://github.com/alexcrichton/dlmalloc-rs/pull/15)\n\nThis PR upgrades dlmalloc to version 0.2 for the `wasm` and `sgx` targets.\n\nAs the dlmalloc changes have received a positive review, but have not been merged yet, this PR contains a commit to prevent tidy from aborting CI prematurely.\n\ncc: `@jethrogb`", "tree": {"sha": "85023e074c26bc6e9c8197755b18524050cc5dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85023e074c26bc6e9c8197755b18524050cc5dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6da5254a0cc6e896685fa32e2a4c0979933dda5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfs5KJCRBK7hj4Ov3rIwAAdHIIAEhLJUxZ3AmkVDVsy8uCGZJC\nAdp3weZIZEqbDyWxAfdeK6coQNTFTDzB4j1tkWR5nxYY4kQ6hj40izTI4e0yH0T+\nHJQfY/5EqM+hJtDvHlLnsywWpXFzPFYRuC7cCg9peTTgIfok/zLdeQUo/iDBmTcA\nshaJ27jZ5tVr5eun/epoFIhPWkQ4gmeuuktH+xSihNW+yKYQP6zuhgswZq6xyzC2\nbifVi5TxW0UrGaoL3F+aiIWu5EpijZJ9u+olPcUtXOLjAUNX/5HlD79SdwTVNO4+\nzv20bogR9giY6IOOJGpq73zTTzYs7ZNyCkSpy4NdJWLJnN568P8SX0nYMxeCyjo=\n=5Q4U\n-----END PGP SIGNATURE-----\n", "payload": "tree 85023e074c26bc6e9c8197755b18524050cc5dbb\nparent cf349567e44a704a496af3933054ae554e529b18\nparent 292f15ce87b52a8dd4cfbeca8c050004fdec2358\nauthor Mara Bos <m-ou.se@m-ou.se> 1605603976 +0100\ncommitter GitHub <noreply@github.com> 1605603976 +0100\n\nRollup merge of #78138 - fortanix:raoul/dlmalloc0.2, r=Mark-Simulacrum\n\nUpgrade dlmalloc to version 0.2\n\nIn preparation of adding dynamic memory management support for SGXv2-enabled platforms, the dlmalloc crate has been refactored. More specifically, support has been added to implement platform specification outside of the dlmalloc crate. (see https://github.com/alexcrichton/dlmalloc-rs/pull/15)\n\nThis PR upgrades dlmalloc to version 0.2 for the `wasm` and `sgx` targets.\n\nAs the dlmalloc changes have received a positive review, but have not been merged yet, this PR contains a commit to prevent tidy from aborting CI prematurely.\n\ncc: `@jethrogb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6da5254a0cc6e896685fa32e2a4c0979933dda5", "html_url": "https://github.com/rust-lang/rust/commit/d6da5254a0cc6e896685fa32e2a4c0979933dda5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6da5254a0cc6e896685fa32e2a4c0979933dda5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf349567e44a704a496af3933054ae554e529b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf349567e44a704a496af3933054ae554e529b18", "html_url": "https://github.com/rust-lang/rust/commit/cf349567e44a704a496af3933054ae554e529b18"}, {"sha": "292f15ce87b52a8dd4cfbeca8c050004fdec2358", "url": "https://api.github.com/repos/rust-lang/rust/commits/292f15ce87b52a8dd4cfbeca8c050004fdec2358", "html_url": "https://github.com/rust-lang/rust/commit/292f15ce87b52a8dd4cfbeca8c050004fdec2358"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "51332001d536e286013df1398992262ebf08f204", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6da5254a0cc6e896685fa32e2a4c0979933dda5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d6da5254a0cc6e896685fa32e2a4c0979933dda5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d6da5254a0cc6e896685fa32e2a4c0979933dda5", "patch": "@@ -987,9 +987,9 @@ dependencies = [\n \n [[package]]\n name = \"dlmalloc\"\n-version = \"0.1.4\"\n+version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"35055b1021724f4eb5262eb49130eebff23fc59fc5a14160e05faad8eeb36673\"\n+checksum = \"332570860c2edf2d57914987bf9e24835425f75825086b6ba7d1e6a3e4f1f254\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\","}, {"sha": "ad9d1238370ec1d93fbe82fb3fab3be6d8c24859", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=d6da5254a0cc6e896685fa32e2a4c0979933dda5", "patch": "@@ -36,7 +36,7 @@ features = ['read_core', 'elf', 'macho', 'pe']\n rand = \"0.7\"\n \n [target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n-dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n+dlmalloc = { version = \"0.2.1\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }"}, {"sha": "da899773dbb0d463233bfcb4492fcbdcaf81bc04", "filename": "library/std/src/sys/sgx/abi/mem.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=d6da5254a0cc6e896685fa32e2a4c0979933dda5", "patch": "@@ -12,6 +12,18 @@ pub(crate) unsafe fn rel_ptr_mut<T>(offset: u64) -> *mut T {\n \n extern \"C\" {\n     static ENCLAVE_SIZE: usize;\n+    static HEAP_BASE: u64;\n+    static HEAP_SIZE: usize;\n+}\n+\n+/// Returns the base memory address of the heap\n+pub(crate) fn heap_base() -> *const u8 {\n+    unsafe { rel_ptr_mut(HEAP_BASE) }\n+}\n+\n+/// Returns the size of the heap\n+pub(crate) fn heap_size() -> usize {\n+    unsafe { HEAP_SIZE }\n }\n \n // Do not remove inline: will result in relocation failure"}, {"sha": "4aea28cb83e231eb646772f2b66632a69864602b", "filename": "library/std/src/sys/sgx/alloc.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Falloc.rs?ref=d6da5254a0cc6e896685fa32e2a4c0979933dda5", "patch": "@@ -1,4 +1,7 @@\n use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::ptr;\n+use crate::sys::sgx::abi::mem as sgx_mem;\n+use core::sync::atomic::{AtomicBool, Ordering};\n \n use super::waitqueue::SpinMutex;\n \n@@ -10,7 +13,48 @@ use super::waitqueue::SpinMutex;\n // dlmalloc.c from C to Rust.\n #[cfg_attr(test, linkage = \"available_externally\")]\n #[export_name = \"_ZN16__rust_internals3std3sys3sgx5alloc8DLMALLOCE\"]\n-static DLMALLOC: SpinMutex<dlmalloc::Dlmalloc> = SpinMutex::new(dlmalloc::DLMALLOC_INIT);\n+static DLMALLOC: SpinMutex<dlmalloc::Dlmalloc<Sgx>> =\n+    SpinMutex::new(dlmalloc::Dlmalloc::new_with_allocator(Sgx {}));\n+\n+struct Sgx;\n+\n+unsafe impl dlmalloc::Allocator for Sgx {\n+    /// Allocs system resources\n+    fn alloc(&self, _size: usize) -> (*mut u8, usize, u32) {\n+        static INIT: AtomicBool = AtomicBool::new(false);\n+\n+        // No ordering requirement since this function is protected by the global lock.\n+        if !INIT.swap(true, Ordering::Relaxed) {\n+            (sgx_mem::heap_base() as _, sgx_mem::heap_size(), 0)\n+        } else {\n+            (ptr::null_mut(), 0, 0)\n+        }\n+    }\n+\n+    fn remap(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize, _can_move: bool) -> *mut u8 {\n+        ptr::null_mut()\n+    }\n+\n+    fn free_part(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize) -> bool {\n+        false\n+    }\n+\n+    fn free(&self, _ptr: *mut u8, _size: usize) -> bool {\n+        return false;\n+    }\n+\n+    fn can_release_part(&self, _flags: u32) -> bool {\n+        false\n+    }\n+\n+    fn allocates_zeros(&self) -> bool {\n+        false\n+    }\n+\n+    fn page_size(&self) -> usize {\n+        0x1000\n+    }\n+}\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}, {"sha": "ef0ca3dd478cc5249653f550876a23794c628c3c", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6da5254a0cc6e896685fa32e2a4c0979933dda5/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=d6da5254a0cc6e896685fa32e2a4c0979933dda5", "patch": "@@ -18,7 +18,7 @@\n \n use crate::alloc::{GlobalAlloc, Layout, System};\n \n-static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n+static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::Dlmalloc::new();\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {"}]}