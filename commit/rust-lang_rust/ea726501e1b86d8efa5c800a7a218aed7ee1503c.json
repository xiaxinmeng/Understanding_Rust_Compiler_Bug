{"sha": "ea726501e1b86d8efa5c800a7a218aed7ee1503c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzI2NTAxZTFiODZkOGVmYTVjODAwYTdhMjE4YWVkN2VlMTUwM2M=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-24T08:22:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-29T19:23:07Z"}, "message": "Use `filter` and `map` in `to_errors`.", "tree": {"sha": "5ff34d1f064c5fa26b7bb6b3ade9557d210367b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff34d1f064c5fa26b7bb6b3ade9557d210367b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea726501e1b86d8efa5c800a7a218aed7ee1503c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea726501e1b86d8efa5c800a7a218aed7ee1503c", "html_url": "https://github.com/rust-lang/rust/commit/ea726501e1b86d8efa5c800a7a218aed7ee1503c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea726501e1b86d8efa5c800a7a218aed7ee1503c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7130e6c0733ca4e6d8fc1dd08a882ff3547c94ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7130e6c0733ca4e6d8fc1dd08a882ff3547c94ba", "html_url": "https://github.com/rust-lang/rust/commit/7130e6c0733ca4e6d8fc1dd08a882ff3547c94ba"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "ccc8aa288d4847e0aa94b10248ee811383760fe3", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea726501e1b86d8efa5c800a7a218aed7ee1503c/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea726501e1b86d8efa5c800a7a218aed7ee1503c/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=ea726501e1b86d8efa5c800a7a218aed7ee1503c", "patch": "@@ -348,15 +348,16 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     /// Converts all remaining obligations to the given error.\n     pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {\n-        let mut errors = vec![];\n-        for (index, node) in self.nodes.iter().enumerate() {\n-            if let NodeState::Pending = node.state.get() {\n-                errors.push(Error {\n+        let errors = self.nodes.iter().enumerate()\n+            .filter(|(_index, node)| node.state.get() == NodeState::Pending)\n+            .map(|(index, _node)| {\n+                Error {\n                     error: error.clone(),\n                     backtrace: self.error_at(index),\n-                });\n-            }\n-        }\n+                }\n+            })\n+            .collect();\n+\n         let successful_obligations = self.compress(DoCompleted::Yes);\n         assert!(successful_obligations.unwrap().is_empty());\n         errors\n@@ -366,10 +367,9 @@ impl<O: ForestObligation> ObligationForest<O> {\n     pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>\n         where F: Fn(&O) -> P\n     {\n-        self.nodes\n-            .iter()\n-            .filter(|n| n.state.get() == NodeState::Pending)\n-            .map(|n| f(&n.obligation))\n+        self.nodes.iter()\n+            .filter(|node| node.state.get() == NodeState::Pending)\n+            .map(|node| f(&node.obligation))\n             .collect()\n     }\n "}]}