{"sha": "53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzY2U0MmRjNGY0ZmNlYWY2ODgxYTMwMjZmM2RiYzhmZDgxYWU2MjY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-08T00:07:32Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-08T00:09:07Z"}, "message": "Implement &-patterns\n\nCloses #2855", "tree": {"sha": "fe06630b44b10afc5708cbebdacb9f8471580ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe06630b44b10afc5708cbebdacb9f8471580ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "html_url": "https://github.com/rust-lang/rust/commit/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f5a099dfcb42c7f2bb38974b57bbde7042ee9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f5a099dfcb42c7f2bb38974b57bbde7042ee9c", "html_url": "https://github.com/rust-lang/rust/commit/e9f5a099dfcb42c7f2bb38974b57bbde7042ee9c"}], "stats": {"total": 106, "additions": 88, "deletions": 18}, "files": [{"sha": "b1f54e701ac8223c9835d929b10da816b0f9f0f4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -360,6 +360,7 @@ enum pat_ {\n     pat_tup(~[@pat]),\n     pat_box(@pat),\n     pat_uniq(@pat),\n+    pat_region(@pat), // borrowed pointer pattern\n     pat_lit(@expr),\n     pat_range(@expr, @expr),\n }"}, {"sha": "429028b966ec2991c8c6a2e9babc28063cce3297", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -595,7 +595,7 @@ fn walk_pat(pat: @pat, it: fn(@pat)) {\n       pat_enum(_, Some(s)) | pat_tup(s) => for s.each |p| {\n         walk_pat(p, it)\n       },\n-      pat_box(s) | pat_uniq(s) => walk_pat(s, it),\n+      pat_box(s) | pat_uniq(s) | pat_region(s) => walk_pat(s, it),\n       pat_wild | pat_lit(_) | pat_range(_, _) | pat_ident(_, _, _)\n         | pat_enum(_, _) => ()\n     }"}, {"sha": "c7ce86921f62eaecb5c6dada5b41b9c675e25a5e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -384,6 +384,7 @@ fn noop_fold_pat(p: pat_, fld: ast_fold) -> pat_ {\n           pat_tup(elts) => pat_tup(vec::map(elts, |x| fld.fold_pat(x))),\n           pat_box(inner) => pat_box(fld.fold_pat(inner)),\n           pat_uniq(inner) => pat_uniq(fld.fold_pat(inner)),\n+          pat_region(inner) => pat_region(fld.fold_pat(inner)),\n           pat_range(e1, e2) => {\n             pat_range(fld.fold_expr(e1), fld.fold_expr(e2))\n           }"}, {"sha": "a21d9de7567dadd7e53daf857cd643a87dce76d3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -42,8 +42,8 @@ use ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              mac_invoc_tt, mac_var, matcher, match_nonterminal, match_seq,\n              match_tok, method, mode, module_ns, mt, mul, mutability,\n              named_field, neg, noreturn, not, pat, pat_box, pat_enum,\n-             pat_ident, pat_lit, pat_range, pat_rec, pat_struct, pat_tup,\n-             pat_uniq, pat_wild, path, private, proto, proto_bare,\n+             pat_ident, pat_lit, pat_range, pat_rec, pat_region, pat_struct,\n+             pat_tup, pat_uniq, pat_wild, path, private, proto, proto_bare,\n              proto_block, proto_box, proto_uniq, provided, public, pure_fn,\n              purity, re_anon, re_named, region, rem, required, ret_style,\n              return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr,\n@@ -1844,6 +1844,25 @@ struct parser {\n             };\n \n           }\n+          token::BINOP(token::AND) => {\n+              let lo = self.span.lo;\n+              self.bump();\n+              let sub = self.parse_pat(refutable);\n+              hi = sub.span.hi;\n+              // HACK: parse &\"...\" as a literal of a borrowed str\n+              pat = match sub.node {\n+                  pat_lit(e@@{\n+                      node: expr_lit(@{node: lit_str(_), span: _}), _\n+                  }) => {\n+                      let vst = @{id: self.get_id(), callee_id: self.get_id(),\n+                                  node: expr_vstore(e, \n+                                          vstore_slice(self.region_from_name(None))),\n+                                  span: mk_sp(lo, hi)};\n+                      pat_lit(vst)\n+                  }\n+              _ => pat_region(sub)\n+              };\n+          }\n           token::LBRACE => {\n             self.bump();\n             let (fields, etc) = self.parse_pat_fields(refutable);"}, {"sha": "451d5be1a500326752da1c70e75f8e65c36d9983", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -1537,6 +1537,10 @@ fn print_pat(s: ps, &&pat: @ast::pat) {\n       }\n       ast::pat_box(inner) => { word(s.s, ~\"@\"); print_pat(s, inner); }\n       ast::pat_uniq(inner) => { word(s.s, ~\"~\"); print_pat(s, inner); }\n+      ast::pat_region(inner) => {\n+          word(s.s, ~\"&\");\n+          print_pat(s, inner);\n+      }\n       ast::pat_lit(e) => print_expr(s, e),\n       ast::pat_range(begin, end) => {\n         print_expr(s, begin);"}, {"sha": "ffe97197f6f6ac0737eca4ed478b555fb8266fc8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -237,7 +237,8 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n       pat_tup(elts) => for elts.each |elt| {\n         v.visit_pat(elt, e, v)\n       },\n-      pat_box(inner) | pat_uniq(inner) => v.visit_pat(inner, e, v),\n+      pat_box(inner) | pat_uniq(inner) | pat_region(inner) =>\n+          v.visit_pat(inner, e, v),\n       pat_ident(_, path, inner) => {\n           visit_path(path, e, v);\n           do option::iter(inner) |subpat| { v.visit_pat(subpat, e, v)};"}, {"sha": "b4a5db2baa427f3862efb941ad89c85f9a3d080d", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -235,7 +235,7 @@ fn pat_ctor_id(tcx: ty::ctxt, p: @pat) -> Option<ctor> {\n       pat_range(lo, hi) => {\n         Some(range(eval_const_expr(tcx, lo), eval_const_expr(tcx, hi)))\n       }\n-      pat_box(_) | pat_uniq(_) | pat_rec(_, _) | pat_tup(_) |\n+      pat_box(_) | pat_uniq(_) | pat_rec(_, _) | pat_tup(_) | pat_region(*) |\n       pat_struct(*) => {\n         Some(single)\n       }\n@@ -258,8 +258,8 @@ fn is_wild(tcx: ty::ctxt, p: @pat) -> bool {\n \n fn missing_ctor(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> Option<ctor> {\n     match ty::get(left_ty).struct {\n-      ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_tup(_) | ty::ty_rec(_) |\n-      ty::ty_class(*) => {\n+      ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_rptr(*) | ty::ty_tup(_) |\n+      ty::ty_rec(_) | ty::ty_class(*) => {\n         for m.each |r| {\n             if !is_wild(tcx, r[0]) { return None; }\n         }\n@@ -305,7 +305,7 @@ fn ctor_arity(tcx: ty::ctxt, ctor: ctor, ty: ty::t) -> uint {\n     match ty::get(ty).struct {\n       ty::ty_tup(fs) => fs.len(),\n       ty::ty_rec(fs) => fs.len(),\n-      ty::ty_box(_) | ty::ty_uniq(_) => 1u,\n+      ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_rptr(*) => 1u,\n       ty::ty_enum(eid, _) => {\n           let id = match ctor { variant(id) => id,\n           _ => fail ~\"impossible case\" };\n@@ -386,7 +386,8 @@ fn specialize(tcx: ty::ctxt, r: ~[@pat], ctor_id: ctor, arity: uint,\n         Some(vec::append(args, vec::tail(r)))\n       }\n       pat_tup(args) => Some(vec::append(args, vec::tail(r))),\n-      pat_box(a) | pat_uniq(a) => Some(vec::append(~[a], vec::tail(r))),\n+      pat_box(a) | pat_uniq(a) | pat_region(a) =>\n+          Some(vec::append(~[a], vec::tail(r))),\n       pat_lit(expr) => {\n         let e_v = eval_const_expr(tcx, expr);\n         let match_ = match ctor_id {\n@@ -440,7 +441,8 @@ fn is_refutable(tcx: ty::ctxt, pat: @pat) -> bool {\n     }\n \n     match pat.node {\n-      pat_box(sub) | pat_uniq(sub) | pat_ident(_, _, Some(sub)) => {\n+      pat_box(sub) | pat_uniq(sub) | pat_region(sub) |\n+      pat_ident(_, _, Some(sub)) => {\n         is_refutable(tcx, sub)\n       }\n       pat_wild | pat_ident(_, _, None) => { false }"}, {"sha": "75868e6300f9d985c3f57580d0d4a8cf1f316484", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -898,8 +898,9 @@ impl &mem_categorization_ctxt {\n             }\n           }\n \n-          ast::pat_box(subpat) | ast::pat_uniq(subpat) => {\n-            // @p1, ~p1\n+          ast::pat_box(subpat) | ast::pat_uniq(subpat) |\n+          ast::pat_region(subpat) => {\n+            // @p1, ~p1, &p1\n             match self.cat_deref(subpat, cmt, 0u, true) {\n               Some(subcmt) => {\n                 self.cat_pattern(subcmt, subpat, op);"}, {"sha": "e09f9860b58b5e38f94cc29a5c985f1fae092fa3", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -914,12 +914,8 @@ fn bind_irrefutable_pat(bcx: block, pat: @ast::pat, val: ValueRef,\n                 bcx = bind_irrefutable_pat(bcx, elem, fldptr, make_copy);\n             }\n         }\n-        ast::pat_box(inner) => {\n-            let llbox = Load(bcx, val);\n-            let unboxed = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n-            bcx = bind_irrefutable_pat(bcx, inner, unboxed, true);\n-        }\n-        ast::pat_uniq(inner) => {\n+        ast::pat_box(inner) | ast::pat_uniq(inner) |\n+        ast::pat_region(inner) => {\n             let llbox = Load(bcx, val);\n             let unboxed = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n             bcx = bind_irrefutable_pat(bcx, inner, unboxed, true);"}, {"sha": "2d49714d7d2eed094652f97b8a720c22705ffc10", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -447,6 +447,22 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n           }\n         }\n       }\n+      ast::pat_region(inner) => {\n+        match structure_of(fcx, pat.span, expected) {\n+          ty::ty_rptr(_, e_inner) => {\n+            check_pat(pcx, inner, e_inner.ty);\n+            fcx.write_ty(pat.id, expected);\n+          }\n+          _ => {\n+            tcx.sess.span_fatal(\n+                pat.span,\n+                ~\"mismatched types: expected `\" +\n+                fcx.infcx().ty_to_str(expected) +\n+                ~\"` found borrowed pointer\");\n+          }\n+        }\n+      }\n+\n     }\n }\n "}, {"sha": "8e31bc38e32599e16dd1cd884ae12f8fec4c70ab", "filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -0,0 +1,10 @@\n+fn foo<T>(s: &str) {\n+    match s {\n+        &\"kitty\" => fail ~\"cat\",\n+        _ => ()\n+    }\n+}\n+\n+fn main() {\n+\n+}\n\\ No newline at end of file"}, {"sha": "844e36ccf3bff36d53398d16c77c5e4418be672e", "filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -0,0 +1,10 @@\n+fn foo<T>(s: &r/uint) {\n+    match s {\n+        &3 => fail ~\"oh\",\n+        _ => ()\n+    }\n+}\n+\n+fn main() {\n+\n+}\n\\ No newline at end of file"}, {"sha": "afe1f34fac46d4db0c2589117459cdc1fd50414d", "filename": "src/test/run-pass/borrowed-ptr-pattern.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs?ref=53ce42dc4f4fceaf6881a3026f3dbc8fd81ae626", "patch": "@@ -0,0 +1,9 @@\n+fn foo<T>(x: &T) {\n+    match x {\n+        &a => fail #fmt(\"%?\", a)\n+    }\n+}\n+\n+fn main() {\n+\n+}\n\\ No newline at end of file"}]}