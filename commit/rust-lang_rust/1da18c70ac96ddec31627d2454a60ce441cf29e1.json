{"sha": "1da18c70ac96ddec31627d2454a60ce441cf29e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYTE4YzcwYWM5NmRkZWMzMTYyN2QyNDU0YTYwY2U0NDFjZjI5ZTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-19T21:43:12Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-19T22:30:58Z"}, "message": "Clean up FIXMEs in syntax::fold\n\nEta-reduce a function, fold over ty constrs, and annotate a FIXME.", "tree": {"sha": "9ed186a05c633b8eac24943b7109f59dc853e2db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed186a05c633b8eac24943b7109f59dc853e2db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1da18c70ac96ddec31627d2454a60ce441cf29e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1da18c70ac96ddec31627d2454a60ce441cf29e1", "html_url": "https://github.com/rust-lang/rust/commit/1da18c70ac96ddec31627d2454a60ce441cf29e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1da18c70ac96ddec31627d2454a60ce441cf29e1/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "030404c793cd20bf8b7eb11f91f3f0f8010bf52a", "url": "https://api.github.com/repos/rust-lang/rust/commits/030404c793cd20bf8b7eb11f91f3f0f8010bf52a", "html_url": "https://github.com/rust-lang/rust/commit/030404c793cd20bf8b7eb11f91f3f0f8010bf52a"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "5658aef8a7efffefe84cd6baeff970586e9f3f0d", "filename": "src/librustsyntax/fold.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1da18c70ac96ddec31627d2454a60ce441cf29e1/src%2Flibrustsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da18c70ac96ddec31627d2454a60ce441cf29e1/src%2Flibrustsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Ffold.rs?ref=1da18c70ac96ddec31627d2454a60ce441cf29e1", "patch": "@@ -40,6 +40,8 @@ type ast_fold_precursor =\n      fold_expr: fn@(expr_, span, ast_fold) -> (expr_, span),\n      fold_ty: fn@(ty_, span, ast_fold) -> (ty_, span),\n      fold_constr: fn@(ast::constr_, span, ast_fold) -> (constr_, span),\n+     fold_ty_constr: fn@(ast::ty_constr_, span, ast_fold)\n+        -> (ty_constr_, span),\n      fold_mod: fn@(_mod, ast_fold) -> _mod,\n      fold_native_mod: fn@(native_mod, ast_fold) -> native_mod,\n      fold_variant: fn@(variant_, span, ast_fold) -> (variant_, span),\n@@ -67,6 +69,7 @@ type a_f =\n      fold_expr: fn@(&&@expr) -> @expr,\n      fold_ty: fn@(&&@ty) -> @ty,\n      fold_constr: fn@(&&@constr) -> @constr,\n+     fold_ty_constr: fn@(&&@ty_constr) -> @ty_constr,\n      fold_mod: fn@(_mod) -> _mod,\n      fold_native_mod: fn@(native_mod) -> native_mod,\n      fold_variant: fn@(variant) -> variant,\n@@ -97,6 +100,7 @@ fn nf_decl_dummy(&&_d: @decl) -> @decl { fail; }\n fn nf_expr_dummy(&&_e: @expr) -> @expr { fail; }\n fn nf_ty_dummy(&&_t: @ty) -> @ty { fail; }\n fn nf_constr_dummy(&&_c: @constr) -> @constr { fail; }\n+fn nf_ty_constr_dummy(&&_c: @ty_constr) -> @ty_constr { fail; }\n fn nf_mod_dummy(_m: _mod) -> _mod { fail; }\n fn nf_native_mod_dummy(_n: native_mod) -> native_mod { fail; }\n fn nf_variant_dummy(_v: variant) -> variant { fail; }\n@@ -141,9 +145,7 @@ fn fold_mac_(m: mac, fld: ast_fold) -> mac {\n              alt m.node {\n                mac_invoc(pth, arg, body) {\n                  mac_invoc(fld.fold_path(pth),\n-                           // FIXME: bind should work, but causes a crash\n-                           option::map(arg) {|arg| fld.fold_expr(arg)},\n-                           body)\n+                           option::map(arg, fld.fold_expr), body)\n                }\n                mac_embed_type(ty) { mac_embed_type(fld.fold_ty(ty)) }\n                mac_embed_block(blk) { mac_embed_block(fld.fold_block(blk)) }\n@@ -500,8 +502,8 @@ fn noop_fold_ty(t: ty_, fld: ast_fold) -> ty_ {\n       ty_fn(proto, decl) {ty_fn(proto, fold_fn_decl(decl, fld))}\n       ty_tup(tys) {ty_tup(vec::map(tys) {|ty| fld.fold_ty(ty)})}\n       ty_path(path, id) {ty_path(fld.fold_path(path), fld.new_id(id))}\n-      // FIXME: constrs likely needs to be folded...\n-      ty_constr(ty, constrs) {ty_constr(fld.fold_ty(ty), constrs)}\n+      ty_constr(ty, constrs) {ty_constr(fld.fold_ty(ty),\n+                                vec::map(constrs, fld.fold_ty_constr))}\n       ty_vstore(t, vs) {ty_vstore(fld.fold_ty(t), vs)}\n       ty_mac(mac) {ty_mac(fold_mac(mac))}\n       ty_infer {t}\n@@ -512,6 +514,11 @@ fn noop_fold_constr(c: constr_, fld: ast_fold) -> constr_ {\n     {path: fld.fold_path(c.path), args: c.args, id: fld.new_id(c.id)}\n }\n \n+fn noop_fold_ty_constr(c: ty_constr_, fld: ast_fold) -> ty_constr_ {\n+    let rslt: ty_constr_ =\n+        {path: fld.fold_path(c.path), args: c.args, id: fld.new_id(c.id)};\n+    rslt\n+}\n // ...nor do modules\n fn noop_fold_mod(m: _mod, fld: ast_fold) -> _mod {\n     ret {view_items: vec::map(m.view_items, fld.fold_view_item),\n@@ -594,6 +601,7 @@ fn default_ast_fold() -> @ast_fold_precursor {\n           fold_expr: wrap(noop_fold_expr),\n           fold_ty: wrap(noop_fold_ty),\n           fold_constr: wrap(noop_fold_constr),\n+          fold_ty_constr: wrap(noop_fold_ty_constr),\n           fold_mod: noop_fold_mod,\n           fold_native_mod: noop_fold_native_mod,\n           fold_variant: wrap(noop_fold_variant),\n@@ -608,6 +616,7 @@ fn default_ast_fold() -> @ast_fold_precursor {\n fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n     // FIXME: Have to bind all the bare functions into shared functions\n     // because @mut is invariant with respect to its contents\n+    // I assume this has something to do with Issue #1973 - tjc\n     let result: ast_fold =\n         @mut {fold_crate: bind nf_crate_dummy(_),\n                   fold_crate_directive: bind nf_crate_directive_dummy(_),\n@@ -625,6 +634,7 @@ fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n                   fold_expr: bind nf_expr_dummy(_),\n                   fold_ty: bind nf_ty_dummy(_),\n                   fold_constr: bind nf_constr_dummy(_),\n+                  fold_ty_constr: bind nf_ty_constr_dummy(_),\n                   fold_mod: bind nf_mod_dummy(_),\n                   fold_native_mod: bind nf_native_mod_dummy(_),\n                   fold_variant: bind nf_variant_dummy(_),\n@@ -714,6 +724,13 @@ fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n         let (n, s) = afp.fold_constr(x.node, x.span, f);\n         ret @{node: n, span: afp.new_span(s)};\n     }\n+    fn f_ty_constr(afp: ast_fold_precursor, f: ast_fold,\n+                   &&x: @ast::ty_constr) ->\n+       @ast::ty_constr {\n+        let (n, s) : (ty_constr_, span) =\n+            afp.fold_ty_constr(x.node, x.span, f);\n+        ret @{node: n, span: afp.new_span(s)};\n+    }\n     fn f_mod(afp: ast_fold_precursor, f: ast_fold, x: _mod) -> _mod {\n         ret afp.fold_mod(x, f);\n     }\n@@ -755,6 +772,7 @@ fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n          fold_expr: bind f_expr(afp, result, _),\n          fold_ty: bind f_ty(afp, result, _),\n          fold_constr: bind f_constr(afp, result, _),\n+         fold_ty_constr: bind f_ty_constr(afp, result, _),\n          fold_mod: bind f_mod(afp, result, _),\n          fold_native_mod: bind f_native_mod(afp, result, _),\n          fold_variant: bind f_variant(afp, result, _),"}]}