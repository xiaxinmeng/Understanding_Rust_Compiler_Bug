{"sha": "7e8825b4ecdc0540dd3008eb9ff6c520bc88799d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlODgyNWI0ZWNkYzA1NDBkZDMwMDhlYjlmZjZjNTIwYmM4ODc5OWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-20T00:35:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-20T00:46:21Z"}, "message": "resolve: Continue search in outer scopes after applying derive resolution fallback", "tree": {"sha": "39aa941896a49ce9876d1ff8c10d380dc85c4ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39aa941896a49ce9876d1ff8c10d380dc85c4ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d", "html_url": "https://github.com/rust-lang/rust/commit/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f28f648a9699db67b86735f97d609c3dd06f9ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28f648a9699db67b86735f97d609c3dd06f9ded", "html_url": "https://github.com/rust-lang/rust/commit/f28f648a9699db67b86735f97d609c3dd06f9ded"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "3ebf5793e550bbf6cc8816fe8c72b3d9bdd2932f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7e8825b4ecdc0540dd3008eb9ff6c520bc88799d", "patch": "@@ -1900,12 +1900,13 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         }\n \n         ident.span = ident.span.modern();\n+        let mut poisoned = None;\n         loop {\n-            let (opt_module, poisoned) = if let Some(node_id) = record_used_id {\n+            let opt_module = if let Some(node_id) = record_used_id {\n                 self.hygienic_lexical_parent_with_compatibility_fallback(module, &mut ident.span,\n-                                                                         node_id)\n+                                                                         node_id, &mut poisoned)\n             } else {\n-                (self.hygienic_lexical_parent(module, &mut ident.span), None)\n+                self.hygienic_lexical_parent(module, &mut ident.span)\n             };\n             module = unwrap_or!(opt_module, break);\n             let orig_current_module = self.current_module;\n@@ -1933,7 +1934,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     }\n                     return Some(LexicalScopeBinding::Item(binding))\n                 }\n-                _ if poisoned.is_some() => break,\n                 Err(Determined) => continue,\n                 Err(Undetermined) =>\n                     span_bug!(ident.span, \"undetermined resolution during main resolution pass\"),\n@@ -1993,12 +1993,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         None\n     }\n \n-    fn hygienic_lexical_parent_with_compatibility_fallback(\n-        &mut self, module: Module<'a>, span: &mut Span, node_id: NodeId\n-    ) -> (Option<Module<'a>>, /* poisoned */ Option<NodeId>)\n-    {\n+    fn hygienic_lexical_parent_with_compatibility_fallback(&mut self, module: Module<'a>,\n+                                                           span: &mut Span, node_id: NodeId,\n+                                                           poisoned: &mut Option<NodeId>)\n+                                                           -> Option<Module<'a>> {\n         if let module @ Some(..) = self.hygienic_lexical_parent(module, span) {\n-            return (module, None);\n+            return module;\n         }\n \n         // We need to support the next case under a deprecation warning\n@@ -2019,13 +2019,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 // The macro is a proc macro derive\n                 if module.expansion.looks_like_proc_macro_derive() {\n                     if parent.expansion.is_descendant_of(span.ctxt().outer()) {\n-                        return (module.parent, Some(node_id));\n+                        *poisoned = Some(node_id);\n+                        return module.parent;\n                     }\n                 }\n             }\n         }\n \n-        (None, None)\n+        None\n     }\n \n     fn resolve_ident_in_module(&mut self,"}, {"sha": "6ac6e4f6def5c60a0ac2c1d958be79472db4199a", "filename": "src/test/ui-fulldeps/proc-macro/generate-mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.rs?ref=7e8825b4ecdc0540dd3008eb9ff6c520bc88799d", "patch": "@@ -31,6 +31,14 @@ struct S;\n                                      //~| WARN this was previously accepted\n struct Z;\n \n+fn inner_block() {\n+    #[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside` in this scope\n+                                        //~| WARN cannot find type `OuterDerive` in this scope\n+                                        //~| WARN this was previously accepted\n+                                        //~| WARN this was previously accepted\n+    struct InnerZ;\n+}\n+\n #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n struct W;\n "}, {"sha": "87e5fe2554264014ea6da2c7164f4754b72f405c", "filename": "src/test/ui-fulldeps/proc-macro/generate-mod.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e8825b4ecdc0540dd3008eb9ff6c520bc88799d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fgenerate-mod.stderr?ref=7e8825b4ecdc0540dd3008eb9ff6c520bc88799d", "patch": "@@ -41,6 +41,24 @@ LL | #[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #50504 <https://github.com/rust-lang/rust/issues/50504>\n \n+warning: cannot find type `FromOutside` in this scope\n+  --> $DIR/generate-mod.rs:35:14\n+   |\n+LL |     #[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside` in this scope\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #50504 <https://github.com/rust-lang/rust/issues/50504>\n+\n+warning: cannot find type `OuterDerive` in this scope\n+  --> $DIR/generate-mod.rs:35:14\n+   |\n+LL |     #[derive(generate_mod::CheckDerive)] //~ WARN cannot find type `FromOutside` in this scope\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #50504 <https://github.com/rust-lang/rust/issues/50504>\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0412`."}]}