{"sha": "fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYTAzZTlkN2RiNjZmNTlmNGMxYWU5Y2E3NTJiNjhjNTNkMWZlODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-19T16:38:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-22T14:48:10Z"}, "message": "some more compile-fail tests", "tree": {"sha": "29d6deb72ece065368fc58332b2f139af7f33e39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d6deb72ece065368fc58332b2f139af7f33e39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "html_url": "https://github.com/rust-lang/rust/commit/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd1558f33719facb84726f9489ee9e2abb279e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1558f33719facb84726f9489ee9e2abb279e8b", "html_url": "https://github.com/rust-lang/rust/commit/dd1558f33719facb84726f9489ee9e2abb279e8b"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "6d853e75fb4aec207cd641359002a7499cd158f3", "filename": "tests/compile-fail-fullmir/stack_free.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail-fullmir%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail-fullmir%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstack_free.rs?ref=fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "patch": "@@ -1,3 +1,6 @@\n+// Validation changes why we fail\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+\n // error-pattern: tried to deallocate Stack memory but gave Machine(Rust) as the kind\n \n fn main() {"}, {"sha": "86b96e2880ec327c7e5a9492569620a2b8cc874c", "filename": "tests/compile-fail/stacked_borrows/illegal_write1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write1.rs?ref=fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "patch": "@@ -0,0 +1,11 @@\n+fn evil(x: &u32) {\n+    let x : &mut u32 = unsafe { &mut *(x as *const _ as *mut _) };\n+    *x = 42; // mutating shared ref without `UnsafeCell`\n+}\n+\n+fn main() {\n+    let target = 42;\n+    let ref_ = &target;\n+    evil(ref_); // invalidates shared ref\n+    let _x = *ref_; //~ ERROR Shr reference with non-reactivatable tag Frz\n+}"}, {"sha": "26c30a4122b40fe5cf4afe4ef4c0dd621c3ff74e", "filename": "tests/compile-fail/stacked_borrows/illegal_write3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write3.rs?ref=fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let target = 42;\n+    // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n+    let r#ref = &target; // freeze\n+    let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n+    unsafe { *ptr = 42; }\n+    let _val = *r#ref; //~ ERROR Shr reference with non-reactivatable tag Frz\n+}"}, {"sha": "b2ffac865bd426abb271c753fc6ef29dd20ee37b", "filename": "tests/compile-fail/stacked_borrows/illegal_write4.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write4.rs?ref=fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "patch": "@@ -0,0 +1,31 @@\n+// The compiler inserts some reborrows, enable optimizations to\n+// get rid of them.\n+// compile-flags: -Zmir-opt-level=1\n+\n+use std::mem;\n+\n+// This is an example of a piece of code that intuitively seems like we might\n+// want to reject it, but that doesn't turn out to be possible.\n+\n+fn main() {\n+    let target = 42;\n+    // Make sure a cannot use a raw-tagged `&mut` pointing to a frozen location, not\n+    // even to create a raw.\n+    let r#ref = &target; // freeze\n+    let ptr = r#ref as *const _ as *mut i32; // raw ptr, with raw tag\n+    let mut_ref: &mut i32 = unsafe { mem::transmute(ptr) }; // &mut, with raw tag\n+    // Now we have an &mut to a frozen location, but that is completely normal:\n+    // We'd just unfreeze the location if we used it.\n+    let bad_ptr = mut_ref as *mut i32; // even just creating this is like a use of `mut_ref`.\n+    // That violates the location being frozen!  However, we do not properly detect this:\n+    // We first see a `&mut` with a `Raw` tag being deref'd for a frozen location,\n+    // which can happen legitimately if the compiler optimized away an `&mut*` that\n+    // turns a raw into a `&mut`.  Next, we create a raw ref to a frozen location\n+    // from a `Raw` tag, which can happen legitimately when interior mutability\n+    // is involved.\n+    let _val = *r#ref; // Make sure it is still frozen.\n+\n+    // We only actually unfreeze once we muteate through the bad pointer.\n+    unsafe { *bad_ptr = 42 };\n+    let _val = *r#ref; //~ ERROR Shr reference with non-reactivatable tag Frz\n+}"}, {"sha": "c5845cb693bb3d9796a48092aebdb736d5b87e89", "filename": "tests/compile-fail/validity/dangling_ref1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs?ref=fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "patch": "@@ -0,0 +1,5 @@\n+use std::mem;\n+\n+fn main() {\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR tried to interpret some bytes as a pointer\n+}"}, {"sha": "21650ebf950673e4943128ef24a8e44c2a2c8cb2", "filename": "tests/compile-fail/validity/dangling_ref2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref2.rs?ref=fda03e9d7db66f59f4c1ae9ca752b68c53d1fe88", "patch": "@@ -0,0 +1,7 @@\n+use std::mem;\n+\n+fn main() {\n+    let val = 14;\n+    let ptr = (&val as *const i32).wrapping_offset(1);\n+    let _x: &i32 = unsafe { mem::transmute(ptr) }; //~ ERROR outside bounds of allocation\n+}"}]}