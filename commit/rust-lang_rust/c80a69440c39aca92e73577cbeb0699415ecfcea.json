{"sha": "c80a69440c39aca92e73577cbeb0699415ecfcea", "node_id": "C_kwDOAAsO6NoAKGM4MGE2OTQ0MGMzOWFjYTkyZTczNTc3Y2JlYjA2OTk0MTVlY2ZjZWE", "commit": {"author": {"name": "Gimbles", "email": "93856041+gimbles@users.noreply.github.com", "date": "2023-04-07T17:45:25Z"}, "committer": {"name": "Gimbles", "email": "93856041+gimbles@users.noreply.github.com", "date": "2023-04-08T05:38:01Z"}, "message": "s/ignore_git/omit_git_hash", "tree": {"sha": "0a5f5030bbf08e323f14b90626c6d9f85f7ef629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a5f5030bbf08e323f14b90626c6d9f85f7ef629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80a69440c39aca92e73577cbeb0699415ecfcea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80a69440c39aca92e73577cbeb0699415ecfcea", "html_url": "https://github.com/rust-lang/rust/commit/c80a69440c39aca92e73577cbeb0699415ecfcea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80a69440c39aca92e73577cbeb0699415ecfcea/comments", "author": {"login": "gimbles", "id": 93856041, "node_id": "U_kgDOBZghKQ", "avatar_url": "https://avatars.githubusercontent.com/u/93856041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gimbles", "html_url": "https://github.com/gimbles", "followers_url": "https://api.github.com/users/gimbles/followers", "following_url": "https://api.github.com/users/gimbles/following{/other_user}", "gists_url": "https://api.github.com/users/gimbles/gists{/gist_id}", "starred_url": "https://api.github.com/users/gimbles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gimbles/subscriptions", "organizations_url": "https://api.github.com/users/gimbles/orgs", "repos_url": "https://api.github.com/users/gimbles/repos", "events_url": "https://api.github.com/users/gimbles/events{/privacy}", "received_events_url": "https://api.github.com/users/gimbles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gimbles", "id": 93856041, "node_id": "U_kgDOBZghKQ", "avatar_url": "https://avatars.githubusercontent.com/u/93856041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gimbles", "html_url": "https://github.com/gimbles", "followers_url": "https://api.github.com/users/gimbles/followers", "following_url": "https://api.github.com/users/gimbles/following{/other_user}", "gists_url": "https://api.github.com/users/gimbles/gists{/gist_id}", "starred_url": "https://api.github.com/users/gimbles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gimbles/subscriptions", "organizations_url": "https://api.github.com/users/gimbles/orgs", "repos_url": "https://api.github.com/users/gimbles/repos", "events_url": "https://api.github.com/users/gimbles/events{/privacy}", "received_events_url": "https://api.github.com/users/gimbles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94524020ea12f7947275063b65f8b7d705be073e", "url": "https://api.github.com/repos/rust-lang/rust/commits/94524020ea12f7947275063b65f8b7d705be073e", "html_url": "https://github.com/rust-lang/rust/commit/94524020ea12f7947275063b65f8b7d705be073e"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "edc72d3ec1cb41a049b75b5238088d86f1e4c3d9", "filename": "config.example.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80a69440c39aca92e73577cbeb0699415ecfcea/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c80a69440c39aca92e73577cbeb0699415ecfcea/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=c80a69440c39aca92e73577cbeb0699415ecfcea", "patch": "@@ -585,7 +585,7 @@ changelog-seen = 2\n # Having the git information can cause a lot of rebuilds during development.\n #\n # FIXME(#76720): this can causes bugs if different compilers reuse the same metadata cache.\n-#ignore-git = if rust.channel == \"dev\" { true } else { false }\n+#omit-git-hash = if rust.channel == \"dev\" { true } else { false }\n \n # Whether to create a source tarball by default when running `x dist`.\n #"}, {"sha": "390047f6fdce1c0b2a77b54fa82b14367108d468", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=c80a69440c39aca92e73577cbeb0699415ecfcea", "patch": "@@ -19,7 +19,7 @@ pub enum GitInfo {\n     #[default]\n     Absent,\n     /// This is a git repository.\n-    /// If the info should be used (`ignore_git` is false), this will be\n+    /// If the info should be used (`omit_git_hash` is false), this will be\n     /// `Some`, otherwise it will be `None`.\n     Present(Option<Info>),\n     /// This is not a git repostory, but the info can be fetched from the\n@@ -35,7 +35,7 @@ pub struct Info {\n }\n \n impl GitInfo {\n-    pub fn new(ignore_git: bool, dir: &Path) -> GitInfo {\n+    pub fn new(omit_git_hash: bool, dir: &Path) -> GitInfo {\n         // See if this even begins to look like a git dir\n         if !dir.join(\".git\").exists() {\n             match read_commit_info_file(dir) {\n@@ -52,7 +52,7 @@ impl GitInfo {\n \n         // If we're ignoring the git info, we don't actually need to collect it, just make sure this\n         // was a git repo in the first place.\n-        if ignore_git {\n+        if omit_git_hash {\n             return GitInfo::Present(None);\n         }\n "}, {"sha": "7a934e16f5a359b51450acbc5c58495fd1e137fd", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c80a69440c39aca92e73577cbeb0699415ecfcea", "patch": "@@ -77,7 +77,7 @@ pub struct Config {\n     pub tools: Option<HashSet<String>>,\n     pub sanitizers: bool,\n     pub profiler: bool,\n-    pub ignore_git: bool,\n+    pub omit_git_hash: bool,\n     pub exclude: Vec<TaskPath>,\n     pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n@@ -755,7 +755,7 @@ define_config! {\n         verbose_tests: Option<bool> = \"verbose-tests\",\n         optimize_tests: Option<bool> = \"optimize-tests\",\n         codegen_tests: Option<bool> = \"codegen-tests\",\n-        ignore_git: Option<bool> = \"ignore-git\",\n+        omit_git_hash: Option<bool> = \"omit-git-hash\",\n         dist_src: Option<bool> = \"dist-src\",\n         save_toolstates: Option<String> = \"save-toolstates\",\n         codegen_backends: Option<Vec<String>> = \"codegen-backends\",\n@@ -1088,7 +1088,7 @@ impl Config {\n         let mut debuginfo_level_tools = None;\n         let mut debuginfo_level_tests = None;\n         let mut optimize = None;\n-        let mut ignore_git = None;\n+        let mut omit_git_hash = None;\n \n         if let Some(rust) = toml.rust {\n             debug = rust.debug;\n@@ -1109,7 +1109,7 @@ impl Config {\n                 .map(|v| v.expect(\"invalid value for rust.split_debuginfo\"))\n                 .unwrap_or(SplitDebuginfo::default_for_platform(&config.build.triple));\n             optimize = rust.optimize;\n-            ignore_git = rust.ignore_git;\n+            omit_git_hash = rust.omit_git_hash;\n             config.rust_new_symbol_mangling = rust.new_symbol_mangling;\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n             set(&mut config.codegen_tests, rust.codegen_tests);\n@@ -1166,8 +1166,8 @@ impl Config {\n \n         // rust_info must be set before is_ci_llvm_available() is called.\n         let default = config.channel == \"dev\";\n-        config.ignore_git = ignore_git.unwrap_or(default);\n-        config.rust_info = GitInfo::new(config.ignore_git, &config.src);\n+        config.omit_git_hash = omit_git_hash.unwrap_or(default);\n+        config.rust_info = GitInfo::new(config.omit_git_hash, &config.src);\n \n         if let Some(llvm) = toml.llvm {\n             match llvm.ccache {"}, {"sha": "5ee18cf64110422f0f8d0c90c42c0e9dc8a09c46", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c80a69440c39aca92e73577cbeb0699415ecfcea", "patch": "@@ -358,14 +358,14 @@ impl Build {\n         #[cfg(not(unix))]\n         let is_sudo = false;\n \n-        let ignore_git = config.ignore_git;\n-        let rust_info = channel::GitInfo::new(ignore_git, &src);\n-        let cargo_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/cargo\"));\n+        let omit_git_hash = config.omit_git_hash;\n+        let rust_info = channel::GitInfo::new(omit_git_hash, &src);\n+        let cargo_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/cargo\"));\n         let rust_analyzer_info =\n-            channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rust-analyzer\"));\n-        let clippy_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/clippy\"));\n-        let miri_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/miri\"));\n-        let rustfmt_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rustfmt\"));\n+            channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/rust-analyzer\"));\n+        let clippy_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/clippy\"));\n+        let miri_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/miri\"));\n+        let rustfmt_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/rustfmt\"));\n \n         // we always try to use git for LLVM builds\n         let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n@@ -1233,7 +1233,7 @@ impl Build {\n         match &self.config.channel[..] {\n             \"stable\" => num.to_string(),\n             \"beta\" => {\n-                if self.rust_info().is_managed_git_subrepository() && !self.config.ignore_git {\n+                if self.rust_info().is_managed_git_subrepository() && !self.config.omit_git_hash {\n                     format!(\"{}-beta.{}\", num, self.beta_prerelease_version())\n                 } else {\n                     format!(\"{}-beta\", num)"}, {"sha": "6a687a7903e0f391bfdcedddbe86736e89dd563c", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c80a69440c39aca92e73577cbeb0699415ecfcea", "patch": "@@ -320,7 +320,7 @@ pub fn prepare_tool_cargo(\n     cargo.env(\"CFG_RELEASE_NUM\", &builder.version);\n     cargo.env(\"DOC_RUST_LANG_ORG_CHANNEL\", builder.doc_rust_lang_org_channel());\n \n-    let info = GitInfo::new(builder.config.ignore_git, &dir);\n+    let info = GitInfo::new(builder.config.omit_git_hash, &dir);\n     if let Some(sha) = info.sha() {\n         cargo.env(\"CFG_COMMIT_HASH\", sha);\n     }"}, {"sha": "2217e6ee7043ac826ea5d118e8d8743f6094055f", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c80a69440c39aca92e73577cbeb0699415ecfcea/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile?ref=c80a69440c39aca92e73577cbeb0699415ecfcea", "patch": "@@ -24,6 +24,6 @@ RUN sh /scripts/sccache.sh\n # We are disabling CI LLVM since distcheck is an offline build.\n ENV NO_DOWNLOAD_CI_LLVM 1\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --set rust.ignore-git=false\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --set rust.omit-git-hash=false\n ENV SCRIPT python3 ../x.py --stage 2 test distcheck\n ENV DIST_SRC 1"}]}