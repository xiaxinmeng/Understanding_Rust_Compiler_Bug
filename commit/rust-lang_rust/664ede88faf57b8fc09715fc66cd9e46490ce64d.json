{"sha": "664ede88faf57b8fc09715fc66cd9e46490ce64d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NGVkZTg4ZmFmNTdiOGZjMDk3MTVmYzY2Y2Q5ZTQ2NDkwY2U2NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T06:52:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-14T06:52:19Z"}, "message": "Auto merge of #56536 - alexcrichton:update-master, r=Mark-Simulacrum\n\nBump to 1.33.0\n\n* Update bootstrap compiler\n* Update version to 1.33.0\n* Remove some `#[cfg(stage0)]` annotations", "tree": {"sha": "a3e57a948123750226a0fed966826221420039c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e57a948123750226a0fed966826221420039c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664ede88faf57b8fc09715fc66cd9e46490ce64d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664ede88faf57b8fc09715fc66cd9e46490ce64d", "html_url": "https://github.com/rust-lang/rust/commit/664ede88faf57b8fc09715fc66cd9e46490ce64d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664ede88faf57b8fc09715fc66cd9e46490ce64d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a0bd60820374165427962e9802f4f3c3f7ff7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a0bd60820374165427962e9802f4f3c3f7ff7b", "html_url": "https://github.com/rust-lang/rust/commit/97a0bd60820374165427962e9802f4f3c3f7ff7b"}, {"sha": "cf47a19305d929d1870414dd6911ca3191597668", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf47a19305d929d1870414dd6911ca3191597668", "html_url": "https://github.com/rust-lang/rust/commit/cf47a19305d929d1870414dd6911ca3191597668"}], "stats": {"total": 110, "additions": 47, "deletions": 63}, "files": [{"sha": "878b6ed73a3125712e6034aa151188cafa8aa989", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -24,7 +24,7 @@ use Build;\n use config::Config;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.32.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.33.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "9ad8ad1fc0775931341ea624b866536c63fe11ec", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -1514,19 +1514,19 @@ fn contains_weird_cases() {\n \n #[test]\n fn trim_ws() {\n-    assert_eq!(\" \\t  a \\t  \".trim_left_matches(|c: char| c.is_whitespace()),\n+    assert_eq!(\" \\t  a \\t  \".trim_start_matches(|c: char| c.is_whitespace()),\n                     \"a \\t  \");\n-    assert_eq!(\" \\t  a \\t  \".trim_right_matches(|c: char| c.is_whitespace()),\n+    assert_eq!(\" \\t  a \\t  \".trim_end_matches(|c: char| c.is_whitespace()),\n                \" \\t  a\");\n     assert_eq!(\" \\t  a \\t  \".trim_start_matches(|c: char| c.is_whitespace()),\n                     \"a \\t  \");\n     assert_eq!(\" \\t  a \\t  \".trim_end_matches(|c: char| c.is_whitespace()),\n                \" \\t  a\");\n     assert_eq!(\" \\t  a \\t  \".trim_matches(|c: char| c.is_whitespace()),\n                     \"a\");\n-    assert_eq!(\" \\t   \\t  \".trim_left_matches(|c: char| c.is_whitespace()),\n+    assert_eq!(\" \\t   \\t  \".trim_start_matches(|c: char| c.is_whitespace()),\n                          \"\");\n-    assert_eq!(\" \\t   \\t  \".trim_right_matches(|c: char| c.is_whitespace()),\n+    assert_eq!(\" \\t   \\t  \".trim_end_matches(|c: char| c.is_whitespace()),\n                \"\");\n     assert_eq!(\" \\t   \\t  \".trim_start_matches(|c: char| c.is_whitespace()),\n                          \"\");"}, {"sha": "899fae909467a29783bf6ef78846742baee5a5d8", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -1,7 +1,6 @@\n #![stable(feature = \"\", since = \"1.30.0\")]\n \n #![allow(non_camel_case_types)]\n-#![cfg_attr(stage0, allow(dead_code))]\n \n //! Utilities related to FFI bindings.\n \n@@ -123,7 +122,6 @@ struct VaListImpl {\n                      all supported platforms\",\n            issue = \"27745\")]\n #[repr(transparent)]\n-#[cfg(not(stage0))]\n pub struct VaList<'a>(&'a mut VaListImpl);\n \n // The VaArgSafe trait needs to be used in public interfaces, however, the trait\n@@ -173,7 +171,6 @@ impl<T> sealed_trait::VaArgSafe for *mut T {}\n            issue = \"27745\")]\n impl<T> sealed_trait::VaArgSafe for *const T {}\n \n-#[cfg(not(stage0))]\n impl<'a> VaList<'a> {\n     /// Advance to the next arg.\n     #[unstable(feature = \"c_variadic\",\n@@ -208,7 +205,6 @@ impl<'a> VaList<'a> {\n     }\n }\n \n-#[cfg(not(stage0))]\n extern \"rust-intrinsic\" {\n     /// Destroy the arglist `ap` after initialization with `va_start` or\n     /// `va_copy`."}, {"sha": "b94d5b4adcf0986cb4cf6d763638fe11f7d894f4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -718,7 +718,6 @@ extern \"rust-intrinsic\" {\n     pub fn uninit<T>() -> T;\n \n     /// Moves a value out of scope without running drop glue.\n-    #[cfg(not(stage0))]\n     pub fn forget<T: ?Sized>(_: T);\n \n     /// Reinterprets the bits of a value of one type as another type.\n@@ -1476,14 +1475,12 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_left` method. For example,\n     /// [`std::u32::rotate_left`](../../std/primitive.u32.html#method.rotate_left)\n-    #[cfg(not(stage0))]\n     pub fn rotate_left<T>(x: T, y: T) -> T;\n \n     /// Performs rotate right.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_right` method. For example,\n     /// [`std::u32::rotate_right`](../../std/primitive.u32.html#method.rotate_right)\n-    #[cfg(not(stage0))]\n     pub fn rotate_right<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits."}, {"sha": "afd9fcb1fba84d9638d27c0b86312bb2efb109d7", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -149,7 +149,6 @@ pub fn forget<T>(t: T) {\n ///\n /// [`forget`]: fn.forget.html\n #[inline]\n-#[cfg(not(stage0))]\n #[unstable(feature = \"forget_unsized\", issue = \"0\")]\n pub fn forget_unsized<T: ?Sized>(t: T) {\n     unsafe { intrinsics::forget(t) }"}, {"sha": "4acf3a15ebf0dbf5de22104cd667ce00a73e0d26", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -2330,12 +2330,7 @@ assert_eq!(n.rotate_left(\", $rot, \"), m);\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n-                #[cfg(not(stage0))] {\n-                    unsafe { intrinsics::rotate_left(self, n as $SelfT) }\n-                }\n-                #[cfg(stage0)] {\n-                    (self << (n % $BITS)) | (self >> (($BITS - (n % $BITS)) % $BITS))\n-                }\n+                unsafe { intrinsics::rotate_left(self, n as $SelfT) }\n             }\n         }\n \n@@ -2360,12 +2355,7 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n             #[rustc_const_unstable(feature = \"const_int_rotate\")]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n-                #[cfg(not(stage0))] {\n-                    unsafe { intrinsics::rotate_right(self, n as $SelfT) }\n-                }\n-                #[cfg(stage0)] {\n-                    (self >> (n % $BITS)) | (self << (($BITS - (n % $BITS)) % $BITS))\n-                }\n+                unsafe { intrinsics::rotate_right(self, n as $SelfT) }\n             }\n         }\n "}, {"sha": "e86a392a2c828ffe6faeb90ccec3735e20e0483c", "filename": "src/libcore/ops/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Funsize.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -93,7 +93,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n /// {}\n /// ```\n #[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n-#[cfg_attr(not(stage0), lang = \"dispatch_from_dyn\")]\n+#[lang = \"dispatch_from_dyn\"]\n pub trait DispatchFromDyn<T> {\n     // Empty.\n }"}, {"sha": "060983a702f0b79f2e1f2ef87e02442aa9ffc8f3", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -1940,7 +1940,7 @@ atomic_int! {\n     8,\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+#[cfg(target_has_atomic = \"128\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n@@ -1954,7 +1954,7 @@ atomic_int! {\n     16,\n     i128 AtomicI128 ATOMIC_I128_INIT\n }\n-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+#[cfg(target_has_atomic = \"128\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),"}, {"sha": "b7759a8c92b07ef64a461f0c7f3bf590e9c8c400", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -463,7 +463,7 @@ impl BuiltinLintDiagnostics {\n                     Ok(ref s) => {\n                         // FIXME(Manishearth) ideally the emitting code\n                         // can tell us whether or not this is global\n-                        let opt_colon = if s.trim_left().starts_with(\"::\") {\n+                        let opt_colon = if s.trim_start().starts_with(\"::\") {\n                             \"\"\n                         } else {\n                             \"::\""}, {"sha": "7bd0f0f8fc46961b29cc54596f4c6b315aaea568", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -1262,7 +1262,7 @@ impl EmitterWriter {\n \n                         // Do not underline the leading...\n                         let start = part.snippet.len()\n-                            .saturating_sub(part.snippet.trim_left().len());\n+                            .saturating_sub(part.snippet.trim_start().len());\n                         // ...or trailing spaces. Account for substitutions containing unicode\n                         // characters.\n                         let sub_len = part.snippet.trim().chars().fold(0, |acc, ch| {"}, {"sha": "e071c34ff7f53de9c69e408366346290f0db1b36", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -167,7 +167,7 @@ impl NonSnakeCase {\n     fn to_snake_case(mut str: &str) -> String {\n         let mut words = vec![];\n         // Preserve leading underscores\n-        str = str.trim_left_matches(|c: char| {\n+        str = str.trim_start_matches(|c: char| {\n             if c == '_' {\n                 words.push(String::new());\n                 true\n@@ -199,7 +199,7 @@ impl NonSnakeCase {\n             if ident.is_empty() {\n                 return true;\n             }\n-            let ident = ident.trim_left_matches('\\'');\n+            let ident = ident.trim_start_matches('\\'');\n             let ident = ident.trim_matches('_');\n \n             let mut allow_underscore = true;"}, {"sha": "ce482087bbae57caa5d4116d8995d2d30d71b935", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -192,11 +192,11 @@ fn main() {\n             // On MSVC llvm-config will print the full name to libraries, but\n             // we're only interested in the name part\n             let name = Path::new(lib).file_name().unwrap().to_str().unwrap();\n-            name.trim_right_matches(\".lib\")\n+            name.trim_end_matches(\".lib\")\n         } else if lib.ends_with(\".lib\") {\n             // Some MSVC libraries just come up with `.lib` tacked on, so chop\n             // that off\n-            lib.trim_right_matches(\".lib\")\n+            lib.trim_end_matches(\".lib\")\n         } else {\n             continue;\n         };"}, {"sha": "fb93c41ce4f7619de08f6fcdeb43c7569a688267", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -426,13 +426,13 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     .span_to_snippet(pat_span)\n                     .unwrap();\n                 if pat_snippet.starts_with('&') {\n-                    let pat_snippet = pat_snippet[1..].trim_left();\n+                    let pat_snippet = pat_snippet[1..].trim_start();\n                     let suggestion;\n                     let to_remove;\n                     if pat_snippet.starts_with(\"mut\")\n                         && pat_snippet[\"mut\".len()..].starts_with(Pattern_White_Space)\n                     {\n-                        suggestion = pat_snippet[\"mut\".len()..].trim_left();\n+                        suggestion = pat_snippet[\"mut\".len()..].trim_start();\n                         to_remove = \"&mut\";\n                     } else {\n                         suggestion = pat_snippet;"}, {"sha": "cbe2e25b4fcd155f0492dab9f1db63eb02fc8259", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     if bits == 0 {\n                         return err!(Intrinsic(format!(\"{} called on 0\", intrinsic_name)));\n                     }\n-                    numeric_intrinsic(intrinsic_name.trim_right_matches(\"_nonzero\"), bits, kind)?\n+                    numeric_intrinsic(intrinsic_name.trim_end_matches(\"_nonzero\"), bits, kind)?\n                 } else {\n                     numeric_intrinsic(intrinsic_name, bits, kind)?\n                 };"}, {"sha": "db4b68611c51b51673b1a6e1411351cf4791759c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let sole_field_ty = sole_field.ty(self.tcx, substs);\n                         if self.can_coerce(expr_ty, sole_field_ty) {\n                             let variant_path = self.tcx.item_path_str(variant.did);\n-                            Some(variant_path.trim_left_matches(\"std::prelude::v1::\").to_string())\n+                            Some(variant_path.trim_start_matches(\"std::prelude::v1::\").to_string())\n                         } else {\n                             None\n                         }\n@@ -519,7 +519,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let suffix_suggestion = format!(\n                     \"{}{}{}{}\",\n                     if needs_paren { \"(\" } else { \"\" },\n-                    src.trim_right_matches(&checked_ty.to_string()),\n+                    src.trim_end_matches(&checked_ty.to_string()),\n                     expected_ty,\n                     if needs_paren { \")\" } else { \"\" },\n                 );"}, {"sha": "504567e96e7c9609026bf6c21f857b671087e896", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -35,7 +35,7 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n     for line in s.lines() {\n         if line.starts_with(\"# \") || line.starts_with(\"%\") {\n             // trim the whitespace after the symbol\n-            metadata.push(line[1..].trim_left());\n+            metadata.push(line[1..].trim_start());\n             count += line.len() + 1;\n         } else {\n             return (metadata, &s[count..]);"}, {"sha": "2e8bfd8f07f544b0cfefff70feb772250ca18f5c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -294,23 +294,23 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstor\n                      \"trait@\", \"union@\"].iter()\n                                       .find(|p| link.starts_with(**p)) {\n                     kind = PathKind::Type;\n-                    link.trim_left_matches(prefix)\n+                    link.trim_start_matches(prefix)\n                 } else if let Some(prefix) =\n                     [\"const@\", \"static@\",\n                      \"value@\", \"function@\", \"mod@\",\n                      \"fn@\", \"module@\", \"method@\"]\n                         .iter().find(|p| link.starts_with(**p)) {\n                     kind = PathKind::Value;\n-                    link.trim_left_matches(prefix)\n+                    link.trim_start_matches(prefix)\n                 } else if link.ends_with(\"()\") {\n                     kind = PathKind::Value;\n-                    link.trim_right_matches(\"()\")\n+                    link.trim_end_matches(\"()\")\n                 } else if link.starts_with(\"macro@\") {\n                     kind = PathKind::Macro;\n-                    link.trim_left_matches(\"macro@\")\n+                    link.trim_start_matches(\"macro@\")\n                 } else if link.ends_with('!') {\n                     kind = PathKind::Macro;\n-                    link.trim_right_matches('!')\n+                    link.trim_end_matches('!')\n                 } else {\n                     &link[..]\n                 }.trim();"}, {"sha": "5c565bf818164898bed47b063ed89a7fcf7fb080", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -95,7 +95,7 @@ fn unindent(s: &str) -> String {\n     });\n \n     if !lines.is_empty() {\n-        let mut unindented = vec![ lines[0].trim_left().to_string() ];\n+        let mut unindented = vec![ lines[0].trim_start().to_string() ];\n         unindented.extend_from_slice(&lines[1..].iter().map(|&line| {\n             if line.chars().all(|c| c.is_whitespace()) {\n                 line.to_string()"}, {"sha": "b0884e1fbd16c7826bc932096b72ddcb029175c5", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -3493,7 +3493,7 @@ mod tests {\n \n         // Helper function for counting indents\n         fn indents(source: &str) -> usize {\n-            let trimmed = source.trim_left_matches(' ');\n+            let trimmed = source.trim_start_matches(' ');\n             source.len() - trimmed.len()\n         }\n "}, {"sha": "e5c5ab83cbc368759dfe71bb05d5a3db78553a8f", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -533,6 +533,7 @@ impl<T: Error> Error for Box<T> {\n         Error::description(&**self)\n     }\n \n+    #[allow(deprecated)]\n     fn cause(&self) -> Option<&dyn Error> {\n         Error::cause(&**self)\n     }"}, {"sha": "f46c4f2938b998eda0f7479185c2aebf2e5e95a9", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -174,7 +174,6 @@ pub use self::os_str::{OsString, OsStr};\n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n pub use core::ffi::c_void;\n \n-#[cfg(not(stage0))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n                      all supported platforms\","}, {"sha": "d3844ebe19e4bbe8e2e78432bf6940fb9a34293c", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -555,6 +555,7 @@ impl error::Error for Error {\n         }\n     }\n \n+    #[allow(deprecated)]\n     fn cause(&self) -> Option<&dyn error::Error> {\n         match self.repr {\n             Repr::Os(..) => None,"}, {"sha": "7c43ba5afa785cc66b78c33a4f35c836d2cb688f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -317,10 +317,6 @@\n \n #![default_lib_allocator]\n \n-#[cfg(stage0)]\n-#[global_allocator]\n-static ALLOC: alloc::System = alloc::System;\n-\n // Explicitly import the prelude. The compiler uses this same unstable attribute\n // to import the prelude implicitly when building crates that depend on std.\n #[prelude_import]"}, {"sha": "3eacc7afc41b9d43f2f140ab5d5a32d8d43ae6c1", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -264,7 +264,7 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n #[cfg(target_has_atomic = \"64\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n impl RefUnwindSafe for atomic::AtomicI64 {}\n-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+#[cfg(target_has_atomic = \"128\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n impl RefUnwindSafe for atomic::AtomicI128 {}\n \n@@ -283,7 +283,7 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n #[cfg(target_has_atomic = \"64\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n impl RefUnwindSafe for atomic::AtomicU64 {}\n-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+#[cfg(target_has_atomic = \"128\")]\n #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n impl RefUnwindSafe for atomic::AtomicU128 {}\n "}, {"sha": "84ef62e5fe92d43cfdae2fc888b49f4e421de4d7", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -76,7 +76,7 @@ pub fn error_string(mut errnum: i32) -> String {\n         match String::from_utf16(&buf[..res]) {\n             Ok(mut msg) => {\n                 // Trim trailing CRLF inserted by FormatMessageW\n-                let len = msg.trim_right().len();\n+                let len = msg.trim_end().len();\n                 msg.truncate(len);\n                 msg\n             },"}, {"sha": "3b88767f0e870c0deebe65b70466c81da9800902", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -141,6 +141,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     ])\n }\n \n+#[allow(deprecated)]\n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n                                           span: Span,\n                                           token_tree: &[TokenTree])"}, {"sha": "9a343123f61749ba0ab0183608904fbd48814cdc", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -579,7 +579,7 @@ impl SourceMap {\n         match self.span_to_prev_source(sp) {\n             Err(_) => None,\n             Ok(source) => source.split('\\n').last().map(|last_line| {\n-                last_line.len() - last_line.trim_left().len()\n+                last_line.len() - last_line.trim_start().len()\n             })\n         }\n     }\n@@ -593,7 +593,7 @@ impl SourceMap {\n     /// if no character could be found or if an error occurred while retrieving the code snippet.\n     pub fn span_extend_to_prev_char(&self, sp: Span, c: char) -> Span {\n         if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-            let prev_source = prev_source.rsplit(c).nth(0).unwrap_or(\"\").trim_left();\n+            let prev_source = prev_source.rsplit(c).nth(0).unwrap_or(\"\").trim_start();\n             if !prev_source.is_empty() && !prev_source.contains('\\n') {\n                 return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n             }\n@@ -613,7 +613,7 @@ impl SourceMap {\n         for ws in &[\" \", \"\\t\", \"\\n\"] {\n             let pat = pat.to_owned() + ws;\n             if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-                let prev_source = prev_source.rsplit(&pat).nth(0).unwrap_or(\"\").trim_left();\n+                let prev_source = prev_source.rsplit(&pat).nth(0).unwrap_or(\"\").trim_start();\n                 if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n                     return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n                 }\n@@ -627,7 +627,7 @@ impl SourceMap {\n     pub fn span_until_char(&self, sp: Span, c: char) -> Span {\n         match self.span_to_snippet(sp) {\n             Ok(snippet) => {\n-                let snippet = snippet.split(c).nth(0).unwrap_or(\"\").trim_right();\n+                let snippet = snippet.split(c).nth(0).unwrap_or(\"\").trim_end();\n                 if !snippet.is_empty() && !snippet.contains('\\n') {\n                     sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))\n                 } else {"}, {"sha": "f1adb9d64daf4b7dd751d38d90e691c41c10323d", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -57,7 +57,7 @@ impl Ident {\n     }\n \n     pub fn without_first_quote(self) -> Ident {\n-        Ident::new(Symbol::intern(self.as_str().trim_left_matches('\\'')), self.span)\n+        Ident::new(Symbol::intern(self.as_str().trim_start_matches('\\'')), self.span)\n     }\n \n     /// \"Normalize\" ident for use in comparisons using \"item hygiene\"."}, {"sha": "843ecae1ce389da1d9fc6d8697e13fdb06a63e1a", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2018-11-21\n+date: 2018-12-09\n rustc: beta\n cargo: beta\n "}, {"sha": "2cf1f5dda2f7ed84e94c4d32f643e0f1f15352f0", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -1 +1 @@\n-Subproject commit 28fb20034a5bb42ea589664de2617dd1840506d3\n+Subproject commit 2cf1f5dda2f7ed84e94c4d32f643e0f1f15352f0"}, {"sha": "9aefd15765df68f0b21d890f28f815a172642237", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664ede88faf57b8fc09715fc66cd9e46490ce64d/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=664ede88faf57b8fc09715fc66cd9e46490ce64d", "patch": "@@ -511,7 +511,11 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n     test::TestOpts {\n         filter: config.filter.clone(),\n         filter_exact: config.filter_exact,\n-        run_ignored: config.run_ignored,\n+        run_ignored: if config.run_ignored {\n+            test::RunIgnored::Yes\n+        } else {\n+            test::RunIgnored::No\n+        },\n         format: if config.quiet {\n             test::OutputFormat::Terse\n         } else {"}]}