{"sha": "d0c1605d5151c86215ad609feadead811e5602c0", "node_id": "C_kwDOAAsO6NoAKGQwYzE2MDVkNTE1MWM4NjIxNWFkNjA5ZmVhZGVhZDgxMWU1NjAyYzA", "commit": {"author": {"name": "Kyle Huey", "email": "khuey@kylehuey.com", "date": "2023-01-04T21:32:34Z"}, "committer": {"name": "Kyle Huey", "email": "khuey@kylehuey.com", "date": "2023-01-04T21:32:34Z"}, "message": "Make the iter_kv_map lint handle ref/mut annotations.\n\nFor the degenerate (`map(|(k, _)| k)`/`map(|(_, v)| v)`) cases a mut annotation is superfluous and a ref annotation won't compile, so no additional handling is required. For cases where the `map` call must be preserved ref/mut annotations should also be presereved so that the map body continues to work as expected.", "tree": {"sha": "2e4a03b810a505104625c22f903e71d1af337979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e4a03b810a505104625c22f903e71d1af337979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0c1605d5151c86215ad609feadead811e5602c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c1605d5151c86215ad609feadead811e5602c0", "html_url": "https://github.com/rust-lang/rust/commit/d0c1605d5151c86215ad609feadead811e5602c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0c1605d5151c86215ad609feadead811e5602c0/comments", "author": {"login": "khuey", "id": 325892, "node_id": "MDQ6VXNlcjMyNTg5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/325892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khuey", "html_url": "https://github.com/khuey", "followers_url": "https://api.github.com/users/khuey/followers", "following_url": "https://api.github.com/users/khuey/following{/other_user}", "gists_url": "https://api.github.com/users/khuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/khuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khuey/subscriptions", "organizations_url": "https://api.github.com/users/khuey/orgs", "repos_url": "https://api.github.com/users/khuey/repos", "events_url": "https://api.github.com/users/khuey/events{/privacy}", "received_events_url": "https://api.github.com/users/khuey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "khuey", "id": 325892, "node_id": "MDQ6VXNlcjMyNTg5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/325892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khuey", "html_url": "https://github.com/khuey", "followers_url": "https://api.github.com/users/khuey/followers", "following_url": "https://api.github.com/users/khuey/following{/other_user}", "gists_url": "https://api.github.com/users/khuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/khuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khuey/subscriptions", "organizations_url": "https://api.github.com/users/khuey/orgs", "repos_url": "https://api.github.com/users/khuey/repos", "events_url": "https://api.github.com/users/khuey/events{/privacy}", "received_events_url": "https://api.github.com/users/khuey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bca8dd2547fcc46796b53d338c0734575e51c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bca8dd2547fcc46796b53d338c0734575e51c72", "html_url": "https://github.com/rust-lang/rust/commit/0bca8dd2547fcc46796b53d338c0734575e51c72"}], "stats": {"total": 208, "additions": 174, "deletions": 34}, "files": [{"sha": "1e5805c53477288c2e607f981f43fe04604ce380", "filename": "clippy_lints/src/methods/iter_kv_map.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1605d5151c86215ad609feadead811e5602c0/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1605d5151c86215ad609feadead811e5602c0/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs?ref=d0c1605d5151c86215ad609feadead811e5602c0", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::is_local_used;\n-use rustc_hir::{BindingAnnotation, Body, BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n+use rustc_hir::{BindingAnnotation, Body, BorrowKind, ByRef, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty;\n use rustc_span::sym;\n@@ -30,9 +30,9 @@ pub(super) fn check<'tcx>(\n         if let Body {params: [p], value: body_expr, generator_kind: _ } = cx.tcx.hir().body(c.body);\n         if let PatKind::Tuple([key_pat, val_pat], _) = p.pat.kind;\n \n-        let (replacement_kind, binded_ident) = match (&key_pat.kind, &val_pat.kind) {\n-            (key, PatKind::Binding(_, _, value, _)) if pat_is_wild(cx, key, m_arg) => (\"value\", value),\n-            (PatKind::Binding(_, _, key, _), value) if pat_is_wild(cx, value, m_arg) => (\"key\", key),\n+        let (replacement_kind, annotation, binded_ident) = match (&key_pat.kind, &val_pat.kind) {\n+            (key, PatKind::Binding(ann, _, value, _)) if pat_is_wild(cx, key, m_arg) => (\"value\", ann, value),\n+            (PatKind::Binding(ann, _, key, _), value) if pat_is_wild(cx, value, m_arg) => (\"key\", ann, key),\n             _ => return,\n         };\n \n@@ -60,13 +60,23 @@ pub(super) fn check<'tcx>(\n                         applicability,\n                     );\n                 } else {\n+                    let ref_annotation = if annotation.0 == ByRef::Yes {\n+                        \"ref \"\n+                    } else {\n+                        \"\"\n+                    };\n+                    let mut_annotation = if annotation.1 == Mutability::Mut {\n+                        \"mut \"\n+                    } else {\n+                        \"\"\n+                    };\n                     span_lint_and_sugg(\n                         cx,\n                         ITER_KV_MAP,\n                         expr.span,\n                         &format!(\"iterating on a map's {replacement_kind}s\"),\n                         \"try\",\n-                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{binded_ident}| {})\",\n+                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{ref_annotation}{mut_annotation}{binded_ident}| {})\",\n                             snippet_with_applicability(cx, body_expr.span, \"/* body */\", &mut applicability)),\n                         applicability,\n                     );"}, {"sha": "f2a4c284cb16d68d0ccb92bca478c716d309f468", "filename": "tests/ui/iter_kv_map.fixed", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1605d5151c86215ad609feadead811e5602c0/tests%2Fui%2Fiter_kv_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1605d5151c86215ad609feadead811e5602c0/tests%2Fui%2Fiter_kv_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_kv_map.fixed?ref=d0c1605d5151c86215ad609feadead811e5602c0", "patch": "@@ -1,14 +1,15 @@\n // run-rustfix\n \n #![warn(clippy::iter_kv_map)]\n-#![allow(clippy::redundant_clone)]\n-#![allow(clippy::suspicious_map)]\n-#![allow(clippy::map_identity)]\n+#![allow(unused_mut, clippy::redundant_clone, clippy::suspicious_map, clippy::map_identity)]\n \n use std::collections::{BTreeMap, HashMap};\n \n fn main() {\n     let get_key = |(key, _val)| key;\n+    fn ref_acceptor(v: &u32) -> u32 {\n+        *v\n+    }\n \n     let map: HashMap<u32, u32> = HashMap::new();\n \n@@ -36,6 +37,20 @@ fn main() {\n     let _ = map.keys().map(|key| key * 9).count();\n     let _ = map.values().map(|value| value * 17).count();\n \n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_values().map(|ref val| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone().into_values().map(|mut val| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_values().count();\n+\n     let map: BTreeMap<u32, u32> = BTreeMap::new();\n \n     let _ = map.keys().collect::<Vec<_>>();\n@@ -61,4 +76,18 @@ fn main() {\n     // Lint\n     let _ = map.keys().map(|key| key * 9).count();\n     let _ = map.values().map(|value| value * 17).count();\n+\n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_values().map(|ref val| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone().into_values().map(|mut val| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_values().count();\n }"}, {"sha": "ad6564df40846e2e8da197eb592ad5730b67fa17", "filename": "tests/ui/iter_kv_map.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1605d5151c86215ad609feadead811e5602c0/tests%2Fui%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1605d5151c86215ad609feadead811e5602c0/tests%2Fui%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_kv_map.rs?ref=d0c1605d5151c86215ad609feadead811e5602c0", "patch": "@@ -1,14 +1,15 @@\n // run-rustfix\n \n #![warn(clippy::iter_kv_map)]\n-#![allow(clippy::redundant_clone)]\n-#![allow(clippy::suspicious_map)]\n-#![allow(clippy::map_identity)]\n+#![allow(unused_mut, clippy::redundant_clone, clippy::suspicious_map, clippy::map_identity)]\n \n use std::collections::{BTreeMap, HashMap};\n \n fn main() {\n     let get_key = |(key, _val)| key;\n+    fn ref_acceptor(v: &u32) -> u32 {\n+        *v\n+    }\n \n     let map: HashMap<u32, u32> = HashMap::new();\n \n@@ -36,6 +37,22 @@ fn main() {\n     let _ = map.iter().map(|(key, _value)| key * 9).count();\n     let _ = map.iter().map(|(_key, value)| value * 17).count();\n \n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone()\n+        .into_iter()\n+        .map(|(_, mut val)| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n+\n     let map: BTreeMap<u32, u32> = BTreeMap::new();\n \n     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n@@ -61,4 +78,20 @@ fn main() {\n     // Lint\n     let _ = map.iter().map(|(key, _value)| key * 9).count();\n     let _ = map.iter().map(|(_key, value)| value * 17).count();\n+\n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone()\n+        .into_iter()\n+        .map(|(_, mut val)| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n }"}, {"sha": "e00da223b4dd2193f2f690d7326221fcb2e98e55", "filename": "tests/ui/iter_kv_map.stderr", "status": "modified", "additions": 91, "deletions": 23, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d0c1605d5151c86215ad609feadead811e5602c0/tests%2Fui%2Fiter_kv_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0c1605d5151c86215ad609feadead811e5602c0/tests%2Fui%2Fiter_kv_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_kv_map.stderr?ref=d0c1605d5151c86215ad609feadead811e5602c0", "patch": "@@ -1,136 +1,204 @@\n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:15:13\n+  --> $DIR/iter_kv_map.rs:16:13\n    |\n LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n    |\n    = note: `-D clippy::iter-kv-map` implied by `-D warnings`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:16:13\n+  --> $DIR/iter_kv_map.rs:17:13\n    |\n LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:17:13\n+  --> $DIR/iter_kv_map.rs:18:13\n    |\n LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:19:13\n+  --> $DIR/iter_kv_map.rs:20:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:20:13\n+  --> $DIR/iter_kv_map.rs:21:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:22:13\n+  --> $DIR/iter_kv_map.rs:23:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:23:13\n+  --> $DIR/iter_kv_map.rs:24:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:25:13\n+  --> $DIR/iter_kv_map.rs:26:13\n    |\n LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:26:13\n+  --> $DIR/iter_kv_map.rs:27:13\n    |\n LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:36:13\n+  --> $DIR/iter_kv_map.rs:37:13\n    |\n LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:37:13\n+  --> $DIR/iter_kv_map.rs:38:13\n    |\n LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n \n-error: iterating on a map's keys\n+error: iterating on a map's values\n   --> $DIR/iter_kv_map.rs:41:13\n    |\n+LL |     let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|ref val| ref_acceptor(val))`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:44:13\n+   |\n+LL |       let _ = map\n+   |  _____________^\n+LL | |         .clone()\n+LL | |         .into_iter()\n+LL | |         .map(|(_, mut val)| {\n+LL | |             val += 2;\n+LL | |             val\n+LL | |         })\n+   | |__________^\n+   |\n+help: try\n+   |\n+LL ~     let _ = map\n+LL +         .clone().into_values().map(|mut val| {\n+LL +             val += 2;\n+LL +             val\n+LL +         })\n+   |\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:54:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:58:13\n+   |\n LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:42:13\n+  --> $DIR/iter_kv_map.rs:59:13\n    |\n LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:43:13\n+  --> $DIR/iter_kv_map.rs:60:13\n    |\n LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:45:13\n+  --> $DIR/iter_kv_map.rs:62:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:46:13\n+  --> $DIR/iter_kv_map.rs:63:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:48:13\n+  --> $DIR/iter_kv_map.rs:65:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:49:13\n+  --> $DIR/iter_kv_map.rs:66:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:51:13\n+  --> $DIR/iter_kv_map.rs:68:13\n    |\n LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:52:13\n+  --> $DIR/iter_kv_map.rs:69:13\n    |\n LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:62:13\n+  --> $DIR/iter_kv_map.rs:79:13\n    |\n LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:63:13\n+  --> $DIR/iter_kv_map.rs:80:13\n    |\n LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n \n-error: aborting due to 22 previous errors\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:83:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|ref val| ref_acceptor(val))`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:86:13\n+   |\n+LL |       let _ = map\n+   |  _____________^\n+LL | |         .clone()\n+LL | |         .into_iter()\n+LL | |         .map(|(_, mut val)| {\n+LL | |             val += 2;\n+LL | |             val\n+LL | |         })\n+   | |__________^\n+   |\n+help: try\n+   |\n+LL ~     let _ = map\n+LL +         .clone().into_values().map(|mut val| {\n+LL +             val += 2;\n+LL +             val\n+LL +         })\n+   |\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:96:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: aborting due to 28 previous errors\n "}]}