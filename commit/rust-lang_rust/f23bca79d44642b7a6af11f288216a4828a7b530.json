{"sha": "f23bca79d44642b7a6af11f288216a4828a7b530", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyM2JjYTc5ZDQ0NjQyYjdhNmFmMTFmMjg4MjE2YTQ4MjhhN2I1MzA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-29T14:23:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Address review comments", "tree": {"sha": "2528b47ded37eab5ab379977ac481862098ab16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2528b47ded37eab5ab379977ac481862098ab16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f23bca79d44642b7a6af11f288216a4828a7b530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f23bca79d44642b7a6af11f288216a4828a7b530", "html_url": "https://github.com/rust-lang/rust/commit/f23bca79d44642b7a6af11f288216a4828a7b530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f23bca79d44642b7a6af11f288216a4828a7b530/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ac5bc7de2b47f8848275254a0e327269ee5f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ac5bc7de2b47f8848275254a0e327269ee5f06", "html_url": "https://github.com/rust-lang/rust/commit/93ac5bc7de2b47f8848275254a0e327269ee5f06"}], "stats": {"total": 122, "additions": 67, "deletions": 55}, "files": [{"sha": "4abc3ef437ed9c821cbe36c67b85a84c241b8b37", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=f23bca79d44642b7a6af11f288216a4828a7b530", "patch": "@@ -500,9 +500,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             hir::OpaqueTyOrigin::AsyncFn => return false,\n \n             // Otherwise, generate the label we'll use in the error message.\n-            hir::OpaqueTyOrigin::TypeAlias => \"impl Trait\",\n-            hir::OpaqueTyOrigin::FnReturn => \"impl Trait\",\n-            hir::OpaqueTyOrigin::Misc => \"impl Trait\",\n+            hir::OpaqueTyOrigin::TypeAlias\n+            | hir::OpaqueTyOrigin::FnReturn\n+            | hir::OpaqueTyOrigin::Misc => \"impl Trait\",\n         };\n         let msg = format!(\"ambiguous lifetime bound in `{}`\", context_name);\n         let mut err = self.tcx.sess.struct_span_err(span, &msg);\n@@ -814,26 +814,37 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match r {\n-            // Ignore bound regions that appear in the type, they don't need to\n-            // be remapped (e.g., this would ignore `'r` in a type like\n-            // `for<'r> fn(&'r u32)`.\n-            ty::ReLateBound(..)\n-\n-            // If regions have been erased, don't try to unerase them.\n-            | ty::ReErased\n-\n-            // ignore `'static`, as that can appear anywhere\n-            | ty::ReStatic => return r,\n-\n-            _ => {}\n+            // Ignore bound regions and `'static` regions that appear in the\n+            // type, we only need to remap regions that reference lifetimes\n+            // from the function declaraion.\n+            // This would ignore `'r` in a type like `for<'r> fn(&'r u32)`.\n+            ty::ReLateBound(..) | ty::ReStatic => return r,\n+\n+            // If regions have been erased (by writeback), don't try to unerase\n+            // them.\n+            ty::ReErased => return r,\n+\n+            // The regions that we expect from borrow checking.\n+            ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReEmpty(ty::UniverseIndex::ROOT) => {}\n+\n+            ty::ReEmpty(_)\n+            | ty::RePlaceholder(_)\n+            | ty::ReVar(_)\n+            | ty::ReScope(_)\n+            | ty::ReClosureBound(_) => {\n+                // All of the regions in the type should either have been\n+                // erased by writeback, or mapped back to named regions by\n+                // borrow checking.\n+                bug!(\"unexpected region kind in opaque type: {:?}\", r);\n+            }\n         }\n \n         let generics = self.tcx().generics_of(self.opaque_type_def_id);\n         match self.map.get(&r.into()).map(|k| k.unpack()) {\n             Some(GenericArgKind::Lifetime(r1)) => r1,\n             Some(u) => panic!(\"region mapped to unexpected kind: {:?}\", u),\n             None if self.map_missing_regions_to_empty || self.tainted_by_errors => {\n-                self.tcx.lifetimes.re_empty\n+                self.tcx.lifetimes.re_root_empty\n             }\n             None if generics.parent.is_some() => {\n                 if let Some(hidden_ty) = self.hidden_ty.take() {\n@@ -862,7 +873,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.tcx().mk_region(ty::ReStatic)\n+                self.tcx().lifetimes.re_static\n             }\n         }\n     }"}, {"sha": "99de4b88fd3c4c007de72a88b2b1f6c9b5df9b1e", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=f23bca79d44642b7a6af11f288216a4828a7b530", "patch": "@@ -1723,17 +1723,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             )\n         } else {\n             match decl.output {\n-                FunctionRetTy::Ty(ref ty) => match in_band_ty_params {\n-                    Some((def_id, _)) if impl_trait_return_allow => {\n-                        hir::FunctionRetTy::Return(self.lower_ty(\n-                            ty,\n-                            ImplTraitContext::OpaqueTy(Some(def_id), hir::OpaqueTyOrigin::FnReturn),\n-                        ))\n-                    }\n-                    _ => hir::FunctionRetTy::Return(\n-                        self.lower_ty(ty, ImplTraitContext::disallowed()),\n-                    ),\n-                },\n+                FunctionRetTy::Ty(ref ty) => {\n+                    let context = match in_band_ty_params {\n+                        Some((def_id, _)) if impl_trait_return_allow => {\n+                            ImplTraitContext::OpaqueTy(Some(def_id), hir::OpaqueTyOrigin::FnReturn)\n+                        }\n+                        _ => ImplTraitContext::disallowed(),\n+                    };\n+                    hir::FunctionRetTy::Return(self.lower_ty(ty, context))\n+                }\n                 FunctionRetTy::Default(span) => hir::FunctionRetTy::DefaultReturn(span),\n             }\n         };\n@@ -1961,10 +1959,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::GenericBound<'hir> {\n         // Compute the `T` in `Future<Output = T>` from the return type.\n         let output_ty = match output {\n-            FunctionRetTy::Ty(ty) => self.lower_ty(\n-                ty,\n-                ImplTraitContext::OpaqueTy(Some(fn_def_id), hir::OpaqueTyOrigin::FnReturn),\n-            ),\n+            FunctionRetTy::Ty(ty) => {\n+                // Not `OpaqueTyOrigin::AsyncFn`: that's only used for the\n+                // `impl Future` opaque type that `async fn` implicitly\n+                // generates.\n+                let context =\n+                    ImplTraitContext::OpaqueTy(Some(fn_def_id), hir::OpaqueTyOrigin::FnReturn);\n+                self.lower_ty(ty, context)\n+            }\n             FunctionRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };\n "}, {"sha": "3d3b1e5cbf6a9147d4148a6ba995d75f12c7b07e", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=f23bca79d44642b7a6af11f288216a4828a7b530", "patch": "@@ -120,7 +120,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             self.mir_def_id,\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n-            true,\n         ) {\n             span_mirbug!(\n                 self,\n@@ -144,7 +143,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.mir_def_id,\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n-                false,\n             ) {\n                 span_mirbug!(\n                     self,"}, {"sha": "b2e8cf9df7c61a05d4eec87fee553ed24d341354", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=f23bca79d44642b7a6af11f288216a4828a7b530", "patch": "@@ -1122,14 +1122,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n                 let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id);\n-                return self.eq_opaque_type_and_type(\n-                    sub,\n-                    sup,\n-                    parent_def_id,\n-                    locations,\n-                    category,\n-                    false,\n-                );\n+                return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n             } else {\n                 return Err(terr);\n             }\n@@ -1195,7 +1188,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         anon_owner_def_id: DefId,\n         locations: Locations,\n         category: ConstraintCategory,\n-        is_function_return: bool,\n     ) -> Fallible<()> {\n         debug!(\n             \"eq_opaque_type_and_type( \\\n@@ -1273,13 +1265,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             opaque_decl.concrete_ty, resolved_ty, renumbered_opaque_defn_ty,\n                         );\n \n-                        if !concrete_is_opaque\n-                            || (is_function_return\n-                                && matches!(opaque_decl.origin, hir::OpaqueTyOrigin::FnReturn))\n-                        {\n-                            // For return position impl Trait, the function\n-                            // return is the only possible definition site, so\n-                            // always record it.\n+                        if !concrete_is_opaque {\n                             obligations.add(\n                                 infcx\n                                     .at(&ObligationCause::dummy(), param_env)"}, {"sha": "899527ebb9568746a0964feb773b53099fc92742", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f23bca79d44642b7a6af11f288216a4828a7b530", "patch": "@@ -1471,7 +1471,9 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                             &tcx.mir_borrowck(owner).concrete_opaque_types\n                         }\n                         hir::OpaqueTyOrigin::Misc => {\n-                            // We shouldn't leak borrowck results through impl Trait in bindings.\n+                            // We shouldn't leak borrowck results through impl trait in bindings.\n+                            // For example, we shouldn't be able to tell if `x` in\n+                            // `let x: impl Sized + 'a = &()` has type `&'static ()` or `&'a ()`.\n                             &tcx.typeck_tables_of(owner).concrete_opaque_types\n                         }\n                         hir::OpaqueTyOrigin::TypeAlias => {\n@@ -1482,17 +1484,27 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         .get(&def_id)\n                         .map(|opaque| opaque.concrete_type)\n                         .unwrap_or_else(|| {\n-                            // This can occur if some error in the\n-                            // owner fn prevented us from populating\n-                            // the `concrete_opaque_types` table.\n                             tcx.sess.delay_span_bug(\n                                 DUMMY_SP,\n                                 &format!(\n                                     \"owner {:?} has no opaque type for {:?} in its tables\",\n                                     owner, def_id,\n                                 ),\n                             );\n-                            tcx.types.err\n+                            if tcx.typeck_tables_of(owner).tainted_by_errors {\n+                                // Some error in the\n+                                // owner fn prevented us from populating\n+                                // the `concrete_opaque_types` table.\n+                                tcx.types.err\n+                            } else {\n+                                // We failed to resolve the opaque type or it\n+                                // resolves to itself. Return the non-revealed\n+                                // type, which should result in E0720.\n+                                tcx.mk_opaque(\n+                                    def_id,\n+                                    InternalSubsts::identity_for_item(tcx, def_id),\n+                                )\n+                            }\n                         });\n                     debug!(\"concrete_ty = {:?}\", concrete_ty);\n                     if concrete_ty.has_erased_regions() {"}, {"sha": "0a765a1f9c93cb58075b03693a7661384f6cb04d", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23bca79d44642b7a6af11f288216a4828a7b530/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=f23bca79d44642b7a6af11f288216a4828a7b530", "patch": "@@ -131,6 +131,9 @@ fn enforce_impl_params_are_constrained(\n                     }\n                 }\n                 ty::AssocKind::OpaqueTy => {\n+                    // We don't know which lifetimes appear in the actual\n+                    // opaque type, so use all of the lifetimes that appear\n+                    // in the type's predicates.\n                     let predicates = tcx.predicates_of(def_id).instantiate_identity(tcx);\n                     cgp::parameters_for(&predicates, true)\n                 }"}]}