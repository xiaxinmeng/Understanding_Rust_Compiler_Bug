{"sha": "0556e4891ef6e73ee886526cd39d4887850b1a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NTZlNDg5MWVmNmU3M2VlODg2NTI2Y2QzOWQ0ODg3ODUwYjFhMWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-27T12:26:06Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-30T21:43:51Z"}, "message": "Preserve literal suffixes", "tree": {"sha": "6f5421006a24e8d004dd66adbc519f89690aa84d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5421006a24e8d004dd66adbc519f89690aa84d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0556e4891ef6e73ee886526cd39d4887850b1a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0556e4891ef6e73ee886526cd39d4887850b1a1a", "html_url": "https://github.com/rust-lang/rust/commit/0556e4891ef6e73ee886526cd39d4887850b1a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0556e4891ef6e73ee886526cd39d4887850b1a1a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "218982bef07c7d8518348f5d2a2eecf57edc0219", "url": "https://api.github.com/repos/rust-lang/rust/commits/218982bef07c7d8518348f5d2a2eecf57edc0219", "html_url": "https://github.com/rust-lang/rust/commit/218982bef07c7d8518348f5d2a2eecf57edc0219"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "3b3e2455fa77de69e2cf1edb355fa00718d49480", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0556e4891ef6e73ee886526cd39d4887850b1a1a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0556e4891ef6e73ee886526cd39d4887850b1a1a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=0556e4891ef6e73ee886526cd39d4887850b1a1a", "patch": "@@ -172,10 +172,26 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                                     if let Ok(start) = cx.sess().source_map()\n                                                         .span_to_snippet(eps[0].span)\n                                                     {\n+                                                        use ast::{LitKind::*, LitIntType};\n+                                                        // We need to preserve the literal's suffix,\n+                                                        // as it may determine typing information.\n+                                                        let suffix = match lit.node {\n+                                                            Int(_, LitIntType::Signed(s)) => {\n+                                                                format!(\"{}\", s)\n+                                                            }\n+                                                            Int(_, LitIntType::Unsigned(s)) => {\n+                                                                format!(\"{}\", s)\n+                                                            }\n+                                                            Int(_, LitIntType::Unsuffixed) => {\n+                                                                \"\".to_owned()\n+                                                            }\n+                                                            _ => bug!(),\n+                                                        };\n                                                         let suggestion = format!(\n-                                                            \"{}..={}\",\n+                                                            \"{}..={}{}\",\n                                                             start,\n                                                             lit_val - 1,\n+                                                            suffix,\n                                                         );\n                                                         err.span_suggestion(\n                                                             parent_expr.span,"}, {"sha": "5d7430007abb3ae18e6eb9e381361c65e9287fbc", "filename": "src/test/ui/lint/lint-range-endpoint-overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0556e4891ef6e73ee886526cd39d4887850b1a1a/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0556e4891ef6e73ee886526cd39d4887850b1a1a/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.rs?ref=0556e4891ef6e73ee886526cd39d4887850b1a1a", "patch": "@@ -6,6 +6,7 @@ fn main() {\n     let range_c = 0..=256; //~ ERROR literal out of range for `u8`\n     let range_d = 256..5; //~ ERROR literal out of range for `u8`\n     let range_e = 0..257; //~ ERROR literal out of range for `u8`\n+    let _range_f = 0..256u8;  //~ ERROR range endpoint is out of range for `u8`\n \n     range_a.collect::<Vec<u8>>();\n     range_b.collect::<Vec<u8>>();"}, {"sha": "72f548cf4adb1232d0b90b7efe05401dca5ac2f4", "filename": "src/test/ui/lint/lint-range-endpoint-overflow.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0556e4891ef6e73ee886526cd39d4887850b1a1a/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0556e4891ef6e73ee886526cd39d4887850b1a1a/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-range-endpoint-overflow.stderr?ref=0556e4891ef6e73ee886526cd39d4887850b1a1a", "patch": "@@ -28,5 +28,11 @@ error: literal out of range for `u8`\n LL |     let range_e = 0..257;\n    |                      ^^^\n \n-error: aborting due to 4 previous errors\n+error: range endpoint is out of range for `u8`\n+  --> $DIR/lint-range-endpoint-overflow.rs:9:20\n+   |\n+LL |     let _range_f = 0..256u8;\n+   |                    ^^^^^^^^ help: use an inclusive range instead: `0..=255u8`\n+\n+error: aborting due to 5 previous errors\n "}]}