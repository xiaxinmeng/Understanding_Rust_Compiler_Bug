{"sha": "21508cfb2f5452c6f19ab0e615a6c61cb28154c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTA4Y2ZiMmY1NDUyYzZmMTlhYjBlNjE1YTZjNjFjYjI4MTU0Yzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T13:55:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T13:55:35Z"}, "message": "Use OO API instead of resolve_module", "tree": {"sha": "8430c92fa6488dedf2704f2b64effd413aa6e62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8430c92fa6488dedf2704f2b64effd413aa6e62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21508cfb2f5452c6f19ab0e615a6c61cb28154c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21508cfb2f5452c6f19ab0e615a6c61cb28154c8", "html_url": "https://github.com/rust-lang/rust/commit/21508cfb2f5452c6f19ab0e615a6c61cb28154c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21508cfb2f5452c6f19ab0e615a6c61cb28154c8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab3c65d9819765016c926df4aca634b5be8344c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab3c65d9819765016c926df4aca634b5be8344c", "html_url": "https://github.com/rust-lang/rust/commit/0ab3c65d9819765016c926df4aca634b5be8344c"}], "stats": {"total": 71, "additions": 19, "deletions": 52}, "files": [{"sha": "d0560244a159dfd3c7c1505107aed0e619c52009", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21508cfb2f5452c6f19ab0e615a6c61cb28154c8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21508cfb2f5452c6f19ab0e615a6c61cb28154c8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=21508cfb2f5452c6f19ab0e615a6c61cb28154c8", "patch": "@@ -165,15 +165,6 @@ enum ModuleSourceNode {\n #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n pub(crate) struct ModuleId(u32);\n \n-impl crate::loc2id::NumericId for ModuleId {\n-    fn from_u32(id: u32) -> Self {\n-        ModuleId(id)\n-    }\n-    fn to_u32(self) -> u32 {\n-        self.0\n-    }\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n struct LinkId(u32);\n \n@@ -189,13 +180,13 @@ pub enum Problem {\n }\n \n impl ModuleId {\n-    pub(crate) fn source(self, tree: &ModuleTree) -> ModuleSource {\n+    fn source(self, tree: &ModuleTree) -> ModuleSource {\n         tree.module(self).source\n     }\n     fn parent_link(self, tree: &ModuleTree) -> Option<LinkId> {\n         tree.module(self).parent\n     }\n-    pub(crate) fn parent(self, tree: &ModuleTree) -> Option<ModuleId> {\n+    fn parent(self, tree: &ModuleTree) -> Option<ModuleId> {\n         let link = self.parent_link(tree)?;\n         Some(tree.link(link).owner)\n     }"}, {"sha": "1bbf0cb6da93af095c7a7634eccbf813d33c0d21", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 17, "deletions": 41, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/21508cfb2f5452c6f19ab0e615a6c61cb28154c8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21508cfb2f5452c6f19ab0e615a6c61cb28154c8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=21508cfb2f5452c6f19ab0e615a6c61cb28154c8", "patch": "@@ -266,7 +266,6 @@ impl AnalysisImpl {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n-        let module_tree = self.module_tree(position.file_id)?;\n         let file = self.db.file_syntax(position.file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n@@ -292,25 +291,23 @@ impl AnalysisImpl {\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n                 if module.has_semi() {\n-                    let file_ids = self.resolve_module(&*module_tree, position.file_id, module);\n-\n-                    let res = file_ids\n-                        .into_iter()\n-                        .map(|id| {\n-                            let name = module\n-                                .name()\n-                                .map(|n| n.text())\n-                                .unwrap_or_else(|| SmolStr::new(\"\"));\n-                            let symbol = FileSymbol {\n-                                name,\n-                                node_range: TextRange::offset_len(0.into(), 0.into()),\n-                                kind: MODULE,\n-                            };\n-                            (id, symbol)\n-                        })\n-                        .collect();\n-\n-                    return Ok(res);\n+                    let parent_module =\n+                        ModuleDescriptor::guess_from_file_id(&*self.db, position.file_id)?;\n+                    let child_name = module.name();\n+                    match (parent_module, child_name) {\n+                        (Some(parent_module), Some(child_name)) => {\n+                            if let Some(child) = parent_module.child(&child_name.text()) {\n+                                let file_id = child.source().file_id();\n+                                let symbol = FileSymbol {\n+                                    name: child_name.text(),\n+                                    node_range: TextRange::offset_len(0.into(), 0.into()),\n+                                    kind: MODULE,\n+                                };\n+                                return Ok(vec![(file_id, symbol)]);\n+                            }\n+                        }\n+                        _ => (),\n+                    }\n                 }\n             }\n         }\n@@ -519,27 +516,6 @@ impl AnalysisImpl {\n         query.limit(4);\n         self.world_symbols(query)\n     }\n-\n-    fn resolve_module(\n-        &self,\n-        module_tree: &ModuleTree,\n-        file_id: FileId,\n-        module: ast::Module,\n-    ) -> Vec<FileId> {\n-        let name = match module.name() {\n-            Some(name) => name.text(),\n-            None => return Vec::new(),\n-        };\n-        let module_id = match module_tree.any_module_for_source(ModuleSource::SourceFile(file_id)) {\n-            Some(id) => id,\n-            None => return Vec::new(),\n-        };\n-        module_id\n-            .child(module_tree, name.as_str())\n-            .and_then(|it| it.source(&module_tree).as_file())\n-            .into_iter()\n-            .collect()\n-    }\n }\n \n impl SourceChange {"}]}