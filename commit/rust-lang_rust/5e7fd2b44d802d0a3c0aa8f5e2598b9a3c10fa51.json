{"sha": "5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2ZkMmI0NGQ4MDJkMGEzYzBhYThmNWUyNTk4YjlhM2MxMGZhNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-18T10:36:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-18T10:36:41Z"}, "message": "Auto merge of #1238 - RalfJung:mir-opt-test, r=oli-obk\n\nmove repeated run of test suite (without and with MIR optimizations) out of compiletest\n\nJust like we already pass the target architecture to our compiletest wrapper via `MIRI_TEST_TARGET` (and then have CI run compiletest with different values for that env var), we now do the same for running the tests with and without MIR optimizations.\n\nThis has the advantage of speeding up local `./miri test`, where in the vast majority of cases running tests both with and without optimizations is just a waste of time.", "tree": {"sha": "da3652c8fc179345bab8dbaaae20ecc35a9d7058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3652c8fc179345bab8dbaaae20ecc35a9d7058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "html_url": "https://github.com/rust-lang/rust/commit/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "html_url": "https://github.com/rust-lang/rust/commit/ff2e799e360f8552dc5d70fa03ccf2f76b74485f"}, {"sha": "a32e25677f43d161db8fdb923cb80a7dc7c4ae48", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32e25677f43d161db8fdb923cb80a7dc7c4ae48", "html_url": "https://github.com/rust-lang/rust/commit/a32e25677f43d161db8fdb923cb80a7dc7c4ae48"}], "stats": {"total": 60, "additions": 24, "deletions": 36}, "files": [{"sha": "a1b97831668438baf796e3c5b9782222d4dd3197", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "patch": "@@ -193,6 +193,8 @@ Moreover, Miri recognizes some environment variables:\n * `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target`\n   flag for the same purpose.\n+* `MIRI_TEST_FLAGS` (recognized by the test suite) defines extra flags to be\n+  passed to Miri.\n \n ## Contributing and getting help\n "}, {"sha": "f43ff8ca349defae98308488147e943d3d40fa8e", "filename": "tests/compiletest.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "patch": "@@ -24,9 +24,10 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn run_tests(mode: &str, path: &str, target: &str, mut flags: Vec<String>) {\n+fn run_tests(mode: &str, path: &str, target: &str) {\n     let in_rustc_test_suite = rustc_test_suite().is_some();\n     // Add some flags we always want.\n+    let mut flags = Vec::new();\n     flags.push(\"--edition 2018\".to_owned());\n     if in_rustc_test_suite {\n         // Less aggressive warnings to make the rustc toolstate management less painful.\n@@ -38,6 +39,12 @@ fn run_tests(mode: &str, path: &str, target: &str, mut flags: Vec<String>) {\n     if let Ok(sysroot) = std::env::var(\"MIRI_SYSROOT\") {\n         flags.push(format!(\"--sysroot {}\", sysroot));\n     }\n+    if let Ok(extra_flags) = std::env::var(\"MIRI_TEST_FLAGS\") {\n+        flags.push(extra_flags);\n+    }\n+\n+    let flags = flags.join(\" \");\n+    eprintln!(\"   Compiler flags: {}\", flags);\n \n     // The rest of the configuration.\n     let mut config = compiletest::Config::default().tempdir();\n@@ -51,48 +58,36 @@ fn run_tests(mode: &str, path: &str, target: &str, mut flags: Vec<String>) {\n     config.host = get_host();\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n-    config.target_rustcflags = Some(flags.join(\" \"));\n+    config.target_rustcflags = Some(flags);\n     compiletest::run_tests(&config);\n }\n \n-fn compile_fail(path: &str, target: &str, opt: bool) {\n-    let opt_str = if opt { \" with optimizations\" } else { \"\" };\n+fn compile_fail(path: &str, target: &str) {\n     eprintln!(\n         \"{}\",\n         format!(\n-            \"## Running compile-fail tests in {} against miri for target {}{}\",\n-            path, target, opt_str\n+            \"## Running compile-fail tests in {} against miri for target {}\",\n+            path, target\n         )\n         .green()\n         .bold()\n     );\n \n-    let mut flags = Vec::new();\n-    if opt {\n-        flags.push(\"-Zmir-opt-level=3\".to_owned());\n-    }\n-\n-    run_tests(\"compile-fail\", path, target, flags);\n+    run_tests(\"compile-fail\", path, target);\n }\n \n-fn miri_pass(path: &str, target: &str, opt: bool) {\n-    let opt_str = if opt { \" with optimizations\" } else { \"\" };\n+fn miri_pass(path: &str, target: &str) {\n     eprintln!(\n         \"{}\",\n         format!(\n-            \"## Running run-pass tests in {} against miri for target {}{}\",\n-            path, target, opt_str\n+            \"## Running run-pass tests in {} against miri for target {}\",\n+            path, target\n         )\n         .green()\n         .bold()\n     );\n \n-    let mut flags = Vec::new();\n-    if opt {\n-        flags.push(\"-Zmir-opt-level=3\".to_owned());\n-    }\n-\n-    run_tests(\"ui\", path, target, flags);\n+    run_tests(\"ui\", path, target);\n }\n \n fn get_host() -> String {\n@@ -112,21 +107,11 @@ fn get_target() -> String {\n     std::env::var(\"MIRI_TEST_TARGET\").unwrap_or_else(|_| get_host())\n }\n \n-fn run_pass_miri(opt: bool) {\n-    miri_pass(\"tests/run-pass\", &get_target(), opt);\n-}\n-\n-fn compile_fail_miri(opt: bool) {\n-    compile_fail(\"tests/compile-fail\", &get_target(), opt);\n-}\n-\n fn test_runner(_tests: &[&()]) {\n-    // Add a test env var to do environment communication tests\n+    // Add a test env var to do environment communication tests.\n     std::env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n \n-    run_pass_miri(false);\n-    run_pass_miri(true);\n-\n-    compile_fail_miri(false);\n-    compile_fail_miri(true);\n+    let target = get_target();\n+    miri_pass(\"tests/run-pass\", &target);\n+    compile_fail(\"tests/compile-fail\", &target);\n }"}, {"sha": "fec9145ab0f7e27dd81ff7be6b902dd007e5fcb5", "filename": "travis.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "patch": "@@ -17,6 +17,7 @@ echo\n # Test\n function run_tests {\n     ./miri test --locked\n+    MIRI_TEST_FLAGS=\"-Z mir-opt-level=3\" ./miri test\n     # \"miri test\" has built the sysroot for us, now this should pass without\n     # any interactive questions.\n     test-cargo-miri/run-test.py"}]}