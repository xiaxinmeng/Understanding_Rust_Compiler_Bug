{"sha": "dcd70c0995a6773ba3f78c072a899c62329f6a41", "node_id": "C_kwDOAAsO6NoAKGRjZDcwYzA5OTVhNjc3M2JhM2Y3OGMwNzJhODk5YzYyMzI5ZjZhNDE", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-04T02:51:25Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-04T02:51:25Z"}, "message": "return when captured argument is not a struct field", "tree": {"sha": "889683de8ea81ddfe5978cfb378c6e56ed4da6ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/889683de8ea81ddfe5978cfb378c6e56ed4da6ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcd70c0995a6773ba3f78c072a899c62329f6a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcd70c0995a6773ba3f78c072a899c62329f6a41", "html_url": "https://github.com/rust-lang/rust/commit/dcd70c0995a6773ba3f78c072a899c62329f6a41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcd70c0995a6773ba3f78c072a899c62329f6a41/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0a2ec332621d35b92633dc4db0451e0c3cb4ab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a2ec332621d35b92633dc4db0451e0c3cb4ab2", "html_url": "https://github.com/rust-lang/rust/commit/a0a2ec332621d35b92633dc4db0451e0c3cb4ab2"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "515dedb23c202a702a56d30c4d1d059b5ba69253", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dcd70c0995a6773ba3f78c072a899c62329f6a41/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd70c0995a6773ba3f78c072a899c62329f6a41/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=dcd70c0995a6773ba3f78c072a899c62329f6a41", "patch": "@@ -1279,19 +1279,20 @@ pub fn expand_preparsed_format_args(\n             let captured_arg_span =\n                 fmt_span.from_inner(InnerSpan::new(err.span.start, err.span.end));\n             let positional_args = args.iter().filter(|arg| !arg.named).collect::<Vec<_>>();\n-            let mut suggestions = vec![(captured_arg_span, positional_args.len().to_string())];\n             if let Ok(arg) = ecx.source_map().span_to_snippet(captured_arg_span) {\n                 let span = match positional_args.last() {\n                     Some(arg) => arg.expr.span,\n                     None => fmt_sp,\n                 };\n-                suggestions.push((span.shrink_to_hi(), format!(\", {}\", arg)))\n+                e.multipart_suggestion_verbose(\n+                    \"consider using a positional formatting argument instead\",\n+                    vec![\n+                        (captured_arg_span, positional_args.len().to_string()),\n+                        (span.shrink_to_hi(), format!(\", {}\", arg)),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n             }\n-            e.multipart_suggestion_verbose(\n-                \"consider using a positional formatting argument instead\",\n-                suggestions,\n-                Applicability::MachineApplicable,\n-            );\n         }\n         e.emit();\n         return DummyResult::raw_expr(sp, true);"}, {"sha": "c98c8cae3782eeee4d707cc39d31d6ea9d9bae6a", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dcd70c0995a6773ba3f78c072a899c62329f6a41/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcd70c0995a6773ba3f78c072a899c62329f6a41/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=dcd70c0995a6773ba3f78c072a899c62329f6a41", "patch": "@@ -229,20 +229,16 @@ impl<'a> Iterator for Parser<'a> {\n                         Some(String(self.string(pos + 1)))\n                     } else {\n                         let arg = self.argument(lbrace_end);\n-                        match self.must_consume('}') {\n-                            Some(rbrace_byte_idx) => {\n-                                let lbrace_inner_offset = self.to_span_index(pos);\n-                                let rbrace_inner_offset = self.to_span_index(rbrace_byte_idx);\n-                                if self.is_literal {\n-                                    self.arg_places.push(\n-                                        lbrace_inner_offset\n-                                            .to(InnerOffset(rbrace_inner_offset.0 + 1)),\n-                                    );\n-                                }\n-                            }\n-                            None => {\n-                                self.suggest_positional_arg_instead_of_captured_arg(arg);\n+                        if let Some(rbrace_byte_idx) = self.must_consume('}') {\n+                            let lbrace_inner_offset = self.to_span_index(pos);\n+                            let rbrace_inner_offset = self.to_span_index(rbrace_byte_idx);\n+                            if self.is_literal {\n+                                self.arg_places.push(\n+                                    lbrace_inner_offset.to(InnerOffset(rbrace_inner_offset.0 + 1)),\n+                                );\n                             }\n+                        } else {\n+                            self.suggest_positional_arg_instead_of_captured_arg(arg);\n                         }\n                         Some(NextArgument(arg))\n                     }\n@@ -767,6 +763,9 @@ impl<'a> Parser<'a> {\n             let byte_pos = self.to_span_index(end);\n             let start = InnerOffset(byte_pos.0 + 1);\n             let field = self.argument(start);\n+            if !self.consume('}') {\n+                return;\n+            }\n             if let ArgumentNamed(_) = arg.position {\n                 if let ArgumentNamed(_) = field.position {\n                     self.errors.insert("}]}