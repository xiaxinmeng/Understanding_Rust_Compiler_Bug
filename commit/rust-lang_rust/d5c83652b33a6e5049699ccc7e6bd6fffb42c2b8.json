{"sha": "d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YzgzNjUyYjMzYTZlNTA0OTY5OWNjYzdlNmJkNmZmZmI0MmMyYjg=", "commit": {"author": {"name": "Paul Collier", "email": "paul@paulcollier.ca", "date": "2015-01-17T23:49:08Z"}, "committer": {"name": "Paul Collier", "email": "paul@paulcollier.ca", "date": "2015-01-18T04:47:30Z"}, "message": "libsyntax: rename functions from uint to usize", "tree": {"sha": "4eccd1b791ccfb71901f8051743d56ba49cbe287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eccd1b791ccfb71901f8051743d56ba49cbe287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "html_url": "https://github.com/rust-lang/rust/commit/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/comments", "author": {"login": "pshc", "id": 6398, "node_id": "MDQ6VXNlcjYzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pshc", "html_url": "https://github.com/pshc", "followers_url": "https://api.github.com/users/pshc/followers", "following_url": "https://api.github.com/users/pshc/following{/other_user}", "gists_url": "https://api.github.com/users/pshc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pshc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pshc/subscriptions", "organizations_url": "https://api.github.com/users/pshc/orgs", "repos_url": "https://api.github.com/users/pshc/repos", "events_url": "https://api.github.com/users/pshc/events{/privacy}", "received_events_url": "https://api.github.com/users/pshc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pshc", "id": 6398, "node_id": "MDQ6VXNlcjYzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pshc", "html_url": "https://github.com/pshc", "followers_url": "https://api.github.com/users/pshc/followers", "following_url": "https://api.github.com/users/pshc/following{/other_user}", "gists_url": "https://api.github.com/users/pshc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pshc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pshc/subscriptions", "organizations_url": "https://api.github.com/users/pshc/orgs", "repos_url": "https://api.github.com/users/pshc/repos", "events_url": "https://api.github.com/users/pshc/events{/privacy}", "received_events_url": "https://api.github.com/users/pshc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a32249d4477f449646162bbad607c39d0ad7f3ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32249d4477f449646162bbad607c39d0ad7f3ca", "html_url": "https://github.com/rust-lang/rust/commit/a32249d4477f449646162bbad607c39d0ad7f3ca"}], "stats": {"total": 194, "additions": 97, "deletions": 97}, "files": [{"sha": "75897fe6d7ccb5edc861e1dd5901b82e0682b5ae", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -1329,7 +1329,7 @@ impl UnusedMut {\n                 let ident = path1.node;\n                 if let ast::BindByValue(ast::MutMutable) = mode {\n                     if !token::get_ident(ident).get().starts_with(\"_\") {\n-                        match mutables.entry(ident.name.uint()) {\n+                        match mutables.entry(ident.name.usize()) {\n                             Vacant(entry) => { entry.insert(vec![id]); },\n                             Occupied(mut entry) => { entry.get_mut().push(id); },\n                         }"}, {"sha": "8427c471eee322e2038903af0897df853b31ee3a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -164,7 +164,7 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n     fn explain_span(cx: &ctxt, heading: &str, span: Span)\n                     -> (String, Option<Span>) {\n         let lo = cx.sess.codemap().lookup_char_pos_adj(span.lo);\n-        (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_uint()),\n+        (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_usize()),\n          Some(span))\n     }\n }"}, {"sha": "19992164118e95c0bc43f079035ed3c4a974b3d6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -1962,7 +1962,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     let module_name = self.module_to_string(&*search_module);\n                     let mut span = span;\n                     let msg = if \"???\" == &module_name[] {\n-                        span.hi = span.lo + Pos::from_uint(segment_name.get().len());\n+                        span.hi = span.lo + Pos::from_usize(segment_name.get().len());\n \n                         match search_parent_externals(name,\n                                                      &self.current_module) {"}, {"sha": "97b3cda006bf7b36441b53b188ac58aacd105c8b", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -40,8 +40,8 @@ impl<'a> SpanUtils<'a> {\n         format!(\"file_name,{},file_line,{},file_col,{},extent_start,{},extent_start_bytes,{},\\\n                  file_line_end,{},file_col_end,{},extent_end,{},extent_end_bytes,{}\",\n                 lo_loc.file.name,\n-                lo_loc.line, lo_loc.col.to_uint(), lo_pos.to_uint(), lo_pos_byte.to_uint(),\n-                hi_loc.line, hi_loc.col.to_uint(), hi_pos.to_uint(), hi_pos_byte.to_uint())\n+                lo_loc.line, lo_loc.col.to_usize(), lo_pos.to_usize(), lo_pos_byte.to_usize(),\n+                hi_loc.line, hi_loc.col.to_usize(), hi_pos.to_usize(), hi_pos_byte.to_usize())\n     }\n \n     // sub_span starts at span.lo, so we need to adjust the positions etc."}, {"sha": "519b4f628e23a416630e3beb281037f862ffd245", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -275,7 +275,7 @@ pub fn return_type_is_void(ccx: &CrateContext, ty: Ty) -> bool {\n /// Generates a unique symbol based off the name given. This is used to create\n /// unique symbols for things like closures.\n pub fn gensym_name(name: &str) -> PathElem {\n-    let num = token::gensym(name).uint();\n+    let num = token::gensym(name).usize();\n     // use one colon which will get translated to a period by the mangler, and\n     // we're guaranteed that `num` is globally unique for this crate.\n     PathName(token::gensym(&format!(\"{}:{}\", name, num)[]))\n@@ -848,7 +848,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n                                                 !null_terminated as Bool);\n \n         let gsym = token::gensym(\"str\");\n-        let buf = CString::from_vec(format!(\"str{}\", gsym.uint()).into_bytes());\n+        let buf = CString::from_vec(format!(\"str{}\", gsym.usize()).into_bytes());\n         let g = llvm::LLVMAddGlobal(cx.llmod(), val_ty(sc).to_ref(), buf.as_ptr());\n         llvm::LLVMSetInitializer(g, sc);\n         llvm::LLVMSetGlobalConstant(g, True);\n@@ -873,7 +873,7 @@ pub fn C_binary_slice(cx: &CrateContext, data: &[u8]) -> ValueRef {\n         let lldata = C_bytes(cx, data);\n \n         let gsym = token::gensym(\"binary\");\n-        let name = format!(\"binary{}\", gsym.uint());\n+        let name = format!(\"binary{}\", gsym.usize());\n         let name = CString::from_vec(name.into_bytes());\n         let g = llvm::LLVMAddGlobal(cx.llmod(), val_ty(lldata).to_ref(),\n                                     name.as_ptr());"}, {"sha": "4b52e5f989f6aea49288ca780b5cd4c77a103c7b", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -1204,7 +1204,7 @@ pub fn set_source_location(fcx: &FunctionContext,\n \n                 set_debug_location(cx, DebugLocation::new(scope,\n                                                           loc.line,\n-                                                          loc.col.to_uint()));\n+                                                          loc.col.to_usize()));\n             } else {\n                 set_debug_location(cx, UnknownLocation);\n             }\n@@ -1719,7 +1719,7 @@ fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     set_debug_location(cx, DebugLocation::new(scope_metadata,\n                                               loc.line,\n-                                              loc.col.to_uint()));\n+                                              loc.col.to_usize()));\n     unsafe {\n         let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n             DIB(cx),\n@@ -3282,7 +3282,7 @@ fn create_scope_map(cx: &CrateContext,\n                 parent_scope,\n                 file_metadata,\n                 loc.line as c_uint,\n-                loc.col.to_uint() as c_uint)\n+                loc.col.to_usize() as c_uint)\n         };\n \n         scope_stack.push(ScopeStackEntry { scope_metadata: scope_metadata,\n@@ -3404,7 +3404,7 @@ fn create_scope_map(cx: &CrateContext,\n                                 parent_scope,\n                                 file_metadata,\n                                 loc.line as c_uint,\n-                                loc.col.to_uint() as c_uint)\n+                                loc.col.to_usize() as c_uint)\n                         };\n \n                         scope_stack.push(ScopeStackEntry {"}, {"sha": "712f5fa53c958f30acf14d73deae6f1a2cee1e77", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -785,7 +785,7 @@ pub fn make_vtable<I: Iterator<Item=ValueRef>>(ccx: &CrateContext,\n     unsafe {\n         let tbl = C_struct(ccx, &components[], false);\n         let sym = token::gensym(\"vtable\");\n-        let buf = CString::from_vec(format!(\"vtable{}\", sym.uint()).into_bytes());\n+        let buf = CString::from_vec(format!(\"vtable{}\", sym.usize()).into_bytes());\n         let vt_gvar = llvm::LLVMAddGlobal(ccx.llmod(), val_ty(tbl).to_ref(),\n                                           buf.as_ptr());\n         llvm::LLVMSetInitializer(vt_gvar, tbl);"}, {"sha": "c6ac616932d61d1471f17d9da19c91fa8baea0d1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -1870,9 +1870,9 @@ impl Clean<Span> for syntax::codemap::Span {\n         Span {\n             filename: filename.to_string(),\n             loline: lo.line,\n-            locol: lo.col.to_uint(),\n+            locol: lo.col.to_usize(),\n             hiline: hi.line,\n-            hicol: hi.col.to_uint(),\n+            hicol: hi.col.to_usize(),\n         }\n     }\n }"}, {"sha": "47d55818f5ec80d726f9381414514ddc2e68d91a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -95,7 +95,7 @@ impl Ident {\n \n     pub fn encode_with_hygiene(&self) -> String {\n         format!(\"\\x00name_{},ctxt_{}\\x00\",\n-                self.name.uint(),\n+                self.name.usize(),\n                 self.ctxt)\n     }\n }\n@@ -181,7 +181,7 @@ impl Name {\n         }\n     }\n \n-    pub fn uint(&self) -> usize {\n+    pub fn usize(&self) -> usize {\n         let Name(nm) = *self;\n         nm as usize\n     }"}, {"sha": "07544f35b19ca1e915ea7e99ec59e60d48bd88e8", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -30,8 +30,8 @@ use libc::c_uint;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {\n-    fn from_uint(n: usize) -> Self;\n-    fn to_uint(&self) -> usize;\n+    fn from_usize(n: usize) -> Self;\n+    fn to_usize(&self) -> usize;\n }\n \n /// A byte offset. Keep this small (currently 32-bits), as AST contains\n@@ -49,44 +49,44 @@ pub struct CharPos(pub usize);\n // have been unsuccessful\n \n impl Pos for BytePos {\n-    fn from_uint(n: usize) -> BytePos { BytePos(n as u32) }\n-    fn to_uint(&self) -> usize { let BytePos(n) = *self; n as usize }\n+    fn from_usize(n: usize) -> BytePos { BytePos(n as u32) }\n+    fn to_usize(&self) -> usize { let BytePos(n) = *self; n as usize }\n }\n \n impl Add for BytePos {\n     type Output = BytePos;\n \n     fn add(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_uint() + rhs.to_uint()) as u32)\n+        BytePos((self.to_usize() + rhs.to_usize()) as u32)\n     }\n }\n \n impl Sub for BytePos {\n     type Output = BytePos;\n \n     fn sub(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_uint() - rhs.to_uint()) as u32)\n+        BytePos((self.to_usize() - rhs.to_usize()) as u32)\n     }\n }\n \n impl Pos for CharPos {\n-    fn from_uint(n: usize) -> CharPos { CharPos(n) }\n-    fn to_uint(&self) -> usize { let CharPos(n) = *self; n }\n+    fn from_usize(n: usize) -> CharPos { CharPos(n) }\n+    fn to_usize(&self) -> usize { let CharPos(n) = *self; n }\n }\n \n impl Add for CharPos {\n     type Output = CharPos;\n \n     fn add(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_uint() + rhs.to_uint())\n+        CharPos(self.to_usize() + rhs.to_usize())\n     }\n }\n \n impl Sub for CharPos {\n     type Output = CharPos;\n \n     fn sub(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_uint() - rhs.to_uint())\n+        CharPos(self.to_usize() - rhs.to_usize())\n     }\n }\n \n@@ -310,7 +310,7 @@ impl FileMap {\n         let lines = self.lines.borrow();\n         lines.get(line_number).map(|&line| {\n             let begin: BytePos = line - self.start_pos;\n-            let begin = begin.to_uint();\n+            let begin = begin.to_usize();\n             let slice = &self.src[begin..];\n             match slice.find('\\n') {\n                 Some(e) => &slice[..e],\n@@ -351,7 +351,7 @@ impl CodeMap {\n         let mut files = self.files.borrow_mut();\n         let start_pos = match files.last() {\n             None => 0,\n-            Some(last) => last.start_pos.to_uint() + last.src.len(),\n+            Some(last) => last.start_pos.to_usize() + last.src.len(),\n         };\n \n         // Remove utf-8 BOM if any.\n@@ -374,7 +374,7 @@ impl CodeMap {\n         let filemap = Rc::new(FileMap {\n             name: filename,\n             src: src.to_string(),\n-            start_pos: Pos::from_uint(start_pos),\n+            start_pos: Pos::from_usize(start_pos),\n             lines: RefCell::new(Vec::new()),\n             multibyte_chars: RefCell::new(Vec::new()),\n         });\n@@ -389,7 +389,7 @@ impl CodeMap {\n         (format!(\"<{}:{}:{}>\",\n                  pos.file.name,\n                  pos.line,\n-                 pos.col.to_uint() + 1)).to_string()\n+                 pos.col.to_usize() + 1)).to_string()\n     }\n \n     /// Lookup source information about a BytePos\n@@ -417,9 +417,9 @@ impl CodeMap {\n         return (format!(\"{}:{}:{}: {}:{}\",\n                         lo.filename,\n                         lo.line,\n-                        lo.col.to_uint() + 1,\n+                        lo.col.to_usize() + 1,\n                         hi.line,\n-                        hi.col.to_uint() + 1)).to_string()\n+                        hi.col.to_usize() + 1)).to_string()\n     }\n \n     pub fn span_to_filename(&self, sp: Span) -> FileName {\n@@ -447,7 +447,7 @@ impl CodeMap {\n         if begin.fm.start_pos != end.fm.start_pos {\n             None\n         } else {\n-            Some((&begin.fm.src[begin.pos.to_uint()..end.pos.to_uint()]).to_string())\n+            Some((&begin.fm.src[begin.pos.to_usize()..end.pos.to_usize()]).to_string())\n         }\n     }\n \n@@ -484,14 +484,14 @@ impl CodeMap {\n                 total_extra_bytes += mbc.bytes - 1;\n                 // We should never see a byte position in the middle of a\n                 // character\n-                assert!(bpos.to_uint() >= mbc.pos.to_uint() + mbc.bytes);\n+                assert!(bpos.to_usize() >= mbc.pos.to_usize() + mbc.bytes);\n             } else {\n                 break;\n             }\n         }\n \n-        assert!(map.start_pos.to_uint() + total_extra_bytes <= bpos.to_uint());\n-        CharPos(bpos.to_uint() - map.start_pos.to_uint() - total_extra_bytes)\n+        assert!(map.start_pos.to_usize() + total_extra_bytes <= bpos.to_usize());\n+        CharPos(bpos.to_usize() - map.start_pos.to_usize() - total_extra_bytes)\n     }\n \n     fn lookup_filemap_idx(&self, pos: BytePos) -> usize {\n@@ -520,13 +520,13 @@ impl CodeMap {\n             }\n             if a == 0 {\n                 panic!(\"position {} does not resolve to a source location\",\n-                      pos.to_uint());\n+                      pos.to_usize());\n             }\n             a -= 1;\n         }\n         if a >= len {\n             panic!(\"position {} does not resolve to a source location\",\n-                  pos.to_uint())\n+                  pos.to_usize())\n         }\n \n         return a;"}, {"sha": "c86991b6e407b8d96900257cfb2369377ee5dc0c", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -475,7 +475,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n         while num > 0u { num /= 10u; digits += 1u; }\n \n         // indent past |name:## | and the 0-offset column location\n-        let left = fm.name.len() + digits + lo.col.to_uint() + 3u;\n+        let left = fm.name.len() + digits + lo.col.to_usize() + 3u;\n         let mut s = String::new();\n         // Skip is the number of characters we need to skip because they are\n         // part of the 'filename:line ' part of the previous line.\n@@ -502,7 +502,7 @@ fn highlight_lines(err: &mut EmitterWriter,\n         let hi = cm.lookup_char_pos(sp.hi);\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n-            let num_squigglies = hi.col.to_uint() - lo.col.to_uint() - 1u;\n+            let num_squigglies = hi.col.to_usize() - lo.col.to_usize() - 1us;\n             for _ in range(0, num_squigglies) {\n                 s.push('~');\n             }\n@@ -551,7 +551,7 @@ fn custom_highlight_lines(w: &mut EmitterWriter,\n     let last_line_start = format!(\"{}:{} \", fm.name, lines[lines.len()-1]+1);\n     let hi = cm.lookup_char_pos(sp.hi);\n     // Span seems to use half-opened interval, so subtract 1\n-    let skip = last_line_start.len() + hi.col.to_uint() - 1;\n+    let skip = last_line_start.len() + hi.col.to_usize() - 1;\n     let mut s = String::new();\n     for _ in range(0, skip) {\n         s.push(' ');"}, {"sha": "3bac972dbb50878c9822391d0e8170eaa19737f6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -134,7 +134,7 @@ pub trait AstBuilder {\n \n     fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr>;\n \n-    fn expr_uint(&self, span: Span, i: usize) -> P<ast::Expr>;\n+    fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;\n     fn expr_int(&self, sp: Span, i: int) -> P<ast::Expr>;\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr>;\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr>;\n@@ -579,7 +579,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn expr_field_access(&self, sp: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> {\n         let field_name = token::get_ident(ident);\n         let field_span = Span {\n-            lo: sp.lo - Pos::from_uint(field_name.get().len()),\n+            lo: sp.lo - Pos::from_usize(field_name.get().len()),\n             hi: sp.hi,\n             expn_id: sp.expn_id,\n         };\n@@ -589,7 +589,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn expr_tup_field_access(&self, sp: Span, expr: P<ast::Expr>, idx: usize) -> P<ast::Expr> {\n         let field_span = Span {\n-            lo: sp.lo - Pos::from_uint(idx.to_string().len()),\n+            lo: sp.lo - Pos::from_usize(idx.to_string().len()),\n             hi: sp.hi,\n             expn_id: sp.expn_id,\n         };\n@@ -641,7 +641,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprLit(P(respan(sp, lit))))\n     }\n-    fn expr_uint(&self, span: Span, i: usize) -> P<ast::Expr> {\n+    fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs(false))))\n     }\n     fn expr_int(&self, sp: Span, i: int) -> P<ast::Expr> {\n@@ -710,7 +710,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let loc = self.codemap().lookup_char_pos(span.lo);\n         let expr_file = self.expr_str(span,\n                                       token::intern_and_get_ident(&loc.file.name[]));\n-        let expr_line = self.expr_uint(span, loc.line);\n+        let expr_line = self.expr_usize(span, loc.line);\n         let expr_file_line_tuple = self.expr_tuple(span, vec!(expr_file, expr_line));\n         let expr_file_line_ptr = self.expr_addr_of(span, expr_file_line_tuple);\n         self.expr_call_global("}, {"sha": "62304265dfac63d47004f0a8a4ac47646ea6a11a", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -114,7 +114,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                 cx.expr_try(span,\n                     cx.expr_method_call(span, blkdecoder.clone(), read_struct_field,\n                                         vec!(cx.expr_str(span, name),\n-                                          cx.expr_uint(span, field),\n+                                          cx.expr_usize(span, field),\n                                           exprdecode.clone())))\n             });\n             let result = cx.expr_ok(trait_span, result);\n@@ -123,7 +123,7 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                                 cx.ident_of(\"read_struct\"),\n                                 vec!(\n                 cx.expr_str(trait_span, token::get_ident(substr.type_ident)),\n-                cx.expr_uint(trait_span, nfields),\n+                cx.expr_usize(trait_span, nfields),\n                 cx.lambda_expr_1(trait_span, result, blkarg)\n             ))\n         }\n@@ -143,14 +143,14 @@ fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                                                    path,\n                                                    parts,\n                                                    |cx, span, _, field| {\n-                    let idx = cx.expr_uint(span, field);\n+                    let idx = cx.expr_usize(span, field);\n                     cx.expr_try(span,\n                         cx.expr_method_call(span, blkdecoder.clone(), rvariant_arg,\n                                             vec!(idx, exprdecode.clone())))\n                 });\n \n                 arms.push(cx.arm(v_span,\n-                                 vec!(cx.pat_lit(v_span, cx.expr_uint(v_span, i))),\n+                                 vec!(cx.pat_lit(v_span, cx.expr_usize(v_span, i))),\n                                  decoded));\n             }\n "}, {"sha": "f22e02d7b8da16105ec8712a74d62b61daf30e8e", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -79,7 +79,7 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n         StaticEnum(..) => {\n             cx.span_err(trait_span, \"`Default` cannot be derived for enums, only structs\");\n             // let compilation continue\n-            cx.expr_uint(trait_span, 0)\n+            cx.expr_usize(trait_span, 0)\n         }\n         _ => cx.span_bug(trait_span, \"Non-static method in `deriving(Default)`\")\n     };"}, {"sha": "3189a39160ec45c0c87ee39ce891f3f8b7230e50", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -27,7 +27,7 @@\n //!         s.emit_struct(\"Node\", 1, |this| {\n //!             this.emit_struct_field(\"id\", 0, |this| {\n //!                 Encodable::encode(&self.id, this)\n-//!                 /* this.emit_uint(self.id) can also be used */\n+//!                 /* this.emit_usize(self.id) can also be used */\n //!             })\n //!         })\n //!     }\n@@ -192,7 +192,7 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                 let call = cx.expr_method_call(span, blkencoder.clone(),\n                                                emit_struct_field,\n                                                vec!(cx.expr_str(span, name),\n-                                                 cx.expr_uint(span, i),\n+                                                 cx.expr_usize(span, i),\n                                                  lambda));\n \n                 // last call doesn't need a try!\n@@ -218,7 +218,7 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                                 cx.ident_of(\"emit_struct\"),\n                                 vec!(\n                 cx.expr_str(trait_span, token::get_ident(substr.type_ident)),\n-                cx.expr_uint(trait_span, fields.len()),\n+                cx.expr_usize(trait_span, fields.len()),\n                 blk\n             ))\n         }\n@@ -239,7 +239,7 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                 let lambda = cx.lambda_expr_1(span, enc, blkarg);\n                 let call = cx.expr_method_call(span, blkencoder.clone(),\n                                                emit_variant_arg,\n-                                               vec!(cx.expr_uint(span, i),\n+                                               vec!(cx.expr_usize(span, i),\n                                                  lambda));\n                 let call = if i != last {\n                     cx.expr_try(span, call)\n@@ -262,8 +262,8 @@ fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n             let call = cx.expr_method_call(trait_span, blkencoder,\n                                            cx.ident_of(\"emit_enum_variant\"),\n                                            vec!(name,\n-                                             cx.expr_uint(trait_span, idx),\n-                                             cx.expr_uint(trait_span, fields.len()),\n+                                             cx.expr_usize(trait_span, idx),\n+                                             cx.expr_usize(trait_span, fields.len()),\n                                              blk));\n             let blk = cx.lambda_expr_1(trait_span, call, blkarg);\n             let ret = cx.expr_method_call(trait_span,"}, {"sha": "8dac864c2ae3b689b9a89e38b3faa13f57c44b4d", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -89,7 +89,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n             // iteration function.\n             let discriminant = match variant.node.disr_expr {\n                 Some(ref d) => d.clone(),\n-                None => cx.expr_uint(trait_span, index)\n+                None => cx.expr_usize(trait_span, index)\n             };\n \n             stmts.push(call_hash(trait_span, discriminant));"}, {"sha": "be45a54e71026eafbdba30e6d2b15d067555e1ad", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -80,10 +80,10 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n             if variants.is_empty() {\n                 cx.span_err(trait_span, \"`Rand` cannot be derived for enums with no variants\");\n                 // let compilation continue\n-                return cx.expr_uint(trait_span, 0);\n+                return cx.expr_usize(trait_span, 0);\n             }\n \n-            let variant_count = cx.expr_uint(trait_span, variants.len());\n+            let variant_count = cx.expr_usize(trait_span, variants.len());\n \n             let rand_name = cx.path_all(trait_span,\n                                         true,\n@@ -115,7 +115,7 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n                                               variant_count);\n \n             let mut arms = variants.iter().enumerate().map(|(i, &(ident, v_span, ref summary))| {\n-                let i_expr = cx.expr_uint(v_span, i);\n+                let i_expr = cx.expr_usize(v_span, i);\n                 let pat = cx.pat_lit(v_span, i_expr);\n \n                 let path = cx.path(v_span, vec![substr.type_ident, ident]);"}, {"sha": "9f6bf352b040443609c0c30943259b5f8b0656d7", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -104,7 +104,7 @@ pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let e = match os::getenv(var.get()) {\n         None => {\n             cx.span_err(sp, msg.get());\n-            cx.expr_uint(sp, 0)\n+            cx.expr_usize(sp, 0)\n         }\n         Some(s) => cx.expr_str(sp, token::intern_and_get_ident(&s[]))\n     };"}, {"sha": "068c7ec08672ab10ed3dc6d5b007312c4910dad8", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -326,11 +326,11 @@ impl<'a, 'b> Context<'a, 'b> {\n         match c {\n             parse::CountIs(i) => {\n                 self.ecx.expr_call_global(sp, Context::rtpath(self.ecx, \"CountIs\"),\n-                                          vec!(self.ecx.expr_uint(sp, i)))\n+                                          vec!(self.ecx.expr_usize(sp, i)))\n             }\n             parse::CountIsParam(i) => {\n                 self.ecx.expr_call_global(sp, Context::rtpath(self.ecx, \"CountIsParam\"),\n-                                          vec!(self.ecx.expr_uint(sp, i)))\n+                                          vec!(self.ecx.expr_usize(sp, i)))\n             }\n             parse::CountImplied => {\n                 let path = self.ecx.path_global(sp, Context::rtpath(self.ecx,\n@@ -349,7 +349,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 };\n                 let i = i + self.args.len();\n                 self.ecx.expr_call_global(sp, Context::rtpath(self.ecx, \"CountIsParam\"),\n-                                          vec!(self.ecx.expr_uint(sp, i)))\n+                                          vec!(self.ecx.expr_usize(sp, i)))\n             }\n         }\n     }\n@@ -382,7 +382,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     }\n                     parse::ArgumentIs(i) => {\n                         self.ecx.expr_call_global(sp, Context::rtpath(self.ecx, \"ArgumentIs\"),\n-                                                  vec!(self.ecx.expr_uint(sp, i)))\n+                                                  vec!(self.ecx.expr_usize(sp, i)))\n                     }\n                     // Named arguments are converted to positional arguments at\n                     // the end of the list of arguments\n@@ -393,7 +393,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                         };\n                         let i = i + self.args.len();\n                         self.ecx.expr_call_global(sp, Context::rtpath(self.ecx, \"ArgumentIs\"),\n-                                                  vec!(self.ecx.expr_uint(sp, i)))\n+                                                  vec!(self.ecx.expr_usize(sp, i)))\n                     }\n                 };\n \n@@ -432,7 +432,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     }\n                 };\n                 let align = self.ecx.expr_path(align);\n-                let flags = self.ecx.expr_uint(sp, arg.format.flags);\n+                let flags = self.ecx.expr_usize(sp, arg.format.flags);\n                 let prec = self.trans_count(arg.format.precision);\n                 let width = self.trans_count(arg.format.width);\n                 let path = self.ecx.path_global(sp, Context::rtpath(self.ecx, \"FormatSpec\"));"}, {"sha": "7adc443759fe87624bd861e6a4ad1cab2af74ed5", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -398,7 +398,7 @@ mod tests {\n          assert_eq! (marksof_internal (ans, stopname,&t), vec!(16));}\n         // rename where stop doesn't match:\n         { let chain = vec!(M(9),\n-                        R(id(name1.uint() as u32,\n+                        R(id(name1.usize() as u32,\n                              apply_mark_internal (4, EMPTY_CTXT,&mut t)),\n                           Name(100101102)),\n                         M(14));\n@@ -407,7 +407,7 @@ mod tests {\n         // rename where stop does match\n         { let name1sc = apply_mark_internal(4, EMPTY_CTXT, &mut t);\n          let chain = vec!(M(9),\n-                       R(id(name1.uint() as u32, name1sc),\n+                       R(id(name1.usize() as u32, name1sc),\n                          stopname),\n                        M(14));\n          let ans = unfold_test_sc(chain,EMPTY_CTXT,&mut t);"}, {"sha": "a5885ac6c5d3479f43c574ae8c60d0536b1fb080", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -588,7 +588,7 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         }\n \n         token::Literal(token::StrRaw(ident, n), suf) => {\n-            return mk_lit!(\"StrRaw\", suf, mk_name(cx, sp, ident.ident()), cx.expr_uint(sp, n))\n+            return mk_lit!(\"StrRaw\", suf, mk_name(cx, sp, ident.ident()), cx.expr_usize(sp, n))\n         }\n \n         token::Ident(ident, style) => {"}, {"sha": "a74adbf40851565929b38512893cbc2fef3b5965", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -35,7 +35,7 @@ pub fn expand_line(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n \n-    base::MacExpr::new(cx.expr_uint(topmost, loc.line))\n+    base::MacExpr::new(cx.expr_usize(topmost, loc.line))\n }\n \n /* column!(): expands to the current column number */\n@@ -45,7 +45,7 @@ pub fn expand_column(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n     let topmost = cx.original_span_in_file();\n     let loc = cx.codemap().lookup_char_pos(topmost.lo);\n-    base::MacExpr::new(cx.expr_uint(topmost, loc.col.to_uint()))\n+    base::MacExpr::new(cx.expr_usize(topmost, loc.col.to_usize()))\n }\n \n /// file!(): expands to the current filename */"}, {"sha": "1649075fd71433c1efc425c902d5967ddfed3e88", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -174,8 +174,8 @@ pub trait Folder : Sized {\n         noop_fold_ident(i, self)\n     }\n \n-    fn fold_uint(&mut self, i: usize) -> usize {\n-        noop_fold_uint(i, self)\n+    fn fold_usize(&mut self, i: usize) -> usize {\n+        noop_fold_usize(i, self)\n     }\n \n     fn fold_path(&mut self, p: Path) -> Path {\n@@ -505,7 +505,7 @@ pub fn noop_fold_ident<T: Folder>(i: Ident, _: &mut T) -> Ident {\n     i\n }\n \n-pub fn noop_fold_uint<T: Folder>(i: usize, _: &mut T) -> usize {\n+pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize {\n     i\n }\n \n@@ -1377,7 +1377,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprTupField(el, ident) => {\n                 ExprTupField(folder.fold_expr(el),\n-                             respan(ident.span, folder.fold_uint(ident.node)))\n+                             respan(ident.span, folder.fold_usize(ident.node)))\n             }\n             ExprIndex(el, er) => {\n                 ExprIndex(folder.fold_expr(el), folder.fold_expr(er))"}, {"sha": "d710c6d6c0f94ed4327b50f44081403720e36d28", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -208,7 +208,7 @@ fn read_line_comments(rdr: &mut StringReader, code_to_the_left: bool,\n /// whitespace.  Note k may be outside bounds of s.\n fn all_whitespace(s: &str, col: CharPos) -> Option<usize> {\n     let len = s.len();\n-    let mut col = col.to_uint();\n+    let mut col = col.to_usize();\n     let mut cursor: usize = 0;\n     while col > 0 && cursor < len {\n         let r: str::CharRange = s.char_range_at(cursor);"}, {"sha": "dfb0230cf3480a7bfb87355501afff7a294ecd82", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -212,8 +212,8 @@ impl<'a> StringReader<'a> {\n     /// offending string to the error message\n     fn fatal_span_verbose(&self, from_pos: BytePos, to_pos: BytePos, mut m: String) -> ! {\n         m.push_str(\": \");\n-        let from = self.byte_offset(from_pos).to_uint();\n-        let to = self.byte_offset(to_pos).to_uint();\n+        let from = self.byte_offset(from_pos).to_usize();\n+        let to = self.byte_offset(to_pos).to_usize();\n         m.push_str(&self.filemap.src[from..to]);\n         self.fatal_span_(from_pos, to_pos, &m[]);\n     }\n@@ -272,8 +272,8 @@ impl<'a> StringReader<'a> {\n         F: FnOnce(&str) -> T,\n     {\n         f(self.filemap.src.slice(\n-                self.byte_offset(start).to_uint(),\n-                self.byte_offset(end).to_uint()))\n+                self.byte_offset(start).to_usize(),\n+                self.byte_offset(end).to_usize()))\n     }\n \n     /// Converts CRLF to LF in the given string, raising an error on bare CR.\n@@ -321,15 +321,15 @@ impl<'a> StringReader<'a> {\n     /// discovered, add it to the FileMap's list of line start offsets.\n     pub fn bump(&mut self) {\n         self.last_pos = self.pos;\n-        let current_byte_offset = self.byte_offset(self.pos).to_uint();\n+        let current_byte_offset = self.byte_offset(self.pos).to_usize();\n         if current_byte_offset < self.filemap.src.len() {\n             assert!(self.curr.is_some());\n             let last_char = self.curr.unwrap();\n             let next = self.filemap\n                           .src\n                           .char_range_at(current_byte_offset);\n             let byte_offset_diff = next.next - current_byte_offset;\n-            self.pos = self.pos + Pos::from_uint(byte_offset_diff);\n+            self.pos = self.pos + Pos::from_usize(byte_offset_diff);\n             self.curr = Some(next.ch);\n             self.col = self.col + CharPos(1u);\n             if last_char == '\\n' {\n@@ -346,7 +346,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     pub fn nextch(&self) -> Option<char> {\n-        let offset = self.byte_offset(self.pos).to_uint();\n+        let offset = self.byte_offset(self.pos).to_usize();\n         if offset < self.filemap.src.len() {\n             Some(self.filemap.src.char_at(offset))\n         } else {\n@@ -359,7 +359,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     pub fn nextnextch(&self) -> Option<char> {\n-        let offset = self.byte_offset(self.pos).to_uint();\n+        let offset = self.byte_offset(self.pos).to_usize();\n         let s = self.filemap.src.as_slice();\n         if offset >= s.len() { return None }\n         let str::CharRange { next, .. } = s.char_range_at(offset);"}, {"sha": "1a29766cee63fa3149f721d4e818b7867b16013e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -1171,9 +1171,9 @@ mod test {\n         for &src in srcs.iter() {\n             let spans = get_spans_of_pat_idents(src);\n             let Span{ lo, hi, .. } = spans[0];\n-            assert!(\"self\" == &src[lo.to_uint()..hi.to_uint()],\n+            assert!(\"self\" == &src[lo.to_usize()..hi.to_usize()],\n                     \"\\\"{}\\\" != \\\"self\\\". src=\\\"{}\\\"\",\n-                    &src[lo.to_uint()..hi.to_uint()], src)\n+                    &src[lo.to_usize()..hi.to_usize()], src)\n         }\n     }\n "}, {"sha": "08d0e5e997c8747adc099a5d288346df143746ff", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -757,7 +757,7 @@ pub fn fresh_name(src: &ast::Ident) -> ast::Name {\n \n // create a fresh mark.\n pub fn fresh_mark() -> ast::Mrk {\n-    gensym(\"mark\").uint() as u32\n+    gensym(\"mark\").usize() as u32\n }\n \n #[cfg(test)]"}, {"sha": "83ac8432f982ed614b87252d7b5fd8903b18c05c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -1789,7 +1789,7 @@ impl<'a> State<'a> {\n             ast::ExprTupField(ref expr, id) => {\n                 try!(self.print_expr(&**expr));\n                 try!(word(&mut self.s, \".\"));\n-                try!(self.print_uint(id.node));\n+                try!(self.print_usize(id.node));\n             }\n             ast::ExprIndex(ref expr, ref index) => {\n                 try!(self.print_expr(&**expr));\n@@ -1951,7 +1951,7 @@ impl<'a> State<'a> {\n         self.ann.post(self, NodeIdent(&ident))\n     }\n \n-    pub fn print_uint(&mut self, i: usize) -> IoResult<()> {\n+    pub fn print_usize(&mut self, i: usize) -> IoResult<()> {\n         word(&mut self.s, &i.to_string()[])\n     }\n "}, {"sha": "66b225f30dd8af39b374c9f1f317fb26affef038", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -70,7 +70,7 @@ impl<T: Eq + Hash<Hasher> + Clone + 'static> Interner<T> {\n \n     pub fn get(&self, idx: Name) -> T {\n         let vect = self.vect.borrow();\n-        (*vect)[idx.uint()].clone()\n+        (*vect)[idx.usize()].clone()\n     }\n \n     pub fn len(&self) -> usize {\n@@ -190,13 +190,13 @@ impl StrInterner {\n         let new_idx = Name(self.len() as u32);\n         // leave out of map to avoid colliding\n         let mut vect = self.vect.borrow_mut();\n-        let existing = (*vect)[idx.uint()].clone();\n+        let existing = (*vect)[idx.usize()].clone();\n         vect.push(existing);\n         new_idx\n     }\n \n     pub fn get(&self, idx: Name) -> RcStr {\n-        (*self.vect.borrow())[idx.uint()].clone()\n+        (*self.vect.borrow())[idx.usize()].clone()\n     }\n \n     pub fn len(&self) -> usize {"}, {"sha": "a4edc607279012f3d21a180f3a0bf7d816658e86", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=d5c83652b33a6e5049699ccc7e6bd6fffb42c2b8", "patch": "@@ -20,7 +20,7 @@ use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::{TokenTree, TtToken};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n-use syntax::ext::build::AstBuilder;  // trait for expr_uint\n+use syntax::ext::build::AstBuilder;  // trait for expr_usize\n use rustc::plugin::Registry;\n \n // WARNING WARNING WARNING WARNING WARNING\n@@ -61,7 +61,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         }\n     }\n \n-    MacExpr::new(cx.expr_uint(sp, total))\n+    MacExpr::new(cx.expr_usize(sp, total))\n }\n \n #[plugin_registrar]"}]}