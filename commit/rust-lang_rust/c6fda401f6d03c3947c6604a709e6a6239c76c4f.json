{"sha": "c6fda401f6d03c3947c6604a709e6a6239c76c4f", "node_id": "C_kwDOAAsO6NoAKGM2ZmRhNDAxZjZkMDNjMzk0N2M2NjA0YTcwOWU2YTYyMzljNzZjNGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-06-07T12:31:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-07T12:31:29Z"}, "message": "Rollup merge of #112251 - notriddle:notriddle/cleanup-inlining, r=GuillaumeGomez\n\nrustdoc: convert `if let Some()` that always matches to variable", "tree": {"sha": "41b8f01ae970bcf1b64ca24288d9e6e54775cd48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41b8f01ae970bcf1b64ca24288d9e6e54775cd48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6fda401f6d03c3947c6604a709e6a6239c76c4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkgHihCRBK7hj4Ov3rIwAAJuMIAHpCRKfArKrRBMY36je0EAT0\nMfKc9Nxn9wxYQ7jMOxVgyAO/4m5JTZVVIuxQtqlTKmlXfXCmCiwPXp+a51/P7Hrn\nwYQONGm0zii5SaGYXuzqJV/PHNZyhTuM1PemoWw0RaAZ2f78J990rizaiwy1VycG\n6jWQ33z5ahjpOfP4I6On4d6QpFSW3867FeCO7/CYQj2ToLqqm6697Z65pOCQ2XEy\nmU/b4kFpCCok2JRsaBxwS5czdWfeNtgKjtnAJuDYAoD3AsHunGIRkyPGUJ4r+vgK\nYfyvVJBGRYdoz/yr6fz2Ge/+rI5juIUlYCxRfz3VURz/olT9VvZkzhSmBTkItUE=\n=Od69\n-----END PGP SIGNATURE-----\n", "payload": "tree 41b8f01ae970bcf1b64ca24288d9e6e54775cd48\nparent 0b002eb90692cd30f09b3ed37b2fab55dfc6427a\nparent 0f1aaef7e9a1776a81819ef4ae05b508fb12d572\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1686141089 +0530\ncommitter GitHub <noreply@github.com> 1686141089 +0530\n\nRollup merge of #112251 - notriddle:notriddle/cleanup-inlining, r=GuillaumeGomez\n\nrustdoc: convert `if let Some()` that always matches to variable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fda401f6d03c3947c6604a709e6a6239c76c4f", "html_url": "https://github.com/rust-lang/rust/commit/c6fda401f6d03c3947c6604a709e6a6239c76c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6fda401f6d03c3947c6604a709e6a6239c76c4f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b002eb90692cd30f09b3ed37b2fab55dfc6427a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b002eb90692cd30f09b3ed37b2fab55dfc6427a", "html_url": "https://github.com/rust-lang/rust/commit/0b002eb90692cd30f09b3ed37b2fab55dfc6427a"}, {"sha": "0f1aaef7e9a1776a81819ef4ae05b508fb12d572", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1aaef7e9a1776a81819ef4ae05b508fb12d572", "html_url": "https://github.com/rust-lang/rust/commit/0f1aaef7e9a1776a81819ef4ae05b508fb12d572"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "22c8cc092438cdb264f5900f35b995dfc0131ff5", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c6fda401f6d03c3947c6604a709e6a6239c76c4f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fda401f6d03c3947c6604a709e6a6239c76c4f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c6fda401f6d03c3947c6604a709e6a6239c76c4f", "patch": "@@ -14,7 +14,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use std::{iter, mem};\n+use std::mem;\n \n use crate::clean::{cfg::Cfg, reexport_chain, AttributesExt, NestedAttributesExt};\n use crate::core;\n@@ -291,27 +291,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         if !please_inline {\n             let inherits_hidden = inherits_doc_hidden(tcx, res_did, None);\n             // Only inline if requested or if the item would otherwise be stripped.\n-            //\n-            // If it's a doc hidden module, we need to keep it in case some of its inner items\n-            // are re-exported.\n             if (!is_private && !inherits_hidden) || (\n                 is_hidden &&\n+                // If it's a doc hidden module, we need to keep it in case some of its inner items\n+                // are re-exported.\n                 !matches!(item, Node::Item(&hir::Item { kind: hir::ItemKind::Mod(_), .. }))\n-            ) {\n-                return false;\n-            } else if let Some(item_def_id) = reexport_chain(tcx, def_id, res_did).iter()\n-                .flat_map(|reexport| reexport.id()).map(|id| id.expect_local())\n-                .chain(iter::once(res_did)).nth(1) &&\n-                item_def_id != def_id &&\n-                self\n-                    .cx\n-                    .cache\n-                    .effective_visibilities\n-                    .is_directly_public(tcx, item_def_id.to_def_id()) &&\n-                !tcx.is_doc_hidden(item_def_id) &&\n-                !inherits_doc_hidden(tcx, item_def_id, None)\n-            {\n+            ) ||\n                 // The imported item is public and not `doc(hidden)` so no need to inline it.\n+                self.reexport_public_and_not_hidden(def_id, res_did)\n+            {\n                 return false;\n             }\n         }\n@@ -359,6 +347,28 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n+    /// Returns `true` if the item is visible, meaning it's not `#[doc(hidden)]` or private.\n+    ///\n+    /// This function takes into account the entire re-export `use` chain, so it needs the\n+    /// ID of the \"leaf\" `use` and the ID of the \"root\" item.\n+    fn reexport_public_and_not_hidden(\n+        &self,\n+        import_def_id: LocalDefId,\n+        target_def_id: LocalDefId,\n+    ) -> bool {\n+        let tcx = self.cx.tcx;\n+        let item_def_id = reexport_chain(tcx, import_def_id, target_def_id)\n+            .iter()\n+            .flat_map(|reexport| reexport.id())\n+            .map(|id| id.expect_local())\n+            .nth(1)\n+            .unwrap_or(target_def_id);\n+        item_def_id != import_def_id\n+            && self.cx.cache.effective_visibilities.is_directly_public(tcx, item_def_id.to_def_id())\n+            && !tcx.is_doc_hidden(item_def_id)\n+            && !inherits_doc_hidden(tcx, item_def_id, None)\n+    }\n+\n     #[inline]\n     fn add_to_current_mod(\n         &mut self,"}]}