{"sha": "ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "node_id": "C_kwDOAAsO6NoAKGNhMmM1NWQyNjQxODNjYjYxYjk0OTlmZDlhY2JmYjk5OTdiOWI4NWY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-09-16T15:32:57Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-09-21T06:24:23Z"}, "message": "rename", "tree": {"sha": "c0f0f2ca5073cdd967fa19e1aa18ea4fb307eb82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0f0f2ca5073cdd967fa19e1aa18ea4fb307eb82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "html_url": "https://github.com/rust-lang/rust/commit/ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2c55d264183cb61b9499fd9acbfb9997b9b85f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7958d35ca2c898a223efe402481e0ecb854310a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7958d35ca2c898a223efe402481e0ecb854310a", "html_url": "https://github.com/rust-lang/rust/commit/e7958d35ca2c898a223efe402481e0ecb854310a"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4c778b7bcc5561483237ee07536b611a2df15a7b", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca2c55d264183cb61b9499fd9acbfb9997b9b85f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2c55d264183cb61b9499fd9acbfb9997b9b85f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "patch": "@@ -55,14 +55,14 @@ pub struct Children {\n     // Impls of a trait (or specializations of a given impl). To allow for\n     // quicker lookup, the impls are indexed by a simplified version of their\n     // `Self` type: impls with a simplifiable `Self` are stored in\n-    // `nonblanket_impls` keyed by it, while all other impls are stored in\n+    // `non_blanket_impls` keyed by it, while all other impls are stored in\n     // `blanket_impls`.\n     //\n     // A similar division is used within `TraitDef`, but the lists there collect\n     // together *all* the impls for a trait, and are populated prior to building\n     // the specialization graph.\n     /// Impls of the trait.\n-    pub nonblanket_impls: FxHashMap<SimplifiedType, Vec<DefId>>,\n+    pub non_blanket_impls: FxHashMap<SimplifiedType, Vec<DefId>>,\n \n     /// Blanket impls associated with the trait.\n     pub blanket_impls: Vec<DefId>,\n@@ -238,8 +238,8 @@ pub fn ancestors(\n \n impl<'a> HashStable<StableHashingContext<'a>> for Children {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let Children { ref nonblanket_impls, ref blanket_impls } = *self;\n+        let Children { ref non_blanket_impls, ref blanket_impls } = *self;\n \n-        ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, nonblanket_impls);\n+        ich::hash_stable_trait_impls(hcx, hasher, blanket_impls, non_blanket_impls);\n     }\n }"}, {"sha": "c930b3841205c3d83ecdc2b30228554794b43305", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca2c55d264183cb61b9499fd9acbfb9997b9b85f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2c55d264183cb61b9499fd9acbfb9997b9b85f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=ca2c55d264183cb61b9499fd9acbfb9997b9b85f", "patch": "@@ -50,7 +50,7 @@ impl ChildrenExt for Children {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n-            self.nonblanket_impls.entry(st).or_default().push(impl_def_id)\n+            self.non_blanket_impls.entry(st).or_default().push(impl_def_id)\n         } else {\n             debug!(\"insert_blindly: impl_def_id={:?} st=None\", impl_def_id);\n             self.blanket_impls.push(impl_def_id)\n@@ -65,7 +65,7 @@ impl ChildrenExt for Children {\n         let vec: &mut Vec<DefId>;\n         if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n             debug!(\"remove_existing: impl_def_id={:?} st={:?}\", impl_def_id, st);\n-            vec = self.nonblanket_impls.get_mut(&st).unwrap();\n+            vec = self.non_blanket_impls.get_mut(&st).unwrap();\n         } else {\n             debug!(\"remove_existing: impl_def_id={:?} st=None\", impl_def_id);\n             vec = &mut self.blanket_impls;\n@@ -216,15 +216,15 @@ impl ChildrenExt for Children {\n }\n \n fn iter_children(children: &mut Children) -> impl Iterator<Item = DefId> + '_ {\n-    let nonblanket = children.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n+    let nonblanket = children.non_blanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n     children.blanket_impls.iter().chain(nonblanket).cloned()\n }\n \n fn filtered_children(\n     children: &mut Children,\n     st: SimplifiedType,\n ) -> impl Iterator<Item = DefId> + '_ {\n-    let nonblanket = children.nonblanket_impls.entry(st).or_default().iter();\n+    let nonblanket = children.non_blanket_impls.entry(st).or_default().iter();\n     children.blanket_impls.iter().chain(nonblanket).cloned()\n }\n "}]}