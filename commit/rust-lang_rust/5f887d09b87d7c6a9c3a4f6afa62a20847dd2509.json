{"sha": "5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmODg3ZDA5Yjg3ZDdjNmE5YzNhNGY2YWZhNjJhMjA4NDdkZDI1MDk=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-30T18:35:30Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-03-31T19:06:27Z"}, "message": "Add if_chain lints", "tree": {"sha": "f796435724126cdc72c585d6c6006e3f094a0266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f796435724126cdc72c585d6c6006e3f094a0266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "html_url": "https://github.com/rust-lang/rust/commit/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "487c2e8d4e543a025597f5727d99d77a72cfc7b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/487c2e8d4e543a025597f5727d99d77a72cfc7b6", "html_url": "https://github.com/rust-lang/rust/commit/487c2e8d4e543a025597f5727d99d77a72cfc7b6"}], "stats": {"total": 358, "additions": 353, "deletions": 5}, "files": [{"sha": "f5941977dd12428959eb08cf5b66c139bee41c07", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "patch": "@@ -550,6 +550,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::DEFAULT_LINT,\n         #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::IF_CHAIN_STYLE,\n+        #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::INTERNING_DEFINED_SYMBOL,\n         #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::INVALID_PATHS,\n@@ -1026,6 +1028,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n         store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n         store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n+        store.register_late_pass(|| box utils::internal_lints::IfChainStyle);\n         store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n         store.register_late_pass(|| box utils::internal_lints::InterningDefinedSymbol::default());\n         store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n@@ -1442,6 +1445,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::DEFAULT_LINT),\n+        LintId::of(&utils::internal_lints::IF_CHAIN_STYLE),\n         LintId::of(&utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n         LintId::of(&utils::internal_lints::INVALID_PATHS),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),"}, {"sha": "266b88beeec024c72134ea17a983b313a778bd60", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 172, "deletions": 5, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "patch": "@@ -1,8 +1,10 @@\n use crate::consts::{constant_simple, Constant};\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::match_type;\n-use clippy_utils::{is_expn_of, match_def_path, match_qpath, method_calls, path_to_res, paths, run_lints, SpanlessEq};\n+use clippy_utils::{\n+    is_else_clause, is_expn_of, match_def_path, match_qpath, method_calls, path_to_res, paths, run_lints, SpanlessEq,\n+};\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, ModKind, NodeId};\n use rustc_ast::visit::FnKind;\n@@ -14,15 +16,17 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind, UnOp,\n+    BinOpKind, Block, Crate, Expr, ExprKind, HirId, Item, Local, MatchSource, MutTy, Mutability, Node, Path, Stmt,\n+    StmtKind, Ty, TyKind, UnOp,\n };\n-use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n-use rustc_span::source_map::{Span, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{Symbol, SymbolStr};\n+use rustc_span::{BytePos, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n use std::borrow::{Borrow, Cow};\n@@ -297,6 +301,13 @@ declare_clippy_lint! {\n     \"unnecessary conversion between Symbol and string\"\n }\n \n+declare_clippy_lint! {\n+    /// Finds unidiomatic usage of `if_chain!`\n+    pub IF_CHAIN_STYLE,\n+    internal,\n+    \"non-idiomatic `if_chain!` usage\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -1063,3 +1074,159 @@ impl<'tcx> SymbolStrExpr<'tcx> {\n         }\n     }\n }\n+\n+declare_lint_pass!(IfChainStyle => [IF_CHAIN_STYLE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for IfChainStyle {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n+        let (local, after, if_chain_span) = if_chain! {\n+            if let [Stmt { kind: StmtKind::Local(local), .. }, after @ ..] = block.stmts;\n+            if let Some(if_chain_span) = is_expn_of(block.span, \"if_chain\");\n+            then { (local, after, if_chain_span) } else { return }\n+        };\n+        if is_first_if_chain_expr(cx, block.hir_id, if_chain_span) {\n+            span_lint(\n+                cx,\n+                IF_CHAIN_STYLE,\n+                if_chain_local_span(cx, local, if_chain_span),\n+                \"`let` expression should be above the `if_chain!`\",\n+            );\n+        } else if local.span.ctxt() == block.span.ctxt() && is_if_chain_then(after, block.expr, if_chain_span) {\n+            span_lint(\n+                cx,\n+                IF_CHAIN_STYLE,\n+                if_chain_local_span(cx, local, if_chain_span),\n+                \"`let` expression should be inside `then { .. }`\",\n+            )\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        let (cond, then, els) = match expr.kind {\n+            ExprKind::If(cond, then, els) => (Some(cond), then, els.is_some()),\n+            ExprKind::Match(\n+                _,\n+                [arm, ..],\n+                MatchSource::IfLetDesugar {\n+                    contains_else_clause: els,\n+                },\n+            ) => (None, arm.body, els),\n+            _ => return,\n+        };\n+        let then_block = match then.kind {\n+            ExprKind::Block(block, _) => block,\n+            _ => return,\n+        };\n+        let if_chain_span = is_expn_of(expr.span, \"if_chain\");\n+        if !els {\n+            check_nested_if_chains(cx, expr, then_block, if_chain_span);\n+        }\n+        let if_chain_span = match if_chain_span {\n+            None => return,\n+            Some(span) => span,\n+        };\n+        // check for `if a && b;`\n+        if_chain! {\n+            if let Some(cond) = cond;\n+            if let ExprKind::Binary(op, _, _) = cond.kind;\n+            if op.node == BinOpKind::And;\n+            if cx.sess().source_map().is_multiline(cond.span);\n+            then {\n+                span_lint(cx, IF_CHAIN_STYLE, cond.span, \"`if a && b;` should be `if a; if b;`\");\n+            }\n+        }\n+        if is_first_if_chain_expr(cx, expr.hir_id, if_chain_span)\n+            && is_if_chain_then(then_block.stmts, then_block.expr, if_chain_span)\n+        {\n+            span_lint(cx, IF_CHAIN_STYLE, expr.span, \"`if_chain!` only has one `if`\")\n+        }\n+    }\n+}\n+\n+fn check_nested_if_chains(\n+    cx: &LateContext<'_>,\n+    if_expr: &Expr<'_>,\n+    then_block: &Block<'_>,\n+    if_chain_span: Option<Span>,\n+) {\n+    #[rustfmt::skip]\n+    let (head, tail) = match *then_block {\n+        Block { stmts, expr: Some(tail), .. } => (stmts, tail),\n+        Block {\n+            stmts: &[\n+                ref head @ ..,\n+                Stmt { kind: StmtKind::Expr(tail) | StmtKind::Semi(tail), .. }\n+            ],\n+            ..\n+        } => (head, tail),\n+        _ => return,\n+    };\n+    if_chain! {\n+        if matches!(tail.kind,\n+            ExprKind::If(_, _, None)\n+            | ExprKind::Match(.., MatchSource::IfLetDesugar { contains_else_clause: false }));\n+        let sm = cx.sess().source_map();\n+        if head\n+            .iter()\n+            .all(|stmt| matches!(stmt.kind, StmtKind::Local(..)) && !sm.is_multiline(stmt.span));\n+        if if_chain_span.is_some() || !is_else_clause(cx.tcx, if_expr);\n+        then {} else { return }\n+    }\n+    let (span, msg) = match (if_chain_span, is_expn_of(tail.span, \"if_chain\")) {\n+        (None, Some(_)) => (if_expr.span, \"this `if` can be part of the inner `if_chain!`\"),\n+        (Some(_), None) => (tail.span, \"this `if` can be part of the outer `if_chain!`\"),\n+        (Some(a), Some(b)) if a != b => (b, \"this `if_chain!` can be merged with the outer `if_chain!`\"),\n+        _ => return,\n+    };\n+    span_lint_and_then(cx, IF_CHAIN_STYLE, span, msg, |diag| {\n+        let (span, msg) = match head {\n+            [] => return,\n+            [stmt] => (stmt.span, \"this `let` statement can also be in the `if_chain!`\"),\n+            [a, .., b] => (\n+                a.span.to(b.span),\n+                \"these `let` statements can also be in the `if_chain!`\",\n+            ),\n+        };\n+        diag.span_help(span, msg);\n+    });\n+}\n+\n+fn is_first_if_chain_expr(cx: &LateContext<'_>, hir_id: HirId, if_chain_span: Span) -> bool {\n+    cx.tcx\n+        .hir()\n+        .parent_iter(hir_id)\n+        .find(|(_, node)| {\n+            #[rustfmt::skip]\n+            !matches!(node, Node::Expr(Expr { kind: ExprKind::Block(..), .. }) | Node::Stmt(_))\n+        })\n+        .map_or(false, |(id, _)| {\n+            is_expn_of(cx.tcx.hir().span(id), \"if_chain\") != Some(if_chain_span)\n+        })\n+}\n+\n+/// Checks a trailing slice of statements and expression of a `Block` to see if they are part\n+/// of the `then {..}` portion of an `if_chain!`\n+fn is_if_chain_then(stmts: &[Stmt<'_>], expr: Option<&Expr<'_>>, if_chain_span: Span) -> bool {\n+    let span = if let [stmt, ..] = stmts {\n+        stmt.span\n+    } else if let Some(expr) = expr {\n+        expr.span\n+    } else {\n+        // empty `then {}`\n+        return true;\n+    };\n+    is_expn_of(span, \"if_chain\").map_or(true, |span| span != if_chain_span)\n+}\n+\n+/// Creates a `Span` for `let x = ..;` in an `if_chain!` call.\n+fn if_chain_local_span(cx: &LateContext<'_>, local: &Local<'_>, if_chain_span: Span) -> Span {\n+    let mut span = local.pat.span;\n+    if let Some(init) = local.init {\n+        span = span.to(init.span);\n+    }\n+    span.adjust(if_chain_span.ctxt().outer_expn());\n+    let sm = cx.sess().source_map();\n+    let span = sm.span_extend_to_prev_str(span, \"let\", false);\n+    let span = sm.span_extend_to_next_char(span, ';', false);\n+    Span::new(span.lo() - BytePos(3), span.hi() + BytePos(1), span.ctxt())\n+}"}, {"sha": "8e871707aa8f36953805aaf9780309ea45995f59", "filename": "tests/ui-internal/if_chain_style.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/tests%2Fui-internal%2Fif_chain_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/tests%2Fui-internal%2Fif_chain_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fif_chain_style.rs?ref=5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "patch": "@@ -0,0 +1,92 @@\n+#![warn(clippy::if_chain_style)]\n+#![allow(clippy::no_effect)]\n+\n+extern crate if_chain;\n+\n+use if_chain::if_chain;\n+\n+fn main() {\n+    if true {\n+        let x = \"\";\n+        // `if_chain!` inside `if`\n+        if_chain! {\n+            if true;\n+            if true;\n+            then {}\n+        }\n+    }\n+    if_chain! {\n+        if true\n+            // multi-line AND'ed conditions\n+            && false;\n+        if let Some(1) = Some(1);\n+        // `let` before `then`\n+        let x = \"\";\n+        then {\n+            ();\n+        }\n+    }\n+    if_chain! {\n+        // single `if` condition\n+        if true;\n+        then {\n+            let x = \"\";\n+            // nested if\n+            if true {}\n+        }\n+    }\n+    if_chain! {\n+        // starts with `let ..`\n+        let x = \"\";\n+        if let Some(1) = Some(1);\n+        then {\n+            let x = \"\";\n+            let x = \"\";\n+            // nested if_chain!\n+            if_chain! {\n+                if true;\n+                if true;\n+                then {}\n+            }\n+        }\n+    }\n+}\n+\n+fn negative() {\n+    if true {\n+        ();\n+        if_chain! {\n+            if true;\n+            if true;\n+            then { (); }\n+        }\n+    }\n+    if_chain! {\n+        if true;\n+        let x = \"\";\n+        if true;\n+        then { (); }\n+    }\n+    if_chain! {\n+        if true;\n+        if true;\n+        then {\n+            if true { 1 } else { 2 }\n+        } else {\n+            3\n+        }\n+    };\n+    if true {\n+        if_chain! {\n+            if true;\n+            if true;\n+            then {}\n+        }\n+    } else if false {\n+        if_chain! {\n+            if true;\n+            if false;\n+            then {}\n+        }\n+    }\n+}"}, {"sha": "b53c3ea05da9f20d91195349d78029390279cc26", "filename": "tests/ui-internal/if_chain_style.stderr", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/tests%2Fui-internal%2Fif_chain_style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f887d09b87d7c6a9c3a4f6afa62a20847dd2509/tests%2Fui-internal%2Fif_chain_style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fif_chain_style.stderr?ref=5f887d09b87d7c6a9c3a4f6afa62a20847dd2509", "patch": "@@ -0,0 +1,85 @@\n+error: this `if` can be part of the inner `if_chain!`\n+  --> $DIR/if_chain_style.rs:9:5\n+   |\n+LL | /     if true {\n+LL | |         let x = \"\";\n+LL | |         // `if_chain!` inside `if`\n+LL | |         if_chain! {\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::if-chain-style` implied by `-D warnings`\n+help: this `let` statement can also be in the `if_chain!`\n+  --> $DIR/if_chain_style.rs:10:9\n+   |\n+LL |         let x = \"\";\n+   |         ^^^^^^^^^^^\n+\n+error: `if a && b;` should be `if a; if b;`\n+  --> $DIR/if_chain_style.rs:19:12\n+   |\n+LL |           if true\n+   |  ____________^\n+LL | |             // multi-line AND'ed conditions\n+LL | |             && false;\n+   | |____________________^\n+\n+error: `let` expression should be inside `then { .. }`\n+  --> $DIR/if_chain_style.rs:24:9\n+   |\n+LL |         let x = \"\";\n+   |         ^^^^^^^^^^^\n+\n+error: this `if` can be part of the outer `if_chain!`\n+  --> $DIR/if_chain_style.rs:35:13\n+   |\n+LL |             if true {}\n+   |             ^^^^^^^^^^\n+   |\n+help: this `let` statement can also be in the `if_chain!`\n+  --> $DIR/if_chain_style.rs:33:13\n+   |\n+LL |             let x = \"\";\n+   |             ^^^^^^^^^^^\n+\n+error: `if_chain!` only has one `if`\n+  --> $DIR/if_chain_style.rs:29:5\n+   |\n+LL | /     if_chain! {\n+LL | |         // single `if` condition\n+LL | |         if true;\n+LL | |         then {\n+...  |\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: `let` expression should be above the `if_chain!`\n+  --> $DIR/if_chain_style.rs:40:9\n+   |\n+LL |         let x = \"\";\n+   |         ^^^^^^^^^^^\n+\n+error: this `if_chain!` can be merged with the outer `if_chain!`\n+  --> $DIR/if_chain_style.rs:46:13\n+   |\n+LL | /             if_chain! {\n+LL | |                 if true;\n+LL | |                 if true;\n+LL | |                 then {}\n+LL | |             }\n+   | |_____________^\n+   |\n+help: these `let` statements can also be in the `if_chain!`\n+  --> $DIR/if_chain_style.rs:43:13\n+   |\n+LL | /             let x = \"\";\n+LL | |             let x = \"\";\n+   | |_______________________^\n+\n+error: aborting due to 7 previous errors\n+"}]}