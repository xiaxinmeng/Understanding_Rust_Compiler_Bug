{"sha": "10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYjUzNmZjNzEzM2ViNmRjYmRlM2ZhMjVkZmQwYjZjODlhNWUzMmM=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-11T20:26:29Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-11T20:26:29Z"}, "message": "ExprUseVisitor: treat ByValue use of Copy types as ImmBorrow", "tree": {"sha": "2e1e0a3420bfa6e3da71045df93a8f221cff3097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1e0a3420bfa6e3da71045df93a8f221cff3097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c", "html_url": "https://github.com/rust-lang/rust/commit/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a387d6cf5961a7f2dcb671da3147bd413355c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a387d6cf5961a7f2dcb671da3147bd413355c4", "html_url": "https://github.com/rust-lang/rust/commit/e9a387d6cf5961a7f2dcb671da3147bd413355c4"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "7e3bc785c07c5318031a557489903b8ceddef185", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c", "patch": "@@ -1535,10 +1535,9 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             place_with_id, diag_expr_id, mode\n         );\n \n-        // Copy type being used as ByValue are equivalent to ImmBorrow and don't require any\n-        // escalation.\n+        // Copy types in ByValue scenarios need should be treated as ImmBorrows\n         match mode {\n-            euv::ConsumeMode::Copy => return,\n+            euv::ConsumeMode::Copy => unreachable!(),\n             euv::ConsumeMode::Move => {}\n         };\n "}, {"sha": "bc34525662f5d2441be12878319be02b4298c121", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=10b536fc7133eb6dcbde3fa25dfd0b6c89a5e32c", "patch": "@@ -144,7 +144,13 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n \n         let mode = copy_or_move(&self.mc, place_with_id);\n-        self.delegate.consume(place_with_id, diag_expr_id, mode);\n+\n+        match mode {\n+            ConsumeMode::Move => self.delegate.consume(place_with_id, diag_expr_id, mode),\n+            ConsumeMode::Copy => {\n+                self.delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n+            }\n+        }\n     }\n \n     fn consume_exprs(&mut self, exprs: &[hir::Expr<'_>]) {\n@@ -653,9 +659,18 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             delegate.borrow(place, discr_place.hir_id, bk);\n                         }\n                         ty::BindByValue(..) => {\n-                            let mode = copy_or_move(mc, &place);\n                             debug!(\"walk_pat binding consuming pat\");\n-                            delegate.consume(place, discr_place.hir_id, mode);\n+                            let mode = copy_or_move(mc, &place);\n+                            match mode {\n+                                ConsumeMode::Move => {\n+                                    delegate.consume(place, discr_place.hir_id, mode)\n+                                }\n+                                ConsumeMode::Copy => delegate.borrow(\n+                                    place,\n+                                    discr_place.hir_id,\n+                                    ty::BorrowKind::ImmBorrow,\n+                                ),\n+                            }\n                         }\n                     }\n                 }\n@@ -773,8 +788,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n                     match capture_info.capture_kind {\n                         ty::UpvarCapture::ByValue(_) => {\n-                            let mode = copy_or_move(&self.mc, &place_with_id);\n-                            self.delegate.consume(&place_with_id, place_with_id.hir_id, mode);\n+                            self.delegate_consume(&place_with_id, place_with_id.hir_id);\n                         }\n                         ty::UpvarCapture::ByRef(upvar_borrow) => {\n                             self.delegate.borrow("}]}