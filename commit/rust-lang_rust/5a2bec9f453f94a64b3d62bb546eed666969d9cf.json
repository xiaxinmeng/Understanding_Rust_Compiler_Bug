{"sha": "5a2bec9f453f94a64b3d62bb546eed666969d9cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMmJlYzlmNDUzZjk0YTY0YjNkNjJiYjU0NmVlZDY2Njk2OWQ5Y2Y=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-02-18T12:23:20Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-02-22T09:40:49Z"}, "message": "impl_or_trait_obligations: deduplicate obligations", "tree": {"sha": "2f785d507fe18daa8f1c65b3c0acba466eb1a100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f785d507fe18daa8f1c65b3c0acba466eb1a100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a2bec9f453f94a64b3d62bb546eed666969d9cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2bec9f453f94a64b3d62bb546eed666969d9cf", "html_url": "https://github.com/rust-lang/rust/commit/5a2bec9f453f94a64b3d62bb546eed666969d9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a2bec9f453f94a64b3d62bb546eed666969d9cf/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619ad716d1fad162d4cbc41f2b0ecf1b48181da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/619ad716d1fad162d4cbc41f2b0ecf1b48181da6", "html_url": "https://github.com/rust-lang/rust/commit/619ad716d1fad162d4cbc41f2b0ecf1b48181da6"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "2bc396eb04e750a704bdf7898b3350ec5580efe8", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a2bec9f453f94a64b3d62bb546eed666969d9cf/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2bec9f453f94a64b3d62bb546eed666969d9cf/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5a2bec9f453f94a64b3d62bb546eed666969d9cf", "patch": "@@ -73,7 +73,7 @@ pub enum IntercrateMode {\n /// either identifying an `impl` (e.g., `impl Eq for int`) that\n /// provides the required vtable, or else finding a bound that is in\n /// scope. The eventual result is usually a `Selection` (defined below).\n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, Hash)]\n pub struct Obligation<'tcx, T> {\n     pub cause: ObligationCause<'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n@@ -85,7 +85,7 @@ pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n /// Why did we incur this obligation? Used for error reporting.\n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct ObligationCause<'tcx> {\n     pub span: Span,\n \n@@ -113,7 +113,7 @@ impl<'tcx> ObligationCause<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObligationCauseCode<'tcx> {\n     /// Not well classified or should be obvious from span.\n     MiscObligation,\n@@ -215,7 +215,7 @@ pub enum ObligationCauseCode<'tcx> {\n     BlockTailExpression(ast::NodeId),\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DerivedObligationCause<'tcx> {\n     /// The trait reference of the parent obligation that led to the\n     /// current obligation. Note that only trait obligations lead to"}, {"sha": "90162c3deca024e7fa14a80dfe75a929c49cf135", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a2bec9f453f94a64b3d62bb546eed666969d9cf/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2bec9f453f94a64b3d62bb546eed666969d9cf/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5a2bec9f453f94a64b3d62bb546eed666969d9cf", "patch": "@@ -53,7 +53,7 @@ use std::rc::Rc;\n use syntax::abi::Abi;\n use hir;\n use lint;\n-use util::nodemap::FxHashMap;\n+use util::nodemap::{FxHashMap, FxHashSet};\n \n struct InferredObligationsSnapshotVecDelegate<'tcx> {\n     phantom: PhantomData<&'tcx i32>,\n@@ -3282,7 +3282,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // that order.\n         let predicates = tcx.predicates_of(def_id);\n         assert_eq!(predicates.parent, None);\n-        let predicates = predicates.predicates.iter().flat_map(|predicate| {\n+        let mut predicates: Vec<_> = predicates.predicates.iter().flat_map(|predicate| {\n             let predicate = normalize_with_depth(self, param_env, cause.clone(), recursion_depth,\n                                                  &predicate.subst(tcx, substs));\n             predicate.obligations.into_iter().chain(\n@@ -3293,6 +3293,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     predicate: predicate.value\n                 }))\n         }).collect();\n+        // We are performing deduplication here to avoid exponential blowups\n+        // (#38528) from happening, but the real cause of the duplication is\n+        // unknown. What we know is that the deduplication avoids exponential\n+        // amount of predicates being propogated when processing deeply nested\n+        // types.\n+        let mut seen = FxHashSet();\n+        predicates.retain(|i| seen.insert(i.clone()));\n         self.infcx().plug_leaks(skol_map, snapshot, predicates)\n     }\n }"}, {"sha": "3ab2cd274b90ea98ad80a8d4998a9a0f6e00a6ec", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2bec9f453f94a64b3d62bb546eed666969d9cf/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2bec9f453f94a64b3d62bb546eed666969d9cf/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5a2bec9f453f94a64b3d62bb546eed666969d9cf", "patch": "@@ -1504,7 +1504,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for AdtDef {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n pub enum AdtKind { Struct, Union, Enum }\n \n bitflags! {"}]}