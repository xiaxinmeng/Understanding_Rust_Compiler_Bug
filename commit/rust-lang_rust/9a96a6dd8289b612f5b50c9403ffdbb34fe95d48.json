{"sha": "9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "node_id": "C_kwDOAAsO6NoAKDlhOTZhNmRkODI4OWI2MTJmNWI1MGM5NDAzZmZkYmIzNGZlOTVkNDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-28T16:25:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T16:25:47Z"}, "message": "Rollup merge of #104933 - RalfJung:interpret-partial-ord, r=oli-obk\n\ninterpret: remove PartialOrd from a bunch of types that do not have or need a sensible order\n\nr? `@oli-obk`", "tree": {"sha": "e7eb0b9bff5454a26b81f8075932bad0bb12a12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7eb0b9bff5454a26b81f8075932bad0bb12a12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhOELCRBK7hj4Ov3rIwAAX5sIABeO9OlMn/2Ump2I0Cxt04v+\nP1pRSRxf/7yNsAhatqRoXRDh/n+FHmAo2xDMmMhv6qXlxh9MwPEpv48Ndf6whEl/\nlKPBrdtGPVDZUiBTI8bMGNla+b7wS43J8Nt6sof8tHnmzxAHxLsP/Oyb8Iv/T37t\n8XvWS5vE4txtL7h09h1R0rd4wgM7K8DwzFl6nRJQQLtXiL/OgPK6YRK55ph/acq/\nBPqyJEMzw8R6b1134M2+yV0ioxAGwp2mFWml5tqugVGO1WJ/8//f6NkQ6WPLTRUF\nACHagAHwDhrONmF2xR+7uLV0U96Sc3+6DLHbNhyJyfgfvt75uE1MNXwbM38ki+U=\n=kJyo\n-----END PGP SIGNATURE-----\n", "payload": "tree e7eb0b9bff5454a26b81f8075932bad0bb12a12c\nparent 069f219d4052bb8716aa3994f8c2a0f2c90c2c03\nparent 77071f7e3ac76ae6734aa3ce7cfc964b3da4939f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669652747 +0100\ncommitter GitHub <noreply@github.com> 1669652747 +0100\n\nRollup merge of #104933 - RalfJung:interpret-partial-ord, r=oli-obk\n\ninterpret: remove PartialOrd from a bunch of types that do not have or need a sensible order\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "html_url": "https://github.com/rust-lang/rust/commit/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069f219d4052bb8716aa3994f8c2a0f2c90c2c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/069f219d4052bb8716aa3994f8c2a0f2c90c2c03", "html_url": "https://github.com/rust-lang/rust/commit/069f219d4052bb8716aa3994f8c2a0f2c90c2c03"}, {"sha": "77071f7e3ac76ae6734aa3ce7cfc964b3da4939f", "url": "https://api.github.com/repos/rust-lang/rust/commits/77071f7e3ac76ae6734aa3ce7cfc964b3da4939f", "html_url": "https://github.com/rust-lang/rust/commit/77071f7e3ac76ae6734aa3ce7cfc964b3da4939f"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "5f911d5884a3353019f39ee10521beaab33bdcd1", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "patch": "@@ -36,7 +36,7 @@ pub use init_mask::{InitChunk, InitChunkIter};\n /// module provides higher-level access.\n // Note: for performance reasons when interning, some of the `Allocation` fields can be partially\n // hashed. (see the `Hash` impl below for more details), so the impl is not derived.\n-#[derive(Clone, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Clone, Eq, PartialEq, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub struct Allocation<Prov: Provenance = AllocId, Extra = ()> {\n     /// The actual bytes of the allocation.\n@@ -108,7 +108,7 @@ impl hash::Hash for Allocation {\n /// Here things are different because only const allocations are interned. This\n /// means that both the inner type (`Allocation`) and the outer type\n /// (`ConstAllocation`) are used quite a bit.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, HashStable)]\n #[rustc_pass_by_value]\n pub struct ConstAllocation<'tcx>(pub Interned<'tcx, Allocation>);\n "}, {"sha": "82e9a961a2bfb73a3b703917b29231d4588e6911", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/init_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs?ref=9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "patch": "@@ -12,7 +12,7 @@ type Block = u64;\n /// is initialized. If it is `false` the byte is uninitialized.\n // Note: for performance reasons when interning, some of the `InitMask` fields can be partially\n // hashed. (see the `Hash` impl below for more details), so the impl is not derived.\n-#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n+#[derive(Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub struct InitMask {\n     blocks: Vec<Block>,"}, {"sha": "ddd3f394358a311d059dae14a971f204308b71a6", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/provenance_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs?ref=9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "patch": "@@ -10,7 +10,7 @@ use super::{alloc_range, AllocError, AllocId, AllocRange, AllocResult, Provenanc\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n /// Stores the provenance information of pointers stored in memory.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n #[derive(HashStable)]\n pub struct ProvenanceMap<Prov = AllocId> {\n     /// Provenance in this map applies from the given offset for an entire pointer-size worth of"}, {"sha": "9c270ba1ec179939e18834ca0f773c9efbea4836", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "patch": "@@ -173,7 +173,7 @@ impl Provenance for AllocId {\n /// Represents a pointer in the Miri engine.\n ///\n /// Pointers are \"tagged\" with provenance information; typically the `AllocId` they belong to.\n-#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, TyEncodable, TyDecodable, Hash)]\n+#[derive(Copy, Clone, Eq, PartialEq, TyEncodable, TyDecodable, Hash)]\n #[derive(HashStable)]\n pub struct Pointer<Prov = AllocId> {\n     pub(super) offset: Size, // kept private to avoid accidental misinterpretation (meaning depends on `Prov` type)"}, {"sha": "e6636e50e6e7ab0a1acf50e90cf57ed963c70c6a", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "patch": "@@ -28,7 +28,7 @@ pub struct ConstAlloc<'tcx> {\n \n /// Represents a constant value in Rust. `Scalar` and `Slice` are optimizations for\n /// array length computations, enum discriminants and the pattern matching logic.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Hash)]\n #[derive(HashStable, Lift)]\n pub enum ConstValue<'tcx> {\n     /// Used only for types with `layout::abi::Scalar` ABI.\n@@ -110,7 +110,7 @@ impl<'tcx> ConstValue<'tcx> {\n ///\n /// These variants would be private if there was a convenient way to achieve that in Rust.\n /// Do *not* match on a `Scalar`! Use the various `to_*` methods instead.\n-#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, TyEncodable, TyDecodable, Hash)]\n+#[derive(Clone, Copy, Eq, PartialEq, TyEncodable, TyDecodable, Hash)]\n #[derive(HashStable)]\n pub enum Scalar<Prov = AllocId> {\n     /// The raw bytes of a simple value."}, {"sha": "cfbeb347cabb6ddd1a85af6899475869f7c190c2", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "patch": "@@ -158,7 +158,7 @@ impl ThreadClockSet {\n \n /// Error returned by finding a data race\n /// should be elaborated upon.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct DataRace;\n \n /// Externally stored memory cell clocks"}]}