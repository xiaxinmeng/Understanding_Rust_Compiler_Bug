{"sha": "f3d9df54ee682d0b76909d27938b30c51ca5ec70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZDlkZjU0ZWU2ODJkMGI3NjkwOWQyNzkzOGIzMGM1MWNhNWVjNzA=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-19T03:51:39Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-13T03:25:50Z"}, "message": "Suggest `Variant(..)` if all of the mentioned fields are `_`", "tree": {"sha": "495a604937423119d89d260d64ee29b28b91eae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495a604937423119d89d260d64ee29b28b91eae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d9df54ee682d0b76909d27938b30c51ca5ec70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d9df54ee682d0b76909d27938b30c51ca5ec70", "html_url": "https://github.com/rust-lang/rust/commit/f3d9df54ee682d0b76909d27938b30c51ca5ec70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d9df54ee682d0b76909d27938b30c51ca5ec70/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe61a79cc5d26a0843b7169d1c95fbb3cbda0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe61a79cc5d26a0843b7169d1c95fbb3cbda0ba", "html_url": "https://github.com/rust-lang/rust/commit/5fe61a79cc5d26a0843b7169d1c95fbb3cbda0ba"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "474aed39eb2fd16ec97235c13c5b548b96a0dd0a", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f3d9df54ee682d0b76909d27938b30c51ca5ec70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d9df54ee682d0b76909d27938b30c51ca5ec70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=f3d9df54ee682d0b76909d27938b30c51ca5ec70", "patch": "@@ -20,7 +20,6 @@ use rustc_trait_selection::traits::{ObligationCause, Pattern};\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n-use std::iter;\n \n use super::report_unexpected_variant_res;\n \n@@ -1048,26 +1047,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 pat_span.with_hi(pat_span.hi() - BytePos(1)).shrink_to_hi()\n             };\n+            let all_fields_span = match subpats {\n+                [] => after_fields_span,\n+                [field] => field.span,\n+                [first, .., last] => first.span.to(last.span),\n+            };\n+\n+            // Check if all the fields in the pattern are wildcards.\n+            let all_wildcards = subpats.iter().all(|pat| matches!(pat.kind, PatKind::Wild));\n \n             let mut wildcard_sugg = vec![\"_\"; fields.len() - subpats.len()].join(\", \");\n             if !subpats.is_empty() {\n                 wildcard_sugg = String::from(\", \") + &wildcard_sugg;\n             }\n \n-            let rest_sugg = if subpats.is_empty() { \"..\".to_owned() } else { \", ..\".to_owned() };\n-\n             err.span_suggestion(\n                 after_fields_span,\n                 \"use `_` to explicitly ignore each field\",\n                 wildcard_sugg,\n                 Applicability::MaybeIncorrect,\n             );\n-            err.span_suggestion(\n-                after_fields_span,\n-                \"use `..` to ignore all unmentioned fields\",\n-                rest_sugg,\n-                Applicability::MaybeIncorrect,\n-            );\n+\n+            if subpats.is_empty() || all_wildcards {\n+                err.span_suggestion(\n+                    all_fields_span,\n+                    \"use `..` to ignore all unmentioned fields\",\n+                    String::from(\"..\"),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else {\n+                err.span_suggestion(\n+                    after_fields_span,\n+                    \"use `..` to ignore all unmentioned fields\",\n+                    String::from(\", ..\"),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n         }\n \n         err.emit();"}, {"sha": "dd1fbbbd3bbe56981825366c99c1e0b630e6c1bd", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3d9df54ee682d0b76909d27938b30c51ca5ec70/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3d9df54ee682d0b76909d27938b30c51ca5ec70/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr?ref=f3d9df54ee682d0b76909d27938b30c51ca5ec70", "patch": "@@ -38,8 +38,8 @@ LL |     TupleStruct(_, _) = TupleStruct(1, 2);\n    |                  ^^^\n help: use `..` to ignore all unmentioned fields\n    |\n-LL |     TupleStruct(_, ..) = TupleStruct(1, 2);\n-   |                  ^^^^\n+LL |     TupleStruct(..) = TupleStruct(1, 2);\n+   |                 ^^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/tuple_struct_destructure_fail.rs:34:5\n@@ -65,8 +65,8 @@ LL |     Enum::SingleVariant(_, _) = Enum::SingleVariant(1, 2);\n    |                          ^^^\n help: use `..` to ignore all unmentioned fields\n    |\n-LL |     Enum::SingleVariant(_, ..) = Enum::SingleVariant(1, 2);\n-   |                          ^^^^\n+LL |     Enum::SingleVariant(..) = Enum::SingleVariant(1, 2);\n+   |                         ^^\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/tuple_struct_destructure_fail.rs:40:12"}, {"sha": "1ee45ca1b1ea68537ab849f6bbfc529b0be9025a", "filename": "src/test/ui/match/match-pattern-field-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3d9df54ee682d0b76909d27938b30c51ca5ec70/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3d9df54ee682d0b76909d27938b30c51ca5ec70/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr?ref=f3d9df54ee682d0b76909d27938b30c51ca5ec70", "patch": "@@ -13,8 +13,8 @@ LL |           Color::Rgb(_, _, _) => { }\n    |                          ^^^\n help: use `..` to ignore all unmentioned fields\n    |\n-LL |           Color::Rgb(_, _, ..) => { }\n-   |                          ^^^^\n+LL |           Color::Rgb(..) => { }\n+   |                      ^^\n \n error: aborting due to previous error\n "}, {"sha": "b7a54026639179326f6230313a2ea11cfbfd1cff", "filename": "src/test/ui/pattern/pat-tuple-underfield.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3d9df54ee682d0b76909d27938b30c51ca5ec70/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3d9df54ee682d0b76909d27938b30c51ca5ec70/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr?ref=f3d9df54ee682d0b76909d27938b30c51ca5ec70", "patch": "@@ -40,8 +40,8 @@ LL |         S(_, _) => {}\n    |            ^^^\n help: use `..` to ignore all unmentioned fields\n    |\n-LL |         S(_, ..) => {}\n-   |            ^^^^\n+LL |         S(..) => {}\n+   |           ^^\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n   --> $DIR/pat-tuple-underfield.rs:20:9\n@@ -94,8 +94,8 @@ LL |         E::S(_, _) => {}\n    |               ^^^\n help: use `..` to ignore all unmentioned fields\n    |\n-LL |         E::S(_, ..) => {}\n-   |               ^^^^\n+LL |         E::S(..) => {}\n+   |              ^^\n \n error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/pat-tuple-underfield.rs:39:9"}]}