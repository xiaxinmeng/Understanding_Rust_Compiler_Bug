{"sha": "29904b9810d60ab3d1e6344e94a680984c574029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTA0Yjk4MTBkNjBhYjNkMWU2MzQ0ZTk0YTY4MDk4NGM1NzQwMjk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-15T05:36:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-15T05:36:30Z"}, "message": "Merge pull request #331 from swgillespie/empty-range\n\nimplement iterating over an empty range lint as described in #330", "tree": {"sha": "9abe92cdd5a8051e1e65f7d1d81aba93b30cfb22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9abe92cdd5a8051e1e65f7d1d81aba93b30cfb22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29904b9810d60ab3d1e6344e94a680984c574029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29904b9810d60ab3d1e6344e94a680984c574029", "html_url": "https://github.com/rust-lang/rust/commit/29904b9810d60ab3d1e6344e94a680984c574029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29904b9810d60ab3d1e6344e94a680984c574029/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b86ebad0e77aa4b87b9b8ae23fce5179d106a079", "url": "https://api.github.com/repos/rust-lang/rust/commits/b86ebad0e77aa4b87b9b8ae23fce5179d106a079", "html_url": "https://github.com/rust-lang/rust/commit/b86ebad0e77aa4b87b9b8ae23fce5179d106a079"}, {"sha": "bc7d25285600f497206d0b1f911534eb038ca81d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7d25285600f497206d0b1f911534eb038ca81d", "html_url": "https://github.com/rust-lang/rust/commit/bc7d25285600f497206d0b1f911534eb038ca81d"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "ae7113579017a6824c1e1003110398730d0e860b", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29904b9810d60ab3d1e6344e94a680984c574029/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/29904b9810d60ab3d1e6344e94a680984c574029/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=29904b9810d60ab3d1e6344e94a680984c574029", "patch": "@@ -6,7 +6,7 @@ A collection of lints that give helpful tips to newbies and catch oversights.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 56 lints included in this crate:\n+There are 57 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -48,6 +48,7 @@ name\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                 | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                 | warn    | using `name @ _` in a pattern\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)               | allow   | using `Result.unwrap()`, which might be better handled\n+[reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)               | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                           | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                             | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n [shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                   | allow   | The name is re-bound without even using the original value"}, {"sha": "9cb9eb30561a5d35a0bf078300801f5e7c8523dc", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29904b9810d60ab3d1e6344e94a680984c574029/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29904b9810d60ab3d1e6344e94a680984c574029/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=29904b9810d60ab3d1e6344e94a680984c574029", "patch": "@@ -122,6 +122,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::EXPLICIT_ITER_LOOP,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n+        loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,\n         matches::MATCH_REF_PATS,"}, {"sha": "286b51ab04ecf67d4b0072b2309d175739bfea16", "filename": "src/loops.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29904b9810d60ab3d1e6344e94a680984c574029/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29904b9810d60ab3d1e6344e94a680984c574029/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=29904b9810d60ab3d1e6344e94a680984c574029", "patch": "@@ -3,6 +3,7 @@ use rustc_front::hir::*;\n use reexport::*;\n use rustc_front::visit::{Visitor, walk_expr};\n use rustc::middle::ty;\n+use consts::{constant_simple, Constant};\n use std::collections::HashSet;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type,\n@@ -25,13 +26,16 @@ declare_lint!{ pub UNUSED_COLLECT, Warn,\n                \"`collect()`ing an iterator without using the result; this is usually better \\\n                 written as a for loop\" }\n \n+declare_lint!{ pub REVERSE_RANGE_LOOP, Warn,\n+               \"Iterating over an empty range, such as `10..0` or `5..5`\" }\n+\n #[derive(Copy, Clone)]\n pub struct LoopsPass;\n \n impl LintPass for LoopsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP, ITER_NEXT_LOOP,\n-                    WHILE_LET_LOOP, UNUSED_COLLECT)\n+                    WHILE_LET_LOOP, UNUSED_COLLECT, REVERSE_RANGE_LOOP)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n@@ -69,6 +73,30 @@ impl LintPass for LoopsPass {\n                 }\n             }\n \n+            // if this for loop is iterating over a two-sided range...\n+            if let ExprRange(Some(ref start_expr), Some(ref stop_expr)) = arg.node {\n+                // ...and both sides are compile-time constant integers...\n+                if let Some(Constant::ConstantInt(start_idx, _)) = constant_simple(start_expr) {\n+                    if let Some(Constant::ConstantInt(stop_idx, _)) = constant_simple(stop_expr) {\n+                        // ...and the start index is greater than the stop index,\n+                        // this loop will never run. This is often confusing for developers\n+                        // who think that this will iterate from the larger value to the\n+                        // smaller value.\n+                        if start_idx > stop_idx {\n+                            span_help_and_lint(cx, REVERSE_RANGE_LOOP, expr.span,\n+                                \"this range is empty so this for loop will never run\",\n+                                &format!(\"Consider using `({}..{}).rev()` if you are attempting to \\\n+                                iterate over this range in reverse\", stop_idx, start_idx));\n+                        } else if start_idx == stop_idx {\n+                            // if they are equal, it's also problematic - this loop\n+                            // will never run.\n+                            span_lint(cx, REVERSE_RANGE_LOOP, expr.span,\n+                                \"this range is empty so this for loop will never run\");\n+                        }\n+                    }\n+                }\n+            }\n+\n             if let ExprMethodCall(ref method, _, ref args) = arg.node {\n                 // just the receiver, no arguments\n                 if args.len() == 1 {\n@@ -126,7 +154,7 @@ impl LintPass for LoopsPass {\n     fn check_stmt(&mut self, cx: &Context, stmt: &Stmt) {\n         if let StmtSemi(ref expr, _) = stmt.node {\n             if let ExprMethodCall(ref method, _, ref args) = expr.node {\n-                if args.len() == 1 && method.node.name == \"collect\" && \n+                if args.len() == 1 && method.node.name == \"collect\" &&\n                         match_trait_method(cx, expr, &[\"core\", \"iter\", \"Iterator\"]) {\n                     span_lint(cx, UNUSED_COLLECT, expr.span, &format!(\n                         \"you are collect()ing an iterator and throwing away the result. \\"}, {"sha": "882373e021673f77ec8cbd7397f02bdae5a24316", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/29904b9810d60ab3d1e6344e94a680984c574029/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29904b9810d60ab3d1e6344e94a680984c574029/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=29904b9810d60ab3d1e6344e94a680984c574029", "patch": "@@ -14,7 +14,7 @@ impl Unrelated {\n     }\n }\n \n-#[deny(needless_range_loop, explicit_iter_loop, iter_next_loop)]\n+#[deny(needless_range_loop, explicit_iter_loop, iter_next_loop, reverse_range_loop)]\n #[deny(unused_collect)]\n #[allow(linkedlist)]\n fn main() {\n@@ -34,6 +34,53 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 10..0 { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..5 { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 { // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (10..0).rev() { // not an error, this is an established idiom for looping backwards on a range\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (10..0).map(|x| x * 2) { // not an error, it can't be known what arbitrary methods do to a range\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in 10..5+4 { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5+2)..(3-1) { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (5+2)..(8-1) { //~ERROR this range is empty so this for loop will never run\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2*2)..(2*3) { // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 { // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+\n+    /*\n+    for i in (10..0).map(|x| x * 2) {\n+        println!(\"{}\", i);\n+    }*/\n+\n     for _v in vec.iter() { } //~ERROR it is more idiomatic to loop over `&vec`\n     for _v in vec.iter_mut() { } //~ERROR it is more idiomatic to loop over `&mut vec`\n "}]}