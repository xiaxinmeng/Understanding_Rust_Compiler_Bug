{"sha": "bbc536d3ac83ad0e3600af2d04701faed63ecd79", "node_id": "C_kwDOAAsO6NoAKGJiYzUzNmQzYWM4M2FkMGUzNjAwYWYyZDA0NzAxZmFlZDYzZWNkNzk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-01T05:15:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-05T19:52:04Z"}, "message": "Emit an error when RTN is used with ty/ct params", "tree": {"sha": "a9d22ca7605bed4e4955d7f0e94faccbc1a00ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d22ca7605bed4e4955d7f0e94faccbc1a00ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc536d3ac83ad0e3600af2d04701faed63ecd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc536d3ac83ad0e3600af2d04701faed63ecd79", "html_url": "https://github.com/rust-lang/rust/commit/bbc536d3ac83ad0e3600af2d04701faed63ecd79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc536d3ac83ad0e3600af2d04701faed63ecd79/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408bbd040613f6776e0a7d05d582c81f4ddc189a", "url": "https://api.github.com/repos/rust-lang/rust/commits/408bbd040613f6776e0a7d05d582c81f4ddc189a", "html_url": "https://github.com/rust-lang/rust/commit/408bbd040613f6776e0a7d05d582c81f4ddc189a"}], "stats": {"total": 100, "additions": 97, "deletions": 3}, "files": [{"sha": "cd6cf36baa44d80866571c224073e91a096a3194", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbc536d3ac83ad0e3600af2d04701faed63ecd79/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bbc536d3ac83ad0e3600af2d04701faed63ecd79/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=bbc536d3ac83ad0e3600af2d04701faed63ecd79", "patch": "@@ -195,6 +195,13 @@ hir_analysis_return_type_notation_conflicting_bound =\n hir_analysis_return_type_notation_equality_bound =\n     return type notation is not allowed to use type equality\n \n+hir_analysis_return_type_notation_illegal_param_const =\n+    return type notation is not allowed for functions that have const parameters\n+    .label = const parameter declared here\n+hir_analysis_return_type_notation_illegal_param_type =\n+    return type notation is not allowed for functions that have type parameters\n+    .label = type parameter declared here\n+\n hir_analysis_return_type_notation_missing_method =\n     cannot find associated function `{$assoc_name}` for `{$ty_name}`\n "}, {"sha": "37f1765796111102970bcb0de74ebf4c80e20a1c", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bbc536d3ac83ad0e3600af2d04701faed63ecd79/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc536d3ac83ad0e3600af2d04701faed63ecd79/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=bbc536d3ac83ad0e3600af2d04701faed63ecd79", "patch": "@@ -1215,6 +1215,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         let projection_ty = if return_type_notation {\n+            let mut emitted_bad_param_err = false;\n             // If we have an method return type bound, then we need to substitute\n             // the method's early bound params with suitable late-bound params.\n             let mut num_bound_vars = candidate.bound_vars().len();\n@@ -1230,16 +1231,35 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             },\n                         )\n                         .into(),\n-                        GenericParamDefKind::Type { .. } => tcx\n-                            .mk_bound(\n+                        GenericParamDefKind::Type { .. } => {\n+                            if !emitted_bad_param_err {\n+                                tcx.sess.emit_err(\n+                                    crate::errors::ReturnTypeNotationIllegalParam::Type {\n+                                        span: path_span,\n+                                        param_span: tcx.def_span(param.def_id),\n+                                    },\n+                                );\n+                                emitted_bad_param_err = true;\n+                            }\n+                            tcx.mk_bound(\n                                 ty::INNERMOST,\n                                 ty::BoundTy {\n                                     var: ty::BoundVar::from_usize(num_bound_vars),\n                                     kind: ty::BoundTyKind::Param(param.def_id, param.name),\n                                 },\n                             )\n-                            .into(),\n+                            .into()\n+                        }\n                         GenericParamDefKind::Const { .. } => {\n+                            if !emitted_bad_param_err {\n+                                tcx.sess.emit_err(\n+                                    crate::errors::ReturnTypeNotationIllegalParam::Const {\n+                                        span: path_span,\n+                                        param_span: tcx.def_span(param.def_id),\n+                                    },\n+                                );\n+                                emitted_bad_param_err = true;\n+                            }\n                             let ty = tcx\n                                 .type_of(param.def_id)\n                                 .no_bound_vars()"}, {"sha": "7dce1272f96df870fe8f2d089d0a577c8de3bcf4", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbc536d3ac83ad0e3600af2d04701faed63ecd79/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc536d3ac83ad0e3600af2d04701faed63ecd79/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=bbc536d3ac83ad0e3600af2d04701faed63ecd79", "patch": "@@ -857,3 +857,21 @@ pub(crate) enum DropImplPolarity {\n         span: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+pub(crate) enum ReturnTypeNotationIllegalParam {\n+    #[diag(hir_analysis_return_type_notation_illegal_param_type)]\n+    Type {\n+        #[primary_span]\n+        span: Span,\n+        #[label]\n+        param_span: Span,\n+    },\n+    #[diag(hir_analysis_return_type_notation_illegal_param_const)]\n+    Const {\n+        #[primary_span]\n+        span: Span,\n+        #[label]\n+        param_span: Span,\n+    },\n+}"}, {"sha": "7871a2fed03b80ae9b12a882d20dcad3cd4605b2", "filename": "tests/ui/async-await/return-type-notation/ty-or-ct-params.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbc536d3ac83ad0e3600af2d04701faed63ecd79/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc536d3ac83ad0e3600af2d04701faed63ecd79/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.rs?ref=bbc536d3ac83ad0e3600af2d04701faed63ecd79", "patch": "@@ -0,0 +1,20 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait, return_type_notation)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+\n+trait Foo {\n+    async fn bar<T>() {}\n+\n+    async fn baz<const N: usize>() {}\n+}\n+\n+fn test<T>()\n+where\n+    T: Foo<bar(): Send, baz(): Send>,\n+    //~^ ERROR return type notation is not allowed for functions that have const parameters\n+    //~| ERROR return type notation is not allowed for functions that have type parameters\n+{\n+}\n+\n+fn main() {}"}, {"sha": "76928c5d7a3e2ac3a1b3e5c36fff092fde29681c", "filename": "tests/ui/async-await/return-type-notation/ty-or-ct-params.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bbc536d3ac83ad0e3600af2d04701faed63ecd79/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbc536d3ac83ad0e3600af2d04701faed63ecd79/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.stderr?ref=bbc536d3ac83ad0e3600af2d04701faed63ecd79", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/ty-or-ct-params.rs:3:31\n+   |\n+LL | #![feature(async_fn_in_trait, return_type_notation)]\n+   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: return type notation is not allowed for functions that have type parameters\n+  --> $DIR/ty-or-ct-params.rs:14:12\n+   |\n+LL |     async fn bar<T>() {}\n+   |                  - type parameter declared here\n+...\n+LL |     T: Foo<bar(): Send, baz(): Send>,\n+   |            ^^^^^^^^^^^\n+\n+error: return type notation is not allowed for functions that have const parameters\n+  --> $DIR/ty-or-ct-params.rs:14:25\n+   |\n+LL |     async fn baz<const N: usize>() {}\n+   |                  -------------- const parameter declared here\n+...\n+LL |     T: Foo<bar(): Send, baz(): Send>,\n+   |                         ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}]}