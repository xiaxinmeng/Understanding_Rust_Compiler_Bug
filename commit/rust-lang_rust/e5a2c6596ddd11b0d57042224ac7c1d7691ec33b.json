{"sha": "e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YTJjNjU5NmRkZDExYjBkNTcwNDIyMjRhYzdjMWQ3NjkxZWMzM2I=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-31T11:37:11Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-03T16:09:21Z"}, "message": "Expand procedural attribute macros", "tree": {"sha": "f0476ad40103b5d3dea60f81fca32c63fe9618d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0476ad40103b5d3dea60f81fca32c63fe9618d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "html_url": "https://github.com/rust-lang/rust/commit/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9c4a59d9a84cd8c734286937439b5cd215be27", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9c4a59d9a84cd8c734286937439b5cd215be27", "html_url": "https://github.com/rust-lang/rust/commit/7f9c4a59d9a84cd8c734286937439b5cd215be27"}], "stats": {"total": 173, "additions": 159, "deletions": 14}, "files": [{"sha": "b43d61d0e8bb74fe8357fa78f4ab3d14febf5eae", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "patch": "@@ -534,6 +534,18 @@ impl Module {\n                                 Some(derive_name.clone()),\n                             )\n                         }\n+                        MacroCallKind::Attr { ast_id, invoc_attr_index, attr_name, .. } => {\n+                            let node = ast_id.to_node(db.upcast());\n+                            let attr =\n+                                node.attrs().nth((*invoc_attr_index) as usize).unwrap_or_else(\n+                                    || panic!(\"cannot find attribute #{}\", invoc_attr_index),\n+                                );\n+                            (\n+                                ast_id.file_id,\n+                                SyntaxNodePtr::from(AstPtr::new(&attr)),\n+                                Some(attr_name.clone()),\n+                            )\n+                        }\n                     };\n                     sink.push(UnresolvedProcMacro {\n                         file,\n@@ -558,7 +570,9 @@ impl Module {\n                             let node = ast_id.to_node(db.upcast());\n                             (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n-                        MacroCallKind::Derive { ast_id, .. } => {\n+                        MacroCallKind::Derive { ast_id, .. }\n+                        | MacroCallKind::Attr { ast_id, .. } => {\n+                            // FIXME: point to the attribute instead, this creates very large diagnostics\n                             let node = ast_id.to_node(db.upcast());\n                             (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }"}, {"sha": "987485accc17c18f8491fd6e3a0f987418329bdd", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "patch": "@@ -55,6 +55,7 @@ use std::{\n     sync::Arc,\n };\n \n+use attr::Attr;\n use base_db::{impl_intern_key, salsa, CrateId};\n use hir_expand::{\n     ast_id_map::FileAstId,\n@@ -768,3 +769,42 @@ fn derive_macro_as_call_id(\n         .into();\n     Ok(res)\n }\n+\n+fn attr_macro_as_call_id(\n+    item_attr: &AstIdWithPath<ast::Item>,\n+    macro_attr: &Attr,\n+    db: &dyn db::DefDatabase,\n+    krate: CrateId,\n+    resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n+) -> Result<MacroCallId, UnresolvedMacro> {\n+    let def: MacroDefId = resolver(item_attr.path.clone())\n+        .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n+    let last_segment = item_attr\n+        .path\n+        .segments()\n+        .last()\n+        .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n+    let mut arg = match &macro_attr.input {\n+        Some(input) => match &**input {\n+            attr::AttrInput::Literal(_) => tt::Subtree::default(),\n+            attr::AttrInput::TokenTree(tt) => tt.clone(),\n+        },\n+        None => tt::Subtree::default(),\n+    };\n+    // The parentheses are always disposed here.\n+    arg.delimiter = None;\n+\n+    let res = def\n+        .as_lazy_macro(\n+            db.upcast(),\n+            krate,\n+            MacroCallKind::Attr {\n+                ast_id: item_attr.ast_id,\n+                attr_name: last_segment.to_string(),\n+                attr_args: arg,\n+                invoc_attr_index: macro_attr.id.ast_index,\n+            },\n+        )\n+        .into();\n+    Ok(res)\n+}"}, {"sha": "874a4ebb1514c1c95e67689e8e5a81eb72df6672", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "patch": "@@ -23,7 +23,7 @@ use syntax::ast;\n \n use crate::{\n     attr::{Attr, AttrId, AttrInput, Attrs},\n-    builtin_attr,\n+    attr_macro_as_call_id, builtin_attr,\n     db::DefDatabase,\n     derive_macro_as_call_id,\n     intern::Interned,\n@@ -223,7 +223,7 @@ struct MacroDirective {\n enum MacroDirectiveKind {\n     FnLike { ast_id: AstIdWithPath<ast::MacroCall>, fragment: FragmentKind },\n     Derive { ast_id: AstIdWithPath<ast::Item>, derive_attr: AttrId },\n-    Attr { ast_id: AstIdWithPath<ast::Item>, attr: AttrId, mod_item: ModItem },\n+    Attr { ast_id: AstIdWithPath<ast::Item>, attr: Attr, mod_item: ModItem },\n }\n \n struct DefData<'a> {\n@@ -419,7 +419,7 @@ impl DefCollector<'_> {\n         let mut unresolved_macros = std::mem::replace(&mut self.unresolved_macros, Vec::new());\n         let pos = unresolved_macros.iter().position(|directive| {\n             if let MacroDirectiveKind::Attr { ast_id, mod_item, attr } = &directive.kind {\n-                self.skip_attrs.insert(ast_id.ast_id.with_value(*mod_item), *attr);\n+                self.skip_attrs.insert(ast_id.ast_id.with_value(*mod_item), attr.id);\n \n                 let file_id = ast_id.ast_id.file_id;\n                 let item_tree = self.db.file_item_tree(file_id);\n@@ -1050,7 +1050,7 @@ impl DefCollector<'_> {\n                                 let file_id = ast_id.ast_id.file_id;\n                                 let item_tree = self.db.file_item_tree(file_id);\n                                 let mod_dir = self.mod_dirs[&directive.module_id].clone();\n-                                self.skip_attrs.insert(InFile::new(file_id, *mod_item), *attr);\n+                                self.skip_attrs.insert(InFile::new(file_id, *mod_item), attr.id);\n                                 ModCollector {\n                                     def_collector: &mut *self,\n                                     macro_depth: directive.depth,\n@@ -1068,7 +1068,51 @@ impl DefCollector<'_> {\n                     }\n \n                     // Not resolved to a derive helper, so try to resolve as a macro.\n-                    // FIXME: not yet :)\n+                    match attr_macro_as_call_id(\n+                        ast_id,\n+                        attr,\n+                        self.db,\n+                        self.def_map.krate,\n+                        &resolver,\n+                    ) {\n+                        Ok(call_id) => {\n+                            let loc: MacroCallLoc = self.db.lookup_intern_macro(call_id);\n+                            if let MacroDefKind::ProcMacro(exp, ..) = &loc.def.kind {\n+                                if exp.is_dummy() {\n+                                    // Proc macros that cannot be expanded are treated as not\n+                                    // resolved, in order to fall back later.\n+                                    self.def_map.diagnostics.push(\n+                                        DefDiagnostic::unresolved_proc_macro(\n+                                            directive.module_id,\n+                                            loc.kind,\n+                                        ),\n+                                    );\n+\n+                                    let file_id = ast_id.ast_id.file_id;\n+                                    let item_tree = self.db.file_item_tree(file_id);\n+                                    let mod_dir = self.mod_dirs[&directive.module_id].clone();\n+                                    self.skip_attrs\n+                                        .insert(InFile::new(file_id, *mod_item), attr.id);\n+                                    ModCollector {\n+                                        def_collector: &mut *self,\n+                                        macro_depth: directive.depth,\n+                                        module_id: directive.module_id,\n+                                        file_id,\n+                                        item_tree: &item_tree,\n+                                        mod_dir,\n+                                    }\n+                                    .collect(&[*mod_item]);\n+\n+                                    // Remove the macro directive.\n+                                    return false;\n+                                }\n+                            }\n+                            resolved.push((directive.module_id, call_id, directive.depth));\n+                            res = ReachedFixedPoint::No;\n+                            return false;\n+                        }\n+                        Err(UnresolvedMacro { .. }) => (),\n+                    }\n                 }\n             }\n \n@@ -1628,7 +1672,7 @@ impl ModCollector<'_, '_> {\n                 self.def_collector.unresolved_macros.push(MacroDirective {\n                     module_id: self.module_id,\n                     depth: self.macro_depth + 1,\n-                    kind: MacroDirectiveKind::Attr { ast_id, attr: attr.id, mod_item },\n+                    kind: MacroDirectiveKind::Attr { ast_id, attr: attr.clone(), mod_item },\n                 });\n \n                 return Err(());"}, {"sha": "3ebe194e405f3f028391944dc1e3f6bc686be8c2", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "patch": "@@ -13,8 +13,8 @@ use syntax::{\n \n use crate::{\n     ast_id_map::AstIdMap, hygiene::HygieneFrame, input::process_macro_input, BuiltinDeriveExpander,\n-    BuiltinFnLikeExpander, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc, MacroDefId,\n-    MacroDefKind, MacroFile, ProcMacroExpander,\n+    BuiltinFnLikeExpander, HirFileId, HirFileIdRepr, MacroCallId, MacroCallKind, MacroCallLoc,\n+    MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n };\n \n /// Total limit on the number of tokens produced by any macro invocation.\n@@ -377,7 +377,12 @@ fn expand_proc_macro(\n         _ => unreachable!(),\n     };\n \n-    expander.expand(db, loc.krate, &macro_arg.0)\n+    let attr_arg = match &loc.kind {\n+        MacroCallKind::Attr { attr_args, .. } => Some(attr_args),\n+        _ => None,\n+    };\n+\n+    expander.expand(db, loc.krate, &macro_arg.0, attr_arg)\n }\n \n fn is_self_replicating(from: &SyntaxNode, to: &SyntaxNode) -> bool {"}, {"sha": "40116a479bda1922dc8dc4742586a8dce48a50f3", "filename": "crates/hir_expand/src/input.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Finput.rs?ref=e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "patch": "@@ -28,6 +28,14 @@ pub(crate) fn process_macro_input(\n \n             remove_derives_up_to(item, derive_attr_index as usize).syntax().clone()\n         }\n+        MacroCallKind::Attr { invoc_attr_index, .. } => {\n+            let item = match ast::Item::cast(node.clone()) {\n+                Some(item) => item,\n+                None => return node,\n+            };\n+\n+            remove_attr_invoc(item, invoc_attr_index as usize).syntax().clone()\n+        }\n     }\n }\n \n@@ -46,6 +54,17 @@ fn remove_derives_up_to(item: ast::Item, attr_index: usize) -> ast::Item {\n     item\n }\n \n+/// Removes the attribute invoking an attribute macro from `item`.\n+fn remove_attr_invoc(item: ast::Item, attr_index: usize) -> ast::Item {\n+    let item = item.clone_for_update();\n+    let attr = item\n+        .attrs()\n+        .nth(attr_index)\n+        .unwrap_or_else(|| panic!(\"cannot find attribute #{}\", attr_index));\n+    attr.syntax().detach();\n+    item\n+}\n+\n #[cfg(test)]\n mod tests {\n     use base_db::fixture::WithFixture;"}, {"sha": "618f26b9546bf8af797f3d49a621fd664dd241df", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "patch": "@@ -258,14 +258,29 @@ pub enum MacroCallKind {\n         /// out-of-line modules, which may have attributes spread across 2 files!\n         derive_attr_index: u32,\n     },\n+    Attr {\n+        ast_id: AstId<ast::Item>,\n+        attr_name: String,\n+        attr_args: tt::Subtree,\n+        /// Syntactical index of the invoking `#[attribute]`.\n+        ///\n+        /// Outer attributes are counted first, then inner attributes. This does not support\n+        /// out-of-line modules, which may have attributes spread across 2 files!\n+        invoc_attr_index: u32,\n+    },\n }\n \n+// FIXME: attribute indices do not account for `cfg_attr`, which means that we'll strip the whole\n+// `cfg_attr` instead of just one of the attributes it expands to\n+\n impl MacroCallKind {\n     /// Returns the file containing the macro invocation.\n     fn file_id(&self) -> HirFileId {\n         match self {\n             MacroCallKind::FnLike { ast_id, .. } => ast_id.file_id,\n-            MacroCallKind::Derive { ast_id, .. } => ast_id.file_id,\n+            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n+                ast_id.file_id\n+            }\n         }\n     }\n \n@@ -274,7 +289,7 @@ impl MacroCallKind {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n             }\n-            MacroCallKind::Derive { ast_id, .. } => {\n+            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n             }\n         }\n@@ -285,14 +300,17 @@ impl MacroCallKind {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 Some(ast_id.to_node(db).token_tree()?.syntax().clone())\n             }\n-            MacroCallKind::Derive { ast_id, .. } => Some(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Derive { ast_id, .. } | MacroCallKind::Attr { ast_id, .. } => {\n+                Some(ast_id.to_node(db).syntax().clone())\n+            }\n         }\n     }\n \n     fn fragment_kind(&self) -> FragmentKind {\n         match self {\n             MacroCallKind::FnLike { fragment, .. } => *fragment,\n             MacroCallKind::Derive { .. } => FragmentKind::Items,\n+            MacroCallKind::Attr { .. } => FragmentKind::Items, // is this always correct?\n         }\n     }\n }"}, {"sha": "dbe1b446e01ac14015806a06e6d311f4135a641e", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a2c6596ddd11b0d57042224ac7c1d7691ec33b/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=e5a2c6596ddd11b0d57042224ac7c1d7691ec33b", "patch": "@@ -28,11 +28,16 @@ impl ProcMacroExpander {\n         Self { krate, proc_macro_id: None }\n     }\n \n+    pub fn is_dummy(&self) -> bool {\n+        self.proc_macro_id.is_none()\n+    }\n+\n     pub fn expand(\n         self,\n         db: &dyn AstDatabase,\n         calling_crate: CrateId,\n         tt: &tt::Subtree,\n+        attr_arg: Option<&tt::Subtree>,\n     ) -> Result<tt::Subtree, mbe::ExpandError> {\n         match self.proc_macro_id {\n             Some(id) => {\n@@ -46,7 +51,7 @@ impl ProcMacroExpander {\n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n \n-                proc_macro.expander.expand(&tt, None, &env).map_err(mbe::ExpandError::from)\n+                proc_macro.expander.expand(&tt, attr_arg, &env).map_err(mbe::ExpandError::from)\n             }\n             None => Err(mbe::ExpandError::UnresolvedProcMacro),\n         }"}]}