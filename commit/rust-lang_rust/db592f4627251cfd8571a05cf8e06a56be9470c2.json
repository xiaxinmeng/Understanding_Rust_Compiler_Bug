{"sha": "db592f4627251cfd8571a05cf8e06a56be9470c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNTkyZjQ2MjcyNTFjZmQ4NTcxYTA1Y2Y4ZTA2YTU2YmU5NDcwYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-08T01:32:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-08T01:32:50Z"}, "message": "Auto merge of #62485 - Centril:rollup-gg3it1u, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #62356 (Implement Option::contains and Result::contains)\n - #62462 (Document `while` keyword)\n - #62472 (Normalize use of backticks in compiler messages p2)\n - #62477 (Re-add bootstrap attribute to libunwind for llvm-libunwind feature)\n - #62478 (normalize use of backticks for compiler messages in librustc_codegen)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "89d3935978ce188c23f8c7e818a39c5d1655235f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d3935978ce188c23f8c7e818a39c5d1655235f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db592f4627251cfd8571a05cf8e06a56be9470c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db592f4627251cfd8571a05cf8e06a56be9470c2", "html_url": "https://github.com/rust-lang/rust/commit/db592f4627251cfd8571a05cf8e06a56be9470c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db592f4627251cfd8571a05cf8e06a56be9470c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8247238e3c948bdaf440c8070193a4beea0dd9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8247238e3c948bdaf440c8070193a4beea0dd9b", "html_url": "https://github.com/rust-lang/rust/commit/a8247238e3c948bdaf440c8070193a4beea0dd9b"}, {"sha": "ada2684c807a257eac75787d98c1c129a2500c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada2684c807a257eac75787d98c1c129a2500c92", "html_url": "https://github.com/rust-lang/rust/commit/ada2684c807a257eac75787d98c1c129a2500c92"}], "stats": {"total": 240, "additions": 186, "deletions": 54}, "files": [{"sha": "29169951e469d47b569dc5b357bfabbcf342a246", "filename": "src/libcore/option.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -208,6 +208,32 @@ impl<T> Option<T> {\n         !self.is_some()\n     }\n \n+    /// Returns `true` if the option is a [`Some`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Option<u32> = Some(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Option<u32> = Some(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    pub fn contains<U>(&self, x: &U) -> bool where U: PartialEq<T> {\n+        match self {\n+            Some(y) => x == y,\n+            None => false,\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "b64ad149cf4db7ceae45dc74821b38877206c862", "filename": "src/libcore/result.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -309,6 +309,58 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n+    /// Returns `true` if the result is an [`Ok`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Result<u32, &str> = Ok(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    pub fn contains<U>(&self, x: &U) -> bool where U: PartialEq<T> {\n+        match self {\n+            Ok(y) => x == y,\n+            Err(_) => false\n+        }\n+    }\n+\n+    /// Returns `true` if the result is an [`Err`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_contains_err)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), true);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some other error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"result_contains_err\", issue = \"62358\")]\n+    pub fn contains_err<F>(&self, f: &F) -> bool where F: PartialEq<E> {\n+        match self {\n+            Ok(_) => false,\n+            Err(e) => f == e\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "bb92225c50ea055a8925ae0616b60bdccc740026", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -146,7 +146,7 @@ fn inline_asm_call(\n     unsafe {\n         // Ask LLVM to verify that the constraints are well-formed.\n         let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr());\n-        debug!(\"Constraint verification result: {:?}\", constraints_ok);\n+        debug!(\"constraint verification result: {:?}\", constraints_ok);\n         if constraints_ok {\n             let v = llvm::LLVMRustInlineAsm(\n                 fty,"}, {"sha": "5ac1cf8c36f93ca0c01d9e606d4e0f902048ebcc", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -215,7 +215,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         funclet: Option<&Funclet<'ll>>,\n     ) -> &'ll Value {\n \n-        debug!(\"Invoke {:?} with args ({:?})\",\n+        debug!(\"invoke {:?} with args ({:?})\",\n                llfn,\n                args);\n \n@@ -1035,7 +1035,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         funclet: Option<&Funclet<'ll>>,\n     ) -> &'ll Value {\n \n-        debug!(\"Call {:?} with args ({:?})\",\n+        debug!(\"call {:?} with args ({:?})\",\n                llfn,\n                args);\n \n@@ -1238,7 +1238,7 @@ impl Builder<'a, 'll, 'tcx> {\n         if dest_ptr_ty == stored_ptr_ty {\n             ptr\n         } else {\n-            debug!(\"Type mismatch in store. \\\n+            debug!(\"type mismatch in store. \\\n                     Expected {:?}, got {:?}; inserting bitcast\",\n                    dest_ptr_ty, stored_ptr_ty);\n             self.bitcast(ptr, stored_ptr_ty)\n@@ -1274,7 +1274,7 @@ impl Builder<'a, 'll, 'tcx> {\n             .map(|(i, (expected_ty, &actual_val))| {\n                 let actual_ty = self.val_ty(actual_val);\n                 if expected_ty != actual_ty {\n-                    debug!(\"Type mismatch in function call of {:?}. \\\n+                    debug!(\"type mismatch in function call of {:?}. \\\n                             Expected {:?} for param {}, got {:?}; injecting bitcast\",\n                            llfn, expected_ty, i, actual_ty);\n                     self.bitcast(actual_val, expected_ty)"}, {"sha": "ca7e17ec97a39362c5b0b0ba63feef48e46ad2f8", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -433,7 +433,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         if cx.get_defined_value(\"main\").is_some() {\n             // FIXME: We should be smart and show a better diagnostic here.\n             cx.sess().struct_span_err(sp, \"entry symbol `main` defined multiple times\")\n-                     .help(\"did you use #[no_mangle] on `fn main`? Use #[start] instead\")\n+                     .help(\"did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\")\n                      .emit();\n             cx.sess().abort_if_errors();\n             bug!();"}, {"sha": "010be3e8c7404b9ad7447d140f0079432e7e7f3e", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         //   * packed struct - there is no alignment padding\n         match field.ty.sty {\n             _ if self.llextra.is_none() => {\n-                debug!(\"Unsized field `{}`, of `{:?}` has no metadata for adjustment\",\n+                debug!(\"unsized field `{}`, of `{:?}` has no metadata for adjustment\",\n                     ix, self.llval);\n                 return simple();\n             }"}, {"sha": "6b9258c32e7b0a9bb1b69c79777b4e6f371a0d8c", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -57,7 +57,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n         if let Some(ref s) = sess.opts.crate_name {\n             if let Some((attr, name)) = attr_crate_name {\n                 if name.as_str() != *s {\n-                    let msg = format!(\"--crate-name and #[crate_name] are \\\n+                    let msg = format!(\"`--crate-name` and `#[crate_name]` are \\\n                                        required to match, but `{}` != `{}`\",\n                                       s, name);\n                     sess.span_err(attr.span, &msg);"}, {"sha": "7e0ecc725745f600ed6a41ff582b7c83559eb9ee", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -459,7 +459,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let (unsize_did, coerce_unsized_did) = if let (Some(u), Some(cu)) = traits {\n             (u, cu)\n         } else {\n-            debug!(\"Missing Unsize or CoerceUnsized traits\");\n+            debug!(\"missing Unsize or CoerceUnsized traits\");\n             return Err(TypeError::Mismatch);\n         };\n "}, {"sha": "5cee3d63ffc0491523085e5705f08f04fbc31ef6", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -130,7 +130,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     // if a Sync generator contains an &'\u03b1 T, we need to check whether &'\u03b1 T: Sync),\n     // so knowledge of the exact relationships between them isn't particularly important.\n \n-    debug!(\"Types in generator {:?}, span = {:?}\", type_list, body.value.span);\n+    debug!(\"types in generator {:?}, span = {:?}\", type_list, body.value.span);\n \n     // Replace all regions inside the generator interior with late bound regions\n     // Note that each region slot in the types gets a new fresh late bound region,\n@@ -144,7 +144,7 @@ pub fn resolve_interior<'a, 'tcx>(\n \n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));\n \n-    debug!(\"Types in generator after region replacement {:?}, span = {:?}\",\n+    debug!(\"types in generator after region replacement {:?}, span = {:?}\",\n             witness, body.value.span);\n \n     // Unify the type variable inside the generator with the new witness"}, {"sha": "41979509a3c5d5eb0edfd82876716815cf2225b0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -1230,7 +1230,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         if nightly_options::is_nightly_build() {\n             for (candidate, feature) in unstable_candidates {\n                 diag.help(&format!(\n-                    \"add #![feature({})] to the crate attributes to enable `{}`\",\n+                    \"add `#![feature({})]` to the crate attributes to enable `{}`\",\n                     feature,\n                     self.tcx.def_path_str(candidate.item.def_id),\n                 ));\n@@ -1432,7 +1432,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     /// candidate method where the method name may have been misspelt. Similarly to other\n     /// Levenshtein based suggestions, we provide at most one such suggestion.\n     fn probe_for_lev_candidate(&mut self) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n-        debug!(\"Probing for method names similar to {:?}\",\n+        debug!(\"probing for method names similar to {:?}\",\n                self.method_name);\n \n         let steps = self.steps.clone();"}, {"sha": "d578a894add2d7a8f44350e8c20f13f90e0c3e9e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -983,7 +983,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         };\n         self.assign(local.span, local.hir_id, local_ty);\n \n-        debug!(\"Local variable {:?} is assigned type {}\",\n+        debug!(\"local variable {:?} is assigned type {}\",\n                local.pat,\n                self.fcx.ty_to_string(\n                    self.fcx.locals.borrow().get(&local.hir_id).unwrap().clone().decl_ty));\n@@ -1000,7 +1000,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                                                traits::VariableType(p.hir_id));\n             }\n \n-            debug!(\"Pattern binding {} is assigned to {} with type {:?}\",\n+            debug!(\"pattern binding {} is assigned to {} with type {:?}\",\n                    ident,\n                    self.fcx.ty_to_string(\n                        self.fcx.locals.borrow().get(&p.hir_id).unwrap().clone().decl_ty),\n@@ -4462,7 +4462,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n \n     for leaf_ty in ty.walk() {\n         if let ty::Param(ty::ParamTy { index, .. }) = leaf_ty.sty {\n-            debug!(\"Found use of ty param num {}\", index);\n+            debug!(\"found use of ty param num {}\", index);\n             types_used[index as usize - own_counts.lifetimes] = true;\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit"}, {"sha": "fe6d91b0a6eba7f7ffbe658bf9ab6d29581d8099", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -799,7 +799,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         debug!(\"callee_region={:?}\", callee_region);\n \n         for arg_expr in arg_exprs {\n-            debug!(\"Argument: {:?}\", arg_expr);\n+            debug!(\"argument: {:?}\", arg_expr);\n \n             // ensure that any regions appearing in the argument type are\n             // valid for at least the lifetime of the function:"}, {"sha": "9d389669ff4ceac00d30e1933f462891a996b7c2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -646,7 +646,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let n_ty = self.fcx.node_ty(hir_id);\n         let n_ty = self.resolve(&n_ty, &span);\n         self.write_ty_to_tables(hir_id, n_ty);\n-        debug!(\"Node {:?} has type {:?}\", hir_id, n_ty);\n+        debug!(\"node {:?} has type {:?}\", hir_id, n_ty);\n \n         // Resolve any substitutions\n         if let Some(substs) = self.fcx.tables.borrow().node_substs_opt(hir_id) {\n@@ -665,13 +665,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             .remove(hir_id);\n         match adjustment {\n             None => {\n-                debug!(\"No adjustments for node {:?}\", hir_id);\n+                debug!(\"no adjustments for node {:?}\", hir_id);\n             }\n \n             Some(adjustment) => {\n                 let resolved_adjustment = self.resolve(&adjustment, &span);\n                 debug!(\n-                    \"Adjustments for node {:?}: {:?}\",\n+                    \"adjustments for node {:?}: {:?}\",\n                     hir_id, resolved_adjustment\n                 );\n                 self.tables\n@@ -689,7 +689,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             .remove(hir_id);\n         match adjustment {\n             None => {\n-                debug!(\"No pat_adjustments for node {:?}\", hir_id);\n+                debug!(\"no pat_adjustments for node {:?}\", hir_id);\n             }\n \n             Some(adjustment) => {"}, {"sha": "5420a2407e66f7f62e738798b760fa947260cacc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -2256,7 +2256,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                            tcx.hir().hir_to_pretty_string(ast_ty.hir_id)\n                        ),\n                    )\n-                   .help(\"add #![feature(simd_ffi)] to the crate attributes to enable\")\n+                   .help(\"add `#![feature(simd_ffi)]` to the crate attributes to enable\")\n                    .emit();\n             }\n         };\n@@ -2479,7 +2479,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.check_name(sym::target_feature) {\n             if tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n-                let msg = \"#[target_feature(..)] can only be applied to `unsafe` functions\";\n+                let msg = \"`#[target_feature(..)]` can only be applied to `unsafe` functions\";\n                 tcx.sess.struct_span_err(attr.span, msg)\n                     .span_label(attr.span, \"can only be applied to `unsafe` functions\")\n                     .span_label(tcx.def_span(id), \"not an `unsafe` function\")\n@@ -2593,8 +2593,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             if let Some(span) = inline_span {\n                 tcx.sess.span_err(\n                     span,\n-                    \"cannot use #[inline(always)] with \\\n-                     #[target_feature]\",\n+                    \"cannot use `#[inline(always)]` with \\\n+                     `#[target_feature]`\",\n                 );\n             }\n         }"}, {"sha": "19d5e8b3e84470eae62ca5a4bb878b4b6d99f237", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -4848,6 +4848,6 @@ register_diagnostics! {\n     E0641, // cannot cast to/from a pointer with an unknown kind\n     E0645, // trait aliases not finished\n     E0719, // duplicate values for associated type binding\n-    E0722, // Malformed #[optimize] attribute\n+    E0722, // Malformed `#[optimize]` attribute\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions\n }"}, {"sha": "1176c5ebb3d3055c5ee52acb9ee173aedfc60e51", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n                 let old_value = self.solutions[inferred];\n                 let new_value = glb(variance, old_value);\n                 if old_value != new_value {\n-                    debug!(\"Updating inferred {} \\\n+                    debug!(\"updating inferred {} \\\n                             from {:?} to {:?} due to {:?}\",\n                            inferred,\n                            old_value,"}, {"sha": "d18fcb4a1da0af6899f64dac118e551deac1925b", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 56, "deletions": 9, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -608,6 +608,62 @@ mod in_keyword { }\n /// [Reference]: ../reference/statements.html#let-statements\n mod let_keyword { }\n \n+#[doc(keyword = \"while\")]\n+//\n+/// Loop while a condition is upheld.\n+///\n+/// A `while` expression is used for predicate loops. The `while` expression runs the conditional\n+/// expression before running the loop body, then runs the loop body if the conditional\n+/// expression evaluates to `true`, or exits the loop otherwise.\n+///\n+/// ```rust\n+/// let mut counter = 0;\n+///\n+/// while counter < 10 {\n+///     println!(\"{}\", counter);\n+///     counter += 1;\n+/// }\n+/// ```\n+///\n+/// Like the [`for`] expression, we can use `break` and `continue`. A `while` expression\n+/// cannot break with a value and always evaluates to `()` unlike [`loop`].\n+///\n+/// ```rust\n+/// let mut i = 1;\n+///\n+/// while i < 100 {\n+///     i *= 2;\n+///     if i == 64 {\n+///         break; // Exit when `i` is 64.\n+///     }\n+/// }\n+/// ```\n+///\n+/// As `if` expressions have their pattern matching variant in `if let`, so too do `while`\n+/// expressions with `while let`. The `while let` expression matches the pattern against the\n+/// expression, then runs the loop body if pattern matching succeeds, or exits the loop otherwise.\n+/// We can use `break` and `continue` in `while let` expressions just like in `while`.\n+///\n+/// ```rust\n+/// let mut counter = Some(0);\n+///\n+/// while let Some(i) = counter {\n+///     if i == 10 {\n+///         counter = None;\n+///     } else {\n+///         println!(\"{}\", i);\n+///         counter = Some (i + 1);\n+///     }\n+/// }\n+/// ```\n+///\n+/// For more information on `while` and loops in general, see the [reference].\n+///\n+/// [`for`]: keyword.for.html\n+/// [`loop`]: keyword.loop.html\n+/// [reference]: ../reference/expressions/loop-expr.html#predicate-loops\n+mod while_keyword { }\n+\n #[doc(keyword = \"loop\")]\n //\n /// Loop indefinitely.\n@@ -922,15 +978,6 @@ mod use_keyword { }\n /// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod where_keyword { }\n \n-#[doc(keyword = \"while\")]\n-//\n-/// Loop while a condition is upheld.\n-///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n-///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n-mod while_keyword { }\n-\n // 2018 Edition keywords\n \n #[unstable(feature = \"async_await\", issue = \"50547\")]"}, {"sha": "e92c68f5b0c5736f974d57f640f2bdc16ae48895", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -4,11 +4,13 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n-    if cfg!(feature = \"llvm-libunwind\") &&\n+    // FIXME: the not(bootstrap) part is needed because of the issue addressed by #62286,\n+    // and could be removed once that change is in beta.\n+    if cfg!(all(not(bootstrap), feature = \"llvm-libunwind\")) &&\n         (target.contains(\"linux\") ||\n          target.contains(\"fuchsia\")) {\n         // Build the unwinding from libunwind C/C++ source code.\n-        #[cfg(feature = \"llvm-libunwind\")]\n+        #[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n@@ -42,7 +44,7 @@ fn main() {\n     }\n }\n \n-#[cfg(feature = \"llvm-libunwind\")]\n+#[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n mod llvm_libunwind {\n     use std::env;\n     use std::path::Path;"}, {"sha": "30897970fa220e3545fc6c30eae0f96e5de29b78", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -67,7 +67,8 @@ pub enum _Unwind_Context {}\n \n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n-#[cfg_attr(feature = \"llvm-libunwind\",\n+#[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+               any(target_os = \"fuchsia\", target_os = \"linux\")),\n            link(name = \"unwind\", kind = \"static\"))]\n extern \"C\" {\n     #[unwind(allowed)]\n@@ -93,7 +94,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     }\n     pub use _Unwind_Action::*;\n \n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         pub fn _Unwind_GetGR(ctx: *mut _Unwind_Context, reg_index: c_int) -> _Unwind_Word;\n@@ -148,7 +150,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     pub const UNWIND_POINTER_REG: c_int = 12;\n     pub const UNWIND_IP_REG: c_int = 15;\n \n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,\n@@ -212,7 +215,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n cfg_if::cfg_if! {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]\n@@ -223,7 +227,8 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]"}, {"sha": "23ad39a6f92d58578d4e38ddf8398cb828db49cd", "filename": "src/test/ui/crate-name-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Fcrate-name-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Fcrate-name-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-name-mismatch.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: --crate-name foo\n \n #![crate_name = \"bar\"]\n-//~^ ERROR: --crate-name and #[crate_name] are required to match, but `foo` != `bar`\n+//~^ ERROR: `--crate-name` and `#[crate_name]` are required to match, but `foo` != `bar`\n \n fn main() {}"}, {"sha": "96618570d8fb66291325b6c63a60f1a168ed2785", "filename": "src/test/ui/crate-name-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Fcrate-name-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Fcrate-name-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-name-mismatch.stderr?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -1,4 +1,4 @@\n-error: --crate-name and #[crate_name] are required to match, but `foo` != `bar`\n+error: `--crate-name` and `#[crate_name]` are required to match, but `foo` != `bar`\n   --> $DIR/crate-name-mismatch.rs:3:1\n    |\n LL | #![crate_name = \"bar\"]"}, {"sha": "d2cb4e0970e83ec393f330b8f884293f1c80811d", "filename": "src/test/ui/duplicate/dupe-symbols-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -4,7 +4,7 @@ error: entry symbol `main` defined multiple times\n LL | fn main(){}\n    | ^^^^^^^^^^^\n    |\n-   = help: did you use #[no_mangle] on `fn main`? Use #[start] instead\n+   = help: did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\n \n error: aborting due to previous error\n "}, {"sha": "8166b6baa286a6b585fe319dd72a0969a21665c5", "filename": "src/test/ui/feature-gates/feature-gate-simd-ffi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.stderr?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -4,15 +4,15 @@ error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result\n LL |     fn baz() -> LocalSimd;\n    |                 ^^^^^^^^^\n    |\n-   = help: add #![feature(simd_ffi)] to the crate attributes to enable\n+   = help: add `#![feature(simd_ffi)]` to the crate attributes to enable\n \n error: use of SIMD type `LocalSimd` in FFI is highly experimental and may result in invalid code\n   --> $DIR/feature-gate-simd-ffi.rs:10:15\n    |\n LL |     fn qux(x: LocalSimd);\n    |               ^^^^^^^^^\n    |\n-   = help: add #![feature(simd_ffi)] to the crate attributes to enable\n+   = help: add `#![feature(simd_ffi)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c3d8f7ccf372ab438996f677556f43edf148447", "filename": "src/test/ui/inference/inference_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -8,5 +8,5 @@ LL |     assert_eq!('x'.ipu_flatten(), 1);\n    = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method\n-   = help: add #![feature(ipu_flatten)] to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n+   = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n "}, {"sha": "646a98763e1b36f904af4688a9de4535a8faf4cb", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -25,7 +25,7 @@\n unsafe fn foo() {}\n \n #[target_feature(enable = \"sse2\")]\n-//~^ ERROR #[target_feature(..)] can only be applied to `unsafe` functions\n+//~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n //~| NOTE can only be applied to `unsafe` functions\n fn bar() {}\n //~^ NOTE not an `unsafe` function\n@@ -36,7 +36,7 @@ mod another {}\n //~^ NOTE not a function\n \n #[inline(always)]\n-//~^ ERROR: cannot use #[inline(always)]\n+//~^ ERROR: cannot use `#[inline(always)]`\n #[target_feature(enable = \"sse2\")]\n unsafe fn test() {}\n "}, {"sha": "47ca5a5ca478c5c0a3a30604712f36a40c2c3c86", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db592f4627251cfd8571a05cf8e06a56be9470c2/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=db592f4627251cfd8571a05cf8e06a56be9470c2", "patch": "@@ -22,7 +22,7 @@ error: malformed `target_feature` attribute input\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n-error: #[target_feature(..)] can only be applied to `unsafe` functions\n+error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/target-feature-wrong.rs:27:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n@@ -40,7 +40,7 @@ LL |\n LL | mod another {}\n    | -------------- not a function\n \n-error: cannot use #[inline(always)] with #[target_feature]\n+error: cannot use `#[inline(always)]` with `#[target_feature]`\n   --> $DIR/target-feature-wrong.rs:38:1\n    |\n LL | #[inline(always)]"}]}