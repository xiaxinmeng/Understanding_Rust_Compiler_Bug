{"sha": "a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MDk0ZjdjZTNmYmY3ZmQ0NGUwYzgxY2ZkZDAwZWM2ZDJhNTljYzE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-29T14:24:25Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T11:29:05Z"}, "message": "rustc_codegen_ssa: use &'tcx mir::Body<'tcx> instead of &'a ... for the MIR body.", "tree": {"sha": "6644d09479eee38a71655952a6ef6999595e0f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6644d09479eee38a71655952a6ef6999595e0f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1", "html_url": "https://github.com/rust-lang/rust/commit/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57aea88d4620008ff06ed8e23f093a2e88b33f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57aea88d4620008ff06ed8e23f093a2e88b33f9", "html_url": "https://github.com/rust-lang/rust/commit/a57aea88d4620008ff06ed8e23f093a2e88b33f9"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "c8881ca5f9506d8a9b416752dae46a12bc379ea5", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1", "patch": "@@ -24,13 +24,14 @@ use super::operand::OperandValue::{Pair, Ref, Immediate};\n \n /// Used by `FunctionCx::codegen_terminator` for emitting common patterns\n /// e.g., creating a basic block, calling a function, etc.\n-struct TerminatorCodegenHelper<'a, 'tcx> {\n-    bb: &'a mir::BasicBlock,\n-    terminator: &'a mir::Terminator<'tcx>,\n+struct TerminatorCodegenHelper<'tcx> {\n+    bb: mir::BasicBlock,\n+    terminator: &'tcx mir::Terminator<'tcx>,\n     funclet_bb: Option<mir::BasicBlock>,\n }\n \n-impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n+// FIXME(eddyb) clean up the lifetimes in this impl.\n+impl<'tcx> TerminatorCodegenHelper<'tcx> {\n     /// Returns the associated funclet from `FunctionCx::funclets` for the\n     /// `funclet_bb` member if it is not `None`.\n     fn funclet<'c, 'b, Bx: BuilderMethods<'b, 'tcx>>(\n@@ -132,7 +133,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n         } else {\n             let llret = bx.call(fn_ptr, &llargs, self.funclet(fx));\n             bx.apply_attrs_callsite(&fn_abi, llret);\n-            if fx.mir[*self.bb].is_cleanup {\n+            if fx.mir[self.bb].is_cleanup {\n                 // Cleanup is always the cold path. Don't inline\n                 // drop glue. Also, when there is a deeply-nested\n                 // struct, there are \"symmetry\" issues that cause\n@@ -151,15 +152,15 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n \n     // Generate sideeffect intrinsic if jumping to any of the targets can form\n     // a loop.\n-    fn maybe_sideeffect<'b, 'tcx2: 'b, Bx: BuilderMethods<'b, 'tcx2>>(\n+    fn maybe_sideeffect<'b, Bx: BuilderMethods<'b, 'tcx>>(\n         &self,\n-        mir: mir::ReadOnlyBodyCache<'b, 'tcx>,\n+        mir: mir::ReadOnlyBodyCache<'tcx, 'tcx>,\n         bx: &mut Bx,\n         targets: &[mir::BasicBlock],\n     ) {\n         if bx.tcx().sess.opts.debugging_opts.insert_sideeffect {\n-            if targets.iter().any(|target| {\n-                *target <= *self.bb\n+            if targets.iter().any(|&target| {\n+                target <= self.bb\n                     && target\n                         .start_location()\n                         .is_predecessor_of(self.bb.start_location(), mir)\n@@ -173,9 +174,9 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'a, 'tcx> {\n /// Codegen implementations for some terminator variants.\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     /// Generates code for a `Resume` terminator.\n-    fn codegen_resume_terminator<'b>(\n+    fn codegen_resume_terminator(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'tcx>,\n         mut bx: Bx,\n     ) {\n         if let Some(funclet) = helper.funclet(self) {\n@@ -201,9 +202,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn codegen_switchint_terminator<'b>(\n+    fn codegen_switchint_terminator(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'tcx>,\n         mut bx: Bx,\n         discr: &mir::Operand<'tcx>,\n         switch_ty: Ty<'tcx>,\n@@ -316,9 +317,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n \n \n-    fn codegen_drop_terminator<'b>(\n+    fn codegen_drop_terminator(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'tcx>,\n         mut bx: Bx,\n         location: &mir::Place<'tcx>,\n         target: mir::BasicBlock,\n@@ -367,9 +368,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                        unwind);\n     }\n \n-    fn codegen_assert_terminator<'b>(\n+    fn codegen_assert_terminator(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'tcx>,\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n         cond: &mir::Operand<'tcx>,\n@@ -446,9 +447,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n-    fn codegen_call_terminator<'b>(\n+    fn codegen_call_terminator(\n         &mut self,\n-        helper: TerminatorCodegenHelper<'b, 'tcx>,\n+        helper: TerminatorCodegenHelper<'tcx>,\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n         func: &mir::Operand<'tcx>,\n@@ -807,14 +808,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         mut bx: Bx,\n         bb: mir::BasicBlock,\n-        terminator: &mir::Terminator<'tcx>\n+        terminator: &'tcx mir::Terminator<'tcx>\n     ) {\n         debug!(\"codegen_terminator: {:?}\", terminator);\n \n         // Create the cleanup bundle, if needed.\n         let funclet_bb = self.cleanup_kinds[bb].funclet_bb(bb);\n         let helper = TerminatorCodegenHelper {\n-            bb: &bb, terminator, funclet_bb\n+            bb, terminator, funclet_bb\n         };\n \n         self.set_debug_loc(&mut bx, terminator.source_info);"}, {"sha": "600bdced4edd23f2f847514ffac34531dd7b3f62", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=a7094f7ce3fbf7fd44e0c81cfdd00ec6d2a59cc1", "patch": "@@ -1,6 +1,6 @@\n use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{TyLayout, HasTyCtxt, FnAbiExt};\n-use rustc::mir::{self, Body, ReadOnlyBodyCache};\n+use rustc::mir;\n use rustc_target::abi::call::{FnAbi, PassMode};\n use crate::base;\n use crate::traits::*;\n@@ -21,7 +21,7 @@ use self::operand::{OperandRef, OperandValue};\n pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     instance: Instance<'tcx>,\n \n-    mir: mir::ReadOnlyBodyCache<'a, 'tcx>,\n+    mir: mir::ReadOnlyBodyCache<'tcx, 'tcx>,\n \n     debug_context: Option<FunctionDebugContext<Bx::DIScope>>,\n \n@@ -76,7 +76,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n \n     /// All `VarDebuginfo` from the MIR body, partitioned by `Local`.\n     /// This is `None` if no variable debuginfo/names are needed.\n-    per_local_var_debug_info: Option<IndexVec<mir::Local, Vec<&'a mir::VarDebugInfo<'tcx>>>>,\n+    per_local_var_debug_info: Option<IndexVec<mir::Local, Vec<&'tcx mir::VarDebugInfo<'tcx>>>>,\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -122,7 +122,7 @@ impl<'a, 'tcx, V: CodegenObject> LocalRef<'tcx, V> {\n pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     llfn: Bx::Function,\n-    mir: ReadOnlyBodyCache<'a, 'tcx>,\n+    mir: mir::ReadOnlyBodyCache<'tcx, 'tcx>,\n     instance: Instance<'tcx>,\n     sig: ty::FnSig<'tcx>,\n ) {\n@@ -156,7 +156,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         }).collect();\n \n     let (landing_pads, funclets) = create_funclets(&mir, &mut bx, &cleanup_kinds, &block_bxs);\n-    let mir_body: &Body<'_> = mir.body();\n+    let mir_body: &mir::Body<'_> = mir.body();\n     let mut fx = FunctionCx {\n         instance,\n         mir,\n@@ -248,8 +248,8 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-fn create_funclets<'a, 'b, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n-    mir: &'b Body<'tcx>,\n+fn create_funclets<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+    mir: &'tcx mir::Body<'tcx>,\n     bx: &mut Bx,\n     cleanup_kinds: &IndexVec<mir::BasicBlock, CleanupKind>,\n     block_bxs: &IndexVec<mir::BasicBlock, Bx::BasicBlock>,"}]}