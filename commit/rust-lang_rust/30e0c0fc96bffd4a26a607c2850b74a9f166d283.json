{"sha": "30e0c0fc96bffd4a26a607c2850b74a9f166d283", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZTBjMGZjOTZiZmZkNGEyNmE2MDdjMjg1MGI3NGE5ZjE2NmQyODM=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-03-17T07:30:29Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-03-17T20:21:32Z"}, "message": "fix typos", "tree": {"sha": "e56b00e178e791b319e72624579d41d41e4d0bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e56b00e178e791b319e72624579d41d41e4d0bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30e0c0fc96bffd4a26a607c2850b74a9f166d283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30e0c0fc96bffd4a26a607c2850b74a9f166d283", "html_url": "https://github.com/rust-lang/rust/commit/30e0c0fc96bffd4a26a607c2850b74a9f166d283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30e0c0fc96bffd4a26a607c2850b74a9f166d283/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed96fb3daa107c573f206a1daa18ac3b383f76f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed96fb3daa107c573f206a1daa18ac3b383f76f", "html_url": "https://github.com/rust-lang/rust/commit/bed96fb3daa107c573f206a1daa18ac3b383f76f"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "a5bb30d9a0fab861c4ffa29c48586156d178e870", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30e0c0fc96bffd4a26a607c2850b74a9f166d283/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/30e0c0fc96bffd4a26a607c2850b74a9f166d283/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=30e0c0fc96bffd4a26a607c2850b74a9f166d283", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.120 \u2014 2017-03-17\n+* Rustup to *rustc 1.17.0-nightly (0aeb9c129 2017-03-15)*\n+\n ## 0.0.119 \u2014 2017-03-13\n * Rustup to *rustc 1.17.0-nightly (824c9ebbd 2017-03-12)*\n \n@@ -77,7 +80,7 @@ All notable changes to this project will be documented in this file.\n * New lint: [`get_unwrap`]\n \n ## 0.0.98 \u2014 2016-11-08\n-* Fixes a an issue due to a change in how cargo handles `--sysroot`, which broke `cargo clippy`\n+* Fixes an issue due to a change in how cargo handles `--sysroot`, which broke `cargo clippy`\n \n ## 0.0.97 \u2014 2016-11-03\n * For convenience, `cargo clippy` defines a `cargo-clippy` feature. This was"}, {"sha": "50ba8a474d2ce57bd1e51bc6ca9cabe12d88f349", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30e0c0fc96bffd4a26a607c2850b74a9f166d283/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/30e0c0fc96bffd4a26a607c2850b74a9f166d283/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=30e0c0fc96bffd4a26a607c2850b74a9f166d283", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.119\"\n+version = \"0.0.120\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -30,7 +30,7 @@ test = false\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.119\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.120\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.1.1\"\n "}, {"sha": "f0e933ee8059934ad9aa51b13e7dafeec3be19b5", "filename": "README.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30e0c0fc96bffd4a26a607c2850b74a9f166d283/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/30e0c0fc96bffd4a26a607c2850b74a9f166d283/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=30e0c0fc96bffd4a26a607c2850b74a9f166d283", "patch": "@@ -50,7 +50,7 @@ Then build by enabling the feature: `cargo build --features \"clippy\"`\n \n Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n `cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy`\n-(the `-Z no trans`, while not neccessary, will stop the compilation process after\n+(the `-Z no trans`, while not necessary, will stop the compilation process after\n typechecking (and lints) have completed, which can significantly reduce the runtime).\n \n ### As a cargo subcommand (`cargo clippy`)\n@@ -191,16 +191,16 @@ name\n [assign_ops](https://github.com/Manishearth/rust-clippy/wiki#assign_ops)                                               | allow   | any compound assignment operation\n [bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                           | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false`\n [blacklisted_name](https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name)                                   | warn    | usage of a blacklisted/placeholder name\n-[block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)               | warn    | braces that can be eliminated in conditions, e.g `if { true } ...`\n+[block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)               | warn    | braces that can be eliminated in conditions, e.g. `if { true } ...`\n [block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)               | warn    | complex blocks in conditions, e.g. `if { let x = true; x } ...`\n [bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                                     | warn    | comparing a variable to a boolean, e.g. `if x == true`\n [box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                                     | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n [boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                             | warn    | using `Box<T>` where unnecessary\n [builtin_type_shadow](https://github.com/Manishearth/rust-clippy/wiki#builtin_type_shadow)                             | warn    | shadowing a builtin type\n-[cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)                   | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n-[cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                               | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n-[cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                             | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n-[cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                                       | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+[cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)                   | allow   | casts that may cause truncation of the value, e.g. `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n+[cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                               | allow   | casts that may cause wrapping around the value, e.g. `x as i32` where `x: u32` and `x > i32::MAX`\n+[cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                             | allow   | casts that cause loss of precision, e.g. `x as f32` where `x: u64`\n+[cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                                       | allow   | casts from signed types to unsigned types, e.g. `x as u32` where `x: i32`\n [char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                                       | warn    | casting a character literal to u8\n [chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                                       | warn    | using `.chars().next()` to check if a string starts with a char\n [clone_double_ref](https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref)                                   | warn    | using `clone` on `&&T`\n@@ -334,7 +334,7 @@ name\n [should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)                       | warn    | defining a method that should be implementing a std trait\n [similar_names](https://github.com/Manishearth/rust-clippy/wiki#similar_names)                                         | allow   | similarly named items and bindings\n [single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                             | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`\n-[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                           | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) instead of `if let`\n+[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                           | warn    | a match statement with a single nontrivial arm (i.e. where the other arm is `_ => {}`) instead of `if let`\n [single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                                 | allow   | a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                               | allow   | using `x + ..` where x is a `String` instead of `push_str()`\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                                 | allow   | using `x = x + ..` where x is a `String` instead of `push_str()`\n@@ -352,7 +352,7 @@ name\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                     | warn    | usage of very complex types that might be better factored into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                     | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                   | warn    | comparing unit values\n-[unnecessary_cast](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_cast)                                   | warn    | cast to the same type, e.g `x as i32` where `x: i32`\n+[unnecessary_cast](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_cast)                                   | warn    | cast to the same type, e.g. `x as i32` where `x: i32`\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                       | warn    | an argument passed as a mutable reference although the callee only demands an immutable reference\n [unnecessary_operation](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation)                         | warn    | outer expressions with no effect\n [unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                       | warn    | struct fields bound to a wildcard instead of using `..`"}, {"sha": "80720e20d1caaff727eec74dfd6df3f5c5a252d8", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=30e0c0fc96bffd4a26a607c2850b74a9f166d283", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.119\"\n+version = \"0.0.120\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "f41d29c569d77f88a4b632175a8cf58f4629fc72", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=30e0c0fc96bffd4a26a607c2850b74a9f166d283", "patch": "@@ -18,7 +18,7 @@ use utils::*;\n declare_lint! {\n     pub BLOCK_IN_IF_CONDITION_EXPR,\n     Warn,\n-    \"braces that can be eliminated in conditions, e.g `if { true } ...`\"\n+    \"braces that can be eliminated in conditions, e.g. `if { true } ...`\"\n }\n \n /// **What it does:** Checks for `if` conditions that use blocks containing"}, {"sha": "8b0f5795845bb68a9978b6a64f4add32e6702cdb", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=30e0c0fc96bffd4a26a607c2850b74a9f166d283", "patch": "@@ -30,7 +30,7 @@ use utils::sugg::Sugg;\n declare_lint! {\n     pub SINGLE_MATCH,\n     Warn,\n-    \"a match statement with a single nontrivial arm (i.e, where the other arm \\\n+    \"a match statement with a single nontrivial arm (i.e. where the other arm \\\n      is `_ => {}`) instead of `if let`\"\n }\n \n@@ -219,10 +219,10 @@ fn report_single_match_single_pattern(cx: &LateContext, ex: &Expr, arms: &[Arm],\n         db.span_suggestion(expr.span,\n                            \"try this\",\n                            format!(\"if let {} = {} {}{}\",\n-                                    snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                    snippet(cx, ex.span, \"..\"),\n-                                    expr_block(cx, &arms[0].body, None, \"..\"),\n-                                    els_str));\n+                                   snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                   snippet(cx, ex.span, \"..\"),\n+                                   expr_block(cx, &arms[0].body, None, \"..\"),\n+                                   els_str));\n     });\n }\n "}, {"sha": "7ec6931462105e3b8b700a466ca241cc7a42b459", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30e0c0fc96bffd4a26a607c2850b74a9f166d283/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=30e0c0fc96bffd4a26a607c2850b74a9f166d283", "patch": "@@ -311,7 +311,7 @@ pub struct CastPass;\n declare_lint! {\n     pub CAST_PRECISION_LOSS,\n     Allow,\n-    \"casts that cause loss of precision, e.g `x as f32` where `x: u64`\"\n+    \"casts that cause loss of precision, e.g. `x as f32` where `x: u64`\"\n }\n \n /// **What it does:** Checks for casts from a signed to an unsigned numerical\n@@ -332,7 +332,7 @@ declare_lint! {\n declare_lint! {\n     pub CAST_SIGN_LOSS,\n     Allow,\n-    \"casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\"\n+    \"casts from signed types to unsigned types, e.g. `x as u32` where `x: i32`\"\n }\n \n /// **What it does:** Checks for on casts between numerical types that may\n@@ -352,7 +352,7 @@ declare_lint! {\n declare_lint! {\n     pub CAST_POSSIBLE_TRUNCATION,\n     Allow,\n-    \"casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, \\\n+    \"casts that may cause truncation of the value, e.g. `x as u8` where `x: u32`, \\\n      or `x as i32` where `x: f32`\"\n }\n \n@@ -376,7 +376,7 @@ declare_lint! {\n declare_lint! {\n     pub CAST_POSSIBLE_WRAP,\n     Allow,\n-    \"casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` \\\n+    \"casts that may cause wrapping around the value, e.g. `x as i32` where `x: u32` \\\n      and `x > i32::MAX`\"\n }\n \n@@ -393,7 +393,7 @@ declare_lint! {\n declare_lint! {\n     pub UNNECESSARY_CAST,\n     Warn,\n-    \"cast to the same type, e.g `x as i32` where `x: i32`\"\n+    \"cast to the same type, e.g. `x as i32` where `x: i32`\"\n }\n \n /// Returns the size in bits of an integral type."}]}