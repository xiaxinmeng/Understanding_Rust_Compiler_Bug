{"sha": "919f434136a00228fa293c47791fee7a6c6df547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOWY0MzQxMzZhMDAyMjhmYTI5M2M0Nzc5MWZlZTdhNmM2ZGY1NDc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T02:47:37Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T04:55:16Z"}, "message": "Rollup merge of #55151 - ljedrz:cleanup_nll, r=estebank\n\nCleanup nll\n\n- improve allocations\n- improve `format!` calls\n- improve common patterns", "tree": {"sha": "dfb8f5f3f162cb9622a49aa9ccc625c7ba0a66f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb8f5f3f162cb9622a49aa9ccc625c7ba0a66f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/919f434136a00228fa293c47791fee7a6c6df547", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvIEjQACgkQ/vbIBR0O\nATwcYRAAujAcjzDajvSIocQqwkthXMdaljXpf/kRINEvjCnUEdhd37zankWIeZ4P\n8B8TzkuDQXiMx7Ec1uV+kh7KS5ah30NpI7WtKY5AqhsguDOtREUYhvfG+JGdgaOJ\nf5KMA52AzOKgAbORzzHGTbZi99fvt2yc8qE1qyjF1o9MfhMl4giznm3MAAPPL95L\nsMmjk5mkTgFcUXHZrXU5w6JN58BPRUIHZ+CKk5AJ4M73bJctclRkwZiIV8G8/WXx\n313ifX0++BbLeGL5feuwNMJLnNx2if/m6vAk4bi/SqISavWgks778dHVFCcY0+kd\nvHxehyk/jt41Q/5E70qR7qW525XqBWob+dwKqy9JbWyHy9/IyjsQrhp7HeG79JcW\n4eSWS67MFd4Io60BEuM/SpQOASHvhvruB3NwTo4lAOOf44ee2f6OE7ufrTg/U8om\nZxNGReFQDeKsoiOj3deVRglVJ+tLwgI0gMCd9gAWKuvL5pHsGzsqub/6M4zI8h8d\nAAfECqIykj04LYxYYaD74lQj9PkSm3F9o3o2Wkkg2tfxAP1V8wuk0kvvCxlY51KD\nBogrQqeKOS8/RUHSlmSMqKgRdMHVb79dPgzsfTRVK/1yekJXUj/HGkdRt+EzeBZx\nODf84RBcytFr3JJ/907KqNVKwQn+ozrRf5d3ryAsU9Xx4BFJQjc=\n=5J5L\n-----END PGP SIGNATURE-----", "payload": "tree dfb8f5f3f162cb9622a49aa9ccc625c7ba0a66f5\nparent 89b7ccf4075acd29b611cf6f565229bf2c134e36\nparent ffecbc5e1027aab54402817dd1874c715ec9ba05\nauthor kennytm <kennytm@gmail.com> 1539830857 +0800\ncommitter kennytm <kennytm@gmail.com> 1539838516 +0800\n\nRollup merge of #55151 - ljedrz:cleanup_nll, r=estebank\n\nCleanup nll\n\n- improve allocations\n- improve `format!` calls\n- improve common patterns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/919f434136a00228fa293c47791fee7a6c6df547", "html_url": "https://github.com/rust-lang/rust/commit/919f434136a00228fa293c47791fee7a6c6df547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/919f434136a00228fa293c47791fee7a6c6df547/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b7ccf4075acd29b611cf6f565229bf2c134e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b7ccf4075acd29b611cf6f565229bf2c134e36", "html_url": "https://github.com/rust-lang/rust/commit/89b7ccf4075acd29b611cf6f565229bf2c134e36"}, {"sha": "ffecbc5e1027aab54402817dd1874c715ec9ba05", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffecbc5e1027aab54402817dd1874c715ec9ba05", "html_url": "https://github.com/rust-lang/rust/commit/ffecbc5e1027aab54402817dd1874c715ec9ba05"}], "stats": {"total": 105, "additions": 51, "deletions": 54}, "files": [{"sha": "495e84528a3c3266d0eb8f9b34dba6158a00248a", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=919f434136a00228fa293c47791fee7a6c6df547", "patch": "@@ -141,6 +141,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n         if let Some(all_facts) = self.all_facts {\n             if let Place::Local(temp) = place {\n                 if let Some(borrow_indices) = self.borrow_set.local_map.get(temp) {\n+                    all_facts.killed.reserve(borrow_indices.len());\n                     for &borrow_index in borrow_indices {\n                         let location_index = self.location_table.mid_index(location);\n                         all_facts.killed.push((borrow_index, location_index));\n@@ -164,7 +165,9 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n                 self.location_table.mid_index(location),\n             ));\n \n-            for successor_block in terminator.successors() {\n+            let successor_blocks = terminator.successors();\n+            all_facts.cfg_edge.reserve(successor_blocks.size_hint().0);\n+            for successor_block in successor_blocks {\n                 all_facts.cfg_edge.push((\n                     self.location_table.mid_index(location),\n                     self.location_table"}, {"sha": "a0f832c54493430ff52b70f6d362e2457b4f73cb", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=919f434136a00228fa293c47791fee7a6c6df547", "patch": "@@ -87,9 +87,9 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                     // Otherwise, just report the whole type (and use\n                     // the intentionally fuzzy phrase \"destructor\")\n                     ty::Closure(..) =>\n-                        (\"destructor\", format!(\"closure\")),\n+                        (\"destructor\", \"closure\".to_owned()),\n                     ty::Generator(..) =>\n-                        (\"destructor\", format!(\"generator\")),\n+                        (\"destructor\", \"generator\".to_owned()),\n \n                     _ => (\"destructor\", format!(\"type `{}`\", local_decl.ty)),\n                 };\n@@ -279,9 +279,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         pending_locations.push(target.start_location());\n                     },\n                     TerminatorKind::SwitchInt { ref targets, .. } => {\n-                        for target in targets {\n-                            pending_locations.push(target.start_location());\n-                        }\n+                        pending_locations.extend(\n+                            targets.into_iter().map(|target| target.start_location()));\n                     },\n                     TerminatorKind::Drop { target, unwind, .. } |\n                     TerminatorKind::DropAndReplace { target, unwind, .. } |\n@@ -303,9 +302,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     },\n                     TerminatorKind::FalseEdges { real_target, ref imaginary_targets, .. } => {\n                         pending_locations.push(real_target.start_location());\n-                        for target in imaginary_targets {\n-                            pending_locations.push(target.start_location());\n-                        }\n+                        pending_locations.extend(\n+                            imaginary_targets.into_iter().map(|target| target.start_location()));\n                     },\n                     _ => {},\n                 }\n@@ -441,17 +439,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             Operand::Move(Place::Local(from)) if *from == target => {\n                                 debug!(\"was_captured_by_trait_object: ty={:?}\", ty);\n                                 // Check the type for a trait object.\n-                                match ty.sty {\n+                                return match ty.sty {\n                                     // `&dyn Trait`\n-                                    ty::TyKind::Ref(_, ty, _) if ty.is_trait() => return true,\n+                                    ty::TyKind::Ref(_, ty, _) if ty.is_trait() => true,\n                                     // `Box<dyn Trait>`\n                                     _ if ty.is_box() && ty.boxed_ty().is_trait() =>\n-                                        return true,\n+                                        true,\n                                     // `dyn Trait`\n-                                    _ if ty.is_trait() => return true,\n+                                    _ if ty.is_trait() => true,\n                                     // Anything else.\n-                                    _ => return false,\n-                                }\n+                                    _ => false,\n+                                };\n                             },\n                             _ => return false,\n                         },\n@@ -466,32 +464,29 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 let terminator = block.terminator();\n                 debug!(\"was_captured_by_trait_object: terminator={:?}\", terminator);\n \n-                match &terminator.kind {\n-                    TerminatorKind::Call {\n-                        destination: Some((Place::Local(dest), block)),\n-                        args,\n-                        ..\n-                    } => {\n-                        debug!(\n-                            \"was_captured_by_trait_object: target={:?} dest={:?} args={:?}\",\n-                            target, dest, args\n-                        );\n-                        // Check if one of the arguments to this function is the target place.\n-                        let found_target = args.iter().any(|arg| {\n-                            if let Operand::Move(Place::Local(potential)) = arg {\n-                                *potential == target\n-                            } else {\n-                                false\n-                            }\n-                        });\n-\n-                        // If it is, follow this to the next block and update the target.\n-                        if found_target {\n-                            target = *dest;\n-                            queue.push(block.start_location());\n+                if let TerminatorKind::Call {\n+                    destination: Some((Place::Local(dest), block)),\n+                    args,\n+                    ..\n+                } = &terminator.kind {\n+                    debug!(\n+                        \"was_captured_by_trait_object: target={:?} dest={:?} args={:?}\",\n+                        target, dest, args\n+                    );\n+                    // Check if one of the arguments to this function is the target place.\n+                    let found_target = args.iter().any(|arg| {\n+                        if let Operand::Move(Place::Local(potential)) = arg {\n+                            *potential == target\n+                        } else {\n+                            false\n                         }\n-                    },\n-                    _ => {},\n+                    });\n+\n+                    // If it is, follow this to the next block and update the target.\n+                    if found_target {\n+                        target = *dest;\n+                        queue.push(block.start_location());\n+                    }\n                 }\n             }\n "}, {"sha": "002f35880ae6b92d1dda52012b3f8cab6e747c89", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=919f434136a00228fa293c47791fee7a6c6df547", "patch": "@@ -35,7 +35,7 @@ pub(super) fn generate_invalidates<'cx, 'gcx, 'tcx>(\n     mir: &Mir<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n ) {\n-    if !all_facts.is_some() {\n+    if all_facts.is_none() {\n         // Nothing to do if we don't have any facts\n         return;\n     }"}, {"sha": "268a37c70868151cb34455724fb96806b666a6ca", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=919f434136a00228fa293c47791fee7a6c6df547", "patch": "@@ -36,12 +36,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 let outlived_by = self.universal_region_relations.regions_outlived_by(region);\n                 writeln!(\n                     out,\n-                    \"| {r:rw$} | {c:cw$} | {ob}\",\n-                    r = format!(\"{:?}\", region),\n+                    \"| {r:rw$?} | {c:cw$?} | {ob:?}\",\n+                    r = region,\n                     rw = REGION_WIDTH,\n-                    c = format!(\"{:?}\", classification),\n+                    c = classification,\n                     cw = 8, // \"External\" at most\n-                    ob = format!(\"{:?}\", outlived_by)\n+                    ob = outlived_by\n                 )?;\n             }\n         }\n@@ -51,8 +51,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         for region in self.regions() {\n             writeln!(\n                 out,\n-                \"| {r:rw$} | {ui:4?} | {v}\",\n-                r = format!(\"{:?}\", region),\n+                \"| {r:rw$?} | {ui:4?} | {v}\",\n+                r = region,\n                 rw = REGION_WIDTH,\n                 ui = self.region_universe(region),\n                 v = self.region_value_str(region),"}, {"sha": "5ff50c606d641c6e17e143a1ec3f8650f1dbe091", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=919f434136a00228fa293c47791fee7a6c6df547", "patch": "@@ -550,7 +550,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     let span = infcx.tcx.def_span(*did);\n                     if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n                         let suggestable_fr_name = if fr_name.was_named() {\n-                            format!(\"{}\", fr_name)\n+                            fr_name.to_string()\n                         } else {\n                             \"'_\".to_string()\n                         };"}, {"sha": "e07dfda406b19052ad87487f2a148204b07bcb6e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/919f434136a00228fa293c47791fee7a6c6df547/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=919f434136a00228fa293c47791fee7a6c6df547", "patch": "@@ -462,9 +462,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         argument_hir_ty: &hir::Ty,\n         counter: &mut usize,\n     ) -> Option<RegionName> {\n-        let search_stack: &mut Vec<(Ty<'tcx>, &hir::Ty)> = &mut Vec::new();\n-\n-        search_stack.push((argument_ty, argument_hir_ty));\n+        let search_stack: &mut Vec<(Ty<'tcx>, &hir::Ty)> =\n+            &mut vec![(argument_ty, argument_hir_ty)];\n \n         while let Some((ty, hir_ty)) = search_stack.pop() {\n             match (&ty.sty, &hir_ty.node) {\n@@ -567,10 +566,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             | hir::LifetimeName::Underscore => {\n                 let region_name = self.synthesize_region_name(counter);\n                 let ampersand_span = lifetime.span;\n-                return Some(RegionName {\n+                Some(RegionName {\n                     name: region_name,\n                     source: RegionNameSource::MatchedAdtAndSegment(ampersand_span),\n-                });\n+                })\n             }\n \n             hir::LifetimeName::Implicit => {\n@@ -585,7 +584,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 // T>`. We don't consider this a match; instead we let\n                 // the \"fully elaborated\" type fallback above handle\n                 // it.\n-                return None;\n+                None\n             }\n         }\n     }"}]}