{"sha": "1b800a567165ab4395daa82e215eaed84be5c8dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODAwYTU2NzE2NWFiNDM5NWRhYTgyZTIxNWVhZWQ4NGJlNWM4ZGM=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-21T09:30:14Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-01-21T09:30:14Z"}, "message": "trade in outdated comments for correct ones", "tree": {"sha": "c8b335848e3f2c43647f23a839dac28d2be0cfd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b335848e3f2c43647f23a839dac28d2be0cfd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b800a567165ab4395daa82e215eaed84be5c8dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b800a567165ab4395daa82e215eaed84be5c8dc", "html_url": "https://github.com/rust-lang/rust/commit/1b800a567165ab4395daa82e215eaed84be5c8dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b800a567165ab4395daa82e215eaed84be5c8dc/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e90840a6ae4a6f61781bd80adea825d156ddffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e90840a6ae4a6f61781bd80adea825d156ddffa", "html_url": "https://github.com/rust-lang/rust/commit/9e90840a6ae4a6f61781bd80adea825d156ddffa"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "37501a51e16e3ca6c882eb1b4750a348fc606bf5", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b800a567165ab4395daa82e215eaed84be5c8dc/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b800a567165ab4395daa82e215eaed84be5c8dc/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=1b800a567165ab4395daa82e215eaed84be5c8dc", "patch": "@@ -392,7 +392,6 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     /// Borrows a view into the values stored in the node.\n     /// The caller must ensure that the node is not the shared root.\n-    /// This function is not public, so doesn't have to support shared roots like `keys` does.\n     fn vals(&self) -> &[V] {\n         self.reborrow().into_val_slice()\n     }\n@@ -510,7 +509,6 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     }\n \n     /// The caller must ensure that the node is not the shared root.\n-    /// This function is not public, so doesn't have to support shared roots like `keys` does.\n     fn keys_mut(&mut self) -> &mut [K] {\n         unsafe { self.reborrow_mut().into_key_slice_mut() }\n     }\n@@ -522,6 +520,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n }\n \n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n+    /// The caller must ensure that the node is not the shared root.\n     fn into_key_slice(self) -> &'a [K] {\n         debug_assert!(!self.is_shared_root());\n         // We cannot be the shared root, so `as_leaf` is okay.\n@@ -535,6 +534,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n         unsafe { slice::from_raw_parts(MaybeUninit::first_ptr(&self.as_leaf().vals), self.len()) }\n     }\n \n+    /// The caller must ensure that the node is not the shared root.\n     fn into_slices(self) -> (&'a [K], &'a [V]) {\n         let k = unsafe { ptr::read(&self) };\n         (k.into_key_slice(), self.into_val_slice())"}]}