{"sha": "94b6bf240a2e78c2f97d33adf433d0c9c03a11c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjZiZjI0MGEyZTc4YzJmOTdkMzNhZGY0MzNkMGM5YzAzYTExYzQ=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-02-19T07:23:03Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-02-19T07:23:03Z"}, "message": "reduced some code repetitions.", "tree": {"sha": "20e978c37eebff5cf35d58fb56cc011d11c6e778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e978c37eebff5cf35d58fb56cc011d11c6e778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b6bf240a2e78c2f97d33adf433d0c9c03a11c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b6bf240a2e78c2f97d33adf433d0c9c03a11c4", "html_url": "https://github.com/rust-lang/rust/commit/94b6bf240a2e78c2f97d33adf433d0c9c03a11c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b6bf240a2e78c2f97d33adf433d0c9c03a11c4/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "url": "https://api.github.com/repos/rust-lang/rust/commits/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b", "html_url": "https://github.com/rust-lang/rust/commit/32471f7ea4ca5a9218d86cf8b1d8f85919dc096b"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "c6902ddb3c6a65775a1fef69db5076497bafc14f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94b6bf240a2e78c2f97d33adf433d0c9c03a11c4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b6bf240a2e78c2f97d33adf433d0c9c03a11c4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=94b6bf240a2e78c2f97d33adf433d0c9c03a11c4", "patch": "@@ -10,6 +10,7 @@ use rustc::mir::interpret::{\n     GlobalId, AllocId, InboundsCheck,\n     ConstValue, Pointer, Scalar,\n     EvalResult, EvalErrorKind,\n+    sign_extend, truncate,\n };\n use super::{\n     EvalContext, Machine, AllocMap, Allocation, AllocationExtra,\n@@ -633,20 +634,17 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     Err(_) => return err!(InvalidDiscriminant(raw_discr.erase_tag())),\n                 };\n                 let real_discr = if discr_val.layout.ty.is_signed() {\n-                    let i = bits_discr as i128;\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the layout discriminant\n-                    let shift = 128 - discr_val.layout.size.bits();\n-                    let sexted = (i << shift) >> shift;\n+                    let sexted = sign_extend(bits_discr, discr_val.layout.size) as i128;\n                     // and then zeroing with the typeck discriminant type\n                     let discr_ty = rval.layout.ty\n                         .ty_adt_def().expect(\"tagged layout corresponds to adt\")\n                         .repr\n                         .discr_type();\n-                    let discr_ty = layout::Integer::from_attr(self, discr_ty);\n-                    let shift = 128 - discr_ty.size().bits();\n+                    let size = layout::Integer::from_attr(self, discr_ty).size();\n                     let truncatee = sexted as u128;\n-                    (truncatee << shift) >> shift\n+                    truncate(truncatee, size)\n                 } else {\n                     bits_discr\n                 };"}]}