{"sha": "fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "node_id": "C_kwDOAAsO6NoAKGZhNmRiY2YyMGRhMTFlM2FmNGQ4ZDY0OTRlNThkMWI1YTYwYjM5YWI", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2022-03-21T05:57:10Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-09-11T06:04:16Z"}, "message": "Add feature gate tests for generator_clone", "tree": {"sha": "4d9154b9f289b077aaa8621e235333df356f50ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9154b9f289b077aaa8621e235333df356f50ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "html_url": "https://github.com/rust-lang/rust/commit/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f4bbb20f373b0c3d47788f58c95d60656918f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f4bbb20f373b0c3d47788f58c95d60656918f2", "html_url": "https://github.com/rust-lang/rust/commit/22f4bbb20f373b0c3d47788f58c95d60656918f2"}], "stats": {"total": 284, "additions": 284, "deletions": 0}, "files": [{"sha": "55ed0f281e0505288fdad75b93ac95ef7d9c20ea", "filename": "src/test/ui/generator/clone-impl-static.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-static.rs?ref=fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "patch": "@@ -0,0 +1,17 @@\n+// gate-test-generator_clone\n+// Verifies that static generators cannot be cloned/copied.\n+\n+#![feature(generators, generator_clone)]\n+\n+fn main() {\n+    let gen = static move || {\n+        yield;\n+    };\n+    check_copy(&gen);\n+    //~^ ERROR Copy` is not satisfied\n+    check_clone(&gen);\n+    //~^ ERROR Clone` is not satisfied\n+}\n+\n+fn check_copy<T: Copy>(_x: &T) {}\n+fn check_clone<T: Clone>(_x: &T) {}"}, {"sha": "cc15c4afd77933f57543ecf870eb308aac6f48ab", "filename": "src/test/ui/generator/clone-impl-static.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl-static.stderr?ref=fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "patch": "@@ -0,0 +1,31 @@\n+error[E0277]: the trait bound `[static generator@$DIR/clone-impl-static.rs:7:15: 9:6]: Copy` is not satisfied\n+  --> $DIR/clone-impl-static.rs:10:16\n+   |\n+LL |     check_copy(&gen);\n+   |     ---------- ^^^^ the trait `Copy` is not implemented for `[static generator@$DIR/clone-impl-static.rs:7:15: 9:6]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl-static.rs:16:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `[static generator@$DIR/clone-impl-static.rs:7:15: 9:6]: Clone` is not satisfied\n+  --> $DIR/clone-impl-static.rs:12:17\n+   |\n+LL |     check_clone(&gen);\n+   |     ----------- ^^^^ the trait `Clone` is not implemented for `[static generator@$DIR/clone-impl-static.rs:7:15: 9:6]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl-static.rs:17:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cbfd65a530998d3f426dfdd17b01da8b3b66fed7", "filename": "src/test/ui/generator/clone-impl.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl.rs?ref=fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "patch": "@@ -0,0 +1,73 @@\n+// gate-test-generator_clone\n+// Verifies that non-static generators can be cloned/copied if all their upvars and locals held\n+// across awaits can be cloned/copied.\n+\n+#![feature(generators, generator_clone)]\n+\n+struct NonClone;\n+\n+fn main() {\n+    let copyable: u32 = 123;\n+    let clonable_0: Vec<u32> = Vec::new();\n+    let clonable_1: Vec<u32> = Vec::new();\n+    let non_clonable: NonClone = NonClone;\n+\n+    let gen_copy_0 = move || {\n+        yield;\n+        drop(copyable);\n+    };\n+    check_copy(&gen_copy_0);\n+    check_clone(&gen_copy_0);\n+    let gen_copy_1 = move || {\n+        /*\n+        let v = vec!['a'];\n+        let n = NonClone;\n+        drop(v);\n+        drop(n);\n+        */\n+        yield;\n+        let v = vec!['a'];\n+        let n = NonClone;\n+        drop(n);\n+        drop(copyable);\n+    };\n+    check_copy(&gen_copy_1);\n+    check_clone(&gen_copy_1);\n+    let gen_clone_0 = move || {\n+        let v = vec!['a'];\n+        yield;\n+        drop(v);\n+        drop(clonable_0);\n+    };\n+    check_copy(&gen_clone_0);\n+    //~^ ERROR the trait bound `Vec<u32>: Copy` is not satisfied\n+    //~| ERROR the trait bound `Vec<char>: Copy` is not satisfied\n+    check_clone(&gen_clone_0);\n+    let gen_clone_1 = move || {\n+        let v = vec!['a'];\n+        /*\n+        let n = NonClone;\n+        drop(n);\n+        */\n+        yield;\n+        let n = NonClone;\n+        drop(n);\n+        drop(v);\n+        drop(clonable_1);\n+    };\n+    check_copy(&gen_clone_1);\n+    //~^ ERROR the trait bound `Vec<u32>: Copy` is not satisfied\n+    //~| ERROR the trait bound `Vec<char>: Copy` is not satisfied\n+    check_clone(&gen_clone_1);\n+    let gen_non_clone = move || {\n+        yield;\n+        drop(non_clonable);\n+    };\n+    check_copy(&gen_non_clone);\n+    //~^ ERROR the trait bound `NonClone: Copy` is not satisfied\n+    check_clone(&gen_non_clone);\n+    //~^ ERROR the trait bound `NonClone: Clone` is not satisfied\n+}\n+\n+fn check_copy<T: Copy>(_x: &T) {}\n+fn check_clone<T: Clone>(_x: &T) {}"}, {"sha": "407927fb3bc24ee1cb2a082c2ce0c9c17cb4fba2", "filename": "src/test/ui/generator/clone-impl.stderr", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fclone-impl.stderr?ref=fa6dbcf20da11e3af4d8d6494e58d1b5a60b39ab", "patch": "@@ -0,0 +1,163 @@\n+error[E0277]: the trait bound `Vec<u32>: Copy` is not satisfied in `[generator@$DIR/clone-impl.rs:36:23: 41:6]`\n+  --> $DIR/clone-impl.rs:42:5\n+   |\n+LL |       let gen_clone_0 = move || {\n+   |  _______________________-\n+LL | |         let v = vec!['a'];\n+LL | |         yield;\n+LL | |         drop(v);\n+LL | |         drop(clonable_0);\n+LL | |     };\n+   | |_____- within this `[generator@$DIR/clone-impl.rs:36:23: 41:6]`\n+LL |       check_copy(&gen_clone_0);\n+   |       ^^^^^^^^^^ within `[generator@$DIR/clone-impl.rs:36:23: 41:6]`, the trait `Copy` is not implemented for `Vec<u32>`\n+   |\n+note: captured value does not implement `Copy`\n+  --> $DIR/clone-impl.rs:40:14\n+   |\n+LL |         drop(clonable_0);\n+   |              ^^^^^^^^^^ has type `Vec<u32>` which does not implement `Copy`\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl.rs:72:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `Vec<char>: Copy` is not satisfied in `[generator@$DIR/clone-impl.rs:36:23: 41:6]`\n+  --> $DIR/clone-impl.rs:42:5\n+   |\n+LL |       let gen_clone_0 = move || {\n+   |  _______________________-\n+LL | |         let v = vec!['a'];\n+LL | |         yield;\n+LL | |         drop(v);\n+LL | |         drop(clonable_0);\n+LL | |     };\n+   | |_____- within this `[generator@$DIR/clone-impl.rs:36:23: 41:6]`\n+LL |       check_copy(&gen_clone_0);\n+   |       ^^^^^^^^^^ within `[generator@$DIR/clone-impl.rs:36:23: 41:6]`, the trait `Copy` is not implemented for `Vec<char>`\n+   |\n+note: generator does not implement `Copy` as this value is used across a yield\n+  --> $DIR/clone-impl.rs:38:9\n+   |\n+LL |         let v = vec!['a'];\n+   |             - has type `Vec<char>` which does not implement `Copy`\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `v` maybe used later\n+...\n+LL |     };\n+   |     - `v` is later dropped here\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl.rs:72:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `Vec<u32>: Copy` is not satisfied in `[generator@$DIR/clone-impl.rs:46:23: 57:6]`\n+  --> $DIR/clone-impl.rs:58:5\n+   |\n+LL |       let gen_clone_1 = move || {\n+   |  _______________________-\n+LL | |         let v = vec!['a'];\n+LL | |         /*\n+LL | |         let n = NonClone;\n+...  |\n+LL | |         drop(clonable_1);\n+LL | |     };\n+   | |_____- within this `[generator@$DIR/clone-impl.rs:46:23: 57:6]`\n+LL |       check_copy(&gen_clone_1);\n+   |       ^^^^^^^^^^ within `[generator@$DIR/clone-impl.rs:46:23: 57:6]`, the trait `Copy` is not implemented for `Vec<u32>`\n+   |\n+note: captured value does not implement `Copy`\n+  --> $DIR/clone-impl.rs:56:14\n+   |\n+LL |         drop(clonable_1);\n+   |              ^^^^^^^^^^ has type `Vec<u32>` which does not implement `Copy`\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl.rs:72:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `Vec<char>: Copy` is not satisfied in `[generator@$DIR/clone-impl.rs:46:23: 57:6]`\n+  --> $DIR/clone-impl.rs:58:5\n+   |\n+LL |       let gen_clone_1 = move || {\n+   |  _______________________-\n+LL | |         let v = vec!['a'];\n+LL | |         /*\n+LL | |         let n = NonClone;\n+...  |\n+LL | |         drop(clonable_1);\n+LL | |     };\n+   | |_____- within this `[generator@$DIR/clone-impl.rs:46:23: 57:6]`\n+LL |       check_copy(&gen_clone_1);\n+   |       ^^^^^^^^^^ within `[generator@$DIR/clone-impl.rs:46:23: 57:6]`, the trait `Copy` is not implemented for `Vec<char>`\n+   |\n+note: generator does not implement `Copy` as this value is used across a yield\n+  --> $DIR/clone-impl.rs:52:9\n+   |\n+LL |         let v = vec!['a'];\n+   |             - has type `Vec<char>` which does not implement `Copy`\n+...\n+LL |         yield;\n+   |         ^^^^^ yield occurs here, with `v` maybe used later\n+...\n+LL |     };\n+   |     - `v` is later dropped here\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl.rs:72:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `NonClone: Copy` is not satisfied in `[generator@$DIR/clone-impl.rs:62:25: 65:6]`\n+  --> $DIR/clone-impl.rs:66:5\n+   |\n+LL |       let gen_non_clone = move || {\n+   |  _________________________-\n+LL | |         yield;\n+LL | |         drop(non_clonable);\n+LL | |     };\n+   | |_____- within this `[generator@$DIR/clone-impl.rs:62:25: 65:6]`\n+LL |       check_copy(&gen_non_clone);\n+   |       ^^^^^^^^^^ within `[generator@$DIR/clone-impl.rs:62:25: 65:6]`, the trait `Copy` is not implemented for `NonClone`\n+   |\n+note: captured value does not implement `Copy`\n+  --> $DIR/clone-impl.rs:64:14\n+   |\n+LL |         drop(non_clonable);\n+   |              ^^^^^^^^^^^^ has type `NonClone` which does not implement `Copy`\n+note: required by a bound in `check_copy`\n+  --> $DIR/clone-impl.rs:72:18\n+   |\n+LL | fn check_copy<T: Copy>(_x: &T) {}\n+   |                  ^^^^ required by this bound in `check_copy`\n+\n+error[E0277]: the trait bound `NonClone: Clone` is not satisfied in `[generator@$DIR/clone-impl.rs:62:25: 65:6]`\n+  --> $DIR/clone-impl.rs:68:5\n+   |\n+LL |       let gen_non_clone = move || {\n+   |  _________________________-\n+LL | |         yield;\n+LL | |         drop(non_clonable);\n+LL | |     };\n+   | |_____- within this `[generator@$DIR/clone-impl.rs:62:25: 65:6]`\n+...\n+LL |       check_clone(&gen_non_clone);\n+   |       ^^^^^^^^^^^ within `[generator@$DIR/clone-impl.rs:62:25: 65:6]`, the trait `Clone` is not implemented for `NonClone`\n+   |\n+note: captured value does not implement `Clone`\n+  --> $DIR/clone-impl.rs:64:14\n+   |\n+LL |         drop(non_clonable);\n+   |              ^^^^^^^^^^^^ has type `NonClone` which does not implement `Clone`\n+note: required by a bound in `check_clone`\n+  --> $DIR/clone-impl.rs:73:19\n+   |\n+LL | fn check_clone<T: Clone>(_x: &T) {}\n+   |                   ^^^^^ required by this bound in `check_clone`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}