{"sha": "3358fb11da258007d26cc27364455c610088d630", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNThmYjExZGEyNTgwMDdkMjZjYzI3MzY0NDU1YzYxMDA4OGQ2MzA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-02T20:21:24Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-24T01:34:14Z"}, "message": "Fix the visibility of extern crate declarations and stop warning on pub extern crate", "tree": {"sha": "e9259eecae9f108c6abcdbc015ae82fcd936eaaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9259eecae9f108c6abcdbc015ae82fcd936eaaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3358fb11da258007d26cc27364455c610088d630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3358fb11da258007d26cc27364455c610088d630", "html_url": "https://github.com/rust-lang/rust/commit/3358fb11da258007d26cc27364455c610088d630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3358fb11da258007d26cc27364455c610088d630/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3929b2c8a472244d448feb24f52bf91246d3e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3929b2c8a472244d448feb24f52bf91246d3e82", "html_url": "https://github.com/rust-lang/rust/commit/d3929b2c8a472244d448feb24f52bf91246d3e82"}], "stats": {"total": 141, "additions": 80, "deletions": 61}, "files": [{"sha": "385fae46cbae8672a5dc3101736df813a50f88b6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3358fb11da258007d26cc27364455c610088d630/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3358fb11da258007d26cc27364455c610088d630/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=3358fb11da258007d26cc27364455c610088d630", "patch": "@@ -293,9 +293,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     self.external_exports.insert(def_id);\n                     let parent_link = ModuleParentLink(parent, name);\n                     let def = Def::Mod(def_id);\n-                    let external_module = self.new_extern_crate_module(parent_link, def);\n+                    let local_def_id = self.ast_map.local_def_id(item.id);\n+                    let external_module =\n+                        self.new_extern_crate_module(parent_link, def, is_public, local_def_id);\n                     self.define(parent, name, TypeNS, (external_module, sp));\n \n+                    if is_public {\n+                        let export = Export { name: name, def_id: def_id };\n+                        if let Some(def_id) = parent.def_id() {\n+                            let node_id = self.resolver.ast_map.as_local_node_id(def_id).unwrap();\n+                            self.export_map.entry(node_id).or_insert(Vec::new()).push(export);\n+                        }\n+                    }\n+\n                     self.build_reduced_graph_for_external_crate(external_module);\n                 }\n                 parent"}, {"sha": "3e2837f023ddb1200ea4dd8c72ed0a5dc313b6d3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3358fb11da258007d26cc27364455c610088d630/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3358fb11da258007d26cc27364455c610088d630/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3358fb11da258007d26cc27364455c610088d630", "patch": "@@ -806,7 +806,10 @@ pub struct ModuleS<'a> {\n     parent_link: ParentLink<'a>,\n     def: Option<Def>,\n     is_public: bool,\n-    is_extern_crate: bool,\n+\n+    // If the module is an extern crate, `def` is root of the external crate and `extern_crate_did`\n+    // is the DefId of the local `extern crate` item (otherwise, `extern_crate_did` is None).\n+    extern_crate_did: Option<DefId>,\n \n     resolutions: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n     unresolved_imports: RefCell<Vec<ImportDirective>>,\n@@ -853,7 +856,7 @@ impl<'a> ModuleS<'a> {\n             parent_link: parent_link,\n             def: def,\n             is_public: is_public,\n-            is_extern_crate: false,\n+            extern_crate_did: None,\n             resolutions: RefCell::new(HashMap::new()),\n             unresolved_imports: RefCell::new(Vec::new()),\n             module_children: RefCell::new(NodeMap()),\n@@ -917,6 +920,16 @@ impl<'a> ModuleS<'a> {\n         self.def.as_ref().map(Def::def_id)\n     }\n \n+    // This returns the DefId of the crate local item that controls this module's visibility.\n+    // It is only used to compute `LastPrivate` data, and it differs from `def_id` only for extern\n+    // crates, whose `def_id` is the external crate's root, not the local `extern crate` item.\n+    fn local_def_id(&self) -> Option<DefId> {\n+        match self.extern_crate_did {\n+            Some(def_id) => Some(def_id),\n+            None => self.def_id(),\n+        }\n+    }\n+\n     fn is_normal(&self) -> bool {\n         match self.def {\n             Some(Def::Mod(_)) | Some(Def::ForeignMod(_)) => true,\n@@ -1027,6 +1040,14 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n+    fn local_def_id(&self) -> Option<DefId> {\n+        match self.kind {\n+            NameBindingKind::Def(def) => Some(def.def_id()),\n+            NameBindingKind::Module(ref module) => module.local_def_id(),\n+            NameBindingKind::Import { binding, .. } => binding.local_def_id(),\n+        }\n+    }\n+\n     fn defined_with(&self, modifiers: DefModifiers) -> bool {\n         self.modifiers.contains(modifiers)\n     }\n@@ -1038,11 +1059,12 @@ impl<'a> NameBinding<'a> {\n     fn def_and_lp(&self) -> (Def, LastPrivate) {\n         let def = self.def().unwrap();\n         if let Def::Err = def { return (def, LastMod(AllPublic)) }\n-        (def, LastMod(if self.is_public() { AllPublic } else { DependsOn(def.def_id()) }))\n+        let lp = if self.is_public() { AllPublic } else { DependsOn(self.local_def_id().unwrap()) };\n+        (def, LastMod(lp))\n     }\n \n     fn is_extern_crate(&self) -> bool {\n-        self.module().map(|module| module.is_extern_crate).unwrap_or(false)\n+        self.module().and_then(|module| module.extern_crate_did).is_some()\n     }\n \n     fn is_import(&self) -> bool {\n@@ -1236,9 +1258,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         self.arenas.name_bindings.alloc(name_binding)\n     }\n \n-    fn new_extern_crate_module(&self, parent_link: ParentLink<'a>, def: Def) -> Module<'a> {\n-        let mut module = ModuleS::new(parent_link, Some(def), false, true);\n-        module.is_extern_crate = true;\n+    fn new_extern_crate_module(&self,\n+                               parent_link: ParentLink<'a>,\n+                               def: Def,\n+                               is_public: bool,\n+                               local_def: DefId)\n+                               -> Module<'a> {\n+        let mut module = ModuleS::new(parent_link, Some(def), false, is_public);\n+        module.extern_crate_did = Some(local_def);\n         self.arenas.modules.alloc(module)\n     }\n \n@@ -1357,7 +1384,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         // Keep track of the closest private module used\n                         // when resolving this import chain.\n                         if !binding.is_public() {\n-                            if let Some(did) = search_module.def_id() {\n+                            if let Some(did) = search_module.local_def_id() {\n                                 closest_private = LastMod(DependsOn(did));\n                             }\n                         }\n@@ -1462,7 +1489,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Success(PrefixFound(ref containing_module, index)) => {\n                 search_module = containing_module;\n                 start_index = index;\n-                last_private = LastMod(DependsOn(containing_module.def_id()\n+                last_private = LastMod(DependsOn(containing_module.local_def_id()\n                                                                   .unwrap()));\n             }\n         }\n@@ -3571,7 +3598,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                     if !in_module_is_extern || name_binding.is_public() {\n                         // add the module to the lookup\n-                        let is_extern = in_module_is_extern || module.is_extern_crate;\n+                        let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n                         worklist.push((module, path_segments, is_extern));\n                     }\n                 }"}, {"sha": "4cefffce777f7c460e2fa6daf0af8e8d7c424aba", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3358fb11da258007d26cc27364455c610088d630/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3358fb11da258007d26cc27364455c610088d630/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=3358fb11da258007d26cc27364455c610088d630", "patch": "@@ -402,7 +402,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             }\n \n             (_, &Success(name_binding)) if !name_binding.is_import() && directive.is_public => {\n-                if !name_binding.is_public() {\n+                // Disallow reexporting private items, excepting extern crates.\n+                if !name_binding.is_public() && !name_binding.is_extern_crate() {\n                     let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n                     let note_msg =\n                         format!(\"Consider declaring type or module `{}` with `pub`\", source);\n@@ -441,9 +442,9 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         module_.decrement_outstanding_references_for(target, TypeNS);\n \n         let def_and_priv = |binding: &NameBinding| {\n-            let def = binding.def().unwrap();\n-            let last_private = if binding.is_public() { lp } else { DependsOn(def.def_id()) };\n-            (def, last_private)\n+            let last_private =\n+                if binding.is_public() { lp } else { DependsOn(binding.local_def_id().unwrap()) };\n+            (binding.def().unwrap(), last_private)\n         };\n         let value_def_and_priv = value_result.success().map(&def_and_priv);\n         let type_def_and_priv = type_result.success().map(&def_and_priv);\n@@ -493,7 +494,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         build_reduced_graph::populate_module_if_necessary(self.resolver, target_module);\n         target_module.for_each_child(|name, ns, binding| {\n             if !binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) { return }\n-            if binding.is_extern_crate() { return }\n             self.define(module_, name, ns, directive.import(binding));\n \n             if ns == TypeNS && directive.is_public &&"}, {"sha": "999ae036ebbd3d3bbfeb20a6a5114db1c05823da", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3358fb11da258007d26cc27364455c610088d630/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3358fb11da258007d26cc27364455c610088d630/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3358fb11da258007d26cc27364455c610088d630", "patch": "@@ -5487,13 +5487,6 @@ impl<'a> Parser<'a> {\n         try!(self.expect(&token::Semi));\n \n         let last_span = self.last_span;\n-\n-        if visibility == ast::Visibility::Public {\n-            self.span_warn(mk_sp(lo, last_span.hi),\n-                           \"`pub extern crate` does not work as expected and should not be used. \\\n-                            Likely to become an error. Prefer `extern crate` and `pub use`.\");\n-        }\n-\n         Ok(self.mk_item(lo,\n                         last_span.hi,\n                         ident,"}, {"sha": "fd97f210a551419d954808670eafc1509ed0a91e", "filename": "src/test/auxiliary/privacy_reexport.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3358fb11da258007d26cc27364455c610088d630/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3358fb11da258007d26cc27364455c610088d630/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs?ref=3358fb11da258007d26cc27364455c610088d630", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub extern crate core;\n pub use foo as bar;\n \n pub mod foo {"}, {"sha": "95eeb60c1ea7e5f38595653ac2443f5500cd56ca", "filename": "src/test/compile-fail/extern-crate-visibility.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3358fb11da258007d26cc27364455c610088d630/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3358fb11da258007d26cc27364455c610088d630/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs?ref=3358fb11da258007d26cc27364455c610088d630", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    extern crate core;\n+    pub use self::core as reexported_core; // Check that private extern crates can be reexported\n+}\n+\n+// Check that private crates cannot be used from outside their modules\n+use foo::core; //~ ERROR module `core` is inaccessible\n+use foo::core::cell; //~ ERROR\n+\n+fn main() {\n+    use foo::*;\n+    mod core {} // Check that private crates are not glob imported\n+}"}, {"sha": "75882c5e9812911d0338cc1e2c7f5d3feaecb027", "filename": "src/test/compile-fail/no-extern-crate-in-glob-import.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3929b2c8a472244d448feb24f52bf91246d3e82/src%2Ftest%2Fcompile-fail%2Fno-extern-crate-in-glob-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3929b2c8a472244d448feb24f52bf91246d3e82/src%2Ftest%2Fcompile-fail%2Fno-extern-crate-in-glob-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-extern-crate-in-glob-import.rs?ref=d3929b2c8a472244d448feb24f52bf91246d3e82", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Check that extern crate declarations are excluded from glob imports.\n-\n-#![feature(core)]\n-extern crate core;\n-\n-mod T {\n-    pub use super::*;\n-}\n-\n-fn main() {\n-    use T::core; //~ ERROR unresolved import `T::core`\n-}"}, {"sha": "de3cc27c49bd265f8eebfd1d2c060035ca0a6fca", "filename": "src/test/compile-fail/warn-pub-extern-crate.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d3929b2c8a472244d448feb24f52bf91246d3e82/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3929b2c8a472244d448feb24f52bf91246d3e82/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-pub-extern-crate.rs?ref=d3929b2c8a472244d448feb24f52bf91246d3e82", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(rustc_attrs)]\n-\n-pub extern crate core; //~WARN `pub extern crate` does not work\n-\n-#[rustc_error]\n-fn main() {} //~ ERROR: compilation successful"}, {"sha": "15c977afe2a6c71d107a581d49a01dfd6bf19de1", "filename": "src/test/run-pass/privacy-reexport.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3358fb11da258007d26cc27364455c610088d630/src%2Ftest%2Frun-pass%2Fprivacy-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3358fb11da258007d26cc27364455c610088d630/src%2Ftest%2Frun-pass%2Fprivacy-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy-reexport.rs?ref=3358fb11da258007d26cc27364455c610088d630", "patch": "@@ -15,5 +15,8 @@\n extern crate privacy_reexport;\n \n pub fn main() {\n+    // Check that public extern crates are visible to outside crates\n+    privacy_reexport::core::cell::Cell::new(0);\n+\n     privacy_reexport::bar::frob();\n }"}]}