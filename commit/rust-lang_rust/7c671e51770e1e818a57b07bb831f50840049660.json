{"sha": "7c671e51770e1e818a57b07bb831f50840049660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjcxZTUxNzcwZTFlODE4YTU3YjA3YmI4MzFmNTA4NDAwNDk2NjA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-11T00:25:53Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-26T13:08:54Z"}, "message": "Regression tests for issues uncovered only post the run-pass and compile-fail tests.\n\n(I.e. the idea being, lets catch errors in these basic constructs\nsometime *before* we start doing the doc tests.)", "tree": {"sha": "2a34cf757463ced816315696cbaed83fc787a379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a34cf757463ced816315696cbaed83fc787a379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c671e51770e1e818a57b07bb831f50840049660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c671e51770e1e818a57b07bb831f50840049660", "html_url": "https://github.com/rust-lang/rust/commit/7c671e51770e1e818a57b07bb831f50840049660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c671e51770e1e818a57b07bb831f50840049660/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3902190ac4d64962b2c1ac9a6ae88777b7112f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/3902190ac4d64962b2c1ac9a6ae88777b7112f82", "html_url": "https://github.com/rust-lang/rust/commit/3902190ac4d64962b2c1ac9a6ae88777b7112f82"}], "stats": {"total": 203, "additions": 203, "deletions": 0}, "files": [{"sha": "a93a488c1b5fd1a6d7dd01b9a8432e0bea4c99ac", "filename": "src/test/run-pass/box-of-array-of-drop-1.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs?ref=7c671e51770e1e818a57b07bb831f50840049660", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we cleanup a fixed size Box<[D; k]> properly when D has a\n+// destructor.\n+\n+use std::thread;\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+\n+static LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+struct D(u8);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        println!(\"Dropping {}\", self.0);\n+        let old = LOG.load(Ordering::SeqCst);\n+        LOG.compare_and_swap(old, old << 4 | self.0 as usize, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    fn die() -> D { panic!(\"Oh no\"); }\n+    let g = thread::spawn(|| {\n+        let _b1: Box<[D; 4]> = Box::new([D( 1), D( 2), D( 3), D( 4)]);\n+        let _b2: Box<[D; 4]> = Box::new([D( 5), D( 6), D( 7), D( 8)]);\n+        let _b3: Box<[D; 4]> = Box::new([D( 9), D(10), die(), D(12)]);\n+        let _b4: Box<[D; 4]> = Box::new([D(13), D(14), D(15), D(16)]);\n+    });\n+    assert!(g.join().is_err());\n+\n+    // When the panic occurs, we will be in the midst of constructing\n+    // the input to `_b3`.  Therefore, we drop the elements of the\n+    // partially filled array first, before we get around to dropping\n+    // the elements of `_b1` and _b2`.\n+\n+    // Issue 23222: The order in which the elements actually get\n+    // dropped is a little funky. See similar notes in nested-vec-3;\n+    // in essence, I would not be surprised if we change the ordering\n+    // given in `expect` in the future.\n+\n+    let expect = 0x__A_9__5_6_7_8__1_2_3_4;\n+    let actual = LOG.load(Ordering::SeqCst);\n+    assert!(actual == expect, \"expect: 0x{:x} actual: 0x{:x}\", expect, actual);\n+}"}, {"sha": "715571364c8def8e7a2ee389af3e7751a5629ed3", "filename": "src/test/run-pass/box-of-array-of-drop-2.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs?ref=7c671e51770e1e818a57b07bb831f50840049660", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we cleanup dynamic sized Box<[D]> properly when D has a\n+// destructor.\n+\n+use std::thread;\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+\n+static LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+struct D(u8);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        println!(\"Dropping {}\", self.0);\n+        let old = LOG.load(Ordering::SeqCst);\n+        LOG.compare_and_swap(old, old << 4 | self.0 as usize, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    fn die() -> D { panic!(\"Oh no\"); }\n+    let g = thread::spawn(|| {\n+        let _b1: Box<[D; 4]> = Box::new([D( 1), D( 2), D( 3), D( 4)]);\n+        let _b2: Box<[D; 4]> = Box::new([D( 5), D( 6), D( 7), D( 8)]);\n+        let _b3: Box<[D; 4]> = Box::new([D( 9), D(10), die(), D(12)]);\n+        let _b4: Box<[D; 4]> = Box::new([D(13), D(14), D(15), D(16)]);\n+    });\n+    assert!(g.join().is_err());\n+\n+    // When the panic occurs, we will be in the midst of constructing\n+    // the input to `_b3`.  Therefore, we drop the elements of the\n+    // partially filled array first, before we get around to dropping\n+    // the elements of `_b1` and _b2`.\n+\n+    // Issue 23222: The order in which the elements actually get\n+    // dropped is a little funky. See similar notes in nested-vec-3;\n+    // in essence, I would not be surprised if we change the ordering\n+    // given in `expect` in the future.\n+\n+    let expect = 0x__A_9__5_6_7_8__1_2_3_4;\n+    let actual = LOG.load(Ordering::SeqCst);\n+    assert!(actual == expect, \"expect: 0x{:x} actual: 0x{:x}\", expect, actual);\n+}"}, {"sha": "2b92ed38eab803c683770277b5971e26fc462a52", "filename": "src/test/run-pass/nested-vec-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fnested-vec-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fnested-vec-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-vec-1.rs?ref=7c671e51770e1e818a57b07bb831f50840049660", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that using the `vec!` macro nested within itself works\n+\n+fn main() {\n+    let nested = vec![vec![1u32, 2u32, 3u32]];\n+    assert_eq!(nested[0][1], 2);\n+}"}, {"sha": "669f9e4f4bb7e77174d7639183ceee77e2bc18b8", "filename": "src/test/run-pass/nested-vec-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fnested-vec-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fnested-vec-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-vec-2.rs?ref=7c671e51770e1e818a57b07bb831f50840049660", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that using the `vec!` macro nested within itself works\n+// when the contents implement Drop\n+\n+struct D(u32);\n+\n+impl Drop for D {\n+    fn drop(&mut self) { println!(\"Dropping {}\", self.0); }\n+}\n+\n+fn main() {\n+    let nested = vec![vec![D(1u32), D(2u32), D(3u32)]];\n+    assert_eq!(nested[0][1].0, 2);\n+}"}, {"sha": "60cf795c918bb1692e5c749ff96b96cd92568808", "filename": "src/test/run-pass/nested-vec-3.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c671e51770e1e818a57b07bb831f50840049660/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs?ref=7c671e51770e1e818a57b07bb831f50840049660", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that using the `vec!` macro nested within itself works when\n+// the contents implement Drop and we hit a panic in the middle of\n+// construction.\n+\n+\n+use std::thread;\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+\n+static LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+struct D(u8);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        println!(\"Dropping {}\", self.0);\n+        let old = LOG.load(Ordering::SeqCst);\n+        LOG.compare_and_swap(old, old << 4 | self.0 as usize, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    fn die() -> D { panic!(\"Oh no\"); }\n+    let g = thread::spawn(|| {\n+        let _nested = vec![vec![D( 1), D( 2), D( 3), D( 4)],\n+                           vec![D( 5), D( 6), D( 7), D( 8)],\n+                           vec![D( 9), D(10), die(), D(12)],\n+                           vec![D(13), D(14), D(15), D(16)]];\n+    });\n+    assert!(g.join().is_err());\n+\n+    // When the panic occurs, we will be in the midst of constructing the\n+    // second inner vector.  Therefore, we drop the elements of the\n+    // partially filled vector first, before we get around to dropping\n+    // the elements of the filled vector.\n+\n+    // Issue 23222: The order in which the elements actually get\n+    // dropped is a little funky: as noted above, we'll drop the 9+10\n+    // first, but due to #23222, they get dropped in reverse\n+    // order. Likewise, again due to #23222, we will drop the second\n+    // filled vec before the first filled vec.\n+    //\n+    // If Issue 23222 is \"fixed\", then presumably the corrected\n+    // expected order of events will be 0x__9_A__1_2_3_4__5_6_7_8;\n+    // that is, we would still drop 9+10 first, since they belong to\n+    // the more deeply nested expression when the panic occurs.\n+\n+    let expect = 0x__A_9__5_6_7_8__1_2_3_4;\n+    let actual = LOG.load(Ordering::SeqCst);\n+    assert!(actual == expect, \"expect: 0x{:x} actual: 0x{:x}\", expect, actual);\n+}"}]}