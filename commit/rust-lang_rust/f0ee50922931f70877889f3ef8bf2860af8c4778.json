{"sha": "f0ee50922931f70877889f3ef8bf2860af8c4778", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZWU1MDkyMjkzMWY3MDg3Nzg4OWYzZWY4YmYyODYwYWY4YzQ3Nzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T17:27:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:36Z"}, "message": "rustuv: Switch field privacy as necessary", "tree": {"sha": "52cc46b51c868dcd8bfb2bd4f0003c5970ebcd23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52cc46b51c868dcd8bfb2bd4f0003c5970ebcd23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0ee50922931f70877889f3ef8bf2860af8c4778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ee50922931f70877889f3ef8bf2860af8c4778", "html_url": "https://github.com/rust-lang/rust/commit/f0ee50922931f70877889f3ef8bf2860af8c4778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0ee50922931f70877889f3ef8bf2860af8c4778/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab0f47fdf989c7a395b25c3cbddaacee81356ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab0f47fdf989c7a395b25c3cbddaacee81356ba", "html_url": "https://github.com/rust-lang/rust/commit/fab0f47fdf989c7a395b25c3cbddaacee81356ba"}], "stats": {"total": 148, "additions": 74, "deletions": 74}, "files": [{"sha": "0d2550d4ebda22116853d949042eaa73e186b137", "filename": "src/librustuv/access.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Faccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Faccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faccess.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -22,12 +22,12 @@ use std::rt::local::Local;\n use homing::HomingMissile;\n \n pub struct Access {\n-    priv inner: UnsafeArc<Inner>,\n+    inner: UnsafeArc<Inner>,\n }\n \n pub struct Guard<'a> {\n-    priv access: &'a mut Access,\n-    priv missile: Option<HomingMissile>,\n+    access: &'a mut Access,\n+    missile: Option<HomingMissile>,\n }\n \n struct Inner {"}, {"sha": "93cc1d8d54f141ce37ef5a2d55a9861994c54742", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -26,14 +26,14 @@ use uvll;\n \n pub struct FsRequest {\n     req: *uvll::uv_fs_t,\n-    priv fired: bool,\n+    fired: bool,\n }\n \n pub struct FileWatcher {\n-    priv loop_: Loop,\n-    priv fd: c_int,\n-    priv close: rtio::CloseBehavior,\n-    priv home: HomeHandle,\n+    loop_: Loop,\n+    fd: c_int,\n+    close: rtio::CloseBehavior,\n+    home: HomeHandle,\n }\n \n impl FsRequest {"}, {"sha": "89b68917c94838f35edd9dedc67136b9b8b1402e", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -48,8 +48,8 @@ use queue::{Queue, QueuePool};\n /// Handles are clone-able in order to derive new handles from existing handles\n /// (very useful for when accepting a socket from a server).\n pub struct HomeHandle {\n-    priv queue: Queue,\n-    priv id: uint,\n+    queue: Queue,\n+    id: uint,\n }\n \n impl HomeHandle {\n@@ -126,7 +126,7 @@ pub trait HomingIO {\n /// task back to its appropriate home (if applicable). The field is used to\n /// assert that we are where we think we are.\n pub struct HomingMissile {\n-    priv io_home: uint,\n+    io_home: uint,\n }\n \n impl HomingMissile {"}, {"sha": "01067cb699b82b1811d7cdabe86d88a9bc058c7a", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -197,8 +197,8 @@ pub trait UvHandle<T> {\n }\n \n pub struct ForbidSwitch {\n-    priv msg: &'static str,\n-    priv io: uint,\n+    msg: &'static str,\n+    io: uint,\n }\n \n impl ForbidSwitch {\n@@ -261,8 +261,8 @@ fn wakeup(slot: &mut Option<BlockedTask>) {\n }\n \n pub struct Request {\n-    handle: *uvll::uv_req_t,\n-    priv defused: bool,\n+    pub handle: *uvll::uv_req_t,\n+    defused: bool,\n }\n \n impl Request {\n@@ -313,7 +313,7 @@ impl Drop for Request {\n /// with dtors may not be destructured, but tuple structs can,\n /// but the results are not correct.\n pub struct Loop {\n-    priv handle: *uvll::uv_loop_t\n+    handle: *uvll::uv_loop_t\n }\n \n impl Loop {"}, {"sha": "0514975cc7b277f7643be02f18bb01c72cdb01e2", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -153,22 +153,22 @@ pub struct TcpWatcher {\n     handle: *uvll::uv_tcp_t,\n     stream: StreamWatcher,\n     home: HomeHandle,\n-    priv refcount: Refcount,\n+    refcount: Refcount,\n \n     // libuv can't support concurrent reads and concurrent writes of the same\n     // stream object, so we use these access guards in order to arbitrate among\n     // multiple concurrent reads and writes. Note that libuv *can* read and\n     // write simultaneously, it just can't read and read simultaneously.\n-    priv read_access: Access,\n-    priv write_access: Access,\n+    read_access: Access,\n+    write_access: Access,\n }\n \n pub struct TcpListener {\n     home: HomeHandle,\n     handle: *uvll::uv_pipe_t,\n-    priv closing_task: Option<BlockedTask>,\n-    priv outgoing: Sender<Result<~rtio::RtioTcpStream:Send, IoError>>,\n-    priv incoming: Receiver<Result<~rtio::RtioTcpStream:Send, IoError>>,\n+    closing_task: Option<BlockedTask>,\n+    outgoing: Sender<Result<~rtio::RtioTcpStream:Send, IoError>>,\n+    incoming: Receiver<Result<~rtio::RtioTcpStream:Send, IoError>>,\n }\n \n pub struct TcpAcceptor {\n@@ -476,9 +476,9 @@ pub struct UdpWatcher {\n     home: HomeHandle,\n \n     // See above for what these fields are\n-    priv refcount: Refcount,\n-    priv read_access: Access,\n-    priv write_access: Access,\n+    refcount: Refcount,\n+    read_access: Access,\n+    write_access: Access,\n }\n \n impl UdpWatcher {"}, {"sha": "ea46c3a129678e80b527945eaf3bea40853eab20", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -26,19 +26,19 @@ use uvll;\n pub struct PipeWatcher {\n     stream: StreamWatcher,\n     home: HomeHandle,\n-    priv defused: bool,\n-    priv refcount: Refcount,\n+    defused: bool,\n+    refcount: Refcount,\n \n     // see comments in TcpWatcher for why these exist\n-    priv write_access: Access,\n-    priv read_access: Access,\n+    write_access: Access,\n+    read_access: Access,\n }\n \n pub struct PipeListener {\n     home: HomeHandle,\n     pipe: *uvll::uv_pipe_t,\n-    priv outgoing: Sender<Result<~RtioPipe:Send, IoError>>,\n-    priv incoming: Receiver<Result<~RtioPipe:Send, IoError>>,\n+    outgoing: Sender<Result<~RtioPipe:Send, IoError>>,\n+    incoming: Receiver<Result<~RtioPipe:Send, IoError>>,\n }\n \n pub struct PipeAcceptor {"}, {"sha": "f5643e80f4a08466bbc667e3a543405d14500e9e", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -46,13 +46,13 @@ struct State {\n /// This structure is intended to be stored next to the event loop, and it is\n /// used to create new `Queue` structures.\n pub struct QueuePool {\n-    priv queue: UnsafeArc<State>,\n-    priv refcnt: uint,\n+    queue: UnsafeArc<State>,\n+    refcnt: uint,\n }\n \n /// This type is used to send messages back to the original event loop.\n pub struct Queue {\n-    priv queue: UnsafeArc<State>,\n+    queue: UnsafeArc<State>,\n }\n \n extern fn async_cb(handle: *uvll::uv_async_t, status: c_int) {"}, {"sha": "86c6c44238c060a3df3e0501e0225e04b2bb89df", "filename": "src/librustuv/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Frc.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -19,7 +19,7 @@\n use std::sync::arc::UnsafeArc;\n \n pub struct Refcount {\n-    priv rc: UnsafeArc<uint>,\n+    rc: UnsafeArc<uint>,\n }\n \n impl Refcount {"}, {"sha": "10d62a5aeae055639a9a66480ff7e2b4674e7ae4", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -23,13 +23,13 @@ use uvll;\n // uv_stream_t instance, and all I/O operations assume that it's already located\n // on the appropriate scheduler.\n pub struct StreamWatcher {\n-    handle: *uvll::uv_stream_t,\n+    pub handle: *uvll::uv_stream_t,\n \n     // Cache the last used uv_write_t so we don't have to allocate a new one on\n     // every call to uv_write(). Ideally this would be a stack-allocated\n     // structure, but currently we don't have mappings for all the structures\n     // defined in libuv, so we're foced to malloc this.\n-    priv last_write_req: Option<Request>,\n+    last_write_req: Option<Request>,\n }\n \n struct ReadContext {"}, {"sha": "d8365cf677c173f2af308ef905c3db0f797c9c9f", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -46,7 +46,7 @@ use uvll;\n \n // Obviously an Event Loop is always home.\n pub struct UvEventLoop {\n-    priv uvio: UvIoFactory\n+    uvio: UvIoFactory\n }\n \n impl UvEventLoop {\n@@ -124,8 +124,8 @@ fn test_callback_run_once() {\n }\n \n pub struct UvIoFactory {\n-    loop_: Loop,\n-    priv handle_pool: Option<~QueuePool>,\n+    pub loop_: Loop,\n+    handle_pool: Option<~QueuePool>,\n }\n \n impl UvIoFactory {"}, {"sha": "62f1dbd73e3327c7c8a8798c144f9c79367581db", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ee50922931f70877889f3ef8bf2860af8c4778/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=f0ee50922931f70877889f3ef8bf2860af8c4778", "patch": "@@ -100,15 +100,15 @@ pub type uv_buf_len_t = libc::c_ulong;\n // see libuv/include/uv-unix.h\n #[cfg(unix)]\n pub struct uv_buf_t {\n-    base: *u8,\n-    len: uv_buf_len_t,\n+    pub base: *u8,\n+    pub len: uv_buf_len_t,\n }\n \n // see libuv/include/uv-win.h\n #[cfg(windows)]\n pub struct uv_buf_t {\n-    len: uv_buf_len_t,\n-    base: *u8,\n+    pub len: uv_buf_len_t,\n+    pub base: *u8,\n }\n \n #[repr(C)]\n@@ -119,23 +119,23 @@ pub enum uv_run_mode {\n }\n \n pub struct uv_process_options_t {\n-    exit_cb: uv_exit_cb,\n-    file: *libc::c_char,\n-    args: **libc::c_char,\n-    env: **libc::c_char,\n-    cwd: *libc::c_char,\n-    flags: libc::c_uint,\n-    stdio_count: libc::c_int,\n-    stdio: *uv_stdio_container_t,\n-    uid: uv_uid_t,\n-    gid: uv_gid_t,\n+    pub exit_cb: uv_exit_cb,\n+    pub file: *libc::c_char,\n+    pub args: **libc::c_char,\n+    pub env: **libc::c_char,\n+    pub cwd: *libc::c_char,\n+    pub flags: libc::c_uint,\n+    pub stdio_count: libc::c_int,\n+    pub stdio: *uv_stdio_container_t,\n+    pub uid: uv_uid_t,\n+    pub gid: uv_gid_t,\n }\n \n // These fields are private because they must be interfaced with through the\n // functions below.\n pub struct uv_stdio_container_t {\n-    priv flags: libc::c_int,\n-    priv stream: *uv_stream_t,\n+    flags: libc::c_int,\n+    stream: *uv_stream_t,\n }\n \n pub type uv_handle_t = c_void;\n@@ -160,27 +160,27 @@ pub type uv_signal_t = c_void;\n pub type uv_shutdown_t = c_void;\n \n pub struct uv_timespec_t {\n-    tv_sec: libc::c_long,\n-    tv_nsec: libc::c_long\n+    pub tv_sec: libc::c_long,\n+    pub tv_nsec: libc::c_long\n }\n \n pub struct uv_stat_t {\n-    st_dev: libc::uint64_t,\n-    st_mode: libc::uint64_t,\n-    st_nlink: libc::uint64_t,\n-    st_uid: libc::uint64_t,\n-    st_gid: libc::uint64_t,\n-    st_rdev: libc::uint64_t,\n-    st_ino: libc::uint64_t,\n-    st_size: libc::uint64_t,\n-    st_blksize: libc::uint64_t,\n-    st_blocks: libc::uint64_t,\n-    st_flags: libc::uint64_t,\n-    st_gen: libc::uint64_t,\n-    st_atim: uv_timespec_t,\n-    st_mtim: uv_timespec_t,\n-    st_ctim: uv_timespec_t,\n-    st_birthtim: uv_timespec_t\n+    pub st_dev: libc::uint64_t,\n+    pub st_mode: libc::uint64_t,\n+    pub st_nlink: libc::uint64_t,\n+    pub st_uid: libc::uint64_t,\n+    pub st_gid: libc::uint64_t,\n+    pub st_rdev: libc::uint64_t,\n+    pub st_ino: libc::uint64_t,\n+    pub st_size: libc::uint64_t,\n+    pub st_blksize: libc::uint64_t,\n+    pub st_blocks: libc::uint64_t,\n+    pub st_flags: libc::uint64_t,\n+    pub st_gen: libc::uint64_t,\n+    pub st_atim: uv_timespec_t,\n+    pub st_mtim: uv_timespec_t,\n+    pub st_ctim: uv_timespec_t,\n+    pub st_birthtim: uv_timespec_t\n }\n \n impl uv_stat_t {"}]}