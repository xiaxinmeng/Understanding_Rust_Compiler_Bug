{"sha": "0bb170a277582f5f17c21cddd27a11f19750fa36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjE3MGEyNzc1ODJmNWYxN2MyMWNkZGQyN2ExMWYxOTc1MGZhMzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T18:09:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T18:09:51Z"}, "message": "remove Canceled from impl of ra_ide_api", "tree": {"sha": "b97ae214a8616def416b64fb07287ac66554ed3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97ae214a8616def416b64fb07287ac66554ed3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb170a277582f5f17c21cddd27a11f19750fa36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb170a277582f5f17c21cddd27a11f19750fa36", "html_url": "https://github.com/rust-lang/rust/commit/0bb170a277582f5f17c21cddd27a11f19750fa36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb170a277582f5f17c21cddd27a11f19750fa36/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05ba45c667454028c3e65769d6f63fb0f27c1ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/05ba45c667454028c3e65769d6f63fb0f27c1ca8", "html_url": "https://github.com/rust-lang/rust/commit/05ba45c667454028c3e65769d6f63fb0f27c1ca8"}], "stats": {"total": 122, "additions": 43, "deletions": 79}, "files": [{"sha": "b03ddd74c0c29fd8cdd27434d54c89579b9f7388", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=0bb170a277582f5f17c21cddd27a11f19750fa36", "patch": "@@ -12,7 +12,7 @@ use ra_db::SyntaxDatabase;\n \n use crate::{\n     db,\n-    Cancelable, FilePosition,\n+    FilePosition,\n     completion::{\n         completion_item::{Completions, CompletionKind},\n         completion_context::CompletionContext,\n@@ -43,12 +43,9 @@ pub use crate::completion::completion_item::{CompletionItem, InsertText, Complet\n /// `foo` *should* be present among the completion variants. Filtering by\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n-pub(crate) fn completions(\n-    db: &db::RootDatabase,\n-    position: FilePosition,\n-) -> Cancelable<Option<Completions>> {\n+pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Option<Completions> {\n     let original_file = db.source_file(position.file_id);\n-    let ctx = ctry!(CompletionContext::new(db, &original_file, position)?);\n+    let ctx = CompletionContext::new(db, &original_file, position)?;\n \n     let mut acc = Completions::default();\n \n@@ -57,11 +54,11 @@ pub(crate) fn completions(\n     complete_keyword::complete_use_tree_keyword(&mut acc, &ctx);\n     complete_snippet::complete_expr_snippet(&mut acc, &ctx);\n     complete_snippet::complete_item_snippet(&mut acc, &ctx);\n-    complete_path::complete_path(&mut acc, &ctx)?;\n-    complete_scope::complete_scope(&mut acc, &ctx)?;\n-    complete_dot::complete_dot(&mut acc, &ctx)?;\n+    complete_path::complete_path(&mut acc, &ctx);\n+    complete_scope::complete_scope(&mut acc, &ctx);\n+    complete_dot::complete_dot(&mut acc, &ctx);\n \n-    Ok(Some(acc))\n+    Some(acc)\n }\n \n #[cfg(test)]\n@@ -72,6 +69,6 @@ fn check_completion(code: &str, expected_completions: &str, kind: CompletionKind\n     } else {\n         single_file_with_position(code)\n     };\n-    let completions = completions(&analysis.db, position).unwrap().unwrap();\n+    let completions = completions(&analysis.db, position).unwrap();\n     completions.assert_match(expected_completions, kind);\n }"}, {"sha": "473edc50eabe2677de4c917a6827eb5802c6b0a2", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=0bb170a277582f5f17c21cddd27a11f19750fa36", "patch": "@@ -1,26 +1,24 @@\n use hir::{Ty, Def};\n \n-use crate::Cancelable;\n use crate::completion::{CompletionContext, Completions, CompletionKind, CompletionItem, CompletionItemKind};\n \n /// Complete dot accesses, i.e. fields or methods (currently only fields).\n-pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) -> Cancelable<()> {\n+pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     let (function, receiver) = match (&ctx.function, ctx.dot_receiver) {\n         (Some(function), Some(receiver)) => (function, receiver),\n-        _ => return Ok(()),\n+        _ => return,\n     };\n     let infer_result = function.infer(ctx.db);\n     let syntax_mapping = function.body_syntax_mapping(ctx.db);\n     let expr = match syntax_mapping.node_expr(receiver) {\n         Some(expr) => expr,\n-        None => return Ok(()),\n+        None => return,\n     };\n     let receiver_ty = infer_result[expr].clone();\n     if !ctx.is_call {\n         complete_fields(acc, ctx, receiver_ty.clone());\n     }\n     complete_methods(acc, ctx, receiver_ty);\n-    Ok(())\n }\n \n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {"}, {"sha": "1eded7658ea9d7c45cd9482604ad211e9d2a1f76", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=0bb170a277582f5f17c21cddd27a11f19750fa36", "patch": "@@ -1,16 +1,15 @@\n use crate::{\n-    Cancelable,\n     completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext},\n };\n \n-pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> Cancelable<()> {\n+pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let (path, module) = match (&ctx.path_prefix, &ctx.module) {\n         (Some(path), Some(module)) => (path.clone(), module),\n-        _ => return Ok(()),\n+        _ => return,\n     };\n     let def_id = match module.resolve_path(ctx.db, &path).take_types() {\n         Some(it) => it,\n-        None => return Ok(()),\n+        None => return,\n     };\n     match def_id.resolve(ctx.db) {\n         hir::Def::Module(module) => {\n@@ -30,9 +29,8 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n                         .add_to(acc)\n                 });\n         }\n-        _ => return Ok(()),\n+        _ => return,\n     };\n-    Ok(())\n }\n \n #[cfg(test)]"}, {"sha": "69968074863d8e3817f09a83ec8fdfe2a84689a6", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=0bb170a277582f5f17c21cddd27a11f19750fa36", "patch": "@@ -1,18 +1,15 @@\n use rustc_hash::FxHashSet;\n use ra_syntax::TextUnit;\n \n-use crate::{\n-    Cancelable,\n-    completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext},\n-};\n+use crate::completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext};\n \n-pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) -> Cancelable<()> {\n+pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n-        return Ok(());\n+        return;\n     }\n     let module = match &ctx.module {\n         Some(it) => it,\n-        None => return Ok(()),\n+        None => return,\n     };\n     if let Some(function) = &ctx.function {\n         let scopes = function.scopes(ctx.db);\n@@ -40,7 +37,6 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) ->\n                 .from_resolution(ctx, res)\n                 .add_to(acc)\n         });\n-    Ok(())\n }\n \n fn complete_fn(acc: &mut Completions, scopes: &hir::ScopesWithSyntaxMapping, offset: TextUnit) {"}, {"sha": "e537e0082d84ebfc413c70a78ad2c2959c6f7dd7", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=0bb170a277582f5f17c21cddd27a11f19750fa36", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n };\n use hir::source_binder;\n \n-use crate::{db, FilePosition, Cancelable};\n+use crate::{db, FilePosition};\n \n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n@@ -41,10 +41,9 @@ impl<'a> CompletionContext<'a> {\n         db: &'a db::RootDatabase,\n         original_file: &'a SourceFile,\n         position: FilePosition,\n-    ) -> Cancelable<Option<CompletionContext<'a>>> {\n+    ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n-        let leaf =\n-            ctry!(find_leaf_at_offset(original_file.syntax(), position.offset).left_biased());\n+        let leaf = find_leaf_at_offset(original_file.syntax(), position.offset).left_biased()?;\n         let mut ctx = CompletionContext {\n             db,\n             leaf,\n@@ -63,7 +62,7 @@ impl<'a> CompletionContext<'a> {\n             is_call: false,\n         };\n         ctx.fill(original_file, position.offset);\n-        Ok(Some(ctx))\n+        Some(ctx)\n     }\n \n     fn fill(&mut self, original_file: &'a SourceFile, offset: TextUnit) {"}, {"sha": "a21cae62474f907235bc47b87396ee63c486eb0a", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 17, "deletions": 32, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=0bb170a277582f5f17c21cddd27a11f19750fa36", "patch": "@@ -110,14 +110,11 @@ impl db::RootDatabase {\n         };\n         vec![krate.crate_id()]\n     }\n-    pub(crate) fn find_all_refs(\n-        &self,\n-        position: FilePosition,\n-    ) -> Cancelable<Vec<(FileId, TextRange)>> {\n+    pub(crate) fn find_all_refs(&self, position: FilePosition) -> Vec<(FileId, TextRange)> {\n         let file = self.source_file(position.file_id);\n         // Find the binding associated with the offset\n-        let (binding, descr) = match find_binding(self, &file, position)? {\n-            None => return Ok(Vec::new()),\n+        let (binding, descr) = match find_binding(self, &file, position) {\n+            None => return Vec::new(),\n             Some(it) => it,\n         };\n \n@@ -134,36 +131,30 @@ impl db::RootDatabase {\n                 .map(|ref_desc| (position.file_id, ref_desc.range)),\n         );\n \n-        return Ok(ret);\n+        return ret;\n \n         fn find_binding<'a>(\n             db: &db::RootDatabase,\n             source_file: &'a SourceFile,\n             position: FilePosition,\n-        ) -> Cancelable<Option<(&'a ast::BindPat, hir::Function)>> {\n+        ) -> Option<(&'a ast::BindPat, hir::Function)> {\n             let syntax = source_file.syntax();\n             if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n-                let descr = ctry!(source_binder::function_from_child_node(\n+                let descr = source_binder::function_from_child_node(\n                     db,\n                     position.file_id,\n                     binding.syntax(),\n-                ));\n-                return Ok(Some((binding, descr)));\n+                )?;\n+                return Some((binding, descr));\n             };\n-            let name_ref = ctry!(find_node_at_offset::<ast::NameRef>(syntax, position.offset));\n-            let descr = ctry!(source_binder::function_from_child_node(\n-                db,\n-                position.file_id,\n-                name_ref.syntax(),\n-            ));\n+            let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n+            let descr =\n+                source_binder::function_from_child_node(db, position.file_id, name_ref.syntax())?;\n             let scope = descr.scopes(db);\n-            let resolved = ctry!(scope.resolve_local_name(name_ref));\n+            let resolved = scope.resolve_local_name(name_ref)?;\n             let resolved = resolved.ptr().resolve(source_file);\n-            let binding = ctry!(find_node_at_offset::<ast::BindPat>(\n-                syntax,\n-                resolved.range().end()\n-            ));\n-            Ok(Some((binding, descr)))\n+            let binding = find_node_at_offset::<ast::BindPat>(syntax, resolved.range().end())?;\n+            Some((binding, descr))\n         }\n     }\n \n@@ -239,13 +230,8 @@ impl db::RootDatabase {\n             .collect()\n     }\n \n-    pub(crate) fn rename(\n-        &self,\n-        position: FilePosition,\n-        new_name: &str,\n-    ) -> Cancelable<Vec<SourceFileEdit>> {\n-        let res = self\n-            .find_all_refs(position)?\n+    pub(crate) fn rename(&self, position: FilePosition, new_name: &str) -> Vec<SourceFileEdit> {\n+        self.find_all_refs(position)\n             .iter()\n             .map(|(file_id, text_range)| SourceFileEdit {\n                 file_id: *file_id,\n@@ -255,8 +241,7 @@ impl db::RootDatabase {\n                     builder.finish()\n                 },\n             })\n-            .collect::<Vec<_>>();\n-        Ok(res)\n+            .collect::<Vec<_>>()\n     }\n     pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n         let name = name_ref.text();"}, {"sha": "ea5267ad9e2cc1c824965807778ec6101d0b9a8d", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb170a277582f5f17c21cddd27a11f19750fa36/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=0bb170a277582f5f17c21cddd27a11f19750fa36", "patch": "@@ -9,15 +9,6 @@\n //!\n //! The sibling `ra_ide_api_light` handles thouse bits of IDE functionality\n //! which are restricted to a single file and need only syntax.\n-macro_rules! ctry {\n-    ($expr:expr) => {\n-        match $expr {\n-            None => return Ok(None),\n-            Some(it) => it,\n-        }\n-    };\n-}\n-\n mod db;\n mod imp;\n pub mod mock_analysis;\n@@ -400,7 +391,7 @@ impl Analysis {\n \n     /// Finds all usages of the reference at point.\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n-        self.with_db(|db| db.find_all_refs(position))?\n+        self.with_db(|db| db.find_all_refs(position))\n     }\n \n     /// Returns a short text descrbing element at position.\n@@ -445,7 +436,7 @@ impl Analysis {\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n         let completions = self\n             .db\n-            .catch_canceled(|db| completion::completions(db, position))??;\n+            .catch_canceled(|db| completion::completions(db, position))?;\n         Ok(completions.map(|it| it.into()))\n     }\n \n@@ -472,7 +463,7 @@ impl Analysis {\n         position: FilePosition,\n         new_name: &str,\n     ) -> Cancelable<Vec<SourceFileEdit>> {\n-        self.with_db(|db| db.rename(position, new_name))?\n+        self.with_db(|db| db.rename(position, new_name))\n     }\n \n     fn with_db<F: FnOnce(&db::RootDatabase) -> T + std::panic::UnwindSafe, T>("}]}