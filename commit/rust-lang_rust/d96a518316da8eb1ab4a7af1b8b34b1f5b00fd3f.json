{"sha": "d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NmE1MTgzMTZkYThlYjFhYjRhN2FmMWI4YjM0YjFmNWIwMGZkM2Y=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-14T05:36:09Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-14T05:36:09Z"}, "message": "several fixups", "tree": {"sha": "1ce7542a11496cf711c93fadf487501bc33fe777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce7542a11496cf711c93fadf487501bc33fe777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f", "html_url": "https://github.com/rust-lang/rust/commit/d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4268f944714dc01fe98c6353d7a23bd9631e4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4268f944714dc01fe98c6353d7a23bd9631e4c2", "html_url": "https://github.com/rust-lang/rust/commit/d4268f944714dc01fe98c6353d7a23bd9631e4c2"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "d168dcbe360beeca0cc22a2cfab2f3cfb961c6e7", "filename": "other-reprs.md", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f/other-reprs.md", "raw_url": "https://github.com/rust-lang/rust/raw/d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f/other-reprs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/other-reprs.md?ref=d96a518316da8eb1ab4a7af1b8b34b1f5b00fd3f", "patch": "@@ -26,9 +26,26 @@ the FFI boundary.\n * DSTs, tuples, and tagged unions are not a concept in C and as such are never\n   FFI safe.\n \n-* **The drop flag will still be added**\n+* **The [drop flag][] will still be added**\n \n-* This is equivalent to `repr(u32)` for enums (see below)\n+* This is equivalent to one of `repr(u\\*)` (see the next section) for enums. The\n+  chosen size is the default enum size for the target platform's C ABI. Note that\n+  enum representation in C is undefined, and this may be incorrect when the C\n+  code is compiled with certain flags.\n+\n+\n+\n+# repr(u8), repr(u16), repr(u32), repr(u64)\n+\n+These specify the size to make a C-like enum. If the discriminant overflows the\n+integer it has to fit in, it will be an error. You can manually ask Rust to\n+allow this by setting the overflowing element to explicitly be 0. However Rust\n+will not allow you to create an enum where two variants have the same discriminant.\n+\n+On non-C-like enums, this will inhibit certain optimizations like the null-pointer\n+optimization.\n+\n+These reprs have no affect on a struct.\n \n \n \n@@ -40,22 +57,15 @@ byte. This may improve the memory footprint, but will likely have other\n negative side-effects.\n \n In particular, most architectures *strongly* prefer values to be aligned. This\n-may mean the unaligned loads are penalized (x86), or even fault (ARM). In\n-particular, the compiler may have trouble with references to unaligned fields.\n+may mean the unaligned loads are penalized (x86), or even fault (some ARM chips).\n+For simple cases like directly loading or storing a packed field, the compiler\n+might be able to paper over alignment issues with shifts and masks. However if\n+you take a reference to a packed field, it's unlikely that the compiler will be\n+able to emit code to avoid an unaligned load.\n \n `repr(packed)` is not to be used lightly. Unless you have extreme requirements,\n this should not be used.\n \n This repr is a modifier on `repr(C)` and `repr(rust)`.\n \n-\n-\n-\n-# repr(u8), repr(u16), repr(u32), repr(u64)\n-\n-These specify the size to make a C-like enum. If the discriminant overflows the\n-integer it has to fit in, it will be an error. You can manually ask Rust to\n-allow this by setting the overflowing element to explicitly be 0. However Rust\n-will not allow you to create an enum where two variants.\n-\n-These reprs have no affect on a struct or non-C-like enum.\n\\ No newline at end of file\n+[drop flag]: drop-flags.html"}]}