{"sha": "b711d17c374d7538c8f716cbeaf0fe8c6f7cd691", "node_id": "C_kwDOAAsO6NoAKGI3MTFkMTdjMzc0ZDc1MzhjOGY3MTZjYmVhZjBmZThjNmY3Y2Q2OTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-11T12:38:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T12:38:36Z"}, "message": "Rollup merge of #94592 - jyn514:consistent-config-loading, r=Mark-Simulacrum\n\nFallback to top-level config.toml if not present in current directory, and remove fallback for env vars and CLI flags\n\nThis preserves the behavior where x.py will only give a hard error on a missing config file if it was configured through `--config` or RUST_BOOTSTRAP_CONFIG. It also removes the top-level fallback for everything except the default path; presumably if you're passing the path explicitly, you expect it to be exactly there and don't want to look in the root directory.\n\nFixes https://github.com/rust-lang/rust/issues/94589.", "tree": {"sha": "53aec003ef062863f5ae34133afe15c916fbf9d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53aec003ef062863f5ae34133afe15c916fbf9d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiK0LNCRBK7hj4Ov3rIwAAKNIIAFlgs1F5FCxczsuQuix2E+MZ\nn7UgaHU9A4vCgWjPQhSieTQLFcvZn5dvzSj6z+3Dn+SK2m2u89aH6NosGafWMd7M\n00zS1Gje+x+dFZ8RNWsgH9gGo/beHYg/Gy7iPR42EDyJTNcTTEOkud+goD4wg4Z5\nsn0FN1e94Shw+va8BtO1FIDGEMwhMpcdn3G/eUKtFcM8doKvdI26YlCDft3Nvg9k\n+Mjv9b9Swd/nK8M82mZ94TpILbhDjN9RH4VFnZLXDpSAiLfMgQoDTBv/vAfeA7C9\nXUMfS7eZQ2/q39G5pJyl3b7f/T/FQY8xOwepgzpNXo82kS0stgJ1raGKBUplcf0=\n=+S8x\n-----END PGP SIGNATURE-----\n", "payload": "tree 53aec003ef062863f5ae34133afe15c916fbf9d8\nparent 7189fceab7f4a7d34c103f454ff83d93a58b6407\nparent 4d56f09650a62485fd9f9414e401e12f03959855\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647002316 +0100\ncommitter GitHub <noreply@github.com> 1647002316 +0100\n\nRollup merge of #94592 - jyn514:consistent-config-loading, r=Mark-Simulacrum\n\nFallback to top-level config.toml if not present in current directory, and remove fallback for env vars and CLI flags\n\nThis preserves the behavior where x.py will only give a hard error on a missing config file if it was configured through `--config` or RUST_BOOTSTRAP_CONFIG. It also removes the top-level fallback for everything except the default path; presumably if you're passing the path explicitly, you expect it to be exactly there and don't want to look in the root directory.\n\nFixes https://github.com/rust-lang/rust/issues/94589.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691", "html_url": "https://github.com/rust-lang/rust/commit/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7189fceab7f4a7d34c103f454ff83d93a58b6407", "url": "https://api.github.com/repos/rust-lang/rust/commits/7189fceab7f4a7d34c103f454ff83d93a58b6407", "html_url": "https://github.com/rust-lang/rust/commit/7189fceab7f4a7d34c103f454ff83d93a58b6407"}, {"sha": "4d56f09650a62485fd9f9414e401e12f03959855", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d56f09650a62485fd9f9414e401e12f03959855", "html_url": "https://github.com/rust-lang/rust/commit/4d56f09650a62485fd9f9414e401e12f03959855"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "71b8f3c4553bce5140bc6df271b2b181fd58c661", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=b711d17c374d7538c8f716cbeaf0fe8c6f7cd691", "patch": "@@ -1233,16 +1233,18 @@ def bootstrap(help_triggered):\n     build.verbose = args.verbose\n     build.clean = args.clean\n \n-    # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then fallback to `config.toml` (if it\n-    # exists).\n+    # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then `./config.toml`,\n+    # then `config.toml` in the root directory.\n     toml_path = args.config or os.getenv('RUST_BOOTSTRAP_CONFIG')\n-    if not toml_path and os.path.exists('config.toml'):\n+    using_default_path = toml_path is None\n+    if using_default_path:\n         toml_path = 'config.toml'\n-\n-    if toml_path:\n         if not os.path.exists(toml_path):\n             toml_path = os.path.join(build.rust_root, toml_path)\n \n+    # Give a hard error if `--config` or `RUST_BOOTSTRAP_CONFIG` are set to a missing path,\n+    # but not if `config.toml` hasn't been created.\n+    if not using_default_path or os.path.exists(toml_path):\n         with open(toml_path) as config:\n             build.config_toml = config.read()\n "}, {"sha": "0c0a4733231d22e07bbbcc910eb1bda673a01f0d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711d17c374d7538c8f716cbeaf0fe8c6f7cd691/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b711d17c374d7538c8f716cbeaf0fe8c6f7cd691", "patch": "@@ -647,7 +647,8 @@ impl Config {\n         let get_toml = |file: &Path| {\n             use std::process;\n \n-            let contents = t!(fs::read_to_string(file), \"`include` config not found\");\n+            let contents =\n+                t!(fs::read_to_string(file), format!(\"config file {} not found\", file.display()));\n             match toml::from_str(&contents) {\n                 Ok(table) => table,\n                 Err(err) => {\n@@ -657,14 +658,24 @@ impl Config {\n             }\n         };\n \n-        // check --config first, then `$RUST_BOOTSTRAP_CONFIG` first, then `config.toml`\n+        // Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then `./config.toml`, then `config.toml` in the root directory.\n         let toml_path = flags\n             .config\n             .clone()\n-            .or_else(|| env::var_os(\"RUST_BOOTSTRAP_CONFIG\").map(PathBuf::from))\n-            .unwrap_or_else(|| PathBuf::from(\"config.toml\"));\n-        let mut toml =\n-            if toml_path.exists() { get_toml(&toml_path) } else { TomlConfig::default() };\n+            .or_else(|| env::var_os(\"RUST_BOOTSTRAP_CONFIG\").map(PathBuf::from));\n+        let using_default_path = toml_path.is_none();\n+        let mut toml_path = toml_path.unwrap_or_else(|| PathBuf::from(\"config.toml\"));\n+        if using_default_path && !toml_path.exists() {\n+            toml_path = config.src.join(toml_path);\n+        }\n+\n+        // Give a hard error if `--config` or `RUST_BOOTSTRAP_CONFIG` are set to a missing path,\n+        // but not if `config.toml` hasn't been created.\n+        let mut toml = if !using_default_path || toml_path.exists() {\n+            get_toml(&toml_path)\n+        } else {\n+            TomlConfig::default()\n+        };\n \n         if let Some(include) = &toml.profile {\n             let mut include_path = config.src.clone();"}]}