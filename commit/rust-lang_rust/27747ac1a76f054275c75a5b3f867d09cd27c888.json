{"sha": "27747ac1a76f054275c75a5b3f867d09cd27c888", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzQ3YWMxYTc2ZjA1NDI3NWM3NWE1YjNmODY3ZDA5Y2QyN2M4ODg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T05:45:34Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T12:14:16Z"}, "message": "Revert bogus rename from DefTrait to DefaultImpl.", "tree": {"sha": "e4b53cfb0783edbb6cde4569fd855252457d0fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b53cfb0783edbb6cde4569fd855252457d0fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27747ac1a76f054275c75a5b3f867d09cd27c888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27747ac1a76f054275c75a5b3f867d09cd27c888", "html_url": "https://github.com/rust-lang/rust/commit/27747ac1a76f054275c75a5b3f867d09cd27c888", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27747ac1a76f054275c75a5b3f867d09cd27c888/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dccdde4007c191aa8b8d9cfffb0c7d3509fa675e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dccdde4007c191aa8b8d9cfffb0c7d3509fa675e", "html_url": "https://github.com/rust-lang/rust/commit/dccdde4007c191aa8b8d9cfffb0c7d3509fa675e"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "7c0ffe8f3d81a77d1aa386b5e54b5d67f3bbe2f7", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -357,7 +357,7 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n             let enum_did = item_reqd_and_translated_parent_item(cnum, item);\n             DlDef(def::DefVariant(enum_did, did, false))\n         }\n-        Trait => DlDef(def::DefaultImpl(did)),\n+        Trait => DlDef(def::DefTrait(did)),\n         Enum => DlDef(def::DefTy(did, true)),\n         Impl | DefaultImpl => DlImpl(did),\n         PublicField | InheritedField => DlField,"}, {"sha": "eb723830d383c8d6da97b8902170f3a59b53328f", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -440,7 +440,7 @@ impl tr for def::Def {\n           def::DefVariant(e_did, v_did, is_s) => {\n             def::DefVariant(e_did.tr(dcx), v_did.tr(dcx), is_s)\n           },\n-          def::DefaultImpl(did) => def::DefaultImpl(did.tr(dcx)),\n+          def::DefTrait(did) => def::DefTrait(did.tr(dcx)),\n           def::DefTy(did, is_enum) => def::DefTy(did.tr(dcx), is_enum),\n           def::DefAssociatedTy(did) => def::DefAssociatedTy(did.tr(dcx)),\n           def::DefAssociatedPath(def::TyParamProvenance::FromSelf(did), ident) =>"}, {"sha": "7857bcad8135d8dc6628c80aaf7e792221a07d84", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -38,7 +38,7 @@ pub enum Def {\n     // type `U` (indicated by the Ident).\n     // FIXME(#20301) -- should use Name\n     DefAssociatedPath(TyParamProvenance, ast::Ident),\n-    DefaultImpl(ast::DefId),\n+    DefTrait(ast::DefId),\n     DefPrimTy(ast::PrimTy),\n     DefTyParam(ParamSpace, u32, ast::DefId, ast::Name),\n     DefUse(ast::DefId),\n@@ -135,7 +135,7 @@ impl Def {\n             DefFn(id, _) | DefStaticMethod(id, _) | DefMod(id) |\n             DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(id) |\n-            DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefaultImpl(id) |\n+            DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n             DefMethod(id, _, _) | DefConst(id) |\n             DefAssociatedPath(TyParamProvenance::FromSelf(id), _) |\n             DefAssociatedPath(TyParamProvenance::FromParam(id), _) => {"}, {"sha": "d1fba421bbe58eeb9649b9ac594c3dc66bd5939c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -579,7 +579,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n           def::DefMod(_) | def::DefForeignMod(_) | def::DefUse(_) |\n-          def::DefaultImpl(_) | def::DefTy(..) | def::DefPrimTy(_) |\n+          def::DefTrait(_) | def::DefTy(..) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) |\n           def::DefAssociatedTy(..) | def::DefAssociatedPath(..)=> {"}, {"sha": "9012de0850fa2184e8127bc672a2958b5bed4d8e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -169,7 +169,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 // if this path references a trait, then this will resolve to\n                 // a trait ref, which introduces a binding scope.\n                 match self.def_map.borrow().get(&id) {\n-                    Some(&def::DefaultImpl(..)) => {\n+                    Some(&def::DefTrait(..)) => {\n                         self.with(LateScope(&Vec::new(), self.scope), |_, this| {\n                             this.visit_path(path, id);\n                         });"}, {"sha": "3d92b387cdb3265b35cc0bad5cb62d5be0abdc0a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -802,7 +802,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             def::DefVariant(..) => ck(\"variant\"),\n             def::DefTy(_, false) => ck(\"type\"),\n             def::DefTy(_, true) => ck(\"enum\"),\n-            def::DefaultImpl(..) => ck(\"trait\"),\n+            def::DefTrait(..) => ck(\"trait\"),\n             def::DefStruct(..) => ck(\"struct\"),\n             def::DefMethod(_, Some(..), _) => ck(\"trait method\"),\n             def::DefMethod(..) => ck(\"method\"),"}, {"sha": "a181497010faf2fa71e29d3bf784835bc2ce3d0f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -736,7 +736,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     self.trait_item_map.insert((name, def_id), kind);\n                 }\n \n-                name_bindings.define_type(DefaultImpl(def_id), sp, modifiers);\n+                name_bindings.define_type(DefTrait(def_id), sp, modifiers);\n                 parent.clone()\n             }\n             ItemMac(..) => parent.clone()\n@@ -918,7 +918,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             }\n             child_name_bindings.define_value(def, DUMMY_SP, modifiers);\n           }\n-          DefaultImpl(def_id) => {\n+          DefTrait(def_id) => {\n               debug!(\"(building reduced graph for external \\\n                       crate) building type {}\", final_ident);\n "}, {"sha": "2da8bd5b538b67a8a7bad4a142af16dbe9f814d6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -2989,7 +2989,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 // check for imports shadowing primitive types\n                 if let ast::ViewPathSimple(ident, _) = view_path.node {\n                     match self.def_map.borrow().get(&item.id) {\n-                        Some(&DefTy(..)) | Some(&DefStruct(..)) | Some(&DefaultImpl(..)) | None => {\n+                        Some(&DefTy(..)) | Some(&DefStruct(..)) | Some(&DefTrait(..)) | None => {\n                             self.check_if_primitive_type_name(ident.name, item.span);\n                         }\n                         _ => {}\n@@ -3199,7 +3199,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n             Some(def) => {\n                 match def {\n-                    (DefaultImpl(_), _) => {\n+                    (DefTrait(_), _) => {\n                         debug!(\"(resolving trait) found trait def: {:?}\", def);\n                         self.record_def(trait_reference.ref_id, def);\n                     }\n@@ -4675,7 +4675,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         None => continue\n                     };\n                     let trait_def_id = match def {\n-                        DefaultImpl(trait_def_id) => trait_def_id,\n+                        DefTrait(trait_def_id) => trait_def_id,\n                         _ => continue,\n                     };\n                     if self.trait_item_map.contains_key(&(name, trait_def_id)) {\n@@ -4691,7 +4691,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     Some(target) => target,\n                 };\n                 let did = match target.bindings.def_for_namespace(TypeNS) {\n-                    Some(DefaultImpl(trait_def_id)) => trait_def_id,\n+                    Some(DefTrait(trait_def_id)) => trait_def_id,\n                     Some(..) | None => continue,\n                 };\n                 if self.trait_item_map.contains_key(&(name, did)) {"}, {"sha": "59fca4b03188662d5146b6ad5228e4a6ca3b2d94", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -239,7 +239,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefTy(..) |\n             def::DefAssociatedTy(..) |\n             def::DefAssociatedPath(..) |\n-            def::DefaultImpl(_) => Some(recorder::TypeRef),\n+            def::DefTrait(_) => Some(recorder::TypeRef),\n             def::DefStatic(_, _) |\n             def::DefConst(_) |\n             def::DefLocal(_) |"}, {"sha": "25568db814824da35738eaa01acc4b99b2e61cd6", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -207,7 +207,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n             def::DefUpvar(..) => {\n                 datum_callee(bcx, ref_expr)\n             }\n-            def::DefMod(..) | def::DefForeignMod(..) | def::DefaultImpl(..) |\n+            def::DefMod(..) | def::DefForeignMod(..) | def::DefTrait(..) |\n             def::DefTy(..) | def::DefPrimTy(..) | def::DefAssociatedTy(..) |\n             def::DefUse(..) | def::DefTyParamBinder(..) |\n             def::DefRegion(..) | def::DefLabel(..) | def::DefTyParam(..) |"}, {"sha": "46a7041fff67249bc0d44b067e91235b243ca483", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -600,7 +600,7 @@ pub fn instantiate_trait_ref<'tcx>(\n     -> Rc<ty::TraitRef<'tcx>>\n {\n     match ::lookup_def_tcx(this.tcx(), ast_trait_ref.path.span, ast_trait_ref.ref_id) {\n-        def::DefaultImpl(trait_def_id) => {\n+        def::DefTrait(trait_def_id) => {\n             let trait_ref = ast_path_to_trait_ref(this,\n                                                   rscope,\n                                                   trait_def_id,\n@@ -914,7 +914,7 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n     match ty.node {\n         ast::TyPath(ref path, id) => {\n             match this.tcx().def_map.borrow().get(&id) {\n-                Some(&def::DefaultImpl(trait_def_id)) => {\n+                Some(&def::DefTrait(trait_def_id)) => {\n                     let mut projection_bounds = Vec::new();\n                     let trait_ref = object_path_to_poly_trait_ref(this,\n                                                                   rscope,\n@@ -1194,7 +1194,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                     Some(&d) => d\n                 };\n                 match a_def {\n-                    def::DefaultImpl(trait_def_id) => {\n+                    def::DefTrait(trait_def_id) => {\n                         // N.B. this case overlaps somewhat with\n                         // TyObjectSum, see that fn for details\n                         let mut projection_bounds = Vec::new();\n@@ -1804,7 +1804,7 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n         match *ast_bound {\n             ast::TraitTyParamBound(ref b, ast::TraitBoundModifier::None) => {\n                 match ::lookup_def_tcx(tcx, b.trait_ref.path.span, b.trait_ref.ref_id) {\n-                    def::DefaultImpl(trait_did) => {\n+                    def::DefTrait(trait_did) => {\n                         match trait_def_ids.get(&trait_did) {\n                             // Already seen this trait. We forbid\n                             // duplicates in the list (for some"}, {"sha": "34c52981b794dff838208073f38a0d048a9cb59f", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -435,7 +435,7 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx ast::Pat,\n \n     let def = tcx.def_map.borrow()[pat.id].clone();\n     let (enum_def_id, variant_def_id) = match def {\n-        def::DefaultImpl(_) => {\n+        def::DefTrait(_) => {\n             let name = pprust::path_to_string(path);\n             span_err!(tcx.sess, pat.span, E0168,\n                 \"use of trait `{}` in a struct pattern\", name);"}, {"sha": "f5a03f0721a65be59544993b9412d16caa22f532", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -330,7 +330,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n                                cstore: &cstore::CStore,\n                                dl: decoder::DefLike) {\n             match dl {\n-                decoder::DlDef(def::DefaultImpl(did)) => {\n+                decoder::DlDef(def::DefTrait(did)) => {\n                     traits.push(TraitInfo::new(did));\n                 }\n                 decoder::DlDef(def::DefMod(did)) => {"}, {"sha": "0430954ad7e2f9612e9482636956ca01b4bb5cb2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -3862,7 +3862,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                           variant_id, &fields[..]);\n                 enum_id\n             }\n-            Some(def::DefaultImpl(def_id)) => {\n+            Some(def::DefTrait(def_id)) => {\n                 span_err!(tcx.sess, path.span, E0159,\n                     \"use of trait `{}` as a struct constructor\",\n                     pprust::path_to_string(path));\n@@ -4634,7 +4634,7 @@ fn type_scheme_and_predicates_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefStruct(id) | def::DefConst(id) => {\n             (ty::lookup_item_type(fcx.tcx(), id), ty::lookup_predicates(fcx.tcx(), id))\n         }\n-        def::DefaultImpl(_) |\n+        def::DefTrait(_) |\n         def::DefTy(..) |\n         def::DefAssociatedTy(..) |\n         def::DefAssociatedPath(..) |\n@@ -4738,7 +4738,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefTy(..) |\n         def::DefAssociatedTy(..) |\n         def::DefAssociatedPath(..) |\n-        def::DefaultImpl(..) |\n+        def::DefTrait(..) |\n         def::DefPrimTy(..) |\n         def::DefTyParam(..) => {\n             // Everything but the final segment should have no"}, {"sha": "d1283d6f46bd842ed3a945f5ef3668df9af1e2d8", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -69,7 +69,7 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n     let mut ret = Vec::new();\n     let did = def.def_id();\n     let inner = match def {\n-        def::DefaultImpl(did) => {\n+        def::DefTrait(did) => {\n             record_extern_fqn(cx, did, clean::TypeTrait);\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }"}, {"sha": "058d55bd7ba953ee894aa85b1d1994252a72e28a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27747ac1a76f054275c75a5b3f867d09cd27c888/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=27747ac1a76f054275c75a5b3f867d09cd27c888", "patch": "@@ -2430,7 +2430,7 @@ fn register_def(cx: &DocContext, def: def::Def) -> ast::DefId {\n         def::DefFn(i, _) => (i, TypeFunction),\n         def::DefTy(i, false) => (i, TypeTypedef),\n         def::DefTy(i, true) => (i, TypeEnum),\n-        def::DefaultImpl(i) => (i, TypeTrait),\n+        def::DefTrait(i) => (i, TypeTrait),\n         def::DefStruct(i) => (i, TypeStruct),\n         def::DefMod(i) => (i, TypeModule),\n         def::DefStatic(i, _) => (i, TypeStatic),"}]}