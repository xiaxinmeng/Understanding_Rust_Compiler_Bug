{"sha": "498737c8e9cf52be1bde3bef7ffa24a3d0540257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ODczN2M4ZTljZjUyYmUxYmRlM2JlZjdmZmEyNGEzZDA1NDAyNTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-02T18:56:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-02T19:13:13Z"}, "message": "Address review comments", "tree": {"sha": "d9138a2f9d99deec3d024bf9811702df66abdd70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9138a2f9d99deec3d024bf9811702df66abdd70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498737c8e9cf52be1bde3bef7ffa24a3d0540257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498737c8e9cf52be1bde3bef7ffa24a3d0540257", "html_url": "https://github.com/rust-lang/rust/commit/498737c8e9cf52be1bde3bef7ffa24a3d0540257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498737c8e9cf52be1bde3bef7ffa24a3d0540257/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf71538094b03c9c7116eceabc4985ab3b5e558a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf71538094b03c9c7116eceabc4985ab3b5e558a", "html_url": "https://github.com/rust-lang/rust/commit/cf71538094b03c9c7116eceabc4985ab3b5e558a"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "a22b383e5f39166dc0b558f843bfed5571c23832", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/498737c8e9cf52be1bde3bef7ffa24a3d0540257/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498737c8e9cf52be1bde3bef7ffa24a3d0540257/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=498737c8e9cf52be1bde3bef7ffa24a3d0540257", "patch": "@@ -277,6 +277,8 @@ pub fn parse_in_attr<'a, T>(\n ) -> PResult<'a, T> {\n     let mut parser = Parser::new(\n         sess,\n+        // FIXME(#66940, Centril | petrochenkov): refactor this function so it doesn't\n+        // require reconstructing and immediately re-parsing delimiters.\n         attr.get_normal_item().args.outer_tokens(),\n         None,\n         false,"}, {"sha": "28689720044e8e702f6d80fd08e912f71a2212ae", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/498737c8e9cf52be1bde3bef7ffa24a3d0540257/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498737c8e9cf52be1bde3bef7ffa24a3d0540257/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=498737c8e9cf52be1bde3bef7ffa24a3d0540257", "patch": "@@ -1024,7 +1024,8 @@ impl<'a> Parser<'a> {\n                        self.check(&token::OpenDelim(DelimToken::Brace)) {\n             match self.parse_token_tree() {\n                 TokenTree::Delimited(dspan, delim, tokens) =>\n-                    MacArgs::Delimited(dspan, MacDelimiter::from_token(delim), tokens),\n+                    // We've confirmed above that there is a delimiter so unwrapping is OK.\n+                    MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens),\n                 _ => unreachable!(),\n             }\n         } else if !delimited_only {"}, {"sha": "8018e005b12d72ee6c1e4da30dc2c4d49a8ef6a4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/498737c8e9cf52be1bde3bef7ffa24a3d0540257/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498737c8e9cf52be1bde3bef7ffa24a3d0540257/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=498737c8e9cf52be1bde3bef7ffa24a3d0540257", "patch": "@@ -1396,8 +1396,12 @@ pub enum MacArgs {\n     /// Delimited arguments - `#[attr()/[]/{}]` or `mac!()/[]/{}`.\n     Delimited(DelimSpan, MacDelimiter, TokenStream),\n     /// Arguments of a key-value attribute - `#[attr = \"value\"]`.\n-    /// Span belongs to the `=` token, token stream is the \"value\".\n-    Eq(Span, TokenStream),\n+    Eq(\n+        /// Span of the `=` token.\n+        Span,\n+        /// Token stream of the \"value\".\n+        TokenStream,\n+    ),\n }\n \n impl MacArgs {\n@@ -1421,13 +1425,13 @@ impl MacArgs {\n     pub fn inner_tokens(&self) -> TokenStream {\n         match self {\n             MacArgs::Empty => TokenStream::default(),\n-            MacArgs::Delimited(.., tokens) => tokens.clone(),\n+            MacArgs::Delimited(.., tokens) |\n             MacArgs::Eq(.., tokens) => tokens.clone(),\n         }\n     }\n \n     /// Tokens together with the delimiters or `=`.\n-    /// Use of this functions generally means that something suboptimal or hacky is happening.\n+    /// Use of this method generally means that something suboptimal or hacky is happening.\n     pub fn outer_tokens(&self) -> TokenStream {\n         match *self {\n             MacArgs::Empty => TokenStream::default(),\n@@ -1461,12 +1465,12 @@ impl MacDelimiter {\n         }\n     }\n \n-    pub fn from_token(delim: DelimToken) -> MacDelimiter {\n+    pub fn from_token(delim: DelimToken) -> Option<MacDelimiter> {\n         match delim {\n-            token::Paren => MacDelimiter::Parenthesis,\n-            token::Bracket => MacDelimiter::Bracket,\n-            token::Brace => MacDelimiter::Brace,\n-            token::NoDelim => panic!(\"expected a delimiter\"),\n+            token::Paren => Some(MacDelimiter::Parenthesis),\n+            token::Bracket => Some(MacDelimiter::Bracket),\n+            token::Brace => Some(MacDelimiter::Brace),\n+            token::NoDelim => None,\n         }\n     }\n }"}]}