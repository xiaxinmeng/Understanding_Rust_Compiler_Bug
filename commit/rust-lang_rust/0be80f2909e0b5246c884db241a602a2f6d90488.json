{"sha": "0be80f2909e0b5246c884db241a602a2f6d90488", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZTgwZjI5MDllMGI1MjQ2Yzg4NGRiMjQxYTYwMmEyZjZkOTA0ODg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-29T02:36:06Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-12-03T11:11:29Z"}, "message": "[const-prop] Fix ICE calculating enum discriminant\n\nFixes #66787", "tree": {"sha": "e57888e4c7ef17c827afa7515b56b59c4ffafedd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57888e4c7ef17c827afa7515b56b59c4ffafedd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be80f2909e0b5246c884db241a602a2f6d90488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be80f2909e0b5246c884db241a602a2f6d90488", "html_url": "https://github.com/rust-lang/rust/commit/0be80f2909e0b5246c884db241a602a2f6d90488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be80f2909e0b5246c884db241a602a2f6d90488/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4007d4ef26eab44bdabc2b7574d032152264d3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4007d4ef26eab44bdabc2b7574d032152264d3ad", "html_url": "https://github.com/rust-lang/rust/commit/4007d4ef26eab44bdabc2b7574d032152264d3ad"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "3a204c350b4aba4569b0e80ebb7064bbc1eef3b1", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0be80f2909e0b5246c884db241a602a2f6d90488/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be80f2909e0b5246c884db241a602a2f6d90488/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=0be80f2909e0b5246c884db241a602a2f6d90488", "patch": "@@ -1038,23 +1038,26 @@ where\n         variant_index: VariantIdx,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        let variant_scalar = Scalar::from_u32(variant_index.as_u32()).into();\n+\n+        // Layout computation excludes uninhabited variants from consideration\n+        // therefore there's no way to represent those variants in the given layout.\n+        if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {\n+            throw_ub!(Unreachable);\n+        }\n \n         match dest.layout.variants {\n             layout::Variants::Single { index } => {\n-                if index != variant_index {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                assert_eq!(index, variant_index);\n             }\n             layout::Variants::Multiple {\n                 discr_kind: layout::DiscriminantKind::Tag,\n                 discr: ref discr_layout,\n                 discr_index,\n                 ..\n             } => {\n-                if !dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index) {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                // No need to validate that the discriminant here because the\n+                // `TyLayout::for_variant()` call earlier already checks the variant is valid.\n+\n                 let discr_val =\n                     dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;\n \n@@ -1077,9 +1080,9 @@ where\n                 discr_index,\n                 ..\n             } => {\n-                if !variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len() {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                // No need to validate that the discriminant here because the\n+                // `TyLayout::for_variant()` call earlier already checks the variant is valid.\n+\n                 if variant_index != dataful_variant {\n                     let variants_start = niche_variants.start().as_u32();\n                     let variant_index_relative = variant_index.as_u32()"}, {"sha": "612b795eb5cd0a0a5fab14a720e84cbb20cbfee4", "filename": "src/test/ui/consts/issue-66787.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0be80f2909e0b5246c884db241a602a2f6d90488/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be80f2909e0b5246c884db241a602a2f6d90488/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs?ref=0be80f2909e0b5246c884db241a602a2f6d90488", "patch": "@@ -0,0 +1,39 @@\n+// build-pass\n+// compile-flags: --crate-type lib\n+\n+// Regression test for ICE which occurred when const propagating an enum with three variants\n+// one of which is uninhabited.\n+\n+pub enum ApiError {}\n+#[allow(dead_code)]\n+pub struct TokioError {\n+    b: bool,\n+}\n+pub enum Error {\n+    Api {\n+        source: ApiError,\n+    },\n+    Ethereum,\n+    Tokio {\n+        source: TokioError,\n+    },\n+}\n+struct Api;\n+impl IntoError<Error> for Api\n+{\n+    type Source = ApiError;\n+    fn into_error(self, error: Self::Source) -> Error {\n+        Error::Api {\n+            source: (|v| v)(error),\n+        }\n+    }\n+}\n+\n+pub trait IntoError<E>\n+{\n+    /// The underlying error\n+    type Source;\n+\n+    /// Combine the information to produce the error\n+    fn into_error(self, source: Self::Source) -> E;\n+}"}]}