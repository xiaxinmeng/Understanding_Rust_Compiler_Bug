{"sha": "5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "node_id": "C_kwDOAAsO6NoAKDU4MjVhZTdiZDRiNWRjYjM3YjBiYjdjY2ZhYTY4ZjU3ZTllOGVlMWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T17:12:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T17:12:10Z"}, "message": "Auto merge of #9581 - ebobrow:mul-add-negative, r=Manishearth\n\n`suboptimal_flops` lint for multiply and subtract\n\nfixes #9526\n\nchangelog: [`suboptimal_flops`] lint for multiply and subtract", "tree": {"sha": "ffedcba88e44ec58deec11e488d49421d391e2b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffedcba88e44ec58deec11e488d49421d391e2b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "html_url": "https://github.com/rust-lang/rust/commit/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e6c239f346100328cc69787604ac72737c30f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e6c239f346100328cc69787604ac72737c30f2", "html_url": "https://github.com/rust-lang/rust/commit/09e6c239f346100328cc69787604ac72737c30f2"}, {"sha": "15431b36bb760a8793740907e8d13e7ed8272e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/15431b36bb760a8793740907e8d13e7ed8272e89", "html_url": "https://github.com/rust-lang/rust/commit/15431b36bb760a8793740907e8d13e7ed8272e89"}], "stats": {"total": 106, "additions": 81, "deletions": 25}, "files": [{"sha": "0ed301964758e643243ba19cb09f1f1ab37d2cbf", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "patch": "@@ -311,14 +311,25 @@ fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args:\n \n                 if let ExprKind::Binary(\n                     Spanned {\n-                        node: BinOpKind::Add, ..\n+                        node: op @ (BinOpKind::Add | BinOpKind::Sub),\n+                        ..\n                     },\n                     lhs,\n                     rhs,\n                 ) = parent.kind\n                 {\n                     let other_addend = if lhs.hir_id == expr.hir_id { rhs } else { lhs };\n \n+                    // Negate expr if original code has subtraction and expr is on the right side\n+                    let maybe_neg_sugg = |expr, hir_id| {\n+                        let sugg = Sugg::hir(cx, expr, \"..\");\n+                        if matches!(op, BinOpKind::Sub) && hir_id == rhs.hir_id {\n+                            format!(\"-{sugg}\")\n+                        } else {\n+                            sugg.to_string()\n+                        }\n+                    };\n+\n                     span_lint_and_sugg(\n                         cx,\n                         SUBOPTIMAL_FLOPS,\n@@ -328,8 +339,8 @@ fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args:\n                         format!(\n                             \"{}.mul_add({}, {})\",\n                             Sugg::hir(cx, receiver, \"..\").maybe_par(),\n-                            Sugg::hir(cx, receiver, \"..\"),\n-                            Sugg::hir(cx, other_addend, \"..\"),\n+                            maybe_neg_sugg(receiver, expr.hir_id),\n+                            maybe_neg_sugg(other_addend, other_addend.hir_id),\n                         ),\n                         Applicability::MachineApplicable,\n                     );\n@@ -443,7 +454,8 @@ fn is_float_mul_expr<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(&'\n fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if let ExprKind::Binary(\n         Spanned {\n-            node: BinOpKind::Add, ..\n+            node: op @ (BinOpKind::Add | BinOpKind::Sub),\n+            ..\n         },\n         lhs,\n         rhs,\n@@ -457,10 +469,27 @@ fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             }\n         }\n \n+        let maybe_neg_sugg = |expr| {\n+            let sugg = Sugg::hir(cx, expr, \"..\");\n+            if let BinOpKind::Sub = op {\n+                format!(\"-{sugg}\")\n+            } else {\n+                sugg.to_string()\n+            }\n+        };\n+\n         let (recv, arg1, arg2) = if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, lhs) {\n-            (inner_lhs, inner_rhs, rhs)\n+            (\n+                inner_lhs,\n+                Sugg::hir(cx, inner_rhs, \"..\").to_string(),\n+                maybe_neg_sugg(rhs),\n+            )\n         } else if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, rhs) {\n-            (inner_lhs, inner_rhs, lhs)\n+            (\n+                inner_lhs,\n+                maybe_neg_sugg(inner_rhs),\n+                Sugg::hir(cx, lhs, \"..\").to_string(),\n+            )\n         } else {\n             return;\n         };\n@@ -471,12 +500,7 @@ fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             expr.span,\n             \"multiply and add expressions can be calculated more efficiently and accurately\",\n             \"consider using\",\n-            format!(\n-                \"{}.mul_add({}, {})\",\n-                prepare_receiver_sugg(cx, recv),\n-                Sugg::hir(cx, arg1, \"..\"),\n-                Sugg::hir(cx, arg2, \"..\"),\n-            ),\n+            format!(\"{}.mul_add({arg1}, {arg2})\", prepare_receiver_sugg(cx, recv)),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "d3e536ba3500d6f1aff80165a2c5426798860508", "filename": "tests/ui/floating_point_mul_add.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_mul_add.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_mul_add.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.fixed?ref=5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "patch": "@@ -19,7 +19,9 @@ fn main() {\n     let d: f64 = 0.0001;\n \n     let _ = a.mul_add(b, c);\n+    let _ = a.mul_add(b, -c);\n     let _ = a.mul_add(b, c);\n+    let _ = a.mul_add(-b, c);\n     let _ = 2.0f64.mul_add(4.0, a);\n     let _ = 2.0f64.mul_add(4., a);\n "}, {"sha": "5d4a9e35cfc22e90ec2243f9a1cf98ff93772f7a", "filename": "tests/ui/floating_point_mul_add.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_mul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_mul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.rs?ref=5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "patch": "@@ -19,7 +19,9 @@ fn main() {\n     let d: f64 = 0.0001;\n \n     let _ = a * b + c;\n+    let _ = a * b - c;\n     let _ = c + a * b;\n+    let _ = c - a * b;\n     let _ = a + 2.0 * 4.0;\n     let _ = a + 2. * 4.;\n "}, {"sha": "a79ae94e8d431d0e7a2aec81b984ecb0c18772a5", "filename": "tests/ui/floating_point_mul_add.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_mul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_mul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.stderr?ref=5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "patch": "@@ -9,56 +9,68 @@ LL |     let _ = a * b + c;\n error: multiply and add expressions can be calculated more efficiently and accurately\n   --> $DIR/floating_point_mul_add.rs:22:13\n    |\n+LL |     let _ = a * b - c;\n+   |             ^^^^^^^^^ help: consider using: `a.mul_add(b, -c)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_mul_add.rs:23:13\n+   |\n LL |     let _ = c + a * b;\n    |             ^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:23:13\n+  --> $DIR/floating_point_mul_add.rs:24:13\n+   |\n+LL |     let _ = c - a * b;\n+   |             ^^^^^^^^^ help: consider using: `a.mul_add(-b, c)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_mul_add.rs:25:13\n    |\n LL |     let _ = a + 2.0 * 4.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4.0, a)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:24:13\n+  --> $DIR/floating_point_mul_add.rs:26:13\n    |\n LL |     let _ = a + 2. * 4.;\n    |             ^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4., a)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:26:13\n+  --> $DIR/floating_point_mul_add.rs:28:13\n    |\n LL |     let _ = (a * b) + c;\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:27:13\n+  --> $DIR/floating_point_mul_add.rs:29:13\n    |\n LL |     let _ = c + (a * b);\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:28:13\n+  --> $DIR/floating_point_mul_add.rs:30:13\n    |\n LL |     let _ = a * b * c + d;\n    |             ^^^^^^^^^^^^^ help: consider using: `(a * b).mul_add(c, d)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:30:13\n+  --> $DIR/floating_point_mul_add.rs:32:13\n    |\n LL |     let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c))`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:31:13\n+  --> $DIR/floating_point_mul_add.rs:33:13\n    |\n LL |     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_mul_add.rs:33:13\n+  --> $DIR/floating_point_mul_add.rs:35:13\n    |\n LL |     let _ = (a * a + b).sqrt();\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(a, b)`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "884d05fed71ba2f650100a8e1db301ac3c5731e7", "filename": "tests/ui/floating_point_powi.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "patch": "@@ -8,7 +8,9 @@ fn main() {\n \n     let y = 4f32;\n     let _ = x.mul_add(x, y);\n+    let _ = x.mul_add(x, -y);\n     let _ = y.mul_add(y, x);\n+    let _ = y.mul_add(-y, x);\n     let _ = (y as f32).mul_add(y as f32, x);\n     let _ = x.mul_add(x, y).sqrt();\n     let _ = y.mul_add(y, x).sqrt();"}, {"sha": "e6a1c895371b6fe68622774068b4a693798350b8", "filename": "tests/ui/floating_point_powi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "patch": "@@ -8,7 +8,9 @@ fn main() {\n \n     let y = 4f32;\n     let _ = x.powi(2) + y;\n+    let _ = x.powi(2) - y;\n     let _ = x + y.powi(2);\n+    let _ = x - y.powi(2);\n     let _ = x + (y as f32).powi(2);\n     let _ = (x.powi(2) + y).sqrt();\n     let _ = (x + y.powi(2)).sqrt();"}, {"sha": "5df0de1fef22e59f22fdf21d73e5c6e2ed7bed69", "filename": "tests/ui/floating_point_powi.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=5825ae7bd4b5dcb37b0bb7ccfaa68f57e9e8ee1b", "patch": "@@ -9,26 +9,38 @@ LL |     let _ = x.powi(2) + y;\n error: multiply and add expressions can be calculated more efficiently and accurately\n   --> $DIR/floating_point_powi.rs:11:13\n    |\n+LL |     let _ = x.powi(2) - y;\n+   |             ^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, -y)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:12:13\n+   |\n LL |     let _ = x + y.powi(2);\n    |             ^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:12:13\n+  --> $DIR/floating_point_powi.rs:13:13\n+   |\n+LL |     let _ = x - y.powi(2);\n+   |             ^^^^^^^^^^^^^ help: consider using: `y.mul_add(-y, x)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_powi.rs:14:13\n    |\n LL |     let _ = x + (y as f32).powi(2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(y as f32).mul_add(y as f32, x)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:13:13\n+  --> $DIR/floating_point_powi.rs:15:13\n    |\n LL |     let _ = (x.powi(2) + y).sqrt();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.mul_add(x, y)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_powi.rs:14:13\n+  --> $DIR/floating_point_powi.rs:16:13\n    |\n LL |     let _ = (x + y.powi(2)).sqrt();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `y.mul_add(y, x)`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}]}