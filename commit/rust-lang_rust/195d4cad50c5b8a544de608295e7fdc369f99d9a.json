{"sha": "195d4cad50c5b8a544de608295e7fdc369f99d9a", "node_id": "C_kwDOAAsO6NoAKDE5NWQ0Y2FkNTBjNWI4YTU0NGRlNjA4Mjk1ZTdmZGMzNjlmOTlkOWE", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2023-04-27T23:40:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-27T23:40:09Z"}, "message": "Merge pull request #342 from rust-lang/load-store\n\nFix {to,from}_array UB when repr(simd) produces padding", "tree": {"sha": "694064e5de122534b90c7a261e34cca97c1a6566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/694064e5de122534b90c7a261e34cca97c1a6566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/195d4cad50c5b8a544de608295e7fdc369f99d9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSwfZCRBK7hj4Ov3rIwAAQtYIAFrP0LBvNRN8HIAA31WOZ672\n/ZjclUm6InJkUrtCDj9GvW1YGdX5i0BjerUjYZzOmLXbUU7Feh8k02WuqA/L50nD\n0ZjttZMGBmS3VyurhjaWukIcwypMw9TOpI+cbnuu63abBLmODuFOpFgqhtQafv53\n/PWFfFrUPe2Dtc/lxqu/gnvkMU9oNBIeunOKSUe5De7AYBpCyBx9A+8IdA4ERVe/\n6GQZ/JWZLD6T2nQT4K/xj6hZLpWYEVmc1gvEGCB1HizDliixqw8JoNyU5PNjRD+s\nPbuS8/DuI0yL3hRrp9cZVKb5BZ/WbVdwzj4j+Mwx0+11Z+wiza2I3i9j9cLanpc=\n=n84j\n-----END PGP SIGNATURE-----\n", "payload": "tree 694064e5de122534b90c7a261e34cca97c1a6566\nparent ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b\nparent c504f01abeba606a5fa7d081ed8aec25d118a486\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1682638809 -0400\ncommitter GitHub <noreply@github.com> 1682638809 -0400\n\nMerge pull request #342 from rust-lang/load-store\n\nFix {to,from}_array UB when repr(simd) produces padding"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/195d4cad50c5b8a544de608295e7fdc369f99d9a", "html_url": "https://github.com/rust-lang/rust/commit/195d4cad50c5b8a544de608295e7fdc369f99d9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/195d4cad50c5b8a544de608295e7fdc369f99d9a/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b", "html_url": "https://github.com/rust-lang/rust/commit/ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b"}, {"sha": "c504f01abeba606a5fa7d081ed8aec25d118a486", "url": "https://api.github.com/repos/rust-lang/rust/commits/c504f01abeba606a5fa7d081ed8aec25d118a486", "html_url": "https://github.com/rust-lang/rust/commit/c504f01abeba606a5fa7d081ed8aec25d118a486"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "31e7a3617bc5969ba4f174b23f0cfffb3401d8d4", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195d4cad50c5b8a544de608295e7fdc369f99d9a/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195d4cad50c5b8a544de608295e7fdc369f99d9a/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=195d4cad50c5b8a544de608295e7fdc369f99d9a", "patch": "@@ -2,6 +2,8 @@\n #![feature(\n     const_ptr_read,\n     const_refs_to_cell,\n+    const_maybe_uninit_as_mut_ptr,\n+    const_mut_refs,\n     convert_float_to_int,\n     decl_macro,\n     intra_doc_pointers,"}, {"sha": "92984f55e45a552fe0f8f05136ab2623b7e5b1d3", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/195d4cad50c5b8a544de608295e7fdc369f99d9a/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195d4cad50c5b8a544de608295e7fdc369f99d9a/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=195d4cad50c5b8a544de608295e7fdc369f99d9a", "patch": "@@ -176,34 +176,70 @@ where\n         unsafe { &mut *(self as *mut Self as *mut [T; N]) }\n     }\n \n+    /// Load a vector from an array of `T`.\n+    ///\n+    /// This function is necessary since `repr(simd)` has padding for non-power-of-2 vectors (at the time of writing).\n+    /// With padding, `read_unaligned` will read past the end of an array of N elements.\n+    ///\n+    /// # Safety\n+    /// Reading `ptr` must be safe, as if by `<*const [T; N]>::read_unaligned`.\n+    const unsafe fn load(ptr: *const [T; N]) -> Self {\n+        // There are potentially simpler ways to write this function, but this should result in\n+        // LLVM `load <N x T>`\n+\n+        let mut tmp = core::mem::MaybeUninit::<Self>::uninit();\n+        // SAFETY: `Simd<T, N>` always contains `N` elements of type `T`.  It may have padding\n+        // which does not need to be initialized.  The safety of reading `ptr` is ensured by the\n+        // caller.\n+        unsafe {\n+            core::ptr::copy_nonoverlapping(ptr, tmp.as_mut_ptr().cast(), 1);\n+            tmp.assume_init()\n+        }\n+    }\n+\n+    /// Store a vector to an array of `T`.\n+    ///\n+    /// See `load` as to why this function is necessary.\n+    ///\n+    /// # Safety\n+    /// Writing to `ptr` must be safe, as if by `<*mut [T; N]>::write_unaligned`.\n+    const unsafe fn store(self, ptr: *mut [T; N]) {\n+        // There are potentially simpler ways to write this function, but this should result in\n+        // LLVM `store <N x T>`\n+\n+        // Creating a temporary helps LLVM turn the memcpy into a store.\n+        let tmp = self;\n+        // SAFETY: `Simd<T, N>` always contains `N` elements of type `T`.  The safety of writing\n+        // `ptr` is ensured by the caller.\n+        unsafe { core::ptr::copy_nonoverlapping(tmp.as_array(), ptr, 1) }\n+    }\n+\n     /// Converts an array to a SIMD vector.\n     pub const fn from_array(array: [T; N]) -> Self {\n-        // SAFETY: Transmuting between `Simd<T, N>` and `[T; N]`\n-        // is always valid. We need to use `read_unaligned` here, since\n-        // the array may have a lower alignment than the vector.\n+        // SAFETY: `&array` is safe to read.\n         //\n-        // FIXME: We currently use a pointer read instead of `transmute_copy` because\n-        // it results in better codegen with optimizations disabled, but we should\n-        // probably just use `transmute` once that works on const generic types.\n+        // FIXME: We currently use a pointer load instead of `transmute_copy` because `repr(simd)`\n+        // results in padding for non-power-of-2 vectors (so vectors are larger than arrays).\n         //\n         // NOTE: This deliberately doesn't just use `Self(array)`, see the comment\n         // on the struct definition for details.\n-        unsafe { (&array as *const [T; N] as *const Self).read_unaligned() }\n+        unsafe { Self::load(&array) }\n     }\n \n     /// Converts a SIMD vector to an array.\n     pub const fn to_array(self) -> [T; N] {\n-        // SAFETY: Transmuting between `Simd<T, N>` and `[T; N]`\n-        // is always valid. No need to use `read_unaligned` here, since\n-        // the vector never has a lower alignment than the array.\n+        let mut tmp = core::mem::MaybeUninit::uninit();\n+        // SAFETY: writing to `tmp` is safe and initializes it.\n         //\n-        // FIXME: We currently use a pointer read instead of `transmute_copy` because\n-        // it results in better codegen with optimizations disabled, but we should\n-        // probably just use `transmute` once that works on const generic types.\n+        // FIXME: We currently use a pointer store instead of `transmute_copy` because `repr(simd)`\n+        // results in padding for non-power-of-2 vectors (so vectors are larger than arrays).\n         //\n         // NOTE: This deliberately doesn't just use `self.0`, see the comment\n         // on the struct definition for details.\n-        unsafe { (&self as *const Self as *const [T; N]).read() }\n+        unsafe {\n+            self.store(tmp.as_mut_ptr());\n+            tmp.assume_init()\n+        }\n     }\n \n     /// Converts a slice to a SIMD vector containing `slice[..N]`."}]}