{"sha": "eb4fc45310c70513d73d893616cd6735465680ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGZjNDUzMTBjNzA1MTNkNzNkODkzNjE2Y2Q2NzM1NDY1NjgwY2E=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-03T20:05:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-03T20:05:18Z"}, "message": "Use CachingSourceMapView::byte_pos_to_line_and_col instead of SourceMap::lookup_char_pos\n\nThe former calculates byte offsets instead of char offsets. It is faster\nto calculate byte offsets than char offsets. Also most DWARF producers\nand consumers use byte offsets instead of char offsets.", "tree": {"sha": "324877ae9d8e130192ab06d6f981e9618ffc7d4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324877ae9d8e130192ab06d6f981e9618ffc7d4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4fc45310c70513d73d893616cd6735465680ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fc45310c70513d73d893616cd6735465680ca", "html_url": "https://github.com/rust-lang/rust/commit/eb4fc45310c70513d73d893616cd6735465680ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fc45310c70513d73d893616cd6735465680ca/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33e73091f8d4299e7f281a7d5da5184bf055c895", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e73091f8d4299e7f281a7d5da5184bf055c895", "html_url": "https://github.com/rust-lang/rust/commit/33e73091f8d4299e7f281a7d5da5184bf055c895"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "66a12091ecda9f61e61fdb6f6e72979949b42a48", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eb4fc45310c70513d73d893616cd6735465680ca/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4fc45310c70513d73d893616cd6735465680ca/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=eb4fc45310c70513d73d893616cd6735465680ca", "patch": "@@ -3,7 +3,7 @@ use std::path::{Component, Path};\n \n use crate::prelude::*;\n \n-use rustc_span::FileName;\n+use rustc_span::{CachingSourceMapView, FileName};\n \n use cranelift_codegen::binemit::CodeOffset;\n \n@@ -74,12 +74,12 @@ fn line_program_add_file(\n \n impl<'tcx> DebugContext<'tcx> {\n     pub(super) fn emit_location(&mut self, entry_id: UnitEntryId, span: Span) {\n-        let loc = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+        let (file, line, col) = self.source_map.byte_pos_to_line_and_col(span.lo()).unwrap();\n \n         let file_id = line_program_add_file(\n             &mut self.dwarf.unit.line_program,\n             &mut self.dwarf.line_strings,\n-            &loc.file.name,\n+            &file.name,\n         );\n \n         let entry = self.dwarf.unit.get_mut(entry_id);\n@@ -90,12 +90,12 @@ impl<'tcx> DebugContext<'tcx> {\n         );\n         entry.set(\n             gimli::DW_AT_decl_line,\n-            AttributeValue::Udata(loc.line as u64),\n+            AttributeValue::Udata(line as u64),\n         );\n         // FIXME: probably omit this\n         entry.set(\n             gimli::DW_AT_decl_column,\n-            AttributeValue::Udata(loc.col.to_usize() as u64),\n+            AttributeValue::Udata(col.to_usize() as u64),\n         );\n     }\n }\n@@ -108,6 +108,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) -> CodeOffset {\n         let tcx = self.debug_context.tcx;\n+        let mut source_map = CachingSourceMapView::new(tcx.sess.source_map());\n \n         let line_program = &mut self.debug_context.dwarf.unit.line_program;\n \n@@ -124,25 +125,25 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         let line_strings = &mut self.debug_context.dwarf.line_strings;\n         let mut last_file = None;\n         let mut create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n-            let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n+            let (file, line, col) = source_map.byte_pos_to_line_and_col(span.lo()).unwrap();\n \n             // line_program_add_file is very slow.\n             // Optimize for the common case of the current file not being changed.\n             let current_file_changed = if let Some(last_file) = &mut last_file {\n                 // If the allocations are not equal, then the files may still be equal, but that\n                 // is not a problem, as this is just an optimization.\n-                !Lrc::ptr_eq(last_file, &loc.file)\n+                !Lrc::ptr_eq(last_file, &file)\n             } else {\n                 true\n             };\n             if current_file_changed {\n-                let file_id = line_program_add_file(line_program, line_strings, &loc.file.name);\n+                let file_id = line_program_add_file(line_program, line_strings, &file.name);\n                 line_program.row().file = file_id;\n-                last_file = Some(loc.file.clone());\n+                last_file = Some(file.clone());\n             }\n \n-            line_program.row().line = loc.line as u64;\n-            line_program.row().column = loc.col.to_u32() as u64 + 1;\n+            line_program.row().line = line as u64;\n+            line_program.row().column = col.to_u32() as u64 + 1;\n             line_program.generate_row();\n         };\n "}, {"sha": "f007cb1265dea12fa3225ad3ae42e0c9cd1e901f", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb4fc45310c70513d73d893616cd6735465680ca/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4fc45310c70513d73d893616cd6735465680ca/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=eb4fc45310c70513d73d893616cd6735465680ca", "patch": "@@ -3,6 +3,8 @@ mod line_info;\n \n use crate::prelude::*;\n \n+use rustc_span::CachingSourceMapView;\n+\n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::RegUnit;\n use cranelift_codegen::ValueLocRange;\n@@ -34,6 +36,8 @@ pub struct DebugContext<'tcx> {\n     unit_range_list: RangeList,\n \n     types: HashMap<Ty<'tcx>, UnitEntryId>,\n+\n+    source_map: CachingSourceMapView<'tcx>,\n }\n \n impl<'tcx> DebugContext<'tcx> {\n@@ -98,6 +102,8 @@ impl<'tcx> DebugContext<'tcx> {\n             unit_range_list: RangeList(Vec::new()),\n \n             types: HashMap::new(),\n+\n+            source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n         }\n     }\n "}]}