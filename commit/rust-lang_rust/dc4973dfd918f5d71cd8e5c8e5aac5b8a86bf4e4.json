{"sha": "dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDk3M2RmZDkxOGY1ZDcxY2Q4ZTVjOGU1YWFjNWI4YTg2YmY0ZTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-01T22:42:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-01T22:42:39Z"}, "message": "Expand where negative supertrait specific error is shown\n\nFix #58857.", "tree": {"sha": "7e2f269860f0c23ed538d7b5dbd2c8a2841befca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e2f269860f0c23ed538d7b5dbd2c8a2841befca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4", "html_url": "https://github.com/rust-lang/rust/commit/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d2d83ca3b5155468ab96b09a7c54568449b137", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d2d83ca3b5155468ab96b09a7c54568449b137", "html_url": "https://github.com/rust-lang/rust/commit/c1d2d83ca3b5155468ab96b09a7c54568449b137"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "1606bd591bd21e09733c30e862feefcfcde618b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4", "patch": "@@ -1803,7 +1803,7 @@ impl<'a> Parser<'a> {\n         let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n-            bounds.append(&mut self.parse_generic_bounds(None)?);\n+            bounds.append(&mut self.parse_generic_bounds(Some(self.prev_span))?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n     }\n@@ -5523,6 +5523,7 @@ impl<'a> Parser<'a> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n         let mut last_plus_span = None;\n+        let mut was_negative = false;\n         loop {\n             // This needs to be synchronized with `Token::can_begin_bound`.\n             let is_bound_start = self.check_path() || self.check_lifetime() ||\n@@ -5567,9 +5568,10 @@ impl<'a> Parser<'a> {\n                     }\n                     let poly_span = lo.to(self.prev_span);\n                     if is_negative {\n-                        negative_bounds.push(\n-                            last_plus_span.or(colon_span).unwrap()\n-                                .to(poly_span));\n+                        was_negative = true;\n+                        if let Some(sp) = last_plus_span.or(colon_span) {\n+                            negative_bounds.push(sp.to(poly_span));\n+                        }\n                     } else {\n                         let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n                         let modifier = if question.is_some() {\n@@ -5591,26 +5593,28 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        if !negative_bounds.is_empty() {\n+        if !negative_bounds.is_empty() || was_negative {\n             let plural = negative_bounds.len() > 1;\n             let mut err = self.struct_span_err(negative_bounds,\n                                                \"negative trait bounds are not supported\");\n-            let bound_list = colon_span.unwrap().to(self.prev_span);\n-            let mut new_bound_list = String::new();\n-            if !bounds.is_empty() {\n-                let mut snippets = bounds.iter().map(|bound| bound.span())\n-                    .map(|span| self.sess.source_map().span_to_snippet(span));\n-                while let Some(Ok(snippet)) = snippets.next() {\n-                    new_bound_list.push_str(\" + \");\n-                    new_bound_list.push_str(&snippet);\n-                }\n-                new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n-            }\n-            err.span_suggestion_short(bound_list,\n-                                      &format!(\"remove the trait bound{}\",\n-                                              if plural { \"s\" } else { \"\" }),\n-                                      new_bound_list,\n-                                      Applicability::MachineApplicable);\n+            if let Some(bound_list) = colon_span {\n+                let bound_list = bound_list.to(self.prev_span);\n+                let mut new_bound_list = String::new();\n+                if !bounds.is_empty() {\n+                    let mut snippets = bounds.iter().map(|bound| bound.span())\n+                        .map(|span| self.sess.source_map().span_to_snippet(span));\n+                    while let Some(Ok(snippet)) = snippets.next() {\n+                        new_bound_list.push_str(\" + \");\n+                        new_bound_list.push_str(&snippet);\n+                    }\n+                    new_bound_list = new_bound_list.replacen(\" +\", \":\", 1);\n+                }\n+                err.span_suggestion_short(bound_list,\n+                                        &format!(\"remove the trait bound{}\",\n+                                                if plural { \"s\" } else { \"\" }),\n+                                        new_bound_list,\n+                                        Applicability::MachineApplicable);\n+            }\n             err.emit();\n         }\n \n@@ -5646,7 +5650,7 @@ impl<'a> Parser<'a> {\n \n         // Parse optional colon and param bounds.\n         let bounds = if self.eat(&token::Colon) {\n-            self.parse_generic_bounds(None)?\n+            self.parse_generic_bounds(Some(self.prev_span))?\n         } else {\n             Vec::new()\n         };\n@@ -6091,7 +6095,7 @@ impl<'a> Parser<'a> {\n                 // or with mandatory equality sign and the second type.\n                 let ty = self.parse_ty()?;\n                 if self.eat(&token::Colon) {\n-                    let bounds = self.parse_generic_bounds(None)?;\n+                    let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n                     where_clause.predicates.push(ast::WherePredicate::BoundPredicate(\n                         ast::WhereBoundPredicate {\n                             span: lo.to(self.prev_span),\n@@ -7643,7 +7647,7 @@ impl<'a> Parser<'a> {\n         tps.where_clause = self.parse_where_clause()?;\n         let alias = if existential {\n             self.expect(&token::Colon)?;\n-            let bounds = self.parse_generic_bounds(None)?;\n+            let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n             AliasKind::Existential(bounds)\n         } else {\n             self.expect(&token::Eq)?;"}, {"sha": "392e4ea0c2ecc2ca65d99dcc1dc02cb320e056b3", "filename": "src/test/ui/issues/issue-58857.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4/src%2Ftest%2Fui%2Fissues%2Fissue-58857.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4/src%2Ftest%2Fui%2Fissues%2Fissue-58857.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58857.rs?ref=dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4", "patch": "@@ -0,0 +1,7 @@\n+struct Conj<A> {a : A}\n+trait Valid {}\n+\n+impl<A: !Valid> Conj<A>{}\n+//~^ ERROR negative trait bounds are not supported\n+\n+fn main() {}"}, {"sha": "040e9eb8a65676a5d7d41b3e4c23984be22c49d8", "filename": "src/test/ui/issues/issue-58857.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr?ref=dc4973dfd918f5d71cd8e5c8e5aac5b8a86bf4e4", "patch": "@@ -0,0 +1,8 @@\n+error: negative trait bounds are not supported\n+  --> $DIR/issue-58857.rs:4:7\n+   |\n+LL | impl<A: !Valid> Conj<A>{}\n+   |       ^^^^^^^^ help: remove the trait bound\n+\n+error: aborting due to previous error\n+"}]}