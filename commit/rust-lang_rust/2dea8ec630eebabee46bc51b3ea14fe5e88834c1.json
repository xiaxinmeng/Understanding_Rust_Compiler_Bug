{"sha": "2dea8ec630eebabee46bc51b3ea14fe5e88834c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZWE4ZWM2MzBlZWJhYmVlNDZiYzUxYjNlYTE0ZmU1ZTg4ODM0YzE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-01-22T12:51:30Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-01-22T13:45:13Z"}, "message": "Do not initiate nested probe within `assemble_probe`.\n\nIn particular, the table entries (associated with type-variables\ncreated during the probe) must persist as long as the candidates\nassembled during the probe. If you make a nested probe without\ncreating a nested `ProbeContext`, the table entries are popped at the\nend of the nested probe, while the type-variables would leak out via\nthe assembled candidates attached to `self` (the outer\n`ProbeContext`). This causes an ICE (*if you are lucky*)!", "tree": {"sha": "9d6ff0b427b1f35f34e3b5877b702a061f347cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6ff0b427b1f35f34e3b5877b702a061f347cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dea8ec630eebabee46bc51b3ea14fe5e88834c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dea8ec630eebabee46bc51b3ea14fe5e88834c1", "html_url": "https://github.com/rust-lang/rust/commit/2dea8ec630eebabee46bc51b3ea14fe5e88834c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dea8ec630eebabee46bc51b3ea14fe5e88834c1/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38650b69cafbff61d71a275ced1e9866a08a36c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/38650b69cafbff61d71a275ced1e9866a08a36c0", "html_url": "https://github.com/rust-lang/rust/commit/38650b69cafbff61d71a275ced1e9866a08a36c0"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "b849be52a9223fe7f4e210f3ad25177583c96e2e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2dea8ec630eebabee46bc51b3ea14fe5e88834c1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dea8ec630eebabee46bc51b3ea14fe5e88834c1/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=2dea8ec630eebabee46bc51b3ea14fe5e88834c1", "patch": "@@ -506,15 +506,13 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         match self_ty.value.value.sty {\n             ty::Dynamic(ref data, ..) => {\n                 if let Some(p) = data.principal() {\n-                    self.fcx.probe(|_| {\n-                        let InferOk { value: self_ty, obligations: _ } =\n-                            self.fcx.probe_instantiate_query_response(\n-                                self.span, &self.orig_steps_var_values, self_ty)\n-                            .unwrap_or_else(|_| {\n-                                span_bug!(self.span, \"{:?} was applicable but now isn't?\", self_ty)\n-                            });\n-                        self.assemble_inherent_candidates_from_object(self_ty);\n-                    });\n+                    let InferOk { value: instantiated_self_ty, obligations: _ } =\n+                        self.fcx.probe_instantiate_query_response(\n+                            self.span, &self.orig_steps_var_values, self_ty)\n+                        .unwrap_or_else(|_| {\n+                            span_bug!(self.span, \"{:?} was applicable but now isn't?\", self_ty)\n+                        });\n+                    self.assemble_inherent_candidates_from_object(instantiated_self_ty);\n                     self.assemble_inherent_impl_candidates_for_type(p.def_id());\n                 }\n             }"}]}