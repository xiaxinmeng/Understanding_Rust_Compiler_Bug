{"sha": "edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "node_id": "C_kwDOAAsO6NoAKGVkYWIzNGFiMmFiYmFmYzE2YTc4ZGFlZGY3MWRiYWNkMmViMGI3YmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T10:51:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T10:51:16Z"}, "message": "Auto merge of #98091 - Dylan-DPC:rollup-ueb6b5x, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97869 (BTree: tweak internal comments)\n - #97935 (Rename the `ConstS::val` field as `kind`.)\n - #97948 (lint: add diagnostic translation migration lints)\n - #98042 (Fix compat_fn option method on miri)\n - #98069 (rustdoc:  remove link on slice brackets)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2d763273c835911f568f489ccc1c4cf8bb3b7195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d763273c835911f568f489ccc1c4cf8bb3b7195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "html_url": "https://github.com/rust-lang/rust/commit/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da895e7938e8d6f8d221fce2876d225bf58df865", "url": "https://api.github.com/repos/rust-lang/rust/commits/da895e7938e8d6f8d221fce2876d225bf58df865", "html_url": "https://github.com/rust-lang/rust/commit/da895e7938e8d6f8d221fce2876d225bf58df865"}, {"sha": "27f78051ada9d1290a62ff34d9fe014ca940d4e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/27f78051ada9d1290a62ff34d9fe014ca940d4e9", "html_url": "https://github.com/rust-lang/rust/commit/27f78051ada9d1290a62ff34d9fe014ca940d4e9"}], "stats": {"total": 772, "additions": 522, "deletions": 250}, "files": [{"sha": "ae6b8e0ae30f73893781845656ac91a33a8d027b", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -378,7 +378,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         } else {\n             let tcx = self.tcx();\n             let maybe_uneval = match constant.literal {\n-                ConstantKind::Ty(ct) => match ct.val() {\n+                ConstantKind::Ty(ct) => match ct.kind() {\n                     ty::ConstKind::Unevaluated(uv) => Some(uv),\n                     _ => None,\n                 },\n@@ -1841,7 +1841,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n         if let Operand::Constant(constant) = op {\n             let maybe_uneval = match constant.literal {\n-                ConstantKind::Ty(ct) => match ct.val() {\n+                ConstantKind::Ty(ct) => match ct.kind() {\n                     ty::ConstKind::Unevaluated(uv) => Some(uv),\n                     _ => None,\n                 },"}, {"sha": "fbe830b2b1030400ec121ff1f5753ef238341ed5", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -710,7 +710,7 @@ fn codegen_stmt<'tcx>(\n                     let times = fx\n                         .monomorphize(times)\n                         .eval(fx.tcx, ParamEnv::reveal_all())\n-                        .val()\n+                        .kind()\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n                     if operand.layout().size.bytes() == 0 {"}, {"sha": "3d14a0eca52bb31ce2a620d5c0f3732f058a9b01", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n             ConstantKind::Ty(ct) => ct,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.val() {\n+        match const_.kind() {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n@@ -126,7 +126,7 @@ pub(crate) fn codegen_constant<'tcx>(\n         ConstantKind::Ty(ct) => ct,\n         ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n     };\n-    let const_val = match const_.val() {\n+    let const_val = match const_.kind() {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n@@ -469,7 +469,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     match operand {\n         Operand::Constant(const_) => match const_.literal {\n             ConstantKind::Ty(const_) => {\n-                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val().try_to_value()\n+                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).kind().try_to_value()\n             }\n             ConstantKind::Val(val, _) => Some(val),\n         },"}, {"sha": "f849770283285a20b658d31b160134893d0c3d85", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -180,15 +180,15 @@ fn push_debuginfo_type_name<'tcx>(\n             if cpp_like_debuginfo {\n                 output.push_str(\"array$<\");\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n-                match len.val() {\n+                match len.kind() {\n                     ty::ConstKind::Param(param) => write!(output, \",{}>\", param.name).unwrap(),\n                     _ => write!(output, \",{}>\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n                         .unwrap(),\n                 }\n             } else {\n                 output.push('[');\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n-                match len.val() {\n+                match len.kind() {\n                     ty::ConstKind::Param(param) => write!(output, \"; {}]\", param.name).unwrap(),\n                     _ => write!(output, \"; {}]\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n                         .unwrap(),\n@@ -679,7 +679,7 @@ fn push_generic_params_internal<'tcx>(\n }\n \n fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: ty::Const<'tcx>, output: &mut String) {\n-    match ct.val() {\n+    match ct.kind() {\n         ty::ConstKind::Param(param) => {\n             write!(output, \"{}\", param.name)\n         }\n@@ -703,7 +703,7 @@ fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: ty::Const<'tcx>, output: &mut S\n                 // but we get a deterministic, virtually unique value for the constant.\n                 let hcx = &mut tcx.create_stable_hashing_context();\n                 let mut hasher = StableHasher::new();\n-                hcx.while_hashing_spans(false, |hcx| ct.val().hash_stable(hcx, &mut hasher));\n+                hcx.while_hashing_spans(false, |hcx| ct.kind().hash_stable(hcx, &mut hasher));\n                 // Let's only emit 64 bits of the hash value. That should be plenty for\n                 // avoiding collisions and will make the emitted type names shorter.\n                 let hash: u64 = hasher.finish();"}, {"sha": "7e0d3f9adaa28f004bd2d83c0550549df6bda55e", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::ConstantKind::Ty(ct) => ct,\n             mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Unevaluated(ct) => self\n                 .cx\n                 .tcx()\n@@ -65,7 +65,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .fields\n                     .iter()\n                     .map(|field| {\n-                        if let Some(prim) = field.val().try_to_scalar() {\n+                        if let Some(prim) = field.kind().try_to_scalar() {\n                             let layout = bx.layout_of(field_ty);\n                             let Abi::Scalar(scalar) = layout.abi else {\n                                 bug!(\"from_const: invalid ByVal layout: {:#?}\", layout);"}, {"sha": "6ee77db4017ea3626f38ef7f00dc4c3c44c3f4b2", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -197,7 +197,7 @@ pub(crate) fn deref_const<'tcx>(\n         },\n     };\n \n-    tcx.mk_const(ty::ConstS { val: ty::ConstKind::Value(op_to_const(&ecx, &mplace.into())), ty })\n+    tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(op_to_const(&ecx, &mplace.into())), ty })\n }\n \n #[instrument(skip(tcx), level = \"debug\")]"}, {"sha": "597ca4cfcdd0678b3c48631afb5b875cd5642a42", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -622,10 +622,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// \"universe\" (param_env).\n     pub fn const_to_op(\n         &self,\n-        val: ty::Const<'tcx>,\n+        c: ty::Const<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        match val.val() {\n+        match c.kind() {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n                 throw_inval!(AlreadyReported(reported))\n@@ -635,9 +635,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n             }\n             ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {\n-                span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", val)\n+                span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n             }\n-            ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty(), layout),\n+            ty::ConstKind::Value(val) => self.const_val_to_op(val, c.ty(), layout),\n         }\n     }\n "}, {"sha": "b9866995e9f95a9f9a3e1e67574c8968e3749f95", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -55,7 +55,7 @@ where\n                                     assert!(matches!(ty.kind(), ty::Param(_)))\n                                 }\n                                 ty::subst::GenericArgKind::Const(ct) => {\n-                                    assert!(matches!(ct.val(), ty::ConstKind::Param(_)))\n+                                    assert!(matches!(ct.kind(), ty::ConstKind::Param(_)))\n                                 }\n                                 ty::subst::GenericArgKind::Lifetime(..) => (),\n                             },\n@@ -69,7 +69,7 @@ where\n         }\n \n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            match c.val() {\n+            match c.kind() {\n                 ty::ConstKind::Param(..) => ControlFlow::Break(FoundParam),\n                 _ => c.super_visit_with(self),\n             }"}, {"sha": "6e5a0c813ac2068321cb5e1aea533fc71f0dea22", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -353,7 +353,8 @@ where\n \n     // Check the qualifs of the value of `const` items.\n     if let Some(ct) = constant.literal.const_for_ty() {\n-        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val() {\n+        if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.kind()\n+        {\n             // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible\n             // only for `NeedsNonConstDrop` with precise drop checking. This is the only const\n             // check performed after the promotion. Verify that with an assertion."}, {"sha": "67a356918d1b99b68da8c38ca0accf24716110b0", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -842,7 +842,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     literal: tcx\n                         .mk_const(ty::ConstS {\n                             ty,\n-                            val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                            kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                                 def,\n                                 substs: InternalSubsts::for_item(tcx, def.did, |param, _| {\n                                     if let ty::GenericParamDefKind::Lifetime = param.kind {"}, {"sha": "fd4b2daae9c13c236c85c7c52412067a5aa6b78d", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1,6 +1,7 @@\n #![feature(let_chains)]\n #![feature(once_cell)]\n #![feature(path_try_exists)]\n+#![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]\n \n use fluent_bundle::FluentResource;\n@@ -241,6 +242,7 @@ type FluentId = Cow<'static, str>;\n /// message so messages of this type must be combined with a `DiagnosticMessage` (using\n /// `DiagnosticMessage::with_subdiagnostic_message`) before rendering. However, subdiagnostics from\n /// the `SessionSubdiagnostic` derive refer to Fluent identifiers directly.\n+#[rustc_diagnostic_item = \"SubdiagnosticMessage\"]\n pub enum SubdiagnosticMessage {\n     /// Non-translatable diagnostic message.\n     // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n@@ -281,6 +283,7 @@ impl<S: Into<String>> From<S> for SubdiagnosticMessage {\n ///\n /// Intended to be removed once diagnostics are entirely translatable.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n+#[rustc_diagnostic_item = \"DiagnosticMessage\"]\n pub enum DiagnosticMessage {\n     /// Non-translatable diagnostic message.\n     // FIXME(davidtwco): can a `Cow<'static, str>` be used here?"}, {"sha": "00c0ff8bcaf9c6f641a2b4b7a47eaac872170b56", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -80,6 +80,7 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(SessionSubdiagnostic)]` -- see [rustc_macros::SessionSubdiagnostic].\n+#[rustc_diagnostic_item = \"AddSubdiagnostic\"]\n pub trait AddSubdiagnostic {\n     /// Add a subdiagnostic to an existing diagnostic.\n     fn add_to_diagnostic(self, diag: &mut Diagnostic);\n@@ -283,6 +284,7 @@ impl Diagnostic {\n     ///\n     /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n     /// the `Span` supplied when creating the diagnostic is primary.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_label(&mut self, span: Span, label: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.span.push_span_label(span, self.subdiagnostic_message_to_diagnostic_message(label));\n         self\n@@ -401,6 +403,7 @@ impl Diagnostic {\n     }\n \n     /// Add a note attached to this diagnostic.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn note(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Note, msg, MultiSpan::new(), None);\n         self\n@@ -423,6 +426,7 @@ impl Diagnostic {\n \n     /// Prints the span with a note above it.\n     /// This is like [`Diagnostic::note()`], but it gets its own span.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_note<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n@@ -444,13 +448,15 @@ impl Diagnostic {\n     }\n \n     /// Add a warning attached to this diagnostic.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn warn(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Warning, msg, MultiSpan::new(), None);\n         self\n     }\n \n     /// Prints the span with a warning above it.\n     /// This is like [`Diagnostic::warn()`], but it gets its own span.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n@@ -461,6 +467,7 @@ impl Diagnostic {\n     }\n \n     /// Add a help message attached to this diagnostic.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn help(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Help, msg, MultiSpan::new(), None);\n         self\n@@ -474,6 +481,7 @@ impl Diagnostic {\n \n     /// Prints the span with some help above it.\n     /// This is like [`Diagnostic::help()`], but it gets its own span.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_help<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,"}, {"sha": "8b6eba122f8f06e6cdf754180cd2bc41d5fa753a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -9,6 +9,7 @@\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(adt_const_params)]\n+#![feature(rustc_attrs)]\n #![allow(incomplete_features)]\n #![allow(rustc::potential_query_instability)]\n \n@@ -648,6 +649,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -659,6 +661,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_allow(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -671,6 +674,7 @@ impl Handler {\n \n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     /// Also include a code.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -687,16 +691,19 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning, msg)\n     }\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n     /// Construct a builder at the `Expect` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -706,6 +713,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -717,6 +725,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level at the given `span`, with the `msg`, and `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -730,6 +739,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -744,6 +754,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -755,6 +766,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Warn` level with the `msg` and the `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -766,6 +778,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Fatal` level at the given `span` and with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -777,6 +790,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Fatal` level at the given `span`, with the `msg`, and `code`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -789,28 +803,33 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         DiagnosticBuilder::new_fatal(self, msg)\n     }\n \n     /// Construct a builder at the `Help` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_help(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Help, msg)\n     }\n \n     /// Construct a builder at the `Note` level with the `msg`.\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Note, msg)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n         FatalError.raise()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -821,6 +840,7 @@ impl Handler {\n         FatalError.raise()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -829,6 +849,7 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new(Error { lint: false }, msg), span).unwrap()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -841,10 +862,12 @@ impl Handler {\n         );\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n         self.emit_diag_at_span(Diagnostic::new(Warning, msg), span);\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,"}, {"sha": "34c53597dde6b8df09a3d12f22b5e05aba2d8267", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -615,6 +615,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Used by the `rustc::potential_query_instability` lint to warn methods which\n     // might not be stable during incremental compilation.\n     rustc_attr!(rustc_lint_query_instability, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n+    // Used by the `rustc::untranslatable_diagnostic` and `rustc::diagnostic_outside_of_impl` lints\n+    // to assist in changes to diagnostic APIs.\n+    rustc_attr!(rustc_lint_diagnostics, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "9c30c81123b1487092db51b365336a9d69554b26", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -476,7 +476,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 debug!(\"canonical: const var found with vid {:?}\", vid);\n                 match self.infcx.probe_const_var(vid) {\n@@ -778,7 +778,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n             self.tcx().mk_const(ty::ConstS {\n-                val: ty::ConstKind::Bound(self.binder_index, var),\n+                kind: ty::ConstKind::Bound(self.binder_index, var),\n                 ty: self.fold_ty(const_var.ty()),\n             })\n         }"}, {"sha": "f251d561c6087bd09fb8984768e999a9f9339dd6", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -149,7 +149,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n                 self.tcx\n                     .mk_const(ty::ConstS {\n-                        val: ty::ConstKind::Placeholder(placeholder_mapped),\n+                        kind: ty::ConstKind::Placeholder(placeholder_mapped),\n                         ty: name.ty,\n                     })\n                     .into()"}, {"sha": "8938ed78a94d74cb9671ddef1393872e84638956", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -458,7 +458,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                     }\n                 }\n                 GenericArgKind::Const(result_value) => {\n-                    if let ty::ConstKind::Bound(debrujin, b) = result_value.val() {\n+                    if let ty::ConstKind::Bound(debrujin, b) = result_value.kind() {\n                         // ...in which case we would set `canonical_vars[0]` to `Some(const X)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions."}, {"sha": "67dcb6e708b0e4aab5ff134b34b83f80da501df5", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -142,7 +142,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n \n         let a_is_expected = relation.a_is_expected();\n \n-        match (a.val(), b.val()) {\n+        match (a.kind(), b.kind()) {\n             (\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),\n                 ty::ConstKind::Infer(InferConst::Var(b_vid)),\n@@ -726,7 +726,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n \n-        match c.val() {\n+        match c.kind() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 let mut inner = self.infcx.inner.borrow_mut();\n                 let variable_table = &mut inner.const_unification_table();\n@@ -761,7 +761,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 )?;\n                 Ok(self.tcx().mk_const(ty::ConstS {\n                     ty: c.ty(),\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n@@ -941,7 +941,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         debug_assert_eq!(c, _c);\n         debug!(\"ConstInferUnifier: c={:?}\", c);\n \n-        match c.val() {\n+        match c.kind() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 // Check if the current unification would end up\n                 // unifying `target_vid` with a const which contains\n@@ -992,7 +992,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 )?;\n                 Ok(self.tcx().mk_const(ty::ConstS {\n                     ty: c.ty(),\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n+                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),\n                 }))\n             }\n             _ => relate::super_relate_consts(self, c, c),"}, {"sha": "07f5d72fac40aa4442be7af002bee270bb43733f", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GenericArgKind::Const(ct) => {\n-                if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val() {\n+                if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.kind() {\n                     let origin =\n                         self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n                     if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n@@ -673,7 +673,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             }\n             (GenericArgKind::Const(inner_ct), GenericArgKind::Const(target_ct)) => {\n                 use ty::InferConst::*;\n-                match (inner_ct.val(), target_ct.val()) {\n+                match (inner_ct.kind(), target_ct.kind()) {\n                     (ty::ConstKind::Infer(Var(a_vid)), ty::ConstKind::Infer(Var(b_vid))) => self\n                         .infcx\n                         .inner\n@@ -713,7 +713,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     }\n                 }\n                 GenericArgKind::Const(ct) => {\n-                    if matches!(ct.val(), ty::ConstKind::Unevaluated(..)) {\n+                    if matches!(ct.kind(), ty::ConstKind::Unevaluated(..)) {\n                         // You can't write the generic arguments for\n                         // unevaluated constants.\n                         walker.skip_current_subtree();"}, {"sha": "024f74099476c6b361a2c2ca1fe433ae8697eff6", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Infer(ty::InferConst::Var(v)) => {\n                 let opt_ct = self\n                     .infcx"}, {"sha": "2f0eadce631e2eb113a940f1af158d16df3e4fb3", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for InferenceFudger<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = ct.val() {\n+        if let ty::ConstKind::Infer(ty::InferConst::Var(vid)) = ct.kind() {\n             if self.const_vars.0.contains(&vid) {\n                 // This variable was created during the fudging.\n                 // Recreate it with a fresh variable here."}, {"sha": "c82685d1b70c95a7933ae689fa987ced213a8cb7", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let fld_c = |bound_var: ty::BoundVar, ty| {\n             self.tcx.mk_const(ty::ConstS {\n-                val: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                     universe: next_universe,\n                     name: ty::BoundConst { var: bound_var, ty },\n                 }),"}, {"sha": "59c708fb7509ac93f5d40abc366507e70160252c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1754,7 +1754,7 @@ impl<'tcx> TyOrConstInferVar<'tcx> {\n     /// Tries to extract an inference variable from a constant, returns `None`\n     /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).\n     pub fn maybe_from_const(ct: ty::Const<'tcx>) -> Option<Self> {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),\n             _ => None,\n         }\n@@ -1833,7 +1833,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val() {\n+        if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.kind() {\n             self.infcx\n                 .inner\n                 .borrow_mut()"}, {"sha": "ebe156d081d32b781ade0cbc70f9b450de40f65d", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -659,7 +659,7 @@ where\n             b = self.infcx.shallow_resolve(b);\n         }\n \n-        match b.val() {\n+        match b.kind() {\n             ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n                 // Forbid inference variables in the RHS.\n                 bug!(\"unexpected inference var {:?}\", b)\n@@ -1034,7 +1034,7 @@ where\n         a: ty::Const<'tcx>,\n         _: ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        match a.val() {\n+        match a.kind() {\n             ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n                 bug!(\"unexpected inference variable encountered in NLL generalization: {:?}\", a);\n             }"}, {"sha": "d830000b65f69e8a27068a0cc2ac8ebb49fd60ef", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n             Ok(c) // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n             let c = self.infcx.shallow_resolve(c);\n-            match c.val() {\n+            match c.kind() {\n                 ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                     return Err(FixupError::UnresolvedConst(vid));\n                 }"}, {"sha": "7cf447a141970b7bece146e108f347fdfbd0e27e", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -2873,7 +2873,7 @@ impl ClashingExternDeclarations {\n                         }\n                         (Array(a_ty, a_const), Array(b_ty, b_const)) => {\n                             // For arrays, we also check the constness of the type.\n-                            a_const.val() == b_const.val()\n+                            a_const.kind() == b_const.kind()\n                                 && structurally_same_type_impl(seen_types, cx, *a_ty, *b_ty, ckind)\n                         }\n                         (Slice(a_ty), Slice(b_ty)) => {"}, {"sha": "fadb1c87933989d788250739603e74f4708fd5af", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 107, "deletions": 31, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -5,12 +5,14 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, GenericArg, PatKind, Path, PathSegment, QPath};\n-use rustc_hir::{HirId, Item, ItemKind, Node, Pat, Ty, TyKind};\n+use rustc_hir::{def_id::DefId, Expr, ExprKind, GenericArg, PatKind, Path, PathSegment, QPath};\n+use rustc_hir::{HirId, Impl, Item, ItemKind, Node, Pat, Ty, TyKind};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::Span;\n+use tracing::debug;\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,\n@@ -46,6 +48,41 @@ impl LateLintPass<'_> for DefaultHashTypes {\n     }\n }\n \n+/// Helper function for lints that check for expressions with calls and use typeck results to\n+/// get the `DefId` and `SubstsRef` of the function.\n+fn typeck_results_of_method_fn<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &Expr<'_>,\n+) -> Option<(Span, DefId, ty::subst::SubstsRef<'tcx>)> {\n+    // FIXME(rustdoc): Lints which use this function use typecheck results which can cause\n+    // `rustdoc` to error if there are resolution failures.\n+    //\n+    // As internal lints are currently always run if there are `unstable_options`, they are added\n+    // to the lint store of rustdoc. Internal lints are also not used via the `lint_mod` query.\n+    // Crate lints run outside of a query so rustdoc currently doesn't disable them.\n+    //\n+    // Instead of relying on this, either change crate lints to a query disabled by rustdoc, only\n+    // run internal lints if the user is explicitly opting in or figure out a different way to\n+    // avoid running lints for rustdoc.\n+    if cx.tcx.sess.opts.actually_rustdoc {\n+        return None;\n+    }\n+\n+    match expr.kind {\n+        ExprKind::MethodCall(segment, _, _)\n+            if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>\n+        {\n+            Some((segment.ident.span, def_id, cx.typeck_results().node_substs(expr.hir_id)))\n+        },\n+        _ => {\n+            match cx.typeck_results().node_type(expr.hir_id).kind() {\n+                &ty::FnDef(def_id, substs) => Some((expr.span, def_id, substs)),\n+                _ => None,\n+            }\n+        }\n+    }\n+}\n+\n declare_tool_lint! {\n     pub rustc::POTENTIAL_QUERY_INSTABILITY,\n     Allow,\n@@ -57,35 +94,7 @@ declare_lint_pass!(QueryStability => [POTENTIAL_QUERY_INSTABILITY]);\n \n impl LateLintPass<'_> for QueryStability {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        // FIXME(rustdoc): This lint uses typecheck results, causing rustdoc to\n-        // error if there are resolution failures.\n-        //\n-        // As internal lints are currently always run if there are `unstable_options`,\n-        // they are added to the lint store of rustdoc. Internal lints are also\n-        // not used via the `lint_mod` query. Crate lints run outside of a query\n-        // so rustdoc currently doesn't disable them.\n-        //\n-        // Instead of relying on this, either change crate lints to a query disabled by\n-        // rustdoc, only run internal lints if the user is explicitly opting in\n-        // or figure out a different way to avoid running lints for rustdoc.\n-        if cx.tcx.sess.opts.actually_rustdoc {\n-            return;\n-        }\n-\n-        let (span, def_id, substs) = match expr.kind {\n-            ExprKind::MethodCall(segment, _, _)\n-                if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) =>\n-            {\n-                (segment.ident.span, def_id, cx.typeck_results().node_substs(expr.hir_id))\n-            },\n-            _ => {\n-                let &ty::FnDef(def_id, substs) =\n-                    cx.typeck_results()\n-                        .node_type(expr.hir_id)\n-                        .kind() else { return };\n-                (expr.span, def_id, substs)\n-            }\n-        };\n+        let Some((span, def_id, substs)) = typeck_results_of_method_fn(cx, expr) else { return };\n         if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) {\n             let def_id = instance.def_id();\n             if cx.tcx.has_attr(def_id, sym::rustc_lint_query_instability) {\n@@ -376,3 +385,70 @@ impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n         }\n     }\n }\n+\n+declare_tool_lint! {\n+    pub rustc::UNTRANSLATABLE_DIAGNOSTIC,\n+    Allow,\n+    \"prevent creation of diagnostics which cannot be translated\",\n+    report_in_external_macro: true\n+}\n+\n+declare_tool_lint! {\n+    pub rustc::DIAGNOSTIC_OUTSIDE_OF_IMPL,\n+    Allow,\n+    \"prevent creation of diagnostics outside of `SessionDiagnostic`/`AddSubdiagnostic` impls\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Diagnostics => [ UNTRANSLATABLE_DIAGNOSTIC, DIAGNOSTIC_OUTSIDE_OF_IMPL ]);\n+\n+impl LateLintPass<'_> for Diagnostics {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        let Some((span, def_id, substs)) = typeck_results_of_method_fn(cx, expr) else { return };\n+        debug!(?span, ?def_id, ?substs);\n+        if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) &&\n+            !cx.tcx.has_attr(instance.def_id(), sym::rustc_lint_diagnostics)\n+        {\n+            return;\n+        }\n+\n+        let mut found_impl = false;\n+        for (_, parent) in cx.tcx.hir().parent_iter(expr.hir_id) {\n+            debug!(?parent);\n+            if let Node::Item(Item { kind: ItemKind::Impl(impl_), .. }) = parent &&\n+                let Impl { of_trait: Some(of_trait), .. } = impl_ &&\n+                let Some(def_id) = of_trait.trait_def_id() &&\n+                let Some(name) = cx.tcx.get_diagnostic_name(def_id) &&\n+                matches!(name, sym::SessionDiagnostic | sym::AddSubdiagnostic)\n+            {\n+                found_impl = true;\n+                break;\n+            }\n+        }\n+        debug!(?found_impl);\n+        if !found_impl {\n+            cx.struct_span_lint(DIAGNOSTIC_OUTSIDE_OF_IMPL, span, |lint| {\n+                lint.build(\"diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\")\n+                    .emit();\n+            })\n+        }\n+\n+        let mut found_diagnostic_message = false;\n+        for ty in substs.types() {\n+            debug!(?ty);\n+            if let Some(adt_def) = ty.ty_adt_def() &&\n+                let Some(name) =  cx.tcx.get_diagnostic_name(adt_def.did()) &&\n+                matches!(name, sym::DiagnosticMessage | sym::SubdiagnosticMessage)\n+            {\n+                found_diagnostic_message = true;\n+                break;\n+            }\n+        }\n+        debug!(?found_diagnostic_message);\n+        if !found_diagnostic_message {\n+            cx.struct_span_lint(UNTRANSLATABLE_DIAGNOSTIC, span, |lint| {\n+                lint.build(\"diagnostics should be created using translatable messages\").emit();\n+            })\n+        }\n+    }\n+}"}, {"sha": "f0182883d2b46ae5747385bd63eec991f23bdc85", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -508,6 +508,8 @@ fn register_internals(store: &mut LintStore) {\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|| Box::new(TyTyKind));\n+    store.register_lints(&Diagnostics::get_lints());\n+    store.register_late_pass(|| Box::new(Diagnostics));\n     store.register_lints(&PassByValue::get_lints());\n     store.register_late_pass(|| Box::new(PassByValue));\n     store.register_group("}, {"sha": "79f94802d201781cbd174218a8cdf7853c11f06e", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -336,7 +336,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                     GenericArgKind::Const(ct) => tcx\n                         .mk_const(ty::ConstS {\n                             ty: ct.ty(),\n-                            val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n+                            kind: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from_u32(i)),\n                         })\n                         .into(),\n                 })"}, {"sha": "1511b51fa25486258b4ee331f962febe152975e4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -2956,7 +2956,7 @@ impl<'tcx> Constant<'tcx> {\n impl<'tcx> From<ty::Const<'tcx>> for ConstantKind<'tcx> {\n     #[inline]\n     fn from(ct: ty::Const<'tcx>) -> Self {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Value(cv) => {\n                 // FIXME Once valtrees are introduced we need to convert those\n                 // into `ConstValue` instances here\n@@ -2985,7 +2985,7 @@ impl<'tcx> ConstantKind<'tcx> {\n \n     pub fn try_val(&self) -> Option<ConstValue<'tcx>> {\n         match self {\n-            ConstantKind::Ty(c) => match c.val() {\n+            ConstantKind::Ty(c) => match c.kind() {\n                 ty::ConstKind::Value(v) => Some(v),\n                 _ => None,\n             },\n@@ -2996,7 +2996,7 @@ impl<'tcx> ConstantKind<'tcx> {\n     #[inline]\n     pub fn try_to_value(self) -> Option<interpret::ConstValue<'tcx>> {\n         match self {\n-            ConstantKind::Ty(c) => c.val().try_to_value(),\n+            ConstantKind::Ty(c) => c.kind().try_to_value(),\n             ConstantKind::Val(val, _) => Some(val),\n         }\n     }\n@@ -3027,7 +3027,7 @@ impl<'tcx> ConstantKind<'tcx> {\n             Self::Ty(c) => {\n                 // FIXME Need to use a different evaluation function that directly returns a `ConstValue`\n                 // if evaluation succeeds and does not create a ValTree first\n-                if let Some(val) = c.val().try_eval(tcx, param_env) {\n+                if let Some(val) = c.kind().try_eval(tcx, param_env) {\n                     match val {\n                         Ok(val) => Self::Val(val, c.ty()),\n                         Err(_) => Self::Ty(tcx.const_error(self.ty())),\n@@ -3161,7 +3161,7 @@ impl<'tcx> ConstantKind<'tcx> {\n             ty::InlineConstSubsts::new(tcx, ty::InlineConstSubstsParts { parent_substs, ty })\n                 .substs;\n         let uneval_const = tcx.mk_const(ty::ConstS {\n-            val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+            kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                 def: ty::WithOptConstParam::unknown(def_id).to_global(),\n                 substs,\n                 promoted: None,\n@@ -3221,7 +3221,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n                 let ty_const = tcx.mk_const(ty::ConstS {\n-                    val: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n+                    kind: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n                     ty,\n                 });\n \n@@ -3258,7 +3258,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 // Error was handled in `const_eval_resolve`. Here we just create a\n                 // new unevaluated const and error hard later in codegen\n                 let ty_const = tcx.mk_const(ty::ConstS {\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: def.to_global(),\n                         substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                         promoted: None,"}, {"sha": "739c543dea773fd380f599c0c247e9110d448d6e", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -454,8 +454,8 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n             };\n \n-            let val = match literal {\n-                ConstantKind::Ty(ct) => match ct.val() {\n+            let kind = match literal {\n+                ConstantKind::Ty(ct) => match ct.kind() {\n                     ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n                     ty::ConstKind::Unevaluated(uv) => format!(\n                         \"Unevaluated({}, {:?}, {:?})\",\n@@ -476,7 +476,10 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 ConstantKind::Val(val, _) => format!(\"Value({})\", fmt_val(&val)),\n             };\n \n-            self.push(&format!(\"+ literal: Const {{ ty: {}, val: {} }}\", literal.ty(), val));\n+            // This reflects what `Const` looked liked before `val` was renamed\n+            // as `kind`. We print it like this to avoid having to update\n+            // expected output in a lot of tests.\n+            self.push(&format!(\"+ literal: Const {{ ty: {}, val: {} }}\", literal.ty(), kind));\n         }\n     }\n \n@@ -679,7 +682,7 @@ pub fn write_allocations<'tcx>(\n \n     impl<'tcx> Visitor<'tcx> for CollectAllocIds {\n         fn visit_const(&mut self, c: ty::Const<'tcx>, _loc: Location) {\n-            if let ty::ConstKind::Value(val) = c.val() {\n+            if let ty::ConstKind::Value(val) = c.kind() {\n                 self.0.extend(alloc_ids_from_const(val));\n             }\n         }"}, {"sha": "e6aab30a150deb68d7a7ab3070a1a5e0e9fa1c51", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n             return Ok(a);\n         }\n \n-        match (a.val(), b.val()) {\n+        match (a.kind(), b.kind()) {\n             (_, ty::ConstKind::Infer(InferConst::Fresh(_))) => {\n                 return Ok(a);\n             }"}, {"sha": "0e87a05bade096f8bcd17cb9bf0c39a3f631e0f1", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -29,15 +29,15 @@ impl<'tcx> fmt::Debug for Const<'tcx> {\n         // This reflects what `Const` looked liked before `Interned` was\n         // introduced. We print it like this to avoid having to update expected\n         // output in a lot of tests.\n-        write!(f, \"Const {{ ty: {:?}, val: {:?} }}\", self.ty(), self.val())\n+        write!(f, \"Const {{ ty: {:?}, kind: {:?} }}\", self.ty(), self.kind())\n     }\n }\n \n /// Typed constant value.\n #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, TyEncodable, TyDecodable)]\n pub struct ConstS<'tcx> {\n     pub ty: Ty<'tcx>,\n-    pub val: ConstKind<'tcx>,\n+    pub kind: ConstKind<'tcx>,\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n@@ -50,8 +50,8 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn val(self) -> ConstKind<'tcx> {\n-        self.0.val\n+    pub fn kind(self) -> ConstKind<'tcx> {\n+        self.0.kind\n     }\n \n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n@@ -83,7 +83,7 @@ impl<'tcx> Const<'tcx> {\n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n             None => tcx.mk_const(ty::ConstS {\n-                val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                     promoted: None,\n@@ -145,7 +145,7 @@ impl<'tcx> Const<'tcx> {\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.hir().name(hir_id);\n                 Some(tcx.mk_const(ty::ConstS {\n-                    val: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n+                    kind: ty::ConstKind::Param(ty::ParamConst::new(index, name)),\n                     ty,\n                 }))\n             }\n@@ -180,7 +180,7 @@ impl<'tcx> Const<'tcx> {\n                     InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n                         .substs;\n                 tcx.mk_const(ty::ConstS {\n-                    val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                         def: ty::WithOptConstParam::unknown(def_id).to_global(),\n                         substs,\n                         promoted: None,\n@@ -196,7 +196,7 @@ impl<'tcx> Const<'tcx> {\n     /// Interns the given value as a constant.\n     #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ConstValue<'tcx>, ty: Ty<'tcx>) -> Self {\n-        tcx.mk_const(ConstS { val: ConstKind::Value(val), ty })\n+        tcx.mk_const(ConstS { kind: ConstKind::Value(val), ty })\n     }\n \n     #[inline]\n@@ -246,24 +246,24 @@ impl<'tcx> Const<'tcx> {\n         assert_eq!(self.ty(), ty);\n         let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n         // if `ty` does not depend on generic parameters, use an empty param_env\n-        self.val().eval(tcx, param_env).try_to_bits(size)\n+        self.kind().eval(tcx, param_env).try_to_bits(size)\n     }\n \n     #[inline]\n     pub fn try_eval_bool(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {\n-        self.val().eval(tcx, param_env).try_to_bool()\n+        self.kind().eval(tcx, param_env).try_to_bool()\n     }\n \n     #[inline]\n     pub fn try_eval_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n-        self.val().eval(tcx, param_env).try_to_machine_usize(tcx)\n+        self.kind().eval(tcx, param_env).try_to_machine_usize(tcx)\n     }\n \n     #[inline]\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n     pub fn eval(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Const<'tcx> {\n-        if let Some(val) = self.val().try_eval(tcx, param_env) {\n+        if let Some(val) = self.kind().try_eval(tcx, param_env) {\n             match val {\n                 Ok(val) => Const::from_value(tcx, val, self.ty()),\n                 Err(ErrorGuaranteed { .. }) => tcx.const_error(self.ty()),"}, {"sha": "5c0cf534b80254a40bd68bab116dac1fea2472cd", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -902,7 +902,7 @@ impl<'tcx> CanonicalUserType<'tcx> {\n                             _ => false,\n                         },\n \n-                        GenericArgKind::Const(ct) => match ct.val() {\n+                        GenericArgKind::Const(ct) => match ct.kind() {\n                             ty::ConstKind::Bound(debruijn, b) => {\n                                 // We only allow a `ty::INNERMOST` index in substitutions.\n                                 assert_eq!(debruijn, ty::INNERMOST);\n@@ -991,7 +991,7 @@ impl<'tcx> CommonConsts<'tcx> {\n \n         CommonConsts {\n             unit: mk_const(ty::ConstS {\n-                val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),\n+                kind: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),\n                 ty: types.unit,\n             }),\n         }\n@@ -1300,7 +1300,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n         self.mk_const(ty::ConstS {\n-            val: ty::ConstKind::Error(DelaySpanBugEmitted { reported, _priv: () }),\n+            kind: ty::ConstKind::Error(DelaySpanBugEmitted { reported, _priv: () }),\n             ty,\n         })\n     }\n@@ -2467,7 +2467,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstS { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })\n+        self.mk_const(ty::ConstS { kind: ty::ConstKind::Infer(InferConst::Var(v)), ty })\n     }\n \n     #[inline]\n@@ -2487,7 +2487,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n-        self.mk_const(ty::ConstS { val: ty::ConstKind::Infer(ic), ty })\n+        self.mk_const(ty::ConstS { kind: ty::ConstKind::Infer(ic), ty })\n     }\n \n     #[inline]\n@@ -2497,7 +2497,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstS { val: ty::ConstKind::Param(ParamConst { index, name }), ty })\n+        self.mk_const(ty::ConstS { kind: ty::ConstKind::Param(ParamConst { index, name }), ty })\n     }\n \n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {"}, {"sha": "a84b3c9373b139987cd7eb1b8d0d7b840264b17f", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -478,7 +478,7 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n     }\n \n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match c.val() {\n+        match c.kind() {\n             ConstKind::Infer(..)\n             | ConstKind::Bound(..)\n             | ConstKind::Placeholder(..)"}, {"sha": "812dd2adc2ed7c9e1eed3e1be2ab1c68ad11a792", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -254,7 +254,7 @@ impl<'tcx> Ty<'tcx> {\n                 }\n \n                 let n = tcx.lift(n).unwrap();\n-                if let ty::ConstKind::Value(v) = n.val() {\n+                if let ty::ConstKind::Value(v) = n.kind() {\n                     if let Some(n) = v.try_to_machine_usize(tcx) {\n                         return format!(\"array of {} element{}\", n, pluralize!(n)).into();\n                     }"}, {"sha": "a8145e6820cac801881d16562d9be3f17b5d94b0", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -363,7 +363,7 @@ impl DeepRejectCtxt {\n     }\n \n     pub fn consts_may_unify(self, obligation_ct: ty::Const<'_>, impl_ct: ty::Const<'_>) -> bool {\n-        match impl_ct.val() {\n+        match impl_ct.kind() {\n             ty::ConstKind::Param(_) | ty::ConstKind::Unevaluated(_) | ty::ConstKind::Error(_) => {\n                 return true;\n             }\n@@ -373,8 +373,8 @@ impl DeepRejectCtxt {\n             }\n         }\n \n-        let k = impl_ct.val();\n-        match obligation_ct.val() {\n+        let k = impl_ct.kind();\n+        match obligation_ct.kind() {\n             ty::ConstKind::Param(_) => match self.treat_obligation_params {\n                 TreatParams::AsPlaceholder => false,\n                 TreatParams::AsInfer => true,"}, {"sha": "ea6bb8a7abd4b8941a7d57c4dedae0fbb093e8a7", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -288,7 +288,7 @@ impl FlagComputation {\n \n     fn add_const(&mut self, c: ty::Const<'_>) {\n         self.add_ty(c.ty());\n-        match c.val() {\n+        match c.kind() {\n             ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);"}, {"sha": "99aa182f3a6a6072d75a386f9661cb62dd87d020", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -718,7 +718,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Bound(debruijn, bound_const) if debruijn == self.current_index => {\n                 let ct = (self.fld_c)(bound_const, ct.ty());\n                 ty::fold::shift_vars(self.tcx, ct, self.current_index.as_u32())\n@@ -865,7 +865,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             },\n             |c, ty| {\n                 self.mk_const(ty::ConstS {\n-                    val: ty::ConstKind::Bound(\n+                    kind: ty::ConstKind::Bound(\n                         ty::INNERMOST,\n                         ty::BoundVar::from_usize(c.as_usize() + bound_vars),\n                     ),\n@@ -1118,13 +1118,13 @@ impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Bound(debruijn, bound_ct) = ct.val() {\n+        if let ty::ConstKind::Bound(debruijn, bound_ct) = ct.kind() {\n             if self.amount == 0 || debruijn < self.current_index {\n                 ct\n             } else {\n                 let debruijn = debruijn.shifted_in(self.amount);\n                 self.tcx.mk_const(ty::ConstS {\n-                    val: ty::ConstKind::Bound(debruijn, bound_ct),\n+                    kind: ty::ConstKind::Bound(debruijn, bound_ct),\n                     ty: ct.ty(),\n                 })\n             }\n@@ -1234,7 +1234,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         // otherwise we do want to remember to visit the rest of the\n         // const, as it has types/regions embedded in a lot of other\n         // places.\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n                 ControlFlow::Break(FoundEscapingVars)\n             }\n@@ -1389,7 +1389,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // ignore the inputs of an unevaluated const, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            if let ty::ConstKind::Unevaluated(..) = c.val() {\n+            if let ty::ConstKind::Unevaluated(..) = c.kind() {\n                 return ControlFlow::CONTINUE;\n             }\n         }\n@@ -1434,7 +1434,7 @@ impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n     }\n \n     fn visit_const(&mut self, c: ty::consts::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if let ty::ConstKind::Placeholder(placeholder) = c.val() {\n+        if let ty::ConstKind::Placeholder(placeholder) = c.kind() {\n             self.max_universe = ty::UniverseIndex::from_u32(\n                 self.max_universe.as_u32().max(placeholder.universe.as_u32()),\n             );"}, {"sha": "05f332cdd5fd51ce9282642dd9870c175b88c02e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -748,14 +748,14 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(\"[\", print(ty), \"; \");\n                 if self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n-                } else if let ty::ConstKind::Unevaluated(..) = sz.val() {\n+                } else if let ty::ConstKind::Unevaluated(..) = sz.kind() {\n                     // Do not try to evaluate unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n                     p!(\"_\");\n-                } else if let Some(n) = sz.val().try_to_bits(self.tcx().data_layout.pointer_size) {\n+                } else if let Some(n) = sz.kind().try_to_bits(self.tcx().data_layout.pointer_size) {\n                     p!(write(\"{}\", n));\n-                } else if let ty::ConstKind::Param(param) = sz.val() {\n+                } else if let ty::ConstKind::Param(param) = sz.kind() {\n                     p!(print(param));\n                 } else {\n                     p!(\"_\");\n@@ -1165,7 +1165,7 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         if self.tcx().sess.verbose() {\n-            p!(write(\"Const({:?}: {:?})\", ct.val(), ct.ty()));\n+            p!(write(\"Const({:?}: {:?})\", ct.kind(), ct.ty()));\n             return Ok(self);\n         }\n \n@@ -1186,7 +1186,7 @@ pub trait PrettyPrinter<'tcx>:\n             }};\n         }\n \n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Unevaluated(ty::Unevaluated {\n                 def,\n                 substs,\n@@ -1262,7 +1262,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Ref(_, inner, _) => {\n                 if let ty::Array(elem, len) = inner.kind() {\n                     if let ty::Uint(ty::UintTy::U8) = elem.kind() {\n-                        if let ty::ConstKind::Value(ConstValue::Scalar(int)) = len.val() {\n+                        if let ty::ConstKind::Value(ConstValue::Scalar(int)) = len.kind() {\n                             match self.tcx().get_global_alloc(alloc_id) {\n                                 Some(GlobalAlloc::Memory(alloc)) => {\n                                     let len = int.assert_bits(self.tcx().data_layout.pointer_size);\n@@ -1452,7 +1452,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             (ConstValue::ByRef { alloc, offset }, ty::Array(t, n)) if *t == u8_type => {\n-                let n = n.val().try_to_bits(self.tcx().data_layout.pointer_size).unwrap();\n+                let n = n.kind().try_to_bits(self.tcx().data_layout.pointer_size).unwrap();\n                 // cast is ok because we already checked for pointer size (32 or 64 bit) above\n                 let range = AllocRange { start: offset, size: Size::from_bytes(n) };\n \n@@ -1475,7 +1475,7 @@ pub trait PrettyPrinter<'tcx>:\n             (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n                 let Some(contents) = self.tcx().try_destructure_const(\n                     ty::ParamEnv::reveal_all()\n-                        .and(self.tcx().mk_const(ty::ConstS { val: ty::ConstKind::Value(ct), ty })),\n+                        .and(self.tcx().mk_const(ty::ConstS { kind: ty::ConstKind::Value(ct), ty })),\n                 ) else {\n                     // Fall back to debug pretty printing for invalid constants.\n                     p!(write(\"{:?}\", ct));"}, {"sha": "31103b8d77ea34b93ae5b52eba5921b1e3545fce", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -602,7 +602,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n-    let is_match = match (a.val(), b.val()) {\n+    let is_match = match (a.kind(), b.kind()) {\n         (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n@@ -636,7 +636,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 bu.substs,\n             )?;\n             return Ok(tcx.mk_const(ty::ConstS {\n-                val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n                     def: au.def,\n                     substs,\n                     promoted: au.promoted,"}, {"sha": "961792260e4105c41962887b2939052f792e00fe", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1148,17 +1148,17 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         let ty = self.ty().try_fold_with(folder)?;\n-        let val = self.val().try_fold_with(folder)?;\n-        if ty != self.ty() || val != self.val() {\n-            Ok(folder.tcx().mk_const(ty::ConstS { ty, val }))\n+        let kind = self.kind().try_fold_with(folder)?;\n+        if ty != self.ty() || kind != self.kind() {\n+            Ok(folder.tcx().mk_const(ty::ConstS { ty, kind }))\n         } else {\n             Ok(self)\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n-        self.val().visit_with(visitor)\n+        self.kind().visit_with(visitor)\n     }\n }\n "}, {"sha": "ca29dd7c08f45c13b23a633adb1d6307817ff792", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -571,7 +571,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Param(p) = c.val() {\n+        if let ty::ConstKind::Param(p) = c.kind() {\n             self.const_for_param(p, c)\n         } else {\n             c.super_fold_with(self)"}, {"sha": "33ef0283745c11625dcdec9017d27127107a5413", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -450,7 +450,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         // Error: not a type param\n                         _ => false,\n                     },\n-                    GenericArgKind::Const(ct) => match ct.val() {\n+                    GenericArgKind::Const(ct) => match ct.kind() {\n                         ty::ConstKind::Param(ref pc) => {\n                             !impl_generics.const_param(pc, self).pure_wrt_drop\n                         }\n@@ -492,7 +492,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                     _ => return Err(NotUniqueParam::NotParam(t.into())),\n                 },\n-                GenericArgKind::Const(c) => match c.val() {\n+                GenericArgKind::Const(c) => match c.kind() {\n                     ty::ConstKind::Param(p) => {\n                         if !seen.insert(p.index) {\n                             return Err(NotUniqueParam::DuplicateParam(c.into()));\n@@ -1127,7 +1127,7 @@ pub fn needs_drop_components<'tcx>(\n         ty::Array(elem_ty, size) => {\n             match needs_drop_components(*elem_ty, target_layout) {\n                 Ok(v) if v.is_empty() => Ok(v),\n-                res => match size.val().try_to_bits(target_layout.pointer_size) {\n+                res => match size.kind().try_to_bits(target_layout.pointer_size) {\n                     // Arrays of size zero don't need drop, even if their element\n                     // type does.\n                     Some(0) => Ok(SmallVec::new()),"}, {"sha": "02fe1f3a7bded3f801ff8a02caced7c5a7c23e76", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -190,7 +190,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n         GenericArgKind::Lifetime(_) => {}\n         GenericArgKind::Const(parent_ct) => {\n             stack.push(parent_ct.ty().into());\n-            match parent_ct.val() {\n+            match parent_ct.kind() {\n                 ty::ConstKind::Infer(_)\n                 | ty::ConstKind::Param(_)\n                 | ty::ConstKind::Placeholder(_)"}, {"sha": "a87134d1f52e31c02c209f2daa0d1a368b161436", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let create_uneval_from_def_id =\n             |tcx: TyCtxt<'tcx>, def_id: DefId, ty: Ty<'tcx>, substs: SubstsRef<'tcx>| {\n                 let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n-                tcx.mk_const(ty::ConstS { val: ty::ConstKind::Unevaluated(uneval), ty })\n+                tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Unevaluated(uneval), ty })\n             };\n \n         let this = self;\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::ConstParam { param, def_id: _ } => {\n                 let const_param =\n-                    tcx.mk_const(ty::ConstS { val: ty::ConstKind::Param(param), ty: expr.ty });\n+                    tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Param(param), ty: expr.ty });\n                 let literal = ConstantKind::Ty(const_param);\n \n                 Constant { user_ty: None, span, literal }"}, {"sha": "26532ae33d0cfe3f469fb9000612fd667265489f", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -153,7 +153,7 @@ impl IntRange {\n                             return None;\n                         }\n                     }\n-                    mir::ConstantKind::Ty(c) => match c.val() {\n+                    mir::ConstantKind::Ty(c) => match c.kind() {\n                         ty::ConstKind::Value(_) => bug!(\n                             \"encountered ConstValue in mir::ConstantKind::Ty, whereas this is expected to be in ConstantKind::Val\"\n                         ),"}, {"sha": "83175439b70fb1e0471e9d6ff46a2c18276457bb", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -553,7 +553,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n         match value {\n             mir::ConstantKind::Ty(c) => {\n-                match c.val() {\n+                match c.kind() {\n                     ConstKind::Param(_) => {\n                         self.errors.push(PatternError::ConstParamInPattern(span));\n                         return PatKind::Wild;"}, {"sha": "2529a7c4232b21ec40579b2fc6553b427423b1bc", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -699,7 +699,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) {\n         if let Rvalue::Use(Operand::Constant(c)) = rval {\n             match c.literal {\n-                ConstantKind::Ty(c) if matches!(c.val(), ConstKind::Unevaluated(..)) => {}\n+                ConstantKind::Ty(c) if matches!(c.kind(), ConstKind::Unevaluated(..)) => {}\n                 _ => {\n                     trace!(\"skipping replace of Rvalue::Use({:?} because it is already a const\", c);\n                     return;\n@@ -773,7 +773,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                                         .tcx\n                                         .mk_const(ty::ConstS {\n                                             ty,\n-                                            val: ty::ConstKind::Value(ConstValue::ByRef {\n+                                            kind: ty::ConstKind::Value(ConstValue::ByRef {\n                                                 alloc,\n                                                 offset: Size::ZERO,\n                                             }),"}, {"sha": "15ad13009e59a9a271456a62074aeaaf6ce5072e", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -474,7 +474,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal {\n-                        ConstantKind::Ty(ct) => match ct.val() {\n+                        ConstantKind::Ty(ct) => match ct.kind() {\n                             // Promoteds must lint and not error as the user didn't ask for them\n                             ConstKind::Unevaluated(ty::Unevaluated {\n                                 def: _,"}, {"sha": "49403ba03a45ddfd8a2e57779b3751112d9784d8", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -614,7 +614,7 @@ impl<'tcx> Inliner<'tcx> {\n                 caller_body.required_consts.extend(\n                     callee_body.required_consts.iter().copied().filter(|&ct| {\n                         match ct.literal.const_for_ty() {\n-                            Some(ct) => matches!(ct.val(), ConstKind::Unevaluated(_)),\n+                            Some(ct) => matches!(ct.kind(), ConstKind::Unevaluated(_)),\n                             None => true,\n                         }\n                     }),"}, {"sha": "827ce0c02ac42c3934c80242190230f1a93ef5bc", "filename": "compiler/rustc_mir_transform/src/required_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Frequired_consts.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for RequiredConstsVisitor<'_, 'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n         let literal = constant.literal;\n-        if let Some(ct) = literal.const_for_ty() && let ConstKind::Unevaluated(_) = ct.val() {\n+        if let Some(ct) = literal.const_for_ty() && let ConstKind::Unevaluated(_) = ct.kind() {\n             self.required_consts.push(*constant);\n         }\n     }"}, {"sha": "dfaf464587be29f3701191ccaae2b116e984e576", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -756,7 +756,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         let literal = self.monomorphize(constant.literal);\n         let val = match literal {\n             mir::ConstantKind::Val(val, _) => val,\n-            mir::ConstantKind::Ty(ct) => match ct.val() {\n+            mir::ConstantKind::Ty(ct) => match ct.kind() {\n                 ty::ConstKind::Value(val) => val,\n                 ty::ConstKind::Unevaluated(ct) => {\n                     let param_env = ty::ParamEnv::reveal_all();\n@@ -784,7 +784,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         let substituted_constant = self.monomorphize(constant);\n         let param_env = ty::ParamEnv::reveal_all();\n \n-        match substituted_constant.val() {\n+        match substituted_constant.kind() {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n             ty::ConstKind::Unevaluated(unevaluated) => {\n                 match self.tcx.const_eval_resolve(param_env, unevaluated, None) {"}, {"sha": "f29143b448049320020dc9bf997e9ae37ea0e360", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n             return ControlFlow::CONTINUE;\n         }\n \n-        match c.val() {\n+        match c.kind() {\n             ty::ConstKind::Param(param) => {\n                 debug!(?param);\n                 self.unused_parameters.clear(param.index);\n@@ -353,7 +353,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n             return ControlFlow::CONTINUE;\n         }\n \n-        match c.val() {\n+        match c.kind() {\n             ty::ConstKind::Param(param) => {\n                 if self.unused_parameters.contains(param.index).unwrap_or(false) {\n                     ControlFlow::CONTINUE"}, {"sha": "5c3e7918aa3ff48bb7394acd8920b3657fabc77a", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -118,6 +118,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_lint_query_instability => {\n                     self.check_rustc_lint_query_instability(&attr, span, target)\n                 }\n+                sym::rustc_lint_diagnostics => {\n+                    self.check_rustc_lint_diagnostics(&attr, span, target)\n+                }\n                 sym::rustc_clean\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n@@ -1624,12 +1627,9 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    fn check_rustc_lint_query_instability(\n-        &self,\n-        attr: &Attribute,\n-        span: Span,\n-        target: Target,\n-    ) -> bool {\n+    /// Helper function for checking that the provided attribute is only applied to a function or\n+    /// method.\n+    fn check_applied_to_fn_or_method(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         let is_function = matches!(target, Target::Fn | Target::Method(..));\n         if !is_function {\n             self.tcx\n@@ -1643,6 +1643,23 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks that the `#[rustc_lint_query_instability]` attribute is only applied to a function\n+    /// or method.\n+    fn check_rustc_lint_query_instability(\n+        &self,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        self.check_applied_to_fn_or_method(attr, span, target)\n+    }\n+\n+    /// Checks that the `#[rustc_lint_diagnostics]` attribute is only applied to a function or\n+    /// method.\n+    fn check_rustc_lint_diagnostics(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+        self.check_applied_to_fn_or_method(attr, span, target)\n+    }\n+\n     /// Checks that the dep-graph debugging attributes are only present when the query-dep-graph\n     /// option is passed to the compiler.\n     fn check_rustc_dirty_clean(&self, attr: &Attribute) -> bool {"}, {"sha": "044be906b55071c21cc7b2f7521f9917c66c386a", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -5,6 +5,7 @@\n #![feature(never_type)]\n #![feature(once_cell)]\n #![feature(option_get_or_insert_default)]\n+#![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "a5ccae047fcc311cbbb34010d21e9526f5cfc043", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -311,13 +311,15 @@ impl ParseSess {\n         self.create_warning(warning).emit()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.span_diagnostic.struct_err(msg)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }"}, {"sha": "b1d1f9e7a6ce013f20ef9f15e5a7ac5acb09e283", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -209,6 +209,7 @@ pub struct PerfStats {\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(SessionDiagnostic)]` -- see [rustc_macros::SessionDiagnostic].\n+#[rustc_diagnostic_item = \"SessionDiagnostic\"]\n pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     /// Write out as a diagnostic out of `sess`.\n     #[must_use]"}, {"sha": "6547ec493c8620292a1b2bb8ed1d945c0bb867ba", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -125,6 +125,7 @@ symbols! {\n     Symbols {\n         AcqRel,\n         Acquire,\n+        AddSubdiagnostic,\n         Alignment,\n         Any,\n         Arc,\n@@ -169,6 +170,7 @@ symbols! {\n         Decoder,\n         Default,\n         Deref,\n+        DiagnosticMessage,\n         DirBuilder,\n         Display,\n         DoubleEndedIterator,\n@@ -253,11 +255,13 @@ symbols! {\n         RustcEncodable,\n         Send,\n         SeqCst,\n+        SessionDiagnostic,\n         SliceIndex,\n         Some,\n         String,\n         StructuralEq,\n         StructuralPartialEq,\n+        SubdiagnosticMessage,\n         Sync,\n         Target,\n         ToOwned,\n@@ -1205,6 +1209,7 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_legacy_const_generics,\n+        rustc_lint_diagnostics,\n         rustc_lint_query_instability,\n         rustc_macro_transparency,\n         rustc_main,"}, {"sha": "2f7e413b087aefb1a0de83c0030c6aafcab81fc1", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -228,9 +228,9 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n                 self.write_str(\"[\")?;\n                 self = self.print_type(ty)?;\n                 self.write_str(\"; \")?;\n-                if let Some(size) = size.val().try_to_bits(self.tcx().data_layout.pointer_size) {\n+                if let Some(size) = size.kind().try_to_bits(self.tcx().data_layout.pointer_size) {\n                     write!(self, \"{}\", size)?\n-                } else if let ty::ConstKind::Param(param) = size.val() {\n+                } else if let ty::ConstKind::Param(param) = size.kind() {\n                     self = param.print(self)?\n                 } else {\n                     self.write_str(\"_\")?\n@@ -260,7 +260,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n \n     fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         // only print integers\n-        match (ct.val(), ct.ty().kind()) {\n+        match (ct.kind(), ct.ty().kind()) {\n             (\n                 ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(scalar))),\n                 ty::Int(_) | ty::Uint(_),"}, {"sha": "f79f7a4ebdfc818edd6d5c9dc4629ca08f4f3490", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -582,7 +582,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     fn print_const(mut self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         // We only mangle a typed value if the const can be evaluated.\n         let ct = ct.eval(self.tcx, ty::ParamEnv::reveal_all());\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Value(_) => {}\n \n             // Placeholders (should be demangled as `_`).\n@@ -630,7 +630,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // handle `&str` and include both `&` (\"R\") and `str` (\"e\") prefixes.\n             ty::Ref(_, ty, hir::Mutability::Not) if *ty == self.tcx.types.str_ => {\n                 self.push(\"R\");\n-                match ct.val() {\n+                match ct.kind() {\n                     ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => {\n                         // NOTE(eddyb) the following comment was kept from `ty::print::pretty`:\n                         // The `inspect` here is okay since we checked the bounds, and there are no"}, {"sha": "9dd8588ceceea128961648ca591682ce22366a6e", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -209,7 +209,7 @@ fn check_opaque_type_parameter_valid(\n             GenericArgKind::Lifetime(lt) => {\n                 matches!(*lt, ty::ReEarlyBound(_) | ty::ReFree(_))\n             }\n-            GenericArgKind::Const(ct) => matches!(ct.val(), ty::ConstKind::Param(_)),\n+            GenericArgKind::Const(ct) => matches!(ct.kind(), ty::ConstKind::Param(_)),\n         };\n \n         if arg_is_param {\n@@ -452,7 +452,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         trace!(\"checking const {:?}\", ct);\n         // Find a const parameter\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Param(..) => {\n                 // Look it up in the substitution list.\n                 match self.map.get(&ct.into()).map(|k| k.unpack()) {"}, {"sha": "c95d43b71cf1b619edc73bfa574c97c7a91c7c79", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -828,7 +828,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 }\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     let evaluate = |c: ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val() {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.kind() {\n                             match select.infcx().const_eval_resolve(\n                                 obligation.param_env,\n                                 unevaluated,"}, {"sha": "6cf39be2a9d5c2004c305755d462597d5e3df746", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -245,7 +245,7 @@ impl<'tcx> AbstractConst<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         ct: ty::Const<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n             ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n             _ => Ok(None),\n@@ -414,7 +414,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n         for n in self.nodes.iter() {\n             if let Node::Leaf(ct) = n {\n-                if let ty::ConstKind::Unevaluated(ct) = ct.val() {\n+                if let ty::ConstKind::Unevaluated(ct) = ct.kind() {\n                     // `AbstractConst`s should not contain any promoteds as they require references which\n                     // are not allowed.\n                     assert_eq!(ct.promoted, None);\n@@ -457,7 +457,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n \n                 let constant = self.tcx.mk_const(ty::ConstS {\n-                                val: ty::ConstKind::Unevaluated(uneval),\n+                                kind: ty::ConstKind::Unevaluated(uneval),\n                                 ty: node.ty,\n                             });\n \n@@ -466,7 +466,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n             ExprKind::ConstParam {param, ..} => {\n                 let const_param = self.tcx.mk_const(ty::ConstS {\n-                        val: ty::ConstKind::Param(*param),\n+                        kind: ty::ConstKind::Param(*param),\n                         ty: node.ty,\n                     });\n                 self.nodes.push(Node::Leaf(const_param))\n@@ -748,7 +748,7 @@ impl<'tcx> ConstUnifyCtxt<'tcx> {\n                     return false;\n                 }\n \n-                match (a_ct.val(), b_ct.val()) {\n+                match (a_ct.kind(), b_ct.kind()) {\n                     // We can just unify errors with everything to reduce the amount of\n                     // emitted errors here.\n                     (ty::ConstKind::Error(_), _) | (_, ty::ConstKind::Error(_)) => true,"}, {"sha": "371157a99f881c10d11fa84f6ed1428784c9f7fd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // Arrays give us `[]`, `[{ty}; _]` and `[{ty}; N]`\n             if let ty::Array(aty, len) = self_ty.kind() {\n                 flags.push((sym::_Self, Some(\"[]\".to_string())));\n-                let len = len.val().try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n+                let len = len.kind().try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n                 flags.push((sym::_Self, Some(format!(\"[{}; _]\", aty))));\n                 if let Some(n) = len {\n                     flags.push((sym::_Self, Some(format!(\"[{}; {}]\", aty, n))));"}, {"sha": "50735ef048bf61a31bab1ec426ae3fa7a423c887", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -578,7 +578,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         //\n                         // Let's just see where this breaks :shrug:\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.val(), c2.val())\n+                            (c1.kind(), c2.kind())\n                         {\n                             if infcx.try_unify_abstract_consts(\n                                 a.shrink(),\n@@ -593,7 +593,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     let stalled_on = &mut pending_obligation.stalled_on;\n \n                     let mut evaluate = |c: Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val() {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.kind() {\n                             match self.selcx.infcx().const_eval_resolve(\n                                 obligation.param_env,\n                                 unevaluated,"}, {"sha": "565f3f509db3903a3ca5b32f687a5818a2579a9e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -742,7 +742,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Bound(debruijn, _)\n                 if debruijn.as_usize() + 1\n                     > self.current_index.as_usize() + self.universe_indices.len() =>\n@@ -758,7 +758,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                 self.mapped_consts.insert(p, bound_const);\n                 self.infcx\n                     .tcx\n-                    .mk_const(ty::ConstS { val: ty::ConstKind::Placeholder(p), ty: ct.ty() })\n+                    .mk_const(ty::ConstS { kind: ty::ConstKind::Placeholder(p), ty: ct.ty() })\n             }\n             _ if ct.has_vars_bound_at_or_above(self.current_index) => ct.super_fold_with(self),\n             _ => ct,\n@@ -878,7 +878,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Placeholder(p) = ct.val() {\n+        if let ty::ConstKind::Placeholder(p) = ct.kind() {\n             let replace_var = self.mapped_consts.get(&p);\n             match replace_var {\n                 Some(replace_var) => {\n@@ -891,7 +891,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n                         self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                     );\n                     self.tcx().mk_const(ty::ConstS {\n-                        val: ty::ConstKind::Bound(db, *replace_var),\n+                        kind: ty::ConstKind::Bound(db, *replace_var),\n                         ty: ct.ty(),\n                     })\n                 }\n@@ -2018,8 +2018,8 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         let identity_substs =\n             crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n-        let val = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, identity_substs));\n-        tcx.mk_const(ty::ConstS { ty, val }).into()\n+        let kind = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, identity_substs));\n+        tcx.mk_const(ty::ConstS { ty, kind }).into()\n     } else {\n         ty.into()\n     };"}, {"sha": "b00f8fe73a1de42bf69d3b3ea5e9e6ac3bc51d5d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n     }\n \n     fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match ct.val() {\n+        match ct.kind() {\n             ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {\n                 self.escaping =\n                     self.escaping.max(debruijn.as_usize() - self.outer_index.as_usize());\n@@ -337,7 +337,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         Ok(match constant {\n             mir::ConstantKind::Ty(c) => {\n                 let const_folded = c.try_fold_with(self)?;\n-                match const_folded.val() {\n+                match const_folded.kind() {\n                     ty::ConstKind::Value(cv) => {\n                         // FIXME With Valtrees we need to convert `cv: ValTree`\n                         // to a `ConstValue` here."}, {"sha": "5942bb79d69e8945de8411b0cac237f4908cac84", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -542,7 +542,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 bound_vars.push(bound_var);\n                                 tcx.mk_const(ty::ConstS {\n                                     ty: tcx.type_of(param.def_id),\n-                                    val: ty::ConstKind::Bound(\n+                                    kind: ty::ConstKind::Bound(\n                                         ty::INNERMOST,\n                                         ty::BoundVar::from_usize(bound_vars.len() - 1),\n                                     ),\n@@ -989,7 +989,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // Lifetimes aren't allowed to change during unsizing.\n                     GenericArgKind::Lifetime(_) => None,\n \n-                    GenericArgKind::Const(ct) => match ct.val() {\n+                    GenericArgKind::Const(ct) => match ct.kind() {\n                         ty::ConstKind::Param(p) => Some(p.index),\n                         _ => None,\n                     },"}, {"sha": "07e7bad6cb787838fafb01dead8b878aef9c57f9", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -622,7 +622,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         //\n                         // Let's just see where this breaks :shrug:\n                         if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.val(), c2.val())\n+                            (c1.kind(), c2.kind())\n                         {\n                             if self.infcx.try_unify_abstract_consts(\n                                 a.shrink(),\n@@ -635,7 +635,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n \n                     let evaluate = |c: ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val() {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.kind() {\n                             self.infcx\n                                 .const_eval_resolve(\n                                     obligation.param_env,"}, {"sha": "8d666046ad9fdb46035ada41cb11f55d187eb778", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -41,7 +41,7 @@ pub fn obligations<'a, 'tcx>(\n             .into()\n         }\n         GenericArgKind::Const(ct) => {\n-            match ct.val() {\n+            match ct.kind() {\n                 ty::ConstKind::Infer(infer) => {\n                     let resolved = infcx.shallow_resolve(infer);\n                     if resolved == infer {\n@@ -51,7 +51,7 @@ pub fn obligations<'a, 'tcx>(\n \n                     infcx\n                         .tcx\n-                        .mk_const(ty::ConstS { val: ty::ConstKind::Infer(resolved), ty: ct.ty() })\n+                        .mk_const(ty::ConstS { kind: ty::ConstKind::Infer(resolved), ty: ct.ty() })\n                 }\n                 _ => ct,\n             }\n@@ -437,7 +437,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 GenericArgKind::Lifetime(_) => continue,\n \n                 GenericArgKind::Const(constant) => {\n-                    match constant.val() {\n+                    match constant.kind() {\n                         ty::ConstKind::Unevaluated(uv) => {\n                             let obligations = self.nominal_obligations(uv.def.did, uv.substs);\n                             self.out.extend(obligations);\n@@ -460,7 +460,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 let cause = self.cause(traits::MiscObligation);\n \n                                 let resolved_constant = self.infcx.tcx.mk_const(ty::ConstS {\n-                                    val: ty::ConstKind::Infer(resolved),\n+                                    kind: ty::ConstKind::Infer(resolved),\n                                     ty: constant.ty(),\n                                 });\n                                 self.out.push(traits::Obligation::with_depth("}, {"sha": "497819ce5c567bac02148bc4b97c5803e964204a", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -736,7 +736,7 @@ fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx\n \n         ty::GenericParamDefKind::Const { .. } => tcx\n             .mk_const(ty::ConstS {\n-                val: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n+                kind: ty::ConstKind::Bound(ty::INNERMOST, ty::BoundVar::from(param.index)),\n                 ty: tcx.type_of(param.def_id),\n             })\n             .into(),"}, {"sha": "e9f05ce9e0688f8498ac0538c2228778d56f948a", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -514,7 +514,7 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n impl<'tcx> LowerInto<'tcx, chalk_ir::Const<RustInterner<'tcx>>> for ty::Const<'tcx> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::Const<RustInterner<'tcx>> {\n         let ty = self.ty().lower_into(interner);\n-        let value = match self.val() {\n+        let value = match self.kind() {\n             ty::ConstKind::Value(val) => {\n                 chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: val })\n             }\n@@ -531,7 +531,7 @@ impl<'tcx> LowerInto<'tcx, ty::Const<'tcx>> for &chalk_ir::Const<RustInterner<'t\n     fn lower_into(self, interner: RustInterner<'tcx>) -> ty::Const<'tcx> {\n         let data = self.data(interner);\n         let ty = data.ty.lower_into(interner);\n-        let val = match data.value {\n+        let kind = match data.value {\n             chalk_ir::ConstValue::BoundVar(var) => ty::ConstKind::Bound(\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n                 ty::BoundVar::from_u32(var.index as u32),\n@@ -540,7 +540,7 @@ impl<'tcx> LowerInto<'tcx, ty::Const<'tcx>> for &chalk_ir::Const<RustInterner<'t\n             chalk_ir::ConstValue::Placeholder(_p) => unimplemented!(),\n             chalk_ir::ConstValue::Concrete(c) => ty::ConstKind::Value(c.interned),\n         };\n-        interner.tcx.mk_const(ty::ConstS { ty, val })\n+        interner.tcx.mk_const(ty::ConstS { ty, kind })\n     }\n }\n "}, {"sha": "bab751ac040a15dca95f03f567a6fae2d2f77bf7", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -539,7 +539,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n         }\n \n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::ConstKind::Unevaluated(..) = c.val() {\n+            if let ty::ConstKind::Unevaluated(..) = c.kind() {\n                 // FIXME(#72219) We currently don't detect lifetimes within substs\n                 // which would violate this check. Even though the particular substitution is not used\n                 // within the const, this should still be fixed."}, {"sha": "acb2aa44ad5df5697a21f3182d5f6a9af6f59037", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1379,7 +1379,7 @@ pub fn check_type_bounds<'tcx>(\n             bound_vars.push(bound_var);\n             tcx.mk_const(ty::ConstS {\n                 ty: tcx.type_of(param.def_id),\n-                val: ty::ConstKind::Bound(\n+                kind: ty::ConstKind::Bound(\n                     ty::INNERMOST,\n                     ty::BoundVar::from_usize(bound_vars.len() - 1),\n                 ),"}, {"sha": "2db5f5d407193df4394bba29cdd7dc74daa90693", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1382,7 +1382,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 }\n \n                 fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    if let ty::ConstKind::Param(param) = c.val() {\n+                    if let ty::ConstKind::Param(param) = c.kind() {\n                         self.params.insert(param.index);\n                     }\n                     c.super_visit_with(self)"}, {"sha": "92910a3066d12ae03791a6f37b5740b9b48b2484", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -2352,7 +2352,7 @@ fn const_evaluatable_predicates_of<'tcx>(\n         fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n             let def_id = self.tcx.hir().local_def_id(c.hir_id);\n             let ct = ty::Const::from_anon_const(self.tcx, def_id);\n-            if let ty::ConstKind::Unevaluated(uv) = ct.val() {\n+            if let ty::ConstKind::Unevaluated(uv) = ct.kind() {\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert(("}, {"sha": "858cf63390a34f1cf8dad568dcf20233727f64cc", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n \n     fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match c.val() {\n+        match c.kind() {\n             ty::ConstKind::Unevaluated(..) if !self.include_nonconstraining => {\n                 // Constant expressions are not injective\n                 return c.ty().visit_with(self);"}, {"sha": "a7dcbfff207f6128b5fa4dfa39dfb9d1d9559072", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -411,12 +411,12 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     fn add_constraints_from_const(\n         &mut self,\n         current: &CurrentItem,\n-        val: ty::Const<'tcx>,\n+        c: ty::Const<'tcx>,\n         variance: VarianceTermPtr<'a>,\n     ) {\n-        debug!(\"add_constraints_from_const(val={:?}, variance={:?})\", val, variance);\n+        debug!(\"add_constraints_from_const(c={:?}, variance={:?})\", c, variance);\n \n-        match &val.val() {\n+        match &c.kind() {\n             ty::ConstKind::Unevaluated(uv) => {\n                 self.add_constraints_from_invariant_substs(current, uv.substs, variance);\n             }"}, {"sha": "fd73fde2acb2df6f1cc25a52a94d11bdd663c1ae", "filename": "library/alloc/src/collections/btree/fix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -91,8 +91,8 @@ impl<K, V> Root<K, V> {\n         }\n     }\n \n-    /// Stock up any underfull nodes on the right border of the tree.\n-    /// The other nodes, those that are not the root nor a rightmost edge,\n+    /// Stocks up any underfull nodes on the right border of the tree.\n+    /// The other nodes, those that are neither the root nor a rightmost edge,\n     /// must be prepared to have up to MIN_LEN elements stolen.\n     pub fn fix_right_border_of_plentiful(&mut self) {\n         let mut cur_node = self.borrow_mut();"}, {"sha": "e2749aac694c8227e8082a738a8327df12fbf8e4", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -315,7 +315,7 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     pub fn insert(self, value: V) -> &'a mut V {\n         let out_ptr = match self.handle {\n             None => {\n-                // SAFETY: We have consumed self.handle and the reference returned.\n+                // SAFETY: There is no tree yet so no reference to it exists.\n                 let map = unsafe { self.dormant_map.awaken() };\n                 let mut root = NodeRef::new_leaf();\n                 let val_ptr = root.borrow_mut().push(self.key, value) as *mut V;\n@@ -325,16 +325,17 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n             }\n             Some(handle) => match handle.insert_recursing(self.key, value) {\n                 (None, val_ptr) => {\n-                    // SAFETY: We have consumed self.handle and the handle returned.\n+                    // SAFETY: We have consumed self.handle.\n                     let map = unsafe { self.dormant_map.awaken() };\n                     map.length += 1;\n                     val_ptr\n                 }\n                 (Some(ins), val_ptr) => {\n                     drop(ins.left);\n-                    // SAFETY: We have consumed self.handle and the reference returned.\n+                    // SAFETY: We have consumed self.handle and dropped the\n+                    // remaining reference to the tree, ins.left.\n                     let map = unsafe { self.dormant_map.awaken() };\n-                    let root = map.root.as_mut().unwrap();\n+                    let root = map.root.as_mut().unwrap(); // same as ins.left\n                     root.push_internal_level().push(ins.kv.0, ins.kv.1, ins.right);\n                     map.length += 1;\n                     val_ptr"}, {"sha": "ded97bb7eaaeda398f4e48764c57739016909148", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -102,21 +102,23 @@ macro_rules! compat_fn {\n             }\n \n             #[allow(dead_code)]\n+            #[inline(always)]\n             pub fn option() -> Option<F> {\n-                unsafe { PTR }\n+                unsafe {\n+                    if cfg!(miri) {\n+                        // Miri does not run `init`, so we just call `get_f` each time.\n+                        get_f()\n+                    } else {\n+                        PTR\n+                    }\n+                }\n             }\n \n             #[allow(dead_code)]\n             pub unsafe fn call($($argname: $argtype),*) -> $rettype {\n-                if let Some(ptr) = PTR {\n+                if let Some(ptr) = option() {\n                     return ptr($($argname),*);\n                 }\n-                if cfg!(miri) {\n-                    // Miri does not run `init`, so we just call `get_f` each time.\n-                    if let Some(ptr) = get_f() {\n-                        return ptr($($argname),*);\n-                    }\n-                }\n                 $fallback_body\n             }\n         }"}, {"sha": "e7da6eff51959e4d5b4721a1035294e797c7a74e", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -234,7 +234,7 @@ pub(crate) fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n }\n \n pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n-    match n.val() {\n+    match n.kind() {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n@@ -307,7 +307,7 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: ty::Const<'_>) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n     // For all other types, fallback to the original `pretty_print_const`.\n-    match (ct.val(), ct.ty().kind()) {\n+    match (ct.kind(), ct.ty().kind()) {\n         (ty::ConstKind::Value(ConstValue::Scalar(int)), ty::Uint(ui)) => {\n             format!(\"{}{}\", format_integer_with_underscore_sep(&int.to_string()), ui.name_str())\n         }"}, {"sha": "394db2d0cda6bfd783497e9fa529a0f26540b05d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -886,9 +886,9 @@ fn fmt_type<'cx>(\n                 primitive_link(f, PrimitiveType::Slice, &format!(\"[{name}]\"), cx)\n             }\n             _ => {\n-                primitive_link(f, PrimitiveType::Slice, \"[\", cx)?;\n+                write!(f, \"[\")?;\n                 fmt::Display::fmt(&t.print(cx), f)?;\n-                primitive_link(f, PrimitiveType::Slice, \"]\", cx)\n+                write!(f, \"]\")\n             }\n         },\n         clean::Array(ref t, ref n) => {\n@@ -926,31 +926,6 @@ fn fmt_type<'cx>(\n             let m = mutability.print_with_space();\n             let amp = if f.alternate() { \"&\".to_string() } else { \"&amp;\".to_string() };\n             match **ty {\n-                clean::Slice(ref bt) => {\n-                    // `BorrowedRef{ ... Slice(T) }` is `&[T]`\n-                    match **bt {\n-                        clean::Generic(name) => primitive_link(\n-                            f,\n-                            PrimitiveType::Slice,\n-                            &format!(\"{amp}{lt}{m}[{name}]\"),\n-                            cx,\n-                        ),\n-                        _ => {\n-                            primitive_link(\n-                                f,\n-                                PrimitiveType::Slice,\n-                                &format!(\"{}{}{}[\", amp, lt, m),\n-                                cx,\n-                            )?;\n-                            if f.alternate() {\n-                                write!(f, \"{:#}\", bt.print(cx))?;\n-                            } else {\n-                                write!(f, \"{}\", bt.print(cx))?;\n-                            }\n-                            primitive_link(f, PrimitiveType::Slice, \"]\", cx)\n-                        }\n-                    }\n-                }\n                 clean::DynTrait(ref bounds, ref trait_lt)\n                     if bounds.len() > 1 || trait_lt.is_some() =>\n                 {"}, {"sha": "c357210978a60f79c0f320b44070871f69b0877e", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -23,7 +23,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n-    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x00000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+    let mut _1: [usize; Const { ty: usize, kind: Value(Scalar(0x00000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n     let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:18:14: 18:18"}, {"sha": "382c89a1fb9b544c5fc568ed5fb4df3cc439d08d", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -23,7 +23,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n-    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+    let mut _1: [usize; Const { ty: usize, kind: Value(Scalar(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n     let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:18:14: 18:18"}, {"sha": "7bec7582df7c9c8f96f481e642c052009cafc46b", "filename": "src/test/rustdoc/slice-links.link_box_u32.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_box_u32.html?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1 +1 @@\n-<code>pub fn gamma() -&gt; <a class=\"struct\" href=\"struct.MyBox.html\" title=\"struct foo::MyBox\">MyBox</a>&lt;<a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">[</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">]</a>&gt;</code>\n\\ No newline at end of file\n+<code>pub fn gamma() -&gt; <a class=\"struct\" href=\"struct.MyBox.html\" title=\"struct foo::MyBox\">MyBox</a>&lt;[<a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a>]&gt;</code>\n\\ No newline at end of file"}, {"sha": "1d0f2bf75a233c4be2b7dcaf46a65296b4cde459", "filename": "src/test/rustdoc/slice-links.link_slice_generic.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_generic.html?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1 +1 @@\n-<code>pub fn beta&lt;T&gt;() -&gt; <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">&amp;'static [T]</a></code>\n\\ No newline at end of file\n+<code>pub fn beta&lt;T&gt;() -&gt; &amp;'static <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">[T]</a></code>\n\\ No newline at end of file"}, {"sha": "c86d383042615388ebe4fa0fb22b8ab0ab53538d", "filename": "src/test/rustdoc/slice-links.link_slice_u32.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fslice-links.link_slice_u32.html?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -1 +1 @@\n-<code>pub fn alpha() -&gt; <a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">&amp;'static [</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a><a class=\"primitive\" href=\"{{channel}}/core/primitive.slice.html\">]</a></code>\n\\ No newline at end of file\n+<code>pub fn alpha() -&gt; &amp;'static [<a class=\"primitive\" href=\"{{channel}}/core/primitive.u32.html\">u32</a>]</code>\n\\ No newline at end of file"}, {"sha": "817d8531da905125860ddf7397c6c0882be29fb2", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -0,0 +1,73 @@\n+// compile-flags: -Z unstable-options\n+\n+#![crate_type = \"lib\"]\n+#![feature(rustc_private)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n+extern crate rustc_errors;\n+extern crate rustc_macros;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_errors::{AddSubdiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, fluent};\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_session::{parse::ParseSess, SessionDiagnostic};\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-expect-path\")]\n+struct DeriveSessionDiagnostic {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[note(slug = \"note\")]\n+struct Note {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+pub struct UntranslatableInSessionDiagnostic;\n+\n+impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagnostic {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        sess.struct_err(\"untranslatable diagnostic\")\n+        //~^ ERROR diagnostics should be created using translatable messages\n+    }\n+}\n+\n+pub struct TranslatableInSessionDiagnostic;\n+\n+impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for TranslatableInSessionDiagnostic {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        sess.struct_err(fluent::parser::expect_path)\n+    }\n+}\n+\n+pub struct UntranslatableInAddSubdiagnostic;\n+\n+impl AddSubdiagnostic for UntranslatableInAddSubdiagnostic {\n+    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+        diag.note(\"untranslatable diagnostic\");\n+        //~^ ERROR diagnostics should be created using translatable messages\n+    }\n+}\n+\n+pub struct TranslatableInAddSubdiagnostic;\n+\n+impl AddSubdiagnostic for TranslatableInAddSubdiagnostic {\n+    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+        diag.note(fluent::typeck::note);\n+    }\n+}\n+\n+pub fn make_diagnostics<'a>(sess: &'a ParseSess) {\n+    let _diag = sess.struct_err(fluent::parser::expect_path);\n+    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+\n+    let _diag = sess.struct_err(\"untranslatable diagnostic\");\n+    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    //~^^ ERROR diagnostics should be created using translatable messages\n+}"}, {"sha": "bae78ffdc021b5fff868b5189e422d60a77332d9", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -0,0 +1,44 @@\n+error: diagnostics should be created using translatable messages\n+  --> $DIR/diagnostics.rs:36:14\n+   |\n+LL |         sess.struct_err(\"untranslatable diagnostic\")\n+   |              ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/diagnostics.rs:5:9\n+   |\n+LL | #![deny(rustc::untranslatable_diagnostic)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: diagnostics should be created using translatable messages\n+  --> $DIR/diagnostics.rs:53:14\n+   |\n+LL |         diag.note(\"untranslatable diagnostic\");\n+   |              ^^^^\n+\n+error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+  --> $DIR/diagnostics.rs:67:22\n+   |\n+LL |     let _diag = sess.struct_err(fluent::parser::expect_path);\n+   |                      ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/diagnostics.rs:6:9\n+   |\n+LL | #![deny(rustc::diagnostic_outside_of_impl)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+  --> $DIR/diagnostics.rs:70:22\n+   |\n+LL |     let _diag = sess.struct_err(\"untranslatable diagnostic\");\n+   |                      ^^^^^^^^^^\n+\n+error: diagnostics should be created using translatable messages\n+  --> $DIR/diagnostics.rs:70:22\n+   |\n+LL |     let _diag = sess.struct_err(\"untranslatable diagnostic\");\n+   |                      ^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "99f99ffcd359735cb0d1c3ce4d1fd2a2a1837155", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics_incorrect.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_lint_diagnostics]\n+//~^ ERROR attribute should be applied to a function\n+struct Foo;\n+\n+impl Foo {\n+    #[rustc_lint_diagnostics(a)]\n+    //~^ ERROR malformed `rustc_lint_diagnostics`\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "46c206f3bf9fb0772ba9fc3ba4d9b19ea4ca6c8d", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics_incorrect.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics_incorrect.stderr?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -0,0 +1,17 @@\n+error: malformed `rustc_lint_diagnostics` attribute input\n+  --> $DIR/diagnostics_incorrect.rs:10:5\n+   |\n+LL |     #[rustc_lint_diagnostics(a)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_lint_diagnostics]`\n+\n+error: attribute should be applied to a function\n+  --> $DIR/diagnostics_incorrect.rs:5:1\n+   |\n+LL | #[rustc_lint_diagnostics]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct Foo;\n+   | ----------- not a function\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ed47490e230cee6e7b78fbcf3aa35d9274e5b365", "filename": "src/tools/clippy/clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.kind();\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "4ca69465fad4123ee5bba823e2f1f8e645758801", "filename": "src/tools/clippy/clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.val();\n+            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.kind();\n             if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;"}, {"sha": "159c5d53d029261fdd159db073356d365021d4c3", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "patch": "@@ -582,7 +582,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n \n pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n     use rustc_middle::mir::interpret::ConstValue;\n-    match result.val() {\n+    match result.kind() {\n         ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(int))) => {\n             match result.ty().kind() {\n                 ty::Bool => Some(Constant::Bool(int == ScalarInt::TRUE)),"}]}