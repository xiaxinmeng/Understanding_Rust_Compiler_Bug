{"sha": "c9ed92ce20fbb2871311d493148523814cca7f1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZWQ5MmNlMjBmYmIyODcxMzExZDQ5MzE0ODUyMzgxNGNjYTdmMWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T02:34:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T06:40:42Z"}, "message": "More uses of higher::if_block", "tree": {"sha": "6a5ad8520b2b0ccf370dc18dc9adfbbd04395ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5ad8520b2b0ccf370dc18dc9adfbbd04395ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ed92ce20fbb2871311d493148523814cca7f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ed92ce20fbb2871311d493148523814cca7f1d", "html_url": "https://github.com/rust-lang/rust/commit/c9ed92ce20fbb2871311d493148523814cca7f1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ed92ce20fbb2871311d493148523814cca7f1d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "url": "https://api.github.com/repos/rust-lang/rust/commits/69b1da4d824c8ed0e2a9093f0af9c89dad33b652", "html_url": "https://github.com/rust-lang/rust/commit/69b1da4d824c8ed0e2a9093f0af9c89dad33b652"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "05d3ea6b2748362448dc024b1ba51a2e2e77d06a", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=c9ed92ce20fbb2871311d493148523814cca7f1d", "patch": "@@ -72,7 +72,7 @@ const COMPLEX_BLOCK_MESSAGE: &str = \"in an 'if' condition, avoid complex blocks\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprKind::If(check, then, _) = &expr.node {\n+        if let Some((check, then, _)) = higher::if_block(&expr) {\n             if let ExprKind::Block(block, _) = &check.node {\n                 if block.rules == DefaultBlock {\n                     if block.stmts.is_empty() {"}, {"sha": "c08d6851aa0137c8ac9b6bd383cd5fe6f603acea", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=c9ed92ce20fbb2871311d493148523814cca7f1d", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{get_parent_expr, higher, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -109,13 +109,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if !in_macro(expr.span) {\n             // skip ifs directly in else, it will be checked in the parent if\n-            if let Some(&Expr {\n-                node: ExprKind::If(_, _, Some(ref else_expr)),\n-                ..\n-            }) = get_parent_expr(cx, expr)\n-            {\n-                if else_expr.hir_id == expr.hir_id {\n-                    return;\n+            if let Some(expr) = get_parent_expr(cx, expr) {\n+                if let Some((_, _, Some(ref else_expr))) = higher::if_block(&expr) {\n+                    if else_expr.hir_id == expr.hir_id {\n+                        return;\n+                    }\n                 }\n             }\n \n@@ -236,7 +234,7 @@ fn if_sequence(mut expr: &Expr) -> (SmallVec<[&Expr; 1]>, SmallVec<[&Block; 1]>)\n     let mut conds = SmallVec::new();\n     let mut blocks: SmallVec<[&Block; 1]> = SmallVec::new();\n \n-    while let ExprKind::If(ref cond, ref then_expr, ref else_expr) = expr.node {\n+    while let Some((ref cond, ref then_expr, ref else_expr)) = higher::if_block(&expr) {\n         conds.push(&**cond);\n         if let ExprKind::Block(ref block, _) = then_expr.node {\n             blocks.push(block);"}, {"sha": "551e0bb848d8b57476aa1cf84696015e52744561", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=c9ed92ce20fbb2871311d493148523814cca7f1d", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n@@ -41,7 +41,7 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprKind::If(ref check, ref then_block, ref else_block) = expr.node {\n+        if let Some((ref check, ref then_block, ref else_block)) = higher::if_block(&expr) {\n             if let ExprKind::Unary(UnOp::UnNot, ref check) = check.node {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`"}, {"sha": "990d8facd13473137606b8858aedad4b1a31cbb4", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ed92ce20fbb2871311d493148523814cca7f1d/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=c9ed92ce20fbb2871311d493148523814cca7f1d", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{snippet, span_lint_and_then};\n+use crate::utils::{higher, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::Res;\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                 if let hir::StmtKind::Local(ref local) = stmt.node;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.node;\n                 if let hir::StmtKind::Expr(ref if_) = expr.node;\n-                if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.node;\n+                if let Some((ref cond, ref then, ref else_)) = higher::if_block(&if_);\n                 if !used_in_expr(cx, canonical_id, cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.node;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);"}]}