{"sha": "a713a0399a6e63de1c8009a390ae964ff03f4067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MTNhMDM5OWE2ZTYzZGUxYzgwMDlhMzkwYWU5NjRmZjAzZjQwNjc=", "commit": {"author": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-05-27T14:51:29Z"}, "committer": {"name": "Hugo Beauz\u00e9e-Luyssen", "email": "hugo@beauzee.fr", "date": "2019-07-25T19:30:08Z"}, "message": "std: win: Don't use SetHandleInformation on UWP\n\nAttempt to create sockets with the WSA_FLAG_NO_HANDLE_INHERIT flag, and\nhandle the potential error gracefully (as the flag isn't support on\nWindows 7 before SP1)", "tree": {"sha": "9154a6d4ac29ade41d40fca9933f67332431ed7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9154a6d4ac29ade41d40fca9933f67332431ed7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a713a0399a6e63de1c8009a390ae964ff03f4067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a713a0399a6e63de1c8009a390ae964ff03f4067", "html_url": "https://github.com/rust-lang/rust/commit/a713a0399a6e63de1c8009a390ae964ff03f4067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a713a0399a6e63de1c8009a390ae964ff03f4067/comments", "author": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chouquette", "id": 54693, "node_id": "MDQ6VXNlcjU0Njkz", "avatar_url": "https://avatars.githubusercontent.com/u/54693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chouquette", "html_url": "https://github.com/chouquette", "followers_url": "https://api.github.com/users/chouquette/followers", "following_url": "https://api.github.com/users/chouquette/following{/other_user}", "gists_url": "https://api.github.com/users/chouquette/gists{/gist_id}", "starred_url": "https://api.github.com/users/chouquette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chouquette/subscriptions", "organizations_url": "https://api.github.com/users/chouquette/orgs", "repos_url": "https://api.github.com/users/chouquette/repos", "events_url": "https://api.github.com/users/chouquette/events{/privacy}", "received_events_url": "https://api.github.com/users/chouquette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9407ed759fd31fca3c32c1bc3b3e2f26313c462f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9407ed759fd31fca3c32c1bc3b3e2f26313c462f", "html_url": "https://github.com/rust-lang/rust/commit/9407ed759fd31fca3c32c1bc3b3e2f26313c462f"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "2cec96e0016a537d25726bc6a5865eef450c7dad", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=a713a0399a6e63de1c8009a390ae964ff03f4067", "patch": "@@ -121,6 +121,7 @@ impl Clone for WIN32_FIND_DATAW {\n }\n \n pub const WSA_FLAG_OVERLAPPED: DWORD = 0x01;\n+pub const WSA_FLAG_NO_HANDLE_INHERIT: DWORD = 0x80;\n \n pub const WSADESCRIPTION_LEN: usize = 256;\n pub const WSASYS_STATUS_LEN: usize = 128;\n@@ -130,6 +131,7 @@ pub const INVALID_SOCKET: SOCKET = !0;\n pub const WSAEACCES: c_int = 10013;\n pub const WSAEINVAL: c_int = 10022;\n pub const WSAEWOULDBLOCK: c_int = 10035;\n+pub const WSAEPROTOTYPE: c_int = 10041;\n pub const WSAEADDRINUSE: c_int = 10048;\n pub const WSAEADDRNOTAVAIL: c_int = 10049;\n pub const WSAECONNABORTED: c_int = 10053;\n@@ -157,8 +159,6 @@ pub const STD_INPUT_HANDLE: DWORD = -10i32 as DWORD;\n pub const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n pub const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n \n-pub const HANDLE_FLAG_INHERIT: DWORD = 0x00000001;\n-\n pub const PROGRESS_CONTINUE: DWORD = 0;\n \n pub const ERROR_FILE_NOT_FOUND: DWORD = 2;\n@@ -658,9 +658,15 @@ pub struct timeval {\n // Functions forbidden when targeting UWP\n cfg_if::cfg_if! {\n if #[cfg(not(target_vendor = \"uwp\"))] {\n+    pub const HANDLE_FLAG_INHERIT: DWORD = 0x00000001;\n+\n     extern \"system\" {\n         #[link_name = \"SystemFunction036\"]\n         pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n+\n+        pub fn SetHandleInformation(hObject: HANDLE,\n+                                    dwMask: DWORD,\n+                                    dwFlags: DWORD) -> BOOL;\n     }\n }\n }\n@@ -772,9 +778,6 @@ extern \"system\" {\n     pub fn GetUserProfileDirectoryW(hToken: HANDLE,\n                                     lpProfileDir: LPWSTR,\n                                     lpcchSize: *mut DWORD) -> BOOL;\n-    pub fn SetHandleInformation(hObject: HANDLE,\n-                                dwMask: DWORD,\n-                                dwFlags: DWORD) -> BOOL;\n     pub fn CopyFileExW(lpExistingFileName: LPCWSTR,\n                        lpNewFileName: LPCWSTR,\n                        lpProgressRoutine: LPPROGRESS_ROUTINE,"}, {"sha": "32f4011fb321942496cadac1c238b6ec8c1fd7e1", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=a713a0399a6e63de1c8009a390ae964ff03f4067", "patch": "@@ -97,12 +97,26 @@ impl Socket {\n         };\n         let socket = unsafe {\n             match c::WSASocketW(fam, ty, 0, ptr::null_mut(), 0,\n-                                c::WSA_FLAG_OVERLAPPED) {\n-                c::INVALID_SOCKET => Err(last_error()),\n+                                c::WSA_FLAG_OVERLAPPED | c::WSA_FLAG_NO_HANDLE_INHERIT) {\n+                c::INVALID_SOCKET => {\n+                    match c::WSAGetLastError() {\n+                        c::WSAEPROTOTYPE => {\n+                            match c::WSASocketW(fam, ty, 0, ptr::null_mut(), 0,\n+                                                c::WSA_FLAG_OVERLAPPED) {\n+                                c::INVALID_SOCKET => Err(last_error()),\n+                                n => {\n+                                    let s = Socket(n);\n+                                    s.set_no_inherit()?;\n+                                    Ok(s)\n+                                },\n+                            }\n+                        },\n+                        n => Err(io::Error::from_raw_os_error(n)),\n+                    }\n+                },\n                 n => Ok(Socket(n)),\n             }\n         }?;\n-        socket.set_no_inherit()?;\n         Ok(socket)\n     }\n \n@@ -168,7 +182,6 @@ impl Socket {\n                 n => Ok(Socket(n)),\n             }\n         }?;\n-        socket.set_no_inherit()?;\n         Ok(socket)\n     }\n \n@@ -178,16 +191,34 @@ impl Socket {\n             cvt(c::WSADuplicateSocketW(self.0,\n                                             c::GetCurrentProcessId(),\n                                             &mut info))?;\n+\n             match c::WSASocketW(info.iAddressFamily,\n                                 info.iSocketType,\n                                 info.iProtocol,\n                                 &mut info, 0,\n-                                c::WSA_FLAG_OVERLAPPED) {\n-                c::INVALID_SOCKET => Err(last_error()),\n+                                c::WSA_FLAG_OVERLAPPED | c::WSA_FLAG_NO_HANDLE_INHERIT) {\n+                c::INVALID_SOCKET => {\n+                    match c::WSAGetLastError() {\n+                        c::WSAEPROTOTYPE => {\n+                            match c::WSASocketW(info.iAddressFamily,\n+                                                info.iSocketType,\n+                                                info.iProtocol,\n+                                                &mut info, 0,\n+                                                c::WSA_FLAG_OVERLAPPED) {\n+                                c::INVALID_SOCKET => Err(last_error()),\n+                                n => {\n+                                    let s = Socket(n);\n+                                    s.set_no_inherit()?;\n+                                    Ok(s)\n+                                },\n+                            }\n+                        },\n+                        n => Err(io::Error::from_raw_os_error(n)),\n+                    }\n+                },\n                 n => Ok(Socket(n)),\n             }\n         }?;\n-        socket.set_no_inherit()?;\n         Ok(socket)\n     }\n \n@@ -312,13 +343,19 @@ impl Socket {\n         }\n     }\n \n+    #[cfg(not(target_vendor = \"uwp\"))]\n     fn set_no_inherit(&self) -> io::Result<()> {\n         sys::cvt(unsafe {\n             c::SetHandleInformation(self.0 as c::HANDLE,\n                                     c::HANDLE_FLAG_INHERIT, 0)\n         }).map(|_| ())\n     }\n \n+    #[cfg(target_vendor = \"uwp\")]\n+    fn set_no_inherit(&self) -> io::Result<()> {\n+        Err(io::Error::new(io::ErrorKind::Other, \"Unavailable on UWP\"))\n+    }\n+\n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n         let how = match how {\n             Shutdown::Write => c::SD_SEND,"}, {"sha": "041d5385eb69b024b12c2902afaf0e63f5fb41d3", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=a713a0399a6e63de1c8009a390ae964ff03f4067", "patch": "@@ -45,7 +45,7 @@ pub struct Pipes {\n /// mode. This means that technically speaking it should only ever be used\n /// with `OVERLAPPED` instances, but also works out ok if it's only ever used\n /// once at a time (which we do indeed guarantee).\n-pub fn anon_pipe(ours_readable: bool) -> io::Result<Pipes> {\n+pub fn anon_pipe(ours_readable: bool, their_handle_inheritable: bool) -> io::Result<Pipes> {\n     // Note that we specifically do *not* use `CreatePipe` here because\n     // unfortunately the anonymous pipes returned do not support overlapped\n     // operations. Instead, we create a \"hopefully unique\" name and create a\n@@ -137,6 +137,13 @@ pub fn anon_pipe(ours_readable: bool) -> io::Result<Pipes> {\n         opts.write(ours_readable);\n         opts.read(!ours_readable);\n         opts.share_mode(0);\n+        let size = mem::size_of::<c::SECURITY_ATTRIBUTES>();\n+        let mut sa = c::SECURITY_ATTRIBUTES {\n+            nLength: size as c::DWORD,\n+            lpSecurityDescriptor: ptr::null_mut(),\n+            bInheritHandle: their_handle_inheritable as i32,\n+        };\n+        opts.security_attributes(&mut sa);\n         let theirs = File::open(Path::new(&name), &opts)?;\n         let theirs = AnonPipe { inner: theirs.into_handle() };\n "}, {"sha": "05e0ca670645334940a9a9ee06698a17203bd626", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a713a0399a6e63de1c8009a390ae964ff03f4067/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=a713a0399a6e63de1c8009a390ae964ff03f4067", "patch": "@@ -267,13 +267,8 @@ impl Stdio {\n \n             Stdio::MakePipe => {\n                 let ours_readable = stdio_id != c::STD_INPUT_HANDLE;\n-                let pipes = pipe::anon_pipe(ours_readable)?;\n+                let pipes = pipe::anon_pipe(ours_readable, true)?;\n                 *pipe = Some(pipes.ours);\n-                cvt(unsafe {\n-                    c::SetHandleInformation(pipes.theirs.handle().raw(),\n-                                            c::HANDLE_FLAG_INHERIT,\n-                                            c::HANDLE_FLAG_INHERIT)\n-                })?;\n                 Ok(pipes.theirs.into_handle())\n             }\n "}]}