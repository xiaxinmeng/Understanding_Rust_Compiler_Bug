{"sha": "0a34a3f0f52cc353bb08efa2005bf92cb7d4921f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMzRhM2YwZjUyY2MzNTNiYjA4ZWZhMjAwNWJmOTJjYjdkNDkyMWY=", "commit": {"author": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2013-01-19T15:52:06Z"}, "committer": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2013-03-19T13:02:59Z"}, "message": "Make driver::driver::parse_cfgspecs parse any variety of meta_item\n\nAll current meta items types (word, name-value, list) are now\nproperly parsed by rustc --cfg command line. Fixes #2399\n\nSigned-off-by: Luca Bruno <lucab@debian.org>", "tree": {"sha": "b99c56738c12f6693b2aa37a3d54d1416c7e1be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99c56738c12f6693b2aa37a3d54d1416c7e1be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f", "html_url": "https://github.com/rust-lang/rust/commit/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f/comments", "author": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67448d397ed8f468170d6fba95ceae081ece624", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67448d397ed8f468170d6fba95ceae081ece624", "html_url": "https://github.com/rust-lang/rust/commit/e67448d397ed8f468170d6fba95ceae081ece624"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "c4db61842a5846ef241d265622c4d5f82635dd89", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=0a34a3f0f52cc353bb08efa2005bf92cb7d4921f", "patch": "@@ -132,15 +132,15 @@ pub fn build_configuration(sess: Session, +argv0: ~str, input: input) ->\n }\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n-pub fn parse_cfgspecs(cfgspecs: ~[~str]) -> ast::crate_cfg {\n-    // FIXME (#2399): It would be nice to use the parser to parse all\n-    // varieties of meta_item here. At the moment we just support the\n-    // meta_word variant.\n-    let mut words = ~[];\n+fn parse_cfgspecs(cfgspecs: ~[~str],\n+                  demitter: diagnostic::Emitter) -> ast::crate_cfg {\n+    let mut meta = ~[];\n     for cfgspecs.each |s| {\n-        words.push(attr::mk_word_item(@/*bad*/copy *s));\n+        let sess = parse::new_parse_sess(Some(demitter));\n+        let m = parse::parse_meta_from_source_str(~\"cfgspec\", @/*bad*/ copy *s, ~[], sess);\n+        meta.push(m)\n     }\n-    return words;\n+    return meta;\n }\n \n pub enum input {\n@@ -639,7 +639,7 @@ pub fn build_session_options(+binary: ~str,\n     let addl_lib_search_paths =\n         getopts::opt_strs(matches, ~\"L\")\n         .map(|s| Path(*s));\n-    let cfg = parse_cfgspecs(getopts::opt_strs(matches, ~\"cfg\"));\n+    let cfg = parse_cfgspecs(getopts::opt_strs(matches, ~\"cfg\"), demitter);\n     let test = opt_present(matches, ~\"test\");\n     let android_cross_path = getopts::opt_maybe_str(\n         matches, ~\"android-cross-path\");"}, {"sha": "a133befb046a7037892e58d462df4b7b269d31a6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a34a3f0f52cc353bb08efa2005bf92cb7d4921f/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0a34a3f0f52cc353bb08efa2005bf92cb7d4921f", "patch": "@@ -139,6 +139,22 @@ pub fn parse_item_from_source_str(\n     maybe_aborted(p.parse_item(attrs),p)\n }\n \n+pub fn parse_meta_from_source_str(\n+    name: ~str,\n+    source: @~str,\n+    +cfg: ast::crate_cfg,\n+    sess: @mut ParseSess\n+) -> @ast::meta_item {\n+    let p = new_parser_from_source_str(\n+        sess,\n+        cfg,\n+        /*bad*/ copy name,\n+        codemap::FssNone,\n+        source\n+    );\n+    maybe_aborted(p.parse_meta_item(),p)\n+}\n+\n pub fn parse_stmt_from_source_str(\n     name: ~str,\n     source: @~str,"}]}