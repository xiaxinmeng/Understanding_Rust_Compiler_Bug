{"sha": "6097b8240b745359f019260278a82406e65f677c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTdiODI0MGI3NDUzNTlmMDE5MjYwMjc4YTgyNDA2ZTY1ZjY3N2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-02-24T21:06:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-24T21:06:25Z"}, "message": "Merge pull request #2479 from gnieto/fix/authorLint\n\nFix author lint", "tree": {"sha": "49c44dd1cee54f0181e6a40031d98bab9fd212ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49c44dd1cee54f0181e6a40031d98bab9fd212ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6097b8240b745359f019260278a82406e65f677c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakdPRCRBK7hj4Ov3rIwAAdHIIAIUVkQvrDqdfTMlslkLW0fuW\ni68d23IZEknpxWd5BXtEPJbMzxhGAp+QVCJMYwC0cQyXGZgyYcmQPecoocI/KEIl\n0XBBe5zrlzp1VvceEPZi53G6X9UZQwc/hcXQ4RN677MbrlvqAji8yiYIap5O7ukz\nLL8RV2EL3mAC7N9r6jiPGzh35UnF3mUFKbpQyVsBRD1QzybNI/DI7dXADPqTnRAZ\ncOVs2QTx2UDkhW7XUCeAclNcIQhLKHZv4+HPi8O1XkEvWTe1WYPg0hiSWz46SdQm\nwOzK8INesCNW4TI9Z3azS2RwXsMRzrJryKNCimOTyHKkd7c07YbgCaKGcWf3e+M=\n=I6Ck\n-----END PGP SIGNATURE-----\n", "payload": "tree 49c44dd1cee54f0181e6a40031d98bab9fd212ce\nparent d5e233a720495c52af25d8f6dcc9e55e1193beb9\nparent 3ac84b2542ec1c4caeab54239c67202113c82ea0\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1519506385 +0100\ncommitter GitHub <noreply@github.com> 1519506385 +0100\n\nMerge pull request #2479 from gnieto/fix/authorLint\n\nFix author lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6097b8240b745359f019260278a82406e65f677c", "html_url": "https://github.com/rust-lang/rust/commit/6097b8240b745359f019260278a82406e65f677c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6097b8240b745359f019260278a82406e65f677c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e233a720495c52af25d8f6dcc9e55e1193beb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e233a720495c52af25d8f6dcc9e55e1193beb9", "html_url": "https://github.com/rust-lang/rust/commit/d5e233a720495c52af25d8f6dcc9e55e1193beb9"}, {"sha": "3ac84b2542ec1c4caeab54239c67202113c82ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac84b2542ec1c4caeab54239c67202113c82ea0", "html_url": "https://github.com/rust-lang/rust/commit/3ac84b2542ec1c4caeab54239c67202113c82ea0"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "beae98f81f6574472d18d5240d271b29dd9702eb", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6097b8240b745359f019260278a82406e65f677c/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6097b8240b745359f019260278a82406e65f677c/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6097b8240b745359f019260278a82406e65f677c", "patch": "@@ -5,10 +5,9 @@\n \n use rustc::lint::*;\n use rustc::hir;\n-use rustc::hir::{Expr, Expr_, QPath};\n+use rustc::hir::{Expr, Expr_, QPath, Ty_};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use syntax::ast::{self, Attribute, LitKind, NodeId, DUMMY_NODE_ID};\n-use syntax::codemap::Span;\n+use syntax::ast::{self, Attribute, LitKind, DUMMY_NODE_ID};\n use std::collections::HashMap;\n \n /// **What it does:** Generates clippy code that detects the offending pattern\n@@ -171,6 +170,12 @@ impl PrintVisitor {\n             },\n         }\n     }\n+\n+    fn print_qpath(&mut self, path: &QPath) {\n+        print!(\"    if match_qpath({}, &[\", self.current);\n+        print_path(path, &mut true);\n+        println!(\"]);\");\n+    }\n }\n \n struct PrintVisitor {\n@@ -260,9 +265,17 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     },\n                 }\n             },\n-            Expr_::ExprCast(ref expr, ref _ty) => {\n+            Expr_::ExprCast(ref expr, ref ty) => {\n                 let cast_pat = self.next(\"expr\");\n-                println!(\"Cast(ref {}, _) = {};\", cast_pat, current);\n+                let cast_ty = self.next(\"cast_ty\");\n+                let qp_label = self.next(\"qp\");\n+\n+                println!(\"Cast(ref {}, ref {}) = {};\", cast_pat, cast_ty, current);\n+                if let Ty_::TyPath(ref qp) = ty.node {\n+                    println!(\"    if let Ty_::TyPath(ref {}) = {}.node;\", qp_label, cast_ty);\n+                    self.current = qp_label;\n+                    self.print_qpath(&qp);\n+                }\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n             },\n@@ -376,7 +389,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 let path_pat = self.next(\"path\");\n                 println!(\"Path(ref {}) = {};\", path_pat, current);\n                 self.current = path_pat;\n-                self.visit_qpath(path, expr.id, expr.span);\n+                self.print_qpath(path);\n             },\n             Expr_::ExprAddrOf(mutability, ref inner) => {\n                 let inner_pat = self.next(\"inner\");\n@@ -431,7 +444,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     println!(\"Struct(ref {}, ref {}, None) = {};\", path_pat, fields_pat, current);\n                 }\n                 self.current = path_pat;\n-                self.visit_qpath(path, expr.id, expr.span);\n+                self.print_qpath(path);\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n                 println!(\"    // unimplemented: field checks\");\n             },\n@@ -446,11 +459,6 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         }\n     }\n \n-    fn visit_qpath(&mut self, path: &QPath, _: NodeId, _: Span) {\n-        print!(\"    if match_qpath({}, &[\", self.current);\n-        print_path(path, &mut true);\n-        println!(\"]);\");\n-    }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }"}, {"sha": "3a819872bc5d14d31651f74edd0ab7df8f1fbbea", "filename": "tests/ui/author.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6097b8240b745359f019260278a82406e65f677c/tests%2Fui%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6097b8240b745359f019260278a82406e65f677c/tests%2Fui%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.rs?ref=6097b8240b745359f019260278a82406e65f677c", "patch": "@@ -0,0 +1,7 @@\n+#![feature(plugin, custom_attribute)]\n+\n+fn main() {\n+\n+    #[clippy(author)]\n+    let x: char = 0x45 as char;\n+}"}, {"sha": "0efb3e8b27274d6bee5e3d0a00f2836c003130f1", "filename": "tests/ui/author.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6097b8240b745359f019260278a82406e65f677c/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6097b8240b745359f019260278a82406e65f677c/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=6097b8240b745359f019260278a82406e65f677c", "patch": "@@ -0,0 +1,10 @@\n+if_chain! {\n+    if let Expr_::ExprCast(ref expr, ref cast_ty) = stmt.node;\n+    if let Ty_::TyPath(ref qp) = cast_ty.node;\n+    if match_qpath(qp, &[\"char\"]);\n+    if let Expr_::ExprLit(ref lit) = expr.node;\n+    if let LitKind::Int(69, _) = lit.node;\n+    then {\n+        // report your lint here\n+    }\n+}"}]}