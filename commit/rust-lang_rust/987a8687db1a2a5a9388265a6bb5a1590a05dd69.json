{"sha": "987a8687db1a2a5a9388265a6bb5a1590a05dd69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4N2E4Njg3ZGIxYTJhNWE5Mzg4MjY1YTZiYjVhMTU5MGEwNWRkNjk=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-07T16:33:20Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-07T16:33:20Z"}, "message": "split out and rework drop flags section", "tree": {"sha": "f89ee33227f1392d68bc97f42d384ab9d695665d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f89ee33227f1392d68bc97f42d384ab9d695665d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/987a8687db1a2a5a9388265a6bb5a1590a05dd69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/987a8687db1a2a5a9388265a6bb5a1590a05dd69", "html_url": "https://github.com/rust-lang/rust/commit/987a8687db1a2a5a9388265a6bb5a1590a05dd69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/987a8687db1a2a5a9388265a6bb5a1590a05dd69/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b8001f684399992978c60fcb3d51232b3ca85d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b8001f684399992978c60fcb3d51232b3ca85d", "html_url": "https://github.com/rust-lang/rust/commit/35b8001f684399992978c60fcb3d51232b3ca85d"}], "stats": {"total": 103, "additions": 79, "deletions": 24}, "files": [{"sha": "3b5a04c5a3eb702712532d03788fea03b8ee1831", "filename": "SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/987a8687db1a2a5a9388265a6bb5a1590a05dd69/SUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/987a8687db1a2a5a9388265a6bb5a1590a05dd69/SUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/SUMMARY.md?ref=987a8687db1a2a5a9388265a6bb5a1590a05dd69", "patch": "@@ -23,6 +23,7 @@\n \t* [Transmutes](transmutes.md)\n * [Uninitialized Memory](uninitialized.md)\n \t* [Checked](checked-uninit.md)\n+\t* [Drop Flags](drop-flags.md)\n \t* [Unchecked](unchecked-uninit.md)\n * [Ownership-Oriented Resource Management](raii.md)\n \t* [Constructors](constructors.md)"}, {"sha": "8896fc9de0199d22169c288c942182db585799f5", "filename": "checked-uninit.md", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/987a8687db1a2a5a9388265a6bb5a1590a05dd69/checked-uninit.md", "raw_url": "https://github.com/rust-lang/rust/raw/987a8687db1a2a5a9388265a6bb5a1590a05dd69/checked-uninit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/checked-uninit.md?ref=987a8687db1a2a5a9388265a6bb5a1590a05dd69", "patch": "@@ -83,27 +83,3 @@ fn main() {\n However reassigning `y` in this example *would* require `y` to be marked as\n mutable, as a Safe Rust program could observe that the value of `y` changed.\n Otherwise the variable is exactly like new.\n-\n-This raises an interesting question with respect to `Drop`: where does Rust try\n-to call the destructor of a variable that is conditionally initialized? It turns\n-out that Rust actually tracks whether a type should be dropped or not *at\n-runtime*. As a variable becomes initialized and uninitialized, a *drop flag* for\n-that variable is set and unset. When a variable goes out of scope or is assigned\n-a value, it evaluates whether the current value of the variable should be dropped.\n-Of course, static analysis can remove these checks. If the compiler can prove that\n-a value is guaranteed to be either initialized or not, then it can theoretically\n-generate more efficient code! As such it may be desirable to structure code to\n-have *static drop semantics* when possible.\n-\n-As of Rust 1.0, the drop flags are actually not-so-secretly stashed in a hidden\n-field of any type that implements Drop. The language sets the drop flag by\n-overwriting the entire struct with a particular value. This is pretty obviously\n-Not The Fastest and causes a bunch of trouble with optimizing code. As such work\n-is currently under way to move the flags out onto the stack frame where they\n-more reasonably belong. Unfortunately this work will take some time as it\n-requires fairly substantial changes to the compiler.\n-\n-So in general, Rust programs don't need to worry about uninitialized values on\n-the stack for correctness. Although they might care for performance. Thankfully,\n-Rust makes it easy to take control here! Uninitialized values are there, and\n-Safe Rust lets you work with them, but you're never in danger."}, {"sha": "2d5bae6dcfe9c7729eb35b5777aa871f66c662a2", "filename": "drop-flags.md", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/987a8687db1a2a5a9388265a6bb5a1590a05dd69/drop-flags.md", "raw_url": "https://github.com/rust-lang/rust/raw/987a8687db1a2a5a9388265a6bb5a1590a05dd69/drop-flags.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/drop-flags.md?ref=987a8687db1a2a5a9388265a6bb5a1590a05dd69", "patch": "@@ -0,0 +1,78 @@\n+% Drop Flags\n+\n+The examples in the previous section introduce an interesting problem for Rust.\n+We have seen that's possible to conditionally initialize, deinitialize, and\n+*reinitialize* locations of memory totally safely. For Copy types, this isn't\n+particularly notable since they're just a random pile of bits. However types with\n+destructors are a different story: Rust needs to know whether to call a destructor\n+whenever a variable is assigned to, or a variable goes out of scope. How can it\n+do this with conditional initialization?\n+\n+It turns out that Rust actually tracks whether a type should be dropped or not *at\n+runtime*. As a variable becomes initialized and uninitialized, a *drop flag* for\n+that variable is toggled. When a variable *might* need to be dropped, this flag\n+is evaluated to determine if it *should* be dropped.\n+\n+Of course, it is *often* the case that a value's initialization state can be\n+*statically* known at every point in the program. If this is the case, then the\n+compiler can theoretically generate more effecient code! For instance,\n+straight-line code has such *static drop semantics*:\n+\n+```rust\n+let mut x = Box::new(0); // x was uninit\n+let mut y = x;\t\t\t // y was uninit\n+x = Box::new(0);\t \t // x was uninit\n+y = x;\t\t\t\t \t // y was init; Drop y!\n+\t\t\t\t     \t // y was init; Drop y!\n+\t\t\t\t     \t // x was uninit\n+```\n+\n+And even branched code where all branches have the same behaviour with respect\n+to initialization:\n+\n+```rust\n+let mut x = Box::new(0);\t// x was uninit\n+if condition {\n+\tdrop(x)\t\t\t\t\t// x gets moved out\n+} else {\n+\tprintln!(\"{}\", x);\n+\tdrop(x)\t\t\t\t\t// x gets moved out\n+}\n+x = Box::new(0);\t\t\t// x was uninit\n+\t\t\t\t\t\t\t// x was init; Drop x!\n+```\n+\n+However code like this *requires* runtime information to correctly Drop:\n+\n+```rust\n+let x;\n+if condition {\n+\tx = Box::new(0);\t\t// x was uninit\n+\tprintln!(\"{}\", x);\n+}\n+\t\t\t\t\t\t\t// x might be uninit; check the flag!\n+```\n+\n+Of course, in this case it's trivial to retrieve static drop semantics:\n+\n+```rust\n+if condition {\n+\tlet x = Box::new(0);\n+\tprintln!(\"{}\", x);\n+}\n+```\n+\n+As of Rust 1.0, the drop flags are actually not-so-secretly stashed in a hidden\n+field of any type that implements Drop. Rust sets the drop flag by\n+overwriting the *entire* value with a particular byte. This is pretty obviously\n+Not The Fastest and causes a bunch of trouble with optimizing code. It's legacy\n+from a time when you could do much more complex conditional initialization.\n+\n+As such work is currently under way to move the flags out onto the stack frame\n+where they more reasonably belong. Unfortunately, this work will take some time\n+as it requires fairly substantial changes to the compiler.\n+\n+Regardless, Rust programs don't need to worry about uninitialized values on\n+the stack for correctness. Although they might care for performance. Thankfully,\n+Rust makes it easy to take control here! Uninitialized values are there, and\n+you can work with them in Safe Rust, but you're *never* in danger.\n\\ No newline at end of file"}]}