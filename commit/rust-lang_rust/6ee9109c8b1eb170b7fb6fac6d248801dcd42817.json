{"sha": "6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZTkxMDljOGIxZWIxNzBiN2ZiNmZhYzZkMjQ4ODAxZGNkNDI4MTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-24T00:13:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-25T08:18:10Z"}, "message": "rustdoc: Inline argument names of foreign methods", "tree": {"sha": "82dfdb129409c598bf45c6fc16bf2aeb8b627537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82dfdb129409c598bf45c6fc16bf2aeb8b627537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "html_url": "https://github.com/rust-lang/rust/commit/6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec4f79ff6c997b4144a59fbfb145933c1e3ff593", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4f79ff6c997b4144a59fbfb145933c1e3ff593", "html_url": "https://github.com/rust-lang/rust/commit/ec4f79ff6c997b4144a59fbfb145933c1e3ff593"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "c798118bbd0fa7d66275b7d33cb16f21ffb782a0", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "patch": "@@ -206,6 +206,9 @@ pub static tag_crate_triple: uint = 0x66;\n \n pub static tag_dylib_dependency_formats: uint = 0x67;\n \n+pub static tag_method_argument_names: uint = 0x8e;\n+pub static tag_method_argument_name: uint = 0x8f;\n+\n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n     pub crateid: CrateId,"}, {"sha": "d7f603d19092d496d3a963732471297fb34054df", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "patch": "@@ -306,3 +306,10 @@ pub fn get_missing_lang_items(cstore: &cstore::CStore, cnum: ast::CrateNum)\n     let cdata = cstore.get_crate_data(cnum);\n     decoder::get_missing_lang_items(&*cdata)\n }\n+\n+pub fn get_method_arg_names(cstore: &cstore::CStore, did: ast::DefId)\n+    -> Vec<StrBuf>\n+{\n+    let cdata = cstore.get_crate_data(did.krate);\n+    decoder::get_method_arg_names(&*cdata, did.node)\n+}"}, {"sha": "26149785653fd87b8af358ba05f989875d0c849f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "patch": "@@ -1309,3 +1309,18 @@ pub fn get_missing_lang_items(cdata: Cmd)\n     });\n     return result;\n }\n+\n+pub fn get_method_arg_names(cdata: Cmd, id: ast::NodeId) -> Vec<StrBuf> {\n+    let mut ret = Vec::new();\n+    let method_doc = lookup_item(id, cdata.data());\n+    match reader::maybe_get_doc(method_doc, tag_method_argument_names) {\n+        Some(args_doc) => {\n+            reader::tagged_docs(args_doc, tag_method_argument_name, |name_doc| {\n+                ret.push(name_doc.as_str_slice().to_strbuf());\n+                true\n+            });\n+        }\n+        None => {}\n+    }\n+    return ret;\n+}"}, {"sha": "941977f6d16e7c15abeb3d05ae1c2daa856a2fb6", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "patch": "@@ -774,6 +774,21 @@ fn encode_info_for_method(ecx: &EncodeContext,\n         } else {\n             encode_symbol(ecx, ebml_w, m.def_id.node);\n         }\n+\n+        ebml_w.start_tag(tag_method_argument_names);\n+        for arg in ast_method.decl.inputs.iter() {\n+            ebml_w.start_tag(tag_method_argument_name);\n+            match arg.pat.node {\n+                ast::PatIdent(_, ref name, _) => {\n+                    let name = name.segments.last().unwrap().identifier;\n+                    let name = token::get_ident(name);\n+                    ebml_w.writer.write(name.get().as_bytes());\n+                }\n+                _ => {}\n+            }\n+            ebml_w.end_tag();\n+        }\n+        ebml_w.end_tag();\n     }\n \n     ebml_w.end_tag();"}, {"sha": "6e3186eda4c7ee97335a7d3125ae5c4edeb654db", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee9109c8b1eb170b7fb6fac6d248801dcd42817/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=6ee9109c8b1eb170b7fb6fac6d248801dcd42817", "patch": "@@ -488,7 +488,7 @@ impl Clean<Option<Vec<TyParamBound>>> for ty::substs {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, Encodable, Decodable, Eq)]\n pub struct Lifetime(String);\n \n impl Lifetime {\n@@ -629,7 +629,7 @@ impl Clean<Item> for ast::TypeMethod {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, Encodable, Decodable, Eq)]\n pub enum SelfTy {\n     SelfStatic,\n     SelfValue,\n@@ -868,6 +868,16 @@ impl Clean<TraitMethod> for ty::Method {\n                 (s, sig)\n             }\n         };\n+        let mut names = csearch::get_method_arg_names(&tcx.sess.cstore,\n+                                                      self.def_id).move_iter();\n+        if self_ != SelfStatic {\n+            names.next();\n+        }\n+        let mut decl = sig.clean();\n+        for (name, slot) in names.zip(decl.inputs.values.mut_iter()) {\n+            slot.name = name;\n+        }\n+\n         m(Item {\n             name: Some(self.ident.clean()),\n             visibility: Some(ast::Inherited),\n@@ -878,7 +888,7 @@ impl Clean<TraitMethod> for ty::Method {\n                 fn_style: self.fty.fn_style,\n                 generics: self.generics.clean(),\n                 self_: self_,\n-                decl: sig.clean(),\n+                decl: decl,\n             })\n         })\n     }\n@@ -1437,7 +1447,7 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n-#[deriving(Show, Clone, Encodable, Decodable)]\n+#[deriving(Show, Clone, Encodable, Decodable, Eq)]\n pub enum Mutability {\n     Mutable,\n     Immutable,"}]}