{"sha": "6bfdf37250155afa872f7cbbde745e0b050e4f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZmRmMzcyNTAxNTVhZmE4NzJmN2NiYmRlNzQ1ZTBiMDUwZTRmM2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-30T20:53:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-01T14:43:07Z"}, "message": "remove code for re-exports of static methods", "tree": {"sha": "c265414b216e33f1d85d4d258c205b4bcbc655cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c265414b216e33f1d85d4d258c205b4bcbc655cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bfdf37250155afa872f7cbbde745e0b050e4f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfdf37250155afa872f7cbbde745e0b050e4f3a", "html_url": "https://github.com/rust-lang/rust/commit/6bfdf37250155afa872f7cbbde745e0b050e4f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bfdf37250155afa872f7cbbde745e0b050e4f3a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52a02832b8d97226eae9f3baac671dc5b562d332", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a02832b8d97226eae9f3baac671dc5b562d332", "html_url": "https://github.com/rust-lang/rust/commit/52a02832b8d97226eae9f3baac671dc5b562d332"}], "stats": {"total": 122, "additions": 3, "deletions": 119}, "files": [{"sha": "1511ea2bc07dbd7e7163001cc710cf6203817ac2", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 119, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/6bfdf37250155afa872f7cbbde745e0b050e4f3a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfdf37250155afa872f7cbbde745e0b050e4f3a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=6bfdf37250155afa872f7cbbde745e0b050e4f3a", "patch": "@@ -366,120 +366,6 @@ fn encode_path<PI: Iterator<Item=PathElem>>(rbml_w: &mut Encoder, path: PI) {\n     rbml_w.end_tag();\n }\n \n-fn encode_reexported_static_method(rbml_w: &mut Encoder,\n-                                   exp: &def::Export,\n-                                   method_def_id: DefId,\n-                                   method_name: Name) {\n-    debug!(\"(encode reexported static method) {}::{}\",\n-            exp.name, method_name);\n-    rbml_w.start_tag(tag_items_data_item_reexport);\n-    rbml_w.wr_tagged_u64(tag_items_data_item_reexport_def_id,\n-                         def_to_u64(method_def_id));\n-    rbml_w.wr_tagged_str(tag_items_data_item_reexport_name,\n-                         &format!(\"{}::{}\", exp.name,\n-                                            method_name));\n-    rbml_w.end_tag();\n-}\n-\n-fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n-                                         rbml_w: &mut Encoder,\n-                                         exp: &def::Export)\n-                                         -> bool {\n-    let impl_items = ecx.tcx.impl_items.borrow();\n-    match ecx.tcx.inherent_impls.borrow().get(&exp.def_id) {\n-        Some(implementations) => {\n-            for base_impl_did in implementations.iter() {\n-                for &method_did in impl_items.get(base_impl_did).unwrap() {\n-                    let impl_item = ecx.tcx.impl_or_trait_item(method_did.def_id());\n-                    if let ty::MethodTraitItem(ref m) = impl_item {\n-                        encode_reexported_static_method(rbml_w,\n-                                                        exp,\n-                                                        m.def_id,\n-                                                        m.name);\n-                    }\n-                }\n-            }\n-\n-            true\n-        }\n-        None => { false }\n-    }\n-}\n-\n-fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n-                                          rbml_w: &mut Encoder,\n-                                          exp: &def::Export)\n-                                          -> bool {\n-    match ecx.tcx.trait_items_cache.borrow().get(&exp.def_id) {\n-        Some(trait_items) => {\n-            for trait_item in trait_items.iter() {\n-                if let ty::MethodTraitItem(ref m) = *trait_item {\n-                    encode_reexported_static_method(rbml_w,\n-                                                    exp,\n-                                                    m.def_id,\n-                                                    m.name);\n-                }\n-            }\n-            true\n-        }\n-        None => { false }\n-    }\n-}\n-\n-fn encode_reexported_static_methods(ecx: &EncodeContext,\n-                                    rbml_w: &mut Encoder,\n-                                    mod_path: PathElems,\n-                                    exp: &def::Export) {\n-    let exp_node_id = if let Some(n) = ecx.tcx.map.as_local_node_id(exp.def_id) {\n-        n\n-    } else {\n-        // Before the refactor that introducd `as_local_node_id`, we\n-        // were just extracting the node and checking into the\n-        // ast-map. Since the node might have been from another crate,\n-        // this was a tenuous thing to do at best. Anyway, I'm not\n-        // 100% clear on why it's ok to ignore things from other\n-        // crates, but it seems to be what we were doing pre-refactor.\n-        // -nmatsakis\n-        return;\n-    };\n-\n-    if let Some(ast_map::NodeItem(item)) = ecx.tcx.map.find(exp_node_id) {\n-        let path_differs = ecx.tcx.map.with_path(exp_node_id, |path| {\n-            let (mut a, mut b) = (path, mod_path.clone());\n-            loop {\n-                match (a.next(), b.next()) {\n-                    (None, None) => return true,\n-                    (None, _) | (_, None) => return false,\n-                    (Some(x), Some(y)) => if x != y { return false },\n-                }\n-            }\n-        });\n-\n-        //\n-        // We don't need to reexport static methods on items\n-        // declared in the same module as our `pub use ...` since\n-        // that's done when we encode the item itself.\n-        //\n-        // The only exception is when the reexport *changes* the\n-        // name e.g. `pub use Foo = self::Bar` -- we have\n-        // encoded metadata for static methods relative to Bar,\n-        // but not yet for Foo.\n-        //\n-        if path_differs || item.name != exp.name {\n-            if !encode_reexported_static_base_methods(ecx, rbml_w, exp) {\n-                if encode_reexported_static_trait_methods(ecx, rbml_w, exp) {\n-                    debug!(\"(encode reexported static methods) {} [trait]\",\n-                           item.name);\n-                }\n-            }\n-            else {\n-                debug!(\"(encode reexported static methods) {} [base]\",\n-                       item.name);\n-            }\n-        }\n-    }\n-}\n-\n /// Iterates through \"auxiliary node IDs\", which are node IDs that describe\n /// top-level items that are sub-items of the given item. Specifically:\n ///\n@@ -507,8 +393,7 @@ fn each_auxiliary_node_id<F>(item: &hir::Item, callback: F) -> bool where\n \n fn encode_reexports(ecx: &EncodeContext,\n                     rbml_w: &mut Encoder,\n-                    id: NodeId,\n-                    path: PathElems) {\n+                    id: NodeId) {\n     debug!(\"(encoding info for module) encoding reexports for {}\", id);\n     match ecx.reexports.get(&id) {\n         Some(exports) => {\n@@ -525,7 +410,6 @@ fn encode_reexports(ecx: &EncodeContext,\n                 rbml_w.wr_tagged_str(tag_items_data_item_reexport_name,\n                                      &exp.name.as_str());\n                 rbml_w.end_tag();\n-                encode_reexported_static_methods(ecx, rbml_w, path.clone(), exp);\n             }\n         },\n         None => debug!(\"(encoding info for module) found no reexports for {}\", id),\n@@ -576,7 +460,7 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n     // Encode the reexports of this module, if this module is public.\n     if vis == hir::Public {\n         debug!(\"(encoding info for module) encoding reexports for {}\", id);\n-        encode_reexports(ecx, rbml_w, id, path);\n+        encode_reexports(ecx, rbml_w, id);\n     }\n     encode_attributes(rbml_w, attrs);\n \n@@ -1930,7 +1814,7 @@ fn encode_misc_info(ecx: &EncodeContext,\n     }\n \n     // Encode reexports for the root module.\n-    encode_reexports(ecx, rbml_w, 0, [].iter().cloned().chain(LinkedPath::empty()));\n+    encode_reexports(ecx, rbml_w, 0);\n \n     rbml_w.end_tag();\n     rbml_w.end_tag();"}]}