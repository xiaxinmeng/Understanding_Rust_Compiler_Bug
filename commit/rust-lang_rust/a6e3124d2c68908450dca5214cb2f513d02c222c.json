{"sha": "a6e3124d2c68908450dca5214cb2f513d02c222c", "node_id": "C_kwDOAAsO6NoAKGE2ZTMxMjRkMmM2ODkwODQ1MGRjYTUyMTRjYjJmNTEzZDAyYzIyMmM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-13T09:54:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-23T07:57:00Z"}, "message": "Drop vis in ImplItem.", "tree": {"sha": "2520c66ad7747eb4b38962c79139628784a61268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2520c66ad7747eb4b38962c79139628784a61268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6e3124d2c68908450dca5214cb2f513d02c222c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e3124d2c68908450dca5214cb2f513d02c222c", "html_url": "https://github.com/rust-lang/rust/commit/a6e3124d2c68908450dca5214cb2f513d02c222c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6e3124d2c68908450dca5214cb2f513d02c222c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2827007d32eea22940d6467f0fab8fe0677eeeb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2827007d32eea22940d6467f0fab8fe0677eeeb3", "html_url": "https://github.com/rust-lang/rust/commit/2827007d32eea22940d6467f0fab8fe0677eeeb3"}], "stats": {"total": 52, "additions": 16, "deletions": 36}, "files": [{"sha": "e1b3f54c33217fc81d410753ba5351aa398f4ffd", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a6e3124d2c68908450dca5214cb2f513d02c222c", "patch": "@@ -1016,8 +1016,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             def_id: hir_id.expect_owner(),\n             ident: self.lower_ident(i.ident),\n             generics,\n-            vis: self.lower_visibility(&i.vis),\n             kind,\n+            vis_span: self.lower_span(i.vis.span),\n             span: self.lower_span(i.span),\n         };\n         self.arena.alloc(item)"}, {"sha": "442d6cf9eb29647c4e28e3bd0fe8c02f692d5ab6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a6e3124d2c68908450dca5214cb2f513d02c222c", "patch": "@@ -2140,10 +2140,10 @@ impl ImplItemId {\n pub struct ImplItem<'hir> {\n     pub ident: Ident,\n     pub def_id: LocalDefId,\n-    pub vis: Visibility<'hir>,\n     pub generics: Generics<'hir>,\n     pub kind: ImplItemKind<'hir>,\n     pub span: Span,\n+    pub vis_span: Span,\n }\n \n impl ImplItem<'_> {\n@@ -3350,6 +3350,6 @@ mod size_asserts {\n \n     rustc_data_structures::static_assert_size!(super::Item<'static>, 184);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);\n-    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 144);\n+    rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 120);\n     rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 112);\n }"}, {"sha": "59bd46ae353b2f23611d087d0ba11de57ec68614", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a6e3124d2c68908450dca5214cb2f513d02c222c", "patch": "@@ -1020,7 +1020,7 @@ pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref:\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItem { def_id: _, ident, ref generics, ref kind, span: _, vis: _ } = *impl_item;\n+    let ImplItem { def_id: _, ident, ref generics, ref kind, span: _, vis_span: _ } = *impl_item;\n \n     visitor.visit_ident(ident);\n     visitor.visit_generics(generics);"}, {"sha": "cde7062e16e0d46845114f2ba687becfc015d443", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a6e3124d2c68908450dca5214cb2f513d02c222c", "patch": "@@ -1439,7 +1439,7 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n         if cx.tcx.visibility(impl_item.def_id).is_public() {\n-            self.perform_lint(cx, \"item\", impl_item.def_id, impl_item.vis.span, false);\n+            self.perform_lint(cx, \"item\", impl_item.def_id, impl_item.vis_span, false);\n         }\n     }\n }"}, {"sha": "4dcbd926863d5a5d1866e33cbb1b5b28f86d3d36", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a6e3124d2c68908450dca5214cb2f513d02c222c", "patch": "@@ -1363,8 +1363,8 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {\n-        self.access_levels.is_reachable(def_id) || vis.node.is_pub()\n+    fn item_is_public(&self, def_id: LocalDefId) -> bool {\n+        self.access_levels.is_reachable(def_id) || self.tcx.visibility(def_id).is_public()\n     }\n }\n \n@@ -1499,8 +1499,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                                 match impl_item.kind {\n                                     hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)\n-                                        if self\n-                                            .item_is_public(impl_item.def_id, &impl_item.vis) =>\n+                                        if self.item_is_public(impl_item.def_id) =>\n                                     {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n@@ -1571,7 +1570,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n             hir::ItemKind::TyAlias(..) => return,\n \n             // Not at all public, so we don't care.\n-            _ if !self.item_is_public(item.def_id, &item.vis) => {\n+            _ if !self.item_is_public(item.def_id) => {\n                 return;\n             }\n "}, {"sha": "6681ea9d299cf057c69b0090b03de10541a45f4a", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e3124d2c68908450dca5214cb2f513d02c222c/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=a6e3124d2c68908450dca5214cb2f513d02c222c", "patch": "@@ -25,7 +25,6 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::config::Input;\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n use rustc_span::*;\n \n@@ -65,12 +64,6 @@ macro_rules! access_from {\n     };\n }\n \n-macro_rules! access_from_vis {\n-    ($save_ctxt:expr, $vis:expr, $id:expr) => {\n-        Access { public: $vis.node.is_pub(), reachable: $save_ctxt.access_levels.is_reachable($id) }\n-    };\n-}\n-\n pub struct DumpVisitor<'tcx> {\n     pub save_ctxt: SaveContext<'tcx>,\n     tcx: TyCtxt<'tcx>,\n@@ -257,7 +250,6 @@ impl<'tcx> DumpVisitor<'tcx> {\n         def_id: LocalDefId,\n         ident: Ident,\n         generics: &'tcx hir::Generics<'tcx>,\n-        vis: &hir::Visibility<'tcx>,\n         span: Span,\n     ) {\n         debug!(\"process_method: {:?}:{}\", def_id, ident);\n@@ -275,7 +267,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     fn_to_string(sig.decl, sig.header, Some(ident.name), generics, &[], None);\n                 method_data.sig = sig::method_signature(hir_id, ident, generics, sig, &v.save_ctxt);\n \n-                v.dumper.dump_def(&access_from_vis!(v.save_ctxt, vis, def_id), method_data);\n+                v.dumper.dump_def(&access_from!(v.save_ctxt, def_id), method_data);\n             }\n \n             // walk arg and return types\n@@ -407,7 +399,6 @@ impl<'tcx> DumpVisitor<'tcx> {\n         typ: &'tcx hir::Ty<'tcx>,\n         expr: Option<&'tcx hir::Expr<'tcx>>,\n         parent_id: DefId,\n-        vis: &hir::Visibility<'tcx>,\n         attrs: &'tcx [ast::Attribute],\n     ) {\n         let qualname = format!(\"::{}\", self.tcx.def_path_str(def_id.to_def_id()));\n@@ -418,7 +409,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             let span = self.span_from_span(ident.span);\n \n             self.dumper.dump_def(\n-                &access_from_vis!(self.save_ctxt, vis, def_id),\n+                &access_from!(self.save_ctxt, def_id),\n                 Def {\n                     kind: DefKind::Const,\n                     id: id_from_hir_id(hir_id, &self.save_ctxt),\n@@ -983,33 +974,28 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n     fn process_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>, trait_id: DefId) {\n         self.process_macro_use(trait_item.span);\n-        let vis_span = trait_item.span.shrink_to_lo();\n         match trait_item.kind {\n             hir::TraitItemKind::Const(ref ty, body) => {\n                 let body = body.map(|b| &self.tcx.hir().body(b).value);\n-                let respan = respan(vis_span, hir::VisibilityKind::Public);\n                 let attrs = self.tcx.hir().attrs(trait_item.hir_id());\n                 self.process_assoc_const(\n                     trait_item.def_id,\n                     trait_item.ident,\n                     &ty,\n                     body,\n                     trait_id,\n-                    &respan,\n                     attrs,\n                 );\n             }\n             hir::TraitItemKind::Fn(ref sig, ref trait_fn) => {\n                 let body =\n                     if let hir::TraitFn::Provided(body) = trait_fn { Some(*body) } else { None };\n-                let respan = respan(vis_span, hir::VisibilityKind::Public);\n                 self.process_method(\n                     sig,\n                     body,\n                     trait_item.def_id,\n                     trait_item.ident,\n                     &trait_item.generics,\n-                    &respan,\n                     trait_item.span,\n                 );\n             }\n@@ -1068,7 +1054,6 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     &ty,\n                     Some(&body.value),\n                     impl_id,\n-                    &impl_item.vis,\n                     attrs,\n                 );\n             }\n@@ -1079,7 +1064,6 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     impl_item.def_id,\n                     impl_item.ident,\n                     &impl_item.generics,\n-                    &impl_item.vis,\n                     impl_item.span,\n                 );\n             }"}, {"sha": "dd94a8d64901773f951babdd53060c42d83571c2", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6e3124d2c68908450dca5214cb2f513d02c222c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e3124d2c68908450dca5214cb2f513d02c222c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a6e3124d2c68908450dca5214cb2f513d02c222c", "patch": "@@ -4,6 +4,7 @@ use clippy_utils::get_attr;\n use rustc_ast::ast::{Attribute, InlineAsmTemplatePiece};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::ty;\n use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -45,14 +46,10 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n             return;\n         }\n         println!(\"impl item `{}`\", item.ident.name);\n-        match item.vis.node {\n-            hir::VisibilityKind::Public => println!(\"public\"),\n-            hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n-            hir::VisibilityKind::Restricted { path, .. } => println!(\n-                \"visible in module `{}`\",\n-                rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(path, false))\n-            ),\n-            hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n+        match cx.tcx.visibility(item.def_id) {\n+            ty::Visibility::Public => println!(\"public\"),\n+            ty::Visibility::Restricted(def_id) => println!(\"visible in module `{}`\", cx.tcx.def_path_str(def_id)),\n+            ty::Visibility::Invisible => println!(\"invisible\"),\n         }\n         match item.kind {\n             hir::ImplItemKind::Const(_, body_id) => {"}]}