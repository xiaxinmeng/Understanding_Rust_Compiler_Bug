{"sha": "e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "node_id": "C_kwDOAAsO6NoAKGUzZWI2YTg3YmYwNDQ5MjVjOWZhZjcyYTJiOTczN2IwYzdlMmM3NmI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-08T10:41:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-08T10:41:48Z"}, "message": "Rollup merge of #105354 - BlackHoleFox:apple-deployment-printer, r=oli-obk\n\nAdd deployment-target --print flag for Apple targets\n\nThis is very useful for crates that need to know what the Apple OS deployment target is for their build scripts or inside of a build environment. Right now, the defaults just get copy/pasted around the ecosystem since they've been stable for so long. But with #104385 in progress, that won't be true anymore and everything will need to move. Ideally whenever it happens again, this could be less painful as everything can ask the compiler what its default is instead.\n\nTo show examples of the copy/paste proliferation, here's some crates and/or apps that do:\n- [cc](https://github.com/rust-lang/cc-rs/pull/708/files), Soon\n-  [mac-notification-sys](https://github.com/h4llow3En/mac-notification-sys/pull/46/files#diff-d0d98998092552a1d3259338c2c71e118a5b8343dd4703c0c7f552ada7f9cb42R10-R12)\n- [PyO3](https://github.com/PyO3/maturin/blob/ccb02d1aa1cc41e82a3572a3c8b35cace15f3e78/src/target.rs#L755-L758)\n- [Anki](https://github.com/ankitects/anki/blob/613b5c1034cc9943f3f68d818ae22b2e0acec877/build/runner/src/bundle/artifacts.rs#L49-L54)\n- [jsc-rs](https://github.com/Brooooooklyn/jsc-rs/blob/37767267568fb2de62fc441473e7d158dd980520/xtask/src/build.rs#L402-L405)\n... and probably more that a simple GitHub codesearch didn't see", "tree": {"sha": "5740ffac225a4d4dbbf28508759c2204428bc32c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5740ffac225a4d4dbbf28508759c2204428bc32c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWNHsCRBK7hj4Ov3rIwAAm0kIABUuNamXbKfR/eTn8PLhNPy2\n96RbLRF27H+tCveIYC2+Mv0yM9gX80LSVJrTxRKn7+vprfDpVpbyeFT1AInmBZW8\nF7CWTlSc5sqn9WQl38NjPdkMm2mR7D1IAqWPhD+xFX+ZawU6XvsAQQx4V8b0U6yv\nqF8GBJQ0cNYEKrgAM4Eb1x5OsoxTLCBI3wUE188jr0AHA+vryFT4MkWvn/+MnxqC\nYdVGo2Tc0/Fv4tI9YG+yK3MTSQo7Llhh1VIrIAdaEI0CTFhWaXPpdq+Z2z2VHpFC\nKV3aJGgiK0hwzD9W1ZfV2EATqpNIiJUyf39XgtpYC81GNcycOmq9j2WIk9/mrfQ=\n=q0M9\n-----END PGP SIGNATURE-----\n", "payload": "tree 5740ffac225a4d4dbbf28508759c2204428bc32c\nparent c86e7fb60f5343041fd0c27d4affaf3261115666\nparent a427d418fd0004f12a7d59899e6994238daed9aa\nauthor Yuki Okushi <jtitor@2k36.org> 1683542508 +0900\ncommitter GitHub <noreply@github.com> 1683542508 +0900\n\nRollup merge of #105354 - BlackHoleFox:apple-deployment-printer, r=oli-obk\n\nAdd deployment-target --print flag for Apple targets\n\nThis is very useful for crates that need to know what the Apple OS deployment target is for their build scripts or inside of a build environment. Right now, the defaults just get copy/pasted around the ecosystem since they've been stable for so long. But with #104385 in progress, that won't be true anymore and everything will need to move. Ideally whenever it happens again, this could be less painful as everything can ask the compiler what its default is instead.\n\nTo show examples of the copy/paste proliferation, here's some crates and/or apps that do:\n- [cc](https://github.com/rust-lang/cc-rs/pull/708/files), Soon\n-  [mac-notification-sys](https://github.com/h4llow3En/mac-notification-sys/pull/46/files#diff-d0d98998092552a1d3259338c2c71e118a5b8343dd4703c0c7f552ada7f9cb42R10-R12)\n- [PyO3](https://github.com/PyO3/maturin/blob/ccb02d1aa1cc41e82a3572a3c8b35cace15f3e78/src/target.rs#L755-L758)\n- [Anki](https://github.com/ankitects/anki/blob/613b5c1034cc9943f3f68d818ae22b2e0acec877/build/runner/src/bundle/artifacts.rs#L49-L54)\n- [jsc-rs](https://github.com/Brooooooklyn/jsc-rs/blob/37767267568fb2de62fc441473e7d158dd980520/xtask/src/build.rs#L402-L405)\n... and probably more that a simple GitHub codesearch didn't see\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "html_url": "https://github.com/rust-lang/rust/commit/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86e7fb60f5343041fd0c27d4affaf3261115666", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86e7fb60f5343041fd0c27d4affaf3261115666", "html_url": "https://github.com/rust-lang/rust/commit/c86e7fb60f5343041fd0c27d4affaf3261115666"}, {"sha": "a427d418fd0004f12a7d59899e6994238daed9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a427d418fd0004f12a7d59899e6994238daed9aa", "html_url": "https://github.com/rust-lang/rust/commit/a427d418fd0004f12a7d59899e6994238daed9aa"}], "stats": {"total": 87, "additions": 73, "deletions": 14}, "files": [{"sha": "446e29199c6266d495203559dad09f93b6b16b09", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -745,6 +745,22 @@ fn print_crate_info(\n                     }\n                 }\n             }\n+            DeploymentTarget => {\n+                use rustc_target::spec::current_apple_deployment_target;\n+\n+                if sess.target.is_like_osx {\n+                    safe_println!(\n+                        \"deployment_target={}\",\n+                        current_apple_deployment_target(&sess.target)\n+                            .expect(\"unknown Apple target OS\")\n+                    )\n+                } else {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        \"only Apple targets currently support deployment version info\",\n+                    )\n+                }\n+            }\n         }\n     }\n     Compilation::Stop"}, {"sha": "aa3cb03bad89267bf4f5689b144a3ab397115a26", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -599,6 +599,7 @@ pub enum PrintRequest {\n     StackProtectorStrategies,\n     LinkArgs,\n     SplitDebuginfo,\n+    DeploymentTarget,\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -1481,7 +1482,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n             \"[crate-name|file-names|sysroot|target-libdir|cfg|calling-conventions|\\\n              target-list|target-cpus|target-features|relocation-models|code-models|\\\n              tls-models|target-spec-json|all-target-specs-json|native-static-libs|\\\n-             stack-protector-strategies|link-args]\",\n+             stack-protector-strategies|link-args|deployment-target]\",\n         ),\n         opt::flagmulti_s(\"g\", \"\", \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n@@ -1931,6 +1932,7 @@ fn collect_print_requests(\n         (\"all-target-specs-json\", PrintRequest::AllTargetSpecs),\n         (\"link-args\", PrintRequest::LinkArgs),\n         (\"split-debuginfo\", PrintRequest::SplitDebuginfo),\n+        (\"deployment-target\", PrintRequest::DeploymentTarget),\n     ];\n \n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|req| {"}, {"sha": "ff2246318288ea92d2948b9c29b83a8fecba5f55", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -1,7 +1,7 @@\n use std::{borrow::Cow, env};\n \n use crate::spec::{cvs, Cc, DebuginfoKind, FramePointer, LinkArgs};\n-use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, TargetOptions};\n+use crate::spec::{LinkerFlavor, Lld, SplitDebuginfo, StaticCow, Target, TargetOptions};\n \n #[cfg(test)]\n #[path = \"apple/tests.rs\"]\n@@ -179,12 +179,28 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     }\n }\n \n-fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n-    let deployment_target = env::var(var_name).ok();\n-    deployment_target\n-        .as_ref()\n-        .and_then(|s| s.split_once('.'))\n-        .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok())\n+pub fn deployment_target(target: &Target) -> Option<String> {\n+    let (major, minor) = match &*target.os {\n+        \"macos\" => {\n+            // This does not need to be specific. It just needs to handle x86 vs M1.\n+            let arch = if target.arch == \"x86\" || target.arch == \"x86_64\" { X86_64 } else { Arm64 };\n+            macos_deployment_target(arch)\n+        }\n+        \"ios\" => ios_deployment_target(),\n+        \"watchos\" => watchos_deployment_target(),\n+        \"tvos\" => tvos_deployment_target(),\n+        _ => return None,\n+    };\n+\n+    Some(format!(\"{major}.{minor}\"))\n+}\n+\n+fn from_set_deployment_target(var_name: &str) -> Option<(u32, u32)> {\n+    let deployment_target = env::var(var_name).ok()?;\n+    let (unparsed_major, unparsed_minor) = deployment_target.split_once('.')?;\n+    let (major, minor) = (unparsed_major.parse().ok()?, unparsed_minor.parse().ok()?);\n+\n+    Some((major, minor))\n }\n \n fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n@@ -198,7 +214,8 @@ fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n }\n \n fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n-    deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"MACOSX_DEPLOYMENT_TARGET\")\n         .unwrap_or_else(|| macos_default_deployment_target(arch))\n }\n \n@@ -247,7 +264,8 @@ fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]>\n }\n \n fn ios_deployment_target() -> (u32, u32) {\n-    deployment_target(\"IPHONEOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"IPHONEOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n pub fn ios_llvm_target(arch: Arch) -> String {\n@@ -272,7 +290,8 @@ pub fn ios_sim_llvm_target(arch: Arch) -> String {\n }\n \n fn tvos_deployment_target() -> (u32, u32) {\n-    deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"TVOS_DEPLOYMENT_TARGET\").unwrap_or((7, 0))\n }\n \n fn tvos_lld_platform_version() -> String {\n@@ -281,7 +300,8 @@ fn tvos_lld_platform_version() -> String {\n }\n \n fn watchos_deployment_target() -> (u32, u32) {\n-    deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n+    // If you are looking for the default deployment target, prefer `rustc --print deployment-target`.\n+    from_set_deployment_target(\"WATCHOS_DEPLOYMENT_TARGET\").unwrap_or((5, 0))\n }\n \n fn watchos_lld_platform_version() -> String {"}, {"sha": "ba4b89c9ea10b23853c1066e814e87cf5c7eaaab", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -60,6 +60,7 @@ pub mod crt_objects;\n mod aix_base;\n mod android_base;\n mod apple_base;\n+pub use apple_base::deployment_target as current_apple_deployment_target;\n mod avr_gnu_base;\n mod bpf_base;\n mod dragonfly_base;"}, {"sha": "3be4382b0a3aa482e3756f96eabd0fdfc8ebc658", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -248,8 +248,14 @@ The valid types of print values are:\n   exact format of this debugging output is not a stable guarantee, other than\n   that it will include the linker executable and the text of each command-line\n   argument passed to the linker.\n+- `deployment-target` - The currently selected [deployment target] (or minimum OS version)\n+  for the selected Apple platform target. This value can be used or passed along to other\n+  components alongside a Rust build that need this information, such as C compilers.\n+  This returns rustc's minimum supported deployment target if no `*_DEPLOYMENT_TARGET` variable\n+  is present in the environment, or otherwise returns the variable's parsed value.\n \n [conditional compilation]: ../reference/conditional-compilation.html\n+[deployment target]: https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/cross_development/Configuring/configuring.html\n \n <a id=\"option-g-debug\"></a>\n ## `-g`: include debug information"}, {"sha": "e4f328ec0ddc89d37df1dad8e6e785579680d5f4", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -10,7 +10,7 @@ use std::path::{Path, PathBuf};\n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n const ISSUES_ENTRY_LIMIT: usize = 1953;\n-const ROOT_ENTRY_LIMIT: usize = 894;\n+const ROOT_ENTRY_LIMIT: usize = 895;\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {\n     let mut directories: HashMap<PathBuf, usize> = HashMap::new();"}, {"sha": "4f57550c29a7bf2ba0e73c40953d66ce069de684", "filename": "tests/run-make/valid-print-requests/valid-print-requests.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fvalid-print-requests%2Fvalid-print-requests.stderr?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -1,2 +1,2 @@\n-error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `all-target-specs-json`, `link-args`, `split-debuginfo`\n+error: unknown print request `uwu`. Valid print requests are: `crate-name`, `file-names`, `sysroot`, `target-libdir`, `cfg`, `calling-conventions`, `target-list`, `target-cpus`, `target-features`, `relocation-models`, `code-models`, `tls-models`, `native-static-libs`, `stack-protector-strategies`, `target-spec-json`, `all-target-specs-json`, `link-args`, `split-debuginfo`, `deployment-target`\n "}, {"sha": "336624320a32c8df1dc489161eba2babbfb687ea", "filename": "tests/ui/deployment-target/invalid-target.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Finvalid-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Finvalid-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Finvalid-target.rs?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --target x86_64-unknown-linux-gnu --print deployment-target\n+// needs-llvm-components: x86\n+\n+fn main() {}"}, {"sha": "eb4ac131c40cd224b5f79bb0ed40830a04626de0", "filename": "tests/ui/deployment-target/invalid-target.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Finvalid-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Finvalid-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Finvalid-target.stderr?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -0,0 +1,2 @@\n+error: only Apple targets currently support deployment version info\n+"}, {"sha": "701ccf4799a44b191025aaa832fd979bf7aaf8c2", "filename": "tests/ui/deployment-target/macos-target.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Fmacos-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Fmacos-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Fmacos-target.rs?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -0,0 +1,7 @@\n+// only-macos\n+// compile-flags: --print deployment-target\n+// normalize-stdout-test: \"\\d+\\.\" -> \"$$CURRENT_MAJOR_VERSION.\"\n+// normalize-stdout-test: \"\\d+\" -> \"$$CURRENT_MINOR_VERSION\"\n+// check-pass\n+\n+fn main() {}"}, {"sha": "f55ef568ed67f42b0189e1d7037f2de89f5c9fe2", "filename": "tests/ui/deployment-target/macos-target.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Fmacos-target.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b/tests%2Fui%2Fdeployment-target%2Fmacos-target.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeployment-target%2Fmacos-target.stdout?ref=e3eb6a87bf044925c9faf72a2b9737b0c7e2c76b", "patch": "@@ -0,0 +1 @@\n+deployment_target=$CURRENT_MAJOR_VERSION.$CURRENT_MINOR_VERSION"}]}