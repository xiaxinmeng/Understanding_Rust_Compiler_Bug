{"sha": "e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MDVkNWRhOTNjZmRiZDQ5YzRkYzljODlhMTUzN2RhNzI2YThkMzU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T22:02:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T17:07:08Z"}, "message": "Move structural_match to rustc::traits.", "tree": {"sha": "07c0f6a42ea554c5d5950a4c9df76bf515868671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07c0f6a42ea554c5d5950a4c9df76bf515868671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "html_url": "https://github.com/rust-lang/rust/commit/e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73667af4445b4f86216c717f4d38ac980aa67903", "url": "https://api.github.com/repos/rust-lang/rust/commits/73667af4445b4f86216c717f4d38ac980aa67903", "html_url": "https://github.com/rust-lang/rust/commit/73667af4445b4f86216c717f4d38ac980aa67903"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "3c49d1b6f36eaf25c6c5a9f1ec3e64d97f568add", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "patch": "@@ -17,6 +17,7 @@ pub mod query;\n mod select;\n mod specialize;\n mod structural_impls;\n+mod structural_match;\n mod util;\n pub mod wf;\n \n@@ -63,6 +64,9 @@ pub use self::specialize::find_associated_item;\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n+pub use self::structural_match::search_for_structural_match_violation;\n+pub use self::structural_match::type_marked_structural;\n+pub use self::structural_match::NonStructuralMatchTy;\n pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{"}, {"sha": "b2c3c23b4e3bdd4e74282aee8854562e7eabeb15", "filename": "src/librustc/traits/structural_match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_match.rs?ref=e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "previous_filename": "src/librustc/ty/structural_match.rs"}, {"sha": "23e4309c1d3372f9e8e6487bc26655b6975deb2f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "patch": "@@ -87,10 +87,6 @@ pub use self::context::{\n \n pub use self::instance::{Instance, InstanceDef};\n \n-pub use self::structural_match::search_for_structural_match_violation;\n-pub use self::structural_match::type_marked_structural;\n-pub use self::structural_match::NonStructuralMatchTy;\n-\n pub use self::trait_def::TraitDef;\n \n pub use self::query::queries;\n@@ -124,7 +120,6 @@ mod context;\n mod diagnostics;\n mod instance;\n mod structural_impls;\n-mod structural_match;\n mod sty;\n \n // Data types"}, {"sha": "75b25f03ca27bf2a0300ebef938e30f11ea0dfff", "filename": "src/librustc_mir/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "patch": "@@ -4,7 +4,7 @@ use rustc::infer::InferCtxt;\n use rustc::lint;\n use rustc::mir::Field;\n use rustc::traits::predicate_for_trait_def;\n-use rustc::traits::{ObligationCause, PredicateObligation};\n+use rustc::traits::{self, ObligationCause, PredicateObligation};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n \n@@ -76,12 +76,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n     fn search_for_structural_match_violation(\n         &self,\n         ty: Ty<'tcx>,\n-    ) -> Option<ty::NonStructuralMatchTy<'tcx>> {\n-        ty::search_for_structural_match_violation(self.id, self.span, self.tcx(), ty)\n+    ) -> Option<traits::NonStructuralMatchTy<'tcx>> {\n+        traits::search_for_structural_match_violation(self.id, self.span, self.tcx(), ty)\n     }\n \n     fn type_marked_structural(&self, ty: Ty<'tcx>) -> bool {\n-        ty::type_marked_structural(self.id, self.span, &self.infcx, ty)\n+        traits::type_marked_structural(self.id, self.span, &self.infcx, ty)\n     }\n \n     fn to_pat(&mut self, cv: &'tcx ty::Const<'tcx>) -> Pat<'tcx> {\n@@ -105,8 +105,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             );\n             if let Some(non_sm_ty) = structural {\n                 let adt_def = match non_sm_ty {\n-                    ty::NonStructuralMatchTy::Adt(adt_def) => adt_def,\n-                    ty::NonStructuralMatchTy::Param => {\n+                    traits::NonStructuralMatchTy::Adt(adt_def) => adt_def,\n+                    traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of constant whose type is a parameter inside a pattern\")\n                     }\n                 };"}, {"sha": "fb9e4ba5ce28ea775fa805897de18274cb219cef", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e905d5da93cfdbd49c4dc9c89a1537da726a8d35/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e905d5da93cfdbd49c4dc9c89a1537da726a8d35", "patch": "@@ -23,6 +23,7 @@ use crate::middle::weak_lang_items;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n+use rustc::traits;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::GenericArgKind;\n use rustc::ty::subst::{InternalSubsts, Subst};\n@@ -1509,48 +1510,48 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n         }\n \n-        Node::GenericParam(param) => {\n-            match &param.kind {\n-                hir::GenericParamKind::Type { default: Some(ref ty), .. } => icx.to_ty(ty),\n-                hir::GenericParamKind::Const { ty: ref hir_ty, .. } => {\n-                    let ty = icx.to_ty(hir_ty);\n-                    if !tcx.features().const_compare_raw_pointers {\n-                        let err = match ty.peel_refs().kind {\n-                            ty::FnPtr(_) => Some(\"function pointers\"),\n-                            ty::RawPtr(_) => Some(\"raw pointers\"),\n-                            _ => None,\n-                        };\n-                        if let Some(unsupported_type) = err {\n-                            feature_gate::feature_err(\n-                                &tcx.sess.parse_sess,\n-                                sym::const_compare_raw_pointers,\n-                                hir_ty.span,\n-                                &format!(\n-                                    \"using {} as const generic parameters is unstable\",\n-                                    unsupported_type\n-                                ),\n-                            )\n-                            .emit();\n-                        };\n-                    }\n-                    if ty::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n-                        .is_some()\n-                    {\n-                        struct_span_err!(\n+        Node::GenericParam(param) => match &param.kind {\n+            hir::GenericParamKind::Type { default: Some(ref ty), .. } => icx.to_ty(ty),\n+            hir::GenericParamKind::Const { ty: ref hir_ty, .. } => {\n+                let ty = icx.to_ty(hir_ty);\n+                if !tcx.features().const_compare_raw_pointers {\n+                    let err = match ty.peel_refs().kind {\n+                        ty::FnPtr(_) => Some(\"function pointers\"),\n+                        ty::RawPtr(_) => Some(\"raw pointers\"),\n+                        _ => None,\n+                    };\n+                    if let Some(unsupported_type) = err {\n+                        feature_gate::feature_err(\n+                            &tcx.sess.parse_sess,\n+                            sym::const_compare_raw_pointers,\n+                            hir_ty.span,\n+                            &format!(\n+                                \"using {} as const generic parameters is unstable\",\n+                                unsupported_type\n+                            ),\n+                        )\n+                        .emit();\n+                    };\n+                }\n+                if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n+                    .is_some()\n+                {\n+                    struct_span_err!(\n                         tcx.sess,\n                         hir_ty.span,\n                         E0741,\n                         \"the types of const generic parameters must derive `PartialEq` and `Eq`\",\n-                    ).span_label(\n+                    )\n+                    .span_label(\n                         hir_ty.span,\n                         format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n-                    ).emit();\n-                    }\n-                    ty\n+                    )\n+                    .emit();\n                 }\n-                x => bug!(\"unexpected non-type Node::GenericParam: {:?}\", x),\n+                ty\n             }\n-        }\n+            x => bug!(\"unexpected non-type Node::GenericParam: {:?}\", x),\n+        },\n \n         x => {\n             bug!(\"unexpected sort of node in type_of_def_id(): {:?}\", x);"}]}