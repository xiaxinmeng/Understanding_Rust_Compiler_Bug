{"sha": "dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "node_id": "C_kwDOAAsO6NoAKGRjMDVmNjBjMWZmNGUyY2IyZTZlYjgwYzliM2FmYTYxMmNlMjhjN2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-01T05:34:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-01T05:34:00Z"}, "message": "Auto merge of #103829 - JohnTitor:rollup-o03nzr8, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #103007 (Add better python discovery)\n - #103674 (Update note about unstable split-debuginfo flag.)\n - #103692 (Add `walk_generic_arg`)\n - #103749 (Reduce span of let else irrefutable_let_patterns warning)\n - #103772 (better error for `rustc_strict_coherence` misuse)\n - #103788 (Fix ICE in checking transmutability of NaughtyLenArray)\n - #103793 (rustdoc: add margins to all impl-item toggles, not just methods)\n - #103798 (interpret: move type_name implementation to an interpreter-independent helper file)\n - #103799 (Remove generation of tuple struct fields in the search index)\n - #103805 (Enable RUSTC_BOOTSTRAP for a few steps)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b0ae44f23cbf5efc6300d241a6eb94cac1d61915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ae44f23cbf5efc6300d241a6eb94cac1d61915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "html_url": "https://github.com/rust-lang/rust/commit/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "024207ab43aceb49f2ca957509c503ccf12089d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/024207ab43aceb49f2ca957509c503ccf12089d7", "html_url": "https://github.com/rust-lang/rust/commit/024207ab43aceb49f2ca957509c503ccf12089d7"}, {"sha": "669e3cde1c24c10223fca6dfe51c2ee6d722545b", "url": "https://api.github.com/repos/rust-lang/rust/commits/669e3cde1c24c10223fca6dfe51c2ee6d722545b", "html_url": "https://github.com/rust-lang/rust/commit/669e3cde1c24c10223fca6dfe51c2ee6d722545b"}], "stats": {"total": 295, "additions": 238, "deletions": 57}, "files": [{"sha": "b92a68788475fcd60c2907b4d36f5cfef02b3e92", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -7,7 +7,9 @@ use std::convert::TryFrom;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,\n-    interpret::{ConstValue, GlobalId, InterpResult, PointerArithmetic, Scalar},\n+    interpret::{\n+        Allocation, ConstAllocation, ConstValue, GlobalId, InterpResult, PointerArithmetic, Scalar,\n+    },\n     BinOp, NonDivergingIntrinsic,\n };\n use rustc_middle::ty;\n@@ -23,7 +25,6 @@ use super::{\n };\n \n mod caller_location;\n-mod type_name;\n \n fn numeric_intrinsic<Prov>(name: Symbol, bits: u128, kind: Primitive) -> Scalar<Prov> {\n     let size = match kind {\n@@ -42,6 +43,13 @@ fn numeric_intrinsic<Prov>(name: Symbol, bits: u128, kind: Primitive) -> Scalar<\n     Scalar::from_uint(bits_out, size)\n }\n \n+/// Directly returns an `Allocation` containing an absolute path representation of the given type.\n+pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n+    let path = crate::util::type_name(tcx, ty);\n+    let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n+    tcx.intern_const_alloc(alloc)\n+}\n+\n /// The logic for all nullary intrinsics is implemented here. These intrinsics don't get evaluated\n /// inside an `InterpCx` and instead have their value computed directly from rustc internal info.\n pub(crate) fn eval_nullary_intrinsic<'tcx>(\n@@ -55,7 +63,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n     Ok(match name {\n         sym::type_name => {\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n-            let alloc = type_name::alloc_type_name(tcx, tp_ty);\n+            let alloc = alloc_type_name(tcx, tp_ty);\n             ConstValue::Slice { data: alloc, start: 0, end: alloc.inner().len() }\n         }\n         sym::needs_drop => {"}, {"sha": "4d0f81a4060088b669d85902ca9013a50f7e3e4c", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -4,9 +4,11 @@ mod call_kind;\n pub mod collect_writes;\n mod find_self_call;\n mod might_permit_raw_init;\n+mod type_name;\n \n pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;\n pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n pub use self::find_self_call::find_self_call;\n pub use self::might_permit_raw_init::might_permit_raw_init;\n+pub use self::type_name::type_name;"}, {"sha": "221efc6f98140b129a82a0e0e54dbbf707f66962", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "renamed", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -1,7 +1,6 @@\n use rustc_data_structures::intern::Interned;\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::definitions::DisambiguatedDefPathData;\n-use rustc_middle::mir::interpret::{Allocation, ConstAllocation};\n use rustc_middle::ty::{\n     self,\n     print::{PrettyPrinter, Print, Printer},\n@@ -193,9 +192,6 @@ impl Write for AbsolutePathPrinter<'_> {\n     }\n }\n \n-/// Directly returns an `Allocation` containing an absolute path representation of the given type.\n-pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n-    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n-    let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n-    tcx.intern_const_alloc(alloc)\n+pub fn type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n+    AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path\n }", "previous_filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs"}, {"sha": "81d8e8a473bb7184ca5b3892d727eb7523954682", "filename": "compiler/rustc_error_messages/locales/en-US/middle.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -27,3 +27,7 @@ middle_values_too_big =\n \n middle_cannot_be_normalized =\n     unable to determine layout for `{$ty}` because `{$failure_ty}` cannot be normalized\n+\n+middle_strict_coherence_needs_negative_coherence =\n+    to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n+    .label = due to this attribute"}, {"sha": "9ee5e25c9bf644c3a4f9da20e53a4a0eac965701", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -410,12 +410,7 @@ pub trait Visitor<'v>: Sized {\n         walk_inf(self, inf);\n     }\n     fn visit_generic_arg(&mut self, generic_arg: &'v GenericArg<'v>) {\n-        match generic_arg {\n-            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n-            GenericArg::Type(ty) => self.visit_ty(ty),\n-            GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n-            GenericArg::Infer(inf) => self.visit_infer(inf),\n-        }\n+        walk_generic_arg(self, generic_arg);\n     }\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n@@ -480,6 +475,15 @@ pub fn walk_label<'v, V: Visitor<'v>>(visitor: &mut V, label: &'v Label) {\n     visitor.visit_ident(label.ident);\n }\n \n+pub fn walk_generic_arg<'v, V: Visitor<'v>>(visitor: &mut V, generic_arg: &'v GenericArg<'v>) {\n+    match generic_arg {\n+        GenericArg::Lifetime(lt) => visitor.visit_lifetime(lt),\n+        GenericArg::Type(ty) => visitor.visit_ty(ty),\n+        GenericArg::Const(ct) => visitor.visit_anon_const(&ct.value),\n+        GenericArg::Infer(inf) => visitor.visit_infer(inf),\n+    }\n+}\n+\n pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n     visitor.visit_id(lifetime.hir_id);\n     match lifetime.name {"}, {"sha": "43903e6739f9195bd56bdfdecde6e38226f86fea", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -55,3 +55,12 @@ pub struct ConstEvalNonIntError {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(middle_strict_coherence_needs_negative_coherence)]\n+pub(crate) struct StrictCoherenceNeedsNegativeCoherence {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub attr_span: Option<Span>,\n+}"}, {"sha": "f1c2158826189eb5a7a7205e432e10ae1398c50c", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -1,3 +1,4 @@\n+use crate::error::StrictCoherenceNeedsNegativeCoherence;\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, TyCtxt};\n@@ -65,9 +66,21 @@ impl OverlapMode {\n \n         if with_negative_coherence {\n             if strict_coherence { OverlapMode::Strict } else { OverlapMode::WithNegative }\n-        } else if strict_coherence {\n-            bug!(\"To use strict_coherence you need to set with_negative_coherence feature flag\");\n         } else {\n+            if strict_coherence {\n+                let attr_span = trait_id\n+                    .as_local()\n+                    .into_iter()\n+                    .flat_map(|local_def_id| {\n+                        tcx.hir().attrs(tcx.hir().local_def_id_to_hir_id(local_def_id))\n+                    })\n+                    .find(|attr| attr.has_name(sym::rustc_strict_coherence))\n+                    .map(|attr| attr.span);\n+                tcx.sess.emit_err(StrictCoherenceNeedsNegativeCoherence {\n+                    span: tcx.def_span(trait_id),\n+                    attr_span,\n+                });\n+            }\n             OverlapMode::Stable\n         }\n     }"}, {"sha": "93a3dd8962a9edd608b1f58b366a3ce410cce612", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -79,7 +79,10 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, '_, 'tcx> {\n         intravisit::walk_local(self, loc);\n         let els = loc.els;\n         if let Some(init) = loc.init && els.is_some() {\n-            self.check_let(&loc.pat, init, loc.span);\n+            // Build a span without the else { ... } as we don't want to underline\n+            // the entire else block in the IDE setting.\n+            let span = loc.span.with_hi(init.span.hi());\n+            self.check_let(&loc.pat, init, span);\n         }\n \n         let (msg, sp) = match loc.source {\n@@ -630,11 +633,6 @@ fn irrefutable_let_patterns(\n     count: usize,\n     span: Span,\n ) {\n-    let span = match source {\n-        LetSource::LetElse(span) => span,\n-        _ => span,\n-    };\n-\n     macro_rules! emit_diag {\n         (\n             $lint:expr,\n@@ -680,7 +678,7 @@ fn irrefutable_let_patterns(\n                 \"removing the guard and adding a `let` inside the match arm\"\n             );\n         }\n-        LetSource::LetElse(..) => {\n+        LetSource::LetElse => {\n             emit_diag!(\n                 lint,\n                 \"`let...else`\",\n@@ -1127,7 +1125,7 @@ pub enum LetSource {\n     GenericLet,\n     IfLet,\n     IfLetGuard,\n-    LetElse(Span),\n+    LetElse,\n     WhileLet,\n }\n \n@@ -1156,8 +1154,8 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n     let parent_parent = hir.get_parent_node(parent);\n     let parent_parent_node = hir.get(parent_parent);\n     match parent_parent_node {\n-        hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), span, .. }) => {\n-            return LetSource::LetElse(*span);\n+        hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), .. }) => {\n+            return LetSource::LetElse;\n         }\n         hir::Node::Arm(hir::Arm { guard: Some(hir::Guard::If(_)), .. }) => {\n             return LetSource::IfLetGuard;"}, {"sha": "2bc6bc1fc23aefd98135e45626a433f34acc721f", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -284,7 +284,8 @@ pub(crate) mod rustc {\n                 }\n \n                 ty::Array(ty, len) => {\n-                    let len = len.try_eval_usize(tcx, ParamEnv::reveal_all()).unwrap();\n+                    let len =\n+                        len.try_eval_usize(tcx, ParamEnv::reveal_all()).ok_or(Err::Unspecified)?;\n                     let elt = Tree::from_ty(*ty, tcx)?;\n                     Ok(std::iter::repeat(elt)\n                         .take(len as usize)"}, {"sha": "e168dd571f6d2b336d3657201899d3303c0778bc", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -986,6 +986,7 @@ impl Step for RustdocGUI {\n                     .arg(\"doc\")\n                     .arg(\"--target-dir\")\n                     .arg(&out_dir)\n+                    .env(\"RUSTC_BOOTSTRAP\", \"1\")\n                     .env(\"RUSTDOC\", builder.rustdoc(self.compiler))\n                     .env(\"RUSTC\", builder.rustc(self.compiler))\n                     .current_dir(path);\n@@ -1725,6 +1726,8 @@ impl BookTest {\n \n         let mut rustbook_cmd = builder.tool_cmd(Tool::Rustbook);\n         let path = builder.src.join(&self.path);\n+        // Books often have feature-gated example text.\n+        rustbook_cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         rustbook_cmd.env(\"PATH\", new_path).arg(\"test\").arg(path);\n         builder.add_rust_test_threads(&mut rustbook_cmd);\n         builder.info(&format!(\"Testing rustbook {}\", self.path.display()));"}, {"sha": "f5a49410ea555e03f6937976d23ed8b8d08f5942", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -531,8 +531,10 @@ platforms. Possible values are:\n   debug information. On other Unix platforms this means that `*.dwo` files will\n   contain debug information.\n \n-Note that `packed` and `unpacked` are gated behind `-Z unstable-options` on\n-non-macOS platforms at this time.\n+Note that all three options are supported on Linux and Apple platforms,\n+`packed` is supported on Windows-MSVC, and all other platforms support `off`.\n+Attempting to use an unsupported option requires using the nightly channel\n+with the `-Z unstable-options` flag.\n \n ## strip\n "}, {"sha": "d027fb6e8763cad8fdc3d1ffd6a237111b5de891", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -316,21 +316,28 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                         let desc = item.doc_value().map_or_else(String::new, |x| {\n                             short_markdown_summary(x.as_str(), &item.link_names(self.cache))\n                         });\n-                        self.cache.search_index.push(IndexItem {\n-                            ty: item.type_(),\n-                            name: s.to_string(),\n-                            path: join_with_double_colon(path),\n-                            desc,\n-                            parent,\n-                            parent_idx: None,\n-                            search_type: get_function_type_for_search(\n-                                &item,\n-                                self.tcx,\n-                                clean_impl_generics(self.cache.parent_stack.last()).as_ref(),\n-                                self.cache,\n-                            ),\n-                            aliases: item.attrs.get_doc_aliases(),\n-                        });\n+                        let ty = item.type_();\n+                        let name = s.to_string();\n+                        if ty != ItemType::StructField || u16::from_str_radix(&name, 10).is_err() {\n+                            // In case this is a field from a tuple struct, we don't add it into\n+                            // the search index because its name is something like \"0\", which is\n+                            // not useful for rustdoc search.\n+                            self.cache.search_index.push(IndexItem {\n+                                ty,\n+                                name,\n+                                path: join_with_double_colon(path),\n+                                desc,\n+                                parent,\n+                                parent_idx: None,\n+                                search_type: get_function_type_for_search(\n+                                    &item,\n+                                    self.tcx,\n+                                    clean_impl_generics(self.cache.parent_stack.last()).as_ref(),\n+                                    self.cache,\n+                                ),\n+                                aliases: item.attrs.get_doc_aliases(),\n+                            });\n+                        }\n                     }\n                 }\n                 (Some(parent), None) if is_inherent_impl_item => {"}, {"sha": "30dc84509246e1af51852cee26c70bf7fb70fc47", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -1968,24 +1968,26 @@ in storage.js\n \t}\n }\n \n-.method-toggle > summary,\n .implementors-toggle > summary,\n .impl,\n #implementors-list > .docblock,\n .impl-items > section,\n-.methods > section\n+.impl-items > .rustdoc-toggle > summary,\n+.methods > section,\n+.methods > .rustdoc-toggle > summary\n {\n \tmargin-bottom: 0.75em;\n }\n \n-.method-toggle[open]:not(:last-child),\n+.impl-items > .rustdoc-toggle[open]:not(:last-child),\n+.methods > .rustdoc-toggle[open]:not(:last-child),\n .implementors-toggle[open]:not(:last-child) {\n \tmargin-bottom: 2em;\n }\n \n-#trait-implementations-list .method-toggle:not(:last-child),\n-#synthetic-implementations-list .method-toggle:not(:last-child),\n-#blanket-implementations-list .method-toggle:not(:last-child) {\n+#trait-implementations-list .impl-items > .rustdoc-toggle:not(:last-child),\n+#synthetic-implementations-list .impl-items > .rustdoc-toggle:not(:last-child),\n+#blanket-implementations-list .impl-items > .rustdoc-toggle:not(:last-child) {\n \tmargin-bottom: 1em;\n }\n "}, {"sha": "397bcd40b36c4bbc4a28780e4cd2030a68d3a06b", "filename": "src/test/rustdoc-gui/method-margins.goml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Frustdoc-gui%2Fmethod-margins.goml", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Frustdoc-gui%2Fmethod-margins.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmethod-margins.goml?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -0,0 +1,17 @@\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait_members/struct.HasTrait.html#impl-TraitMembers-for-HasTrait\"\n+\n+assert-count: (\"#trait-implementations-list > .rustdoc-toggle\", 1)\n+\n+compare-elements-css: (\n+    // compare margin on type with margin on method\n+    \"#trait-implementations-list .impl-items > .rustdoc-toggle:nth-child(1) > summary\",\n+    \"#trait-implementations-list .impl-items > .rustdoc-toggle:nth-child(2) > summary\",\n+    [\"margin\"]\n+)\n+\n+compare-elements-css: (\n+    // compare margin on type with margin on method\n+    \"#trait-implementations-list .impl-items > .rustdoc-toggle:nth-child(1)\",\n+    \"#trait-implementations-list .impl-items > .rustdoc-toggle:nth-child(2)\",\n+    [\"margin\"]\n+)"}, {"sha": "8eea5ad01c02dd68d0a37893a49c0503bc277d3f", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -416,3 +416,20 @@ pub trait TraitWithoutGenerics {\n \n     fn foo();\n }\n+\n+pub mod trait_members {\n+    pub trait TraitMembers {\n+        /// Some type\n+        type Type;\n+        /// Some function\n+        fn function();\n+        /// Some other function\n+        fn function2();\n+    }\n+    pub struct HasTrait;\n+    impl TraitMembers for HasTrait {\n+        type Type = u8;\n+        fn function() {}\n+        fn function2() {}\n+    }\n+}"}, {"sha": "d301954b6b598debad0405d14f0d7018d41ac0af", "filename": "src/test/rustdoc/no-unit-struct-field.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Frustdoc%2Fno-unit-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Frustdoc%2Fno-unit-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fno-unit-struct-field.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -0,0 +1,18 @@\n+// This test ensures that the tuple struct fields are not generated in the\n+// search index.\n+\n+// @!hasraw search-index.js '\"0\"'\n+// @!hasraw search-index.js '\"1\"'\n+// @hasraw search-index.js '\"foo_a\"'\n+// @hasraw search-index.js '\"bar_a\"'\n+\n+pub struct Bar(pub u32, pub u8);\n+pub struct Foo {\n+    pub foo_a: u8,\n+}\n+pub enum Enum {\n+    Foo(u8),\n+    Bar {\n+        bar_a: u8,\n+    },\n+}"}, {"sha": "221683dd56f480a30e087616def60aa22b6320a9", "filename": "src/test/ui/coherence/strict-coherence-needs-negative-coherence.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Fcoherence%2Fstrict-coherence-needs-negative-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Fcoherence%2Fstrict-coherence-needs-negative-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fstrict-coherence-needs-negative-coherence.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -0,0 +1,7 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_strict_coherence]\n+trait Foo {}\n+//~^ ERROR to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n+\n+fn main() {}"}, {"sha": "b5472928778eb3b13f2863fcd5a8847933cc2b6d", "filename": "src/test/ui/coherence/strict-coherence-needs-negative-coherence.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Fcoherence%2Fstrict-coherence-needs-negative-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Fcoherence%2Fstrict-coherence-needs-negative-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fstrict-coherence-needs-negative-coherence.stderr?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -0,0 +1,10 @@\n+error: to use `strict_coherence` on this trait, the `with_negative_coherence` feature must be enabled\n+  --> $DIR/strict-coherence-needs-negative-coherence.rs:4:1\n+   |\n+LL | #[rustc_strict_coherence]\n+   | ------------------------- due to this attribute\n+LL | trait Foo {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f4b338eb0af95313b64b760ecf35175cfe9bc807", "filename": "src/test/ui/let-else/let-else-irrefutable.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -1,7 +1,11 @@\n // check-pass\n \n-\n-\n fn main() {\n     let x = 1 else { return }; //~ WARN irrefutable `let...else` pattern\n+\n+    // Multiline else blocks should not get printed\n+    let x = 1 else { //~ WARN irrefutable `let...else` pattern\n+        eprintln!(\"problem case encountered\");\n+        return\n+    };\n }"}, {"sha": "73d4e5f34831d6444aa3571c11f52d7f2e5a08e0", "filename": "src/test/ui/let-else/let-else-irrefutable.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.stderr?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -1,12 +1,21 @@\n warning: irrefutable `let...else` pattern\n-  --> $DIR/let-else-irrefutable.rs:6:5\n+  --> $DIR/let-else-irrefutable.rs:4:5\n    |\n LL |     let x = 1 else { return };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^\n    |\n    = note: this pattern will always match, so the `else` clause is useless\n    = help: consider removing the `else` clause\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n-warning: 1 warning emitted\n+warning: irrefutable `let...else` pattern\n+  --> $DIR/let-else-irrefutable.rs:7:5\n+   |\n+LL |     let x = 1 else {\n+   |     ^^^^^^^^^\n+   |\n+   = note: this pattern will always match, so the `else` clause is useless\n+   = help: consider removing the `else` clause\n+\n+warning: 2 warnings emitted\n "}, {"sha": "cb36e539ed11a1e7299b2a1a5ac2e72168d9cf96", "filename": "src/test/ui/transmutability/arrays/issue-103783-array-length.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fissue-103783-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fissue-103783-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fissue-103783-array-length.rs?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -0,0 +1,24 @@\n+#![crate_type = \"lib\"]\n+#![feature(transmutability)]\n+#![allow(dead_code)]\n+\n+mod assert {\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n+    pub struct Context;\n+\n+    pub fn is_maybe_transmutable<Src, Dst>()\n+    where\n+        Dst: BikeshedIntrinsicFrom<\n+            Src,\n+            Context,\n+            { Assume { alignment: true, lifetimes: true, safety: true, validity: true } },\n+        >,\n+    {\n+    }\n+}\n+\n+fn test() {\n+    type NaughtyLenArray = [u32; 3.14159]; //~ ERROR mismatched types\n+    type JustUnit = ();\n+    assert::is_maybe_transmutable::<JustUnit, NaughtyLenArray>();\n+}"}, {"sha": "37774c59e6cbb50af0efab097df8ec3c442698a6", "filename": "src/test/ui/transmutability/arrays/issue-103783-array-length.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fissue-103783-array-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fissue-103783-array-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Farrays%2Fissue-103783-array-length.stderr?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-103783-array-length.rs:21:34\n+   |\n+LL |     type NaughtyLenArray = [u32; 3.14159];\n+   |                                  ^^^^^^^ expected `usize`, found floating-point number\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4309b82627c9c47917df4ef29c9ef8c4a3020544", "filename": "x", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/x", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/x", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -29,5 +29,11 @@ for SEARCH_PYTHON in py python3 python python2; do\n         exec \"$python\" $extra_arg \"$xpy\" \"$@\"\n     fi\n done\n+\n+python=$(bash -c \"compgen -c python\" | grep '^python[2-3]\\.[0-9]\\+$' | head -n1)\n+if ! [ \"$python\" = \"\" ]; then\n+    exec \"$python\" \"$xpy\" \"$@\"\n+fi\n+\n echo \"$0: error: did not find python installed\" >&2\n exit 1"}, {"sha": "81b98919f436cdad411ed6f3c8c55a4180382720", "filename": "x.ps1", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/x.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f/x.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.ps1?ref=dc05f60c1ff4e2cb2e6eb80c9b3afa612ce28c7f", "patch": "@@ -10,11 +10,15 @@ foreach ($arg in $args) {\n     $xpy_args += \"\"\"$arg\"\"\"\n }\n \n+function Get-Application($app) {\n+    return Get-Command $app -ErrorAction SilentlyContinue -CommandType Application\n+}\n+\n foreach ($python in \"py\", \"python3\", \"python\", \"python2\") {\n     # NOTE: this only tests that the command exists in PATH, not that it's actually\n     # executable. The latter is not possible in a portable way, see\n     # https://github.com/PowerShell/PowerShell/issues/12625.\n-    if (Get-Command $python -ErrorAction SilentlyContinue) {\n+    if (Get-Application $python) {\n         if ($python -eq \"py\") {\n             # Use python3, not python2\n             $xpy_args = @(\"-3\") + $xpy_args\n@@ -24,5 +28,12 @@ foreach ($python in \"py\", \"python3\", \"python\", \"python2\") {\n     }\n }\n \n+$found = (Get-Application \"python*\" | Where-Object {$_.name -match '^python[2-3]\\.[0-9]+(\\.exe)?$'})\n+if (($null -ne $found) -and ($found.Length -ge 1)) {\n+    $python = $found[0]\n+    $process = Start-Process -NoNewWindow -Wait -PassThru $python $xpy_args\n+    Exit $process.ExitCode\n+}\n+\n Write-Error \"${PSCommandPath}: error: did not find python installed\"\n Exit 1"}]}