{"sha": "56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZTRjODJhMzhjZmIyYmNmN2RlMmQ2MzIzZGFiMDA3M2E3MDcyNmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-29T02:03:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-30T22:34:59Z"}, "message": "Test fixes and merge conflicts", "tree": {"sha": "d8543567d747168ecd9bf9817477cdbf0c187333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8543567d747168ecd9bf9817477cdbf0c187333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "html_url": "https://github.com/rust-lang/rust/commit/56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e287af7788261bd50f47a166fbbd3493355a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e287af7788261bd50f47a166fbbd3493355a38", "html_url": "https://github.com/rust-lang/rust/commit/c1e287af7788261bd50f47a166fbbd3493355a38"}], "stats": {"total": 141, "additions": 44, "deletions": 97}, "files": [{"sha": "3b4a490f1adfc4cd857dbc9f698619babfdd846e", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -924,9 +924,10 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \t@rm -rf $(3)/test/run-make/$$*\n \t@mkdir -p $(3)/test/run-make/$$*\n \t@echo maketest: $$*\n-\t@python $(S)src/etc/maketest.py $$(dir $$<) \\\n+\t$$(Q)python $(S)src/etc/maketest.py $$(dir $$<) \\\n \t    $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t    $(3)/test/run-make/$$*\n+\t    $(3)/test/run-make/$$* \\\n+\t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\"\n \t@touch $$@\n \n endef"}, {"sha": "96c658e56864b2f3b3f2e6fc7a25cfc751936dd1", "filename": "src/etc/maketest.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -6,6 +6,7 @@\n \n os.putenv('RUSTC', os.path.abspath(sys.argv[2]))\n os.putenv('TMPDIR', os.path.abspath(sys.argv[3]))\n+os.putenv('CC', sys.argv[4])\n \n proc = subprocess.Popen(['make', '-C', sys.argv[1]],\n                         stdout = subprocess.PIPE,"}, {"sha": "ce504d8bf6fcffc04f61ad8173d09fa9de2ed9eb", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -40,6 +40,7 @@ Rust extras are part of the standard Rust distribution.\n \n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n use std::str::{StrSlice, OwnedStr};\n "}, {"sha": "9f5aaf3a426243940f29f6481b80febca7bde221", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -27,7 +27,7 @@ pub struct Archive {\n \n fn run_ar(sess: Session, args: &str, cwd: Option<&Path>,\n         paths: &[&Path]) -> ProcessOutput {\n-    let ar = sess.opts.ar.clone().unwrap_or(~\"ar\");\n+    let ar = sess.opts.ar.clone().unwrap_or_else(|| ~\"ar\");\n     let mut args = ~[args.to_owned()];\n     let mut paths = paths.iter().map(|p| p.as_str().unwrap().to_owned());\n     args.extend(&mut paths);\n@@ -64,7 +64,17 @@ impl Archive {\n \n     /// Read a file in the archive\n     pub fn read(&self, file: &str) -> ~[u8] {\n-        run_ar(self.sess, \"p\", None, [&self.dst, &Path::new(file)]).output\n+        // Apparently if \"ar p\" is used on windows, it generates a corrupt file\n+        // which has bad headers and LLVM will immediately choke on it\n+        if cfg!(windows) && cfg!(windows) { // FIXME(#10734) double-and\n+            let loc = TempDir::new(\"rsar\").unwrap();\n+            let archive = os::make_absolute(&self.dst);\n+            run_ar(self.sess, \"x\", Some(loc.path()), [&archive,\n+                                                      &Path::init(file)]);\n+            fs::File::open(&loc.path().join(file)).read_to_end()\n+        } else {\n+            run_ar(self.sess, \"p\", None, [&self.dst, &Path::init(file)]).output\n+        }\n     }\n \n     /// Adds all of the contents of a native library to this archive. This will\n@@ -77,7 +87,7 @@ impl Archive {\n     /// Adds all of the contents of the rlib at the specified path to this\n     /// archive.\n     pub fn add_rlib(&mut self, rlib: &Path) {\n-        let name = rlib.filename_str().unwrap().split_iter('-').next().unwrap();\n+        let name = rlib.filename_str().unwrap().split('-').next().unwrap();\n         self.add_archive(rlib, name);\n     }\n "}, {"sha": "8119618da57dcda7f40214271d63c74217872a38", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -1112,7 +1112,7 @@ fn link_args(sess: Session,\n         // follow this flag. Thus, use it before specifing libraries to link to.\n         args.push(~\"-Wl,--as-needed\");\n \n-        // GNU-style linkers supports optimization with -O. --gc-sections\n+        // GNU-style linkers support optimization with -O. --gc-sections\n         // removes metadata and potentially other useful things, so don't\n         // include it. GNU ld doesn't need a numeric argument, but other linkers\n         // do.\n@@ -1212,7 +1212,7 @@ fn add_upstream_rust_crates(args: &mut ~[~str], sess: Session,\n         }\n     }\n \n-    // This is a fallback of three differnet cases of linking:\n+    // This is a fallback of three different  cases of linking:\n     //\n     // * When creating a dynamic library, all inputs are required to be dynamic\n     //   as well\n@@ -1223,7 +1223,8 @@ fn add_upstream_rust_crates(args: &mut ~[~str], sess: Session,\n     let crates = cstore::get_used_crates(cstore, cstore::RequireDynamic);\n     for &(cnum, ref path) in crates.iter() {\n         let cratepath = match *path {\n-            Some(ref p) => p.clone(), None => {\n+            Some(ref p) => p.clone(),\n+            None => {\n                 sess.err(format!(\"could not find dynamic library for: `{}`\",\n                                  cstore::get_crate_data(sess.cstore, cnum).name));\n                 return"}, {"sha": "e45ea533f7937bcbbbbe18f8c33d5d3534573963", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -420,75 +420,3 @@ pub fn sess_os_to_meta_os(os: abi::Os) -> metadata::loader::Os {\n         abi::OsFreebsd => loader::OsFreebsd\n     }\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use driver::session::{bin_crate, building_library, lib_crate};\n-    use driver::session::{unknown_crate};\n-\n-    use syntax::ast;\n-    use syntax::attr;\n-    use syntax::codemap;\n-\n-    fn make_crate_type_attr(t: @str) -> ast::Attribute {\n-        attr::mk_attr(attr::mk_name_value_item_str(@\"crate_type\", t))\n-    }\n-\n-    fn make_crate(with_bin: bool, with_lib: bool) -> @ast::Crate {\n-        let mut attrs = ~[];\n-        if with_bin {\n-            attrs.push(make_crate_type_attr(@\"bin\"));\n-        }\n-        if with_lib {\n-            attrs.push(make_crate_type_attr(@\"lib\"));\n-        }\n-        @ast::Crate {\n-            module: ast::_mod { view_items: ~[], items: ~[] },\n-            attrs: attrs,\n-            config: ~[],\n-            span: codemap::dummy_sp(),\n-        }\n-    }\n-\n-    #[test]\n-    fn bin_crate_type_attr_results_in_bin_output() {\n-        let crate = make_crate(true, false);\n-        assert!(!building_library(unknown_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn lib_crate_type_attr_results_in_lib_output() {\n-        let crate = make_crate(false, true);\n-        assert!(building_library(unknown_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn bin_option_overrides_lib_crate_type() {\n-        let crate = make_crate(false, true);\n-        assert!(!building_library(bin_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn lib_option_overrides_bin_crate_type() {\n-        let crate = make_crate(true, false);\n-        assert!(building_library(lib_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn bin_crate_type_is_default() {\n-        let crate = make_crate(false, false);\n-        assert!(!building_library(unknown_crate, crate, false));\n-    }\n-\n-    #[test]\n-    fn test_option_overrides_lib_crate_type() {\n-        let crate = make_crate(false, true);\n-        assert!(!building_library(unknown_crate, crate, true));\n-    }\n-\n-    #[test]\n-    fn test_option_does_not_override_requested_lib_type() {\n-        let crate = make_crate(false, false);\n-        assert!(building_library(lib_crate, crate, true));\n-    }\n-}"}, {"sha": "d18a8306812c96f3b1eaebfa0bd0e55304fda619", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -135,7 +135,7 @@ impl Visitor<()> for Context {\n                 }\n             }\n \n-            ast::item_foreign_mod(*) => {\n+            ast::item_foreign_mod(..) => {\n                 if attr::contains_name(i.attrs, \"link_args\") &&\n                     cfg!(stage0, remove_this_on_next_snapshot) { // NOTE: snap\n                     self.gate_feature(\"link_args\", i.span,"}, {"sha": "e0073e7ce12e111890925667a09a290115a368bd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -20,6 +20,7 @@\n #[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n extern mod extra;\n extern mod syntax;"}, {"sha": "9d28a5abed2258a3f6ef5c8a80d9e014122cd779", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -187,9 +187,9 @@ fn visit_item(e: &Env, i: @ast::item) {\n             for m in link_args.iter() {\n                 match m.meta_item_list() {\n                     Some(items) => {\n-                        let kind = do items.iter().find |k| {\n+                        let kind = items.iter().find(|k| {\n                             \"kind\" == k.name()\n-                        }.and_then(|a| a.value_str());\n+                        }).and_then(|a| a.value_str());\n                         let kind = match kind {\n                             Some(k) if \"static\" == k => cstore::NativeStatic,\n                             Some(k) => {\n@@ -198,9 +198,9 @@ fn visit_item(e: &Env, i: @ast::item) {\n                             }\n                             None => cstore::NativeUnknown\n                         };\n-                        let n = do items.iter().find |n| {\n+                        let n = items.iter().find(|n| {\n                             \"name\" == n.name()\n-                        }.and_then(|a| a.value_str());\n+                        }).and_then(|a| a.value_str());\n                         let n = match n {\n                             Some(n) => n,\n                             None => {"}, {"sha": "441f1620e4d8995d03071c2ed994b50f4bac2f12", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -1533,9 +1533,9 @@ pub fn get_trait_of_method(cdata: Cmd, id: ast::NodeId, tcx: ty::ctxt)\n pub fn get_native_libraries(cdata: Cmd) -> ~[~str] {\n     let libraries = reader::get_doc(reader::Doc(cdata.data), tag_native_libraries);\n     let mut result = ~[];\n-    do reader::tagged_docs(libraries, tag_native_libraries_lib) |lib_doc| {\n+    reader::tagged_docs(libraries, tag_native_libraries_lib, |lib_doc| {\n         result.push(lib_doc.as_str());\n         true\n-    };\n+    });\n     return result;\n }"}, {"sha": "40fca0f42f1a27d8a629b6b3835b394ff12562b3", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -83,7 +83,7 @@ impl Context {\n         let rlib_prefix = format!(\"lib{}-\", crate_name);\n \n         let mut matches = ~[];\n-        do filesearch::search(filesearch) |path| {\n+        filesearch::search(filesearch, |path| {\n             match path.filename_str() {\n                 None => FileDoesntMatch,\n                 Some(file) => {\n@@ -135,7 +135,7 @@ impl Context {\n                     }\n                 }\n             }\n-        }\n+        });\n \n         match matches.len() {\n             0 => None,\n@@ -180,7 +180,7 @@ impl Context {\n                     lib.rlib = Some(path.clone());\n                     return true;\n                 }\n-                Some(*) | None => {}\n+                Some(..) | None => {}\n             }\n         }\n         return false;\n@@ -200,7 +200,7 @@ impl Context {\n                     lib.dylib = Some(path.clone());\n                     return true;\n                 }\n-                Some(*) | None => {}\n+                Some(..) | None => {}\n             }\n         }\n         return false;\n@@ -360,7 +360,7 @@ pub fn list_file_metadata(sess: Session,\n     let crate_name = path.filename_str().unwrap();\n     let crate_name = if crate_name.starts_with(\"lib\") {\n         crate_name.slice_from(3) } else { crate_name };\n-    let crate_name = crate_name.split_iter('-').next().unwrap();\n+    let crate_name = crate_name.split('-').next().unwrap();\n     match get_metadata_section(sess, os, path, crate_name) {\n       option::Some(bytes) => decoder::list_crate_metadata(intr, bytes, out),\n       option::None => {"}, {"sha": "1b2ae78c627bc19411ee806cbb5bcbeda16f248a", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -808,7 +808,7 @@ fn check_heap_item(cx: &Context, it: &ast::item) {\n }\n \n static crate_attrs: &'static [&'static str] = &[\n-    \"crate_type\", \"link\", \"feature\", \"no_uv\", \"no_main\", \"no_std\",\n+    \"crate_type\", \"feature\", \"no_uv\", \"no_main\", \"no_std\",\n     \"desc\", \"comment\", \"license\", \"copyright\", // not used in rustc now\n ];\n \n@@ -830,7 +830,7 @@ static other_attrs: &'static [&'static str] = &[\n     \"deprecated\", \"experimental\", \"unstable\", \"stable\", \"locked\", \"frozen\", //item stability\n     \"crate_map\", \"cfg\", \"doc\", \"export_name\", \"link_section\", \"no_freeze\",\n     \"no_mangle\", \"no_send\", \"static_assert\", \"unsafe_no_drop_flag\",\n-    \"packed\", \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\",\n+    \"packed\", \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\", \"link\",\n \n     //mod-level\n     \"path\", \"link_name\", \"link_args\", \"nolink\", \"macro_escape\", \"no_implicit_prelude\","}, {"sha": "a43759a6da7b0f121dc4daeb67a74e752171bf04", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -46,6 +46,7 @@ via `close` and `delete` methods.\n #[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n use std::cast::transmute;\n use std::cast;"}, {"sha": "ca5c75122a6ef5d863c38aca8dc3ba1330360700", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -723,7 +723,7 @@ extern {\n }\n \n // various platform libraries required by libuv\n-#[cfg(not(stage0))]\n+#[cfg(not(stage0), not(target_os = \"android\"))]\n #[link(name = \"pthread\")]\n extern {}\n #[cfg(stage0)]"}, {"sha": "296091d26e693407afa2dea90f816b311bb51ed1", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -66,6 +66,7 @@\n \n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n+#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top"}, {"sha": "2d670cb873fb287065a817549a13538251b0b1cd", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -19,9 +19,9 @@ endif\n %.a: %.o\n \tar crus $@ $<\n %.dylib: %.o\n-\tld -o $@ $< -dylib\n+\t$(CC) -dynamiclib -Wl,-dylib -o $@ $<\n %.so: %.o\n-\tld -o $@ $< -shared\n+\t$(CC) -o $@ $< -shared\n $(TMPDIR)/lib%.o: %.c\n \t$(CC) -c -o $@ $<\n "}, {"sha": "4c2e78db398452be7e20719fad04ef6798378aa7", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // xfail-fast\n+// xfail-pretty\n // aux-build:anon-extern-mod-cross-crate-1.rs\n extern mod anonexternmod;\n "}, {"sha": "ec531d391e42283706b4d15e6b72e8455e491266", "filename": "src/test/run-pass/invoke-external-foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4c82a38cfb2bcf7de2d6323dab0073a70726d/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs?ref=56e4c82a38cfb2bcf7de2d6323dab0073a70726d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // xfail-fast\n+// xfail-pretty\n // aux-build:foreign_lib.rs\n \n // The purpose of this test is to check that we can"}]}