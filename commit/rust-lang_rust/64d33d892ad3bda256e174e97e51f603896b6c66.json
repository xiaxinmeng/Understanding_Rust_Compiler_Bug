{"sha": "64d33d892ad3bda256e174e97e51f603896b6c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZDMzZDg5MmFkM2JkYTI1NmUxNzRlOTdlNTFmNjAzODk2YjZjNjY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-18T22:31:03Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:26Z"}, "message": "check supertraits", "tree": {"sha": "e2fa90a371786132da0f5cf828cb02b73e5c1067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2fa90a371786132da0f5cf828cb02b73e5c1067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64d33d892ad3bda256e174e97e51f603896b6c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64d33d892ad3bda256e174e97e51f603896b6c66", "html_url": "https://github.com/rust-lang/rust/commit/64d33d892ad3bda256e174e97e51f603896b6c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64d33d892ad3bda256e174e97e51f603896b6c66/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a75e0341b6192b20bc271c4a165b9a53d34ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a75e0341b6192b20bc271c4a165b9a53d34ff4", "html_url": "https://github.com/rust-lang/rust/commit/f7a75e0341b6192b20bc271c4a165b9a53d34ff4"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "ac782729bc3f721cd53bc611a7dd444817403bcf", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64d33d892ad3bda256e174e97e51f603896b6c66/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d33d892ad3bda256e174e97e51f603896b6c66/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=64d33d892ad3bda256e174e97e51f603896b6c66", "patch": "@@ -1423,7 +1423,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ty_rptr(_, ty::mt { ty: referent_ty, mutbl }) => {\n+            ty::ty_rptr(_, ty::mt { ty: _, mutbl }) => {\n                 // &mut T or &T\n                 match bound {\n                     ty::BoundCopy => {\n@@ -1871,8 +1871,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_default_impl_candidate(&mut self,\n-                              obligation: &TraitObligation<'tcx>,\n-                              impl_def_id: ast::DefId)\n+                                      obligation: &TraitObligation<'tcx>,\n+                                      impl_def_id: ast::DefId)\n                               -> Result<VtableDefaultImplData<PredicateObligation<'tcx>>,\n                                         SelectionError<'tcx>>\n     {\n@@ -1892,6 +1892,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                            -> VtableDefaultImplData<PredicateObligation<'tcx>>\n     {\n         let derived_cause = self.derived_cause(obligation, ImplDerivedObligation);\n+\n         let obligations = nested.iter().map(|&nested_ty| {\n             // the obligation might be higher-ranked, e.g. for<'a> &'a\n             // int : Copy. In that case, we will wind up with\n@@ -1918,11 +1919,27 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             })\n         }).collect::<Result<_, _>>();\n-        let obligations = match obligations {\n+\n+        let mut obligations = match obligations {\n             Ok(o) => o,\n             Err(ErrorReported) => Vec::new()\n         };\n \n+        let _: Result<(),()> = self.infcx.try(|snapshot| {\n+            let (_, skol_map) =\n+                self.infcx().skolemize_late_bound_regions(&obligation.predicate, snapshot);\n+\n+            let substs = obligation.predicate.to_poly_trait_ref().substs();\n+            let trait_obligations = self.impl_obligations(obligation.cause.clone(),\n+                                                          obligation.recursion_depth + 1,\n+                                                          trait_def_id,\n+                                                          substs,\n+                                                          skol_map,\n+                                                          snapshot);\n+            obligations.push_all(trait_obligations.as_slice());\n+            Ok(())\n+        });\n+\n         debug!(\"vtable_default_impl_data: obligations={}\", obligations.repr(self.tcx()));\n \n         VtableDefaultImplData {"}, {"sha": "c9bfdff6c0e495cd78a089e0d4b2d96fcc2fe421", "filename": "src/test/compile-fail/typeck-default-trait-impl-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64d33d892ad3bda256e174e97e51f603896b6c66/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d33d892ad3bda256e174e97e51f603896b6c66/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs?ref=64d33d892ad3bda256e174e97e51f603896b6c66", "patch": "@@ -24,6 +24,6 @@ fn foo<T:MyTrait>() { bar::<T>() }\n fn bar<T:NotImplemented>() { }\n \n fn main() {\n-    foo::<i32>(); //~ ERROR XXX\n-    bar::<i32>(); //~ ERROR XXX\n+    foo::<i32>(); //~ ERROR the trait `NotImplemented` is not implemented for the type `i32`\n+    bar::<i64>(); //~ ERROR the trait `NotImplemented` is not implemented for the type `i64`\n }"}, {"sha": "06f365211572b37444734e5956b4feacb6b27935", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64d33d892ad3bda256e174e97e51f603896b6c66/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d33d892ad3bda256e174e97e51f603896b6c66/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=64d33d892ad3bda256e174e97e51f603896b6c66", "patch": "@@ -25,14 +25,19 @@ impl MyTrait for .. {}\n \n fn foo<T:MyTrait>() {\n     bar::<Option<T>>()\n-        //~^ ERROR not implemented for the type `Option<T>`\n-        //\n-        // This should probably typecheck. This is #20671.\n+    //~^ ERROR the trait `NotImplemented` is not implemented for the type `core::option::Option<T>`\n+    //\n+    // This should probably typecheck. This is #20671.\n }\n \n fn bar<T:NotImplemented>() { }\n \n+fn test() {\n+    bar::<Option<i32>>();\n+    //~^ ERROR the trait `NotImplemented` is not implemented for the type `core::option::Option<i32>`\n+}\n+\n fn main() {\n-    foo::<i32>(); //~ ERROR not implemented for the type `i32`\n-    bar::<Option<i32>>(); //~ ERROR not implemented for the type `Option<i32>`\n+    foo::<i32>();\n+    //~^ ERROR the trait `NotImplemented` is not implemented for the type `core::option::Option<i32>`\n }"}]}