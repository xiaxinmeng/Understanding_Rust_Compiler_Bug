{"sha": "e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "node_id": "C_kwDOAAsO6NoAKGUwYWE1YWZkN2JkNjk4MTMxNTRlOTdhMjVjYjZjNmI0ZjA1ZWExYmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T22:06:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T22:06:35Z"}, "message": "Auto merge of #13785 - Veykril:run-flycheck, r=Veykril\n\nAdd command for manually running flychecks\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/13125", "tree": {"sha": "a35c90b485ae4c480a5573364439e19b8ce3b9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a35c90b485ae4c480a5573364439e19b8ce3b9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "html_url": "https://github.com/rust-lang/rust/commit/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c2ede549d9a5ec91ec2c20e2b32abd3e6566d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c2ede549d9a5ec91ec2c20e2b32abd3e6566d4", "html_url": "https://github.com/rust-lang/rust/commit/19c2ede549d9a5ec91ec2c20e2b32abd3e6566d4"}, {"sha": "a04feb915a0e5ef348075a3537a95875cb1b1ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04feb915a0e5ef348075a3537a95875cb1b1ffe", "html_url": "https://github.com/rust-lang/rust/commit/a04feb915a0e5ef348075a3537a95875cb1b1ffe"}], "stats": {"total": 213, "additions": 133, "deletions": 80}, "files": [{"sha": "a2d539cf6ca125cafa7f6a07789479ad25d877d6", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "patch": "@@ -138,6 +138,19 @@ impl Request for CancelFlycheck {\n     const METHOD: &'static str = \"rust-analyzer/cancelFlycheck\";\n }\n \n+pub enum RunFlycheck {}\n+\n+impl Notification for RunFlycheck {\n+    type Params = RunFlycheckParams;\n+    const METHOD: &'static str = \"rust-analyzer/runFlycheck\";\n+}\n+\n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct RunFlycheckParams {\n+    pub text_document: Option<TextDocumentIdentifier>,\n+}\n+\n pub enum MatchingBrace {}\n \n impl Request for MatchingBrace {"}, {"sha": "d979317b21875fd4e6c5040bc923f66a3a51032d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 97, "deletions": 76, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "patch": "@@ -703,6 +703,88 @@ impl GlobalState {\n \n     /// Handles an incoming notification.\n     fn on_notification(&mut self, not: Notification) -> Result<()> {\n+        // FIXME: Move these implementations out into a module similar to on_request\n+        fn run_flycheck(this: &mut GlobalState, vfs_path: VfsPath) -> bool {\n+            let file_id = this.vfs.read().0.file_id(&vfs_path);\n+            if let Some(file_id) = file_id {\n+                let world = this.snapshot();\n+                let mut updated = false;\n+                let task = move || -> std::result::Result<(), ide::Cancelled> {\n+                    // Trigger flychecks for all workspaces that depend on the saved file\n+                    // Crates containing or depending on the saved file\n+                    let crate_ids: Vec<_> = world\n+                        .analysis\n+                        .crates_for(file_id)?\n+                        .into_iter()\n+                        .flat_map(|id| world.analysis.transitive_rev_deps(id))\n+                        .flatten()\n+                        .sorted()\n+                        .unique()\n+                        .collect();\n+\n+                    let crate_root_paths: Vec<_> = crate_ids\n+                        .iter()\n+                        .filter_map(|&crate_id| {\n+                            world\n+                                .analysis\n+                                .crate_root(crate_id)\n+                                .map(|file_id| {\n+                                    world\n+                                        .file_id_to_file_path(file_id)\n+                                        .as_path()\n+                                        .map(ToOwned::to_owned)\n+                                })\n+                                .transpose()\n+                        })\n+                        .collect::<ide::Cancellable<_>>()?;\n+                    let crate_root_paths: Vec<_> =\n+                        crate_root_paths.iter().map(Deref::deref).collect();\n+\n+                    // Find all workspaces that have at least one target containing the saved file\n+                    let workspace_ids =\n+                        world.workspaces.iter().enumerate().filter(|(_, ws)| match ws {\n+                            project_model::ProjectWorkspace::Cargo { cargo, .. } => {\n+                                cargo.packages().any(|pkg| {\n+                                    cargo[pkg].targets.iter().any(|&it| {\n+                                        crate_root_paths.contains(&cargo[it].root.as_path())\n+                                    })\n+                                })\n+                            }\n+                            project_model::ProjectWorkspace::Json { project, .. } => project\n+                                .crates()\n+                                .any(|(c, _)| crate_ids.iter().any(|&crate_id| crate_id == c)),\n+                            project_model::ProjectWorkspace::DetachedFiles { .. } => false,\n+                        });\n+\n+                    // Find and trigger corresponding flychecks\n+                    for flycheck in world.flycheck.iter() {\n+                        for (id, _) in workspace_ids.clone() {\n+                            if id == flycheck.id() {\n+                                updated = true;\n+                                flycheck.restart();\n+                                continue;\n+                            }\n+                        }\n+                    }\n+                    // No specific flycheck was triggered, so let's trigger all of them.\n+                    if !updated {\n+                        for flycheck in world.flycheck.iter() {\n+                            flycheck.restart();\n+                        }\n+                    }\n+                    Ok(())\n+                };\n+                this.task_pool.handle.spawn_with_sender(move |_| {\n+                    if let Err(e) = std::panic::catch_unwind(task) {\n+                        tracing::error!(\"flycheck task panicked: {e:?}\")\n+                    }\n+                });\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+\n         NotificationDispatcher { not: Some(not), global_state: self }\n             .on::<lsp_types::notification::Cancel>(|this, params| {\n                 let id: lsp_server::RequestId = match params.id {\n@@ -782,6 +864,20 @@ impl GlobalState {\n                 }\n                 Ok(())\n             })?\n+            .on::<lsp_ext::RunFlycheck>(|this, params| {\n+                if let Some(text_document) = params.text_document {\n+                    if let Ok(vfs_path) = from_proto::vfs_path(&text_document.uri) {\n+                        if run_flycheck(this, vfs_path) {\n+                            return Ok(());\n+                        }\n+                    }\n+                }\n+                // No specific flycheck was triggered, so let's trigger all of them.\n+                for flycheck in this.flycheck.iter() {\n+                    flycheck.restart();\n+                }\n+                Ok(())\n+            })?\n             .on::<lsp_types::notification::DidSaveTextDocument>(|this, params| {\n                 if let Ok(vfs_path) = from_proto::vfs_path(&params.text_document.uri) {\n                     // Re-fetch workspaces if a workspace related file has changed\n@@ -792,82 +888,7 @@ impl GlobalState {\n                         }\n                     }\n \n-                    let file_id = this.vfs.read().0.file_id(&vfs_path);\n-                    if let Some(file_id) = file_id {\n-                        let world = this.snapshot();\n-                        let mut updated = false;\n-                        let task = move || -> std::result::Result<(), ide::Cancelled> {\n-                            // Trigger flychecks for all workspaces that depend on the saved file\n-                            // Crates containing or depending on the saved file\n-                            let crate_ids: Vec<_> = world\n-                                .analysis\n-                                .crates_for(file_id)?\n-                                .into_iter()\n-                                .flat_map(|id| world.analysis.transitive_rev_deps(id))\n-                                .flatten()\n-                                .sorted()\n-                                .unique()\n-                                .collect();\n-\n-                            let crate_root_paths: Vec<_> = crate_ids\n-                                .iter()\n-                                .filter_map(|&crate_id| {\n-                                    world\n-                                        .analysis\n-                                        .crate_root(crate_id)\n-                                        .map(|file_id| {\n-                                            world\n-                                                .file_id_to_file_path(file_id)\n-                                                .as_path()\n-                                                .map(ToOwned::to_owned)\n-                                        })\n-                                        .transpose()\n-                                })\n-                                .collect::<ide::Cancellable<_>>()?;\n-                            let crate_root_paths: Vec<_> =\n-                                crate_root_paths.iter().map(Deref::deref).collect();\n-\n-                            // Find all workspaces that have at least one target containing the saved file\n-                            let workspace_ids =\n-                                world.workspaces.iter().enumerate().filter(|(_, ws)| match ws {\n-                                    project_model::ProjectWorkspace::Cargo { cargo, .. } => {\n-                                        cargo.packages().any(|pkg| {\n-                                            cargo[pkg].targets.iter().any(|&it| {\n-                                                crate_root_paths.contains(&cargo[it].root.as_path())\n-                                            })\n-                                        })\n-                                    }\n-                                    project_model::ProjectWorkspace::Json { project, .. } => {\n-                                        project.crates().any(|(c, _)| {\n-                                            crate_ids.iter().any(|&crate_id| crate_id == c)\n-                                        })\n-                                    }\n-                                    project_model::ProjectWorkspace::DetachedFiles { .. } => false,\n-                                });\n-\n-                            // Find and trigger corresponding flychecks\n-                            for flycheck in world.flycheck.iter() {\n-                                for (id, _) in workspace_ids.clone() {\n-                                    if id == flycheck.id() {\n-                                        updated = true;\n-                                        flycheck.restart();\n-                                        continue;\n-                                    }\n-                                }\n-                            }\n-                            // No specific flycheck was triggered, so let's trigger all of them.\n-                            if !updated {\n-                                for flycheck in world.flycheck.iter() {\n-                                    flycheck.restart();\n-                                }\n-                            }\n-                            Ok(())\n-                        };\n-                        this.task_pool.handle.spawn_with_sender(move |_| {\n-                            if let Err(e) = std::panic::catch_unwind(task) {\n-                                tracing::error!(\"DidSaveTextDocument flycheck task panicked: {e:?}\")\n-                            }\n-                        });\n+                    if run_flycheck(this, vfs_path) {\n                         return Ok(());\n                     }\n                 }"}, {"sha": "308a92bebe06d931e18de3944f501144fd3ef89e", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 61fe425627f9baaa\n+lsp_ext.rs hash: 1cb29d3afa36e743\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "bfaad1edcea56ebdcb1427f2ffe0b6e08ee97cd5", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "patch": "@@ -246,6 +246,11 @@\n                 \"command\": \"rust-analyzer.cancelFlycheck\",\n                 \"title\": \"Cancel running flychecks\",\n                 \"category\": \"rust-analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.runFlycheck\",\n+                \"title\": \"Run flycheck\",\n+                \"category\": \"rust-analyzer\"\n             }\n         ],\n         \"keybindings\": ["}, {"sha": "e0b4bb63c31244afed789a62e811405cfd90cf84", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "patch": "@@ -788,21 +788,30 @@ export function openDocs(ctx: CtxInit): Cmd {\n \n export function cancelFlycheck(ctx: CtxInit): Cmd {\n     return async () => {\n+        await ctx.client.sendRequest(ra.cancelFlycheck);\n+    };\n+}\n+\n+export function runFlycheck(ctx: CtxInit): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n         const client = ctx.client;\n-        await client.sendRequest(ra.cancelFlycheck);\n+        const params = editor ? { uri: editor.document.uri.toString() } : null;\n+\n+        await client.sendNotification(ra.runFlycheck, { textDocument: params });\n     };\n }\n \n export function resolveCodeAction(ctx: CtxInit): Cmd {\n     return async (params: lc.CodeAction) => {\n         const client = ctx.client;\n         params.command = undefined;\n-        const item = await client?.sendRequest(lc.CodeActionResolveRequest.type, params);\n+        const item = await client.sendRequest(lc.CodeActionResolveRequest.type, params);\n         if (!item?.edit) {\n             return;\n         }\n         const itemEdit = item.edit;\n-        const edit = await client?.protocol2CodeConverter.asWorkspaceEdit(itemEdit);\n+        const edit = await client.protocol2CodeConverter.asWorkspaceEdit(itemEdit);\n         // filter out all text edits and recreate the WorkspaceEdit without them so we can apply\n         // snippet edits on our own\n         const lcFileSystemEdit = {"}, {"sha": "78da4e959c657bc1b810cafc572f590113d89e72", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "patch": "@@ -81,6 +81,10 @@ export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, Te\n \n export const cancelFlycheck = new lc.RequestType0<void, void>(\"rust-analyzer/cancelFlycheck\");\n \n+export const runFlycheck = new lc.NotificationType<{\n+    textDocument: lc.TextDocumentIdentifier | null;\n+}>(\"rust-analyzer/runFlycheck\");\n+\n // Experimental extensions\n \n export interface SsrParams {"}, {"sha": "c5fc44b4f9f77698c0ee37eb919e5ae43a32018e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "patch": "@@ -150,6 +150,7 @@ function createCommands(): Record<string, CommandFactory> {\n         moveItemUp: { enabled: commands.moveItemUp },\n         moveItemDown: { enabled: commands.moveItemDown },\n         cancelFlycheck: { enabled: commands.cancelFlycheck },\n+        runFlycheck: { enabled: commands.runFlycheck },\n         ssr: { enabled: commands.ssr },\n         serverVersion: { enabled: commands.serverVersion },\n         // Internal commands which are invoked by the server."}]}