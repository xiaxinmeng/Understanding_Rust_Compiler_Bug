{"sha": "8b049ec393230e4b9fea3022a3ebf34e2af5395d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDQ5ZWMzOTMyMzBlNGI5ZmVhMzAyMmEzZWJmMzRlMmFmNTM5NWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-25T02:30:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-25T02:30:47Z"}, "message": "Merge #8942\n\n8942: Add `library` semantic token modifier to items from other crates r=arzg a=arzg\n\nCloses #5772.\r\n\r\nA lot of code here is pretty repetitive; please let me know if you have any ideas how to improve it, or whether it\u2019s fine as-is.\r\n\r\nSide-note: How can I add tests for this? I don\u2019t see a way for the test Rust code in `test_highlighting` to reference other crates to observe the new behaviour.\r\n\n\nCo-authored-by: Aramis Razzaghipour <aramisnoah@gmail.com>", "tree": {"sha": "d75b9290e907898027eab2e723ed1c0040e43e4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d75b9290e907898027eab2e723ed1c0040e43e4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b049ec393230e4b9fea3022a3ebf34e2af5395d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrGFXCRBK7hj4Ov3rIwAA0OIIAIU3eBBRJuEz5VCeJafzIFyZ\nsiRZQO3FP7BudmMhCjiYQeo3+E/sG6TZaSk172GFbAA8p/Gb1v6vk6u8gj/aqRdh\nwxL35mTQ1ZNVl4Kky12Xm03ABRfoPkX/8+S6V9EIgPC2p978YFTw7P83jicsrOsL\nGmDZBt2um1vEZrJ2hVR21saI9kJWVnAOI2hl/31xQ1L/LCpVOKU07233nJNTwVeR\n+TKVheIXW9/jR4IJZmGUjrZ+n9KZ+3Tr9HIQbustqyp1TqK4OO1//N9LLfGu8iZO\nlW77uaL47BT0ygv2mMWzT7CWMERFIw7lprPmxfgbqljbpXrCDmFVEq8fcKZBLHw=\n=vyTt\n-----END PGP SIGNATURE-----\n", "payload": "tree d75b9290e907898027eab2e723ed1c0040e43e4e\nparent 6d473c0a8f6acecbae680b69528b3f88a31dc5fc\nparent d75277b66b07e3fa4fed5088b92c6f65b2de8fe9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621909847 +0000\ncommitter GitHub <noreply@github.com> 1621909847 +0000\n\nMerge #8942\n\n8942: Add `library` semantic token modifier to items from other crates r=arzg a=arzg\n\nCloses #5772.\r\n\r\nA lot of code here is pretty repetitive; please let me know if you have any ideas how to improve it, or whether it\u2019s fine as-is.\r\n\r\nSide-note: How can I add tests for this? I don\u2019t see a way for the test Rust code in `test_highlighting` to reference other crates to observe the new behaviour.\r\n\n\nCo-authored-by: Aramis Razzaghipour <aramisnoah@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b049ec393230e4b9fea3022a3ebf34e2af5395d", "html_url": "https://github.com/rust-lang/rust/commit/8b049ec393230e4b9fea3022a3ebf34e2af5395d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b049ec393230e4b9fea3022a3ebf34e2af5395d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d473c0a8f6acecbae680b69528b3f88a31dc5fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d473c0a8f6acecbae680b69528b3f88a31dc5fc", "html_url": "https://github.com/rust-lang/rust/commit/6d473c0a8f6acecbae680b69528b3f88a31dc5fc"}, {"sha": "d75277b66b07e3fa4fed5088b92c6f65b2de8fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9", "html_url": "https://github.com/rust-lang/rust/commit/d75277b66b07e3fa4fed5088b92c6f65b2de8fe9"}], "stats": {"total": 186, "additions": 124, "deletions": 62}, "files": [{"sha": "cdf65a0445059c99f4c8b675004a2ca31d43ffba", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -551,10 +551,6 @@ impl Struct {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.struct_data(self.id).name.clone()\n     }\n@@ -639,10 +635,6 @@ impl Enum {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.enum_data(self.id).name.clone()\n     }\n@@ -672,6 +664,7 @@ impl Variant {\n     pub fn module(self, db: &dyn HirDatabase) -> Module {\n         self.parent.module(db)\n     }\n+\n     pub fn parent_enum(self, _db: &dyn HirDatabase) -> Enum {\n         self.parent\n     }\n@@ -728,10 +721,6 @@ impl Adt {\n         }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        self.module(db).krate()\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         match self {\n             Adt::Struct(s) => s.name(db),\n@@ -820,10 +809,6 @@ impl Function {\n         self.id.lookup(db.upcast()).module(db.upcast()).into()\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.function_data(self.id).name.clone()\n     }\n@@ -1013,10 +998,6 @@ impl Const {\n         Module { id: self.id.lookup(db.upcast()).module(db.upcast()) }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         db.const_data(self.id).name.clone()\n     }\n@@ -1044,10 +1025,6 @@ impl Static {\n         Module { id: self.id.lookup(db.upcast()).module(db.upcast()) }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         db.static_data(self.id).name.clone()\n     }\n@@ -1111,10 +1088,6 @@ impl TypeAlias {\n         Module { id: self.id.lookup(db.upcast()).module(db.upcast()) }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        self.module(db).krate()\n-    }\n-\n     pub fn type_ref(self, db: &dyn HirDatabase) -> Option<TypeRef> {\n         db.type_alias_data(self.id).type_ref.as_deref().cloned()\n     }\n@@ -1666,10 +1639,6 @@ impl Impl {\n         self.id.lookup(db.upcast()).container.into()\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        Crate { id: self.module(db).id.krate() }\n-    }\n-\n     pub fn is_builtin_derive(self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {\n         let src = self.source(db)?;\n         let item = src.file_id.is_builtin_derive(db.upcast())?;"}, {"sha": "85f8877371473f06daf7742ebecfdf38a2fac392", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -219,7 +219,7 @@ fn hint_iterator(\n ) -> Option<SmolStr> {\n     let db = sema.db;\n     let strukt = ty.strip_references().as_adt()?;\n-    let krate = strukt.krate(db);\n+    let krate = strukt.module(db).krate();\n     if krate != famous_defs.core()? {\n         return None;\n     }"}, {"sha": "ce1c76f37182865a5e3284e6286fc936c9b2ff80", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -227,7 +227,7 @@ pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) ->\n     let func = def.source(sema.db)?;\n     let name_string = def.name(sema.db).to_string();\n \n-    let root = def.krate(sema.db)?.root_module(sema.db);\n+    let root = def.module(sema.db).krate().root_module(sema.db);\n \n     let kind = if name_string == \"main\" && def.module(sema.db) == root {\n         RunnableKind::Bin"}, {"sha": "cf1a8bad7968009e750f33ecd3e20f7e77370edb", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -80,6 +80,7 @@ pub(crate) fn highlight(\n         &mut hl,\n         &sema,\n         InFile::new(file_id.into(), &root),\n+        sema.scope(&root).krate(),\n         range_to_highlight,\n         syntactic_name_ref_highlighting,\n     );\n@@ -90,6 +91,7 @@ fn traverse(\n     hl: &mut Highlights,\n     sema: &Semantics<RootDatabase>,\n     root: InFile<&SyntaxNode>,\n+    krate: Option<hir::Crate>,\n     range_to_highlight: TextRange,\n     syntactic_name_ref_highlighting: bool,\n ) {\n@@ -209,6 +211,7 @@ fn traverse(\n \n         if let Some((mut highlight, binding_hash)) = highlight::element(\n             &sema,\n+            krate,\n             &mut bindings_shadow_count,\n             syntactic_name_ref_highlighting,\n             element_to_highlight.clone(),"}, {"sha": "b4a3d39c9192c1cf84dd1d1d6871ea68d9c71192", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 57, "deletions": 27, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -19,6 +19,7 @@ use crate::{\n \n pub(super) fn element(\n     sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n     bindings_shadow_count: &mut FxHashMap<hir::Name, u32>,\n     syntactic_name_ref_highlighting: bool,\n     element: SyntaxElement,\n@@ -46,8 +47,10 @@ pub(super) fn element(\n \n             match name_kind {\n                 Some(NameClass::ExternCrate(_)) => SymbolKind::Module.into(),\n-                Some(NameClass::Definition(def)) => highlight_def(db, def) | HlMod::Definition,\n-                Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n+                Some(NameClass::Definition(def)) => {\n+                    highlight_def(db, krate, def) | HlMod::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_def(db, krate, def),\n                 Some(NameClass::PatFieldShorthand { field_ref, .. }) => {\n                     let mut h = HlTag::Symbol(SymbolKind::Field).into();\n                     if let Definition::Field(field) = field_ref {\n@@ -82,7 +85,7 @@ pub(super) fn element(\n                                 }\n                             };\n \n-                            let mut h = highlight_def(db, def);\n+                            let mut h = highlight_def(db, krate, def);\n \n                             if let Definition::Local(local) = &def {\n                                 if is_consumed_lvalue(name_ref.syntax().clone().into(), local, db) {\n@@ -136,9 +139,11 @@ pub(super) fn element(\n             let lifetime = element.into_node().and_then(ast::Lifetime::cast).unwrap();\n \n             match NameClass::classify_lifetime(sema, &lifetime) {\n-                Some(NameClass::Definition(def)) => highlight_def(db, def) | HlMod::Definition,\n+                Some(NameClass::Definition(def)) => {\n+                    highlight_def(db, krate, def) | HlMod::Definition\n+                }\n                 None => match NameRefClass::classify_lifetime(sema, &lifetime) {\n-                    Some(NameRefClass::Definition(def)) => highlight_def(db, def),\n+                    Some(NameRefClass::Definition(def)) => highlight_def(db, krate, def),\n                     _ => SymbolKind::LifetimeParam.into(),\n                 },\n                 _ => Highlight::from(SymbolKind::LifetimeParam) | HlMod::Definition,\n@@ -277,12 +282,12 @@ pub(super) fn element(\n         hash((name, shadow_count))\n     }\n }\n-fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n-    match def {\n-        Definition::Macro(_) => HlTag::Symbol(SymbolKind::Macro),\n-        Definition::Field(_) => HlTag::Symbol(SymbolKind::Field),\n+fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition) -> Highlight {\n+    let mut h = match def {\n+        Definition::Macro(_) => Highlight::new(HlTag::Symbol(SymbolKind::Macro)),\n+        Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::ModuleDef(def) => match def {\n-            hir::ModuleDef::Module(_) => HlTag::Symbol(SymbolKind::Module),\n+            hir::ModuleDef::Module(_) => Highlight::new(HlTag::Symbol(SymbolKind::Module)),\n             hir::ModuleDef::Function(func) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Function));\n                 if let Some(item) = func.as_assoc_item(db) {\n@@ -314,14 +319,22 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if func.is_async(db) {\n                     h |= HlMod::Async;\n                 }\n-                return h;\n+\n+                h\n             }\n-            hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HlTag::Symbol(SymbolKind::Struct),\n-            hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HlTag::Symbol(SymbolKind::Enum),\n-            hir::ModuleDef::Adt(hir::Adt::Union(_)) => HlTag::Symbol(SymbolKind::Union),\n-            hir::ModuleDef::Variant(_) => HlTag::Symbol(SymbolKind::Variant),\n+            hir::ModuleDef::Adt(adt) => {\n+                let h = match adt {\n+                    hir::Adt::Struct(_) => HlTag::Symbol(SymbolKind::Struct),\n+                    hir::Adt::Enum(_) => HlTag::Symbol(SymbolKind::Enum),\n+                    hir::Adt::Union(_) => HlTag::Symbol(SymbolKind::Union),\n+                };\n+\n+                Highlight::new(h)\n+            }\n+            hir::ModuleDef::Variant(_) => Highlight::new(HlTag::Symbol(SymbolKind::Variant)),\n             hir::ModuleDef::Const(konst) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Const));\n+\n                 if let Some(item) = konst.as_assoc_item(db) {\n                     h |= HlMod::Associated;\n                     match item.container(db) {\n@@ -336,18 +349,20 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                     }\n                 }\n \n-                return h;\n+                h\n             }\n             hir::ModuleDef::Trait(trait_) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Trait));\n \n                 if trait_.is_unsafe(db) {\n                     h |= HlMod::Unsafe;\n                 }\n-                return h;\n+\n+                h\n             }\n             hir::ModuleDef::TypeAlias(type_) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::TypeAlias));\n+\n                 if let Some(item) = type_.as_assoc_item(db) {\n                     h |= HlMod::Associated;\n                     match item.container(db) {\n@@ -361,23 +376,30 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                         }\n                     }\n                 }\n-                return h;\n+\n+                h\n             }\n-            hir::ModuleDef::BuiltinType(_) => HlTag::BuiltinType,\n+            hir::ModuleDef::BuiltinType(_) => Highlight::new(HlTag::BuiltinType),\n             hir::ModuleDef::Static(s) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Static));\n+\n                 if s.is_mut(db) {\n                     h |= HlMod::Mutable;\n                     h |= HlMod::Unsafe;\n                 }\n-                return h;\n+\n+                h\n             }\n         },\n-        Definition::SelfType(_) => HlTag::Symbol(SymbolKind::Impl),\n+        Definition::SelfType(_) => Highlight::new(HlTag::Symbol(SymbolKind::Impl)),\n         Definition::GenericParam(it) => match it {\n-            hir::GenericParam::TypeParam(_) => HlTag::Symbol(SymbolKind::TypeParam),\n-            hir::GenericParam::ConstParam(_) => HlTag::Symbol(SymbolKind::ConstParam),\n-            hir::GenericParam::LifetimeParam(_) => HlTag::Symbol(SymbolKind::LifetimeParam),\n+            hir::GenericParam::TypeParam(_) => Highlight::new(HlTag::Symbol(SymbolKind::TypeParam)),\n+            hir::GenericParam::ConstParam(_) => {\n+                Highlight::new(HlTag::Symbol(SymbolKind::ConstParam))\n+            }\n+            hir::GenericParam::LifetimeParam(_) => {\n+                Highlight::new(HlTag::Symbol(SymbolKind::LifetimeParam))\n+            }\n         },\n         Definition::Local(local) => {\n             let tag = if local.is_self(db) {\n@@ -395,11 +417,19 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n             if ty.as_callable(db).is_some() || ty.impls_fnonce(db) {\n                 h |= HlMod::Callable;\n             }\n-            return h;\n+            h\n         }\n-        Definition::Label(_) => HlTag::Symbol(SymbolKind::Label),\n+        Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n+    };\n+\n+    let is_from_other_crate = def.module(db).map(hir::Module::krate) != krate;\n+    let is_builtin_type = matches!(def, Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)));\n+\n+    if is_from_other_crate && !is_builtin_type {\n+        h |= HlMod::Library;\n     }\n-    .into()\n+\n+    h\n }\n \n fn highlight_func_by_name_ref("}, {"sha": "e94f17cd98b4e0e1a7f95f4a557a3e524d6cbf33", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -67,6 +67,8 @@ pub enum HlMod {\n     Trait,\n     /// Used with keywords like `async` and `await`.\n     Async,\n+    /// Used for items from other crates.\n+    Library,\n     // Keep this last!\n     /// Used for unsafe functions, unsafe traits, mutable statics, union accesses and unsafe operations.\n     Unsafe,\n@@ -189,6 +191,7 @@ impl HlMod {\n         HlMod::Static,\n         HlMod::Trait,\n         HlMod::Async,\n+        HlMod::Library,\n         HlMod::Unsafe,\n     ];\n \n@@ -207,6 +210,7 @@ impl HlMod {\n             HlMod::Static => \"static\",\n             HlMod::Trait => \"trait\",\n             HlMod::Async => \"async\",\n+            HlMod::Library => \"library\",\n             HlMod::Unsafe => \"unsafe\",\n         }\n     }"}, {"sha": "055d2110901ac554b1f052789af28a4a8010490a", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -248,4 +248,20 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration unsafe\">Dangerous</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"keyword\">impl</span> <span class=\"trait unsafe\">Dangerous</span> <span class=\"keyword\">for</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">impl</span> <span class=\"trait unsafe\">Dangerous</span> <span class=\"keyword\">for</span> <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">use_foo_items</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bob</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"struct library\">Person</span> <span class=\"brace\">{</span>\n+        <span class=\"field library\">name</span><span class=\"colon\">:</span> <span class=\"string_literal\">\"Bob\"</span><span class=\"comma\">,</span>\n+        <span class=\"field library\">age</span><span class=\"colon\">:</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"module library\">consts</span><span class=\"operator\">::</span><span class=\"constant library\">NUMBER</span><span class=\"comma\">,</span>\n+    <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+\n+    <span class=\"keyword control\">if</span> <span class=\"keyword\">let</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Die</span> <span class=\"operator\">=</span> <span class=\"variable\">control_flow</span> <span class=\"brace\">{</span>\n+        foo::<span class=\"macro\">die!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+\n+</code></pre>\n\\ No newline at end of file"}, {"sha": "be4447ebbf4c64d33825cd3be01e0575b1f90864", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -10,6 +10,7 @@ use crate::{fixture, FileRange, HlTag, TextRange};\n fn test_highlighting() {\n     check_highlighting(\n         r#\"\n+//- /main.rs crate:main deps:foo\n use inner::{self as inner_mod};\n mod inner {}\n \n@@ -222,6 +223,43 @@ async fn async_main() {\n \n unsafe trait Dangerous {}\n impl Dangerous for () {}\n+\n+fn use_foo_items() {\n+    let bob = foo::Person {\n+        name: \"Bob\",\n+        age: foo::consts::NUMBER,\n+    };\n+\n+    let control_flow = foo::identity(foo::ControlFlow::Continue);\n+\n+    if let foo::ControlFlow::Die = control_flow {\n+        foo::die!();\n+    }\n+}\n+\n+\n+//- /foo.rs crate:foo\n+pub struct Person {\n+    pub name: &'static str,\n+    pub age: u8,\n+}\n+\n+pub enum ControlFlow {\n+    Continue,\n+    Die,\n+}\n+\n+pub fn identity<T>(x: T) -> T { x }\n+\n+pub mod consts {\n+    pub const NUMBER: i64 = 92;\n+}\n+\n+macro_rules! die {\n+    () => {\n+        panic!();\n+    };\n+}\n \"#\n         .trim(),\n         expect_file![\"./test_data/highlighting.html\"],"}, {"sha": "6129af95fcd7706bcac7b1487fdafa60833ff0f2", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -92,6 +92,7 @@ define_semantic_token_modifiers![\n     (MUTABLE, \"mutable\"),\n     (CONSUMING, \"consuming\"),\n     (ASYNC, \"async\"),\n+    (LIBRARY, \"library\"),\n     (UNSAFE, \"unsafe\"),\n     (ATTRIBUTE_MODIFIER, \"attribute\"),\n     (TRAIT_MODIFIER, \"trait\"),"}, {"sha": "ca95139284b90cea901d5157f1b3496c93aa2681", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b049ec393230e4b9fea3022a3ebf34e2af5395d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=8b049ec393230e4b9fea3022a3ebf34e2af5395d", "patch": "@@ -504,6 +504,7 @@ fn semantic_token_type_and_modifiers(\n             HlMod::Mutable => semantic_tokens::MUTABLE,\n             HlMod::Consuming => semantic_tokens::CONSUMING,\n             HlMod::Async => semantic_tokens::ASYNC,\n+            HlMod::Library => semantic_tokens::LIBRARY,\n             HlMod::Unsafe => semantic_tokens::UNSAFE,\n             HlMod::Callable => semantic_tokens::CALLABLE,\n             HlMod::Static => lsp_types::SemanticTokenModifier::STATIC,"}]}