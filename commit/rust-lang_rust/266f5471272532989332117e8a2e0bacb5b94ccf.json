{"sha": "266f5471272532989332117e8a2e0bacb5b94ccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NmY1NDcxMjcyNTMyOTg5MzMyMTE3ZThhMmUwYmFjYjViOTRjY2Y=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-09T19:05:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-16T18:21:37Z"}, "message": "ast: Keep `extern` qualifiers in functions more precisely", "tree": {"sha": "7e1b0b6d18038d001e198b4a6173d529f528ab89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1b0b6d18038d001e198b4a6173d529f528ab89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/266f5471272532989332117e8a2e0bacb5b94ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/266f5471272532989332117e8a2e0bacb5b94ccf", "html_url": "https://github.com/rust-lang/rust/commit/266f5471272532989332117e8a2e0bacb5b94ccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/266f5471272532989332117e8a2e0bacb5b94ccf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f00849dc495f97ea9eeef07b958664bfb755ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f00849dc495f97ea9eeef07b958664bfb755ae3", "html_url": "https://github.com/rust-lang/rust/commit/5f00849dc495f97ea9eeef07b958664bfb755ae3"}], "stats": {"total": 206, "additions": 118, "deletions": 88}, "files": [{"sha": "12f6f66e96b50cc038d380c4ee5791bf6cf8267d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -1219,7 +1219,7 @@ impl<'a> LoweringContext<'a> {\n                                     ImplTraitContext::disallowed(),\n                                 ),\n                                 unsafety: f.unsafety,\n-                                abi: this.lower_abi(f.abi),\n+                                abi: this.lower_extern(f.ext),\n                                 decl: this.lower_fn_decl(&f.decl, None, false, None),\n                                 param_names: this.lower_fn_params_to_names(&f.decl),\n                             }))"}, {"sha": "2dc7e014445d1eeb02ca3b196ae66172a4f1baa5", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -735,7 +735,7 @@ impl LoweringContext<'_> {\n \n     fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod {\n         hir::ForeignMod {\n-            abi: self.lower_abi(fm.abi),\n+            abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n             items: fm.items\n                 .iter()\n                 .map(|x| self.lower_foreign_item(x))\n@@ -1283,7 +1283,7 @@ impl LoweringContext<'_> {\n             unsafety: h.unsafety,\n             asyncness: self.lower_asyncness(h.asyncness.node),\n             constness: h.constness.node,\n-            abi: self.lower_abi(h.abi),\n+            abi: self.lower_extern(h.ext),\n         }\n     }\n \n@@ -1294,6 +1294,14 @@ impl LoweringContext<'_> {\n         })\n     }\n \n+    pub(super) fn lower_extern(&mut self, ext: Extern) -> abi::Abi {\n+        match ext {\n+            Extern::None => abi::Abi::Rust,\n+            Extern::Implicit => abi::Abi::C,\n+            Extern::Explicit(abi) => self.lower_abi(abi),\n+        }\n+    }\n+\n     fn error_on_invalid_abi(&self, abi: Abi) {\n         struct_span_err!(\n             self.sess,"}, {"sha": "fe86d03c6e7820292b71a5e8cbab3e18c4054c5b", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -114,7 +114,7 @@ impl<'a> Parser<'a> {\n                     unsafety: Unsafety::Normal,\n                     asyncness: respan(fn_span, IsAsync::NotAsync),\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi,\n+                    ext: Extern::from_abi(abi),\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n@@ -143,14 +143,14 @@ impl<'a> Parser<'a> {\n                 if self.check_keyword(kw::Extern) {\n                     self.sess.gated_spans.gate(sym::const_extern_fn, lo.to(self.token.span));\n                 }\n-                let abi = self.parse_extern_abi()?;\n+                let ext = self.parse_extern()?;\n                 self.bump(); // `fn`\n \n                 let header = FnHeader {\n                     unsafety,\n                     asyncness: respan(const_span, IsAsync::NotAsync),\n                     constness: respan(const_span, Constness::Const),\n-                    abi,\n+                    ext,\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n@@ -193,7 +193,7 @@ impl<'a> Parser<'a> {\n                     unsafety,\n                     asyncness,\n                     constness: respan(fn_span, Constness::NotConst),\n-                    abi: Abi::new(sym::Rust, fn_span),\n+                    ext: Extern::None,\n                 };\n                 return self.parse_item_fn(lo, vis, attrs, header);\n             }\n@@ -230,7 +230,7 @@ impl<'a> Parser<'a> {\n                 unsafety: Unsafety::Normal,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n-                abi: Abi::new(sym::Rust, fn_span),\n+                ext: Extern::None,\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n@@ -242,14 +242,14 @@ impl<'a> Parser<'a> {\n             self.bump(); // `unsafe`\n             // `{` is also expected after `unsafe`; in case of error, include it in the diagnostic.\n             self.check(&token::OpenDelim(token::Brace));\n-            let abi = self.parse_extern_abi()?;\n+            let ext = self.parse_extern()?;\n             self.expect_keyword(kw::Fn)?;\n             let fn_span = self.prev_span;\n             let header = FnHeader {\n                 unsafety: Unsafety::Unsafe,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n-                abi,\n+                ext,\n             };\n             return self.parse_item_fn(lo, vis, attrs, header);\n         }\n@@ -1100,7 +1100,7 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_mod(\n         &mut self,\n         lo: Span,\n-        abi: Abi,\n+        abi: Option<Abi>,\n         visibility: Visibility,\n         mut attrs: Vec<Attribute>,\n         extern_sp: Span,\n@@ -1775,9 +1775,16 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         header: FnHeader,\n     ) -> PResult<'a, Option<P<Item>>> {\n+        let is_c_abi = match header.ext {\n+            ast::Extern::None => false,\n+            ast::Extern::Implicit => true,\n+            ast::Extern::Explicit(abi) => abi.symbol == sym::C,\n+        };\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: false,\n-            allow_c_variadic: header.abi.symbol == sym::C && header.unsafety == Unsafety::Unsafe,\n+            // FIXME: Parsing should not depend on ABI or unsafety and\n+            // the variadic parameter should always be parsed.\n+            allow_c_variadic: is_c_abi && header.unsafety == Unsafety::Unsafe,\n             is_name_required: |_| true,\n         })?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -1905,19 +1912,19 @@ impl<'a> Parser<'a> {\n         }\n         let asyncness = respan(self.prev_span, asyncness);\n         let unsafety = self.parse_unsafety();\n-        let (constness, unsafety, abi) = if is_const_fn {\n-            (respan(const_span, Constness::Const), unsafety, Abi::default())\n+        let (constness, unsafety, ext) = if is_const_fn {\n+            (respan(const_span, Constness::Const), unsafety, Extern::None)\n         } else {\n-            let abi = self.parse_extern_abi()?;\n-            (respan(self.prev_span, Constness::NotConst), unsafety, abi)\n+            let ext = self.parse_extern()?;\n+            (respan(self.prev_span, Constness::NotConst), unsafety, ext)\n         };\n         if !self.eat_keyword(kw::Fn) {\n             // It is possible for `expect_one_of` to recover given the contents of\n             // `self.expected_tokens`, therefore, do not use `self.unexpected()` which doesn't\n             // account for this.\n             if !self.expect_one_of(&[], &[])? { unreachable!() }\n         }\n-        Ok(FnHeader { constness, unsafety, asyncness, abi })\n+        Ok(FnHeader { constness, unsafety, asyncness, ext })\n     }\n \n     /// Parse the \"signature\", including the identifier, parameters, and generics of a function."}, {"sha": "2d05a696791ffa01357eaea1b12e56e6b13b3907", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -15,7 +15,7 @@ use crate::{Directory, DirectoryOwnership};\n use crate::lexer::UnmatchedBrace;\n \n use syntax::ast::{\n-    self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Ident,\n+    self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident,\n     IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n };\n \n@@ -1212,23 +1212,20 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `extern string_literal?`.\n-    /// If `extern` is not found, the Rust ABI is used.\n-    /// If `extern` is found and a `string_literal` does not follow, the C ABI is used.\n-    fn parse_extern_abi(&mut self) -> PResult<'a, Abi> {\n+    fn parse_extern(&mut self) -> PResult<'a, Extern> {\n         Ok(if self.eat_keyword(kw::Extern) {\n-            self.parse_opt_abi()?\n+            Extern::from_abi(self.parse_opt_abi()?)\n         } else {\n-            Abi::default()\n+            Extern::None\n         })\n     }\n \n     /// Parses a string literal as an ABI spec.\n-    /// If one is not found, the \"C\" ABI is used.\n-    fn parse_opt_abi(&mut self) -> PResult<'a, Abi> {\n-        let span = if self.token.can_begin_literal_or_bool() {\n+    fn parse_opt_abi(&mut self) -> PResult<'a, Option<Abi>> {\n+        if self.token.can_begin_literal_or_bool() {\n             let ast::Lit { span, kind, .. } = self.parse_lit()?;\n             match kind {\n-                ast::LitKind::Str(symbol, _) => return Ok(Abi::new(symbol, span)),\n+                ast::LitKind::Str(symbol, _) => return Ok(Some(Abi { symbol, span })),\n                 ast::LitKind::Err(_) => {}\n                 _ => {\n                     self.struct_span_err(span, \"non-string ABI literal\")\n@@ -1241,11 +1238,8 @@ impl<'a> Parser<'a> {\n                         .emit();\n                 }\n             }\n-            span\n-        } else {\n-            self.prev_span\n-        };\n-        Ok(Abi::new(sym::C, span))\n+        }\n+        Ok(None)\n     }\n \n     /// We are parsing `async fn`. If we are on Rust 2015, emit an error."}, {"sha": "8e6bc29be521803e02472068d1eb97148690df80", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -287,7 +287,7 @@ impl<'a> Parser<'a> {\n         */\n \n         let unsafety = self.parse_unsafety();\n-        let abi = self.parse_extern_abi()?;\n+        let ext = self.parse_extern()?;\n         self.expect_keyword(kw::Fn)?;\n         let cfg = ParamCfg {\n             is_self_allowed: false,\n@@ -296,7 +296,7 @@ impl<'a> Parser<'a> {\n         };\n         let decl = self.parse_fn_decl(cfg, false)?;\n         Ok(TyKind::BareFn(P(BareFnTy {\n-            abi,\n+            ext,\n             unsafety,\n             generic_params,\n             decl,"}, {"sha": "255938a193c9763fafc7a7b5d3997c0dba507d14", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -30,9 +30,8 @@ use crate::{id_from_def_id, id_from_node_id, SaveContext};\n use rls_data::{SigElement, Signature};\n \n use rustc::hir::def::{Res, DefKind};\n-use syntax::ast::{self, NodeId};\n+use syntax::ast::{self, Extern, NodeId};\n use syntax::print::pprust;\n-use syntax_pos::sym;\n \n pub fn item_signature(item: &ast::Item, scx: &SaveContext<'_, '_>) -> Option<Signature> {\n     if !scx.config.signatures {\n@@ -157,9 +156,11 @@ fn text_sig(text: String) -> Signature {\n     }\n }\n \n-fn push_abi(text: &mut String, abi: ast::Abi) {\n-    if abi.symbol != sym::Rust {\n-        text.push_str(&format!(\"extern \\\"{}\\\" \", abi.symbol));\n+fn push_extern(text: &mut String, ext: Extern) {\n+    match ext {\n+        Extern::None => {}\n+        Extern::Implicit => text.push_str(\"extern \"),\n+        Extern::Explicit(abi) => text.push_str(&format!(\"extern \\\"{}\\\" \", abi.symbol)),\n     }\n }\n \n@@ -237,7 +238,7 @@ impl Sig for ast::Ty {\n                 if f.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                push_abi(&mut text, f.abi);\n+                push_extern(&mut text, f.ext);\n                 text.push_str(\"fn(\");\n \n                 let mut defs = vec![];\n@@ -387,7 +388,7 @@ impl Sig for ast::Item {\n                 if header.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                push_abi(&mut text, header.abi);\n+                push_extern(&mut text, header.ext);\n                 text.push_str(\"fn \");\n \n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n@@ -936,7 +937,7 @@ fn make_method_signature(\n     if m.header.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    push_abi(&mut text, m.header.abi);\n+    push_extern(&mut text, m.header.ext);\n     text.push_str(\"fn \");\n \n     let mut sig = name_and_generics(text, 0, generics, id, ident, scx)?;"}, {"sha": "575795758ae6c4c211d21ad26bab2272559a48cc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -1745,7 +1745,7 @@ pub struct Ty {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n-    pub abi: Abi,\n+    pub ext: Extern,\n     pub generic_params: Vec<GenericParam>,\n     pub decl: P<FnDecl>,\n }\n@@ -2128,7 +2128,7 @@ pub struct Mod {\n /// E.g., `extern { .. }` or `extern C { .. }`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignMod {\n-    pub abi: Abi,\n+    pub abi: Option<Abi>,\n     pub items: Vec<ForeignItem>,\n }\n \n@@ -2420,15 +2420,20 @@ pub struct Abi {\n     pub span: Span,\n }\n \n-impl Abi {\n-    pub fn new(symbol: Symbol, span: Span) -> Self {\n-        Self { symbol, span }\n-    }\n+/// `extern` qualifier on a function item or function type.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub enum Extern {\n+    None,\n+    Implicit,\n+    Explicit(Abi),\n }\n \n-impl Default for Abi {\n-    fn default() -> Self {\n-        Self::new(sym::Rust, DUMMY_SP)\n+impl Extern {\n+    pub fn from_abi(abi: Option<Abi>) -> Extern {\n+        match abi {\n+            Some(abi) => Extern::Explicit(abi),\n+            None => Extern::Implicit,\n+        }\n     }\n }\n \n@@ -2441,7 +2446,7 @@ pub struct FnHeader {\n     pub unsafety: Unsafety,\n     pub asyncness: Spanned<IsAsync>,\n     pub constness: Spanned<Constness>,\n-    pub abi: Abi,\n+    pub ext: Extern,\n }\n \n impl Default for FnHeader {\n@@ -2450,7 +2455,7 @@ impl Default for FnHeader {\n             unsafety: Unsafety::Normal,\n             asyncness: dummy_spanned(IsAsync::NotAsync),\n             constness: dummy_spanned(Constness::NotConst),\n-            abi: Abi::default(),\n+            ext: Extern::None,\n         }\n     }\n }"}, {"sha": "d90fa9addf7f6f28154484c28e913a7ce606eda0", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -258,6 +258,12 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n+    fn check_extern(&self, ext: ast::Extern) {\n+        if let ast::Extern::Explicit(abi) = ext {\n+            self.check_abi(abi);\n+        }\n+    }\n+\n     fn maybe_report_invalid_custom_discriminants(&self, variants: &[ast::Variant]) {\n         let has_fields = variants.iter().any(|variant| match variant.data {\n             VariantData::Tuple(..) | VariantData::Struct(..) => true,\n@@ -388,7 +394,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n-                self.check_abi(foreign_module.abi);\n+                if let Some(abi) = foreign_module.abi {\n+                    self.check_abi(abi);\n+                }\n             }\n \n             ast::ItemKind::Fn(..) => {\n@@ -511,7 +519,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_ty(&mut self, ty: &'a ast::Ty) {\n         match ty.kind {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n-                self.check_abi(bare_fn_ty.abi);\n+                self.check_extern(bare_fn_ty.ext);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span,\n@@ -605,7 +613,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n             // because default methods don't pass through this point.\n-            self.check_abi(header.abi);\n+            self.check_extern(header.ext);\n         }\n \n         if fn_decl.c_variadic() {\n@@ -639,7 +647,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n                 if block.is_none() {\n-                    self.check_abi(sig.header.abi);\n+                    self.check_extern(sig.header.ext);\n                 }\n                 if sig.decl.c_variadic() {\n                     gate_feature_post!(&self, c_variadic, ti.span,"}, {"sha": "da3c885b8609dc9e389ca0c24b8014276bb5793a", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -441,7 +441,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_mt(mt);\n         }\n         TyKind::BareFn(bft) => {\n-            let BareFnTy { unsafety: _, abi: _, generic_params, decl } = bft.deref_mut();\n+            let BareFnTy { unsafety: _, ext: _, generic_params, decl } = bft.deref_mut();\n             generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n             vis.visit_fn_decl(decl);\n         }\n@@ -974,7 +974,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n }\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n-    let FnHeader { unsafety: _, asyncness, constness: _, abi: _ } = header;\n+    let FnHeader { unsafety: _, asyncness, constness: _, ext: _ } = header;\n     vis.visit_asyncness(&mut asyncness.node);\n }\n "}, {"sha": "de28bd6cf8365a762a6eb1cfe257751b92362aca", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -1013,7 +1013,7 @@ impl<'a> State<'a> {\n                 self.pclose();\n             }\n             ast::TyKind::BareFn(ref f) => {\n-                self.print_ty_fn(f.abi,\n+                self.print_ty_fn(f.ext,\n                                  f.unsafety,\n                                  &f.decl,\n                                  None,\n@@ -1232,7 +1232,9 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n                 self.head(\"extern\");\n-                self.print_abi(nmod.abi);\n+                if let Some(abi) = nmod.abi {\n+                    self.print_abi(abi);\n+                }\n                 self.bopen();\n                 self.print_foreign_mod(nmod, &item.attrs);\n                 self.bclose(item.span);\n@@ -2805,7 +2807,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_ty_fn(&mut self,\n-                       abi: ast::Abi,\n+                       ext: ast::Extern,\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n@@ -2825,7 +2827,7 @@ impl<'a> State<'a> {\n             span: syntax_pos::DUMMY_SP,\n         };\n         self.print_fn(decl,\n-                      ast::FnHeader { unsafety, abi, ..ast::FnHeader::default() },\n+                      ast::FnHeader { unsafety, ext, ..ast::FnHeader::default() },\n                       name,\n                       &generics,\n                       &source_map::dummy_spanned(ast::VisibilityKind::Inherited));\n@@ -2866,9 +2868,15 @@ impl<'a> State<'a> {\n         self.print_asyncness(header.asyncness.node);\n         self.print_unsafety(header.unsafety);\n \n-        if header.abi.symbol != sym::Rust {\n-            self.word_nbsp(\"extern\");\n-            self.print_abi(header.abi);\n+        match header.ext {\n+            ast::Extern::None => {}\n+            ast::Extern::Implicit => {\n+                self.word_nbsp(\"extern\");\n+            }\n+            ast::Extern::Explicit(abi) => {\n+                self.word_nbsp(\"extern\");\n+                self.print_abi(abi);\n+            }\n         }\n \n         self.s.word(\"fn\")"}, {"sha": "b6bf2f881616f1163d508c932d729eb44f23e49d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -182,7 +182,7 @@ use std::iter;\n use std::vec;\n \n use rustc_data_structures::thin_vec::ThinVec;\n-use syntax::ast::{self, Abi, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n+use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::source_map::respan;\n@@ -737,7 +737,6 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -792,7 +791,6 @@ impl<'a> TraitDef<'a> {\n                                          self,\n                                          type_ident,\n                                          generics,\n-                                         sym::Rust,\n                                          explicit_self,\n                                          tys,\n                                          body)\n@@ -918,7 +916,6 @@ impl<'a> MethodDef<'a> {\n                      trait_: &TraitDef<'_>,\n                      type_ident: Ident,\n                      generics: &Generics,\n-                     abi: Symbol,\n                      explicit_self: Option<ast::ExplicitSelf>,\n                      arg_types: Vec<(Ident, P<ast::Ty>)>,\n                      body: P<Expr>)\n@@ -953,7 +950,7 @@ impl<'a> MethodDef<'a> {\n         let sig = ast::FnSig {\n             header: ast::FnHeader {\n                 unsafety,\n-                abi: Abi::new(abi, trait_lo_sp),\n+                ext: ast::Extern::None,\n                 ..ast::FnHeader::default()\n             },\n             decl: fn_decl,"}, {"sha": "8b8e12fcba65361c11f935a42c2298cf93d2897d", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -1,9 +1,8 @@\n-//~ ERROR mismatched types\n-// aux-build:test-macros.rs\n-\n // For each of these, we should get the appropriate type mismatch error message,\n // and the function should be echoed.\n \n+// aux-build:test-macros.rs\n+\n #[macro_use]\n extern crate test_macros;\n \n@@ -35,12 +34,9 @@ fn c() {\n     let y = Foo { a: 10, b: 10isize }; //~ ERROR has no field named `b`\n }\n \n-// FIXME: This doesn't work at the moment. See the one below. The pretty-printer\n-// injects a \"C\" between `extern` and `fn` which causes a \"probably_eq\"\n-// `TokenStream` mismatch. The lack of `\"C\"` should be preserved in the AST.\n #[recollect_attr]\n extern fn bar() {\n-    0\n+    0 //~ ERROR mismatched types\n }\n \n #[recollect_attr]"}, {"sha": "9e9271f529c7318593fb3f9cbd7e830b2fdcb479", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266f5471272532989332117e8a2e0bacb5b94ccf/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=266f5471272532989332117e8a2e0bacb5b94ccf", "patch": "@@ -1,10 +1,5 @@\n error[E0308]: mismatched types\n-   |\n-   = note: expected type `()`\n-              found type `{integer}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:12:20\n+  --> $DIR/span-preservation.rs:11:20\n    |\n LL |     let x: usize = \"hello\";\n    |                    ^^^^^^^ expected usize, found reference\n@@ -13,7 +8,7 @@ LL |     let x: usize = \"hello\";\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:18:29\n+  --> $DIR/span-preservation.rs:17:29\n    |\n LL | fn b(x: Option<isize>) -> usize {\n    |                           ----- expected `usize` because of return type\n@@ -22,21 +17,32 @@ LL |         Some(x) => { return x },\n    |                             ^ expected usize, found isize\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:34:22\n+  --> $DIR/span-preservation.rs:33:22\n    |\n LL |     let x = Foo { a: 10isize };\n    |                      ^^^^^^^ expected usize, found isize\n \n error[E0560]: struct `c::Foo` has no field named `b`\n-  --> $DIR/span-preservation.rs:35:26\n+  --> $DIR/span-preservation.rs:34:26\n    |\n LL |     let y = Foo { a: 10, b: 10isize };\n    |                          ^ `c::Foo` does not have this field\n    |\n    = note: available fields are: `a`\n \n error[E0308]: mismatched types\n-  --> $DIR/span-preservation.rs:48:5\n+  --> $DIR/span-preservation.rs:39:5\n+   |\n+LL | extern fn bar() {\n+   |                 - possibly return type missing here?\n+LL |     0\n+   |     ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:44:5\n    |\n LL | extern \"C\" fn baz() {\n    |                     - possibly return type missing here?"}]}