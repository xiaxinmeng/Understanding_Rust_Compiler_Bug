{"sha": "b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "node_id": "C_kwDOAAsO6NoAKGI1YmM0ZTFiMGMyZTk2ZDkxZTU3YjQ1MDA1MWYyOWFiNDU0YTFjNWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-21T05:02:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-21T16:32:58Z"}, "message": "add tests that fail due to SRW protectors\n\nalso do more iterations of weak mem consistency, since now that is no longer the slowest test ;)", "tree": {"sha": "1fed811443d82032d01b38535735d2319f29f369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fed811443d82032d01b38535735d2319f29f369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "html_url": "https://github.com/rust-lang/rust/commit/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3348869f42020680bd588132ae77272e810bd770", "url": "https://api.github.com/repos/rust-lang/rust/commits/3348869f42020680bd588132ae77272e810bd770", "html_url": "https://github.com/rust-lang/rust/commit/3348869f42020680bd588132ae77272e810bd770"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "b5192cd4214098ff3685c2e300a503181d5851ce", "filename": "tests/pass/0concurrency_arc_drop.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Fpass%2F0concurrency_arc_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Fpass%2F0concurrency_arc_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2F0concurrency_arc_drop.rs?ref=b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "patch": "@@ -0,0 +1,19 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+use std::sync::Arc;\n+use std::thread;\n+\n+/// Test for Arc::drop bug (https://github.com/rust-lang/rust/issues/55005)\n+fn main() {\n+    // The bug seems to take up to 700 iterations to reproduce with most seeds (tested 0-9).\n+    for _ in 0..700 {\n+        let arc_1 = Arc::new(());\n+        let arc_2 = arc_1.clone();\n+        let thread = thread::spawn(|| drop(arc_2));\n+        let mut i = 0;\n+        while i < 256 {\n+            i += 1;\n+        }\n+        drop(arc_1);\n+        thread.join().unwrap();\n+    }\n+}"}, {"sha": "601d8547f8c062a583fa4bed322dd5e8650fac8d", "filename": "tests/pass/0weak_memory_consistency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Fpass%2F0weak_memory_consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Fpass%2F0weak_memory_consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2F0weak_memory_consistency.rs?ref=b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "patch": "@@ -214,7 +214,7 @@ fn test_single_thread() {\n }\n \n pub fn main() {\n-    for _ in 0..50 {\n+    for _ in 0..75 {\n         test_single_thread();\n         test_mixed_access();\n         test_load_buffering_acq_rel();"}, {"sha": "9ee8af45aefe9a0ae24bc8c97da0149a348b2dc0", "filename": "tests/pass/stacked-borrows/interior_mutability.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Fpass%2Fstacked-borrows%2Finterior_mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b/tests%2Fpass%2Fstacked-borrows%2Finterior_mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Finterior_mutability.rs?ref=b5bc4e1b0c2e96d91e57b450051f29ab454a1c5b", "patch": "@@ -1,11 +1,14 @@\n+// compile-flags: -Zmiri-tag-raw-pointers\n use std::cell::{Cell, RefCell, UnsafeCell};\n-use std::mem::MaybeUninit;\n+use std::mem::{self, MaybeUninit};\n \n fn main() {\n     aliasing_mut_and_shr();\n     aliasing_frz_and_shr();\n     into_interior_mutability();\n     unsafe_cell_2phase();\n+    unsafe_cell_deallocate();\n+    unsafe_cell_invalidate();\n }\n \n fn aliasing_mut_and_shr() {\n@@ -67,3 +70,33 @@ fn unsafe_cell_2phase() {\n         let _val = (*x2.get()).get(0);\n     }\n }\n+\n+/// Make sure we can deallocate an UnsafeCell that was passed to an active fn call.\n+/// (This is the fix for https://github.com/rust-lang/rust/issues/55005.)\n+fn unsafe_cell_deallocate() {\n+    fn f(x: &UnsafeCell<i32>) {\n+        let b: Box<i32> = unsafe { Box::from_raw(x as *const _ as *mut i32) };\n+        drop(b)\n+    }\n+\n+    let b = Box::new(0i32);\n+    f(unsafe { mem::transmute(Box::into_raw(b)) });\n+}\n+\n+/// As a side-effect of the above, we also allow this -- at least for now.\n+fn unsafe_cell_invalidate() {\n+    fn f(_x: &UnsafeCell<i32>, y: *mut i32) {\n+        // Writing to y invalidates x, but that is okay.\n+        unsafe {\n+            *y += 1;\n+        }\n+    }\n+\n+    let mut x = 0i32;\n+    let raw1 = &mut x as *mut _;\n+    let ref1 = unsafe { &mut *raw1 };\n+    let raw2 = ref1 as *mut _;\n+    // Now the borrow stack is: raw1, ref2, raw2.\n+    // So using raw1 invalidates raw2.\n+    f(unsafe { mem::transmute(raw2) }, raw1);\n+}"}]}