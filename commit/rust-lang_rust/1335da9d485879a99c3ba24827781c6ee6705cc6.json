{"sha": "1335da9d485879a99c3ba24827781c6ee6705cc6", "node_id": "C_kwDOAAsO6NoAKDEzMzVkYTlkNDg1ODc5YTk5YzNiYTI0ODI3NzgxYzZlZTY3MDVjYzY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-11T09:35:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-11T09:36:02Z"}, "message": "Only encode RPITIT when trait method has default body", "tree": {"sha": "c5b60558f00532b2d2e597fff1a4c5fbd8d46b5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5b60558f00532b2d2e597fff1a4c5fbd8d46b5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1335da9d485879a99c3ba24827781c6ee6705cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1335da9d485879a99c3ba24827781c6ee6705cc6", "html_url": "https://github.com/rust-lang/rust/commit/1335da9d485879a99c3ba24827781c6ee6705cc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1335da9d485879a99c3ba24827781c6ee6705cc6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14636887008d9ee67a12b4f05f1e404ed1d64579", "url": "https://api.github.com/repos/rust-lang/rust/commits/14636887008d9ee67a12b4f05f1e404ed1d64579", "html_url": "https://github.com/rust-lang/rust/commit/14636887008d9ee67a12b4f05f1e404ed1d64579"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "5a60ea794edd809fb24f37561a53c40ed18e6dc2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1335da9d485879a99c3ba24827781c6ee6705cc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1335da9d485879a99c3ba24827781c6ee6705cc6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1335da9d485879a99c3ba24827781c6ee6705cc6", "patch": "@@ -1036,7 +1036,6 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::Static(..)\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n-        | DefKind::ImplTraitPlaceholder\n         | DefKind::ForeignTy\n         | DefKind::Impl\n         | DefKind::AssocFn\n@@ -1047,6 +1046,19 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::AnonConst\n         | DefKind::InlineConst => true,\n \n+        DefKind::ImplTraitPlaceholder => {\n+            let parent_def_id = tcx.impl_trait_in_trait_parent(def_id.to_def_id());\n+            let assoc_item = tcx.associated_item(parent_def_id);\n+            match assoc_item.container {\n+                // Always encode an RPIT in an impl fn, since it always has a body\n+                ty::AssocItemContainer::ImplContainer => true,\n+                ty::AssocItemContainer::TraitContainer => {\n+                    // Encode an RPIT for a trait only if the trait has a default body\n+                    assoc_item.defaultness(tcx).has_value()\n+                }\n+            }\n+        }\n+\n         DefKind::AssocTy => {\n             let assoc_item = tcx.associated_item(def_id);\n             match assoc_item.container {"}, {"sha": "efb9f6498ba6d9a5582d585f13a31f0ad3fcd808", "filename": "src/test/ui/impl-trait/in-trait/encode.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1335da9d485879a99c3ba24827781c6ee6705cc6/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1335da9d485879a99c3ba24827781c6ee6705cc6/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs?ref=1335da9d485879a99c3ba24827781c6ee6705cc6", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+// compile-flags: --crate-type=lib\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar() -> impl Sized;\n+}"}]}