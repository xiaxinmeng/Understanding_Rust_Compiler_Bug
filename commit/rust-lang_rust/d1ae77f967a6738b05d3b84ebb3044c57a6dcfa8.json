{"sha": "d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYWU3N2Y5NjdhNjczOGIwNWQzYjg0ZWJiMzA0NGM1N2E2ZGNmYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-18T11:08:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-18T11:08:24Z"}, "message": "Auto merge of #1347 - RalfJung:float-cast-test, r=RalfJung\n\nrename test_cast -> test_both_cast to make purpose clearer", "tree": {"sha": "c3d16ae13af1d94895de4298717d073a69138b68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d16ae13af1d94895de4298717d073a69138b68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8", "html_url": "https://github.com/rust-lang/rust/commit/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45113eb6a45526dbf0ee853659a87f2812ebb45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45113eb6a45526dbf0ee853659a87f2812ebb45a", "html_url": "https://github.com/rust-lang/rust/commit/45113eb6a45526dbf0ee853659a87f2812ebb45a"}, {"sha": "699685c07cc017792eae9f7a21553e394f49d1c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/699685c07cc017792eae9f7a21553e394f49d1c1", "html_url": "https://github.com/rust-lang/rust/commit/699685c07cc017792eae9f7a21553e394f49d1c1"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "c56d12a0c00e783e624eb5618dc31d11758d5947", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=d1ae77f967a6738b05d3b84ebb3044c57a6dcfa8", "patch": "@@ -68,7 +68,7 @@ impl FloatToInt<u128> for f64 {\n /// Test this cast both via `as` and via `approx_unchecked` (i.e., it must not saturate).\n #[track_caller]\n #[inline(never)]\n-fn test_cast<F, I>(x: F, y: I)\n+fn test_both_cast<F, I>(x: F, y: I)\n     where F: FloatToInt<I>, I: PartialEq + Debug\n {\n     assert_eq!(x.cast(), y);\n@@ -116,22 +116,22 @@ fn basic() {\n \n fn casts() {\n     // f32 -> i8\n-    test_cast::<f32, i8>(127.99, 127);\n-    test_cast::<f32, i8>(-128.99, -128);\n+    test_both_cast::<f32, i8>(127.99, 127);\n+    test_both_cast::<f32, i8>(-128.99, -128);\n \n     // f32 -> i32\n-    test_cast::<f32, i32>(0.0, 0);\n-    test_cast::<f32, i32>(-0.0, 0);\n-    test_cast::<f32, i32>(/*0x1p-149*/ f32::from_bits(0x00000001), 0);\n-    test_cast::<f32, i32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n-    test_cast::<f32, i32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n-    test_cast::<f32, i32>(/*-0x1.19999ap+0*/ f32::from_bits(0xbf8ccccd), -1);\n-    test_cast::<f32, i32>(1.9, 1);\n-    test_cast::<f32, i32>(-1.9, -1);\n-    test_cast::<f32, i32>(5.0, 5);\n-    test_cast::<f32, i32>(-5.0, -5);\n-    test_cast::<f32, i32>(2147483520.0, 2147483520);\n-    test_cast::<f32, i32>(-2147483648.0, -2147483648);\n+    test_both_cast::<f32, i32>(0.0, 0);\n+    test_both_cast::<f32, i32>(-0.0, 0);\n+    test_both_cast::<f32, i32>(/*0x1p-149*/ f32::from_bits(0x00000001), 0);\n+    test_both_cast::<f32, i32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n+    test_both_cast::<f32, i32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n+    test_both_cast::<f32, i32>(/*-0x1.19999ap+0*/ f32::from_bits(0xbf8ccccd), -1);\n+    test_both_cast::<f32, i32>(1.9, 1);\n+    test_both_cast::<f32, i32>(-1.9, -1);\n+    test_both_cast::<f32, i32>(5.0, 5);\n+    test_both_cast::<f32, i32>(-5.0, -5);\n+    test_both_cast::<f32, i32>(2147483520.0, 2147483520);\n+    test_both_cast::<f32, i32>(-2147483648.0, -2147483648);\n     // unrepresentable casts\n     assert_eq::<i32>(2147483648.0f32 as i32, i32::MAX);\n     assert_eq::<i32>(-2147483904.0f32 as i32, i32::MIN);\n@@ -143,19 +143,19 @@ fn casts() {\n     assert_eq::<i32>((-f32::NAN) as i32, 0);\n \n     // f32 -> u32\n-    test_cast::<f32, u32>(0.0, 0);\n-    test_cast::<f32, u32>(-0.0, 0);\n-    test_cast::<f32, u32>(-0.9999999, 0);\n-    test_cast::<f32, u32>(/*0x1p-149*/ f32::from_bits(0x1), 0);\n-    test_cast::<f32, u32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n-    test_cast::<f32, u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n-    test_cast::<f32, u32>(1.9, 1);\n-    test_cast::<f32, u32>(5.0, 5);\n-    test_cast::<f32, u32>(2147483648.0, 0x8000_0000);\n-    test_cast::<f32, u32>(4294967040.0, 0u32.wrapping_sub(256));\n-    test_cast::<f32, u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666), 0);\n-    test_cast::<f32, u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff), 0);\n-    test_cast::<f32, u32>((u32::MAX-128) as f32, u32::MAX-255); // rounding loss\n+    test_both_cast::<f32, u32>(0.0, 0);\n+    test_both_cast::<f32, u32>(-0.0, 0);\n+    test_both_cast::<f32, u32>(-0.9999999, 0);\n+    test_both_cast::<f32, u32>(/*0x1p-149*/ f32::from_bits(0x1), 0);\n+    test_both_cast::<f32, u32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n+    test_both_cast::<f32, u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n+    test_both_cast::<f32, u32>(1.9, 1);\n+    test_both_cast::<f32, u32>(5.0, 5);\n+    test_both_cast::<f32, u32>(2147483648.0, 0x8000_0000);\n+    test_both_cast::<f32, u32>(4294967040.0, 0u32.wrapping_sub(256));\n+    test_both_cast::<f32, u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666), 0);\n+    test_both_cast::<f32, u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff), 0);\n+    test_both_cast::<f32, u32>((u32::MAX-128) as f32, u32::MAX-255); // rounding loss\n     // unrepresentable casts\n     assert_eq::<u32>((u32::MAX-127) as f32 as u32, u32::MAX); // rounds up and then becomes unrepresentable\n     assert_eq::<u32>(4294967296.0f32 as u32, u32::MAX);\n@@ -168,44 +168,44 @@ fn casts() {\n     assert_eq::<u32>((-f32::NAN) as u32, 0);\n \n     // f32 -> i64\n-    test_cast::<f32, i64>(4294967296.0, 4294967296);\n-    test_cast::<f32, i64>(-4294967296.0, -4294967296);\n-    test_cast::<f32, i64>(9223371487098961920.0, 9223371487098961920);\n-    test_cast::<f32, i64>(-9223372036854775808.0, -9223372036854775808);\n+    test_both_cast::<f32, i64>(4294967296.0, 4294967296);\n+    test_both_cast::<f32, i64>(-4294967296.0, -4294967296);\n+    test_both_cast::<f32, i64>(9223371487098961920.0, 9223371487098961920);\n+    test_both_cast::<f32, i64>(-9223372036854775808.0, -9223372036854775808);\n \n     // f64 -> i8\n-    test_cast::<f64, i8>(127.99, 127);\n-    test_cast::<f64, i8>(-128.99, -128);\n+    test_both_cast::<f64, i8>(127.99, 127);\n+    test_both_cast::<f64, i8>(-128.99, -128);\n \n     // f64 -> i32\n-    test_cast::<f64, i32>(0.0, 0);\n-    test_cast::<f64, i32>(-0.0, 0);\n-    test_cast::<f64, i32>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n-    test_cast::<f64, i32>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a), -1);\n-    test_cast::<f64, i32>(1.9, 1);\n-    test_cast::<f64, i32>(-1.9, -1);\n-    test_cast::<f64, i32>(1e8, 100_000_000);\n-    test_cast::<f64, i32>(2147483647.0, 2147483647);\n-    test_cast::<f64, i32>(-2147483648.0, -2147483648);\n+    test_both_cast::<f64, i32>(0.0, 0);\n+    test_both_cast::<f64, i32>(-0.0, 0);\n+    test_both_cast::<f64, i32>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n+    test_both_cast::<f64, i32>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a), -1);\n+    test_both_cast::<f64, i32>(1.9, 1);\n+    test_both_cast::<f64, i32>(-1.9, -1);\n+    test_both_cast::<f64, i32>(1e8, 100_000_000);\n+    test_both_cast::<f64, i32>(2147483647.0, 2147483647);\n+    test_both_cast::<f64, i32>(-2147483648.0, -2147483648);\n     // unrepresentable casts\n     assert_eq::<i32>(2147483648.0f64 as i32, i32::MAX);\n     assert_eq::<i32>(-2147483649.0f64 as i32, i32::MIN);\n \n     // f64 -> i64\n-    test_cast::<f64, i64>(0.0, 0);\n-    test_cast::<f64, i64>(-0.0, 0);\n-    test_cast::<f64, i64>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1), 0);\n-    test_cast::<f64, i64>(/*-0x0.0000000000001p-1022*/ f64::from_bits(0x8000000000000001), 0);\n-    test_cast::<f64, i64>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n-    test_cast::<f64, i64>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a), -1);\n-    test_cast::<f64, i64>(5.0, 5);\n-    test_cast::<f64, i64>(5.9, 5);\n-    test_cast::<f64, i64>(-5.0, -5);\n-    test_cast::<f64, i64>(-5.9, -5);\n-    test_cast::<f64, i64>(4294967296.0, 4294967296);\n-    test_cast::<f64, i64>(-4294967296.0, -4294967296);\n-    test_cast::<f64, i64>(9223372036854774784.0, 9223372036854774784);\n-    test_cast::<f64, i64>(-9223372036854775808.0, -9223372036854775808);\n+    test_both_cast::<f64, i64>(0.0, 0);\n+    test_both_cast::<f64, i64>(-0.0, 0);\n+    test_both_cast::<f64, i64>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1), 0);\n+    test_both_cast::<f64, i64>(/*-0x0.0000000000001p-1022*/ f64::from_bits(0x8000000000000001), 0);\n+    test_both_cast::<f64, i64>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n+    test_both_cast::<f64, i64>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a), -1);\n+    test_both_cast::<f64, i64>(5.0, 5);\n+    test_both_cast::<f64, i64>(5.9, 5);\n+    test_both_cast::<f64, i64>(-5.0, -5);\n+    test_both_cast::<f64, i64>(-5.9, -5);\n+    test_both_cast::<f64, i64>(4294967296.0, 4294967296);\n+    test_both_cast::<f64, i64>(-4294967296.0, -4294967296);\n+    test_both_cast::<f64, i64>(9223372036854774784.0, 9223372036854774784);\n+    test_both_cast::<f64, i64>(-9223372036854775808.0, -9223372036854775808);\n     // unrepresentable casts\n     assert_eq::<i64>(9223372036854775808.0f64 as i64, i64::MAX);\n     assert_eq::<i64>(-9223372036854777856.0f64 as i64, i64::MIN);\n@@ -217,13 +217,13 @@ fn casts() {\n     assert_eq::<i64>((-f64::NAN) as i64, 0);\n \n     // f64 -> u64\n-    test_cast::<f64, u64>(0.0, 0);\n-    test_cast::<f64, u64>(-0.0, 0);\n-    test_cast::<f64, u64>(-0.99999999999, 0);\n-    test_cast::<f64, u64>(5.0, 5);\n-    test_cast::<f64, u64>(1e16, 10000000000000000);\n-    test_cast::<f64, u64>((u64::MAX-1024) as f64, u64::MAX-2047); // rounding loss\n-    test_cast::<f64, u64>(9223372036854775808.0, 9223372036854775808);\n+    test_both_cast::<f64, u64>(0.0, 0);\n+    test_both_cast::<f64, u64>(-0.0, 0);\n+    test_both_cast::<f64, u64>(-0.99999999999, 0);\n+    test_both_cast::<f64, u64>(5.0, 5);\n+    test_both_cast::<f64, u64>(1e16, 10000000000000000);\n+    test_both_cast::<f64, u64>((u64::MAX-1024) as f64, u64::MAX-2047); // rounding loss\n+    test_both_cast::<f64, u64>(9223372036854775808.0, 9223372036854775808);\n     // unrepresentable casts\n     assert_eq::<u64>(-5.0f64 as u64, 0);\n     assert_eq::<u64>((u64::MAX-1023) as f64 as u64, u64::MAX); // rounds up and then becomes unrepresentable"}]}