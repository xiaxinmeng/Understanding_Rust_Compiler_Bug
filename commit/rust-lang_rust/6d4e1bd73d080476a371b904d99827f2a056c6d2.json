{"sha": "6d4e1bd73d080476a371b904d99827f2a056c6d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNGUxYmQ3M2QwODA0NzZhMzcxYjkwNGQ5OTgyN2YyYTA1NmM2ZDI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-14T21:00:01Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-15T19:35:41Z"}, "message": "Fix false positive with STRING_LIT_AS_BYTES and stringify!", "tree": {"sha": "39aa86388d1155549ec1ed2d199a9f18f129e1fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39aa86388d1155549ec1ed2d199a9f18f129e1fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4e1bd73d080476a371b904d99827f2a056c6d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4e1bd73d080476a371b904d99827f2a056c6d2", "html_url": "https://github.com/rust-lang/rust/commit/6d4e1bd73d080476a371b904d99827f2a056c6d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4e1bd73d080476a371b904d99827f2a056c6d2/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1546cc47988129cd41b4531f4670f49937162b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1546cc47988129cd41b4531f4670f49937162b4c", "html_url": "https://github.com/rust-lang/rust/commit/1546cc47988129cd41b4531f4670f49937162b4c"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "dac5ac9f6bd69782eaa94b8560876728916bb16d", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d4e1bd73d080476a371b904d99827f2a056c6d2/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4e1bd73d080476a371b904d99827f2a056c6d2/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=6d4e1bd73d080476a371b904d99827f2a056c6d2", "patch": "@@ -140,7 +140,7 @@ impl LateLintPass for StringLitAsBytes {\n             if name.node.as_str() == \"as_bytes\" {\n                 if let ExprLit(ref lit) = args[0].node {\n                     if let LitKind::Str(ref lit_content, _) = lit.node {\n-                        if lit_content.chars().all(|c| c.is_ascii()) && !in_macro(cx, e.span) {\n+                        if lit_content.chars().all(|c| c.is_ascii()) && !in_macro(cx, args[0].span) {\n                             let msg = format!(\"calling `as_bytes()` on a string literal. \\\n                                                Consider using a byte string literal instead: \\\n                                                `b{}`\","}]}