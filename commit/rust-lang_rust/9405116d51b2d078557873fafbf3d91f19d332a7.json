{"sha": "9405116d51b2d078557873fafbf3d91f19d332a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MDUxMTZkNTFiMmQwNzg1NTc4NzNmYWZiZjNkOTFmMTlkMzMyYTc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-10T08:27:31Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-10T08:27:31Z"}, "message": "Hot fix panic for function_signature", "tree": {"sha": "266ad44db2a9b4f0e24e5a7a5cfe6b8c9b59e1f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/266ad44db2a9b4f0e24e5a7a5cfe6b8c9b59e1f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9405116d51b2d078557873fafbf3d91f19d332a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9405116d51b2d078557873fafbf3d91f19d332a7", "html_url": "https://github.com/rust-lang/rust/commit/9405116d51b2d078557873fafbf3d91f19d332a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9405116d51b2d078557873fafbf3d91f19d332a7/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac", "html_url": "https://github.com/rust-lang/rust/commit/f1cb5b8a29ce509bf1f8d6df97d4b6586b9a2dac"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "3d31472543ed02fa8f6f2dfff1901ce6d184adc1", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9405116d51b2d078557873fafbf3d91f19d332a7/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9405116d51b2d078557873fafbf3d91f19d332a7/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=9405116d51b2d078557873fafbf3d91f19d332a7", "patch": "@@ -84,8 +84,8 @@ impl FunctionSignature {\n             let ty = field.signature_ty(db);\n             let raw_param = format!(\"{}\", ty.display(db));\n \n-            if let Some(param_type) = raw_param.split(':').nth(1) {\n-                parameter_types.push(param_type[1..].to_string());\n+            if let Some(param_type) = raw_param.split(':').nth(1).and_then(|it| it.get(1..)) {\n+                parameter_types.push(param_type.to_string());\n             } else {\n                 // useful when you have tuple struct\n                 parameter_types.push(raw_param.clone());\n@@ -129,8 +129,9 @@ impl FunctionSignature {\n         for field in variant.fields(db).into_iter() {\n             let ty = field.signature_ty(db);\n             let raw_param = format!(\"{}\", ty.display(db));\n-            if let Some(param_type) = raw_param.split(':').nth(1) {\n-                parameter_types.push(param_type[1..].to_string());\n+            dbg!(&raw_param);\n+            if let Some(param_type) = raw_param.split(':').nth(1).and_then(|it| it.get(1..)) {\n+                parameter_types.push(param_type.to_string());\n             } else {\n                 // The unwrap_or_else is useful when you have tuple\n                 parameter_types.push(raw_param);\n@@ -197,16 +198,21 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                     let raw_param = self_param.syntax().text().to_string();\n \n                     res_types.push(\n-                        raw_param.split(':').nth(1).unwrap_or_else(|| \" Self\")[1..].to_string(),\n+                        raw_param\n+                            .split(':')\n+                            .nth(1)\n+                            .and_then(|it| it.get(1..))\n+                            .unwrap_or_else(|| \"Self\")\n+                            .to_string(),\n                     );\n                     res.push(raw_param);\n                 }\n \n                 res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n                 res_types.extend(param_list.params().map(|param| {\n                     let param_text = param.syntax().text().to_string();\n-                    match param_text.split(':').nth(1) {\n-                        Some(it) => it[1..].to_string(),\n+                    match param_text.split(':').nth(1).and_then(|it| it.get(1..)) {\n+                        Some(it) => it.to_string(),\n                         None => param_text,\n                     }\n                 }));"}]}