{"sha": "f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MzIwYjYxOTVkMjcwNGNmNWNiNWNiN2QyM2YyYjYwNzdhMGIzNGM=", "commit": {"author": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2013-02-14T08:37:01Z"}, "committer": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2013-02-15T06:30:27Z"}, "message": "move isaac RNG utility functions to new rust_rng.cpp file", "tree": {"sha": "f880b688f0e30f39640ea4e30efe3f606ae64b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f880b688f0e30f39640ea4e30efe3f606ae64b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "html_url": "https://github.com/rust-lang/rust/commit/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/comments", "author": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c53150638562959e6020bab887a22cf3d13ecaab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53150638562959e6020bab887a22cf3d13ecaab", "html_url": "https://github.com/rust-lang/rust/commit/c53150638562959e6020bab887a22cf3d13ecaab"}], "stats": {"total": 177, "additions": 117, "deletions": 60}, "files": [{"sha": "e6e0f1e0cd759314486abf5f3d3133eb2fdce309", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "patch": "@@ -50,6 +50,7 @@ RUNTIME_CXXS_$(1) := \\\n               rt/rust_builtin.cpp \\\n               rt/rust_run_program.cpp \\\n               rt/rust_env.cpp \\\n+              rt/rust_rng.cpp \\\n               rt/rust_sched_loop.cpp \\\n               rt/rust_sched_launcher.cpp \\\n               rt/rust_sched_driver.cpp \\"}, {"sha": "3cc8550104a614d2240760caaf25112c876b8c02", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "patch": "@@ -37,7 +37,6 @@\n #include <math.h>\n #include <assert.h>\n \n-#include \"rand.h\"\n #include \"uthash.h\"\n \n #if defined(__WIN32__)"}, {"sha": "5f4522c49783b2e4c13820cc518015135d4a47c9", "filename": "src/rt/rust_rng.cpp", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_rng.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_rng.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.cpp?ref=f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include \"rust_globals.h\"\n+#include \"rust_rng.h\"\n+#include \"rust_util.h\"\n+\n+// Initialization helpers for ISAAC RNG\n+\n+void\n+isaac_seed(rust_kernel* kernel, uint8_t* dest, size_t size) {\n+#ifdef __WIN32__\n+    HCRYPTPROV hProv;\n+    kernel->win32_require\n+        (_T(\"CryptAcquireContext\"),\n+         CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL,\n+                             CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n+    kernel->win32_require\n+        (_T(\"CryptGenRandom\"), CryptGenRandom(hProv, size, (BYTE*) dest));\n+    kernel->win32_require\n+        (_T(\"CryptReleaseContext\"), CryptReleaseContext(hProv, 0));\n+#else\n+    int fd = open(\"/dev/urandom\", O_RDONLY);\n+    if (fd == -1)\n+        kernel->fatal(\"error opening /dev/urandom: %s\", strerror(errno));\n+    size_t amount = 0;\n+    do {\n+        ssize_t ret = read(fd, dest+amount, size-amount);\n+        if (ret < 0)\n+            kernel->fatal(\"error reading /dev/urandom: %s\", strerror(errno));\n+        else if (ret == 0)\n+            kernel->fatal(\"somehow hit eof reading from /dev/urandom\");\n+        amount += (size_t)ret;\n+    } while (amount < size);\n+    int ret = close(fd);\n+    // FIXME #3697: Why does this fail sometimes?\n+    if (ret != 0)\n+        kernel->log(log_warn, \"error closing /dev/urandom: %s\",\n+            strerror(errno));\n+#endif\n+}\n+\n+void\n+isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec_box* user_seed) {\n+    memset(rctx, 0, sizeof(randctx));\n+\n+    char *env_seed = kernel->env->rust_seed;\n+    if (user_seed != NULL) {\n+        // ignore bytes after the required length\n+        size_t seed_len = user_seed->body.fill < sizeof(rctx->randrsl)\n+            ? user_seed->body.fill : sizeof(rctx->randrsl);\n+        memcpy(&rctx->randrsl, user_seed->body.data, seed_len);\n+    } else if (env_seed != NULL) {\n+        ub4 seed = (ub4) atoi(env_seed);\n+        for (size_t i = 0; i < RANDSIZ; i ++) {\n+            memcpy(&rctx->randrsl[i], &seed, sizeof(ub4));\n+            seed = (seed + 0x7ed55d16) + (seed << 12);\n+        }\n+    } else {\n+        isaac_seed(kernel, (uint8_t*) &rctx->randrsl, sizeof(rctx->randrsl));\n+    }\n+\n+    randinit(rctx, 1);\n+}\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "7f61b615b25481b0c8bb1d2280dd0c14689b5c42", "filename": "src/rt/rust_rng.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_rng.h", "raw_url": "https://github.com/rust-lang/rust/raw/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_rng.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.h?ref=f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#ifndef RUST_RNG_H\n+#define RUST_RNG_H\n+\n+#include \"rand.h\"\n+\n+class rust_kernel;\n+struct rust_vec_box;\n+\n+// Initialization helpers for ISAAC RNG\n+\n+void isaac_seed(rust_kernel* kernel, uint8_t* dest, size_t size);\n+void isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec_box* user_seed);\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//\n+\n+#endif"}, {"sha": "8abec9cf869c996be497e4874275e654035a029c", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "patch": "@@ -13,6 +13,7 @@\n \n #include \"rust_globals.h\"\n #include \"rust_log.h\"\n+#include \"rust_rng.h\"\n #include \"rust_stack.h\"\n #include \"rust_signal.h\"\n #include \"context.h\""}, {"sha": "b5827e0724b7ecb6f5e907e7542ad76229cd43be", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "patch": "@@ -136,65 +136,6 @@ inline size_t get_box_size(size_t body_size, size_t body_align) {\n     return total_size;\n }\n \n-// Initialization helpers for ISAAC RNG\n-\n-inline void isaac_seed(rust_kernel* kernel, uint8_t* dest, size_t size)\n-{\n-#ifdef __WIN32__\n-    HCRYPTPROV hProv;\n-    kernel->win32_require\n-        (_T(\"CryptAcquireContext\"),\n-         CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL,\n-                             CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n-    kernel->win32_require\n-        (_T(\"CryptGenRandom\"), CryptGenRandom(hProv, size, (BYTE*) dest));\n-    kernel->win32_require\n-        (_T(\"CryptReleaseContext\"), CryptReleaseContext(hProv, 0));\n-#else\n-    int fd = open(\"/dev/urandom\", O_RDONLY);\n-    if (fd == -1)\n-        kernel->fatal(\"error opening /dev/urandom: %s\", strerror(errno));\n-    size_t amount = 0;\n-    do {\n-        ssize_t ret = read(fd, dest+amount, size-amount);\n-        if (ret < 0)\n-            kernel->fatal(\"error reading /dev/urandom: %s\", strerror(errno));\n-        else if (ret == 0)\n-            kernel->fatal(\"somehow hit eof reading from /dev/urandom\");\n-        amount += (size_t)ret;\n-    } while (amount < size);\n-    int ret = close(fd);\n-    // FIXME #3697: Why does this fail sometimes?\n-    if (ret != 0)\n-        kernel->log(log_warn, \"error closing /dev/urandom: %s\",\n-            strerror(errno));\n-#endif\n-}\n-\n-inline void\n-isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec_box* user_seed)\n-{\n-    memset(rctx, 0, sizeof(randctx));\n-\n-    char *env_seed = kernel->env->rust_seed;\n-    if (user_seed != NULL) {\n-        // ignore bytes after the required length\n-        size_t seed_len = user_seed->body.fill < sizeof(rctx->randrsl)\n-            ? user_seed->body.fill : sizeof(rctx->randrsl);\n-        memcpy(&rctx->randrsl, user_seed->body.data, seed_len);\n-    } else if (env_seed != NULL) {\n-        ub4 seed = (ub4) atoi(env_seed);\n-        for (size_t i = 0; i < RANDSIZ; i ++) {\n-            memcpy(&rctx->randrsl[i], &seed, sizeof(ub4));\n-            seed = (seed + 0x7ed55d16) + (seed << 12);\n-        }\n-    } else {\n-        isaac_seed(kernel, (uint8_t*) &rctx->randrsl, sizeof(rctx->randrsl));\n-    }\n-\n-    randinit(rctx, 1);\n-}\n-\n //\n // Local Variables:\n // mode: C++"}]}