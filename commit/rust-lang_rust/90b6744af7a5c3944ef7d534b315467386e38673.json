{"sha": "90b6744af7a5c3944ef7d534b315467386e38673", "node_id": "C_kwDOAAsO6NoAKDkwYjY3NDRhZjdhNWMzOTQ0ZWY3ZDUzNGIzMTU0NjczODZlMzg2NzM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-19T12:18:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T13:11:54Z"}, "message": "Also collect bounds from the ParamEnv for opaque types", "tree": {"sha": "b75fc62b69f795e1200d19acd4d967247652e9ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75fc62b69f795e1200d19acd4d967247652e9ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b6744af7a5c3944ef7d534b315467386e38673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b6744af7a5c3944ef7d534b315467386e38673", "html_url": "https://github.com/rust-lang/rust/commit/90b6744af7a5c3944ef7d534b315467386e38673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b6744af7a5c3944ef7d534b315467386e38673/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37928f59865b5ff53b95fe2f3c02491890a4129d", "url": "https://api.github.com/repos/rust-lang/rust/commits/37928f59865b5ff53b95fe2f3c02491890a4129d", "html_url": "https://github.com/rust-lang/rust/commit/37928f59865b5ff53b95fe2f3c02491890a4129d"}], "stats": {"total": 93, "additions": 34, "deletions": 59}, "files": [{"sha": "ceea02e7817a9400935e3fcac451017c2bb3b5dc", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90b6744af7a5c3944ef7d534b315467386e38673/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b6744af7a5c3944ef7d534b315467386e38673/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=90b6744af7a5c3944ef7d534b315467386e38673", "patch": "@@ -318,7 +318,7 @@ where\n         );\n \n         let generic = GenericKind::Param(param_ty);\n-        let verify_bound = self.verify_bound.generic_bound(generic);\n+        let verify_bound = self.verify_bound.param_bound(param_ty);\n         self.delegate.push_verify(origin, generic, region, verify_bound);\n     }\n \n@@ -476,7 +476,12 @@ where\n         // projection outlive; in some cases, this may add insufficient\n         // edges into the inference graph, leading to inference failures\n         // even though a satisfactory solution exists.\n-        let verify_bound = self.verify_bound.generic_bound(generic);\n+        let verify_bound = self.verify_bound.projection_opaque_bounds(\n+            generic,\n+            def_id,\n+            substs,\n+            &mut Default::default(),\n+        );\n         debug!(\"projection_must_outlive: pushing {:?}\", verify_bound);\n         self.delegate.push_verify(origin, generic, region, verify_bound);\n     }"}, {"sha": "f5caa8d684e003ceaa60eee09b648cc5fa69fd7f", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 25, "deletions": 44, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/90b6744af7a5c3944ef7d534b315467386e38673/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b6744af7a5c3944ef7d534b315467386e38673/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=90b6744af7a5c3944ef7d534b315467386e38673", "patch": "@@ -38,21 +38,8 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         Self { tcx, region_bound_pairs, implicit_region_bound, param_env }\n     }\n \n-    /// Returns a \"verify bound\" that encodes what we know about\n-    /// `generic` and the regions it outlives.\n-    pub fn generic_bound(&self, generic: GenericKind<'tcx>) -> VerifyBound<'tcx> {\n-        let mut visited = SsoHashSet::new();\n-        match generic {\n-            GenericKind::Param(param_ty) => self.param_bound(param_ty),\n-            GenericKind::Projection(projection_ty) => {\n-                self.projection_bound(projection_ty, &mut visited)\n-            }\n-            GenericKind::Opaque(def_id, substs) => self.opaque_bound(def_id, substs),\n-        }\n-    }\n-\n     #[instrument(level = \"debug\", skip(self))]\n-    fn param_bound(&self, param_ty: ty::ParamTy) -> VerifyBound<'tcx> {\n+    pub fn param_bound(&self, param_ty: ty::ParamTy) -> VerifyBound<'tcx> {\n         // Start with anything like `T: 'a` we can scrape from the\n         // environment. If the environment contains something like\n         // `for<'a> T: 'a`, then we know that `T` outlives everything.\n@@ -116,20 +103,21 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     }\n \n     #[instrument(level = \"debug\", skip(self, visited))]\n-    fn projection_bound(\n+    pub fn projection_opaque_bounds(\n         &self,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n+        generic: GenericKind<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n         visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> VerifyBound<'tcx> {\n-        let projection_ty_as_ty =\n-            self.tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs);\n+        let generic_ty = generic.to_ty(self.tcx);\n \n         // Search the env for where clauses like `P: 'a`.\n-        let env_bounds = self\n-            .approx_declared_bounds_from_env(GenericKind::Projection(projection_ty))\n+        let projection_opaque_bounds = self\n+            .approx_declared_bounds_from_env(generic)\n             .into_iter()\n             .map(|binder| {\n-                if let Some(ty::OutlivesPredicate(ty, r)) = binder.no_bound_vars() && ty == projection_ty_as_ty {\n+                if let Some(ty::OutlivesPredicate(ty, r)) = binder.no_bound_vars() && ty == generic_ty {\n                     // Micro-optimize if this is an exact match (this\n                     // occurs often when there are no region variables\n                     // involved).\n@@ -139,35 +127,18 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                     VerifyBound::IfEq(verify_if_eq_b)\n                 }\n             });\n-\n         // Extend with bounds that we can find from the trait.\n-        let trait_bounds = self\n-            .bounds(projection_ty.item_def_id, projection_ty.substs)\n-            .map(|r| VerifyBound::OutlivedBy(r));\n+        let trait_bounds = self.bounds(def_id, substs).map(|r| VerifyBound::OutlivedBy(r));\n \n         // see the extensive comment in projection_must_outlive\n         let recursive_bound = {\n             let mut components = smallvec![];\n-            let ty = self.tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs);\n-            compute_components_recursive(self.tcx, ty.into(), &mut components, visited);\n+            compute_components_recursive(self.tcx, generic_ty.into(), &mut components, visited);\n             self.bound_from_components(&components, visited)\n         };\n \n-        VerifyBound::AnyBound(env_bounds.chain(trait_bounds).collect()).or(recursive_bound)\n-    }\n-\n-    fn opaque_bound(&self, def_id: DefId, substs: SubstsRef<'tcx>) -> VerifyBound<'tcx> {\n-        let bounds: Vec<_> =\n-            self.bounds(def_id, substs).map(|r| VerifyBound::OutlivedBy(r)).collect();\n-        trace!(\"{:#?}\", bounds);\n-        if bounds.is_empty() {\n-            // No bounds means the value must not have any lifetimes.\n-            // FIXME: should we implicitly add 'static to `tcx.item_bounds` for opaque types, just\n-            // like we add `Sized`?\n-            VerifyBound::OutlivedBy(self.tcx.lifetimes.re_static)\n-        } else {\n-            VerifyBound::AnyBound(bounds)\n-        }\n+        VerifyBound::AnyBound(projection_opaque_bounds.chain(trait_bounds).collect())\n+            .or(recursive_bound)\n     }\n \n     fn bound_from_components(\n@@ -199,8 +170,18 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         match *component {\n             Component::Region(lt) => VerifyBound::OutlivedBy(lt),\n             Component::Param(param_ty) => self.param_bound(param_ty),\n-            Component::Opaque(did, substs) => self.opaque_bound(did, substs),\n-            Component::Projection(projection_ty) => self.projection_bound(projection_ty, visited),\n+            Component::Opaque(did, substs) => self.projection_opaque_bounds(\n+                GenericKind::Opaque(did, substs),\n+                did,\n+                substs,\n+                visited,\n+            ),\n+            Component::Projection(projection_ty) => self.projection_opaque_bounds(\n+                GenericKind::Projection(projection_ty),\n+                projection_ty.item_def_id,\n+                projection_ty.substs,\n+                visited,\n+            ),\n             Component::EscapingProjection(ref components) => {\n                 self.bound_from_components(components, visited)\n             }"}, {"sha": "b4c4c013cd25112c28567d3a7488733c0a32de58", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90b6744af7a5c3944ef7d534b315467386e38673/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b6744af7a5c3944ef7d534b315467386e38673/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.rs?ref=90b6744af7a5c3944ef7d534b315467386e38673", "patch": "@@ -1,9 +1,10 @@\n+// check-pass\n+\n #![feature(type_alias_impl_trait)]\n \n type Ty<'a, A> = impl Sized + 'a;\n fn defining<'a, A>() -> Ty<'a, A> {}\n fn assert_static<T: 'static>() {}\n fn test<'a, A>() where Ty<'a, A>: 'static, { assert_static::<Ty<'a, A>>() }\n-//~^ ERROR: may not live long enough\n \n fn main() {}"}, {"sha": "b1c42c2c37fe2a72452fcf16774afc6948319df4", "filename": "src/test/ui/type-alias-impl-trait/implied_bounds2.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37928f59865b5ff53b95fe2f3c02491890a4129d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimplied_bounds2.stderr?ref=37928f59865b5ff53b95fe2f3c02491890a4129d", "patch": "@@ -1,12 +0,0 @@\n-error[E0310]: the opaque type `Ty<'_, A>::{opaque#0}` may not live long enough\n-  --> $DIR/implied_bounds2.rs:6:46\n-   |\n-LL | fn test<'a, A>() where Ty<'a, A>: 'static, { assert_static::<Ty<'a, A>>() }\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `Ty<'_, A>::{opaque#0}: 'static`...\n-   = note: ...so that the type `Ty<'_, A>` will meet its required lifetime bounds\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0310`."}]}