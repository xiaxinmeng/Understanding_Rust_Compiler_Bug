{"sha": "a7612cc773e8f2ae9d1a3f77676eda3888221053", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NjEyY2M3NzNlOGYyYWU5ZDFhM2Y3NzY3NmVkYTM4ODgyMjEwNTM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-02-22T19:52:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-02-23T00:15:48Z"}, "message": "more fallout", "tree": {"sha": "d396dcb0443dcf7e39d64dcfd8070200669d5f30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d396dcb0443dcf7e39d64dcfd8070200669d5f30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7612cc773e8f2ae9d1a3f77676eda3888221053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7612cc773e8f2ae9d1a3f77676eda3888221053", "html_url": "https://github.com/rust-lang/rust/commit/a7612cc773e8f2ae9d1a3f77676eda3888221053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7612cc773e8f2ae9d1a3f77676eda3888221053/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9d242376421654863a5dbb196d4311476839798", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d242376421654863a5dbb196d4311476839798", "html_url": "https://github.com/rust-lang/rust/commit/d9d242376421654863a5dbb196d4311476839798"}], "stats": {"total": 423, "additions": 135, "deletions": 288}, "files": [{"sha": "4f4a63be4365d925d53e4effe3e0d9ead897324c", "filename": "build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -39,10 +39,10 @@ fn git_head_sha1() -> Option<String> {\n         .ok()\n         .and_then(|o| String::from_utf8(o.stdout).ok())\n         .map(|mut s| {\n-            let len = s.trim_right().len();\n-            s.truncate(len);\n-            s\n-        })\n+                 let len = s.trim_right().len();\n+                 s.truncate(len);\n+                 s\n+             })\n }\n \n // Returns `None` if git is not available."}, {"sha": "52d1a8f9f15c9d505d721106102c043e1640abc7", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -335,11 +335,11 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n     let config_path: Option<PathBuf> = matches.opt_str(\"config-path\")\n         .map(PathBuf::from)\n         .and_then(|dir| {\n-            if dir.is_file() {\n-                return dir.parent().map(|v| v.into());\n-            }\n-            Some(dir)\n-        });\n+                      if dir.is_file() {\n+                          return dir.parent().map(|v| v.into());\n+                      }\n+                      Some(dir)\n+                  });\n \n     // if no file argument is supplied and `--file-lines` is not specified, read from stdin\n     if matches.free.is_empty() && !matches.opt_present(\"file-lines\") {"}, {"sha": "e9bd220158f66b41b5d6d2d54298d9de3951ad85", "filename": "src/chains.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -133,9 +133,15 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let other_child_shape = Shape { width: max_width, ..nested_shape };\n     let first_child_shape = if extend {\n         let mut shape = try_opt!(parent_shape.shrink_left(last_line_width(&parent_rewrite)));\n-        shape.offset = shape.offset.checked_sub(context.config.tab_spaces).unwrap_or(0);\n-        shape.indent.block_indent += context.config.tab_spaces;\n-        shape\n+        match context.config.chain_indent {\n+            BlockIndentStyle::Visual => other_child_shape,\n+            BlockIndentStyle::Inherit => shape,\n+            BlockIndentStyle::Tabbed => {\n+                shape.offset = shape.offset.checked_sub(context.config.tab_spaces).unwrap_or(0);\n+                shape.indent.block_indent += context.config.tab_spaces;\n+                shape\n+            }\n+        }\n     } else {\n         other_child_shape\n     };\n@@ -286,7 +292,7 @@ fn make_subexpr_list(expr: &ast::Expr, context: &RewriteContext) -> (ast::Expr,\n \n fn chain_indent(context: &RewriteContext, shape: Shape) -> Shape {\n     match context.config.chain_indent {\n-        BlockIndentStyle::Visual => shape,\n+        BlockIndentStyle::Visual => shape.visual_indent(0),\n         BlockIndentStyle::Inherit => shape.block_indent(0),\n         BlockIndentStyle::Tabbed => shape.block_indent(context.config.tab_spaces),\n     }"}, {"sha": "d4c34a054b34c868a14dd57ccf45f395f46d5847", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -476,7 +476,6 @@ fn rewrite_closure(capture: ast::CaptureBy,\n         }\n \n         // Either we require a block, or tried without and failed.\n-        let body_shape = shape.block();\n         return rewrite_closure_block(&block, prefix, context, body_shape);\n     }\n \n@@ -1409,9 +1408,10 @@ fn rewrite_pat_expr(context: &RewriteContext,\n \n         if let Some(expr_string) = expr_rewrite {\n             let pat_simple = pat.and_then(|p| {\n-                    p.rewrite(context,\n-                              Shape::legacy(context.config.max_width, Indent::empty()))\n-                })\n+                                              p.rewrite(context,\n+                                                        Shape::legacy(context.config.max_width,\n+                                                                      Indent::empty()))\n+                                          })\n                 .map(|s| pat_is_simple(&s));\n \n             if pat.is_none() || pat_simple.unwrap_or(false) || !expr_string.contains('\\n') {\n@@ -1548,8 +1548,9 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                              |item| item.span.lo,\n                              |item| item.span.hi,\n                              |item| {\n-        item.rewrite(context, Shape { width: remaining_width, ..nested_shape })\n-    },\n+                                 item.rewrite(context,\n+                                              Shape { width: remaining_width, ..nested_shape })\n+                             },\n                              span.lo,\n                              span.hi);\n     let mut item_vec: Vec<_> = items.collect();\n@@ -1897,9 +1898,9 @@ pub fn rewrite_unary_suffix<R: Rewrite>(context: &RewriteContext,\n                                         -> Option<String> {\n     rewrite.rewrite(context, try_opt!(shape.sub_width(suffix.len())))\n         .map(|mut r| {\n-            r.push_str(suffix);\n-            r\n-        })\n+                 r.push_str(suffix);\n+                 r\n+             })\n }\n \n fn rewrite_unary_op(context: &RewriteContext,"}, {"sha": "145713ee1ec8bbaa930e1666ddb1f823c6d6d2ff", "filename": "src/file_lines.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -121,8 +121,9 @@ impl FileLines {\n         };\n \n         match canonicalize_path_string(range.file_name()).and_then(|canonical| {\n-            map.get_vec(&canonical).ok_or(())\n-        }) {\n+                                                                       map.get_vec(&canonical)\n+                                                                           .ok_or(())\n+                                                                   }) {\n             Ok(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n             Err(_) => false,\n         }"}, {"sha": "0b432d072afee8e64c21ad0ff06e52b0a88f2934", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -183,10 +183,10 @@ impl<'a> FmtVisitor<'a> {\n         let mut last_pos_of_prev_use_item = pos_before_first_use_item;\n         let mut ordered_use_items = use_items.iter()\n             .map(|p_i| {\n-                let new_item = (&*p_i, last_pos_of_prev_use_item);\n-                last_pos_of_prev_use_item = p_i.span.hi;\n-                new_item\n-            })\n+                     let new_item = (&*p_i, last_pos_of_prev_use_item);\n+                     last_pos_of_prev_use_item = p_i.span.hi;\n+                     new_item\n+                 })\n             .collect::<Vec<_>>();\n         let pos_after_last_use_item = last_pos_of_prev_use_item;\n         // Order the imports by view-path & other import path properties"}, {"sha": "4e5dc9d576504b4b81de9539ced28578c3b35964", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -1668,11 +1668,12 @@ fn rewrite_args(context: &RewriteContext,\n                 span: Span,\n                 variadic: bool)\n                 -> Option<String> {\n-    let mut arg_item_strs = try_opt!(args.iter()\n-                                         .map(|arg| {\n-        arg.rewrite(&context, Shape::legacy(multi_line_budget, arg_indent))\n-    })\n-                                         .collect::<Option<Vec<_>>>());\n+    let mut arg_item_strs =\n+        try_opt!(args.iter()\n+                     .map(|arg| {\n+                              arg.rewrite(&context, Shape::legacy(multi_line_budget, arg_indent))\n+                          })\n+                     .collect::<Option<Vec<_>>>());\n \n     // Account for sugary self.\n     // FIXME: the comment for the self argument is dropped. This is blocked"}, {"sha": "5fbf4a7e15051a6b9efd233921f3945b57d73fe4", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -675,9 +675,9 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n         result.push_str(&try_opt!(bare_fn.lifetimes\n                                       .iter()\n                                       .map(|l| {\n-            l.rewrite(context,\n+                                               l.rewrite(context,\n                       Shape::legacy(try_opt!(shape.width.checked_sub(6)), shape.indent + 4))\n-        })\n+                                           })\n                                       .intersperse(Some(\", \".to_string()))\n                                       .collect::<Option<String>>()));\n         result.push_str(\"> \");"}, {"sha": "820978b8c32e286669d2aaf7ac1525315942af05", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -23,5 +23,4 @@ report_fixme = \"Never\"\n reorder_imports = false\n single_line_if_else_max_width = 0\n format_strings = true\n-chains_overflow_last = true\n take_source_hints = true"}, {"sha": "6646056690d1285d905d5a4c10541569a7076262", "filename": "tests/source/chains-block-indented-base.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d9d242376421654863a5dbb196d4311476839798/tests%2Fsource%2Fchains-block-indented-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d242376421654863a5dbb196d4311476839798/tests%2Fsource%2Fchains-block-indented-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-block-indented-base.rs?ref=d9d242376421654863a5dbb196d4311476839798", "patch": "@@ -1,31 +0,0 @@\n-// rustfmt-single_line_if_else_max_width: 0\n-// rustfmt-chain_base_indent: Inherit\n-// Test chain formatting with block indented base\n-\n-fn floaters() {\n-    let x = Foo {\n-                field1: val1,\n-                field2: val2,\n-            }\n-            .method_call().method_call();\n-\n-    let y = if cond {\n-                val1\n-            } else {\n-                val2\n-            }\n-                .method_call();\n-\n-    {\n-        match x {\n-            PushParam => {\n-                // params are 1-indexed\n-                stack.push(mparams[match cur.to_digit(10) {\n-                                            Some(d) => d as usize - 1,\n-                                            None => return Err(\"bad param number\".to_owned()),\n-                                        }]\n-                               .clone());\n-            }\n-        }\n-    }\n-}"}, {"sha": "29c092d9f1adef361717c2a4174cc035b806dcdd", "filename": "tests/source/chains-no-overflow.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d9d242376421654863a5dbb196d4311476839798/tests%2Fsource%2Fchains-no-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d242376421654863a5dbb196d4311476839798/tests%2Fsource%2Fchains-no-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-no-overflow.rs?ref=d9d242376421654863a5dbb196d4311476839798", "patch": "@@ -1,38 +0,0 @@\n-// rustfmt-single_line_if_else_max_width: 0\n-// rustfmt-chains_overflow_last: false\n-// Test chain formatting without overflowing the last item.\n-\n-fn main() {\n-    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n-                       .ddddddddddddddddddddddddddd();\n-\n-    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd.eeeeeeee();\n-\n-    x()\n-        .y(|| match cond() { true => (), false => () });\n-\n-    loong_func()\n-        .quux(move || if true {\n-            1\n-        } else {\n-            2\n-        });\n-\n-    fffffffffffffffffffffffffffffffffff(a,\n-                                        {\n-                                            SCRIPT_TASK_ROOT\n-                                            .with(|root| {\n-                                                        *root.borrow_mut()  =   Some(&script_task);\n-                                                    });\n-                                        });                                        \n-\n-    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx\n-        .map(|x| x + 5)\n-        .map(|x| x / 2)\n-        .fold(0, |acc, x| acc + x);\n-\n-    aaaaaaaaaaaaaaaa.map(|x| {\n-                         x += 1;\n-                         x\n-                     }).filter(some_mod::some_filter)\n-}"}, {"sha": "f0be8acdce97efb92d7ac5676a671a9ed0dc9d32", "filename": "tests/source/chains-visual.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Fsource%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Fsource%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-visual.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -1,7 +1,6 @@\n // rustfmt-normalize_comments: true\n // rustfmt-single_line_if_else_max_width: 0\n // rustfmt-chain_indent: Visual\n-// rustfmt-chain_base_indent: Visual\n // Test chain formatting.\n \n fn main() {"}, {"sha": "7ce7c55181f1fdda3573edcc974a1bea0a135511", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -295,11 +295,11 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n         .map(|line| line.expect(\"Failed getting line\"))\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n-            regex.captures_iter(&line).next().map(|capture| {\n+                        regex.captures_iter(&line).next().map(|capture| {\n                 (capture.at(1).expect(\"Couldn't unwrap capture\").to_owned(),\n                  capture.at(2).expect(\"Couldn't unwrap capture\").to_owned())\n             })\n-        })\n+                    })\n         .collect()\n }\n "}, {"sha": "f737745b366770834bddef099febfcd03d1353ab", "filename": "tests/target/chains-block-indented-base.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d9d242376421654863a5dbb196d4311476839798/tests%2Ftarget%2Fchains-block-indented-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d242376421654863a5dbb196d4311476839798/tests%2Ftarget%2Fchains-block-indented-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-block-indented-base.rs?ref=d9d242376421654863a5dbb196d4311476839798", "patch": "@@ -1,32 +0,0 @@\n-// rustfmt-single_line_if_else_max_width: 0\n-// rustfmt-chain_base_indent: Inherit\n-// Test chain formatting with block indented base\n-\n-fn floaters() {\n-    let x = Foo {\n-        field1: val1,\n-        field2: val2,\n-    }\n-    .method_call()\n-    .method_call();\n-\n-    let y = if cond {\n-        val1\n-    } else {\n-        val2\n-    }\n-    .method_call();\n-\n-    {\n-        match x {\n-            PushParam => {\n-                // params are 1-indexed\n-                stack.push(mparams[match cur.to_digit(10) {\n-                    Some(d) => d as usize - 1,\n-                    None => return Err(\"bad param number\".to_owned()),\n-                }]\n-                .clone());\n-            }\n-        }\n-    }\n-}"}, {"sha": "a6fd0f92a8da2612f62efd2432313631e9f5f6c0", "filename": "tests/target/chains-no-overflow.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d9d242376421654863a5dbb196d4311476839798/tests%2Ftarget%2Fchains-no-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d242376421654863a5dbb196d4311476839798/tests%2Ftarget%2Fchains-no-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-no-overflow.rs?ref=d9d242376421654863a5dbb196d4311476839798", "patch": "@@ -1,41 +0,0 @@\n-// rustfmt-single_line_if_else_max_width: 0\n-// rustfmt-chains_overflow_last: false\n-// Test chain formatting without overflowing the last item.\n-\n-fn main() {\n-    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n-        .ddddddddddddddddddddddddddd();\n-\n-    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n-        .ddddddddddddddddddddddddddd\n-        .eeeeeeee();\n-\n-    x().y(|| match cond() {\n-            true => (),\n-            false => (),\n-        });\n-\n-    loong_func()\n-        .quux(move || if true {\n-            1\n-        } else {\n-            2\n-        });\n-\n-    fffffffffffffffffffffffffffffffffff(a,\n-                                        {\n-                                            SCRIPT_TASK_ROOT.with(|root| {\n-                                                    *root.borrow_mut() = Some(&script_task);\n-                                                });\n-                                        });\n-\n-    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx.map(|x| x + 5)\n-        .map(|x| x / 2)\n-        .fold(0, |acc, x| acc + x);\n-\n-    aaaaaaaaaaaaaaaa.map(|x| {\n-            x += 1;\n-            x\n-        })\n-        .filter(some_mod::some_filter)\n-}"}, {"sha": "c11070913d9e9634b127d9f3c038b04ebc4b0c98", "filename": "tests/target/chains-no-overlow-2.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9d242376421654863a5dbb196d4311476839798/tests%2Ftarget%2Fchains-no-overlow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d242376421654863a5dbb196d4311476839798/tests%2Ftarget%2Fchains-no-overlow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-no-overlow-2.rs?ref=d9d242376421654863a5dbb196d4311476839798", "patch": "@@ -1,16 +0,0 @@\n-// rustfmt-chains_overflow_last: false\n-\n-fn main() {\n-    reader.lines()\n-        .map(|line| line.expect(\"Failed getting line\"))\n-        .take_while(|line| line_regex.is_match(&line))\n-        .filter_map(|line| {\n-            regex.captures_iter(&line)\n-                .next()\n-                .map(|capture| {\n-                    (capture.at(1).expect(\"Couldn\\'t unwrap capture\").to_owned(),\n-                     capture.at(2).expect(\"Couldn\\'t unwrap capture\").to_owned())\n-                })\n-        })\n-        .collect();\n-}"}, {"sha": "e88c08fb93269ec4ac86e23d382e71215882d14a", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -1,7 +1,6 @@\n // rustfmt-normalize_comments: true\n // rustfmt-single_line_if_else_max_width: 0\n // rustfmt-chain_indent: Visual\n-// rustfmt-chain_base_indent: Visual\n // Test chain formatting.\n \n fn main() {\n@@ -21,15 +20,15 @@ fn main() {\n     // Test case where first chain element isn't a path, but is shorter than\n     // the size of a tab.\n     x().y(|| match cond() {\n-        true => (),\n-        false => (),\n-    });\n+              true => (),\n+              false => (),\n+          });\n \n     loong_func().quux(move || if true {\n-        1\n-    } else {\n-        2\n-    });\n+                          1\n+                      } else {\n+                          2\n+                      });\n \n     some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n         let x = c;\n@@ -50,15 +49,15 @@ fn main() {\n         SCRIPT_TASK_ROOT.with(|root| { *root.borrow_mut() = Some(&script_task); });\n     });\n \n-    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx.map(|x| x + 5)\n-                                                                          .map(|x| x / 2)\n-                                                                          .fold(0,\n-                                                                                |acc, x| acc + x);\n+    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum =\n+        xxxxxxx.map(|x| x + 5)\n+               .map(|x| x / 2)\n+               .fold(0, |acc, x| acc + x);\n \n     aaaaaaaaaaaaaaaa.map(|x| {\n-                        x += 1;\n-                        x\n-                    })\n+                             x += 1;\n+                             x\n+                         })\n                     .filter(some_mod::some_filter)\n }\n \n@@ -105,19 +104,19 @@ fn floaters() {\n \n     Foo { x: val }\n         .baz(|| {\n-            force();\n-            multiline();\n-        })\n+                 force();\n+                 multiline();\n+             })\n         .quux();\n \n     Foo {\n         y: i_am_multi_line,\n         z: ok,\n     }\n     .baz(|| {\n-        force();\n-        multiline();\n-    })\n+             force();\n+             multiline();\n+         })\n     .quux();\n \n     a +"}, {"sha": "c7fdd3076e4e38612d3d8d80385c689f155d4f88", "filename": "tests/target/chains.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -19,15 +19,15 @@ fn main() {\n     // Test case where first chain element isn't a path, but is shorter than\n     // the size of a tab.\n     x().y(|| match cond() {\n-        true => (),\n-        false => (),\n-    });\n+              true => (),\n+              false => (),\n+          });\n \n     loong_func().quux(move || if true {\n-        1\n-    } else {\n-        2\n-    });\n+                          1\n+                      } else {\n+                          2\n+                      });\n \n     some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n         let x = c;\n@@ -53,9 +53,9 @@ fn main() {\n         .fold(0, |acc, x| acc + x);\n \n     aaaaaaaaaaaaaaaa.map(|x| {\n-            x += 1;\n-            x\n-        })\n+                             x += 1;\n+                             x\n+                         })\n         .filter(some_mod::some_filter)\n }\n \n@@ -84,10 +84,10 @@ fn floaters() {\n             PushParam => {\n                 // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n-                        Some(d) => d as usize - 1,\n-                        None => return Err(\"bad param number\".to_owned()),\n-                    }]\n-                    .clone());\n+                                   Some(d) => d as usize - 1,\n+                                   None => return Err(\"bad param number\".to_owned()),\n+                               }]\n+                               .clone());\n             }\n         }\n     }\n@@ -102,19 +102,19 @@ fn floaters() {\n \n     Foo { x: val }\n         .baz(|| {\n-            force();\n-            multiline();\n-        })\n+                 force();\n+                 multiline();\n+             })\n         .quux();\n \n     Foo {\n             y: i_am_multi_line,\n             z: ok,\n         }\n         .baz(|| {\n-            force();\n-            multiline();\n-        })\n+                 force();\n+                 multiline();\n+             })\n         .quux();\n \n     a +\n@@ -173,7 +173,7 @@ fn issue_1004() {\n     }?;\n \n     ty::tls::with(|tcx| {\n-        let tap = ty::Binder(TraitAndProjections(principal, projections));\n-        in_binder(f, tcx, &ty::Binder(\"\"), Some(tap))\n-    })?;\n+                      let tap = ty::Binder(TraitAndProjections(principal, projections));\n+                      in_binder(f, tcx, &ty::Binder(\"\"), Some(tap))\n+                  })?;\n }"}, {"sha": "a3d9cfe863bcfb494229a9a92e54b1c916bc7aa9", "filename": "tests/target/closure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -74,16 +74,16 @@ fn issue863() {\n \n fn issue934() {\n     let hash: &Fn(&&Block) -> u64 = &|block| -> u64 {\n-        let mut h = SpanlessHash::new(cx);\n-        h.hash_block(block);\n-        h.finish()\n-    };\n+                                         let mut h = SpanlessHash::new(cx);\n+                                         h.hash_block(block);\n+                                         h.finish()\n+                                     };\n \n     let hash: &Fn(&&Block) -> u64 = &|block| -> u64 {\n-        let mut h = SpanlessHash::new(cx);\n-        h.hash_block(block);\n-        h.finish();\n-    };\n+                                         let mut h = SpanlessHash::new(cx);\n+                                         h.hash_block(block);\n+                                         h.finish();\n+                                     };\n }\n \n impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {"}, {"sha": "3a9735139873ff53658cad381990486829a2d1a4", "filename": "tests/target/comment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -41,10 +41,10 @@ fn doc_comment() {}\n \n fn chains() {\n     foo.bar(|| {\n-        let x = 10;\n-        // comment\n-        x\n-    })\n+                let x = 10;\n+                // comment\n+                x\n+            })\n }\n \n fn issue_1086() {"}, {"sha": "db8c95ed951d17309dd6fff92eea13231c021f74", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -74,10 +74,10 @@ fn main() {\n \t}\n \n \tloong_func().quux(move || if true {\n-\t\t1\n-\t} else {\n-\t\t2\n-\t});\n+\t\t                  1\n+\t\t                 } else {\n+\t\t                  2\n+\t\t                 });\n \n \tfffffffffffffffffffffffffffffffffff(a, {\n \t\tSCRIPT_TASK_ROOT.with(|root| { *root.borrow_mut() = Some(&script_task); });\n@@ -87,7 +87,7 @@ fn main() {\n \t\t.d();\n \n \tx().y(|| match cond() {\n-\t\ttrue => (),\n-\t\tfalse => (),\n-\t});\n+\t          true => (),\n+\t          false => (),\n+\t      });\n }"}, {"sha": "21dca794e9339b988427acf0042668a34ba86352", "filename": "tests/target/issue-510.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fissue-510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fissue-510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-510.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -14,9 +14,9 @@ impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n                     // and inline-size Auto.\n                     //\n                     // Set inline-end to zero to calculate inline-size.\n-                    let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n-                                                                          (margin_start +\n-                                                                           margin_end));\n+                    let inline_size =\n+                        block.get_shrink_to_fit_inline_size(available_inline_size -\n+                                                            (margin_start + margin_end));\n                     (Au(0), inline_size, margin_start, margin_end)\n                 }\n             };\n@@ -30,9 +30,9 @@ impl ISizeAndMarginsComputer for AbsoluteNonReplaced {\n                     // and inline-size Auto.\n                     //\n                     // Set inline-end to zero to calculate inline-size.\n-                    let inline_size = block.get_shrink_to_fit_inline_size(available_inline_size -\n-                                                                          (margin_start +\n-                                                                           margin_end));\n+                    let inline_size =\n+                        block.get_shrink_to_fit_inline_size(available_inline_size -\n+                                                            (margin_start + margin_end));\n                     (Au(0), inline_size, margin_start, margin_end)\n                 }\n             };"}, {"sha": "852fd4f2f147847628ee47a2eb16b02bffdbc783", "filename": "tests/target/long-match-arms-brace-newline.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-match-arms-brace-newline.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -7,10 +7,7 @@ fn main() {\n     {\n         aaaaaaaa::Bbbbb::Ccccccccccccc(_, Some(ref x)) if x ==\n                                                           \"aaaaaaaaaaa \\\n-                                                           aaaaaaa aaaaaa\" =>\n-        {\n-            Ok(())\n-        }\n+                                                           aaaaaaa aaaaaa\" => Ok(()),\n         _ => Err(x),\n     }\n }"}, {"sha": "349d2c2f639ba3d9dfed1e0fea17f635939924d8", "filename": "tests/target/long_field_access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Flong_field_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Flong_field_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong_field_access.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -1,4 +1,4 @@\n fn f() {\n-    block_flow.base.stacking_relative_position_of_display_port = self.base\n-        .stacking_relative_position_of_display_port;\n+    block_flow.base.stacking_relative_position_of_display_port =\n+        self.base.stacking_relative_position_of_display_port;\n }"}, {"sha": "75156347978e1042f99673a686bd1db29f92de02", "filename": "tests/target/match.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -276,12 +276,14 @@ fn issue494() {\n             hir::StmtExpr(ref expr, id) |\n             hir::StmtSemi(ref expr, id) => {\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n-                    span: stmt.span,\n-                    kind: StmtKind::Expr {\n-                        scope: cx.tcx.region_maps.node_extent(id),\n-                        expr: expr.to_ref(),\n-                    },\n-                })))\n+                                                         span: stmt.span,\n+                                                         kind: StmtKind::Expr {\n+                                                             scope: cx.tcx\n+                                                                 .region_maps\n+                                                                 .node_extent(id),\n+                                                             expr: expr.to_ref(),\n+                                                         },\n+                                                     })))\n             }\n         }\n     }"}, {"sha": "3fc817d64a6e9f9233cc8086415573ef6a435567", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -49,11 +49,11 @@ fn main() {\n     };\n \n     Some(Data::MethodCallData(MethodCallData {\n-        span: sub_span.unwrap(),\n-        scope: self.enclosing_scope(id),\n-        ref_id: def_id,\n-        decl_id: Some(decl_id),\n-    }));\n+                                  span: sub_span.unwrap(),\n+                                  scope: self.enclosing_scope(id),\n+                                  ref_id: def_id,\n+                                  decl_id: Some(decl_id),\n+                              }));\n \n     Diagram {\n         //                 o        This graph demonstrates how"}, {"sha": "7cd2acd958fc1d88634c796439f3b3f787d7536d", "filename": "tests/target/struct_lits_multiline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fstruct_lits_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7612cc773e8f2ae9d1a3f77676eda3888221053/tests%2Ftarget%2Fstruct_lits_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_multiline.rs?ref=a7612cc773e8f2ae9d1a3f77676eda3888221053", "patch": "@@ -59,11 +59,11 @@ fn main() {\n     };\n \n     Some(Data::MethodCallData(MethodCallData {\n-        span: sub_span.unwrap(),\n-        scope: self.enclosing_scope(id),\n-        ref_id: def_id,\n-        decl_id: Some(decl_id),\n-    }));\n+                                  span: sub_span.unwrap(),\n+                                  scope: self.enclosing_scope(id),\n+                                  ref_id: def_id,\n+                                  decl_id: Some(decl_id),\n+                              }));\n \n     Diagram {\n         //                 o        This graph demonstrates how"}]}