{"sha": "afd34765f6ef42bd3472040933f07dbb56621565", "node_id": "C_kwDOAAsO6NoAKGFmZDM0NzY1ZjZlZjQyYmQzNDcyMDQwOTMzZjA3ZGJiNTY2MjE1NjU", "commit": {"author": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-21T20:11:41Z"}, "committer": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-22T18:19:20Z"}, "message": "Move `LitKind` logic to `session_diagnostics` module", "tree": {"sha": "afd8e14c8cc92a717c3004772cdc8ec4524b0292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afd8e14c8cc92a717c3004772cdc8ec4524b0292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afd34765f6ef42bd3472040933f07dbb56621565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afd34765f6ef42bd3472040933f07dbb56621565", "html_url": "https://github.com/rust-lang/rust/commit/afd34765f6ef42bd3472040933f07dbb56621565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afd34765f6ef42bd3472040933f07dbb56621565/comments", "author": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944a3e22ef39cd9640995331e3ab6d373d1241c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/944a3e22ef39cd9640995331e3ab6d373d1241c8", "html_url": "https://github.com/rust-lang/rust/commit/944a3e22ef39cd9640995331e3ab6d373d1241c8"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "65edab78ce74ece4c3b2cb1098b7db250851346b", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afd34765f6ef42bd3472040933f07dbb56621565/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd34765f6ef42bd3472040933f07dbb56621565/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=afd34765f6ef42bd3472040933f07dbb56621565", "patch": "@@ -854,6 +854,7 @@ where\n                                     sess.emit_err(session_diagnostics::DeprecatedItemSuggestion {\n                                         span: mi.span,\n                                         is_nightly: sess.is_nightly_build().then_some(()),\n+                                        details: (),\n                                     });\n                                 }\n \n@@ -1021,23 +1022,11 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                         sess.emit_err(session_diagnostics::IncorrectReprFormatGeneric {\n                             span: item.span(),\n                             repr_arg: &name,\n-                            cause: match value.kind {\n-                                ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n-                                    Some(IncorrectReprFormatGenericCause::Int {\n-                                        span: item.span(),\n-                                        name: &name,\n-                                        int,\n-                                    })\n-                                }\n-                                ast::LitKind::Str(symbol, _) => {\n-                                    Some(IncorrectReprFormatGenericCause::Symbol {\n-                                        span: item.span(),\n-                                        name: &name,\n-                                        symbol,\n-                                    })\n-                                }\n-                                _ => None,\n-                            },\n+                            cause: IncorrectReprFormatGenericCause::from_lit_kind(\n+                                item.span(),\n+                                &value.kind,\n+                                &name,\n+                            ),\n                         });\n                     } else {\n                         if matches!("}, {"sha": "a75e7409fba18ce9b1b6eb6fa9418095bc6d91da", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/afd34765f6ef42bd3472040933f07dbb56621565/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd34765f6ef42bd3472040933f07dbb56621565/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=afd34765f6ef42bd3472040933f07dbb56621565", "patch": "@@ -1,5 +1,6 @@\n use std::num::IntErrorKind;\n \n+use rustc_ast as ast;\n use rustc_errors::{error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_macros::SessionDiagnostic;\n use rustc_session::{parse::ParseSess, SessionDiagnostic};\n@@ -303,6 +304,18 @@ pub(crate) enum IncorrectReprFormatGenericCause<'a> {\n     },\n }\n \n+impl<'a> IncorrectReprFormatGenericCause<'a> {\n+    pub fn from_lit_kind(span: Span, kind: &ast::LitKind, name: &'a str) -> Option<Self> {\n+        match kind {\n+            ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n+                Some(Self::Int { span, name, int: *int })\n+            }\n+            ast::LitKind::Str(symbol, _) => Some(Self::Symbol { span, name, symbol: *symbol }),\n+            _ => None,\n+        }\n+    }\n+}\n+\n #[derive(SessionDiagnostic)]\n #[diag(attr::rustc_promotable_pairing, code = \"E0717\")]\n pub(crate) struct RustcPromotablePairing {\n@@ -326,13 +339,15 @@ pub(crate) struct CfgPredicateIdentifier {\n \n #[derive(SessionDiagnostic)]\n #[diag(attr::deprecated_item_suggestion)]\n-#[note]\n pub(crate) struct DeprecatedItemSuggestion {\n     #[primary_span]\n     pub span: Span,\n \n     #[help]\n     pub is_nightly: Option<()>,\n+\n+    #[note]\n+    pub details: (),\n }\n \n #[derive(SessionDiagnostic)]"}]}