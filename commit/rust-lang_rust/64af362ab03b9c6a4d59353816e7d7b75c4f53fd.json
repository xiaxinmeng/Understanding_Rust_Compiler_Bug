{"sha": "64af362ab03b9c6a4d59353816e7d7b75c4f53fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YWYzNjJhYjAzYjljNmE0ZDU5MzUzODE2ZTdkN2I3NWM0ZjUzZmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-08T09:56:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-08T09:56:07Z"}, "message": "Merge pull request #2334 from Rantanen/ast-fix\n\nImplement nightly libsyntax changes to fix the build", "tree": {"sha": "d404be5520a798f6e86f390b0c23e796f9c35926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d404be5520a798f6e86f390b0c23e796f9c35926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64af362ab03b9c6a4d59353816e7d7b75c4f53fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaU0A3CRBK7hj4Ov3rIwAAdHIIAJExX5wjM7ibriOFkNQcxGkW\napioVMoH6O2r42CPL6M34Tys/IcNyMV530atcRX3CWoPmsIxOdJwXLVo/tm9f93v\nzJQHgK/fSrbLuYAROoDetAttTQbpdPtU+ME9BTdptgXS7TfhNeb3vtwj5lqDLsyR\n4pD8xSm2PiHxC169r9OAA5xXgTEZKrGQfr0IrL9P2VG0CaNpFzO9cPRKoNJ9vhLt\nUTBEHkBn8rrqF53ZqkhOu6pK66EKQAwgdN27OA1fU+SsKzEsPol/4RoUddqR/7kQ\ns37U+WAaDVnT7a7B48xQs6ltHSgaHDijcYwO/yzLiz0u63+7rAJss0o8vq/EEbY=\n=etbi\n-----END PGP SIGNATURE-----\n", "payload": "tree d404be5520a798f6e86f390b0c23e796f9c35926\nparent 752c02d35d1f1a29c10c1c4089bc4c49aa82a808\nparent 91ecb3b8ed4ced1022d9e6cc06c1e15580f45938\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1515405367 +0100\ncommitter GitHub <noreply@github.com> 1515405367 +0100\n\nMerge pull request #2334 from Rantanen/ast-fix\n\nImplement nightly libsyntax changes to fix the build"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64af362ab03b9c6a4d59353816e7d7b75c4f53fd", "html_url": "https://github.com/rust-lang/rust/commit/64af362ab03b9c6a4d59353816e7d7b75c4f53fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64af362ab03b9c6a4d59353816e7d7b75c4f53fd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "752c02d35d1f1a29c10c1c4089bc4c49aa82a808", "url": "https://api.github.com/repos/rust-lang/rust/commits/752c02d35d1f1a29c10c1c4089bc4c49aa82a808", "html_url": "https://github.com/rust-lang/rust/commit/752c02d35d1f1a29c10c1c4089bc4c49aa82a808"}, {"sha": "91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "html_url": "https://github.com/rust-lang/rust/commit/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "3a1ecfbefc783cde927904f8ed5efb54ca2e67e4", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64af362ab03b9c6a4d59353816e7d7b75c4f53fd/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af362ab03b9c6a4d59353816e7d7b75c4f53fd/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=64af362ab03b9c6a4d59353816e7d7b75c4f53fd", "patch": "@@ -69,8 +69,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutexAtomic {\n                         atomic_name\n                     );\n                     match mutex_param.sty {\n-                        ty::TyUint(t) if t != ast::UintTy::Us => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n-                        ty::TyInt(t) if t != ast::IntTy::Is => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::TyUint(t) if t != ast::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::TyInt(t) if t != ast::IntTy::Isize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n                         _ => span_lint(cx, MUTEX_ATOMIC, expr.span, &msg),\n                     };\n                 }"}, {"sha": "4543dfcfb74bf91cb28d2ac0a1d60a75ff93ab0e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/64af362ab03b9c6a4d59353816e7d7b75c4f53fd/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64af362ab03b9c6a4d59353816e7d7b75c4f53fd/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=64af362ab03b9c6a4d59353816e7d7b75c4f53fd", "patch": "@@ -561,15 +561,15 @@ declare_lint! {\n fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n     match typ.sty {\n         ty::TyInt(i) => match i {\n-            IntTy::Is => tcx.data_layout.pointer_size.bits(),\n+            IntTy::Isize => tcx.data_layout.pointer_size.bits(),\n             IntTy::I8 => 8,\n             IntTy::I16 => 16,\n             IntTy::I32 => 32,\n             IntTy::I64 => 64,\n             IntTy::I128 => 128,\n         },\n         ty::TyUint(i) => match i {\n-            UintTy::Us => tcx.data_layout.pointer_size.bits(),\n+            UintTy::Usize => tcx.data_layout.pointer_size.bits(),\n             UintTy::U8 => 8,\n             UintTy::U16 => 16,\n             UintTy::U32 => 32,\n@@ -582,7 +582,7 @@ fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n \n fn is_isize_or_usize(typ: Ty) -> bool {\n     match typ.sty {\n-        ty::TyInt(IntTy::Is) | ty::TyUint(UintTy::Us) => true,\n+        ty::TyInt(IntTy::Isize) | ty::TyUint(UintTy::Usize) => true,\n         _ => false,\n     }\n }\n@@ -1177,31 +1177,31 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -\n \n     let which = match (&ty.sty, cv.val) {\n         (&ty::TyBool, Bool(false)) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MIN)))) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MIN)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is32(::std::i32::MIN)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is64(::std::i64::MIN)))) |\n         (&ty::TyInt(IntTy::I8), Integral(I8(::std::i8::MIN))) |\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MIN))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MIN))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MIN))) |\n         (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MIN))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MIN)))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MIN)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us32(::std::u32::MIN)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us64(::std::u64::MIN)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MIN))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MIN))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MIN))) |\n         (&ty::TyUint(UintTy::U64), Integral(U64(::std::u64::MIN))) |\n         (&ty::TyUint(UintTy::U128), Integral(U128(::std::u128::MIN))) => Minimum,\n \n         (&ty::TyBool, Bool(true)) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MAX)))) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MAX)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is32(::std::i32::MAX)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is64(::std::i64::MAX)))) |\n         (&ty::TyInt(IntTy::I8), Integral(I8(::std::i8::MAX))) |\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MAX))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MAX))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MAX))) |\n         (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MAX))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MAX)))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MAX)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us32(::std::u32::MAX)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us64(::std::u64::MAX)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MAX))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MAX))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MAX))) |\n@@ -1355,7 +1355,7 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n                     FullInt::S(i128::from(i64::max_value())),\n                 ),\n                 IntTy::I128 => (FullInt::S(i128::min_value() as i128), FullInt::S(i128::max_value() as i128)),\n-                IntTy::Is => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n+                IntTy::Isize => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n             }),\n             ty::TyUint(uint_ty) => Some(match uint_ty {\n                 UintTy::U8 => (FullInt::U(u128::from(u8::min_value())), FullInt::U(u128::from(u8::max_value()))),\n@@ -1372,7 +1372,7 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n                     FullInt::U(u128::from(u64::max_value())),\n                 ),\n                 UintTy::U128 => (FullInt::U(u128::min_value() as u128), FullInt::U(u128::max_value() as u128)),\n-                UintTy::Us => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n+                UintTy::Usize => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n             }),\n             _ => None,\n         }"}]}