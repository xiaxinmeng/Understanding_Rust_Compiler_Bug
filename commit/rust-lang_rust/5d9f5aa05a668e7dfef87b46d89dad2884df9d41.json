{"sha": "5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOWY1YWEwNWE2NjhlN2RmZWY4N2I0NmQ4OWRhZDI4ODRkZjlkNDE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T02:13:24Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-13T02:13:24Z"}, "message": "Replace `--write-mode` with `--emit`\n\ncc #1976", "tree": {"sha": "bd5fe0300090045a7588ec18295ebff2038e64e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5fe0300090045a7588ec18295ebff2038e64e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "html_url": "https://github.com/rust-lang/rust/commit/5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8396da188251ae8d6d2970a497ecdf07bf4ef04f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8396da188251ae8d6d2970a497ecdf07bf4ef04f", "html_url": "https://github.com/rust-lang/rust/commit/8396da188251ae8d6d2970a497ecdf07bf4ef04f"}], "stats": {"total": 108, "additions": 32, "deletions": 76}, "files": [{"sha": "6dc437fd27f59a580eb0243074b5d67e2f090b8e", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 45, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "patch": "@@ -105,53 +105,14 @@ just need to run on the root file (usually mod.rs or lib.rs). Rustfmt can also\n read data from stdin. Alternatively, you can use `cargo fmt` to format all\n binary and library targets of your crate.\n \n-You'll probably want to specify the write mode. Currently, there are modes for\n-`check`, `diff`, `replace`, `overwrite`, `display`, `coverage`, `checkstyle`, and `plain`.\n-\n-* `overwrite` Is the default and overwrites the original files _without_ creating backups.\n-* `replace` Overwrites the original files after creating backups of the files.\n-* `display` Will print the formatted files to stdout.\n-* `plain` Also writes to stdout, but with no metadata.\n-* `diff` Will print a diff between the original files and formatted files to stdout.\n-* `check` Checks if the program's formatting matches what rustfmt would do. Silently exits\n-          with code 0 if so, emits a diff and exits with code 1 if not. This option is\n-          designed to be run in CI-like where a non-zero exit signifies incorrect formatting.\n-* `checkstyle` Will output the lines that need to be corrected as a checkstyle XML file,\n-  that can be used by tools like Jenkins.\n-\n-The write mode can be set by passing the `--write-mode` flag on\n-the command line. For example `rustfmt --write-mode=display src/filename.rs`\n-\n-`cargo fmt` uses `--write-mode=overwrite` by default.\n-\n-If you want to restrict reformatting to specific sets of lines, you can\n-use the `--file-lines` option. Its argument is a JSON array of objects\n-with `file` and `range` properties, where `file` is a file name, and\n-`range` is an array representing a range of lines like `[7,13]`. Ranges\n-are 1-based and inclusive of both end points. Specifying an empty array\n-will result in no files being formatted. For example,\n+You can run `rustfmt --help` for information about argument.\n \n-```\n-rustfmt --file-lines '[\n-    {\"file\":\"src/lib.rs\",\"range\":[7,13]},\n-    {\"file\":\"src/lib.rs\",\"range\":[21,29]},\n-    {\"file\":\"src/foo.rs\",\"range\":[10,11]},\n-    {\"file\":\"src/foo.rs\",\"range\":[15,15]}]'\n-```\n-\n-would format lines `7-13` and `21-29` of `src/lib.rs`, and lines `10-11`,\n-and `15` of `src/foo.rs`. No other files would be formatted, even if they\n-are included as out of line modules from `src/lib.rs`.\n-\n-If `rustfmt` successfully reformatted the code it will exit with `0` exit\n-status. Exit status `1` signals some unexpected error, like an unknown option or\n-a failure to read a file. Exit status `2` is returned if there are syntax errors\n-in the input files. `rustfmt` can't format syntactically invalid code. Finally,\n-exit status `3` is returned if there are some issues which can't be resolved\n-automatically. For example, if you have a very long comment line `rustfmt`\n-doesn't split it. Instead it prints a warning and exits with `3`.\n+When running with `--check`, Rustfmt will exit with `0` if Rustfmt would not\n+make any formatting changes to the input, and `1` if Rustfmt would make changes.\n+In other modes, Rustfmt will exit with `1` if there was some error during\n+formatting (for example a parsing or internal error) and `0` if formatting\n+completed without error (whether or not changes were made).\n \n-You can run `rustfmt --help` for more information.\n \n \n ## Running Rustfmt from your editor"}, {"sha": "05ac0ce2f306fc4bcf4802242017887b31f8ca9e", "filename": "bootstrap.sh", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/bootstrap.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/bootstrap.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bootstrap.sh?ref=5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "patch": "@@ -6,12 +6,12 @@\n \n cargo build --release\n \n-target/release/rustfmt --write-mode=overwrite src/lib.rs\n-target/release/rustfmt --write-mode=overwrite src/bin/main.rs\n-target/release/rustfmt --write-mode=overwrite src/cargo-fmt/main.rs\n+target/release/rustfmt src/lib.rs\n+target/release/rustfmt src/bin/main.rs\n+target/release/rustfmt src/cargo-fmt/main.rs\n \n for filename in tests/target/*.rs; do\n     if ! grep -q \"rustfmt-\" \"$filename\"; then\n-        target/release/rustfmt --write-mode=overwrite $filename\n+        target/release/rustfmt $filename\n     fi\n done"}, {"sha": "b8f5225633f0569750efe2d9906c88ebcd1aeba1", "filename": "src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "patch": "@@ -111,6 +111,7 @@ fn make_opts() -> Options {\n          found reverts to the input file path\",\n         \"[Path for the configuration file]\",\n     );\n+    opts.optopt(\"\", \"emit\", \"What data to emit and how\", WRITE_MODE_LIST);\n     opts.optflag(\n         \"\",\n         \"error-on-unformatted\",\n@@ -120,13 +121,13 @@ fn make_opts() -> Options {\n     opts.optopt(\n         \"\",\n         \"file-lines\",\n-        \"Format specified line ranges. See README for more detail on the JSON format.\",\n+        \"Format specified line ranges. Run with `--help file-lines` for more detail.\",\n         \"JSON\",\n     );\n     opts.optflagopt(\n         \"h\",\n         \"help\",\n-        \"Show this message or help about a specific topic: config or file-lines\",\n+        \"Show this message or help about a specific topic: `config` or `file-lines`\",\n         \"=TOPIC\",\n     );\n     opts.optopt(\n@@ -145,12 +146,6 @@ fn make_opts() -> Options {\n     opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n     opts.optflag(\"q\", \"quiet\", \"Print less output\");\n     opts.optflag(\"V\", \"version\", \"Show version information\");\n-    opts.optopt(\n-        \"\",\n-        \"write-mode\",\n-        \"How to write output (not usable when piping from stdin)\",\n-        WRITE_MODE_LIST,\n-    );\n \n     opts\n }"}, {"sha": "e4ba87a88f801de0bf127ad6b72ae507223af749", "filename": "src/config/options.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "patch": "@@ -363,20 +363,20 @@ impl CliOptions {\n         options.config_path = matches.opt_str(\"config-path\").map(PathBuf::from);\n \n         options.check = matches.opt_present(\"check\");\n-        if let Some(ref write_mode) = matches.opt_str(\"write-mode\") {\n+        if let Some(ref emit_str) = matches.opt_str(\"emit\") {\n             if options.check {\n-                return Err(format_err!(\"Invalid to set write-mode and `--check`\"));\n+                return Err(format_err!(\"Invalid to use `--emit` and `--check`\"));\n             }\n-            if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n+            if let Ok(write_mode) = write_mode_from_emit_str(emit_str) {\n                 if write_mode == WriteMode::Overwrite && matches.opt_present(\"backup\") {\n                     options.write_mode = Some(WriteMode::Replace);\n                 } else {\n                     options.write_mode = Some(write_mode);\n                 }\n             } else {\n                 return Err(format_err!(\n-                    \"Invalid write-mode: {}, expected one of {}\",\n-                    write_mode,\n+                    \"Invalid value for `--emit`: {}, expected one of {}\",\n+                    emit_str,\n                     WRITE_MODE_LIST\n                 ));\n             }\n@@ -441,3 +441,13 @@ impl CliOptions {\n         }\n     }\n }\n+\n+fn write_mode_from_emit_str(emit_str: &str) -> FmtResult<WriteMode> {\n+    match emit_str {\n+        \"files\" => Ok(WriteMode::Overwrite),\n+        \"stdout\" => Ok(WriteMode::Display),\n+        \"coverage\" => Ok(WriteMode::Coverage),\n+        \"checkstyle\" => Ok(WriteMode::Checkstyle),\n+        _ => Err(format_err!(\"Invalid value for `--emit`\")),\n+    }\n+}"}, {"sha": "e436856d2862435aa801c1a66749c1fd02427969", "filename": "src/config/summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "patch": "@@ -23,7 +23,7 @@ pub struct Summary {\n     // Code is valid, but it is impossible to format it properly.\n     has_formatting_errors: bool,\n \n-    // Formatted code differs from existing code (write-mode diff only).\n+    // Formatted code differs from existing code (--check only).\n     pub has_diff: bool,\n \n     // Keeps track of time spent in parsing and formatting steps."}, {"sha": "5fb3e4b03e35ff7d779df586c9991c4353483329", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "patch": "@@ -68,7 +68,8 @@ pub use config::{file_lines, load_config, Config, Verbosity, WriteMode};\n \n pub type FmtResult<T> = std::result::Result<T, failure::Error>;\n \n-pub const WRITE_MODE_LIST: &str = \"[overwrite|display|plain|diff|coverage|checkstyle]\";\n+// FIXME: this is badly named since the user-facing name is `emit` not `write-mode`.\n+pub const WRITE_MODE_LIST: &str = \"[files|stdout|coverage|checkstyle]\";\n \n #[macro_use]\n mod utils;"}, {"sha": "4de69296e9f95801cc08f2d532c79b8f92cd436c", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9f5aa05a668e7dfef87b46d89dad2884df9d41/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=5d9f5aa05a668e7dfef87b46d89dad2884df9d41", "patch": "@@ -912,18 +912,7 @@ fn verify_check_works() {\n     let temp_file = make_temp_file(\"temp_check.rs\");\n     assert_cli::Assert::command(&[\n         rustfmt().to_str().unwrap(),\n-        \"--write-mode=check\",\n-        temp_file.path.to_str().unwrap(),\n-    ]).succeeds()\n-        .unwrap();\n-}\n-\n-#[test]\n-fn verify_diff_works() {\n-    let temp_file = make_temp_file(\"temp_diff.rs\");\n-    assert_cli::Assert::command(&[\n-        rustfmt().to_str().unwrap(),\n-        \"--write-mode=diff\",\n+        \"--check\",\n         temp_file.path.to_str().unwrap(),\n     ]).succeeds()\n         .unwrap();"}]}