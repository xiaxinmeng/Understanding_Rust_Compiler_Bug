{"sha": "959a5638031875cda1603a8fd92518753016d51d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OWE1NjM4MDMxODc1Y2RhMTYwM2E4ZmQ5MjUxODc1MzAxNmQ1MWQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-01T18:20:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-01T18:20:22Z"}, "message": "Rollup merge of #65977 - ohadravid:fix-incorrect-diagnostics-with-an-associated-type, r=estebank\n\nFix incorrect diagnostics for expected type in E0271 with an associated type\n\nWith code like the following code:\n\n```rust\n#[derive(Debug)]\nstruct Data {}\n\nfn do_stuff<'a>(iterator: impl Iterator<Item = &'a Data>) {\n    for item in iterator {\n        println!(\"{:?}\", item)\n    }\n}\n\nfn main() {\n    let v = vec![Data {}];\n\n    do_stuff(v.into_iter());\n}\n```\n\nthe diagnostic (in nightly & stable) wrongly complains about the expected type:\n\n```\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<Data> as std::iter::Iterator>::Item == &Data`\n  --> src/main.rs:15:5\n   |\n5  | fn do_stuff<'a>(iterator: impl Iterator<Item = &'a Data>) {\n   |    --------                             --------------- required by this bound in `do_stuff`\n...\n15 |     do_stuff(v.into_iter());\n   |     ^^^^^^^^ expected struct `Data`, found &Data\n   |\n   = note: expected type `Data`\n              found type `&Data`\n```\n\nThis PR fixes this issue by flipping the expected/actual values where appropriate, so it looks like this:\n\n```\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<Data> as std::iter::Iterator>::Item == &Data`\n  --> main.rs:15:5\n   |\n5  | fn do_stuff<'a>(iterator: impl Iterator<Item = &'a Data>) {\n   |    --------                             --------------- required by this bound in `do_stuff`\n...\n15 |     do_stuff(v.into_iter());\n   |     ^^^^^^^^ expected &Data, found struct `Data`\n   |\n   = note: expected type `&Data`\n              found type `Data`\n```\n\nThis improves the output of a lot of existing tests (check out `associated-types-binding-to-type-defined-in-supertrait`!).\n\nThe only change which I wasn't too sure about is in the test `associated-types-overridden-binding-2`, but I think it's an improvement and the underlying problem is with handling of `trait_alias`.\n\nFix #57226, fix #64760, fix #58092.", "tree": {"sha": "42d2e6f0da9cfe7b376b06bc40df803fd19e45e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d2e6f0da9cfe7b376b06bc40df803fd19e45e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959a5638031875cda1603a8fd92518753016d51d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdvHdmCRBK7hj4Ov3rIwAAdHIIAFK+o0tmbkpre1xly7rpocKB\nk568lFZrP0zKN7Iqts5U0Fow7jKLENHV7tlOprabEniNGmMj6kW3TjzdXcxVMjqf\nSaDyJABaE96fCUkzu/gUT/x0P8kW73AsQhmmcORnvbCZsrfbun6W30BihLou13Bw\nuaY+Qk5b9OdNr+viCVKytPy66ZYZ4h9Md4Fg2cIOBXMAk4En0Tu+gBcfIkoSYhXN\nXI/b9MfXCoNCz6NXbi92SCV/1fa9dyu9pl1KcrMs38fjvqFfi1jYlGFSBhieCc1r\njmF1tb5d5sARZZG+sn3h3fmKrE+2CWwb6KdGAjSqDmpk1kH9h6U65cudw6GxSI0=\n=jNi4\n-----END PGP SIGNATURE-----\n", "payload": "tree 42d2e6f0da9cfe7b376b06bc40df803fd19e45e1\nparent 05de0d7c9fce57456ec095cae5cd94cf50a13eba\nparent 8bb54501280eba814b31628db1088ca4f03638e1\nauthor Tyler Mandry <tmandry@gmail.com> 1572632422 -0700\ncommitter GitHub <noreply@github.com> 1572632422 -0700\n\nRollup merge of #65977 - ohadravid:fix-incorrect-diagnostics-with-an-associated-type, r=estebank\n\nFix incorrect diagnostics for expected type in E0271 with an associated type\n\nWith code like the following code:\n\n```rust\n#[derive(Debug)]\nstruct Data {}\n\nfn do_stuff<'a>(iterator: impl Iterator<Item = &'a Data>) {\n    for item in iterator {\n        println!(\"{:?}\", item)\n    }\n}\n\nfn main() {\n    let v = vec![Data {}];\n\n    do_stuff(v.into_iter());\n}\n```\n\nthe diagnostic (in nightly & stable) wrongly complains about the expected type:\n\n```\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<Data> as std::iter::Iterator>::Item == &Data`\n  --> src/main.rs:15:5\n   |\n5  | fn do_stuff<'a>(iterator: impl Iterator<Item = &'a Data>) {\n   |    --------                             --------------- required by this bound in `do_stuff`\n...\n15 |     do_stuff(v.into_iter());\n   |     ^^^^^^^^ expected struct `Data`, found &Data\n   |\n   = note: expected type `Data`\n              found type `&Data`\n```\n\nThis PR fixes this issue by flipping the expected/actual values where appropriate, so it looks like this:\n\n```\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<Data> as std::iter::Iterator>::Item == &Data`\n  --> main.rs:15:5\n   |\n5  | fn do_stuff<'a>(iterator: impl Iterator<Item = &'a Data>) {\n   |    --------                             --------------- required by this bound in `do_stuff`\n...\n15 |     do_stuff(v.into_iter());\n   |     ^^^^^^^^ expected &Data, found struct `Data`\n   |\n   = note: expected type `&Data`\n              found type `Data`\n```\n\nThis improves the output of a lot of existing tests (check out `associated-types-binding-to-type-defined-in-supertrait`!).\n\nThe only change which I wasn't too sure about is in the test `associated-types-overridden-binding-2`, but I think it's an improvement and the underlying problem is with handling of `trait_alias`.\n\nFix #57226, fix #64760, fix #58092.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959a5638031875cda1603a8fd92518753016d51d", "html_url": "https://github.com/rust-lang/rust/commit/959a5638031875cda1603a8fd92518753016d51d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959a5638031875cda1603a8fd92518753016d51d/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05de0d7c9fce57456ec095cae5cd94cf50a13eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/05de0d7c9fce57456ec095cae5cd94cf50a13eba", "html_url": "https://github.com/rust-lang/rust/commit/05de0d7c9fce57456ec095cae5cd94cf50a13eba"}, {"sha": "8bb54501280eba814b31628db1088ca4f03638e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb54501280eba814b31628db1088ca4f03638e1", "html_url": "https://github.com/rust-lang/rust/commit/8bb54501280eba814b31628db1088ca4f03638e1"}], "stats": {"total": 115, "additions": 64, "deletions": 51}, "files": [{"sha": "1f7bce1c644c51ab5c0cfed709ed6aff3eda5480", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -226,13 +226,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     0,\n                     &mut obligations\n                 );\n+\n+                debug!(\"report_projection_error obligation.cause={:?} obligation.param_env={:?}\",\n+                       obligation.cause, obligation.param_env);\n+\n+                debug!(\"report_projection_error normalized_ty={:?} data.ty={:?}\",\n+                       normalized_ty, data.ty);\n+\n+                let is_normalized_ty_expected = match &obligation.cause.code {\n+                    ObligationCauseCode::ItemObligation(_) |\n+                    ObligationCauseCode::BindingObligation(_, _) |\n+                    ObligationCauseCode::ObjectCastObligation(_) => false,\n+                    _ => true,\n+                };\n+\n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env)\n-                    .eq(normalized_ty, data.ty)\n+                    .eq_exp(is_normalized_ty_expected, normalized_ty, data.ty)\n                 {\n-                    values = Some(infer::ValuePairs::Types(ExpectedFound {\n-                        expected: normalized_ty,\n-                        found: data.ty,\n-                    }));\n+                    values = Some(infer::ValuePairs::Types(\n+                        ExpectedFound::new(is_normalized_ty_expected, normalized_ty, data.ty)));\n+\n                     err_buf = error;\n                     err = &err_buf;\n                 }"}, {"sha": "800b762911a62e3bf3532317cd6a6bb3bacf04d1", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -5,10 +5,10 @@ LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n    |    --------       ---------- required by this bound in `blue_car`\n ...\n LL | fn b() { blue_car(ModelT); }\n-   |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n+   |          ^^^^^^^^ expected struct `Blue`, found struct `Black`\n    |\n-   = note: expected type `Black`\n-              found type `Blue`\n+   = note: expected type `Blue`\n+              found type `Black`\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n@@ -17,10 +17,10 @@ LL | fn black_car<C:Car<Color=Black>>(c: C) {\n    |    ---------       ----------- required by this bound in `black_car`\n ...\n LL | fn c() { black_car(ModelU); }\n-   |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`\n+   |          ^^^^^^^^^ expected struct `Black`, found struct `Blue`\n    |\n-   = note: expected type `Blue`\n-              found type `Black`\n+   = note: expected type `Black`\n+              found type `Blue`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "22e04a8f15ca823f5d607b2eb7e207dbae63f96b", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -37,8 +37,8 @@ pub fn main() {\n     let a = 42;\n     foo1(a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected usize, found struct `Bar`\n+    //~| expected struct `Bar`, found usize\n     baz(&a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected usize, found struct `Bar`\n+    //~| expected struct `Bar`, found usize\n }"}, {"sha": "0f2bc84aa1c592d5563d94bb4e293cc5552a9b97", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -16,19 +16,19 @@ LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n    |    ----        ----- required by this bound in `foo1`\n ...\n LL |     foo1(a);\n-   |     ^^^^ expected usize, found struct `Bar`\n+   |     ^^^^ expected struct `Bar`, found usize\n    |\n-   = note: expected type `usize`\n-              found type `Bar`\n+   = note: expected type `Bar`\n+              found type `usize`\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:41:9\n    |\n LL |     baz(&a);\n-   |         ^^ expected usize, found struct `Bar`\n+   |         ^^ expected struct `Bar`, found usize\n    |\n-   = note: expected type `usize`\n-              found type `Bar`\n+   = note: expected type `Bar`\n+              found type `usize`\n    = note: required for the cast to the object type `dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors"}, {"sha": "a8c239389e9776f8b2b8e8d10ead891a5fdd9839", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -7,10 +7,10 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n    |                                           ------------- required by this bound in `foo`\n ...\n LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ expected usize, found isize\n+   |     ^^^^^^^^^^^^^^^^^ expected isize, found usize\n    |\n-   = note: expected type `&usize`\n-              found type `&isize`\n+   = note: expected type `&isize`\n+              found type `&usize`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n@@ -21,10 +21,10 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n    |                                           ------------- required by this bound in `bar`\n ...\n LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n+   |     ^^^^^^^^^^^^^^^^ expected usize, found isize\n    |\n-   = note: expected type `&isize`\n-              found type `&usize`\n+   = note: expected type `&usize`\n+              found type `&isize`\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:91:17"}, {"sha": "b763b82d540cce32fbf0b00c09c6ebc3ba809915", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -5,10 +5,10 @@ LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n    |    --------------                ------ required by this bound in `is_iterator_of`\n ...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found enum `std::option::Option`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter\n    |\n-   = note: expected type `T`\n-              found type `std::option::Option<T>`\n+   = note: expected type `std::option::Option<T>`\n+              found type `T`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "e3a2b5edf3f1b6ee3b02a75a8aa1f0192ddf3c2e", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -2,28 +2,28 @@ error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n    |\n LL |     want_y(t);\n-   |     ^^^^^^ expected associated type, found i32\n+   |     ^^^^^^ expected i32, found associated type\n ...\n LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_y`\n    |\n-   = note: expected type `<T as Foo>::Y`\n-              found type `i32`\n-   = note: consider constraining the associated type `<T as Foo>::Y` to `i32` or calling a method that returns `<T as Foo>::Y`\n+   = note: expected type `i32`\n+              found type `<T as Foo>::Y`\n+   = note: consider constraining the associated type `<T as Foo>::Y` to `i32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n    |\n LL |     want_x(t);\n-   |     ^^^^^^ expected associated type, found u32\n+   |     ^^^^^^ expected u32, found associated type\n ...\n LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_x`\n    |\n-   = note: expected type `<T as Foo>::X`\n-              found type `u32`\n-   = note: consider constraining the associated type `<T as Foo>::X` to `u32` or calling a method that returns `<T as Foo>::X`\n+   = note: expected type `u32`\n+              found type `<T as Foo>::X`\n+   = note: consider constraining the associated type `<T as Foo>::X` to `u32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors"}, {"sha": "02a6ac12dd927a8afca22e25237dfffefabc2c94", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -2,10 +2,10 @@ error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::It\n   --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected u32, found i32\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected i32, found u32\n    |\n-   = note: expected type `u32`\n-              found type `i32`\n+   = note: expected type `i32`\n+              found type `u32`\n    = note: required for the cast to the object type `dyn std::iter::Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error"}, {"sha": "6bef9dca265e72cbfebed5123b1969fa46dfde92", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -33,10 +33,10 @@ error[E0271]: type mismatch resolving `<impl std::future::Future as std::future:\n   --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected u8, found ()\n+   |                                       ^^^^^^ expected (), found u8\n    |\n-   = note: expected type `u8`\n-              found type `()`\n+   = note: expected type `()`\n+              found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types\n@@ -59,10 +59,10 @@ error[E0271]: type mismatch resolving `<impl std::future::Future as std::future:\n   --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected u8, found ()\n+   |                                       ^^^^^^ expected (), found u8\n    |\n-   = note: expected type `u8`\n-              found type `()`\n+   = note: expected type `()`\n+              found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types"}, {"sha": "378e5e3630641bdb9a2b68699f30c253dafd8c20", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -5,10 +5,10 @@ LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n    |    ---                         ------------------ required by this bound in `foo`\n ...\n LL |     foo(3_i8);\n-   |     ^^^ expected reference, found u32\n+   |     ^^^ expected u32, found reference\n    |\n-   = note: expected type `&'static str`\n-              found type `u32`\n+   = note: expected type `u32`\n+              found type `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "9c53c1b86ceafd1cadf50aeac223a3445084f277", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959a5638031875cda1603a8fd92518753016d51d/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=959a5638031875cda1603a8fd92518753016d51d", "patch": "@@ -5,10 +5,10 @@ LL | trait Trait: Sized {\n    | ------------------ required by `Trait`\n ...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found type parameter\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found associated type\n    |\n-   = note: expected type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n-              found type `T`\n+   = note: expected type `T`\n+              found type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n    = note: you might be missing a type parameter or trait bound\n \n error: aborting due to previous error"}]}