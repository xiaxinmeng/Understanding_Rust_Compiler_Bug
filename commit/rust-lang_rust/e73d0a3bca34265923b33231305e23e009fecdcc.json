{"sha": "e73d0a3bca34265923b33231305e23e009fecdcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3M2QwYTNiY2EzNDI2NTkyM2IzMzIzMTMwNWUyM2UwMDlmZWNkY2M=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-03T08:38:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-03T08:38:32Z"}, "message": "Merge branch 'master' into fixme", "tree": {"sha": "8bdba45b3456e2b36273ed0320b98ee41aa6c35a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bdba45b3456e2b36273ed0320b98ee41aa6c35a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e73d0a3bca34265923b33231305e23e009fecdcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcBOuICRBK7hj4Ov3rIwAAdHIIAKI+q0WGwjRhcUNp2G3FH+IK\ng8NSdVu4yuN8fN59mOlbDpIL5xC75gPyBi2uFOCfr0WIj3jXBuqst3ezVuhjxLuS\nZOBSWDdllPY0UEiK8DYaYXpRXx1Y9rfuOsU+greIaIKVan+ZHM1uMhmPIYIlJX0f\nmdDay7DdWN9Pp7fG37o/AOzbB9aw4og3LX0mz8HPd08ankeo5530yb6VyKVNeA7q\nH2Tjsax0G0qcdibxc91L7Th4WGxPgOTqe14e2sW5JkCP4s8+WbQbHUkUHmlr9Kp0\nHeNw6KOBNrEmYxmCG1T7JfbcQ8uSDZcA6zOakVXASMc/l7S+qrIJsObv+3zu4L8=\n=F/xJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bdba45b3456e2b36273ed0320b98ee41aa6c35a\nparent 36a2b8952283e1cb86f4133ebd6ea778da1a5b50\nparent 21fd5fd16895ccd28644134fb19e5771dcc96522\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1543826312 +0100\ncommitter GitHub <noreply@github.com> 1543826312 +0100\n\nMerge branch 'master' into fixme"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e73d0a3bca34265923b33231305e23e009fecdcc", "html_url": "https://github.com/rust-lang/rust/commit/e73d0a3bca34265923b33231305e23e009fecdcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e73d0a3bca34265923b33231305e23e009fecdcc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a2b8952283e1cb86f4133ebd6ea778da1a5b50", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a2b8952283e1cb86f4133ebd6ea778da1a5b50", "html_url": "https://github.com/rust-lang/rust/commit/36a2b8952283e1cb86f4133ebd6ea778da1a5b50"}, {"sha": "21fd5fd16895ccd28644134fb19e5771dcc96522", "url": "https://api.github.com/repos/rust-lang/rust/commits/21fd5fd16895ccd28644134fb19e5771dcc96522", "html_url": "https://github.com/rust-lang/rust/commit/21fd5fd16895ccd28644134fb19e5771dcc96522"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "2dc6eee5de9dbe75bfa720237f37047264e73a46", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e73d0a3bca34265923b33231305e23e009fecdcc/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d0a3bca34265923b33231305e23e009fecdcc/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=e73d0a3bca34265923b33231305e23e009fecdcc", "patch": "@@ -155,6 +155,9 @@ fn setup(ask_user: bool) {\n     File::create(dir.join(\"Xargo.toml\")).unwrap()\n         .write_all(br#\"\n [dependencies.std]\n+default_features = false\n+# We need the `panic_unwind` feature because we use the `unwind` panic strategy.\n+# Using `abort` works for libstd, but then libtest will not compile.\n features = [\"panic_unwind\"]\n \n [dependencies.test]"}, {"sha": "ec4e621a24a91b503f288cec09c734cba5ab12eb", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e73d0a3bca34265923b33231305e23e009fecdcc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d0a3bca34265923b33231305e23e009fecdcc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e73d0a3bca34265923b33231305e23e009fecdcc", "patch": "@@ -310,26 +310,9 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n \n+    #[inline(always)]\n     fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n-        if !ecx.machine.validate {\n-            return false;\n-        }\n-\n-        // Some functions are whitelisted until we figure out how to fix them.\n-        // We walk up the stack a few frames to also cover their callees.\n-        const WHITELIST: &[(&str, &str)] = &[\n-            // Uses mem::uninitialized\n-            (\"std::sys::windows::mutex::Mutex::\", \"\"),\n-        ];\n-        for frame in ecx.stack().iter()\n-            .rev().take(3)\n-        {\n-            let name = frame.instance.to_string();\n-            if WHITELIST.iter().any(|(prefix, suffix)| name.starts_with(prefix) && name.ends_with(suffix)) {\n-                return false;\n-            }\n-        }\n-        true\n+        ecx.machine.validate\n     }\n \n     /// Returns Ok() when the function was handled, fail otherwise"}, {"sha": "1c11d07c1bcc5912a53f338bb1b2d4f358d3f966", "filename": "tests/compiletest.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e73d0a3bca34265923b33231305e23e009fecdcc/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d0a3bca34265923b33231305e23e009fecdcc/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=e73d0a3bca34265923b33231305e23e009fecdcc", "patch": "@@ -124,16 +124,33 @@ fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n     path.metadata().map(|m| m.is_dir()).unwrap_or(false)\n }\n \n-fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n+fn target_has_std<P: Into<PathBuf>>(path: P) -> bool {\n+    let mut path = path.into();\n+    path.push(\"lib\");\n+    std::fs::read_dir(path)\n+        .expect(\"invalid target\")\n+        .map(|entry| entry.unwrap())\n+        .filter(|entry| entry.file_type().unwrap().is_file())\n+        .filter_map(|entry| entry.file_name().into_string().ok())\n+        .any(|file_name| file_name.starts_with(\"libstd\") && file_name.ends_with(\".rlib\"))\n+}\n+\n+\n+fn for_all_targets<F: FnMut(String)>(sysroot: &Path, f: F) {\n     let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n-    for entry in std::fs::read_dir(target_dir).expect(\"invalid sysroot\") {\n-        let entry = entry.unwrap();\n-        if !is_target_dir(entry.path()) {\n-            continue;\n-        }\n-        let target = entry.file_name().into_string().unwrap();\n-        f(target);\n+    let mut targets = std::fs::read_dir(target_dir)\n+        .expect(\"invalid sysroot\")\n+        .map(|entry| entry.unwrap())\n+        .filter(|entry| is_target_dir(entry.path()))\n+        .filter(|entry| target_has_std(entry.path()))\n+        .map(|entry| entry.file_name().into_string().unwrap())\n+        .peekable();\n+\n+    if targets.peek().is_none() {\n+        panic!(\"No valid targets found\");\n     }\n+\n+    targets.for_each(f);\n }\n \n fn get_sysroot() -> PathBuf {"}]}