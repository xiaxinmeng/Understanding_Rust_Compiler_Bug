{"sha": "b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZjhiZDYzNTY5NjY0NGY4NmJkYjVlYTY5ZmI2OWVjNTBiYzZkOWI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-16T16:52:23Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T18:35:35Z"}, "message": "mir: use attribute over `-Z polymorphize-errors`\n\nThis commit replaces the `-Z polymorphize-errors` debugging flag with a\n`#[rustc_polymorphize_error]` attribute for use on functions.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "f4c081257834b91b3eb89613bf3507adcf22585f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c081257834b91b3eb89613bf3507adcf22585f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8V4/cACgkQJZLnbIc4\nH9kLTQ/8Co4Dsx61e/65rUC/wkJGTw2UgvQzfwP0Mtznm56Pr6IsOf2Y/WkOTIHz\nQ8AbccQLoFKTVeyReOoF3JVFwANGdQs1dju7Ho2cjxL7TRPO3NOm8ePZaEwZadbU\npTXZJ0Rj1RLwjAgDrnwLIf6J9ZoPLAtvKoh7YNjfJBDEFfsg+vhOb91pdKhjRYit\nbfk4EH6TTzVSUYF88hAB30Nyxn3xVDn/gK9DTN9IyViM/O1+WAYYQV2A7tcusEP/\nGtultY5YOYBV/fIiqM+Tbw0/9B/hAE5cUj4ijs1iIabppNTcu8/YWYFb76McPy6s\nznj6rL+nfbmbt9Fm//BRM6IqVBdNe0xFRuxLGcRWi61mkA03L6wQ6YXmODH2X7f2\nfPzNmLSftEX0XcNq7DeJCP0u4+B3ij/H3LhxWmuf3JcCk+6FtCbi0RV1uW7vq6Rk\ntgDYtLII/BSpE7Cy1TUoMIsQA9hEqUmI7tiZeWAqydOe7cPJxSf1PBdK8f62fDYW\nvti3yjL13sr2Ns0CeBqGxlBkVIYofwxLupT8ov5vGnvGGdAmDz1RK4YAhP5riYEM\nzA9XWGFEo3dMwhtn+W7nnTRFrUrAMfy+5K5L2W2i7V686fGhHx/4eh0RtrieqHrC\n36gQLjrP/vLOV7PEu9APOkFLeuseY0by5DtR7DR6cZ6sO8DzqZs=\n=Nn1V\n-----END PGP SIGNATURE-----", "payload": "tree f4c081257834b91b3eb89613bf3507adcf22585f\nparent 5ce29d3d6f8994a1d9db9b9f8aa076001f7b8d07\nauthor David Wood <david@davidtw.co> 1594918343 +0100\ncommitter David Wood <david@davidtw.co> 1595270135 +0100\n\nmir: use attribute over `-Z polymorphize-errors`\n\nThis commit replaces the `-Z polymorphize-errors` debugging flag with a\n`#[rustc_polymorphize_error]` attribute for use on functions.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "html_url": "https://github.com/rust-lang/rust/commit/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ce29d3d6f8994a1d9db9b9f8aa076001f7b8d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce29d3d6f8994a1d9db9b9f8aa076001f7b8d07", "html_url": "https://github.com/rust-lang/rust/commit/5ce29d3d6f8994a1d9db9b9f8aa076001f7b8d07"}], "stats": {"total": 201, "additions": 125, "deletions": 76}, "files": [{"sha": "879f06f89a70a8a92bc55be479634edb854578b3", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -568,6 +568,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     rustc_attr!(TEST, rustc_synthetic, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_symbol_name, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_polymorphize_error, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_def_path, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_mir, AssumedUsed, template!(List: \"arg1, arg2, ...\")),\n     rustc_attr!(TEST, rustc_dump_program_clauses, AssumedUsed, template!(Word)),"}, {"sha": "2a1f8fb843fb39945da569b147a317a26813eca8", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::ty::{\n     query::Providers,\n     Const, Ty, TyCtxt,\n };\n+use rustc_span::symbol::sym;\n use std::convert::TryInto;\n \n /// Provide implementations of queries relating to polymorphization analysis.\n@@ -77,7 +78,7 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> u64 {\n \n     // Emit errors for debugging and testing if enabled.\n     let is_full = unused_parameters == 0;\n-    if tcx.sess.opts.debugging_opts.polymorphize_errors && !is_full {\n+    if !is_full {\n         emit_unused_generic_params_error(tcx, def_id, generics, unused_parameters);\n     }\n \n@@ -169,16 +170,17 @@ fn mark_used_by_predicates<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, used_paramete\n     }\n }\n \n-/// Emit an error for the function represented by `def_id`, labelling each generic parameter which\n-/// was unused.\n+/// Emit errors for the function annotated by `#[rustc_polymorphize_error]`, labelling each generic\n+/// parameter which was unused.\n fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n     unused_parameters: u64,\n ) {\n     debug!(\"emit_unused_generic_params_error: def_id={:?}\", def_id);\n-    if !def_id.is_local() {\n+    let base_def_id = tcx.closure_base_def_id(def_id);\n+    if !tcx.get_attrs(base_def_id).iter().any(|a| a.check_name(sym::rustc_polymorphize_error)) {\n         return;\n     }\n "}, {"sha": "6b2097240e215f5d4d75af507f42a3478e1dea19", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -951,8 +951,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable polonius-based borrow-checker (default: no)\"),\n     polymorphize: bool = (true, parse_bool, [TRACKED],\n           \"perform polymorphization analysis\"),\n-    polymorphize_errors: bool = (false, parse_bool, [TRACKED],\n-          \"emit errors from polymorphization analysis for debugging\"),\n     pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n     pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],"}, {"sha": "22a5115c7f556f12c508a678c299cd59048ec6b4", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -921,6 +921,7 @@ symbols! {\n         rustc_peek_liveness,\n         rustc_peek_maybe_init,\n         rustc_peek_maybe_uninit,\n+        rustc_polymorphize_error,\n         rustc_private,\n         rustc_proc_macro_decls,\n         rustc_promotable,"}, {"sha": "7bbcaebea0125ceb6bb6d1bd626e67d1a44b4ef8", "filename": "src/test/ui/polymorphization/const_parameters/closures.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,33 +1,36 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n-#![feature(const_generics)]\n+#![feature(const_generics, rustc_attrs)]\n //~^ WARN the feature `const_generics` is incomplete\n \n // This test checks that the polymorphization analysis correctly detects unused const\n // parameters in closures.\n \n // Function doesn't have any generic parameters to be unused.\n+#[rustc_polymorphize_error]\n pub fn no_parameters() {\n     let _ = || {};\n }\n \n // Function has an unused generic parameter in parent and closure.\n+#[rustc_polymorphize_error]\n pub fn unused<const T: usize>() -> usize {\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n     let add_one = |x: usize| x + 1;\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n     add_one(3)\n }\n \n // Function has an unused generic parameter in closure, but not in parent.\n+#[rustc_polymorphize_error]\n pub fn used_parent<const T: usize>() -> usize {\n     let x: usize = T;\n     let add_one = |x: usize| x + 1;\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n     x + add_one(3)\n }\n \n // Function uses generic parameter in value of a binding in closure.\n+#[rustc_polymorphize_error]\n pub fn used_binding<const T: usize>() -> usize {\n     let x = || {\n         let y: usize = T;\n@@ -38,14 +41,16 @@ pub fn used_binding<const T: usize>() -> usize {\n }\n \n // Closure uses a value as an upvar, which used the generic parameter.\n+#[rustc_polymorphize_error]\n pub fn unused_upvar<const T: usize>() -> usize {\n     let x: usize = T;\n     let y = || x;\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n     y()\n }\n \n // Closure uses generic parameter in substitutions to another function.\n+#[rustc_polymorphize_error]\n pub fn used_substs<const T: usize>() -> usize {\n     let x = || unused::<T>();\n     x()"}, {"sha": "eb872eac74c9177c9c4d7a3c7b50373fde983475", "filename": "src/test/ui/polymorphization/const_parameters/closures.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Fclosures.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,14 +1,14 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/closures.rs:3:12\n+  --> $DIR/closures.rs:2:12\n    |\n-LL | #![feature(const_generics)]\n+LL | #![feature(const_generics, rustc_attrs)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:17:19\n+  --> $DIR/closures.rs:18:19\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n    |                     - generic parameter `T` is unused\n@@ -17,13 +17,13 @@ LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:15:8\n+  --> $DIR/closures.rs:16:8\n    |\n LL | pub fn unused<const T: usize>() -> usize {\n    |        ^^^^^^       - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:25:19\n+  --> $DIR/closures.rs:27:19\n    |\n LL | pub fn used_parent<const T: usize>() -> usize {\n    |                          - generic parameter `T` is unused\n@@ -32,7 +32,7 @@ LL |     let add_one = |x: usize| x + 1;\n    |                   ^^^^^^^^^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:43:13\n+  --> $DIR/closures.rs:47:13\n    |\n LL | pub fn unused_upvar<const T: usize>() -> usize {\n    |                           - generic parameter `T` is unused"}, {"sha": "77539b94e489a0a712d17520a007b02142b057e5", "filename": "src/test/ui/polymorphization/const_parameters/functions.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,26 +1,29 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n-#![feature(const_generics)]\n+#![feature(const_generics, rustc_attrs)]\n //~^ WARN the feature `const_generics` is incomplete\n \n // This test checks that the polymorphization analysis correctly detects unused const\n // parameters in functions.\n \n // Function doesn't have any generic parameters to be unused.\n+#[rustc_polymorphize_error]\n pub fn no_parameters() {}\n \n // Function has an unused generic parameter.\n+#[rustc_polymorphize_error]\n pub fn unused<const T: usize>() {\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n }\n \n // Function uses generic parameter in value of a binding.\n+#[rustc_polymorphize_error]\n pub fn used_binding<const T: usize>() -> usize {\n     let x: usize = T;\n     x\n }\n \n // Function uses generic parameter in substitutions to another function.\n+#[rustc_polymorphize_error]\n pub fn used_substs<const T: usize>() {\n     unused::<T>()\n }"}, {"sha": "c99a9b788ebc5e012430a69ef8093870f9530e65", "filename": "src/test/ui/polymorphization/const_parameters/functions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fconst_parameters%2Ffunctions.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,14 +1,14 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/functions.rs:3:12\n+  --> $DIR/functions.rs:2:12\n    |\n-LL | #![feature(const_generics)]\n+LL | #![feature(const_generics, rustc_attrs)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n error: item has unused generic parameters\n-  --> $DIR/functions.rs:13:8\n+  --> $DIR/functions.rs:14:8\n    |\n LL | pub fn unused<const T: usize>() {\n    |        ^^^^^^       - generic parameter `T` is unused"}, {"sha": "1acba7c8bf14cff441da22bb9328b1a87cdecbed", "filename": "src/test/ui/polymorphization/generators.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,6 +1,5 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n-#![feature(const_generics, generators, generator_trait)]\n+#![feature(const_generics, generators, generator_trait, rustc_attrs)]\n //~^ WARN the feature `const_generics` is incomplete\n \n use std::marker::Unpin;\n@@ -30,6 +29,7 @@ where\n \n // This test checks that the polymorphization analysis functions on generators.\n \n+#[rustc_polymorphize_error]\n pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n     //~^ ERROR item has unused generic parameters\n     || {\n@@ -39,20 +39,23 @@ pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin\n     }\n }\n \n+#[rustc_polymorphize_error]\n pub fn used_type_in_yield<Y: Default>() -> impl Generator<(), Yield = Y, Return = u32> + Unpin {\n     || {\n         yield Y::default();\n         2\n     }\n }\n \n+#[rustc_polymorphize_error]\n pub fn used_type_in_return<R: Default>() -> impl Generator<(), Yield = u32, Return = R> + Unpin {\n     || {\n         yield 3;\n         R::default()\n     }\n }\n \n+#[rustc_polymorphize_error]\n pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n     //~^ ERROR item has unused generic parameters\n     || {\n@@ -62,6 +65,7 @@ pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return =\n     }\n }\n \n+#[rustc_polymorphize_error]\n pub fn used_const_in_yield<const Y: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin\n {\n     || {\n@@ -70,6 +74,7 @@ pub fn used_const_in_yield<const Y: u32>() -> impl Generator<(), Yield = u32, Re\n     }\n }\n \n+#[rustc_polymorphize_error]\n pub fn used_const_in_return<const R: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin\n {\n     || {"}, {"sha": "b3e5a2de0270a6049e27335c1addcb5dd9c7a916", "filename": "src/test/ui/polymorphization/generators.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fgenerators.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,7 +1,7 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generators.rs:3:12\n+  --> $DIR/generators.rs:2:12\n    |\n-LL | #![feature(const_generics, generators, generator_trait)]\n+LL | #![feature(const_generics, generators, generator_trait, rustc_attrs)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n@@ -27,7 +27,7 @@ LL | pub fn unused_type<T>() -> impl Generator<(), Yield = u32, Return = u32> +\n    |        ^^^^^^^^^^^ - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/generators.rs:58:5\n+  --> $DIR/generators.rs:61:5\n    |\n LL |   pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n    |                             - generic parameter `T` is unused\n@@ -40,7 +40,7 @@ LL | |     }\n    | |_____^\n \n error: item has unused generic parameters\n-  --> $DIR/generators.rs:56:8\n+  --> $DIR/generators.rs:59:8\n    |\n LL | pub fn unused_const<const T: u32>() -> impl Generator<(), Yield = u32, Return = u32> + Unpin {\n    |        ^^^^^^^^^^^^       - generic parameter `T` is unused"}, {"sha": "4bde349a336ea3b2dd85d8264fe53a340b3665a9", "filename": "src/test/ui/polymorphization/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,18 +1,20 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n+#![feature(rustc_attrs)]\n \n // This test checks that the polymorphization analysis doesn't break when the\n // function/closure doesn't just have generic parameters.\n \n // Function has an unused generic parameter.\n+#[rustc_polymorphize_error]\n pub fn unused<'a, T>(_: &'a u32) {\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n }\n \n+#[rustc_polymorphize_error]\n pub fn used<'a, T: Default>(_: &'a u32) -> u32 {\n     let _: T = Default::default();\n     let add_one = |x: u32| x + 1;\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n     add_one(3)\n }\n "}, {"sha": "6c85e4f291611f855d91d4c74d70377b2376072b", "filename": "src/test/ui/polymorphization/lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Flifetimes.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,11 +1,11 @@\n error: item has unused generic parameters\n-  --> $DIR/lifetimes.rs:8:8\n+  --> $DIR/lifetimes.rs:9:8\n    |\n LL | pub fn unused<'a, T>(_: &'a u32) {\n    |        ^^^^^^     - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/lifetimes.rs:14:19\n+  --> $DIR/lifetimes.rs:16:19\n    |\n LL | pub fn used<'a, T: Default>(_: &'a u32) -> u32 {\n    |                 - generic parameter `T` is unused"}, {"sha": "390ac983aa00779060eccd348aa1750bab5035c7", "filename": "src/test/ui/polymorphization/predicates.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,13 +1,15 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n+#![feature(rustc_attrs)]\n \n // This test checks that `T` is considered used in `foo`, because it is used in a predicate for\n // `I`, which is used.\n \n+#[rustc_polymorphize_error]\n fn bar<I>() {\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n }\n \n+#[rustc_polymorphize_error]\n fn foo<I, T>(_: I)\n where\n     I: Iterator<Item = T>,"}, {"sha": "1b266083463a2518a4816a3fd1151e077a6b6137", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,5 +1,5 @@\n error: item has unused generic parameters\n-  --> $DIR/predicates.rs:7:4\n+  --> $DIR/predicates.rs:8:4\n    |\n LL | fn bar<I>() {\n    |    ^^^ - generic parameter `I` is unused"}, {"sha": "4b296c019088776277c330d9e73dc160c24a97b6", "filename": "src/test/ui/polymorphization/too-many-generic-params.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftoo-many-generic-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftoo-many-generic-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftoo-many-generic-params.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,9 +1,10 @@\n // build-pass\n-// compile-flags: -Zpolymorphize-errors\n+#![feature(rustc_attrs)]\n \n // This test checks that the analysis doesn't panic when there are >64 generic parameters, but\n // instead considers those parameters used.\n \n+#[rustc_polymorphize_error]\n fn bar<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, AA,\n        AB, AC, AD, AE, AF, AG, AH, AI, AJ, AK, AL, AM, AN, AO, AP, AQ, AR, AS, AT, AU, AV, AW,\n        AX, AY, AZ, BA, BB, BC, BD, BE, BF, BG, BH, BI, BJ, BK, BL>()"}, {"sha": "1fbe13380b5b99ab9cb172dbeff9b680320dee97", "filename": "src/test/ui/polymorphization/type_parameters/closures.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,31 +1,36 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n+#![feature(stmt_expr_attributes, rustc_attrs)]\n \n // This test checks that the polymorphization analysis correctly detects unused type\n // parameters in closures.\n \n // Function doesn't have any generic parameters to be unused.\n+#[rustc_polymorphize_error]\n pub fn no_parameters() {\n     let _ = || {};\n }\n \n // Function has an unused generic parameter in parent and closure.\n+#[rustc_polymorphize_error]\n pub fn unused<T>() -> u32 {\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n+\n     let add_one = |x: u32| x + 1;\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n     add_one(3)\n }\n \n // Function has an unused generic parameter in closure, but not in parent.\n+#[rustc_polymorphize_error]\n pub fn used_parent<T: Default>() -> u32 {\n     let _: T = Default::default();\n     let add_one = |x: u32| x + 1;\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n     add_one(3)\n }\n \n // Function uses generic parameter in value of a binding in closure.\n+#[rustc_polymorphize_error]\n pub fn used_binding_value<T: Default>() -> T {\n     let x = || {\n         let y: T = Default::default();\n@@ -36,6 +41,7 @@ pub fn used_binding_value<T: Default>() -> T {\n }\n \n // Function uses generic parameter in generic of a binding in closure.\n+#[rustc_polymorphize_error]\n pub fn used_binding_generic<T>() -> Option<T> {\n     let x = || {\n         let y: Option<T> = None;\n@@ -46,26 +52,32 @@ pub fn used_binding_generic<T>() -> Option<T> {\n }\n \n // Function and closure uses generic parameter in argument.\n+#[rustc_polymorphize_error]\n pub fn used_argument<T>(t: T) -> u32 {\n     let x = |_: T| 3;\n     x(t)\n }\n \n // Closure uses generic parameter in argument.\n+#[rustc_polymorphize_error]\n pub fn used_argument_closure<T: Default>() -> u32 {\n     let t: T = Default::default();\n+\n     let x = |_: T| 3;\n     x(t)\n }\n \n // Closure uses generic parameter as upvar.\n+#[rustc_polymorphize_error]\n pub fn used_upvar<T: Default>() -> T {\n     let x: T = Default::default();\n+\n     let y = || x;\n     y()\n }\n \n // Closure uses generic parameter in substitutions to another function.\n+#[rustc_polymorphize_error]\n pub fn used_substs<T>() -> u32 {\n     let x = || unused::<T>();\n     x()\n@@ -75,14 +87,16 @@ struct Foo<F>(F);\n \n impl<F: Default> Foo<F> {\n     // Function has an unused generic parameter from impl and fn.\n+    #[rustc_polymorphize_error]\n     pub fn unused_all<G: Default>() -> u32 {\n-//~^ ERROR item has unused generic parameters\n+        //~^ ERROR item has unused generic parameters\n         let add_one = |x: u32| x + 1;\n-//~^ ERROR item has unused generic parameters\n+        //~^ ERROR item has unused generic parameters\n         add_one(3)\n     }\n \n     // Function uses generic parameter from impl and fn in closure.\n+    #[rustc_polymorphize_error]\n     pub fn used_both<G: Default>() -> u32 {\n         let add_one = |x: u32| {\n             let _: F = Default::default();\n@@ -94,10 +108,11 @@ impl<F: Default> Foo<F> {\n     }\n \n     // Function uses generic parameter from fn in closure.\n+    #[rustc_polymorphize_error]\n     pub fn used_fn<G: Default>() -> u32 {\n-//~^ ERROR item has unused generic parameters\n+        //~^ ERROR item has unused generic parameters\n         let add_one = |x: u32| {\n-//~^ ERROR item has unused generic parameters\n+            //~^ ERROR item has unused generic parameters\n             let _: G = Default::default();\n             x + 1\n         };\n@@ -106,10 +121,11 @@ impl<F: Default> Foo<F> {\n     }\n \n     // Function uses generic parameter from impl in closure.\n+    #[rustc_polymorphize_error]\n     pub fn used_impl<G: Default>() -> u32 {\n-//~^ ERROR item has unused generic parameters\n+        //~^ ERROR item has unused generic parameters\n         let add_one = |x: u32| {\n-//~^ ERROR item has unused generic parameters\n+            //~^ ERROR item has unused generic parameters\n             let _: F = Default::default();\n             x + 1\n         };\n@@ -118,6 +134,7 @@ impl<F: Default> Foo<F> {\n     }\n \n     // Closure uses generic parameter in substitutions to another function.\n+    #[rustc_polymorphize_error]\n     pub fn used_substs() -> u32 {\n         let x = || unused::<F>();\n         x()"}, {"sha": "d68e6e25a1eb969ae48bb03f0e3c455dbf7b7311", "filename": "src/test/ui/polymorphization/type_parameters/closures.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Fclosures.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,20 +1,20 @@\n error: item has unused generic parameters\n-  --> $DIR/closures.rs:15:19\n+  --> $DIR/closures.rs:18:19\n    |\n LL | pub fn unused<T>() -> u32 {\n    |               - generic parameter `T` is unused\n-LL |\n+...\n LL |     let add_one = |x: u32| x + 1;\n    |                   ^^^^^^^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:13:8\n+  --> $DIR/closures.rs:15:8\n    |\n LL | pub fn unused<T>() -> u32 {\n    |        ^^^^^^ - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:23:19\n+  --> $DIR/closures.rs:27:19\n    |\n LL | pub fn used_parent<T: Default>() -> u32 {\n    |                    - generic parameter `T` is unused\n@@ -23,28 +23,28 @@ LL |     let add_one = |x: u32| x + 1;\n    |                   ^^^^^^^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:80:23\n+  --> $DIR/closures.rs:93:23\n    |\n LL | impl<F: Default> Foo<F> {\n    |      - generic parameter `F` is unused\n-LL |     // Function has an unused generic parameter from impl and fn.\n+...\n LL |     pub fn unused_all<G: Default>() -> u32 {\n    |                       - generic parameter `G` is unused\n LL |\n LL |         let add_one = |x: u32| x + 1;\n    |                       ^^^^^^^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:78:12\n+  --> $DIR/closures.rs:91:12\n    |\n LL | impl<F: Default> Foo<F> {\n    |      - generic parameter `F` is unused\n-LL |     // Function has an unused generic parameter from impl and fn.\n+...\n LL |     pub fn unused_all<G: Default>() -> u32 {\n    |            ^^^^^^^^^^ - generic parameter `G` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:111:23\n+  --> $DIR/closures.rs:127:23\n    |\n LL |       pub fn used_impl<G: Default>() -> u32 {\n    |                        - generic parameter `G` is unused\n@@ -58,13 +58,13 @@ LL | |         };\n    | |_________^\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:109:12\n+  --> $DIR/closures.rs:125:12\n    |\n LL |     pub fn used_impl<G: Default>() -> u32 {\n    |            ^^^^^^^^^ - generic parameter `G` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:99:23\n+  --> $DIR/closures.rs:114:23\n    |\n LL |   impl<F: Default> Foo<F> {\n    |        - generic parameter `F` is unused\n@@ -78,7 +78,7 @@ LL | |         };\n    | |_________^\n \n error: item has unused generic parameters\n-  --> $DIR/closures.rs:97:12\n+  --> $DIR/closures.rs:112:12\n    |\n LL | impl<F: Default> Foo<F> {\n    |      - generic parameter `F` is unused"}, {"sha": "38f10148c2c526ef442ce16222ed8fa59eb9a2c0", "filename": "src/test/ui/polymorphization/type_parameters/functions.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,32 +1,37 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n+#![feature(rustc_attrs)]\n \n // This test checks that the polymorphization analysis correctly detects unused type\n // parameters in functions.\n \n // Function doesn't have any generic parameters to be unused.\n+#[rustc_polymorphize_error]\n pub fn no_parameters() {}\n \n // Function has an unused generic parameter.\n+#[rustc_polymorphize_error]\n pub fn unused<T>() {\n-//~^ ERROR item has unused generic parameters\n+    //~^ ERROR item has unused generic parameters\n }\n \n // Function uses generic parameter in value of a binding.\n+#[rustc_polymorphize_error]\n pub fn used_binding_value<T: Default>() {\n     let _: T = Default::default();\n }\n \n // Function uses generic parameter in generic of a binding.\n+#[rustc_polymorphize_error]\n pub fn used_binding_generic<T>() {\n     let _: Option<T> = None;\n }\n \n // Function uses generic parameter in argument.\n-pub fn used_argument<T>(_: T) {\n-}\n+#[rustc_polymorphize_error]\n+pub fn used_argument<T>(_: T) {}\n \n // Function uses generic parameter in substitutions to another function.\n+#[rustc_polymorphize_error]\n pub fn used_substs<T>() {\n     unused::<T>()\n }\n@@ -35,33 +40,39 @@ struct Foo<F>(F);\n \n impl<F: Default> Foo<F> {\n     // Function has an unused generic parameter from impl.\n+    #[rustc_polymorphize_error]\n     pub fn unused_impl() {\n-//~^ ERROR item has unused generic parameters\n+        //~^ ERROR item has unused generic parameters\n     }\n \n     // Function has an unused generic parameter from impl and fn.\n+    #[rustc_polymorphize_error]\n     pub fn unused_both<G: Default>() {\n-//~^ ERROR item has unused generic parameters\n+        //~^ ERROR item has unused generic parameters\n     }\n \n     // Function uses generic parameter from impl.\n+    #[rustc_polymorphize_error]\n     pub fn used_impl() {\n         let _: F = Default::default();\n     }\n \n     // Function uses generic parameter from impl.\n+    #[rustc_polymorphize_error]\n     pub fn used_fn<G: Default>() {\n-//~^ ERROR item has unused generic parameters\n+        //~^ ERROR item has unused generic parameters\n         let _: G = Default::default();\n     }\n \n     // Function uses generic parameter from impl.\n+    #[rustc_polymorphize_error]\n     pub fn used_both<G: Default>() {\n         let _: F = Default::default();\n         let _: G = Default::default();\n     }\n \n     // Function uses generic parameter in substitutions to another function.\n+    #[rustc_polymorphize_error]\n     pub fn used_substs() {\n         unused::<F>()\n     }"}, {"sha": "be4c6576e964557b5ca0586ea138ada357eff54e", "filename": "src/test/ui/polymorphization/type_parameters/functions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Ftype_parameters%2Ffunctions.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,20 +1,20 @@\n error: item has unused generic parameters\n-  --> $DIR/functions.rs:11:8\n+  --> $DIR/functions.rs:13:8\n    |\n LL | pub fn unused<T>() {\n    |        ^^^^^^ - generic parameter `T` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/functions.rs:38:12\n+  --> $DIR/functions.rs:44:12\n    |\n LL | impl<F: Default> Foo<F> {\n    |      - generic parameter `F` is unused\n-LL |     // Function has an unused generic parameter from impl.\n+...\n LL |     pub fn unused_impl() {\n    |            ^^^^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/functions.rs:43:12\n+  --> $DIR/functions.rs:50:12\n    |\n LL | impl<F: Default> Foo<F> {\n    |      - generic parameter `F` is unused\n@@ -23,7 +23,7 @@ LL |     pub fn unused_both<G: Default>() {\n    |            ^^^^^^^^^^^ - generic parameter `G` is unused\n \n error: item has unused generic parameters\n-  --> $DIR/functions.rs:53:12\n+  --> $DIR/functions.rs:62:12\n    |\n LL | impl<F: Default> Foo<F> {\n    |      - generic parameter `F` is unused"}, {"sha": "d2f3d4f13cdcc0c996147652347dfca45a6eac51", "filename": "src/test/ui/polymorphization/unsized_cast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.rs?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -1,17 +1,18 @@\n // build-fail\n-// compile-flags: -Zpolymorphize-errors\n-#![feature(fn_traits, unboxed_closures)]\n+#![feature(fn_traits, rustc_attrs, unboxed_closures)]\n \n // This test checks that the polymorphization analysis considers a closure\n // as using all generic parameters if it does an unsizing cast.\n \n+#[rustc_polymorphize_error]\n fn foo<T: Default>() {\n     let _: T = Default::default();\n     (|| Box::new(|| {}) as Box<dyn Fn()>)();\n     //~^ ERROR item has unused generic parameters\n     //~^^ ERROR item has unused generic parameters\n }\n \n+#[rustc_polymorphize_error]\n fn foo2<T: Default>() {\n     let _: T = Default::default();\n     (|| {"}, {"sha": "b8b96bbdf15a6e4009950b24f7cbc8057a8add1d", "filename": "src/test/ui/polymorphization/unsized_cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Funsized_cast.stderr?ref=b1f8bd635696644f86bdb5ea69fb69ec50bc6d9b", "patch": "@@ -17,7 +17,7 @@ LL |     (|| Box::new(|| {}) as Box<dyn Fn()>)();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: item has unused generic parameters\n-  --> $DIR/unsized_cast.rs:19:15\n+  --> $DIR/unsized_cast.rs:20:15\n    |\n LL | fn foo2<T: Default>() {\n    |         - generic parameter `T` is unused"}]}