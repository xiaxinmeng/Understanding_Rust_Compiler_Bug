{"sha": "f7ad223f8e83c8572835db563485206dce16d15a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YWQyMjNmOGU4M2M4NTcyODM1ZGI1NjM0ODUyMDZkY2UxNmQxNWE=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-10-19T04:19:01Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-10-19T04:19:01Z"}, "message": "Touch up net tests", "tree": {"sha": "7b797082e7368c20e4ff39ce3f63754ceda9e16f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b797082e7368c20e4ff39ce3f63754ceda9e16f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ad223f8e83c8572835db563485206dce16d15a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ad223f8e83c8572835db563485206dce16d15a", "html_url": "https://github.com/rust-lang/rust/commit/f7ad223f8e83c8572835db563485206dce16d15a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ad223f8e83c8572835db563485206dce16d15a/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f497861d426c8724dd84f161ca21f274663963", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f497861d426c8724dd84f161ca21f274663963", "html_url": "https://github.com/rust-lang/rust/commit/d3f497861d426c8724dd84f161ca21f274663963"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "93a056faf53f126554fabfd61cd81b8aa386bcec", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f7ad223f8e83c8572835db563485206dce16d15a/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ad223f8e83c8572835db563485206dce16d15a/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=f7ad223f8e83c8572835db563485206dce16d15a", "patch": "@@ -373,39 +373,28 @@ mod tests {\n     }\n \n     #[test]\n-    fn connect_ip4_loopback() {\n-        let addr = next_test_ip4();\n-        let acceptor = t!(TcpListener::bind(&addr));\n-\n-        let _t = thread::spawn(move|| {\n-            let mut stream = t!(TcpStream::connect(&(\"127.0.0.1\", addr.port())));\n-            t!(stream.write(&[44]));\n-        });\n-\n-        let mut stream = t!(acceptor.accept()).0;\n-        let mut buf = [0];\n-        t!(stream.read(&mut buf));\n-        assert!(buf[0] == 44);\n-    }\n-\n-    #[test]\n-    fn connect_ip6_loopback() {\n-        let addr = next_test_ip6();\n-        let acceptor = t!(TcpListener::bind(&addr));\n+    fn connect_loopback() {\n+        each_ip(&mut |addr| {\n+            let acceptor = t!(TcpListener::bind(&addr));\n \n-        let _t = thread::spawn(move|| {\n-            let mut stream = t!(TcpStream::connect(&(\"::1\", addr.port())));\n-            t!(stream.write(&[66]));\n-        });\n+            let _t = thread::spawn(move|| {\n+                let host = match addr {\n+                    SocketAddr::V4(..) => \"127.0.0.1\",\n+                    SocketAddr::V6(..) => \"::1\",\n+                };\n+                let mut stream = t!(TcpStream::connect(&(host, addr.port())));\n+                t!(stream.write(&[66]));\n+            });\n \n-        let mut stream = t!(acceptor.accept()).0;\n-        let mut buf = [0];\n-        t!(stream.read(&mut buf));\n-        assert!(buf[0] == 66);\n+            let mut stream = t!(acceptor.accept()).0;\n+            let mut buf = [0];\n+            t!(stream.read(&mut buf));\n+            assert!(buf[0] == 66);\n+        })\n     }\n \n     #[test]\n-    fn smoke_test_ip6() {\n+    fn smoke_test() {\n         each_ip(&mut |addr| {\n             let acceptor = t!(TcpListener::bind(&addr));\n \n@@ -425,7 +414,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn read_eof_ip4() {\n+    fn read_eof() {\n         each_ip(&mut |addr| {\n             let acceptor = t!(TcpListener::bind(&addr));\n \n@@ -470,7 +459,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn multiple_connect_serial_ip4() {\n+    fn multiple_connect_serial() {\n         each_ip(&mut |addr| {\n             let max = 10;\n             let acceptor = t!(TcpListener::bind(&addr));\n@@ -527,7 +516,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn multiple_connect_interleaved_lazy_schedule_ip4() {\n+    fn multiple_connect_interleaved_lazy_schedule() {\n         const MAX: usize = 10;\n         each_ip(&mut |addr| {\n             let acceptor = t!(TcpListener::bind(&addr));\n@@ -560,7 +549,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn socket_and_peer_name_ip4() {\n+    fn socket_and_peer_name() {\n         each_ip(&mut |addr| {\n             let listener = t!(TcpListener::bind(&addr));\n             let so_name = t!(listener.local_addr());"}]}