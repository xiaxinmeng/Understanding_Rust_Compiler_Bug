{"sha": "68d03c0917fb8515436d510822cea5908e9a5285", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZDAzYzA5MTdmYjg1MTU0MzZkNTEwODIyY2VhNTkwOGU5YTUyODU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-30T13:14:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T13:14:56Z"}, "message": "Rollup merge of #59539 - GuillaumeGomez:rustdoc-infinite-recursion, r=eddyb\n\nFix infinite recursion\n\nTemporary fix for #59502.\n\nr? @eddyb", "tree": {"sha": "02ff4b6e4d15f3e9fed0c14c29a17d0168c6d857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ff4b6e4d15f3e9fed0c14c29a17d0168c6d857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d03c0917fb8515436d510822cea5908e9a5285", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcn2vRCRBK7hj4Ov3rIwAAdHIIADZzVxVTKVCPf0FC+TCt6xfP\nftg9FOkaG6rSGTn8Sl9jL6NK6psMhmVijNmp5yE6dbybnjMY+nml/LA8r6WB28M+\nitoSEBK6tlA6cU7OL3xtcZfLZ4KP2vfiNeFHVyejBalcV54laIGAUkZB//+9HP7i\nx7iPzTfGrw5GNCht6BzZf5NBvixTTJU4zOBInmB7TL3djYrvec9wWGZxa4blo3o9\nzdj2LK3pIituvJD1c1dSeiqnyOJjGh5yNXDvQDVfrJiFGZ/7d3bppOIgfl9PM+I6\nfOWMkpnrlqcuZZ/5hIGfbpUeZJ60nq9IM42Uz4BupSaqWvELrQYtxlzzMy5u9fQ=\n=l2Tr\n-----END PGP SIGNATURE-----\n", "payload": "tree 02ff4b6e4d15f3e9fed0c14c29a17d0168c6d857\nparent c9dca36a3694bcbb1a742748b72065ed1ed3a060\nparent 29885ff2915665f1e5b53c6c21609a12812bf29e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553951696 +0100\ncommitter GitHub <noreply@github.com> 1553951696 +0100\n\nRollup merge of #59539 - GuillaumeGomez:rustdoc-infinite-recursion, r=eddyb\n\nFix infinite recursion\n\nTemporary fix for #59502.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d03c0917fb8515436d510822cea5908e9a5285", "html_url": "https://github.com/rust-lang/rust/commit/68d03c0917fb8515436d510822cea5908e9a5285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d03c0917fb8515436d510822cea5908e9a5285/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9dca36a3694bcbb1a742748b72065ed1ed3a060", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9dca36a3694bcbb1a742748b72065ed1ed3a060", "html_url": "https://github.com/rust-lang/rust/commit/c9dca36a3694bcbb1a742748b72065ed1ed3a060"}, {"sha": "29885ff2915665f1e5b53c6c21609a12812bf29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/29885ff2915665f1e5b53c6c21609a12812bf29e", "html_url": "https://github.com/rust-lang/rust/commit/29885ff2915665f1e5b53c6c21609a12812bf29e"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "27ffe4583df252ef27ecd3f178a98bd860701206", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68d03c0917fb8515436d510822cea5908e9a5285/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d03c0917fb8515436d510822cea5908e9a5285/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=68d03c0917fb8515436d510822cea5908e9a5285", "patch": "@@ -1769,9 +1769,13 @@ fn get_real_types(\n     generics: &Generics,\n     arg: &Type,\n     cx: &DocContext<'_>,\n+    recurse: i32,\n ) -> FxHashSet<Type> {\n     let arg_s = arg.to_string();\n     let mut res = FxHashSet::default();\n+    if recurse >= 10 { // FIXME: remove this whole recurse thing when the recursion bug is fixed\n+        return res;\n+    }\n     if arg.is_full_generic() {\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| {\n             match g {\n@@ -1788,7 +1792,7 @@ fn get_real_types(\n                                 continue\n                             }\n                             if let Some(ty) = x.get_type(cx) {\n-                                let adds = get_real_types(generics, &ty, cx);\n+                                let adds = get_real_types(generics, &ty, cx, recurse + 1);\n                                 if !adds.is_empty() {\n                                     res.extend(adds);\n                                 } else if !ty.is_full_generic() {\n@@ -1806,7 +1810,7 @@ fn get_real_types(\n         }) {\n             for bound in bound.get_bounds().unwrap_or_else(|| &[]) {\n                 if let Some(ty) = bound.get_trait_type() {\n-                    let adds = get_real_types(generics, &ty, cx);\n+                    let adds = get_real_types(generics, &ty, cx, recurse + 1);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n@@ -1820,7 +1824,7 @@ fn get_real_types(\n         if let Some(gens) = arg.generics() {\n             for gen in gens.iter() {\n                 if gen.is_full_generic() {\n-                    let adds = get_real_types(generics, gen, cx);\n+                    let adds = get_real_types(generics, gen, cx, recurse + 1);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n@@ -1847,7 +1851,7 @@ pub fn get_all_types(\n         if arg.type_.is_self_type() {\n             continue;\n         }\n-        let args = get_real_types(generics, &arg.type_, cx);\n+        let args = get_real_types(generics, &arg.type_, cx, 0);\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n@@ -1857,7 +1861,7 @@ pub fn get_all_types(\n \n     let ret_types = match decl.output {\n         FunctionRetTy::Return(ref return_type) => {\n-            let mut ret = get_real_types(generics, &return_type, cx);\n+            let mut ret = get_real_types(generics, &return_type, cx, 0);\n             if ret.is_empty() {\n                 ret.insert(return_type.clone());\n             }"}]}