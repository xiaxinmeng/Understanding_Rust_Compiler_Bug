{"sha": "6f8888cfe70007878deb1e38e58c299e69e8e259", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODg4OGNmZTcwMDA3ODc4ZGViMWUzOGU1OGMyOTllNjllOGUyNTk=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-07-31T03:37:18Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-02T16:49:36Z"}, "message": "Sort enums", "tree": {"sha": "cdfbce811c70a16e5cbccfc9d7f536599bdbb1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdfbce811c70a16e5cbccfc9d7f536599bdbb1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8888cfe70007878deb1e38e58c299e69e8e259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8888cfe70007878deb1e38e58c299e69e8e259", "html_url": "https://github.com/rust-lang/rust/commit/6f8888cfe70007878deb1e38e58c299e69e8e259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8888cfe70007878deb1e38e58c299e69e8e259/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7e99b2099175bb7b141f67ba2779c80a78a6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7e99b2099175bb7b141f67ba2779c80a78a6a1", "html_url": "https://github.com/rust-lang/rust/commit/2c7e99b2099175bb7b141f67ba2779c80a78a6a1"}], "stats": {"total": 138, "additions": 131, "deletions": 7}, "files": [{"sha": "7f8eeec01a745cd25d140dced6be8b4b89d15695", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 131, "deletions": 7, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/6f8888cfe70007878deb1e38e58c299e69e8e259/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8888cfe70007878deb1e38e58c299e69e8e259/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=6f8888cfe70007878deb1e38e58c299e69e8e259", "patch": "@@ -19,10 +19,15 @@ pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     } else if let Some(struct_ast) = ctx.find_node_at_offset::<ast::Struct>() {\n         match struct_ast.field_list() {\n             Some(ast::FieldList::RecordFieldList(it)) => add_sort_fields_assist(acc, it),\n-            _ => None,\n+            _ => {\n+                cov_mark::hit!(not_applicable_if_sorted_or_empty_or_single);\n+                None\n+            }\n         }\n     } else if let Some(union_ast) = ctx.find_node_at_offset::<ast::Union>() {\n         add_sort_fields_assist(acc, union_ast.record_field_list()?)\n+    } else if let Some(enum_ast) = ctx.find_node_at_offset::<ast::Enum>() {\n+        add_sort_variants_assist(acc, enum_ast.variant_list()?)\n     } else {\n         None\n     }\n@@ -61,7 +66,7 @@ fn add_sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) ->\n     let sorted = sort_by_name(&methods);\n \n     if methods == sorted {\n-        cov_mark::hit!(not_applicable_if_sorted);\n+        cov_mark::hit!(not_applicable_if_sorted_or_empty_or_single);\n         return None;\n     }\n \n@@ -76,7 +81,7 @@ fn add_sort_fields_assist(\n     let sorted = sort_by_name(&fields);\n \n     if fields == sorted {\n-        cov_mark::hit!(not_applicable_if_sorted);\n+        cov_mark::hit!(not_applicable_if_sorted_or_empty_or_single);\n         return None;\n     }\n \n@@ -88,6 +93,23 @@ fn add_sort_fields_assist(\n     )\n }\n \n+fn add_sort_variants_assist(acc: &mut Assists, variant_list: ast::VariantList) -> Option<()> {\n+    let variants: Vec<_> = variant_list.variants().collect();\n+    let sorted = sort_by_name(&variants);\n+\n+    if variants == sorted {\n+        cov_mark::hit!(not_applicable_if_sorted_or_empty_or_single);\n+        return None;\n+    }\n+\n+    acc.add_rewrite(\n+        \"Sort variants alphabetically\",\n+        variants,\n+        sorted,\n+        variant_list.syntax().text_range(),\n+    )\n+}\n+\n fn sort_by_name<T: NameOwner + Clone>(initial: &[T]) -> Vec<T> {\n     initial\n         .iter()\n@@ -109,9 +131,72 @@ mod tests {\n \n     use super::*;\n \n+    #[test]\n+    fn not_applicable_if_trait_empty() {\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+t$0rait Bar {\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_impl_empty() {\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+struct Bar;            \n+$0impl Bar {\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_struct_empty() {\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+$0struct Bar;\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_struct_empty2() {\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+$0struct Bar { };\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_enum_empty() {\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+$0enum ZeroVariants {};\n+        \"#,\n+        )\n+    }\n+\n     #[test]\n     fn not_applicable_if_trait_sorted() {\n-        cov_mark::check!(not_applicable_if_sorted);\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n \n         check_assist_not_applicable(\n             sort_items,\n@@ -127,7 +212,7 @@ t$0rait Bar {\n \n     #[test]\n     fn not_applicable_if_impl_sorted() {\n-        cov_mark::check!(not_applicable_if_sorted);\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n \n         check_assist_not_applicable(\n             sort_items,\n@@ -144,7 +229,7 @@ $0impl Bar {\n \n     #[test]\n     fn not_applicable_if_struct_sorted() {\n-        cov_mark::check!(not_applicable_if_sorted);\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n \n         check_assist_not_applicable(\n             sort_items,\n@@ -160,7 +245,7 @@ $0struct Bar {\n \n     #[test]\n     fn not_applicable_if_union_sorted() {\n-        cov_mark::check!(not_applicable_if_sorted);\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n \n         check_assist_not_applicable(\n             sort_items,\n@@ -174,6 +259,22 @@ $0union Bar {\n         )\n     }\n \n+    #[test]\n+    fn not_applicable_if_enum_sorted() {\n+        cov_mark::check!(not_applicable_if_sorted_or_empty_or_single);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+$0enum Bar {\n+    a,\n+    b,\n+    c,\n+}\n+        \"#,\n+        )\n+    }\n+\n     #[test]\n     fn sort_trait() {\n         check_assist(\n@@ -303,6 +404,29 @@ union Bar {\n     a: u32,\n     b: u8,\n     c: u64,\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn sort_enum() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+$0enum Bar {\n+    d{ first: u32, second: usize},\n+    b = 14,\n+    a,\n+    c(u32, usize),\n+}\n+        \"#,\n+            r#\"\n+enum Bar {\n+    a,\n+    b = 14,\n+    c(u32, usize),\n+    d{ first: u32, second: usize},\n }\n         \"#,\n         )"}]}