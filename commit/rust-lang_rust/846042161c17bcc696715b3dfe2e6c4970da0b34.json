{"sha": "846042161c17bcc696715b3dfe2e6c4970da0b34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NjA0MjE2MWMxN2JjYzY5NjcxNWIzZGZlMmU2YzQ5NzBkYTBiMzQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-02T23:25:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T15:04:38Z"}, "message": "Custom error when moving arg outside of its closure\n\nWhen given the following code:\n\n```rust\nfn give_any<F: for<'r> FnOnce(&'r ())>(f: F) {\n    f(&());\n}\n\nfn main() {\n    let mut x = None;\n    give_any(|y| x = Some(y));\n}\n```\n\nprovide a custom error:\n\n```\nerror: borrowed data cannot be moved outside of its closure\n --> file.rs:7:27\n  |\n6 |     let mut x = None;\n  |         ----- binding declared outside of closure\n7 |     give_any(|y| x = Some(y));\n  |              ---          ^ cannot be assigned to binding outside of its closure\n  |              |\n  |              closure you can't escape\n```\n\ninstead of the generic lifetime error:\n\n```\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n --> file.rs:7:27\n  |\n7 |     give_any(|y| x = Some(y));\n  |                           ^\n  |\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 7:14...\n --> file.rs:7:14\n  |\n7 |     give_any(|y| x = Some(y));\n  |              ^^^^^^^^^^^^^^^\nnote: ...so that expression is assignable (expected &(), found &())\n --> file.rs:7:27\n  |\n7 |     give_any(|y| x = Some(y));\n  |                           ^\nnote: but, the lifetime must be valid for the block suffix following statement 0 at 6:5...\n --> file.rs:6:5\n  |\n6 | /     let mut x = None;\n7 | |     give_any(|y| x = Some(y));\n8 | | }\n  | |_^\nnote: ...so that variable is valid at time of its declaration\n --> file.rs:6:9\n  |\n6 |     let mut x = None;\n  |         ^^^^^\n```", "tree": {"sha": "75069a38c6b18a3a7d1e8d7a2ad41c18529ff527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75069a38c6b18a3a7d1e8d7a2ad41c18529ff527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/846042161c17bcc696715b3dfe2e6c4970da0b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/846042161c17bcc696715b3dfe2e6c4970da0b34", "html_url": "https://github.com/rust-lang/rust/commit/846042161c17bcc696715b3dfe2e6c4970da0b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/846042161c17bcc696715b3dfe2e6c4970da0b34/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb345a0be3ba3fa1970fe02789791c5c72788d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb345a0be3ba3fa1970fe02789791c5c72788d8f", "html_url": "https://github.com/rust-lang/rust/commit/bb345a0be3ba3fa1970fe02789791c5c72788d8f"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "3cd7c5e0af3ee58966c7459927a56c9374453b47", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=846042161c17bcc696715b3dfe2e6c4970da0b34", "patch": "@@ -66,7 +66,7 @@ use hir::map as hir_map;\n use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n-use ty::{self, Region, Ty, TyCtxt, TypeFoldable, TypeVariants};\n+use ty::{self, Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVariants};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n@@ -1067,6 +1067,40 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                sub_region: Region<'tcx>,\n                                sup_origin: SubregionOrigin<'tcx>,\n                                sup_region: Region<'tcx>) {\n+\n+        // #45983: when trying to assign the contents of an argument to a binding outside of a\n+        // closure, provide a specific message pointing this out.\n+        if let (&SubregionOrigin::BindingTypeIsNotValidAtDecl(ref external_span),\n+                &SubregionOrigin::Subtype(TypeTrace { ref cause, .. }),\n+                &RegionKind::ReFree(ref free_region)) = (&sub_origin, &sup_origin, sup_region) {\n+            let hir = &self.tcx.hir;\n+            if let Some(node_id) = hir.as_local_node_id(free_region.scope) {\n+                match hir.get(node_id) {\n+                    hir_map::NodeExpr(hir::Expr {\n+                        node: hir::ExprClosure(_, _, _, closure_span, false),\n+                        ..\n+                    }) => {\n+                        let sp = var_origin.span();\n+                        let mut err = self.tcx.sess.struct_span_err(\n+                            sp,\n+                            \"borrowed data cannot be moved outside of its closure\");\n+                        let label = match cause.code {\n+                            ObligationCauseCode::ExprAssignable => {\n+                                \"cannot be assigned to binding outside of its closure\"\n+                            }\n+                            _ => \"cannot be moved outside of its closure\",\n+                        };\n+                        err.span_label(sp, label);\n+                        err.span_label(*closure_span, \"closure you can't escape\");\n+                        err.span_label(*external_span, \"binding declared outside of closure\");\n+                        err.emit();\n+                        return;\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+\n         let mut err = self.report_inference_failure(var_origin);\n \n         self.tcx.note_and_explain_region(region_scope_tree, &mut err,"}, {"sha": "042c55eed866e4b281a92be01e6c5baca479ebb4", "filename": "src/test/compile-fail/regions-escape-bound-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs?ref=846042161c17bcc696715b3dfe2e6c4970da0b34", "patch": "@@ -16,5 +16,5 @@ fn with_int<F>(f: F) where F: FnOnce(&isize) {\n fn main() {\n     let mut x = None;\n     with_int(|y| x = Some(y));\n-         //~^ ERROR cannot infer\n+         //~^ ERROR borrowed data cannot be moved outside of its closure\n }"}, {"sha": "b2316a6b61c8194325f53b5b9f831796232481ed", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=846042161c17bcc696715b3dfe2e6c4970da0b34", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn give_any<F: for<'r> FnOnce(&'r ())>(f: F) {\n+    f(&());\n+}\n+\n+fn main() {\n+    let x = None;\n+    give_any(|y| x = Some(y));\n+    //~^ ERROR borrowed data cannot be moved outside of its closure\n+}"}, {"sha": "689fe6053c9a959dd9b5495ea22ed3937f2f8203", "filename": "src/test/ui/borrowck/issue-45983.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/846042161c17bcc696715b3dfe2e6c4970da0b34/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr?ref=846042161c17bcc696715b3dfe2e6c4970da0b34", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be moved outside of its closure\n+  --> $DIR/issue-45983.rs:17:27\n+   |\n+16 |     let x = None;\n+   |         - binding declared outside of closure\n+17 |     give_any(|y| x = Some(y));\n+   |              ---          ^ cannot be assigned to binding outside of its closure\n+   |              |\n+   |              closure you can't escape\n+\n+error: aborting due to previous error\n+"}]}