{"sha": "69ec350f5968defc7024d72ce791b0653c966cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWMzNTBmNTk2OGRlZmM3MDI0ZDcyY2U3OTFiMDY1M2M5NjZjZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-31T23:29:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-31T23:29:03Z"}, "message": "Auto merge of #37497 - iirelu:proper-vec-brackets-2, r=steveklabnik\n\nMake all vec! macros use square brackets: Attempt 2\n\n[The last PR](https://github.com/rust-lang/rust/pull/37476) ended with tears after a valiant struggle with git. I managed to clean up the completely broken history of that into a brand spanking new PR! Yay!\n\nOriginal:\n\n> Everyone hates the old syntax. I hope. Otherwise this PR has some controversy I wasn't expecting.\n\n> This would be the perfect time to write a lint recommending vec![..] when you use another style.\n\n> Disclaimer: I may have broken something. If I have, I'll fix them when the tests come in. Luckily the chance for a non-syntactical error is pretty low in all this.", "tree": {"sha": "86cc097322145fde8ec27dca59fa70787e5cddc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cc097322145fde8ec27dca59fa70787e5cddc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ec350f5968defc7024d72ce791b0653c966cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ec350f5968defc7024d72ce791b0653c966cee", "html_url": "https://github.com/rust-lang/rust/commit/69ec350f5968defc7024d72ce791b0653c966cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ec350f5968defc7024d72ce791b0653c966cee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f26eedb571c8e3f55385f3933be256689deed277", "url": "https://api.github.com/repos/rust-lang/rust/commits/f26eedb571c8e3f55385f3933be256689deed277", "html_url": "https://github.com/rust-lang/rust/commit/f26eedb571c8e3f55385f3933be256689deed277"}, {"sha": "e593c3b89343a98bdcc76ce9f5869ff18882dfff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e593c3b89343a98bdcc76ce9f5869ff18882dfff", "html_url": "https://github.com/rust-lang/rust/commit/e593c3b89343a98bdcc76ce9f5869ff18882dfff"}], "stats": {"total": 1022, "additions": 511, "deletions": 511}, "files": [{"sha": "75796cf94bfc2bbc37a2915284dad4f040cb5e0c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -1170,7 +1170,7 @@ impl<T> [T] {\n     /// let x = s.into_vec();\n     /// // `s` cannot be used anymore because it has been converted into `x`.\n     ///\n-    /// assert_eq!(x, vec!(10, 40, 30));\n+    /// assert_eq!(x, vec![10, 40, 30]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "d94a27917e869434d67fb5c320a07e574e17f3fe", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -148,15 +148,15 @@ use super::range::RangeArgument;\n /// [`Index`] trait. An example will be more explicit:\n ///\n /// ```\n-/// let v = vec!(0, 2, 4, 6);\n+/// let v = vec![0, 2, 4, 6];\n /// println!(\"{}\", v[1]); // it will display '2'\n /// ```\n ///\n /// However be careful: if you try to access an index which isn't in the `Vec`,\n /// your software will panic! You cannot do this:\n ///\n /// ```ignore\n-/// let v = vec!(0, 2, 4, 6);\n+/// let v = vec![0, 2, 4, 6];\n /// println!(\"{}\", v[6]); // it will panic!\n /// ```\n ///\n@@ -173,7 +173,7 @@ use super::range::RangeArgument;\n ///     // ...\n /// }\n ///\n-/// let v = vec!(0, 1);\n+/// let v = vec![0, 1];\n /// read_slice(&v);\n ///\n /// // ... and that's all!"}, {"sha": "a74979911d34d1edfdb2fc6dc07c6657afb24102", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -914,12 +914,12 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ```\n     /// use std::u16;\n     ///\n-    /// let v = vec!(1, 2);\n+    /// let v = vec![1, 2];\n     /// let res: Option<Vec<u16>> = v.iter().map(|&x: &u16|\n     ///     if x == u16::MAX { None }\n     ///     else { Some(x + 1) }\n     /// ).collect();\n-    /// assert!(res == Some(vec!(2, 3)));\n+    /// assert!(res == Some(vec![2, 3]));\n     /// ```\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {"}, {"sha": "9cb42124e00bf36227f4bb697e3ae360c97063b8", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -977,12 +977,12 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// ```\n     /// use std::u32;\n     ///\n-    /// let v = vec!(1, 2);\n+    /// let v = vec![1, 2];\n     /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|&x: &u32|\n     ///     if x == u32::MAX { Err(\"Overflow!\") }\n     ///     else { Ok(x + 1) }\n     /// ).collect();\n-    /// assert!(res == Ok(vec!(2, 3)));\n+    /// assert!(res == Ok(vec![2, 3]));\n     /// ```\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Result<A, E>>>(iter: I) -> Result<V, E> {"}, {"sha": "4d2f1b999a2aec763b96be41930766f315cc0024", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -1610,8 +1610,8 @@ Options:\n \n     #[test]\n     fn test_args_with_equals() {\n-        let args = vec!(\"--one\".to_string(), \"A=B\".to_string(),\n-                        \"--two=C=D\".to_string());\n+        let args = vec![\"--one\".to_string(), \"A=B\".to_string(),\n+                        \"--two=C=D\".to_string()];\n         let opts = vec![optopt(\"o\", \"one\", \"One\", \"INFO\"),\n                         optopt(\"t\", \"two\", \"Two\", \"INFO\")];\n         let matches = &match getopts(&args, &opts) {"}, {"sha": "03057af4a843bf07a8de8dfadf4c064cdd72bade", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -58,7 +58,7 @@\n //! struct Edges(Vec<Ed>);\n //!\n //! pub fn render_to<W: Write>(output: &mut W) {\n-//!     let edges = Edges(vec!((0,1), (0,2), (1,3), (2,3), (3,4), (4,4)));\n+//!     let edges = Edges(vec![(0,1), (0,2), (1,3), (2,3), (3,4), (4,4)]);\n //!     dot::render(&edges, output).unwrap()\n //! }\n //!\n@@ -164,8 +164,8 @@\n //! struct Graph { nodes: Vec<&'static str>, edges: Vec<(usize,usize)> }\n //!\n //! pub fn render_to<W: Write>(output: &mut W) {\n-//!     let nodes = vec!(\"{x,y}\",\"{x}\",\"{y}\",\"{}\");\n-//!     let edges = vec!((0,1), (0,2), (1,3), (2,3));\n+//!     let nodes = vec![\"{x,y}\",\"{x}\",\"{y}\",\"{}\"];\n+//!     let edges = vec![(0,1), (0,2), (1,3), (2,3)];\n //!     let graph = Graph { nodes: nodes, edges: edges };\n //!\n //!     dot::render(&graph, output).unwrap()\n@@ -226,8 +226,8 @@\n //! struct Graph { nodes: Vec<&'static str>, edges: Vec<(usize,usize)> }\n //!\n //! pub fn render_to<W: Write>(output: &mut W) {\n-//!     let nodes = vec!(\"{x,y}\",\"{x}\",\"{y}\",\"{}\");\n-//!     let edges = vec!((0,1), (0,2), (1,3), (2,3));\n+//!     let nodes = vec![\"{x,y}\",\"{x}\",\"{y}\",\"{}\"];\n+//!     let edges = vec![(0,1), (0,2), (1,3), (2,3)];\n //!     let graph = Graph { nodes: nodes, edges: edges };\n //!\n //!     dot::render(&graph, output).unwrap()"}, {"sha": "7dc0d19e6a615cd32e04e869ff89a978d1fa2df1", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -253,17 +253,17 @@ mod tests {\n \n         let v = (0..16).map(|_| ra.next_u32()).collect::<Vec<_>>();\n         assert_eq!(v,\n-                   vec!(0xade0b876, 0x903df1a0, 0xe56a5d40, 0x28bd8653,\n+                   vec![0xade0b876, 0x903df1a0, 0xe56a5d40, 0x28bd8653,\n                         0xb819d2bd, 0x1aed8da0, 0xccef36a8, 0xc70d778b,\n                         0x7c5941da, 0x8d485751, 0x3fe02477, 0x374ad8b8,\n-                        0xf4b8436a, 0x1ca11815, 0x69b687c3, 0x8665eeb2));\n+                        0xf4b8436a, 0x1ca11815, 0x69b687c3, 0x8665eeb2]);\n \n         let v = (0..16).map(|_| ra.next_u32()).collect::<Vec<_>>();\n         assert_eq!(v,\n-                   vec!(0xbee7079f, 0x7a385155, 0x7c97ba98, 0x0d082d73,\n+                   vec![0xbee7079f, 0x7a385155, 0x7c97ba98, 0x0d082d73,\n                         0xa0290fcb, 0x6965e348, 0x3e53c612, 0xed7aee32,\n                         0x7621b729, 0x434ee69c, 0xb03371d5, 0xd539d874,\n-                        0x281fed31, 0x45fb0a51, 0x1f0ae1ac, 0x6f4d794b));\n+                        0x281fed31, 0x45fb0a51, 0x1f0ae1ac, 0x6f4d794b]);\n \n \n         let seed: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n@@ -280,10 +280,10 @@ mod tests {\n         }\n \n         assert_eq!(v,\n-                   vec!(0xf225c81a, 0x6ab1be57, 0x04d42951, 0x70858036,\n+                   vec![0xf225c81a, 0x6ab1be57, 0x04d42951, 0x70858036,\n                         0x49884684, 0x64efec72, 0x4be2d186, 0x3615b384,\n                         0x11cfa18e, 0xd3c50049, 0x75c775f6, 0x434c6530,\n-                        0x2c5bad8f, 0x898881dc, 0x5f1c86d9, 0xc1f8e7f4));\n+                        0x2c5bad8f, 0x898881dc, 0x5f1c86d9, 0xc1f8e7f4]);\n     }\n \n     #[test]"}, {"sha": "41175c81df8918bbd5302e8f816296ab150a01f9", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -312,37 +312,37 @@ mod tests {\n             }}\n         }\n \n-        t!(vec!(Weighted { weight: 1, item: 10 }),\n+        t!(vec![Weighted { weight: 1, item: 10 }],\n            [10]);\n \n         // skip some\n-        t!(vec!(Weighted { weight: 0, item: 20 },\n+        t!(vec![Weighted { weight: 0, item: 20 },\n                 Weighted { weight: 2, item: 21 },\n                 Weighted { weight: 0, item: 22 },\n-                Weighted { weight: 1, item: 23 }),\n+                Weighted { weight: 1, item: 23 }],\n            [21, 21, 23]);\n \n         // different weights\n-        t!(vec!(Weighted { weight: 4, item: 30 },\n-                Weighted { weight: 3, item: 31 }),\n+        t!(vec![Weighted { weight: 4, item: 30 },\n+                Weighted { weight: 3, item: 31 }],\n            [30, 30, 30, 30, 31, 31, 31]);\n \n         // check that we're binary searching\n         // correctly with some vectors of odd\n         // length.\n-        t!(vec!(Weighted { weight: 1, item: 40 },\n+        t!(vec![Weighted { weight: 1, item: 40 },\n                 Weighted { weight: 1, item: 41 },\n                 Weighted { weight: 1, item: 42 },\n                 Weighted { weight: 1, item: 43 },\n-                Weighted { weight: 1, item: 44 }),\n+                Weighted { weight: 1, item: 44 }],\n            [40, 41, 42, 43, 44]);\n-        t!(vec!(Weighted { weight: 1, item: 50 },\n+        t!(vec![Weighted { weight: 1, item: 50 },\n                 Weighted { weight: 1, item: 51 },\n                 Weighted { weight: 1, item: 52 },\n                 Weighted { weight: 1, item: 53 },\n                 Weighted { weight: 1, item: 54 },\n                 Weighted { weight: 1, item: 55 },\n-                Weighted { weight: 1, item: 56 }),\n+                Weighted { weight: 1, item: 56 }],\n            [50, 51, 52, 53, 54, 55, 56]);\n     }\n "}, {"sha": "69d5015f18140153a339df182a1789f66ada22c8", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -662,8 +662,8 @@ mod tests {\n         // Regression test that isaac is actually using the above vector\n         let v = (0..10).map(|_| ra.next_u32()).collect::<Vec<_>>();\n         assert_eq!(v,\n-                   vec!(2558573138, 873787463, 263499565, 2103644246, 3595684709,\n-                        4203127393, 264982119, 2765226902, 2737944514, 3900253796));\n+                   vec![2558573138, 873787463, 263499565, 2103644246, 3595684709,\n+                        4203127393, 264982119, 2765226902, 2737944514, 3900253796]);\n \n         let seed: &[_] = &[12345, 67890, 54321, 9876];\n         let mut rb: IsaacRng = SeedableRng::from_seed(seed);\n@@ -674,8 +674,8 @@ mod tests {\n \n         let v = (0..10).map(|_| rb.next_u32()).collect::<Vec<_>>();\n         assert_eq!(v,\n-                   vec!(3676831399, 3183332890, 2834741178, 3854698763, 2717568474,\n-                        1576568959, 3507990155, 179069555, 141456972, 2478885421));\n+                   vec![3676831399, 3183332890, 2834741178, 3854698763, 2717568474,\n+                        1576568959, 3507990155, 179069555, 141456972, 2478885421]);\n     }\n     #[test]\n     #[rustfmt_skip]\n@@ -685,10 +685,10 @@ mod tests {\n         // Regression test that isaac is actually using the above vector\n         let v = (0..10).map(|_| ra.next_u64()).collect::<Vec<_>>();\n         assert_eq!(v,\n-                   vec!(547121783600835980, 14377643087320773276, 17351601304698403469,\n+                   vec![547121783600835980, 14377643087320773276, 17351601304698403469,\n                         1238879483818134882, 11952566807690396487, 13970131091560099343,\n                         4469761996653280935, 15552757044682284409, 6860251611068737823,\n-                        13722198873481261842));\n+                        13722198873481261842]);\n \n         let seed: &[_] = &[12345, 67890, 54321, 9876];\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(seed);\n@@ -699,10 +699,10 @@ mod tests {\n \n         let v = (0..10).map(|_| rb.next_u64()).collect::<Vec<_>>();\n         assert_eq!(v,\n-                   vec!(18143823860592706164, 8491801882678285927, 2699425367717515619,\n+                   vec![18143823860592706164, 8491801882678285927, 2699425367717515619,\n                         17196852593171130876, 2606123525235546165, 15790932315217671084,\n                         596345674630742204, 9947027391921273664, 11788097613744130851,\n-                        10391409374914919106));\n+                        10391409374914919106]);\n \n     }\n "}, {"sha": "1b2976b7435d8e38ed66dc9cf9d9d2921aaa6324", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -536,7 +536,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     fn add_contained_edge(&mut self,\n                           source: CFGIndex,\n                           target: CFGIndex) {\n-        let data = CFGEdgeData {exiting_scopes: vec!() };\n+        let data = CFGEdgeData {exiting_scopes: vec![] };\n         self.graph.add_edge(source, target, data);\n     }\n \n@@ -545,7 +545,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                         from_index: CFGIndex,\n                         to_loop: LoopScope,\n                         to_index: CFGIndex) {\n-        let mut data = CFGEdgeData {exiting_scopes: vec!() };\n+        let mut data = CFGEdgeData {exiting_scopes: vec![] };\n         let mut scope = self.tcx.region_maps.node_extent(from_expr.id);\n         let target_scope = self.tcx.region_maps.node_extent(to_loop.loop_id);\n         while scope != target_scope {\n@@ -559,7 +559,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                           _from_expr: &hir::Expr,\n                           from_index: CFGIndex) {\n         let mut data = CFGEdgeData {\n-            exiting_scopes: vec!(),\n+            exiting_scopes: vec![],\n         };\n         for &LoopScope { loop_id: id, .. } in self.loop_scopes.iter().rev() {\n             data.exiting_scopes.push(id);"}, {"sha": "5e3925b0b3c98f00b00b67144dfdd92da9e5401b", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -457,7 +457,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             same_regions.push(SameRegions {\n                 scope_id: scope_id,\n-                regions: vec!(sub_fr.bound_region, sup_fr.bound_region)\n+                regions: vec![sub_fr.bound_region, sup_fr.bound_region]\n             })\n         }\n     }\n@@ -1359,7 +1359,7 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n                                 region_names: &HashSet<ast::Name>)\n                                 -> P<hir::Ty> {\n         let mut new_ty = P(ty.clone());\n-        let mut ty_queue = vec!(ty);\n+        let mut ty_queue = vec![ty];\n         while !ty_queue.is_empty() {\n             let cur_ty = ty_queue.remove(0);\n             match cur_ty.node {"}, {"sha": "20463f42d3b1df95435bcc3704f9a980870f1317", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -127,9 +127,9 @@ impl LintStore {\n \n     pub fn new() -> LintStore {\n         LintStore {\n-            lints: vec!(),\n-            early_passes: Some(vec!()),\n-            late_passes: Some(vec!()),\n+            lints: vec![],\n+            early_passes: Some(vec![]),\n+            late_passes: Some(vec![]),\n             by_name: FnvHashMap(),\n             levels: FnvHashMap(),\n             future_incompatible: FnvHashMap(),\n@@ -345,7 +345,7 @@ macro_rules! run_lints { ($cx:expr, $f:ident, $ps:ident, $($args:expr),*) => ({\n // See also the hir version just below.\n pub fn gather_attrs(attrs: &[ast::Attribute])\n                     -> Vec<Result<(InternedString, Level, Span), Span>> {\n-    let mut out = vec!();\n+    let mut out = vec![];\n     for attr in attrs {\n         let r = gather_attr(attr);\n         out.extend(r.into_iter());\n@@ -355,7 +355,7 @@ pub fn gather_attrs(attrs: &[ast::Attribute])\n \n pub fn gather_attr(attr: &ast::Attribute)\n                    -> Vec<Result<(InternedString, Level, Span), Span>> {\n-    let mut out = vec!();\n+    let mut out = vec![];\n \n     let level = match Level::from_str(&attr.name()) {\n         None => return out,"}, {"sha": "3175230ab6a5e43694a9731ee2bbbdf0443546f3", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -59,7 +59,7 @@ impl LanguageItems {\n         fn foo(_: LangItem) -> Option<DefId> { None }\n \n         LanguageItems {\n-            items: vec!($(foo($variant)),*),\n+            items: vec![$(foo($variant)),*],\n             missing: Vec::new(),\n         }\n     }"}, {"sha": "87a5c6410a8410e0b3daf242c93dbf8f70559418", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -715,7 +715,7 @@ macro_rules! options {\n                     true\n                 }\n                 v => {\n-                    let mut passes = vec!();\n+                    let mut passes = vec![];\n                     if parse_list(&mut passes, v) {\n                         *slot = SomePasses(passes);\n                         true\n@@ -1293,7 +1293,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n-    let mut lint_opts = vec!();\n+    let mut lint_opts = vec![];\n     let mut describe_lints = false;\n \n     for &level in &[lint::Allow, lint::Warn, lint::Deny, lint::Forbid] {"}, {"sha": "1ce5b223fbefe8cbc03b59ffb2a99d9c16792b4c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -272,7 +272,7 @@ impl Session {\n             }\n             return;\n         }\n-        lints.insert(id, vec!((lint_id, sp, msg)));\n+        lints.insert(id, vec![(lint_id, sp, msg)]);\n     }\n     pub fn reserve_node_ids(&self, count: usize) -> ast::NodeId {\n         let id = self.next_node_id.get();"}, {"sha": "ce882c48377f74f3bb37bbb948235d01ec1bcf25", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'b, 'gcx, 'tcx> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n         AssociatedTypeNormalizer {\n             selcx: selcx,\n             cause: cause,\n-            obligations: vec!(),\n+            obligations: vec![],\n             depth: depth,\n         }\n     }\n@@ -396,7 +396,7 @@ pub fn normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n                 cause, depth + 1, projection.to_predicate());\n             Normalized {\n                 value: ty_var,\n-                obligations: vec!(obligation)\n+                obligations: vec![obligation]\n             }\n         })\n }\n@@ -545,7 +545,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n                    projected_ty);\n             let result = Normalized {\n                 value: projected_ty,\n-                obligations: vec!()\n+                obligations: vec![]\n             };\n             infcx.projection_cache.borrow_mut()\n                                   .complete(projection_ty, &result, true);\n@@ -604,7 +604,7 @@ fn normalize_to_error<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tc\n     let new_value = selcx.infcx().next_ty_var();\n     Normalized {\n         value: new_value,\n-        obligations: vec!(trait_obligation)\n+        obligations: vec![trait_obligation]\n     }\n }\n "}, {"sha": "bebdebf127a54542ec4bdf8a066ce516edc6edc1", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -22,7 +22,7 @@ pub struct TypeWalker<'tcx> {\n \n impl<'tcx> TypeWalker<'tcx> {\n     pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker { stack: vec!(ty), last_subtree: 1, }\n+        TypeWalker { stack: vec![ty], last_subtree: 1, }\n     }\n \n     /// Skips the subtree of types corresponding to the last type"}, {"sha": "1135199d2254a248a10092ee3c344390dc0adab9", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -201,11 +201,11 @@ fn implied_bounds_from_components<'tcx>(sub_region: &'tcx ty::Region,\n         .flat_map(|component| {\n             match component {\n                 Component::Region(r) =>\n-                    vec!(ImpliedBound::RegionSubRegion(sub_region, r)),\n+                    vec![ImpliedBound::RegionSubRegion(sub_region, r)],\n                 Component::Param(p) =>\n-                    vec!(ImpliedBound::RegionSubParam(sub_region, p)),\n+                    vec![ImpliedBound::RegionSubParam(sub_region, p)],\n                 Component::Projection(p) =>\n-                    vec!(ImpliedBound::RegionSubProjection(sub_region, p)),\n+                    vec![ImpliedBound::RegionSubProjection(sub_region, p)],\n                 Component::EscapingProjection(_) =>\n                     // If the projection has escaping regions, don't\n                     // try to infer any implied bounds even for its\n@@ -215,9 +215,9 @@ fn implied_bounds_from_components<'tcx>(sub_region: &'tcx ty::Region,\n                     // idea is that the WAY that the caller proves\n                     // that may change in the future and we want to\n                     // give ourselves room to get smarter here.\n-                    vec!(),\n+                    vec![],\n                 Component::UnresolvedInferenceVariable(..) =>\n-                    vec!(),\n+                    vec![],\n             }\n         })\n         .collect()"}, {"sha": "7555181a15cf20d5a5d3856401b10df91a5bfe10", "filename": "src/librustc_back/target/dragonfly_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fdragonfly_base.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,7 +17,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec!(\n+        pre_link_args: vec![\n             // GNU-style linkers will use this to omit linking to libraries\n             // which don't actually fulfill any relocations, but only for\n             // libraries which follow this flag.  Thus, use it before\n@@ -26,7 +26,7 @@ pub fn opts() -> TargetOptions {\n \n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n-        ),\n+        ],\n         position_independent_executables: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()"}, {"sha": "7555181a15cf20d5a5d3856401b10df91a5bfe10", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,7 +17,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec!(\n+        pre_link_args: vec![\n             // GNU-style linkers will use this to omit linking to libraries\n             // which don't actually fulfill any relocations, but only for\n             // libraries which follow this flag.  Thus, use it before\n@@ -26,7 +26,7 @@ pub fn opts() -> TargetOptions {\n \n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n-        ),\n+        ],\n         position_independent_executables: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n         .. Default::default()"}, {"sha": "891e7dda14a2a4d931e3171966e97d4e7a53fb1e", "filename": "src/librustc_back/target/le32_unknown_nacl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,10 +15,10 @@ pub fn target() -> TargetResult {\n         linker: \"pnacl-clang\".to_string(),\n         ar: \"pnacl-ar\".to_string(),\n \n-        pre_link_args: vec!(\"--pnacl-exceptions=sjlj\".to_string(),\n+        pre_link_args: vec![\"--pnacl-exceptions=sjlj\".to_string(),\n                             \"--target=le32-unknown-nacl\".to_string(),\n-                            \"-Wl,--start-group\".to_string()),\n-        post_link_args: vec!(\"-Wl,--end-group\".to_string()),\n+                            \"-Wl,--start-group\".to_string()],\n+        post_link_args: vec![\"-Wl,--end-group\".to_string()],\n         dynamic_linking: false,\n         executables: true,\n         exe_suffix: \".pexe\".to_string(),"}, {"sha": "6e038a7ed56ee2b9fae85974e934a5fda7c4b6ac", "filename": "src/librustc_back/target/netbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fnetbsd_base.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,7 +17,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec!(\n+        pre_link_args: vec![\n             // GNU-style linkers will use this to omit linking to libraries\n             // which don't actually fulfill any relocations, but only for\n             // libraries which follow this flag.  Thus, use it before\n@@ -26,7 +26,7 @@ pub fn opts() -> TargetOptions {\n \n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n-        ),\n+        ],\n         position_independent_executables: true,\n         .. Default::default()\n     }"}, {"sha": "90e6631841bef54600549e303001e091584ffadb", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,7 +17,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: vec!(\n+        pre_link_args: vec![\n             // GNU-style linkers will use this to omit linking to libraries\n             // which don't actually fulfill any relocations, but only for\n             // libraries which follow this flag.  Thus, use it before\n@@ -26,7 +26,7 @@ pub fn opts() -> TargetOptions {\n \n             // Always enable NX protection when it is available\n             \"-Wl,-z,noexecstack\".to_string(),\n-        ),\n+        ],\n         position_independent_executables: true,\n         exe_allocation_crate: \"alloc_system\".to_string(),\n         .. Default::default()"}, {"sha": "19ca0df51b9dc331d36077ce481641078115d08f", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -26,7 +26,7 @@ pub fn opts() -> TargetOptions {\n         no_default_libraries: true,\n         is_like_windows: true,\n         allows_weak_linkage: false,\n-        pre_link_args: vec!(\n+        pre_link_args: vec![\n             // And here, we see obscure linker flags #45. On windows, it has been\n             // found to be necessary to have this flag to compile liblibc.\n             //\n@@ -63,26 +63,26 @@ pub fn opts() -> TargetOptions {\n \n             // Do not use the standard system startup files or libraries when linking\n             \"-nostdlib\".to_string(),\n-        ),\n-        pre_link_objects_exe: vec!(\n+        ],\n+        pre_link_objects_exe: vec![\n             \"crt2.o\".to_string(),    // mingw C runtime initialization for executables\n             \"rsbegin.o\".to_string(), // Rust compiler runtime initialization, see rsbegin.rs\n-        ),\n-        pre_link_objects_dll: vec!(\n+        ],\n+        pre_link_objects_dll: vec![\n             \"dllcrt2.o\".to_string(), // mingw C runtime initialization for dlls\n             \"rsbegin.o\".to_string(),\n-        ),\n-        late_link_args: vec!(\n+        ],\n+        late_link_args: vec![\n             \"-lmingwex\".to_string(),\n             \"-lmingw32\".to_string(),\n             \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n             \"-lmsvcrt\".to_string(),\n             \"-luser32\".to_string(),\n             \"-lkernel32\".to_string(),\n-        ),\n-        post_link_objects: vec!(\n+        ],\n+        post_link_objects: vec![\n             \"rsend.o\".to_string()\n-        ),\n+        ],\n         custom_unwind_resume: true,\n \n         .. Default::default()"}, {"sha": "47f8d978704f4710145305f1c40d9b74b4ea8b8b", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -92,7 +92,7 @@ fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)\n         let move_from_id = error.move_from.id;\n         debug!(\"append_to_grouped_errors(move_from_id={})\", move_from_id);\n         let move_to = if error.move_to.is_some() {\n-            vec!(error.move_to.clone().unwrap())\n+            vec![error.move_to.clone().unwrap()]\n         } else {\n             Vec::new()\n         };"}, {"sha": "ba036f1a8b157a00ee3d7ff415e3338e7260dae9", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n \n     fn existing_base_paths(&self, lp: &Rc<LoanPath<'tcx>>)\n                            -> Vec<MovePathIndex> {\n-        let mut result = vec!();\n+        let mut result = vec![];\n         self.add_existing_base_paths(lp, &mut result);\n         result\n     }"}, {"sha": "db72057636a8558a62dc13f0054cef38400f2cff", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -454,7 +454,7 @@ loop variable, consider using a `match` or `if let` inside the loop body. For\n instance:\n \n ```compile_fail,E0297\n-let xs : Vec<Option<i32>> = vec!(Some(1), None);\n+let xs : Vec<Option<i32>> = vec![Some(1), None];\n \n // This fails because `None` is not covered.\n for Some(x) in xs {\n@@ -465,7 +465,7 @@ for Some(x) in xs {\n Match inside the loop instead:\n \n ```\n-let xs : Vec<Option<i32>> = vec!(Some(1), None);\n+let xs : Vec<Option<i32>> = vec![Some(1), None];\n \n for item in xs {\n     match item {\n@@ -478,7 +478,7 @@ for item in xs {\n Or use `if let`:\n \n ```\n-let xs : Vec<Option<i32>> = vec!(Some(1), None);\n+let xs : Vec<Option<i32>> = vec![Some(1), None];\n \n for item in xs {\n     if let Some(x) = item {"}, {"sha": "e72ac8419941c12234cae3fe01a60775b1c2a6b4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -340,10 +340,10 @@ impl<'a> CrateLoader<'a> {\n                     target: &self.sess.target.target,\n                     triple: &self.sess.opts.target_triple,\n                     root: root,\n-                    rejected_via_hash: vec!(),\n-                    rejected_via_triple: vec!(),\n-                    rejected_via_kind: vec!(),\n-                    rejected_via_version: vec!(),\n+                    rejected_via_hash: vec![],\n+                    rejected_via_triple: vec![],\n+                    rejected_via_kind: vec![],\n+                    rejected_via_version: vec![],\n                     should_match_name: true,\n                 };\n                 match self.load(&mut locate_ctxt) {\n@@ -481,10 +481,10 @@ impl<'a> CrateLoader<'a> {\n             target: &self.sess.host,\n             triple: config::host_triple(),\n             root: &None,\n-            rejected_via_hash: vec!(),\n-            rejected_via_triple: vec!(),\n-            rejected_via_kind: vec!(),\n-            rejected_via_version: vec!(),\n+            rejected_via_hash: vec![],\n+            rejected_via_triple: vec![],\n+            rejected_via_kind: vec![],\n+            rejected_via_version: vec![],\n             should_match_name: true,\n         };\n         let library = self.load(&mut locate_ctxt).or_else(|| {"}, {"sha": "88e248e2efa3878eb90eefbd90cc2f68ae7ac227", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -73,12 +73,12 @@ impl<'a> Registry<'a> {\n             sess: sess,\n             args_hidden: None,\n             krate_span: krate_span,\n-            syntax_exts: vec!(),\n-            early_lint_passes: vec!(),\n-            late_lint_passes: vec!(),\n+            syntax_exts: vec![],\n+            early_lint_passes: vec![],\n+            late_lint_passes: vec![],\n             lint_groups: HashMap::new(),\n-            llvm_passes: vec!(),\n-            attributes: vec!(),\n+            llvm_passes: vec![],\n+            attributes: vec![],\n             mir_passes: Vec::new(),\n         }\n     }"}, {"sha": "8a628289b7f9421681df00473f559c9360938e32", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -153,7 +153,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         // What could go wrong...?\n         if spans.len() < path.segments.len() {\n             if generated_code(path.span) {\n-                return vec!();\n+                return vec![];\n             }\n             error!(\"Mis-calculated spans for path '{}'. Found {} spans, expected {}. Found spans:\",\n                    path_to_string(path),\n@@ -167,12 +167,12 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                        loc.line);\n             }\n             error!(\"    master span: {:?}: `{}`\", path.span, self.span.snippet(path.span));\n-            return vec!();\n+            return vec![];\n         }\n \n-        let mut result: Vec<(Span, String)> = vec!();\n+        let mut result: Vec<(Span, String)> = vec![];\n \n-        let mut segs = vec!();\n+        let mut segs = vec![];\n         for (i, (seg, span)) in path.segments.iter().zip(&spans).enumerate() {\n             segs.push(seg.clone());\n             let sub_path = ast::Path {"}, {"sha": "031b9a6a5aa516049aa70b379719457ef222f507", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -225,7 +225,7 @@ impl<'a> SpanUtils<'a> {\n     // Nesting = 0: all idents outside of brackets: [Foo]\n     // Nesting = 1: idents within one level of brackets: [Bar, Bar]\n     pub fn spans_with_brackets(&self, span: Span, nesting: isize, limit: isize) -> Vec<Span> {\n-        let mut result: Vec<Span> = vec!();\n+        let mut result: Vec<Span> = vec![];\n \n         let mut toks = self.retokenise_span(span);\n         // We keep track of how many brackets we're nested in\n@@ -236,7 +236,7 @@ impl<'a> SpanUtils<'a> {\n             if ts.tok == token::Eof {\n                 if bracket_count != 0 {\n                     if generated_code(span) {\n-                        return vec!();\n+                        return vec![];\n                     }\n                     let loc = self.sess.codemap().lookup_char_pos(span.lo);\n                     span_bug!(span,"}, {"sha": "8c704cc32993c4e170c5c4c0664cfdb93ee88363", "filename": "src/librustc_trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fasm.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -61,7 +61,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     // Default per-arch clobbers\n     // Basically what clang does\n     let arch_clobbers = match &bcx.sess().target.target.arch[..] {\n-        \"x86\" | \"x86_64\" => vec!(\"~{dirflag}\", \"~{fpsr}\", \"~{flags}\"),\n+        \"x86\" | \"x86_64\" => vec![\"~{dirflag}\", \"~{fpsr}\", \"~{flags}\"],\n         _                => Vec::new()\n     };\n "}, {"sha": "8758cdcf9d0ab63928ef1100381060561773bb1f", "filename": "src/librustc_trans/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Frpath.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -68,7 +68,7 @@ fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> {\n     let rel_rpaths = get_rpaths_relative_to_output(config, libs);\n \n     // And a final backup rpath to the global library location.\n-    let fallback_rpaths = vec!(get_install_prefix_rpath(config));\n+    let fallback_rpaths = vec![get_install_prefix_rpath(config)];\n \n     fn log_rpaths(desc: &str, rpaths: &[String]) {\n         debug!(\"{} rpaths:\", desc);"}, {"sha": "9012914deeb091f5b51c7bceae2bd987b6e64b39", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -665,7 +665,7 @@ pub fn run_passes(sess: &Session,\n     // Figure out what we actually need to build.\n \n     let mut modules_config = ModuleConfig::new(tm, sess.opts.cg.passes.clone());\n-    let mut metadata_config = ModuleConfig::new(tm, vec!());\n+    let mut metadata_config = ModuleConfig::new(tm, vec![]);\n \n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));"}, {"sha": "b9f24eba9dc1e31b120d759d0102563c2b063be1", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -305,7 +305,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         assert!(orig_scopes_len > 0);\n \n         // Remove any scopes that do not have cleanups on panic:\n-        let mut popped_scopes = vec!();\n+        let mut popped_scopes = vec![];\n         while !self.top_scope(|s| s.needs_invoke()) {\n             debug!(\"top scope does not need invoke\");\n             popped_scopes.push(self.pop_scope());\n@@ -402,7 +402,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n \n         let orig_scopes_len = self.scopes_len();\n         let mut prev_llbb;\n-        let mut popped_scopes = vec!();\n+        let mut popped_scopes = vec![];\n         let mut skip = 0;\n \n         // First we pop off all the cleanup stacks that are\n@@ -585,8 +585,8 @@ impl<'tcx> CleanupScope<'tcx> {\n     fn new(debug_loc: DebugLoc) -> CleanupScope<'tcx> {\n         CleanupScope {\n             debug_loc: debug_loc,\n-            cleanups: vec!(),\n-            cached_early_exits: vec!(),\n+            cleanups: vec![],\n+            cached_early_exits: vec![],\n             cached_landing_pad: None,\n         }\n     }"}, {"sha": "7d2547ec17f3a5b91f8e70c42aacf401a378a425", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -86,18 +86,18 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n \n         //We only care about the operation here\n         let (n_tps, inputs, output) = match split[1] {\n-            \"cxchg\" | \"cxchgweak\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)),\n+            \"cxchg\" | \"cxchgweak\" => (1, vec![tcx.mk_mut_ptr(param(ccx, 0)),\n                                               param(ccx, 0),\n-                                              param(ccx, 0)),\n+                                              param(ccx, 0)],\n                                       tcx.intern_tup(&[param(ccx, 0), tcx.types.bool])),\n-            \"load\" => (1, vec!(tcx.mk_imm_ptr(param(ccx, 0))),\n+            \"load\" => (1, vec![tcx.mk_imm_ptr(param(ccx, 0))],\n                        param(ccx, 0)),\n-            \"store\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)),\n+            \"store\" => (1, vec![tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)],\n                         tcx.mk_nil()),\n \n             \"xchg\" | \"xadd\" | \"xsub\" | \"and\"  | \"nand\" | \"or\" | \"xor\" | \"max\" |\n             \"min\"  | \"umax\" | \"umin\" => {\n-                (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)),\n+                (1, vec![tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)],\n                  param(ccx, 0))\n             }\n             \"fence\" | \"singlethreadfence\" => {\n@@ -129,14 +129,14 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n             \"rustc_peek\" => (1, vec![param(ccx, 0)], param(ccx, 0)),\n             \"init\" => (1, Vec::new(), param(ccx, 0)),\n             \"uninit\" => (1, Vec::new(), param(ccx, 0)),\n-            \"forget\" => (1, vec!( param(ccx, 0) ), tcx.mk_nil()),\n-            \"transmute\" => (2, vec!( param(ccx, 0) ), param(ccx, 1)),\n+            \"forget\" => (1, vec![ param(ccx, 0) ], tcx.mk_nil()),\n+            \"transmute\" => (2, vec![ param(ccx, 0) ], param(ccx, 1)),\n             \"move_val_init\" => {\n                 (1,\n-                 vec!(\n+                 vec![\n                     tcx.mk_mut_ptr(param(ccx, 0)),\n                     param(ccx, 0)\n-                  ),\n+                  ],\n                tcx.mk_nil())\n             }\n             \"drop_in_place\" => {\n@@ -148,21 +148,21 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n             \"type_id\" => (1, Vec::new(), ccx.tcx.types.u64),\n             \"offset\" | \"arith_offset\" => {\n               (1,\n-               vec!(\n+               vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: hir::MutImmutable\n                   }),\n                   ccx.tcx.types.isize\n-               ),\n+               ],\n                tcx.mk_ptr(ty::TypeAndMut {\n                    ty: param(ccx, 0),\n                    mutbl: hir::MutImmutable\n                }))\n             }\n             \"copy\" | \"copy_nonoverlapping\" => {\n               (1,\n-               vec!(\n+               vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: hir::MutImmutable\n@@ -172,12 +172,12 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n                       mutbl: hir::MutMutable\n                   }),\n                   tcx.types.usize,\n-               ),\n+               ],\n                tcx.mk_nil())\n             }\n             \"volatile_copy_memory\" | \"volatile_copy_nonoverlapping_memory\" => {\n               (1,\n-               vec!(\n+               vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: hir::MutMutable\n@@ -187,93 +187,93 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n                       mutbl: hir::MutImmutable\n                   }),\n                   tcx.types.usize,\n-               ),\n+               ],\n                tcx.mk_nil())\n             }\n             \"write_bytes\" | \"volatile_set_memory\" => {\n               (1,\n-               vec!(\n+               vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(ccx, 0),\n                       mutbl: hir::MutMutable\n                   }),\n                   tcx.types.u8,\n                   tcx.types.usize,\n-               ),\n+               ],\n                tcx.mk_nil())\n             }\n-            \"sqrtf32\" => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"sqrtf64\" => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n+            \"sqrtf32\" => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"sqrtf64\" => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n             \"powif32\" => {\n                (0,\n-                vec!( tcx.types.f32, tcx.types.i32 ),\n+                vec![ tcx.types.f32, tcx.types.i32 ],\n                 tcx.types.f32)\n             }\n             \"powif64\" => {\n                (0,\n-                vec!( tcx.types.f64, tcx.types.i32 ),\n+                vec![ tcx.types.f64, tcx.types.i32 ],\n                 tcx.types.f64)\n             }\n-            \"sinf32\" => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"sinf64\" => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"cosf32\" => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"cosf64\" => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n+            \"sinf32\" => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"sinf64\" => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"cosf32\" => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"cosf64\" => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n             \"powf32\" => {\n                (0,\n-                vec!( tcx.types.f32, tcx.types.f32 ),\n+                vec![ tcx.types.f32, tcx.types.f32 ],\n                 tcx.types.f32)\n             }\n             \"powf64\" => {\n                (0,\n-                vec!( tcx.types.f64, tcx.types.f64 ),\n+                vec![ tcx.types.f64, tcx.types.f64 ],\n                 tcx.types.f64)\n             }\n-            \"expf32\"   => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"expf64\"   => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"exp2f32\"  => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"exp2f64\"  => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"logf32\"   => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"logf64\"   => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"log10f32\" => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"log10f64\" => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"log2f32\"  => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"log2f64\"  => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n+            \"expf32\"   => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"expf64\"   => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"exp2f32\"  => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"exp2f64\"  => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"logf32\"   => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"logf64\"   => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"log10f32\" => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"log10f64\" => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"log2f32\"  => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"log2f64\"  => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n             \"fmaf32\" => {\n                 (0,\n-                 vec!( tcx.types.f32, tcx.types.f32, tcx.types.f32 ),\n+                 vec![ tcx.types.f32, tcx.types.f32, tcx.types.f32 ],\n                  tcx.types.f32)\n             }\n             \"fmaf64\" => {\n                 (0,\n-                 vec!( tcx.types.f64, tcx.types.f64, tcx.types.f64 ),\n+                 vec![ tcx.types.f64, tcx.types.f64, tcx.types.f64 ],\n                  tcx.types.f64)\n             }\n-            \"fabsf32\"      => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"fabsf64\"      => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"copysignf32\"  => (0, vec!( tcx.types.f32, tcx.types.f32 ), tcx.types.f32),\n-            \"copysignf64\"  => (0, vec!( tcx.types.f64, tcx.types.f64 ), tcx.types.f64),\n-            \"floorf32\"     => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"floorf64\"     => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"ceilf32\"      => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"ceilf64\"      => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"truncf32\"     => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"truncf64\"     => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"rintf32\"      => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"rintf64\"      => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"nearbyintf32\" => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"nearbyintf64\" => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n-            \"roundf32\"     => (0, vec!( tcx.types.f32 ), tcx.types.f32),\n-            \"roundf64\"     => (0, vec!( tcx.types.f64 ), tcx.types.f64),\n+            \"fabsf32\"      => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"fabsf64\"      => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"copysignf32\"  => (0, vec![ tcx.types.f32, tcx.types.f32 ], tcx.types.f32),\n+            \"copysignf64\"  => (0, vec![ tcx.types.f64, tcx.types.f64 ], tcx.types.f64),\n+            \"floorf32\"     => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"floorf64\"     => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"ceilf32\"      => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"ceilf64\"      => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"truncf32\"     => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"truncf64\"     => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"rintf32\"      => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"rintf64\"      => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"nearbyintf32\" => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"nearbyintf64\" => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n+            \"roundf32\"     => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n+            \"roundf64\"     => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n \n             \"volatile_load\" =>\n-                (1, vec!( tcx.mk_imm_ptr(param(ccx, 0)) ), param(ccx, 0)),\n+                (1, vec![ tcx.mk_imm_ptr(param(ccx, 0)) ], param(ccx, 0)),\n             \"volatile_store\" =>\n-                (1, vec!( tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0) ), tcx.mk_nil()),\n+                (1, vec![ tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0) ], tcx.mk_nil()),\n \n-            \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" => (1, vec!(param(ccx, 0)), param(ccx, 0)),\n+            \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" => (1, vec![param(ccx, 0)], param(ccx, 0)),\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n-                (1, vec!(param(ccx, 0), param(ccx, 0)),\n+                (1, vec![param(ccx, 0), param(ccx, 0)],\n                 tcx.intern_tup(&[param(ccx, 0), tcx.types.bool])),\n \n             \"unchecked_div\" | \"unchecked_rem\" =>"}, {"sha": "202e176df0dbc576b4bdeff4520b179b9a5c846a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -1387,7 +1387,7 @@ fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &hir::Item)\n             let bounds = match trait_item.node {\n                 hir::TypeTraitItem(ref bounds, _) => bounds,\n                 _ => {\n-                    return vec!().into_iter();\n+                    return vec![].into_iter();\n                 }\n             };\n "}, {"sha": "c16dd788c4ec8d92a651e0f9c18bf1a9d8255a6f", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -291,10 +291,10 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n-                    inputs: vec!(\n+                    inputs: vec![\n                         tcx.types.isize,\n                         tcx.mk_imm_ptr(tcx.mk_imm_ptr(tcx.types.u8))\n-                    ),\n+                    ],\n                     output: tcx.types.isize,\n                     variadic: false,\n                 }),"}, {"sha": "f03b6a5ab3f1f200490dd370653e783c562c092c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -143,8 +143,8 @@ pub fn run_core(search_paths: SearchPaths,\n     let sessopts = config::Options {\n         maybe_sysroot: maybe_sysroot,\n         search_paths: search_paths,\n-        crate_types: vec!(config::CrateTypeRlib),\n-        lint_opts: vec!((warning_lint, lint::Allow)),\n+        crate_types: vec![config::CrateTypeRlib],\n+        lint_opts: vec![(warning_lint, lint::Allow)],\n         lint_cap: Some(lint::Allow),\n         externs: externs,\n         target_triple: triple.unwrap_or(config::host_triple().to_string()),"}, {"sha": "67cf12f4f4a6ed3982cc0c984a339d69c6ef7444", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -644,7 +644,7 @@ mod tests {\n         t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n         t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n         t(\"E0450\",                 false,        false,  false,  true,  false, false,\n-                                   vec!(\"E0450\".to_owned()));\n+                                   vec![\"E0450\".to_owned()]);\n         t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n         t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false, false, Vec::new());\n         t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());"}, {"sha": "a848a011f88dbfe6be21cb82c7d1bbe5ca333400", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -1260,7 +1260,7 @@ impl Context {\n         item.name = Some(krate.name);\n \n         // render the crate documentation\n-        let mut work = vec!((self, item));\n+        let mut work = vec![(self, item)];\n \n         while let Some((mut cx, item)) = work.pop() {\n             cx.item(item, |cx, item| {"}, {"sha": "a7da1c5cca48ce04f0b34976a9b34b299759da31", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -247,7 +247,7 @@ mod tests {\n         macro_rules! toc {\n             ($(($level: expr, $name: expr, $(($sub: tt))* )),*) => {\n                 Toc {\n-                    entries: vec!(\n+                    entries: vec![\n                         $(\n                             TocEntry {\n                                 level: $level,\n@@ -257,7 +257,7 @@ mod tests {\n                                 children: toc!($($sub),*)\n                             }\n                             ),*\n-                        )\n+                        ]\n                 }\n             }\n         }"}, {"sha": "cf5e8e5e34a3c7e9b7e65537ba7cc130143d3449", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -111,7 +111,7 @@ fn unstable(g: getopts::OptGroup) -> RustcOptGroup { RustcOptGroup::unstable(g)\n \n pub fn opts() -> Vec<RustcOptGroup> {\n     use getopts::*;\n-    vec!(\n+    vec![\n         stable(optflag(\"h\", \"help\", \"show this help message\")),\n         stable(optflag(\"V\", \"version\", \"print rustdoc's version\")),\n         stable(optflag(\"v\", \"verbose\", \"use verbose output\")),\n@@ -162,7 +162,7 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         unstable(optmulti(\"Z\", \"\",\n                           \"internal and debugging options (only on nightly build)\", \"FLAG\")),\n         stable(optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\")),\n-    )\n+    ]\n }\n \n pub fn usage(argv0: &str) {"}, {"sha": "1bbd67fb9be3ab019709f47c3f99cf3fa37e2bf3", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -66,7 +66,7 @@ pub fn run(input: &str,\n         maybe_sysroot: Some(env::current_exe().unwrap().parent().unwrap()\n                                               .parent().unwrap().to_path_buf()),\n         search_paths: libs.clone(),\n-        crate_types: vec!(config::CrateTypeDylib),\n+        crate_types: vec![config::CrateTypeDylib],\n         externs: externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n         ..config::basic_options().clone()\n@@ -185,7 +185,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n         maybe_sysroot: Some(env::current_exe().unwrap().parent().unwrap()\n                                               .parent().unwrap().to_path_buf()),\n         search_paths: libs,\n-        crate_types: vec!(config::CrateTypeExecutable),\n+        crate_types: vec![config::CrateTypeExecutable],\n         output_types: outputs,\n         externs: externs,\n         cg: config::CodegenOptions {"}, {"sha": "239d32c8fc8ddc82c6d0549cd2bb6a6c152b0af6", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -3880,8 +3880,8 @@ mod tests {\n         use std::collections::{HashMap,BTreeMap};\n         use super::ToJson;\n \n-        let array2 = Array(vec!(U64(1), U64(2)));\n-        let array3 = Array(vec!(U64(1), U64(2), U64(3)));\n+        let array2 = Array(vec![U64(1), U64(2)]);\n+        let array3 = Array(vec![U64(1), U64(2), U64(3)]);\n         let object = {\n             let mut tree_map = BTreeMap::new();\n             tree_map.insert(\"a\".to_string(), U64(1));\n@@ -3915,7 +3915,7 @@ mod tests {\n         assert_eq!([1_usize, 2_usize].to_json(), array2);\n         assert_eq!((&[1_usize, 2_usize, 3_usize]).to_json(), array3);\n         assert_eq!((vec![1_usize, 2_usize]).to_json(), array2);\n-        assert_eq!(vec!(1_usize, 2_usize, 3_usize).to_json(), array3);\n+        assert_eq!(vec![1_usize, 2_usize, 3_usize].to_json(), array3);\n         let mut tree_map = BTreeMap::new();\n         tree_map.insert(\"a\".to_string(), 1 as usize);\n         tree_map.insert(\"b\".to_string(), 2);"}, {"sha": "cb9e7bd327028cf9a14b6a03c4e546e22390b04e", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -392,7 +392,7 @@ mod tests {\n \n     #[test]\n     fn test_mem_reader() {\n-        let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7));\n+        let mut reader = Cursor::new(vec![0, 1, 2, 3, 4, 5, 6, 7]);\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n@@ -414,7 +414,7 @@ mod tests {\n \n     #[test]\n     fn test_boxed_slice_reader() {\n-        let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7).into_boxed_slice());\n+        let mut reader = Cursor::new(vec![0, 1, 2, 3, 4, 5, 6, 7].into_boxed_slice());\n         let mut buf = [];\n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n@@ -436,7 +436,7 @@ mod tests {\n \n     #[test]\n     fn read_to_end() {\n-        let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7));\n+        let mut reader = Cursor::new(vec![0, 1, 2, 3, 4, 5, 6, 7]);\n         let mut v = Vec::new();\n         reader.read_to_end(&mut v).unwrap();\n         assert_eq!(v, [0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -512,7 +512,7 @@ mod tests {\n         assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n         assert_eq!(r.read(&mut [0]).unwrap(), 0);\n \n-        let mut r = Cursor::new(vec!(10));\n+        let mut r = Cursor::new(vec![10]);\n         assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n         assert_eq!(r.read(&mut [0]).unwrap(), 0);\n \n@@ -532,14 +532,14 @@ mod tests {\n         let mut r = Cursor::new(&buf[..]);\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n \n-        let mut r = Cursor::new(vec!(10));\n+        let mut r = Cursor::new(vec![10]);\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n \n         let mut buf = [0];\n         let mut r = Cursor::new(&mut buf[..]);\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n \n-        let mut r = Cursor::new(vec!(10).into_boxed_slice());\n+        let mut r = Cursor::new(vec![10].into_boxed_slice());\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n     }\n "}, {"sha": "f48325218fb4908ecc36c8fc8212d067fd1b7727", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -245,7 +245,7 @@ mod tests {\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_os_rng_tasks() {\n \n-        let mut txs = vec!();\n+        let mut txs = vec![];\n         for _ in 0..20 {\n             let (tx, rx) = channel();\n             txs.push(tx);"}, {"sha": "f077ead1f8e07b6d58e7f5616bb6d66a86a594d2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -161,12 +161,12 @@ impl Path {\n         Path {\n             span: s,\n             global: false,\n-            segments: vec!(\n+            segments: vec![\n                 PathSegment {\n                     identifier: identifier,\n                     parameters: PathParameters::none()\n                 }\n-            ),\n+            ],\n         }\n     }\n }"}, {"sha": "37bd83be7b4d4e0d8b1e71e91681b99b06f471b0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -312,7 +312,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.path_all(span, false, strs, Vec::new(), Vec::new(), Vec::new())\n     }\n     fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path {\n-        self.path(span, vec!(id))\n+        self.path(span, vec![id])\n     }\n     fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n         self.path_all(span, true, strs, Vec::new(), Vec::new(), Vec::new())\n@@ -443,7 +443,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                           true,\n                           self.std_path(&[\"option\", \"Option\"]),\n                           Vec::new(),\n-                          vec!( ty ),\n+                          vec![ ty ],\n                           Vec::new()))\n     }\n \n@@ -477,7 +477,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn ty_vars_global(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> {\n         ty_params\n             .iter()\n-            .map(|p| self.ty_path(self.path_global(DUMMY_SP, vec!(p.ident))))\n+            .map(|p| self.ty_path(self.path_global(DUMMY_SP, vec![p.ident])))\n             .collect()\n     }\n \n@@ -770,7 +770,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_some(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let some = self.std_path(&[\"option\", \"Option\", \"Some\"]);\n-        self.expr_call_global(sp, some, vec!(expr))\n+        self.expr_call_global(sp, some, vec![expr])\n     }\n \n     fn expr_none(&self, sp: Span) -> P<ast::Expr> {\n@@ -794,14 +794,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let expr_file = self.expr_str(span,\n                                       token::intern_and_get_ident(&loc.file.name));\n         let expr_line = self.expr_u32(span, loc.line as u32);\n-        let expr_file_line_tuple = self.expr_tuple(span, vec!(expr_file, expr_line));\n+        let expr_file_line_tuple = self.expr_tuple(span, vec![expr_file, expr_line]);\n         let expr_file_line_ptr = self.expr_addr_of(span, expr_file_line_tuple);\n         self.expr_call_global(\n             span,\n             self.std_path(&[\"rt\", \"begin_panic\"]),\n-            vec!(\n+            vec![\n                 self.expr_str(span, msg),\n-                expr_file_line_ptr))\n+                expr_file_line_ptr])\n     }\n \n     fn expr_unreachable(&self, span: Span) -> P<ast::Expr> {\n@@ -812,12 +812,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn expr_ok(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let ok = self.std_path(&[\"result\", \"Result\", \"Ok\"]);\n-        self.expr_call_global(sp, ok, vec!(expr))\n+        self.expr_call_global(sp, ok, vec![expr])\n     }\n \n     fn expr_err(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n         let err = self.std_path(&[\"result\", \"Result\", \"Err\"]);\n-        self.expr_call_global(sp, err, vec!(expr))\n+        self.expr_call_global(sp, err, vec![expr])\n     }\n \n     fn expr_try(&self, sp: Span, head: P<ast::Expr>) -> P<ast::Expr> {\n@@ -836,17 +836,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         // Err(__try_var)  (pattern and expression resp.)\n         let err_pat = self.pat_tuple_struct(sp, err_path.clone(), vec![binding_pat]);\n         let err_inner_expr = self.expr_call(sp, self.expr_path(err_path),\n-                                            vec!(binding_expr.clone()));\n+                                            vec![binding_expr.clone()]);\n         // return Err(__try_var)\n         let err_expr = self.expr(sp, ast::ExprKind::Ret(Some(err_inner_expr)));\n \n         // Ok(__try_var) => __try_var\n-        let ok_arm = self.arm(sp, vec!(ok_pat), binding_expr);\n+        let ok_arm = self.arm(sp, vec![ok_pat], binding_expr);\n         // Err(__try_var) => return Err(__try_var)\n-        let err_arm = self.arm(sp, vec!(err_pat), err_expr);\n+        let err_arm = self.arm(sp, vec![err_pat], err_expr);\n \n         // match head { Ok() => ..., Err() => ... }\n-        self.expr_match(sp, head, vec!(ok_arm, err_arm))\n+        self.expr_match(sp, head, vec![ok_arm, err_arm])\n     }\n \n \n@@ -912,15 +912,15 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn arm(&self, _span: Span, pats: Vec<P<ast::Pat>>, expr: P<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n-            attrs: vec!(),\n+            attrs: vec![],\n             pats: pats,\n             guard: None,\n             body: expr\n         }\n     }\n \n     fn arm_unreachable(&self, span: Span) -> ast::Arm {\n-        self.arm(span, vec!(self.pat_wild(span)), self.expr_unreachable(span))\n+        self.arm(span, vec![self.pat_wild(span)], self.expr_unreachable(span))\n     }\n \n     fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> {\n@@ -970,7 +970,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn lambda1(&self, span: Span, blk: P<ast::Block>, ident: ast::Ident) -> P<ast::Expr> {\n-        self.lambda(span, vec!(ident), blk)\n+        self.lambda(span, vec![ident], blk)\n     }\n \n     fn lambda_expr(&self, span: Span, ids: Vec<ast::Ident>,"}, {"sha": "f21360755bc2603745d66ecbfc0d793f316ce3be", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -46,7 +46,7 @@ pub mod rt {\n \n     impl ToTokens for TokenTree {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n-            vec!(self.clone())\n+            vec![self.clone()]\n         }\n     }\n \n@@ -416,47 +416,47 @@ pub fn expand_quote_expr<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[TokenTree])\n                               -> Box<base::MacResult+'cx> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_expr_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_expr_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_item<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[TokenTree])\n                               -> Box<base::MacResult+'cx> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_item_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_item_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_pat<'cx>(cx: &'cx mut ExtCtxt,\n                              sp: Span,\n                              tts: &[TokenTree])\n                              -> Box<base::MacResult+'cx> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_pat_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_pat_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_arm(cx: &mut ExtCtxt,\n                         sp: Span,\n                         tts: &[TokenTree])\n                         -> Box<base::MacResult+'static> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_arm_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_arm_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_ty(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[TokenTree])\n                        -> Box<base::MacResult+'static> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_ty_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_ty_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_stmt(cx: &mut ExtCtxt,\n                          sp: Span,\n                          tts: &[TokenTree])\n                          -> Box<base::MacResult+'static> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_stmt_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_stmt_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n@@ -465,7 +465,7 @@ pub fn expand_quote_attr(cx: &mut ExtCtxt,\n                          tts: &[TokenTree])\n                          -> Box<base::MacResult+'static> {\n     let expanded = expand_parse_call(cx, sp, \"parse_attribute_panic\",\n-                                    vec!(cx.expr_bool(sp, true)), tts);\n+                                    vec![cx.expr_bool(sp, true)], tts);\n \n     base::MacEager::expr(expanded)\n }\n@@ -474,23 +474,23 @@ pub fn expand_quote_arg(cx: &mut ExtCtxt,\n                         sp: Span,\n                         tts: &[TokenTree])\n                         -> Box<base::MacResult+'static> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_arg_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_arg_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_block(cx: &mut ExtCtxt,\n                         sp: Span,\n                         tts: &[TokenTree])\n                         -> Box<base::MacResult+'static> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_block_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_block_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n pub fn expand_quote_meta_item(cx: &mut ExtCtxt,\n                         sp: Span,\n                         tts: &[TokenTree])\n                         -> Box<base::MacResult+'static> {\n-    let expanded = expand_parse_call(cx, sp, \"parse_meta_item_panic\", vec!(), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_meta_item_panic\", vec![], tts);\n     base::MacEager::expr(expanded)\n }\n \n@@ -499,7 +499,7 @@ pub fn expand_quote_path(cx: &mut ExtCtxt,\n                         tts: &[TokenTree])\n                         -> Box<base::MacResult+'static> {\n     let mode = mk_parser_path(cx, sp, &[\"PathStyle\", \"Type\"]);\n-    let expanded = expand_parse_call(cx, sp, \"parse_path_panic\", vec!(mode), tts);\n+    let expanded = expand_parse_call(cx, sp, \"parse_path_panic\", vec![mode], tts);\n     base::MacEager::expr(expanded)\n }\n \n@@ -531,7 +531,7 @@ fn mk_ident(cx: &ExtCtxt, sp: Span, ident: ast::Ident) -> P<ast::Expr> {\n     cx.expr_method_call(sp,\n                         cx.expr_ident(sp, id_ext(\"ext_cx\")),\n                         id_ext(\"ident_of\"),\n-                        vec!(e_str))\n+                        vec![e_str])\n }\n \n // Lift a name to the expr that evaluates to that name\n@@ -540,16 +540,16 @@ fn mk_name(cx: &ExtCtxt, sp: Span, ident: ast::Ident) -> P<ast::Expr> {\n     cx.expr_method_call(sp,\n                         cx.expr_ident(sp, id_ext(\"ext_cx\")),\n                         id_ext(\"name_of\"),\n-                        vec!(e_str))\n+                        vec![e_str])\n }\n \n fn mk_tt_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> {\n-    let idents = vec!(id_ext(\"syntax\"), id_ext(\"tokenstream\"), id_ext(\"TokenTree\"), id_ext(name));\n+    let idents = vec![id_ext(\"syntax\"), id_ext(\"tokenstream\"), id_ext(\"TokenTree\"), id_ext(name)];\n     cx.expr_path(cx.path_global(sp, idents))\n }\n \n fn mk_token_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> {\n-    let idents = vec!(id_ext(\"syntax\"), id_ext(\"parse\"), id_ext(\"token\"), id_ext(name));\n+    let idents = vec![id_ext(\"syntax\"), id_ext(\"parse\"), id_ext(\"token\"), id_ext(name)];\n     cx.expr_path(cx.path_global(sp, idents))\n }\n \n@@ -599,11 +599,11 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n     }\n     match *tok {\n         token::BinOp(binop) => {\n-            return cx.expr_call(sp, mk_token_path(cx, sp, \"BinOp\"), vec!(mk_binop(cx, sp, binop)));\n+            return cx.expr_call(sp, mk_token_path(cx, sp, \"BinOp\"), vec![mk_binop(cx, sp, binop)]);\n         }\n         token::BinOpEq(binop) => {\n             return cx.expr_call(sp, mk_token_path(cx, sp, \"BinOpEq\"),\n-                                vec!(mk_binop(cx, sp, binop)));\n+                                vec![mk_binop(cx, sp, binop)]);\n         }\n \n         token::OpenDelim(delim) => {\n@@ -653,13 +653,13 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         token::Lifetime(ident) => {\n             return cx.expr_call(sp,\n                                 mk_token_path(cx, sp, \"Lifetime\"),\n-                                vec!(mk_ident(cx, sp, ident)));\n+                                vec![mk_ident(cx, sp, ident)]);\n         }\n \n         token::DocComment(ident) => {\n             return cx.expr_call(sp,\n                                 mk_token_path(cx, sp, \"DocComment\"),\n-                                vec!(mk_name(cx, sp, ast::Ident::with_empty_ctxt(ident))));\n+                                vec![mk_name(cx, sp, ast::Ident::with_empty_ctxt(ident))]);\n         }\n \n         token::MatchNt(name, kind) => {\n@@ -714,17 +714,17 @@ fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, matcher: bool) -> Vec<ast::Stm\n                 cx.expr_method_call(sp,\n                                     cx.expr_ident(sp, ident),\n                                     id_ext(\"to_tokens\"),\n-                                    vec!(cx.expr_ident(sp, id_ext(\"ext_cx\"))));\n+                                    vec![cx.expr_ident(sp, id_ext(\"ext_cx\"))]);\n             let e_to_toks =\n                 cx.expr_method_call(sp, e_to_toks, id_ext(\"into_iter\"), vec![]);\n \n             let e_push =\n                 cx.expr_method_call(sp,\n                                     cx.expr_ident(sp, id_ext(\"tt\")),\n                                     id_ext(\"extend\"),\n-                                    vec!(e_to_toks));\n+                                    vec![e_to_toks]);\n \n-            vec!(cx.stmt_expr(e_push))\n+            vec![cx.stmt_expr(e_push)]\n         }\n         ref tt @ TokenTree::Token(_, MatchNt(..)) if !matcher => {\n             let mut seq = vec![];\n@@ -737,13 +737,13 @@ fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, matcher: bool) -> Vec<ast::Stm\n             let e_sp = cx.expr_ident(sp, id_ext(\"_sp\"));\n             let e_tok = cx.expr_call(sp,\n                                      mk_tt_path(cx, sp, \"Token\"),\n-                                     vec!(e_sp, expr_mk_token(cx, sp, tok)));\n+                                     vec![e_sp, expr_mk_token(cx, sp, tok)]);\n             let e_push =\n                 cx.expr_method_call(sp,\n                                     cx.expr_ident(sp, id_ext(\"tt\")),\n                                     id_ext(\"push\"),\n-                                    vec!(e_tok));\n-            vec!(cx.stmt_expr(e_push))\n+                                    vec![e_tok]);\n+            vec![cx.stmt_expr(e_push)]\n         },\n         TokenTree::Delimited(_, ref delimed) => {\n             statements_mk_tt(cx, &delimed.open_tt(), matcher).into_iter()\n@@ -796,13 +796,13 @@ fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, matcher: bool) -> Vec<ast::Stm\n                                                    vec![e_seq_struct]);\n             let e_tok = cx.expr_call(sp,\n                                      mk_tt_path(cx, sp, \"Sequence\"),\n-                                     vec!(e_sp, e_rc_new));\n+                                     vec![e_sp, e_rc_new]);\n             let e_push =\n                 cx.expr_method_call(sp,\n                                     cx.expr_ident(sp, id_ext(\"tt\")),\n                                     id_ext(\"push\"),\n-                                    vec!(e_tok));\n-            vec!(cx.stmt_expr(e_push))\n+                                    vec![e_tok]);\n+            vec![cx.stmt_expr(e_push)]\n         }\n     }\n }\n@@ -867,7 +867,7 @@ fn mk_stmts_let(cx: &ExtCtxt, sp: Span) -> Vec<ast::Stmt> {\n \n     let stmt_let_tt = cx.stmt_let(sp, true, id_ext(\"tt\"), cx.expr_vec_ng(sp));\n \n-    vec!(stmt_let_sp, stmt_let_tt)\n+    vec![stmt_let_sp, stmt_let_tt]\n }\n \n fn statements_mk_tts(cx: &ExtCtxt, tts: &[TokenTree], matcher: bool) -> Vec<ast::Stmt> {\n@@ -923,7 +923,7 @@ fn expand_parse_call(cx: &ExtCtxt,\n     let new_parser_call =\n         cx.expr_call(sp,\n                      cx.expr_ident(sp, id_ext(\"new_parser_from_tts\")),\n-                     vec!(parse_sess_call(), tts_expr));\n+                     vec![parse_sess_call(), tts_expr]);\n \n     let path = vec![id_ext(\"syntax\"), id_ext(\"ext\"), id_ext(\"quote\"), id_ext(parse_method)];\n     let mut args = vec![cx.expr_mut_addr_of(sp, new_parser_call)];"}, {"sha": "12408c7d3c95bdcb063132cb131a860607880c6b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -624,12 +624,12 @@ mod tests {\n                     node: ast::ExprKind::Path(None, ast::Path {\n                         span: sp(0, 1),\n                         global: false,\n-                        segments: vec!(\n+                        segments: vec![\n                             ast::PathSegment {\n                                 identifier: str_to_ident(\"a\"),\n                                 parameters: ast::PathParameters::none(),\n                             }\n-                        ),\n+                        ],\n                     }),\n                     span: sp(0, 1),\n                     attrs: ThinVec::new(),\n@@ -643,7 +643,7 @@ mod tests {\n                     node: ast::ExprKind::Path(None, ast::Path {\n                             span: sp(0, 6),\n                             global: true,\n-                            segments: vec!(\n+                            segments: vec![\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"a\"),\n                                     parameters: ast::PathParameters::none(),\n@@ -652,7 +652,7 @@ mod tests {\n                                     identifier: str_to_ident(\"b\"),\n                                     parameters: ast::PathParameters::none(),\n                                 }\n-                            )\n+                            ]\n                         }),\n                     span: sp(0, 6),\n                     attrs: ThinVec::new(),\n@@ -763,12 +763,12 @@ mod tests {\n                         node:ast::ExprKind::Path(None, ast::Path{\n                             span: sp(7, 8),\n                             global: false,\n-                            segments: vec!(\n+                            segments: vec![\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"d\"),\n                                     parameters: ast::PathParameters::none(),\n                                 }\n-                            ),\n+                            ],\n                         }),\n                         span:sp(7,8),\n                         attrs: ThinVec::new(),\n@@ -786,12 +786,12 @@ mod tests {\n                            node: ast::ExprKind::Path(None, ast::Path {\n                                span:sp(0,1),\n                                global:false,\n-                               segments: vec!(\n+                               segments: vec![\n                                 ast::PathSegment {\n                                     identifier: str_to_ident(\"b\"),\n                                     parameters: ast::PathParameters::none(),\n                                 }\n-                               ),\n+                               ],\n                             }),\n                            span: sp(0,1),\n                            attrs: ThinVec::new()})),\n@@ -828,18 +828,18 @@ mod tests {\n                             attrs:Vec::new(),\n                             id: ast::DUMMY_NODE_ID,\n                             node: ast::ItemKind::Fn(P(ast::FnDecl {\n-                                inputs: vec!(ast::Arg{\n+                                inputs: vec![ast::Arg{\n                                     ty: P(ast::Ty{id: ast::DUMMY_NODE_ID,\n                                                   node: ast::TyKind::Path(None, ast::Path{\n                                         span:sp(10,13),\n                                         global:false,\n-                                        segments: vec!(\n+                                        segments: vec![\n                                             ast::PathSegment {\n                                                 identifier:\n                                                     str_to_ident(\"i32\"),\n                                                 parameters: ast::PathParameters::none(),\n                                             }\n-                                        ),\n+                                        ],\n                                         }),\n                                         span:sp(10,13)\n                                     }),\n@@ -855,7 +855,7 @@ mod tests {\n                                             span: sp(6,7)\n                                     }),\n                                         id: ast::DUMMY_NODE_ID\n-                                    }),\n+                                    }],\n                                 output: ast::FunctionRetTy::Default(sp(15, 15)),\n                                 variadic: false\n                             }),\n@@ -875,27 +875,27 @@ mod tests {\n                                         span: syntax_pos::DUMMY_SP,\n                                     },\n                                     P(ast::Block {\n-                                        stmts: vec!(ast::Stmt {\n+                                        stmts: vec![ast::Stmt {\n                                             node: ast::StmtKind::Semi(P(ast::Expr{\n                                                 id: ast::DUMMY_NODE_ID,\n                                                 node: ast::ExprKind::Path(None,\n                                                       ast::Path{\n                                                         span:sp(17,18),\n                                                         global:false,\n-                                                        segments: vec!(\n+                                                        segments: vec![\n                                                             ast::PathSegment {\n                                                                 identifier:\n                                                                 str_to_ident(\n                                                                     \"b\"),\n                                                                 parameters:\n                                                                 ast::PathParameters::none(),\n                                                             }\n-                                                        ),\n+                                                        ],\n                                                       }),\n                                                 span: sp(17,18),\n                                                 attrs: ThinVec::new()})),\n                                             id: ast::DUMMY_NODE_ID,\n-                                            span: sp(17,19)}),\n+                                            span: sp(17,19)}],\n                                         id: ast::DUMMY_NODE_ID,\n                                         rules: ast::BlockCheckMode::Default, // no idea\n                                         span: sp(15,21),"}, {"sha": "b80aa667be6a190064f4b2aa3c2a8bda4b97fa59", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -848,7 +848,7 @@ impl<'a> Parser<'a> {\n               Fe: FnMut(DiagnosticBuilder)\n     {\n         let mut first: bool = true;\n-        let mut v = vec!();\n+        let mut v = vec![];\n         while !kets.contains(&&self.token) {\n             match sep.sep {\n                 Some(ref t) => {\n@@ -2224,13 +2224,13 @@ impl<'a> Parser<'a> {\n                             SeqSep::trailing_allowed(token::Comma),\n                             |p| Ok(p.parse_expr()?)\n                         )?;\n-                        let mut exprs = vec!(first_expr);\n+                        let mut exprs = vec![first_expr];\n                         exprs.extend(remaining_exprs);\n                         ex = ExprKind::Vec(exprs);\n                     } else {\n                         // Vector with one element.\n                         self.expect(&token::CloseDelim(token::Bracket))?;\n-                        ex = ExprKind::Vec(vec!(first_expr));\n+                        ex = ExprKind::Vec(vec![first_expr]);\n                     }\n                 }\n                 hi = self.prev_span.hi;\n@@ -4224,7 +4224,7 @@ impl<'a> Parser<'a> {\n                              mode: BoundParsingMode)\n                              -> PResult<'a, TyParamBounds>\n     {\n-        let mut result = vec!();\n+        let mut result = vec![];\n         loop {\n             let question_span = self.span;\n             let ate_question = self.eat(&token::Question);"}, {"sha": "b0bd64467430098bfd1b6497b1374e39b2730094", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -2277,7 +2277,7 @@ impl<'a> State<'a> {\n                     Ok(())\n                 }));\n \n-                let mut options = vec!();\n+                let mut options = vec![];\n                 if a.volatile {\n                     options.push(\"volatile\");\n                 }"}, {"sha": "618878c1f7980c9fe829534c1af3889888df546e", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -430,7 +430,7 @@ fn mk_std(cx: &TestCtxt) -> P<ast::Item> {\n     let (vi, vis, ident) = if cx.is_test_crate {\n         (ast::ItemKind::Use(\n             P(nospan(ast::ViewPathSimple(id_test,\n-                                         path_node(vec!(id_test)))))),\n+                                         path_node(vec![id_test]))))),\n          ast::Visibility::Public, keywords::Invalid.ident())\n     } else {\n         (ast::ItemKind::ExternCrate(None), ast::Visibility::Inherited, id_test)"}, {"sha": "9be7dbd68174edf8cece539df886b435f1c52146", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -105,7 +105,7 @@ impl<T> SmallVector<T> {\n             One(..) => {\n                 let one = mem::replace(&mut self.repr, Zero);\n                 match one {\n-                    One(v1) => mem::replace(&mut self.repr, Many(vec!(v1, v))),\n+                    One(v1) => mem::replace(&mut self.repr, Many(vec![v1, v])),\n                     _ => unreachable!()\n                 };\n             }\n@@ -314,12 +314,12 @@ mod tests {\n     #[test]\n     #[should_panic]\n     fn test_expect_one_many() {\n-        SmallVector::many(vec!(1, 2)).expect_one(\"\");\n+        SmallVector::many(vec![1, 2]).expect_one(\"\");\n     }\n \n     #[test]\n     fn test_expect_one_one() {\n         assert_eq!(1, SmallVector::one(1).expect_one(\"\"));\n-        assert_eq!(1, SmallVector::many(vec!(1)).expect_one(\"\"));\n+        assert_eq!(1, SmallVector::many(vec![1]).expect_one(\"\"));\n     }\n }"}, {"sha": "c46d4b34173f65fb48acefd057fc044264985ba5", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -65,12 +65,12 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n     macro_rules! md {\n         ($name:expr, $f:ident) => { {\n             let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-            let attrs = vec!(cx.attribute(span, inline));\n+            let attrs = vec![cx.attribute(span, inline)];\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(borrowed_self()),\n+                args: vec![borrowed_self()],\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n                 is_unsafe: false,"}, {"sha": "597ff306b3dd8edf4c7cb08d145cdd0a25f73be2", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -28,12 +28,12 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n     macro_rules! md {\n         ($name:expr, $op:expr, $equal:expr) => { {\n             let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-            let attrs = vec!(cx.attribute(span, inline));\n+            let attrs = vec![cx.attribute(span, inline)];\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(borrowed_self()),\n+                args: vec![borrowed_self()],\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n                 is_unsafe: false,"}, {"sha": "10db56d46f6dfcaf1091b965aa95cd0c0ede0c04", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -79,9 +79,9 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                           ret_ty:\n                               Literal(Path::new_(pathvec_std!(cx, core::result::Result),\n                                                  None,\n-                                                 vec!(Box::new(Self_), Box::new(Literal(Path::new_(\n+                                                 vec![Box::new(Self_), Box::new(Literal(Path::new_(\n                         vec![typaram, \"Error\"], None, vec![], false\n-                    )))),\n+                    )))],\n                                                  true)),\n                           attributes: Vec::new(),\n                           is_unsafe: false,"}, {"sha": "640296d7f06fc866e22c7f7fd2612604bcfe492b", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -139,23 +139,23 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n-        methods: vec!(\n+        methods: vec![\n             MethodDef {\n                 name: \"encode\",\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n                     bounds: vec![(typaram,\n-                                  vec![Path::new_(vec![krate, \"Encoder\"], None, vec!(), true)])]\n+                                  vec![Path::new_(vec![krate, \"Encoder\"], None, vec![], true)])]\n                 },\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(Ptr(Box::new(Literal(Path::new_local(typaram))),\n-                           Borrowed(None, Mutability::Mutable))),\n+                args: vec![Ptr(Box::new(Literal(Path::new_local(typaram))),\n+                           Borrowed(None, Mutability::Mutable))],\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, core::result::Result),\n                     None,\n-                    vec!(Box::new(Tuple(Vec::new())), Box::new(Literal(Path::new_(\n+                    vec![Box::new(Tuple(Vec::new())), Box::new(Literal(Path::new_(\n                         vec![typaram, \"Error\"], None, vec![], false\n-                    )))),\n+                    )))],\n                     true\n                 )),\n                 attributes: Vec::new(),\n@@ -165,7 +165,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                     encodable_substructure(a, b, c, krate)\n                 })),\n             }\n-        ),\n+        ],\n         associated_types: Vec::new(),\n     };\n "}, {"sha": "c2bfead568612b0eb34131b88d3f0d236868fe37", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -28,7 +28,7 @@ macro_rules! pathvec {\n \n macro_rules! path {\n     ($($x:tt)*) => (\n-        ::ext::deriving::generic::ty::Path::new( pathvec!( $($x)* ) )\n+        ::ext::deriving::generic::ty::Path::new( pathvec![ $($x)* ] )\n     )\n }\n \n@@ -40,7 +40,7 @@ macro_rules! path_local {\n \n macro_rules! pathvec_std {\n     ($cx:expr, $first:ident :: $($rest:ident)::+) => ({\n-        let mut v = pathvec!($($rest)::+);\n+        let mut v = pathvec![$($rest)::+];\n         if let Some(s) = $cx.crate_root {\n             v.insert(0, s);\n         }"}, {"sha": "95ae6eb2efe8e5704d85e69b0fc6e9025c1d1271", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -336,7 +336,7 @@ pub type OptRes = Result<TestOpts, String>;\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n fn optgroups() -> Vec<getopts::OptGroup> {\n-    vec!(getopts::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n+    vec![getopts::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n       getopts::optflag(\"\", \"test\", \"Run tests and not benchmarks\"),\n       getopts::optflag(\"\", \"bench\", \"Run benchmarks instead of tests\"),\n       getopts::optflag(\"h\", \"help\", \"Display this message (longer with --help)\"),\n@@ -352,7 +352,7 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n-            never  = never colorize output;\", \"auto|always|never\"))\n+            never  = never colorize output;\", \"auto|always|never\")]\n }\n \n fn usage(binary: &str) {"}, {"sha": "5792ba06eb0ce3d0c0ac18869c51ec4a943734f1", "filename": "src/test/compile-fail/E0297.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2FE0297.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2FE0297.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0297.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let xs : Vec<Option<i32>> = vec!(Some(1), None);\n+    let xs : Vec<Option<i32>> = vec![Some(1), None];\n \n     for Some(x) in xs {}\n     //~^ ERROR E0297"}, {"sha": "324e9259647792ab335bf654bcecb7f803f13d39", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     // Testing that method lookup does not automatically borrow\n     // vectors to slices then automatically create a self reference.\n \n-    let mut a = vec!(0);\n+    let mut a = vec![0];\n     a.test_mut(); //~ ERROR no method named `test_mut` found\n     a.test(); //~ ERROR no method named `test` found\n "}, {"sha": "1e665a12a195b14df42dd3a8cfc30af166dc4e92", "filename": "src/test/compile-fail/borrowck/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp-idx.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,7 +14,7 @@ struct Point {\n }\n \n fn a() {\n-    let mut p = vec!(1);\n+    let mut p = vec![1];\n \n     // Create an immutable pointer into p's contents:\n     let q: &isize = &p[0];\n@@ -30,7 +30,7 @@ fn b() {\n     // here we alias the mutable vector into an imm slice and try to\n     // modify the original:\n \n-    let mut p = vec!(1);\n+    let mut p = vec![1];\n \n     borrow(\n         &p,\n@@ -40,7 +40,7 @@ fn b() {\n fn c() {\n     // Legal because the scope of the borrow does not include the\n     // modification:\n-    let mut p = vec!(1);\n+    let mut p = vec![1];\n     borrow(&p, ||{});\n     p[0] = 5;\n }"}, {"sha": "9178aadeeebe11d9628928465ac0a93d0b8ba1e9", "filename": "src/test/compile-fail/borrowck/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -29,6 +29,6 @@ fn defer<'r>(x: &'r [&'r str]) -> defer<'r> {\n }\n \n fn main() {\n-    let x = defer(&vec!(\"Goodbye\", \"world!\"));\n+    let x = defer(&vec![\"Goodbye\", \"world!\"]);\n     x.x[0];\n }"}, {"sha": "c5de95f8fc04270320749bb7889aef09885960c3", "filename": "src/test/compile-fail/borrowck/borrowck-loan-vec-content.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-loan-vec-content.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,12 +17,12 @@ fn takes_imm_elt<F>(_v: &isize, f: F) where F: FnOnce() {\n }\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n-    let mut v: Vec<isize> = vec!(1, 2, 3);\n+    let mut v: Vec<isize> = vec![1, 2, 3];\n     takes_imm_elt(&v[0], || {})\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n-    let mut v: Vec<isize> = vec!(1, 2, 3);\n+    let mut v: Vec<isize> = vec![1, 2, 3];\n     takes_imm_elt(\n         &v[0],\n         || { //~ ERROR cannot borrow `v` as mutable"}, {"sha": "bf4c74741368c458f4d25ce54bea0ebb6c7b0e9c", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-overloaded-auto-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,6 +11,6 @@\n use std::rc::Rc;\n \n pub fn main() {\n-    let _x = Rc::new(vec!(1, 2)).into_iter();\n+    let _x = Rc::new(vec![1, 2]).into_iter();\n     //~^ ERROR cannot move out of borrowed content\n }"}, {"sha": "311208f07b88de8904d215c7a09f6cbee92d07ae", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-vec-tail.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -18,11 +18,11 @@ struct Foo {\n }\n \n pub fn main() {\n-    let x = vec!(\n+    let x = vec![\n         Foo { string: \"foo\".to_string() },\n         Foo { string: \"bar\".to_string() },\n         Foo { string: \"baz\".to_string() }\n-    );\n+    ];\n     let x: &[Foo] = &x;\n     match *x {\n         [_, ref tail..] => {"}, {"sha": "4e0304e20c00d576d9a489145b6e3f448a57501d", "filename": "src/test/compile-fail/borrowck/borrowck-mut-slice-of-imm-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,6 +13,6 @@ fn write(v: &mut [isize]) {\n }\n \n fn main() {\n-    let v = vec!(1, 2, 3);\n+    let v = vec![1, 2, 3];\n     write(&mut v); //~ ERROR cannot borrow\n }"}, {"sha": "df72c2b0af72a7396c10fe5b77be11402730748c", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-move-from-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -25,7 +25,7 @@ impl<T> Index<usize> for MyVec<T> {\n }\n \n fn main() {\n-    let v = MyVec::<Box<_>> { data: vec!(box 1, box 2, box 3) };\n+    let v = MyVec::<Box<_>> { data: vec![box 1, box 2, box 3] };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n     //~^ ERROR cannot move out of indexed content"}, {"sha": "eb5d69d49bd6aad72ef826606ed5bda7327f2972", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -12,7 +12,7 @@\n #![feature(slice_patterns)]\n \n fn a<'a>() -> &'a [isize] {\n-    let vec = vec!(1, 2, 3, 4);\n+    let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n     let tail = match vec {\n         &[_, ref tail..] => tail,\n@@ -22,7 +22,7 @@ fn a<'a>() -> &'a [isize] {\n }\n \n fn b<'a>() -> &'a [isize] {\n-    let vec = vec!(1, 2, 3, 4);\n+    let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n     let init = match vec {\n         &[ref init.., _] => init,\n@@ -32,7 +32,7 @@ fn b<'a>() -> &'a [isize] {\n }\n \n fn c<'a>() -> &'a [isize] {\n-    let vec = vec!(1, 2, 3, 4);\n+    let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n     let slice = match vec {\n         &[_, ref slice.., _] => slice,"}, {"sha": "505c8c6d535819443ad27588983c69e9d58db425", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n #![feature(slice_patterns)]\n \n fn a() {\n-    let mut v = vec!(1, 2, 3);\n+    let mut v = vec![1, 2, 3];\n     let vb: &mut [isize] = &mut v;\n     match vb {\n         &mut [_a, ref tail..] => {"}, {"sha": "d26364efdbc5d153bdb7d0455b62e2b2dbb5093b", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -25,7 +25,7 @@ fn a() {\n }\n \n fn b() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec![box 1, box 2, box 3];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         &mut [ref _b..] => {\n@@ -37,7 +37,7 @@ fn b() {\n }\n \n fn c() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec![box 1, box 2, box 3];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         &mut [_a, //~ ERROR cannot move out\n@@ -59,7 +59,7 @@ fn c() {\n }\n \n fn d() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec![box 1, box 2, box 3];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         &mut [ //~ ERROR cannot move out\n@@ -73,7 +73,7 @@ fn d() {\n }\n \n fn e() {\n-    let mut vec = vec!(box 1, box 2, box 3);\n+    let mut vec = vec![box 1, box 2, box 3];\n     let vec: &mut [Box<isize>] = &mut vec;\n     match vec {\n         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out"}, {"sha": "cd8f3ebefe6287272c014f000a3f0208fa32c5b7", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n #![feature(slice_patterns)]\n \n fn a<'a>() -> &'a isize {\n-    let vec = vec!(1, 2, 3, 4);\n+    let vec = vec![1, 2, 3, 4];\n     let vec: &[isize] = &vec; //~ ERROR `vec` does not live long enough\n     let tail = match vec {\n         &[_a, ref tail..] => &tail[0],"}, {"sha": "33e4d3e62c418aa6b3eb90138b0c2849c43c00ee", "filename": "src/test/compile-fail/drop-with-active-borrows-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-with-active-borrows-2.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn read_lines_borrowed<'a>() -> Vec<&'a str> {\n-    let raw_lines: Vec<String> = vec!(\"foo  \".to_string(), \"  bar\".to_string());\n+    let raw_lines: Vec<String> = vec![\"foo  \".to_string(), \"  bar\".to_string()];\n     raw_lines.iter().map(|l| l.trim()).collect()\n     //~^ ERROR `raw_lines` does not live long enough\n }"}, {"sha": "c8f33c3caf8d393963716d57799b2b52258b9946", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let v: Vec<isize> = vec!(0, 1, 2, 3, 4, 5);\n+    let v: Vec<isize> = vec![0, 1, 2, 3, 4, 5];\n     let s: String = \"abcdef\".to_string();\n     v[3_usize];\n     v[3];"}, {"sha": "4618851529a15b2aa8db1180e0ff783393bcc67e", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut v = vec!(1);\n+    let mut v = vec![1];\n     let mut f = || v.push(2);\n     let _w = v; //~ ERROR: cannot move out of `v`\n "}, {"sha": "6ad3ec67b29642bb251aef0cae43a3c216b2fe1f", "filename": "src/test/compile-fail/issue-13446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-13446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-13446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13446.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,6 +13,6 @@\n \n // error-pattern: mismatched types\n \n-static VEC: [u32; 256] = vec!();\n+static VEC: [u32; 256] = vec![];\n \n fn main() {}"}, {"sha": "c7b276da5737666cb6e49b2a4df3537252b96b59", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -10,7 +10,7 @@\n \n \n fn main() {\n-    let needlesArr: Vec<char> = vec!('a', 'f');\n+    let needlesArr: Vec<char> = vec!['a', 'f'];\n     needlesArr.iter().fold(|x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied"}, {"sha": "1c543a5fdacbba3deac22b7a66372fdb67fc4059", "filename": "src/test/compile-fail/issue-5067.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-5067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fissue-5067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5067.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -48,7 +48,7 @@ macro_rules! make_vec {\n }\n \n fn main() {\n-    let _ = make_vec!(a 1, a 2, a 3);\n+    let _ = make_vec![a 1, a 2, a 3];\n }\n \n "}, {"sha": "21cfadb9c79925c96e9ddeb278a0f3d90174a41a", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     let mut a = 3; //~ ERROR: variable does not need to be mutable\n     let mut a = 2; //~ ERROR: variable does not need to be mutable\n     let mut b = 3; //~ ERROR: variable does not need to be mutable\n-    let mut a = vec!(3); //~ ERROR: variable does not need to be mutable\n+    let mut a = vec![3]; //~ ERROR: variable does not need to be mutable\n     let (mut a, b) = (1, 2); //~ ERROR: variable does not need to be mutable\n     let mut a; //~ ERROR: variable does not need to be mutable\n     a = 3;\n@@ -88,5 +88,5 @@ fn callback<F>(f: F) where F: FnOnce() {}\n #[allow(unused_mut)]\n fn foo(mut a: isize) {\n     let mut a = 3;\n-    let mut b = vec!(2);\n+    let mut b = vec![2];\n }"}, {"sha": "4d9b3aea1124bbb2c84c22408c7c7e1d6d20d80a", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -29,7 +29,7 @@ fn main() {\n         _ => { }\n     }\n \n-    let x: Vec<char> = vec!('a', 'b', 'c');\n+    let x: Vec<char> = vec!['a', 'b', 'c'];\n     let x: &[char] = &x;\n     match *x {\n         ['a', 'b', 'c', ref _tail..] => {}"}, {"sha": "63fb4ff02a4ea6d3740f250ea016b848920b5f24", "filename": "src/test/compile-fail/moves-based-on-type-access-to-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -16,7 +16,7 @@ fn consume(_s: String) {}\n fn touch<A>(_a: &A) {}\n \n fn f20() {\n-    let x = vec!(\"hi\".to_string());\n+    let x = vec![\"hi\".to_string()];\n     consume(x.into_iter().next().unwrap());\n     touch(&x[0]); //~ ERROR use of moved value: `x`\n }"}, {"sha": "194f278259b6b08e70b9f414ccc7283351284288", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -29,7 +29,7 @@ fn f20() {\n }\n \n fn f21() {\n-    let x = vec!(1, 2, 3);\n+    let x = vec![1, 2, 3];\n     let _y = (x[0], 3);\n     touch(&x);\n }\n@@ -77,24 +77,24 @@ fn f70() {\n \n fn f80() {\n     let x = \"hi\".to_string();\n-    let _y = vec!(x);\n+    let _y = vec![x];\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f100() {\n-    let x = vec!(\"hi\".to_string());\n+    let x = vec![\"hi\".to_string()];\n     let _y = x.into_iter().next().unwrap();\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f110() {\n-    let x = vec!(\"hi\".to_string());\n+    let x = vec![\"hi\".to_string()];\n     let _y = [x.into_iter().next().unwrap(); 1];\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f120() {\n-    let mut x = vec!(\"hi\".to_string(), \"ho\".to_string());\n+    let mut x = vec![\"hi\".to_string(), \"ho\".to_string()];\n     x.swap(0, 1);\n     touch(&x[0]);\n     touch(&x[1]);"}, {"sha": "5e1d22bf63b89c2e62aa1759c51a3327bc6bf815", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,7 +14,7 @@ use std::sync::Arc;\n use std::thread;\n \n fn main() {\n-    let v = vec!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = Arc::new(v);\n \n     thread::spawn(move|| {"}, {"sha": "76c8a444320d3d3ddbd6a27c84154b9f34a62f97", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -12,7 +12,7 @@ use std::sync::Arc;\n use std::thread;\n \n fn main() {\n-    let v = vec!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = Arc::new(v);\n \n     thread::spawn(move|| {"}, {"sha": "6067b71280cefa69ca28477a119718ee24ab07eb", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n extern crate libc;\n \n fn main() {\n-    let x : *const Vec<isize> = &vec!(1,2,3);\n+    let x : *const Vec<isize> = &vec![1,2,3];\n     let y : *const libc::c_void = x as *const libc::c_void;\n     unsafe {\n         let _z = (*y).clone();"}, {"sha": "74e728d713b1d27e8aa00899b3aa981ad332615e", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -37,28 +37,28 @@ fn main() {\n       (_, t::a) => {}\n       (t::b, t::b) => {}\n     }\n-    let vec = vec!(Some(42), None, Some(21));\n+    let vec = vec![Some(42), None, Some(21)];\n     let vec: &[Option<isize>] = &vec;\n     match *vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n         [Some(..), None, ref tail..] => {}\n         [Some(..), Some(..), ref tail..] => {}\n         [None] => {}\n     }\n-    let vec = vec!(1);\n+    let vec = vec![1];\n     let vec: &[isize] = &vec;\n     match *vec {\n         [_, ref tail..] => (),\n         [] => ()\n     }\n-    let vec = vec!(0.5f32);\n+    let vec = vec![0.5f32];\n     let vec: &[f32] = &vec;\n     match *vec { //~ ERROR non-exhaustive patterns: `[_, _, _, _]` not covered\n         [0.1, 0.2, 0.3] => (),\n         [0.1, 0.2] => (),\n         [0.1] => (),\n         [] => ()\n     }\n-    let vec = vec!(Some(42), None, Some(21));\n+    let vec = vec![Some(42), None, Some(21)];\n     let vec: &[Option<isize>] = &vec;\n     match *vec {\n         [Some(..), None, ref tail..] => {}"}, {"sha": "3a789f3faeb2ab2611fe4f510bef5ce303c9409e", "filename": "src/test/compile-fail/on-unimplemented/on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -30,7 +30,7 @@ fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n }\n \n pub fn main() {\n-    let x = vec!(1u8, 2, 3, 4);\n+    let x = vec![1u8, 2, 3, 4];\n     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n     //~^ ERROR\n     //~^^ NOTE a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`"}, {"sha": "8982b5cd98de49a9ed40dfae2311c5785eef60d7", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n // The type of `y` ends up getting inferred to the type of the block.\n fn broken() {\n     let mut x = 3;\n-    let mut _y = vec!(&mut x);\n+    let mut _y = vec![&mut x];\n     //~^ NOTE borrow of `x` occurs here\n     //~| NOTE borrow of `x` occurs here\n     //~| NOTE borrow of `x` occurs here"}, {"sha": "12b48b2a6c8aaa8462c293a4a41114a107924663", "filename": "src/test/compile-fail/unboxed-closures-failed-recursive-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-2.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -16,7 +16,7 @@\n \n fn a() {\n     let mut closure0 = None;\n-    let vec = vec!(1, 2, 3);\n+    let vec = vec![1, 2, 3];\n \n     loop {\n         {"}, {"sha": "cd9f1636c3f4dbe9a065d7f36f8d6266014df6d3", "filename": "src/test/compile-fail/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -16,7 +16,7 @@ fn call<F>(f: F) where F : Fn() {\n }\n \n fn main() {\n-    let y = vec!(format!(\"World\"));\n+    let y = vec![format!(\"World\")];\n     call(|| {\n         y.into_iter();\n         //~^ ERROR cannot move out of captured outer variable in an `Fn` closure"}, {"sha": "96f58666fdff33122f93e8951c5b06a888a6faa2", "filename": "src/test/compile-fail/vec-macro-with-comma-only.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fvec-macro-with-comma-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fvec-macro-with-comma-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-macro-with-comma-only.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    vec!(,); //~ ERROR expected expression, found `,`\n+    vec![,]; //~ ERROR expected expression, found `,`\n }"}, {"sha": "571634e3992619074b1060170c4fc4a1d2c37025", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut xs: Vec<isize> = vec!();\n+    let mut xs: Vec<isize> = vec![];\n \n     for x in &mut xs {\n         xs.push(1) //~ ERROR cannot borrow `xs`"}, {"sha": "27f6fc51164ad2b6833f504ce801ccca5ccafa40", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -21,8 +21,8 @@ impl Drop for r {\n \n fn main() {\n     // This can't make sense as it would copy the classes\n-    let i = vec!(r(0));\n-    let j = vec!(r(1));\n+    let i = vec![r(0)];\n+    let j = vec![r(1)];\n     let k = i + j;\n     //~^ ERROR binary operation `+` cannot be applied to type\n     println!(\"{:?}\", j);"}, {"sha": "f289b85992ee80b34ac847c005aea2dd67432962", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -10,6 +10,6 @@\n \n \n fn main() {\n-    let v: Vec<isize> = vec!(1, 2, 3);\n+    let v: Vec<isize> = vec![1, 2, 3];\n     v[1] = 4; //~ ERROR cannot borrow immutable local variable `v` as mutable\n }"}, {"sha": "d334e33f887b8e17dbcb3baee48749246dbfa120", "filename": "src/test/debuginfo/issue14411.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fdebuginfo%2Fissue14411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fdebuginfo%2Fissue14411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue14411.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -20,6 +20,6 @@ fn test(a: &Vec<u8>) {\n }\n \n pub fn main() {\n-  let data = vec!();\n+  let data = vec![];\n   test(&data);\n }"}, {"sha": "d723d94c02cc33a872d2efb23fdd4de80e226ae1", "filename": "src/test/parse-fail/issue-10412.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fparse-fail%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fparse-fail%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-10412.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -19,7 +19,7 @@ trait Serializable<'self, T> { //~ ERROR lifetimes cannot use keyword names\n impl<'self> Serializable<str> for &'self str { //~ ERROR lifetimes cannot use keyword names\n     //~^ ERROR lifetimes cannot use keyword names\n     fn serialize(val : &'self str) -> Vec<u8> { //~ ERROR lifetimes cannot use keyword names\n-        vec!(1)\n+        vec![1]\n     }\n     fn deserialize(repr: &[u8]) -> &'self str { //~ ERROR lifetimes cannot use keyword names\n         \"hi\""}, {"sha": "c645a66b70efcb26370bd3058d9479fec3fe154b", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -61,9 +61,9 @@ fn test9() {\n }\n \n fn test10() -> isize {\n-    let regs = vec!(0);\n+    let regs = vec![0];\n     match true { true => { } _ => { } }\n     regs[0]\n }\n \n-fn test11() -> Vec<isize> { if true { } vec!(1, 2) }\n+fn test11() -> Vec<isize> { if true { } vec![1, 2] }"}, {"sha": "e750d1fb1e3e6364dba8cf64655988c0a5a4bec5", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_partial_eq.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -53,12 +53,12 @@ fn expand_deriving_partial_eq(cx: &mut ExtCtxt, span: Span, mitem: &MetaItem, it\n     }\n \n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n-    let attrs = vec!(cx.attribute(span, inline));\n+    let attrs = vec![cx.attribute(span, inline)];\n     let methods = vec![MethodDef {\n         name: \"eq\",\n         generics: LifetimeBounds::empty(),\n         explicit_self: borrowed_explicit_self(),\n-        args: vec!(borrowed_self()),\n+        args: vec![borrowed_self()],\n         ret_ty: Literal(deriving::generic::ty::Path::new_local(\"bool\")),\n         attributes: attrs,\n         is_unsafe: false,"}, {"sha": "bc95d96a8cc9d1e63baa58f3f2aa28ceca67b7a2", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -38,7 +38,7 @@ fn length<A, T: iterable<A>>(x: T) -> usize {\n }\n \n pub fn main() {\n-    let x: Vec<isize> = vec!(0,1,2,3);\n+    let x: Vec<isize> = vec![0,1,2,3];\n     // Call a method\n     x.iterate(|y| { assert_eq!(x[*y as usize], *y); true });\n     // Call a parameterized function"}, {"sha": "dd194447740b7cf7ce92a7de9bc8d35d548a429d", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -25,7 +25,7 @@ fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {\n }\n \n fn main() {\n-    let v = vec!(1, 2, 3, 4, 5, 6);\n+    let v = vec![1, 2, 3, 4, 5, 6];\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let r = pairwise_sub(Box::new(v.into_iter()));\n     assert_eq!(r, 9);"}, {"sha": "abd4917cae87fcd0e93434ee7d463f6ef49b6cab", "filename": "src/test/run-pass/associated-types-iterator-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -22,7 +22,7 @@ fn pairwise_sub<T:DoubleEndedIterator<Item=isize>>(mut t: T) -> isize {\n }\n \n fn main() {\n-    let v = vec!(1, 2, 3, 4, 5, 6);\n+    let v = vec![1, 2, 3, 4, 5, 6];\n     let r = pairwise_sub(v.into_iter());\n     assert_eq!(r, 9);\n }"}, {"sha": "b0afae79c3696d89f372a1095a73f238e813df35", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n \n pub fn main() {\n     let mut sum = 0;\n-    let xs = vec!(1, 2, 3, 4, 5);\n+    let xs = vec![1, 2, 3, 4, 5];\n     for x in &xs {\n         sum += *x;\n     }"}, {"sha": "f6cb314d06e2d8e5a395e6fcda84d4a60637a4e6", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -21,7 +21,7 @@ impl<T> Pushable<T> for Vec<T> {\n }\n \n pub fn main() {\n-    let mut v = vec!(1);\n+    let mut v = vec![1];\n     v.push_val(2);\n     v.push_val(3);\n     assert_eq!(v, [1, 2, 3]);"}, {"sha": "ed0b9eca0e058274a98944e877201003bbdf21f0", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -12,7 +12,7 @@\n \n fn f<T>(x: Vec<T>) -> T { return x.into_iter().next().unwrap(); }\n \n-fn g<F>(act: F) -> isize where F: FnOnce(Vec<isize>) -> isize { return act(vec!(1, 2, 3)); }\n+fn g<F>(act: F) -> isize where F: FnOnce(Vec<isize>) -> isize { return act(vec![1, 2, 3]); }\n \n pub fn main() {\n     assert_eq!(g(f), 1);"}, {"sha": "7fca4bccab3ff5b25d3cee9c4d7b688ba6574148", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -10,7 +10,7 @@\n \n // Check usage and precedence of block arguments in expressions:\n pub fn main() {\n-    let v = vec!(-1.0f64, 0.0, 1.0, 2.0, 3.0);\n+    let v = vec![-1.0f64, 0.0, 1.0, 2.0, 3.0];\n \n     // Statement form does not require parentheses:\n     for i in &v {"}, {"sha": "44f4a54610a9bda3b59ceff3d8e7b78ba2597027", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,6 +17,6 @@ impl<'a> Foo for &'a [isize] {\n }\n \n pub fn main() {\n-    let items = vec!( 3, 5, 1, 2, 4 );\n+    let items = vec![ 3, 5, 1, 2, 4 ];\n     items.foo();\n }"}, {"sha": "b6c2a3a61ea4fa2449db090716b3b4fe44a47ec1", "filename": "src/test/run-pass/borrowck/borrowck-binding-mutbl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-binding-mutbl.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,7 +14,7 @@ fn impure(_v: &[isize]) {\n }\n \n pub fn main() {\n-    let mut x = F {f: vec!(3)};\n+    let mut x = F {f: vec![3]};\n \n     match x {\n       F {f: ref mut v} => {"}, {"sha": "4699f376313ba8fab9b5ae4da1214a6769d1388a", "filename": "src/test/run-pass/borrowck/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-mut-vec-as-imm-slice.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -21,5 +21,5 @@ fn has_mut_vec(v: Vec<isize> ) -> isize {\n }\n \n pub fn main() {\n-    assert_eq!(has_mut_vec(vec!(1, 2, 3)), 6);\n+    assert_eq!(has_mut_vec(vec![1, 2, 3]), 6);\n }"}, {"sha": "9a32fbc103147ee92412bc778fda57fd7ca62865", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -26,7 +26,7 @@ pub fn main() {\n         i += 1; if i % 2 == 0 { continue; } assert!((i % 2 != 0));\n         if i >= 10 { break; }\n     }\n-    let ys = vec!(1, 2, 3, 4, 5, 6);\n+    let ys = vec![1, 2, 3, 4, 5, 6];\n     for x in &ys {\n         if *x % 2 == 0 { continue; }\n         assert!((*x % 2 != 0));"}, {"sha": "ad779d26f9e463d77fdffa6bcad1fc8aaca0fd32", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -57,7 +57,7 @@ pub fn main() {\n         _ => panic!(),\n     }\n \n-    let buf = vec!(97u8, 98, 99, 100);\n+    let buf = vec![97u8, 98, 99, 100];\n     assert_eq!(match &buf[0..3] {\n          b\"def\" => 1,\n          b\"abc\" => 2,"}, {"sha": "b105411c284a7bdbdae98e69881f572929f62fa4", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     // actually working.\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n-    iter(vec!(1, 2, 3), |i| {\n+    iter(vec![1, 2, 3], |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "7d266181c9eb12236ab7a374e51f8976bf57ee61", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,12 +14,12 @@ extern crate cci_class_6;\n use cci_class_6::kitties::cat;\n \n pub fn main() {\n-  let mut nyan : cat<char> = cat::<char>(52_usize, 99, vec!('p'));\n-  let mut kitty = cat(1000_usize, 2, vec!(\"tabby\".to_string()));\n+  let mut nyan : cat<char> = cat::<char>(52_usize, 99, vec!['p']);\n+  let mut kitty = cat(1000_usize, 2, vec![\"tabby\".to_string()]);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(vec!(1_usize,2_usize,3_usize));\n+  nyan.speak(vec![1_usize,2_usize,3_usize]);\n   assert_eq!(nyan.meow_count(), 55_usize);\n-  kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n+  kitty.speak(vec![\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()]);\n   assert_eq!(kitty.meow_count(), 1004_usize);\n }"}, {"sha": "5da858e3c40972756184cf72dcabf41c9fd0a282", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -33,12 +33,12 @@ fn cat<U>(in_x : usize, in_y : isize, in_info: Vec<U> ) -> cat<U> {\n }\n \n pub fn main() {\n-  let mut nyan : cat<isize> = cat::<isize>(52, 99, vec!(9));\n-  let mut kitty = cat(1000, 2, vec!(\"tabby\".to_string()));\n+  let mut nyan : cat<isize> = cat::<isize>(52, 99, vec![9]);\n+  let mut kitty = cat(1000, 2, vec![\"tabby\".to_string()]);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(vec!(1,2,3));\n+  nyan.speak(vec![1,2,3]);\n   assert_eq!(nyan.meow_count(), 55);\n-  kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n+  kitty.speak(vec![\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()]);\n   assert_eq!(kitty.meow_count(), 1004);\n }"}, {"sha": "c401b529c30d9e54794635931d1d8ae360cc3401", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -41,7 +41,7 @@ fn do_it(x: &[usize]) -> Foo {\n     panic!()\n }\n \n-fn get_bar(x: usize) -> Vec<usize> { vec!(x * 2) }\n+fn get_bar(x: usize) -> Vec<usize> { vec![x * 2] }\n \n pub fn fails() {\n     let x = 2;"}, {"sha": "e86f20694e103f76b9aa70c09aa00f584647deb4", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -19,7 +19,7 @@ fn bip(v: &[usize]) -> Vec<usize> {\n }\n \n pub fn main() {\n-    let mut the_vec = vec!(1, 2, 3, 100);\n+    let mut the_vec = vec![1, 2, 3, 100];\n     assert_eq!(the_vec.clone(), bar(&mut the_vec));\n     assert_eq!(the_vec.clone(), bip(&the_vec));\n }"}, {"sha": "ca4ee4a97d524756615bb581d1409cf96c87f527", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -21,7 +21,7 @@ fn bar(v: &mut [usize]) {\n }\n \n pub fn main() {\n-    let mut the_vec = vec!(1, 2, 3, 100);\n+    let mut the_vec = vec![1, 2, 3, 100];\n     bar(&mut the_vec);\n     assert_eq!(the_vec, [100, 3, 2, 1]);\n }"}, {"sha": "f35735adbcfe2ca194e81484bf3d7882bdb8bd35", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,7 +17,7 @@ fn bar(v: &mut [usize]) {\n }\n \n pub fn main() {\n-    let mut the_vec = vec!(1, 2, 3, 100);\n+    let mut the_vec = vec![1, 2, 3, 100];\n     bar(&mut the_vec);\n     assert_eq!(the_vec, [100, 3, 2, 1]);\n }"}, {"sha": "adc3e3efd70dfcc0ed8aa04b6318be4267e70f3c", "filename": "src/test/run-pass/deriving-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -19,6 +19,6 @@ macro_rules! define_vec {\n     )\n }\n \n-define_vec!();\n+define_vec![];\n \n pub fn main() {}"}, {"sha": "53005ea5291fd471fa4e720bb0690089756062e8", "filename": "src/test/run-pass/drop-with-type-ascription-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -12,7 +12,7 @@\n #![feature(collections)]\n \n fn main() {\n-    let args = vec!(\"foobie\", \"asdf::asdf\");\n+    let args = vec![\"foobie\", \"asdf::asdf\"];\n     let arr: Vec<&str> = args[1].split(\"::\").collect();\n     assert_eq!(arr[0], \"asdf\");\n     assert_eq!(arr[0], \"asdf\");"}, {"sha": "cc9a2e60decee4f7c9601adc3c6b5e4ef96d5ce6", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -16,7 +16,7 @@ fn test_int() {\n }\n \n fn test_vec() {\n-    fn f() -> Vec<isize> { vec!(10, 11) }\n+    fn f() -> Vec<isize> { vec![10, 11] }\n     let vect = f();\n     assert_eq!(vect[1], 11);\n }"}, {"sha": "1a6466048d90d80810aaf78888e3bffc0c777af6", "filename": "src/test/run-pass/expr-match-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -16,7 +16,7 @@ fn test_simple() {\n }\n \n fn test_box() {\n-    let r = match true { true => { vec!(10) } false => { panic!() } };\n+    let r = match true { true => { vec![10] } false => { panic!() } };\n     assert_eq!(r[0], 10);\n }\n "}, {"sha": "ba78ff4d53937f0070cd6185778331e860e7c09d", "filename": "src/test/run-pass/for-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-destruct.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -12,7 +12,7 @@\n struct Pair { x: isize, y: isize }\n \n pub fn main() {\n-    for elt in &(vec!(Pair {x: 10, y: 20}, Pair {x: 30, y: 0})) {\n+    for elt in &(vec![Pair {x: 10, y: 20}, Pair {x: 30, y: 0}]) {\n         assert_eq!(elt.x + elt.y, 30);\n     }\n }"}, {"sha": "2c4d0cc7648ceeaf81226a2342f1baa8ccd75182", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,7 +13,7 @@\n fn two<F>(mut it: F) where F: FnMut(isize) { it(0); it(1); }\n \n pub fn main() {\n-    let mut a: Vec<isize> = vec!(-1, -1, -1, -1);\n+    let mut a: Vec<isize> = vec![-1, -1, -1, -1];\n     let mut p: isize = 0;\n     two(|i| {\n         two(|j| { a[p as usize] = 10 * i + j; p += 1; })"}, {"sha": "d439c623801854cbe15c5da6ab7a073b7acfb5af", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -10,4 +10,4 @@\n \n enum wrapper<T> { wrapped(T), }\n \n-pub fn main() { let _w = wrapper::wrapped(vec!(1, 2, 3, 4, 5)); }\n+pub fn main() { let _w = wrapper::wrapped(vec![1, 2, 3, 4, 5]); }"}, {"sha": "ad501ec7e9ba115221a7d73efedad8c6ec00cbbb", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -25,5 +25,5 @@ impl<T> vec_utils<T> for Vec<T> {\n }\n \n pub fn main() {\n-    assert_eq!(vec_utils::map_(&vec!(1,2,3), |&x| x+1), [2,3,4]);\n+    assert_eq!(vec_utils::map_(&vec![1,2,3], |&x| x+1), [2,3,4]);\n }"}, {"sha": "90726c21fac472db923f21dfc92c42f93ad175e9", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,7 +17,7 @@ use getopts::{optopt, getopts};\n \n pub fn main() {\n     let args = Vec::new();\n-    let opts = vec!(optopt(\"b\", \"\", \"something\", \"SMTHNG\"));\n+    let opts = vec![optopt(\"b\", \"\", \"something\", \"SMTHNG\")];\n \n     match getopts(&args, &opts) {\n         Ok(ref m)  =>"}, {"sha": "2306fa9afa2ef419d98d7664276dc2ef6f2faa65", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -99,5 +99,5 @@ mod map_reduce {\n \n pub fn main() {\n     map_reduce::map_reduce(\n-        vec!(\"../src/test/run-pass/hashmap-memory.rs\".to_string()));\n+        vec![\"../src/test/run-pass/hashmap-memory.rs\".to_string()]);\n }"}, {"sha": "1e1fde4d1e2be75c8db4970620d7a76c6d36979b", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -40,7 +40,7 @@ macro_rules! parse_node {\n         parse_node!(\n             [$(: $tags ($(:$tag_nodes),*))*];\n             [$(:$head_nodes,)* :tag(stringify!($head).to_string(),\n-                                    vec!($($nodes),*))];\n+                                    vec![$($nodes),*])];\n             $($rest)*\n         )\n     );"}, {"sha": "2a7a593d26800fd322d77a2ede4ba29960089d44", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -237,7 +237,7 @@ fn test_write() {\n // can do with them just yet (to test the output)\n fn test_print() {\n     print!(\"hi\");\n-    print!(\"{:?}\", vec!(0u8));\n+    print!(\"{:?}\", vec![0u8]);\n     println!(\"hello\");\n     println!(\"this is a {}\", \"test\");\n     println!(\"{foo}\", foo=\"bar\");"}, {"sha": "13e8fe0e964c43d2854c4e1e16be8ac3733a3314", "filename": "src/test/run-pass/issue-13204.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13204.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -28,6 +28,6 @@ impl Foo for Baz {\n \n fn main() {\n     let x = Baz;\n-    let y = vec!((), (), ());\n+    let y = vec![(), (), ()];\n     assert_eq!(x.bar(y.iter()), 3);\n }"}, {"sha": "8a628b73c0067899499dee6e10774b52d044c205", "filename": "src/test/run-pass/issue-14936.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14936.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -24,7 +24,7 @@ macro_rules! demo {\n             let mut x: isize = 0;\n             let y: isize = 1;\n \n-            let mut history: History = vec!();\n+            let mut history: History = vec![];\n             unsafe {\n                 asm!(\"mov ($1), $0\"\n                      : $output_constraint (*wrap(&mut x, \"out\", &mut history))"}, {"sha": "14e003788469860bee538052bca30a52c53cc016", "filename": "src/test/run-pass/issue-15080.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,7 +14,7 @@\n fn main() {\n     let mut x: &[_] = &[1, 2, 3, 4];\n \n-    let mut result = vec!();\n+    let mut result = vec![];\n     loop {\n         x = match *x {\n             [1, n, 3, ref rest..] => {"}, {"sha": "54b96d66307493bd06965f0d86f4b74eb81436f6", "filename": "src/test/run-pass/issue-15189.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-15189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-15189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15189.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,7 +13,7 @@ macro_rules! third {\n }\n \n fn main() {\n-    let x = vec!(10_usize,11_usize,12_usize,13_usize);\n+    let x = vec![10_usize,11_usize,12_usize,13_usize];\n     let t = third!(x);\n     assert_eq!(t,12_usize);\n }"}, {"sha": "daf14b4c2ffc4e0c33ba335c092ef7c3d869e4f7", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -54,7 +54,7 @@ impl<T, M: Index<(usize, usize), Output=T>> Index<usize> for Row<M> {\n }\n \n fn main() {\n-    let m = Mat::new(vec!(1, 2, 3, 4, 5, 6), 3);\n+    let m = Mat::new(vec![1, 2, 3, 4, 5, 6], 3);\n     let r = m.row(1);\n \n     assert_eq!(r.index(2), &6);"}, {"sha": "913b07613e0308094ef61b4ee012c6d53d774881", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -19,7 +19,7 @@ use std::collections::HashMap;\n use std::rc::Rc;\n \n pub fn main() {\n-  let v = vec!(Rc::new(\"hi\".to_string()));\n+  let v = vec![Rc::new(\"hi\".to_string())];\n   let mut m: req::header_map = HashMap::new();\n   m.insert(\"METHOD\".to_string(), Rc::new(RefCell::new(v)));\n   request::<isize>(&m);"}, {"sha": "a6ba957a1b110069f084edd38815fa3458220045", "filename": "src/test/run-pass/issue-2723-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,6 +15,6 @@ use issue_2723_a::f;\n \n pub fn main() {\n     unsafe {\n-        f(vec!(2));\n+        f(vec![2]);\n     }\n }"}, {"sha": "992fbdce268988bafc0625cec7d4540ecf07752c", "filename": "src/test/run-pass/issue-28936.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-28936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-28936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28936.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -23,7 +23,7 @@ pub fn parse_stream<T: Iterator<Item=i32>, U, F>(\n     where F: Fn(&mut StreamParser<T>) -> U { panic!(); }\n \n pub fn thing(session: &mut Session) {\n-    let mut stream = vec!(1, 2, 3).into_iter();\n+    let mut stream = vec![1, 2, 3].into_iter();\n \n     let _b = parse_stream(session,\n                           stream.by_ref(),"}, {"sha": "a4342f33402d323e92c6bae38d10a16eafab7a55", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -32,8 +32,8 @@ fn to_bools(bitv: Storage) -> Vec<bool> {\n struct Storage { storage: Vec<u64> }\n \n pub fn main() {\n-    let bools = vec!(false, false, true, false, false, true, true, false);\n-    let bools2 = to_bools(Storage{storage: vec!(0b01100100)});\n+    let bools = vec![false, false, true, false, false, true, true, false];\n+    let bools2 = to_bools(Storage{storage: vec![0b01100100]});\n \n     for i in 0..8 {\n         println!(\"{} => {} vs {}\", i, bools[i], bools2[i]);"}, {"sha": "70e3484a0c57aa2c4f65fede7f2cf596aff8f14f", "filename": "src/test/run-pass/issue-3389.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3389.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -25,8 +25,8 @@ pub fn main() {\n         content: Vec::new(),\n         children: Vec::new()\n     };\n-    let v = vec!(\"123\".to_string(), \"abc\".to_string());\n-    node.content = vec!(\"123\".to_string(), \"abc\".to_string());\n+    let v = vec![\"123\".to_string(), \"abc\".to_string()];\n+    node.content = vec![\"123\".to_string(), \"abc\".to_string()];\n     print_str_vector(v);\n     print_str_vector(node.content.clone());\n "}, {"sha": "1b16418ac425961c0f9798e0ec96c5fc9163861b", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n \n \n fn swap<F>(f: F) -> Vec<isize> where F: FnOnce(Vec<isize>) -> Vec<isize> {\n-    let x = vec!(1, 2, 3);\n+    let x = vec![1, 2, 3];\n     f(x)\n }\n "}, {"sha": "e3b42e60645a31f583b1e41b009ac3dc4a6ae5e2", "filename": "src/test/run-pass/ivec-pass-by-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn f(_a: Vec<isize> ) { }\n-pub fn main() { f(vec!(1, 2, 3, 4, 5)); }\n+pub fn main() { f(vec![1, 2, 3, 4, 5]); }"}, {"sha": "a511db8e9397dc718a9aa55934f0c088a642b29b", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,8 +17,8 @@ use std::sync::mpsc::{channel, Sender};\n \n fn producer(tx: &Sender<Vec<u8>>) {\n     tx.send(\n-         vec!(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n-          13)).unwrap();\n+         vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n+          13]).unwrap();\n }\n \n pub fn main() {"}, {"sha": "5109c6fc77726d31ee0d620dfacaced9a300d7fd", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,7 +15,7 @@\n struct Refs { refs: Vec<isize> , n: isize }\n \n pub fn main() {\n-    let mut e = Refs{refs: vec!(), n: 0};\n+    let mut e = Refs{refs: vec![], n: 0};\n     let _f = || println!(\"{}\", e.n);\n     let x: &[isize] = &e.refs;\n     assert_eq!(x.len(), 0);"}, {"sha": "fc6d435b034be5aeb3563ad0562fe0f40d160ec2", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = vec!(1, 2, 3);\n+    let x = vec![1, 2, 3];\n     let mut y = 0;\n     for i in &x { println!(\"{}\", *i); y += *i; }\n     println!(\"{}\", y);"}, {"sha": "b54b4692a41bf9362bf08bf69d6b4750513a7392", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -17,5 +17,5 @@ pub fn main() {\n     println!(\"{:?}\", 1);\n     println!(\"{:?}\", 2.0f64);\n     println!(\"{:?}\", Numbers::Three);\n-    println!(\"{:?}\", vec!(4));\n+    println!(\"{:?}\", vec![4]);\n }"}, {"sha": "6916bfb8c616a90c53353f827bc1f9e5ca8731e3", "filename": "src/test/run-pass/loop-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Floop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Floop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-scope.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -10,7 +10,7 @@\n \n \n pub fn main() {\n-    let x = vec!(10, 20, 30);\n+    let x = vec![10, 20, 30];\n     let mut sum = 0;\n     for x in &x { sum += *x; }\n     assert_eq!(sum, 60);"}, {"sha": "3d221927b96e18d7b83bb87c6f559f8d74708708", "filename": "src/test/run-pass/match-vec-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,7 +13,7 @@\n \n \n pub fn main() {\n-    match vec!(1, 2, 3) {\n+    match vec![1, 2, 3] {\n         x => {\n             assert_eq!(x.len(), 3);\n             assert_eq!(x[0], 1);"}, {"sha": "211827f92222ca0ca02f501a9cc28908e3d3b942", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -45,9 +45,9 @@ fn transform(x: Option<isize>) -> Option<String> {\n pub fn main() {\n     assert_eq!(transform(Some(10)), Some(\"11\".to_string()));\n     assert_eq!(transform(None), None);\n-    assert_eq!((vec!(\"hi\".to_string()))\n-        .bind(|x| vec!(x.clone(), format!(\"{}!\", x)) )\n-        .bind(|x| vec!(x.clone(), format!(\"{}?\", x)) ),\n+    assert_eq!((vec![\"hi\".to_string()])\n+        .bind(|x| vec![x.clone(), format!(\"{}!\", x)] )\n+        .bind(|x| vec![x.clone(), format!(\"{}?\", x)] ),\n         [\"hi\".to_string(),\n          \"hi?\".to_string(),\n          \"hi!\".to_string(),"}, {"sha": "0ff5a66adc269c4efc80977afedd111e5b141ef1", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,10 +15,10 @@\n fn test(foo: Box<Vec<isize>> ) { assert_eq!((*foo)[0], 10); }\n \n pub fn main() {\n-    let x = box vec!(10);\n+    let x = box vec![10];\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(box vec!(10));\n+    test(box vec![10]);\n }"}, {"sha": "8de487bc3631ce105dea5f93ec7ced741a72c108", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,10 +15,10 @@\n fn test(foo: Box<Vec<isize>>) { assert_eq!((*foo)[0], 10); }\n \n pub fn main() {\n-    let x = box vec!(10);\n+    let x = box vec![10];\n     // Test forgetting a local by move-in\n     test(x);\n \n     // Test forgetting a temporary by move-in.\n-    test(box vec!(10));\n+    test(box vec![10]);\n }"}, {"sha": "e7da8d7bf93c7b1705f52c286e163b27793a3132", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -24,7 +24,7 @@ fn myvec_elt<X>(mv: myvec<X>) -> X {\n }\n \n pub fn main() {\n-    let mv = myvec(vec!(1, 2, 3));\n+    let mv = myvec(vec![1, 2, 3]);\n     let mv_clone = mv.clone();\n     let mv_clone = myvec_deref(mv_clone);\n     assert_eq!(mv_clone[1], 2);"}, {"sha": "7e8d082a286a8991bfcc9c7b32916b27486875b9", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -76,7 +76,7 @@ pub fn main() {\n     check_type!(&17, &isize);\n     check_type!(box 18, Box<isize>);\n     check_type!(\"foo\".to_string(), String);\n-    check_type!(vec!(20, 22), Vec<isize>);\n+    check_type!(vec![20, 22], Vec<isize>);\n     check_type!(main, fn(), |pthing| {\n         assert_eq!(main as fn(), *pthing as fn())\n     });"}, {"sha": "768f126e4edfe2d1b102c99b6ec8e4d5767c225a", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -32,11 +32,11 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foos: Vec<Box<FooTrait>> = vec!(\n+    let foos: Vec<Box<FooTrait>> = vec![\n         box BarStruct{ x: 0 } as Box<FooTrait>,\n         box BarStruct{ x: 1 } as Box<FooTrait>,\n         box BarStruct{ x: 2 } as Box<FooTrait>\n-    );\n+    ];\n \n     for i in 0..foos.len() {\n         assert_eq!(i, foos[i].foo());"}, {"sha": "e2ca880719a8ecce4efac61b7ed27f13040211d8", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -45,7 +45,7 @@ pub fn main() {\n     (*(*p).borrow_mut()).y += 3;\n     assert_eq!(*(*p).borrow(), Point {x: 3, y: 5});\n \n-    let v = Rc::new(RefCell::new(vec!(1, 2, 3)));\n+    let v = Rc::new(RefCell::new(vec![1, 2, 3]));\n     (*(*v).borrow_mut())[0] = 3;\n     (*(*v).borrow_mut())[1] += 3;\n     assert_eq!(((*(*v).borrow())[0],"}, {"sha": "efa73ad92ce836d14d554cbd1428570590300d5f", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -23,17 +23,17 @@ impl<'a> sum for &'a [isize] {\n fn call_sum(x: &[isize]) -> isize { x.sum_() }\n \n pub fn main() {\n-    let x = vec!(1, 2, 3);\n+    let x = vec![1, 2, 3];\n     let y = call_sum(&x);\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n-    let x = vec!(1, 2, 3);\n+    let x = vec![1, 2, 3];\n     let y = x.sum_();\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n \n-    let x = vec!(1, 2, 3);\n+    let x = vec![1, 2, 3];\n     let y = x.sum_();\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);"}, {"sha": "e61a8d147757ce59c73d5c7c95bf78647d021403", "filename": "src/test/run-pass/regions-borrow-evec-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,11 +15,11 @@ fn foo(x: &[isize]) -> isize {\n }\n \n pub fn main() {\n-    let p = vec!(1,2,3,4,5);\n+    let p = vec![1,2,3,4,5];\n     let r = foo(&p);\n     assert_eq!(r, 1);\n \n-    let p = vec!(5,4,3,2,1);\n+    let p = vec![5,4,3,2,1];\n     let r = foo(&p);\n     assert_eq!(r, 5);\n }"}, {"sha": "e9a3e16438f818feca218f9a7b5ee0542ad985e1", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -90,7 +90,7 @@ fn get_v5_ref(a: &A, _i: usize) -> &isize {\n pub fn main() {\n     let a = A {value: B {v1: 22,\n                          v2: [23, 24, 25],\n-                         v3: vec!(26, 27, 28),\n+                         v3: vec![26, 27, 28],\n                          v4: C { f: 29 },\n                          v5: box C { f: 30 },\n                          v6: Some(C { f: 31 })}};"}, {"sha": "cd140f7aa599b267f34ee054edefc7ccf4012883", "filename": "src/test/run-pass/regions-dependent-autoslice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -18,6 +18,6 @@ fn both<'r>(v: &'r [usize]) -> &'r [usize] {\n }\n \n pub fn main() {\n-    let v = vec!(1,2,3);\n+    let v = vec![1,2,3];\n     both(&v);\n }"}, {"sha": "262e936826e51fd39f78086e4adf6c1eb014b808", "filename": "src/test/run-pass/regions-infer-borrow-scope-view.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,7 +13,7 @@\n fn view<T>(x: &[T]) -> &[T] {x}\n \n pub fn main() {\n-    let v = vec!(1, 2, 3);\n+    let v = vec![1, 2, 3];\n     let x = view(&v);\n     let y = view(x);\n     assert!((v[0] == x[0]) && (v[0] == y[0]));"}, {"sha": "8eee54b3fec6642288d5ab45729949aac0699610", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -63,7 +63,7 @@ impl<'a,'tcx> Foo<'a,'tcx> {\n }\n \n fn main() {\n-    let v = vec!();\n+    let v = vec![];\n     let cx = Ctxt { x: &v };\n     let mut foo = Foo { cx: &cx };\n     assert_eq!(foo.bother(), 22); // just so the code is not dead, basically"}, {"sha": "43612f529772a0a12eedf7a00edfc6d24482637c", "filename": "src/test/run-pass/seq-compare.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fseq-compare.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,13 +14,13 @@ pub fn main() {\n     assert!((\"hello\".to_string() < \"hellr\".to_string()));\n     assert!((\"hello \".to_string() > \"hello\".to_string()));\n     assert!((\"hello\".to_string() != \"there\".to_string()));\n-    assert!((vec!(1, 2, 3, 4) > vec!(1, 2, 3)));\n-    assert!((vec!(1, 2, 3) < vec!(1, 2, 3, 4)));\n-    assert!((vec!(1, 2, 4, 4) > vec!(1, 2, 3, 4)));\n-    assert!((vec!(1, 2, 3, 4) < vec!(1, 2, 4, 4)));\n-    assert!((vec!(1, 2, 3) <= vec!(1, 2, 3)));\n-    assert!((vec!(1, 2, 3) <= vec!(1, 2, 3, 3)));\n-    assert!((vec!(1, 2, 3, 4) > vec!(1, 2, 3)));\n-    assert_eq!(vec!(1, 2, 3), vec!(1, 2, 3));\n-    assert!((vec!(1, 2, 3) != vec!(1, 1, 3)));\n+    assert!((vec![1, 2, 3, 4] > vec![1, 2, 3]));\n+    assert!((vec![1, 2, 3] < vec![1, 2, 3, 4]));\n+    assert!((vec![1, 2, 4, 4] > vec![1, 2, 3, 4]));\n+    assert!((vec![1, 2, 3, 4] < vec![1, 2, 4, 4]));\n+    assert!((vec![1, 2, 3] <= vec![1, 2, 3]));\n+    assert!((vec![1, 2, 3] <= vec![1, 2, 3, 3]));\n+    assert!((vec![1, 2, 3, 4] > vec![1, 2, 3]));\n+    assert_eq!(vec![1, 2, 3], vec![1, 2, 3]);\n+    assert!((vec![1, 2, 3] != vec![1, 1, 3]));\n }"}, {"sha": "13d55e0172e71f41f80c2ee28d46106927af0711", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -22,6 +22,6 @@ fn uhoh<T>(v: Vec<clam<T>> ) {\n }\n \n pub fn main() {\n-    let v: Vec<clam<isize>> = vec!(clam::b::<isize>, clam::b::<isize>, clam::a::<isize>(42, 17));\n+    let v: Vec<clam<isize>> = vec![clam::b::<isize>, clam::b::<isize>, clam::a::<isize>(42, 17)];\n     uhoh::<isize>(v);\n }"}, {"sha": "89fd83ced4c8c3ed4519cbfc5dd914b676897b39", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -62,10 +62,10 @@ pub fn main() {\n     assert_eq!(10_usize.plus(), 30);\n     assert_eq!((\"hi\".to_string()).plus(), 200);\n \n-    assert_eq!((vec!(1)).length_().str(), \"1\".to_string());\n-    let vect = vec!(3, 4).map_(|a| *a + 4);\n+    assert_eq!((vec![1]).length_().str(), \"1\".to_string());\n+    let vect = vec![3, 4].map_(|a| *a + 4);\n     assert_eq!(vect[0], 7);\n-    let vect = (vec!(3, 4)).map_::<usize, _>(|a| *a as usize + 4_usize);\n+    let vect = (vec![3, 4]).map_::<usize, _>(|a| *a as usize + 4_usize);\n     assert_eq!(vect[0], 7_usize);\n     let mut x = 0_usize;\n     10_usize.multi(|_n| x += 2_usize );"}, {"sha": "4601b7d7cf56791ce1931ba983ea17d6192dc6bd", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -12,7 +12,7 @@\n use std::mem::swap;\n \n pub fn main() {\n-    let mut a: Vec<isize> = vec!(0, 1, 2, 3, 4, 5, 6);\n+    let mut a: Vec<isize> = vec![0, 1, 2, 3, 4, 5, 6];\n     a.swap(2, 4);\n     assert_eq!(a[2], 4);\n     assert_eq!(a[4], 2);"}, {"sha": "0caf21ead3969b80e47d7f8105834ef85f01bf8e", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -27,7 +27,7 @@ fn test_rec() {\n \n fn test_vec() {\n     let (tx, rx) = channel();\n-    let v0: Vec<isize> = vec!(0, 1, 2);\n+    let v0: Vec<isize> = vec![0, 1, 2];\n     tx.send(v0).unwrap();\n     let v1 = rx.recv().unwrap();\n     assert_eq!(v1[0], 0);"}, {"sha": "9877dffe9df02f7cec3ee450fd2f4a68f3e37d7f", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -75,10 +75,10 @@ pub fn main() {\n         swim_speed: 998,\n         name: \"alec_guinness\".to_string(),\n     };\n-    let arc = Arc::new(vec!(box catte  as Box<Pet+Sync+Send>,\n+    let arc = Arc::new(vec![box catte  as Box<Pet+Sync+Send>,\n                             box dogge1 as Box<Pet+Sync+Send>,\n                             box fishe  as Box<Pet+Sync+Send>,\n-                            box dogge2 as Box<Pet+Sync+Send>));\n+                            box dogge2 as Box<Pet+Sync+Send>]);\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n     let t1 = thread::spawn(move|| { check_legs(arc1); tx1.send(()); });"}, {"sha": "eadda5dfe299ccc885dd36102d808aabdee84801", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -45,9 +45,9 @@ fn bar<U:to_str,T:map<U>>(x: T) -> Vec<String> {\n }\n \n pub fn main() {\n-    assert_eq!(foo(vec!(1)), [\"hi\".to_string()]);\n-    assert_eq!(bar::<isize, Vec<isize> >(vec!(4, 5)), [\"4\".to_string(), \"5\".to_string()]);\n-    assert_eq!(bar::<String, Vec<String> >(vec!(\"x\".to_string(), \"y\".to_string())),\n+    assert_eq!(foo(vec![1]), [\"hi\".to_string()]);\n+    assert_eq!(bar::<isize, Vec<isize> >(vec![4, 5]), [\"4\".to_string(), \"5\".to_string()]);\n+    assert_eq!(bar::<String, Vec<String> >(vec![\"x\".to_string(), \"y\".to_string()]),\n                [\"x\".to_string(), \"y\".to_string()]);\n-    assert_eq!(bar::<(), Vec<()>>(vec!(())), [\"()\".to_string()]);\n+    assert_eq!(bar::<(), Vec<()>>(vec![()]), [\"()\".to_string()]);\n }"}, {"sha": "9671e31d7e48c0107b3a16a592b10a8b36b3a3ef", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -30,15 +30,15 @@ impl<T:to_str> to_str for Vec<T> {\n \n pub fn main() {\n     assert_eq!(1.to_string_(), \"1\".to_string());\n-    assert_eq!((vec!(2, 3, 4)).to_string_(), \"[2, 3, 4]\".to_string());\n+    assert_eq!((vec![2, 3, 4]).to_string_(), \"[2, 3, 4]\".to_string());\n \n     fn indirect<T:to_str>(x: T) -> String {\n         format!(\"{}!\", x.to_string_())\n     }\n-    assert_eq!(indirect(vec!(10, 20)), \"[10, 20]!\".to_string());\n+    assert_eq!(indirect(vec![10, 20]), \"[10, 20]!\".to_string());\n \n     fn indirect2<T:to_str>(x: T) -> String {\n         indirect(x)\n     }\n-    assert_eq!(indirect2(vec!(1)), \"[1]!\".to_string());\n+    assert_eq!(indirect2(vec![1]), \"[1]!\".to_string());\n }"}, {"sha": "300a0ee63f817c67fd3717ecd044ee8f7b88b9cb", "filename": "src/test/run-pass/unboxed-closures-counter-not-moved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,7 +15,7 @@ fn call<F>(f: F) where F : FnOnce() {\n }\n \n fn main() {\n-    let y = vec!(format!(\"Hello\"), format!(\"World\"));\n+    let y = vec![format!(\"Hello\"), format!(\"World\")];\n     let mut counter = 22_u32;\n \n     call(|| {"}, {"sha": "b9a16535c420a9e82c322bbe663dec0991ca8c4a", "filename": "src/test/run-pass/unboxed-closures-move-some-upvars-in-by-ref-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -16,8 +16,8 @@ fn call<F>(f: F) where F : FnOnce() {\n }\n \n fn main() {\n-    let mut x = vec!(format!(\"Hello\"));\n-    let y = vec!(format!(\"World\"));\n+    let mut x = vec![format!(\"Hello\")];\n+    let y = vec![format!(\"World\")];\n     call(|| {\n         // Here: `x` must be captured with a mutable reference in\n         // order for us to append on it, and `y` must be captured by"}, {"sha": "1ef61008b3c2b056d88b3b07c45fbdf48678c222", "filename": "src/test/run-pass/unique-autoderef-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,6 +13,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i: Box<_> = box vec!(100);\n+    let i: Box<_> = box vec![100];\n     assert_eq!((*i)[0], 100);\n }"}, {"sha": "6d638bbf562c7cfcdbc7501d03428c276057886e", "filename": "src/test/run-pass/unique-create.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-create.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -18,5 +18,5 @@ pub fn main() {\n }\n \n fn vec() {\n-    vec!(0);\n+    vec![0];\n }"}, {"sha": "1910d51bd0bcbfe4bbffe7f9d60fd89713a1679d", "filename": "src/test/run-pass/unique-drop-complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -14,5 +14,5 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _x: Box<_> = box vec!(0,0,0,0,0);\n+    let _x: Box<_> = box vec![0,0,0,0,0];\n }"}, {"sha": "ece206caa02e51cf26e2549f0ccd418090d1b71e", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut a: Vec<Box<_>> = vec!(box 10);\n+    let mut a: Vec<Box<_>> = vec![box 10];\n     let b = a.clone();\n \n     assert_eq!(*a[0], 10);"}, {"sha": "bd965d41eea2c946708a79e660886fb9eb8e939b", "filename": "src/test/run-pass/unique-in-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -13,6 +13,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let vect : Vec<Box<_>> = vec!(box 100);\n+    let vect : Vec<Box<_>> = vec![box 100];\n     assert_eq!(vect[0], box 100);\n }"}, {"sha": "0a984429fabbf92ab1841d62f08b1952ba07c82a", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -15,7 +15,7 @@ use std::str;\n \n pub fn main() {\n     // Chars of 1, 2, 3, and 4 bytes\n-    let chs: Vec<char> = vec!('e', '\u00e9', '\u20ac', '\\u{10000}');\n+    let chs: Vec<char> = vec!['e', '\u00e9', '\u20ac', '\\u{10000}'];\n     let s: String = chs.iter().cloned().collect();\n     let schs: Vec<char> = s.chars().collect();\n "}, {"sha": "8ba8df57e542c59a09eb887bf221f14c6b9a1d30", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,8 +11,8 @@\n use std::vec;\n \n pub fn main() {\n-    let a: Vec<isize> = vec!(1, 2, 3, 4, 5);\n-    let b: Vec<isize> = vec!(6, 7, 8, 9, 0);\n+    let a: Vec<isize> = vec![1, 2, 3, 4, 5];\n+    let b: Vec<isize> = vec![6, 7, 8, 9, 0];\n     let mut v: Vec<isize> = a;\n     v.extend_from_slice(&b);\n     println!(\"{}\", v[9]);"}, {"sha": "5bf6a457df9b3f9578a3196286374cae2bd52d4b", "filename": "src/test/run-pass/vec-growth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-growth.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n \n \n pub fn main() {\n-    let mut v = vec!(1);\n+    let mut v = vec![1];\n     v.push(2);\n     v.push(3);\n     v.push(4);"}, {"sha": "420f6a429f1f85da203816cd118dc3e3de102adc", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,6 +11,6 @@\n \n pub fn main() {\n     let mut later: Vec<isize> ;\n-    if true { later = vec!(1); } else { later = vec!(2); }\n+    if true { later = vec![1]; } else { later = vec![2]; }\n     println!(\"{}\", later[0]);\n }"}, {"sha": "135ecb474984594a8d44219f86c074865c5baa3d", "filename": "src/test/run-pass/vec-macro-with-trailing-comma.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-macro-with-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-macro-with-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-with-trailing-comma.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,6 +11,6 @@\n \n \n pub fn main() {\n-    assert_eq!(vec!(1), vec!(1,));\n-    assert_eq!(vec!(1, 2, 3), vec!(1, 2, 3,));\n+    assert_eq!(vec![1], vec![1,]);\n+    assert_eq!(vec![1, 2, 3], vec![1, 2, 3,]);\n }"}, {"sha": "14a52cc4b5c55bbcc35aa870296a3b6ac21a15a3", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() { let mut v = vec!(1, 2, 3); v.push(1); }\n+pub fn main() { let mut v = vec![1, 2, 3]; v.push(1); }"}, {"sha": "1fed6a0be486c6786b085119a9ea9a9ae82cb9a2", "filename": "src/test/run-pass/vec-to_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-to_str.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -10,9 +10,9 @@\n \n \n pub fn main() {\n-    assert_eq!(format!(\"{:?}\", vec!(0, 1)), \"[0, 1]\".to_string());\n+    assert_eq!(format!(\"{:?}\", vec![0, 1]), \"[0, 1]\".to_string());\n \n-    let foo = vec!(3, 4);\n+    let foo = vec![3, 4];\n     let bar: &[isize] = &[4, 5];\n \n     assert_eq!(format!(\"{:?}\", foo), \"[3, 4]\");"}, {"sha": "9cacb9db20ea9ab2274f793d89d282e725576d24", "filename": "src/test/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -11,7 +11,7 @@\n \n \n pub fn main() {\n-    let v: Vec<isize> = vec!(10, 20);\n+    let v: Vec<isize> = vec![10, 20];\n     assert_eq!(v[0], 10);\n     assert_eq!(v[1], 20);\n     let mut x: usize = 0;"}, {"sha": "4c599e9c4289860b653e0df2aa5a706714021b59", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n         i = i + 1;\n         if i == 95 {\n             let _v: Vec<isize> =\n-                vec!(1, 2, 3, 4, 5); // we check that it is freed by break\n+                vec![1, 2, 3, 4, 5]; // we check that it is freed by break\n \n             println!(\"breaking\");\n             break;"}, {"sha": "2dc7cdbf935025c1b9e592c00f051e1ed86db958", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -73,7 +73,7 @@ fn main() {\n pub fn parse_config(args: Vec<String> ) -> Config {\n \n     let groups : Vec<getopts::OptGroup> =\n-        vec!(reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n+        vec![reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n           reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n           reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n           reqopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\"),\n@@ -111,7 +111,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\"),\n           reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\"),\n           optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\"),\n-          optflag(\"h\", \"help\", \"show this message\"));\n+          optflag(\"h\", \"help\", \"show this message\")];\n \n     let (argv0, args_) = args.split_first().unwrap();\n     if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {"}, {"sha": "03c05f919b79e95454c189b726c10ae7370ec2c7", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -253,7 +253,7 @@ impl<'test> TestCx<'test> {\n \n         let mut src = String::new();\n         File::open(&self.testpaths.file).unwrap().read_to_string(&mut src).unwrap();\n-        let mut srcs = vec!(src);\n+        let mut srcs = vec![src];\n \n         let mut round = 0;\n         while round < rounds {\n@@ -335,13 +335,13 @@ impl<'test> TestCx<'test> {\n                     -> ProcArgs {\n         let aux_dir = self.aux_output_dir_name();\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut args = vec!(\"-\".to_owned(),\n+        let mut args = vec![\"-\".to_owned(),\n                             \"-Zunstable-options\".to_owned(),\n                             \"--unpretty\".to_owned(),\n                             pretty_type,\n                             format!(\"--target={}\", self.config.target),\n                             \"-L\".to_owned(),\n-                            aux_dir.to_str().unwrap().to_owned());\n+                            aux_dir.to_str().unwrap().to_owned()];\n         args.extend(self.split_maybe_args(&self.config.target_rustcflags));\n         args.extend(self.props.compile_flags.iter().cloned());\n         return ProcArgs {\n@@ -388,15 +388,15 @@ actual:\\n\\\n         self.create_dir_racy(&out_dir);\n \n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut args = vec!(\"-\".to_owned(),\n+        let mut args = vec![\"-\".to_owned(),\n                             \"-Zno-trans\".to_owned(),\n                             \"--out-dir\".to_owned(),\n                             out_dir.to_str().unwrap().to_owned(),\n                             format!(\"--target={}\", target),\n                             \"-L\".to_owned(),\n                             self.config.build_base.to_str().unwrap().to_owned(),\n                             \"-L\".to_owned(),\n-                            aux_dir.to_str().unwrap().to_owned());\n+                            aux_dir.to_str().unwrap().to_owned()];\n         if let Some(revision) = self.revision {\n             args.extend(vec![\n                 format!(\"--cfg\"),\n@@ -487,7 +487,7 @@ actual:\\n\\\n                                  exe_file.to_str().unwrap().to_owned(),\n                                  self.config.adb_test_dir.clone()\n                              ],\n-                             vec!((\"\".to_owned(), \"\".to_owned())),\n+                             vec![(\"\".to_owned(), \"\".to_owned())],\n                              Some(\"\".to_owned()))\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -499,7 +499,7 @@ actual:\\n\\\n                                  \"tcp:5039\".to_owned(),\n                                  \"tcp:5039\".to_owned()\n                              ],\n-                             vec!((\"\".to_owned(), \"\".to_owned())),\n+                             vec![(\"\".to_owned(), \"\".to_owned())],\n                              Some(\"\".to_owned()))\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -520,8 +520,8 @@ actual:\\n\\\n                                                               \"shell\".to_owned(),\n                                                               adb_arg.clone()\n                                                           ],\n-                                                          vec!((\"\".to_owned(),\n-                                                                \"\".to_owned())),\n+                                                          vec![(\"\".to_owned(),\n+                                                                \"\".to_owned())],\n                                                           Some(\"\".to_owned()))\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n                 loop {\n@@ -535,10 +535,10 @@ actual:\\n\\\n                 let debugger_script = self.make_out_name(\"debugger.script\");\n                 // FIXME (#9639): This needs to handle non-utf8 paths\n                 let debugger_opts =\n-                    vec!(\"-quiet\".to_owned(),\n+                    vec![\"-quiet\".to_owned(),\n                          \"-batch\".to_owned(),\n                          \"-nx\".to_owned(),\n-                         format!(\"-command={}\", debugger_script.to_str().unwrap()));\n+                         format!(\"-command={}\", debugger_script.to_str().unwrap())];\n \n                 let mut gdb_path = tool_path;\n                 gdb_path.push_str(&format!(\"/bin/{}-gdb\", self.config.target));\n@@ -550,7 +550,7 @@ actual:\\n\\\n                                  &gdb_path,\n                                  None,\n                                  &debugger_opts,\n-                                 vec!((\"\".to_owned(), \"\".to_owned())),\n+                                 vec![(\"\".to_owned(), \"\".to_owned())],\n                                  None)\n                     .expect(&format!(\"failed to exec `{:?}`\", gdb_path));\n                 let cmdline = {\n@@ -642,10 +642,10 @@ actual:\\n\\\n \n                 // FIXME (#9639): This needs to handle non-utf8 paths\n                 let debugger_opts =\n-                    vec!(\"-quiet\".to_owned(),\n+                    vec![\"-quiet\".to_owned(),\n                          \"-batch\".to_owned(),\n                          \"-nx\".to_owned(),\n-                         format!(\"-command={}\", debugger_script.to_str().unwrap()));\n+                         format!(\"-command={}\", debugger_script.to_str().unwrap())];\n \n                 let proc_args = ProcArgs {\n                     prog: debugger().to_owned(),\n@@ -830,9 +830,9 @@ actual:\\n\\\n         let command_directive = format!(\"{}-command\", debugger_prefix);\n         let check_directive = format!(\"{}-check\", debugger_prefix);\n \n-        let mut breakpoint_lines = vec!();\n-        let mut commands = vec!();\n-        let mut check_lines = vec!();\n+        let mut breakpoint_lines = vec![];\n+        let mut commands = vec![];\n+        let mut check_lines = vec![];\n         let mut counter = 1;\n         let reader = BufReader::new(File::open(&self.testpaths.file).unwrap());\n         for line in reader.lines() {\n@@ -1120,8 +1120,8 @@ actual:\\n\\\n     fn compile_test(&self) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        let link_args = vec!(\"-L\".to_owned(),\n-                             aux_dir.to_str().unwrap().to_owned());\n+        let link_args = vec![\"-L\".to_owned(),\n+                             aux_dir.to_str().unwrap().to_owned()];\n         let args = self.make_compile_args(link_args,\n                                           &self.testpaths.file,\n                                           TargetLocation::ThisFile(self.make_exe_name()));\n@@ -1231,9 +1231,9 @@ actual:\\n\\\n                 if (self.config.target.contains(\"musl\") && !aux_props.force_host) ||\n                     self.config.target.contains(\"emscripten\")\n                 {\n-                    vec!(\"--crate-type=lib\".to_owned())\n+                    vec![\"--crate-type=lib\".to_owned()]\n                 } else {\n-                    vec!(\"--crate-type=dylib\".to_owned())\n+                    vec![\"--crate-type=dylib\".to_owned()]\n                 }\n             };\n             crate_type.extend(extra_link_args.clone());\n@@ -1315,10 +1315,10 @@ actual:\\n\\\n         };\n \n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut args = vec!(input_file.to_str().unwrap().to_owned(),\n+        let mut args = vec![input_file.to_str().unwrap().to_owned(),\n                             \"-L\".to_owned(),\n                             self.config.build_base.to_str().unwrap().to_owned(),\n-                            format!(\"--target={}\", target));\n+                            format!(\"--target={}\", target)];\n \n         if let Some(revision) = self.revision {\n             args.extend(vec![\n@@ -1613,7 +1613,7 @@ actual:\\n\\\n                                            args.prog.clone(),\n                                            self.config.adb_test_dir.clone()\n                                        ],\n-                                       vec!((\"\".to_owned(), \"\".to_owned())),\n+                                       vec![(\"\".to_owned(), \"\".to_owned())],\n                                        Some(\"\".to_owned()))\n             .expect(&format!(\"failed to exec `{}`\", self.config.adb_path));\n \n@@ -1645,7 +1645,7 @@ actual:\\n\\\n                      &self.config.adb_path,\n                      None,\n                      &runargs,\n-                     vec!((\"\".to_owned(), \"\".to_owned())), Some(\"\".to_owned()))\n+                     vec![(\"\".to_owned(), \"\".to_owned())], Some(\"\".to_owned()))\n             .expect(&format!(\"failed to exec `{}`\", self.config.adb_path));\n \n         // get exitcode of result\n@@ -1659,7 +1659,7 @@ actual:\\n\\\n                          &self.config.adb_path,\n                          None,\n                          &runargs,\n-                         vec!((\"\".to_owned(), \"\".to_owned())),\n+                         vec![(\"\".to_owned(), \"\".to_owned())],\n                          Some(\"\".to_owned()))\n             .expect(&format!(\"failed to exec `{}`\", self.config.adb_path));\n \n@@ -1683,7 +1683,7 @@ actual:\\n\\\n                          &self.config.adb_path,\n                          None,\n                          &runargs,\n-                         vec!((\"\".to_owned(), \"\".to_owned())),\n+                         vec![(\"\".to_owned(), \"\".to_owned())],\n                          Some(\"\".to_owned()))\n             .expect(&format!(\"failed to exec `{}`\", self.config.adb_path));\n \n@@ -1698,7 +1698,7 @@ actual:\\n\\\n                          &self.config.adb_path,\n                          None,\n                          &runargs,\n-                         vec!((\"\".to_owned(), \"\".to_owned())),\n+                         vec![(\"\".to_owned(), \"\".to_owned())],\n                          Some(\"\".to_owned()))\n             .expect(&format!(\"failed to exec `{}`\", self.config.adb_path));\n \n@@ -1730,8 +1730,8 @@ actual:\\n\\\n                                                        .to_owned(),\n                                                    self.config.adb_test_dir.to_owned(),\n                                                ],\n-                                               vec!((\"\".to_owned(),\n-                                                     \"\".to_owned())),\n+                                               vec![(\"\".to_owned(),\n+                                                     \"\".to_owned())],\n                                                Some(\"\".to_owned()))\n                     .expect(&format!(\"failed to exec `{}`\", self.config.adb_path));\n \n@@ -1749,9 +1749,9 @@ actual:\\n\\\n     fn compile_test_and_save_ir(&self) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut link_args = vec!(\"-L\".to_owned(),\n-                                 aux_dir.to_str().unwrap().to_owned());\n-        let llvm_args = vec!(\"--emit=llvm-ir\".to_owned(),);\n+        let mut link_args = vec![\"-L\".to_owned(),\n+                                 aux_dir.to_str().unwrap().to_owned()];\n+        let llvm_args = vec![\"--emit=llvm-ir\".to_owned(),];\n         link_args.extend(llvm_args);\n         let args = self.make_compile_args(link_args,\n                                           &self.testpaths.file,\n@@ -1768,8 +1768,8 @@ actual:\\n\\\n         let proc_args = ProcArgs {\n             // FIXME (#9639): This needs to handle non-utf8 paths\n             prog: prog.to_str().unwrap().to_owned(),\n-            args: vec!(format!(\"-input-file={}\", irfile.to_str().unwrap()),\n-                       self.testpaths.file.to_str().unwrap().to_owned())\n+            args: vec![format!(\"-input-file={}\", irfile.to_str().unwrap()),\n+                       self.testpaths.file.to_str().unwrap().to_owned()]\n         };\n         self.compose_and_run(proc_args, Vec::new(), \"\", None, None)\n     }"}, {"sha": "c5f72127a9c805230704ed088eee5d2d61b0f9e8", "filename": "src/tools/rustbook/book.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftools%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ec350f5968defc7024d72ce791b0653c966cee/src%2Ftools%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fbook.rs?ref=69ec350f5968defc7024d72ce791b0653c966cee", "patch": "@@ -94,16 +94,16 @@ pub fn parse_summary(input: &mut Read, src: &Path) -> Result<Book, Vec<String>>\n         }\n     }\n \n-    let mut top_items = vec!();\n-    let mut stack = vec!();\n-    let mut errors = vec!();\n+    let mut top_items = vec![];\n+    let mut stack = vec![];\n+    let mut errors = vec![];\n \n     // always include the introduction\n     top_items.push(BookItem {\n         title: \"Introduction\".to_string(),\n         path: PathBuf::from(\"README.md\"),\n         path_to_root: PathBuf::from(\"\"),\n-        children: vec!(),\n+        children: vec![],\n     });\n \n     for line_result in BufReader::new(input).lines() {\n@@ -142,7 +142,7 @@ pub fn parse_summary(input: &mut Read, src: &Path) -> Result<Book, Vec<String>>\n             title: title,\n             path: path_from_root,\n             path_to_root: path_to_root,\n-            children: vec!(),\n+            children: vec![],\n         };\n         let level = indent.chars().map(|c| -> usize {\n             match c {"}]}