{"sha": "b1d14ca05d6b34423c31fd237fdf2d6cd6f70333", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDE0Y2EwNWQ2YjM0NDIzYzMxZmQyMzdmZGYyZDZjZDZmNzAzMzM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-15T10:59:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-15T10:59:06Z"}, "message": "Use mmap for metadata loading\n\nThis can have a significant improvement on compilation times. In\naddition it reduces the memory consumption.\n\nFixes #927", "tree": {"sha": "62a74db6f7167b9c03199d2f6dd5393bad082236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62a74db6f7167b9c03199d2f6dd5393bad082236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333", "html_url": "https://github.com/rust-lang/rust/commit/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578fcdef5fbd02bd3ae7d30349f62aa9143a0bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/578fcdef5fbd02bd3ae7d30349f62aa9143a0bf2", "html_url": "https://github.com/rust-lang/rust/commit/578fcdef5fbd02bd3ae7d30349f62aa9143a0bf2"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "a033912364e8847c5f9c7756e9df7382d5452920", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b1d14ca05d6b34423c31fd237fdf2d6cd6f70333", "patch": "@@ -240,6 +240,15 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"memmap2\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"04e3e85b970d650e2ae6d70592474087051c11c54da7f7b4949725c5735fbcc6\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"object\"\n version = \"0.23.0\"\n@@ -310,6 +319,7 @@ dependencies = [\n  \"gimli\",\n  \"indexmap\",\n  \"libloading\",\n+ \"memmap2\",\n  \"object\",\n  \"smallvec\",\n  \"target-lexicon\","}, {"sha": "59542c414fa85de5eb7508af3a66b6c8f9e6eae1", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b1d14ca05d6b34423c31fd237fdf2d6cd6f70333", "patch": "@@ -16,12 +16,13 @@ cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n target-lexicon = \"0.11.0\"\n gimli = { version = \"0.23.0\", default-features = false, features = [\"write\"]}\n-object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n+object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.0.2\"\n libloading = { version = \"0.6.0\", optional = true }\n smallvec = \"1.6.1\"\n+memmap2 = \"0.2.1\"\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/bytecodealliance/wasmtime/\"]"}, {"sha": "dda9285a38a998b14f99bde76c2f2feeb8a263fc", "filename": "src/metadata.rs", "status": "modified", "additions": 44, "deletions": 26, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d14ca05d6b34423c31fd237fdf2d6cd6f70333/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=b1d14ca05d6b34423c31fd237fdf2d6cd6f70333", "patch": "@@ -1,11 +1,11 @@\n //! Reading and writing of the rustc metadata for rlibs and dylibs\n \n-use std::convert::TryFrom;\n use std::fs::File;\n+use std::ops::Deref;\n use std::path::Path;\n \n use rustc_codegen_ssa::METADATA_FILENAME;\n-use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_data_structures::owning_ref::{OwningRef, StableAddress};\n use rustc_data_structures::rustc_erase_owner;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n@@ -17,38 +17,56 @@ use crate::backend::WriteMetadata;\n \n pub(crate) struct CraneliftMetadataLoader;\n \n+struct StableMmap(memmap2::Mmap);\n+\n+impl Deref for StableMmap {\n+    type Target = [u8];\n+\n+    fn deref(&self) -> &[u8] {\n+        &*self.0\n+    }\n+}\n+\n+unsafe impl StableAddress for StableMmap {}\n+\n+fn load_metadata_with(\n+    path: &Path,\n+    f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n+) -> Result<MetadataRef, String> {\n+    let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n+    let data = unsafe { memmap2::MmapOptions::new().map_copy_read_only(&file) }\n+        .map_err(|e| format!(\"{:?}\", e))?;\n+    let metadata = OwningRef::new(StableMmap(data)).try_map(f)?;\n+    return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n+}\n+\n impl MetadataLoader for CraneliftMetadataLoader {\n     fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        let mut archive = ar::Archive::new(File::open(path).map_err(|e| format!(\"{:?}\", e))?);\n-        // Iterate over all entries in the archive:\n-        while let Some(entry_result) = archive.next_entry() {\n-            let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-            if entry.header().identifier() == METADATA_FILENAME.as_bytes() {\n-                let mut buf = Vec::with_capacity(\n-                    usize::try_from(entry.header().size())\n-                        .expect(\"Rlib metadata file too big to load into memory.\"),\n-                );\n-                ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n-                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n+        load_metadata_with(path, |data| {\n+            let archive = object::read::archive::ArchiveFile::parse(&*data)\n+                .map_err(|e| format!(\"{:?}\", e))?;\n+\n+                for entry_result in archive.members() {\n+                let entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n+                if entry.name() == METADATA_FILENAME.as_bytes() {\n+                    return Ok(entry.data());\n+                }\n             }\n-        }\n \n-        Err(\"couldn't find metadata entry\".to_string())\n+            Err(\"couldn't find metadata entry\".to_string())\n+        })\n     }\n \n     fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n         use object::{Object, ObjectSection};\n-        let file = std::fs::read(path).map_err(|e| format!(\"read:{:?}\", e))?;\n-        let file = object::File::parse(&file).map_err(|e| format!(\"parse: {:?}\", e))?;\n-        let buf = file\n-            .section_by_name(\".rustc\")\n-            .ok_or(\"no .rustc section\")?\n-            .data()\n-            .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))?\n-            .to_owned();\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n-        Ok(rustc_erase_owner!(buf.map_owner_box()))\n+\n+        load_metadata_with(path, |data| {\n+            let file = object::File::parse(&data).map_err(|e| format!(\"parse: {:?}\", e))?;\n+            file.section_by_name(\".rustc\")\n+                .ok_or(\"no .rustc section\")?\n+                .data()\n+                .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))\n+        })\n     }\n }\n "}]}