{"sha": "26f3528434cad89e5bd9fdb4b35ac260c472b740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZjM1Mjg0MzRjYWQ4OWU1YmQ5ZmRiNGIzNWFjMjYwYzQ3MmI3NDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-23T23:30:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-23T23:30:21Z"}, "message": "Rollup merge of #61056 - euclio:custom-discriminant-error, r=estebank\n\ntweak discriminant on non-nullary enum diagnostic\n\nAdds notes pointing at the non-nullary variants, and uses \"custom\ndiscriminant\" language to be consistent with the Reference.\n\nFixes #61039.\n\nr? @estebank", "tree": {"sha": "3dadab5b9914bde5b788629ccba3cfc7c1258303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dadab5b9914bde5b788629ccba3cfc7c1258303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26f3528434cad89e5bd9fdb4b35ac260c472b740", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5y0NCRBK7hj4Ov3rIwAAdHIIAKSetdg+le2qtSBGDOg1Ayuz\nLDhAnmpTf9sbmAI7vFQEf0JYsjhaEEhCsLw0vr+EshyqRtEcfEfPV4g6BFrcZ3po\nCHdytWlra0VGqhatJw4MSdEJr3pxBMr3963Z4G9//ehJgYPD6t9BXFu4IfzDbGLH\nqzJ2cct3Y/MbkF4VIJ6v6h/5JwOi6qZjkllBfUAjr4+dNSvEVyO5s7aPtiNt31eB\n6hiNz7maAOIE+SpDuEq3H8tGQegrz01MPCQTTUOYcqP6gwEMcGmKDfSaFJ3xSJMn\nVoEipxn2MkCVp7BKpR0VWBm17qmwKtyD9MtsCH0JRclwLSWp6TefxDRFG0B2QgQ=\n=OS1Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 3dadab5b9914bde5b788629ccba3cfc7c1258303\nparent b9459e7e4d0c5e1022959c4dab4999f862f1fdda\nparent 3cbf5864a6b7088eb28da30b9ccf61ba8d90054f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558654221 +0200\ncommitter GitHub <noreply@github.com> 1558654221 +0200\n\nRollup merge of #61056 - euclio:custom-discriminant-error, r=estebank\n\ntweak discriminant on non-nullary enum diagnostic\n\nAdds notes pointing at the non-nullary variants, and uses \"custom\ndiscriminant\" language to be consistent with the Reference.\n\nFixes #61039.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26f3528434cad89e5bd9fdb4b35ac260c472b740", "html_url": "https://github.com/rust-lang/rust/commit/26f3528434cad89e5bd9fdb4b35ac260c472b740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26f3528434cad89e5bd9fdb4b35ac260c472b740/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9459e7e4d0c5e1022959c4dab4999f862f1fdda", "html_url": "https://github.com/rust-lang/rust/commit/b9459e7e4d0c5e1022959c4dab4999f862f1fdda"}, {"sha": "3cbf5864a6b7088eb28da30b9ccf61ba8d90054f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cbf5864a6b7088eb28da30b9ccf61ba8d90054f", "html_url": "https://github.com/rust-lang/rust/commit/3cbf5864a6b7088eb28da30b9ccf61ba8d90054f"}], "stats": {"total": 89, "additions": 63, "deletions": 26}, "files": [{"sha": "8ac5beb21b5308405f13fba01b6a67725a07846f", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=26f3528434cad89e5bd9fdb4b35ac260c472b740", "patch": "@@ -1,16 +1,19 @@\n use crate::ast;\n-use crate::ast::{BlockCheckMode, Expr, ExprKind, Item, ItemKind, Pat, PatKind, QSelf, Ty, TyKind};\n-use crate::parse::parser::{BlockMode, PathStyle, TokenType, SemiColonMode};\n+use crate::ast::{\n+    BlockCheckMode, Expr, ExprKind, Item, ItemKind, Pat, PatKind, QSelf, Ty, TyKind, VariantData,\n+};\n+use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType};\n use crate::parse::token;\n use crate::parse::PResult;\n use crate::parse::Parser;\n use crate::print::pprust;\n use crate::ptr::P;\n+use crate::source_map::Spanned;\n use crate::symbol::kw;\n use crate::ThinVec;\n use errors::{Applicability, DiagnosticBuilder};\n-use syntax_pos::Span;\n use log::debug;\n+use syntax_pos::Span;\n \n pub trait RecoverQPath: Sized + 'static {\n     const PATH_STYLE: PathStyle = PathStyle::Expr;\n@@ -79,6 +82,44 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    crate fn maybe_report_invalid_custom_discriminants(\n+        &mut self,\n+        discriminant_spans: Vec<Span>,\n+        variants: &[Spanned<ast::Variant_>],\n+    ) {\n+        let has_fields = variants.iter().any(|variant| match variant.node.data {\n+            VariantData::Tuple(..) | VariantData::Struct(..) => true,\n+            VariantData::Unit(..) => false,\n+        });\n+\n+        if !discriminant_spans.is_empty() && has_fields {\n+            let mut err = self.struct_span_err(\n+                discriminant_spans.clone(),\n+                \"custom discriminant values are not allowed in enums with fields\",\n+            );\n+            for sp in discriminant_spans {\n+                err.span_label(sp, \"invalid custom discriminant\");\n+            }\n+            for variant in variants.iter() {\n+                if let VariantData::Struct(fields, ..) | VariantData::Tuple(fields, ..) =\n+                    &variant.node.data\n+                {\n+                    let fields = if fields.len() > 1 {\n+                        \"fields\"\n+                    } else {\n+                        \"a field\"\n+                    };\n+                    err.span_label(\n+                        variant.span,\n+                        &format!(\"variant with {fields} defined here\", fields = fields),\n+                    );\n+\n+                }\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     crate fn maybe_recover_from_bad_type_plus(\n         &mut self,\n         allow_plus: bool,"}, {"sha": "df8015150823079401bac67b78bb8abe2bb0271c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=26f3528434cad89e5bd9fdb4b35ac260c472b740", "patch": "@@ -7466,7 +7466,6 @@ impl<'a> Parser<'a> {\n     /// Parses the part of an enum declaration following the `{`.\n     fn parse_enum_def(&mut self, _generics: &ast::Generics) -> PResult<'a, EnumDef> {\n         let mut variants = Vec::new();\n-        let mut all_nullary = true;\n         let mut any_disr = vec![];\n         while self.token != token::CloseDelim(token::Brace) {\n             let variant_attrs = self.parse_outer_attributes()?;\n@@ -7478,11 +7477,9 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n-                all_nullary = false;\n                 let (fields, recovered) = self.parse_record_struct_body()?;\n                 struct_def = VariantData::Struct(fields, recovered);\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n-                all_nullary = false;\n                 struct_def = VariantData::Tuple(\n                     self.parse_tuple_struct_body()?,\n                     ast::DUMMY_NODE_ID,\n@@ -7526,16 +7523,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        if !any_disr.is_empty() && !all_nullary {\n-            let mut err = self.struct_span_err(\n-                any_disr.clone(),\n-                \"discriminator values can only be used with a field-less enum\",\n-            );\n-            for sp in any_disr {\n-                err.span_label(sp, \"only valid in field-less enums\");\n-            }\n-            err.emit();\n-        }\n+        self.maybe_report_invalid_custom_discriminants(any_disr, &variants);\n \n         Ok(ast::EnumDef { variants })\n     }"}, {"sha": "f95005cd914838605d401bc8ff71edb7c4f1f2ee", "filename": "src/test/ui/parser/issue-17383.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs?ref=26f3528434cad89e5bd9fdb4b35ac260c472b740", "patch": "@@ -1,6 +1,6 @@\n enum X {\n     A = 3,\n-    //~^ ERROR discriminator values can only be used with a field-less enum\n+    //~^ ERROR custom discriminant values are not allowed in enums with fields\n     B(usize)\n }\n "}, {"sha": "37abd0ff5e1f49cb8248347aae0f20f7d6bfb6d2", "filename": "src/test/ui/parser/issue-17383.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr?ref=26f3528434cad89e5bd9fdb4b35ac260c472b740", "patch": "@@ -1,8 +1,11 @@\n-error: discriminator values can only be used with a field-less enum\n+error: custom discriminant values are not allowed in enums with fields\n   --> $DIR/issue-17383.rs:2:9\n    |\n LL |     A = 3,\n-   |         ^ only valid in field-less enums\n+   |         ^ invalid custom discriminant\n+LL |\n+LL |     B(usize)\n+   |     -------- variant with a field defined here\n \n error: aborting due to previous error\n "}, {"sha": "305edc4ad5a0489d3e178abfad86a064ba651ec2", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs?ref=26f3528434cad89e5bd9fdb4b35ac260c472b740", "patch": "@@ -1,11 +1,12 @@\n enum Color {\n     Red = 0xff0000,\n-    //~^ ERROR discriminator values can only be used with a field-less enum\n+    //~^ ERROR custom discriminant values are not allowed in enums with fields\n     Green = 0x00ff00,\n     Blue = 0x0000ff,\n     Black = 0x000000,\n     White = 0xffffff,\n     Other(usize),\n+    Other2(usize, usize),\n }\n \n fn main() {}"}, {"sha": "2d3b28395312438439814cdf3067eb0c6a8aab5c", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26f3528434cad89e5bd9fdb4b35ac260c472b740/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=26f3528434cad89e5bd9fdb4b35ac260c472b740", "patch": "@@ -1,17 +1,21 @@\n-error: discriminator values can only be used with a field-less enum\n+error: custom discriminant values are not allowed in enums with fields\n   --> $DIR/tag-variant-disr-non-nullary.rs:2:11\n    |\n LL |     Red = 0xff0000,\n-   |           ^^^^^^^^ only valid in field-less enums\n+   |           ^^^^^^^^ invalid custom discriminant\n LL |\n LL |     Green = 0x00ff00,\n-   |             ^^^^^^^^ only valid in field-less enums\n+   |             ^^^^^^^^ invalid custom discriminant\n LL |     Blue = 0x0000ff,\n-   |            ^^^^^^^^ only valid in field-less enums\n+   |            ^^^^^^^^ invalid custom discriminant\n LL |     Black = 0x000000,\n-   |             ^^^^^^^^ only valid in field-less enums\n+   |             ^^^^^^^^ invalid custom discriminant\n LL |     White = 0xffffff,\n-   |             ^^^^^^^^ only valid in field-less enums\n+   |             ^^^^^^^^ invalid custom discriminant\n+LL |     Other(usize),\n+   |     ------------ variant with a field defined here\n+LL |     Other2(usize, usize),\n+   |     -------------------- variant with fields defined here\n \n error: aborting due to previous error\n "}]}