{"sha": "46d2be1bd4fed62e7d1d48fdc223b948eafc2728", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDJiZTFiZDRmZWQ2MmU3ZDFkNDhmZGMyMjNiOTQ4ZWFmYzI3Mjg=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-13T01:18:29Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-13T01:18:29Z"}, "message": "added rather elaborate test framework", "tree": {"sha": "f2ac816eab9a4a5f80b34270d7c1d3114422c900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ac816eab9a4a5f80b34270d7c1d3114422c900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d2be1bd4fed62e7d1d48fdc223b948eafc2728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d2be1bd4fed62e7d1d48fdc223b948eafc2728", "html_url": "https://github.com/rust-lang/rust/commit/46d2be1bd4fed62e7d1d48fdc223b948eafc2728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d2be1bd4fed62e7d1d48fdc223b948eafc2728/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c05954a76bd601acda06807e80664c94831bae31", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05954a76bd601acda06807e80664c94831bae31", "html_url": "https://github.com/rust-lang/rust/commit/c05954a76bd601acda06807e80664c94831bae31"}], "stats": {"total": 143, "additions": 126, "deletions": 17}, "files": [{"sha": "d8c8629410c63171d14c3a26b04b9e1989d7a688", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 126, "deletions": 17, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/46d2be1bd4fed62e7d1d48fdc223b948eafc2728/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d2be1bd4fed62e7d1d48fdc223b948eafc2728/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=46d2be1bd4fed62e7d1d48fdc223b948eafc2728", "patch": "@@ -1155,39 +1155,148 @@ fn mk_enum_deser_body(\n #[cfg(test)]\n mod test {\n     use std::serialize::Encodable;\n+    use std::serialize::Encoder;\n     use core::dvec::*;\n     use util::testing::*;\n     use core::io;\n     use core::str;\n+    use core::option::Option;\n+    use core::option::Some;\n+    use core::option::None;\n     use std;\n \n+    // just adding the ones I want to test, for now:\n+    #[deriving_eq]\n+    pub enum call {\n+        CallToEmitEnum(~str),\n+        CallToEmitEnumVariant(~str, uint, uint),\n+        CallToEmitEnumVariantArg(uint),\n+        CallToEmitUint(uint),\n+        CallToEmitNil,\n+        // all of the ones I was too lazy to handle:\n+        CallToOther\n+    }\n+    // using a mutable field rather than changing the\n+    // type of self in every method of every encoder everywhere.\n+    pub struct TestEncoder {mut call_log : ~[call]}\n+\n+    pub impl TestEncoder {\n+        // these self's should be &mut self's, as well....\n+        fn add_to_log (&self, c : call) {\n+            self.call_log.push(copy c);\n+        }\n+        fn add_unknown_to_log (&self) {\n+            self.add_to_log (CallToOther)\n+        }\n+    }\n+    \n+    pub impl Encoder for TestEncoder {\n+        fn emit_nil(&self) { self.add_to_log(CallToEmitNil) }\n+        \n+        fn emit_uint(&self, +v: uint) {self.add_to_log(CallToEmitUint(v)); }\n+        fn emit_u64(&self, +_v: u64) { self.add_unknown_to_log(); }\n+    fn emit_u32(&self, +_v: u32) { self.add_unknown_to_log(); }\n+    fn emit_u16(&self, +_v: u16) { self.add_unknown_to_log(); }\n+    fn emit_u8(&self, +_v: u8)   { self.add_unknown_to_log(); }\n+\n+    fn emit_int(&self, +_v: int) { self.add_unknown_to_log(); }\n+    fn emit_i64(&self, +_v: i64) { self.add_unknown_to_log(); }\n+    fn emit_i32(&self, +_v: i32) { self.add_unknown_to_log(); }\n+    fn emit_i16(&self, +_v: i16) { self.add_unknown_to_log(); }\n+    fn emit_i8(&self, +_v: i8)   { self.add_unknown_to_log(); }\n+\n+    fn emit_bool(&self, +_v: bool) { self.add_unknown_to_log(); }\n+\n+    fn emit_f64(&self, +_v: f64) { self.add_unknown_to_log(); }\n+    fn emit_f32(&self, +_v: f32) { self.add_unknown_to_log(); }\n+    fn emit_float(&self, +_v: float) { self.add_unknown_to_log(); }\n+\n+    fn emit_char(&self, +_v: char) { self.add_unknown_to_log(); }\n+\n+    fn emit_borrowed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n+    fn emit_owned_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n+    fn emit_managed_str(&self, +_v: &str) { self.add_unknown_to_log(); }\n+\n+    fn emit_borrowed(&self, f: fn()) { self.add_unknown_to_log(); f() }\n+    fn emit_owned(&self, f: fn()) { self.add_unknown_to_log(); f() }\n+    fn emit_managed(&self, f: fn()) { self.add_unknown_to_log(); f() }\n+\n+    fn emit_enum(&self, name: &str, f: fn()) {\n+        self.add_to_log(CallToEmitEnum(name.to_str())); f(); }\n+\n+    fn emit_enum_variant(&self, name: &str, +id: uint, +cnt: uint, f: fn()) {\n+        self.add_to_log(CallToEmitEnumVariant (name.to_str(),id,cnt)); f();\n+    }\n+\n+    fn emit_enum_variant_arg(&self, +idx: uint, f: fn()) {\n+        self.add_to_log(CallToEmitEnumVariantArg (idx)); f();\n+    }\n+\n+    fn emit_borrowed_vec(&self, +_len: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+\n+    fn emit_owned_vec(&self, +_len: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+    fn emit_managed_vec(&self, +_len: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+    fn emit_vec_elt(&self, +_idx: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+\n+    fn emit_rec(&self, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+    fn emit_struct(&self, _name: &str, +_len: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+    fn emit_field(&self, _name: &str, +_idx: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+        \n+    fn emit_tup(&self, +_len: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+    fn emit_tup_elt(&self, +_idx: uint, f: fn()) {\n+        self.add_unknown_to_log(); f();\n+    }\n+}\n+\n+    \n     #[auto_decode]\n     #[auto_encode]\n     struct Node {id: uint}\n \n-    fn to_json_str (val: Encodable<std::json::Encoder>) -> ~str{\n-        let bw = @io::BytesWriter {bytes: DVec(), pos: 0};\n-        val.encode(~std::json::Encoder(bw as io::Writer));\n-        str::from_bytes(bw.bytes.data)\n+    \n+    fn to_call_log (val: Encodable<TestEncoder>) -> ~[call] {\n+        let mut te = TestEncoder {call_log: ~[]};\n+        val.encode(&te);\n+        te.call_log\n     }\n-\n+/*\n     #[test] fn encode_test () {\n-        check_equal (to_json_str(Node{id:34}\n+        check_equal (to_call_log(Node{id:34}\n                                  as Encodable::<std::json::Encoder>),\n-                     ~\"{\\\"id\\\":34}\");\n+                     ~[CallToEnum (~\"Node\"),\n+                       CallToEnumVariant]);\n     }\n-\n+*/\n     #[auto_encode]\n-    enum written {\n-        Book(int),\n+    enum Written {\n+        Book(uint,uint),\n         Magazine(~str)\n     }\n \n-    #[test] fn json_enum_encode_test () {\n-        check_equal (to_json_str(Book(9) as Encodable::<std::json::Encoder>),\n-                     ~\"[\\\"Book\\\",9]\");\n-        check_equal (to_json_str(Magazine(~\"Paris Match\")\n-                                 as Encodable::<std::json::Encoder>),\n-                     ~\"[\\\"Magazine\\\",\\\"Paris Match\\\"]\");\n-    }\n+    #[test] fn encode_enum_test () {\n+        check_equal (to_call_log(Book(34,44)\n+                                 as Encodable::<TestEncoder>),\n+                     ~[CallToEmitEnum (~\"Written\"),\n+                       CallToEmitEnumVariant (~\"Book\",0,2),\n+                       CallToEmitEnumVariantArg (0),\n+                       CallToEmitUint (34),\n+                       CallToEmitEnumVariantArg (1),\n+                       CallToEmitUint (44)]);\n+        }\n }"}]}