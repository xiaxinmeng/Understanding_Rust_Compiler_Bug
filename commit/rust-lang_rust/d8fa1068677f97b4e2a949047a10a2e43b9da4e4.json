{"sha": "d8fa1068677f97b4e2a949047a10a2e43b9da4e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZmExMDY4Njc3Zjk3YjRlMmE5NDkwNDdhMTBhMmU0M2I5ZGE0ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-17T10:16:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-17T10:16:25Z"}, "message": "auto merge of #13563 : lifthrasiir/rust/refman-dl, r=alexcrichton\n\nCloses #13561. All definition lists have been converted to unordered lists. This is a temporary measure; please revert this when Sundown (or any replacement) gets a support for definition lists in the future.", "tree": {"sha": "23c5cb790c52b5b906ced7e1d77b6d144356f5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c5cb790c52b5b906ced7e1d77b6d144356f5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8fa1068677f97b4e2a949047a10a2e43b9da4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8fa1068677f97b4e2a949047a10a2e43b9da4e4", "html_url": "https://github.com/rust-lang/rust/commit/d8fa1068677f97b4e2a949047a10a2e43b9da4e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8fa1068677f97b4e2a949047a10a2e43b9da4e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18536190e184c1b6b1d845f83e5e1d79fabfaf4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/18536190e184c1b6b1d845f83e5e1d79fabfaf4b", "html_url": "https://github.com/rust-lang/rust/commit/18536190e184c1b6b1d845f83e5e1d79fabfaf4b"}, {"sha": "010c107ca5b58ea0c9bf986c43d88de2db32a749", "url": "https://api.github.com/repos/rust-lang/rust/commits/010c107ca5b58ea0c9bf986c43d88de2db32a749", "html_url": "https://github.com/rust-lang/rust/commit/010c107ca5b58ea0c9bf986c43d88de2db32a749"}], "stats": {"total": 144, "additions": 72, "deletions": 72}, "files": [{"sha": "8949d9852524bbfec11103f5d6afb174671028e7", "filename": "src/doc/rust.md", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/d8fa1068677f97b4e2a949047a10a2e43b9da4e4/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8fa1068677f97b4e2a949047a10a2e43b9da4e4/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=d8fa1068677f97b4e2a949047a10a2e43b9da4e4", "patch": "@@ -2007,110 +2007,110 @@ A complete list of the built-in language items follows:\n \n #### Built-in Traits\n \n-`send`\n+* `send`\n   : Able to be sent across task boundaries.\n-`sized`\n+* `sized`\n   : Has a size known at compile time.\n-`copy`\n+* `copy`\n   : Types that do not move ownership when used by-value.\n-`share`\n+* `share`\n   : Able to be safely shared between tasks when aliased.\n-`drop`\n+* `drop`\n   : Have destructors.\n \n #### Operators\n \n These language items are traits:\n \n-`add`\n+* `add`\n   : Elements can be added (for example, integers and floats).\n-`sub`\n+* `sub`\n   : Elements can be subtracted.\n-`mul`\n+* `mul`\n   : Elements can be multiplied.\n-`div`\n+* `div`\n   : Elements have a division operation.\n-`rem`\n+* `rem`\n   : Elements have a remainder operation.\n-`neg`\n+* `neg`\n   : Elements can be negated arithmetically.\n-`not`\n+* `not`\n   : Elements can be negated logically.\n-`bitxor`\n+* `bitxor`\n   : Elements have an exclusive-or operation.\n-`bitand`\n+* `bitand`\n   : Elements have a bitwise `and` operation.\n-`bitor`\n+* `bitor`\n   : Elements have a bitwise `or` operation.\n-`shl`\n+* `shl`\n   : Elements have a left shift operation.\n-`shr`\n+* `shr`\n   : Elements have a right shift operation.\n-`index`\n+* `index`\n   : Elements can be indexed.\n-`eq`\n+* `eq`\n   : Elements can be compared for equality.\n-`ord`\n+* `ord`\n   : Elements have a partial ordering.\n-`deref`\n+* `deref`\n   : `*` can be applied, yielding a reference to another type\n-`deref_mut`\n+* `deref_mut`\n   : `*` can be applied, yielding a mutable reference to another type\n \n \n These are functions:\n \n-`str_eq`\n+* `str_eq`\n   : Compare two strings (`&str`) for equality.\n-`uniq_str_eq`\n+* `uniq_str_eq`\n   : Compare two owned strings (`~str`) for equality.\n-`strdup_uniq`\n+* `strdup_uniq`\n   : Return a new unique string\n     containing a copy of the contents of a unique string.\n \n #### Types\n \n-`unsafe`\n+* `unsafe`\n   : A type whose contents can be mutated through an immutable reference\n-`type_id`\n+* `type_id`\n   : The type returned by the `type_id` intrinsic.\n \n #### Marker types\n \n These types help drive the compiler's analysis\n \n-`covariant_type`\n+* `covariant_type`\n   : The type parameter should be considered covariant\n-`contravariant_type`\n+* `contravariant_type`\n   : The type parameter should be considered contravariant\n-`invariant_type`\n+* `invariant_type`\n   : The type parameter should be considered invariant\n-`covariant_lifetime`\n+* `covariant_lifetime`\n   : The lifetime parameter should be considered covariant\n-`contravariant_lifetime`\n+* `contravariant_lifetime`\n   : The lifetime parameter should be considered contravariant\n-`invariant_lifetime`\n+* `invariant_lifetime`\n   : The lifetime parameter should be considered invariant\n-`no_send_bound`\n+* `no_send_bound`\n   : This type does not implement \"send\", even if eligible\n-`no_copy_bound`\n+* `no_copy_bound`\n   : This type does not implement \"copy\", even if eligible\n-`no_share_bound`\n+* `no_share_bound`\n   : This type does not implement \"share\", even if eligible\n-`managed_bound`\n+* `managed_bound`\n   : This type implements \"managed\"\n \n-`fail_`\n+* `fail_`\n   : Abort the program with an error.\n-`fail_bounds_check`\n+* `fail_bounds_check`\n   : Abort the program with a bounds check error.\n-`exchange_malloc`\n+* `exchange_malloc`\n   : Allocate memory on the exchange heap.\n-`exchange_free`\n+* `exchange_free`\n   : Free memory that was allocated on the exchange heap.\n-`malloc`\n+* `malloc`\n   : Allocate memory on the managed heap.\n-`free`\n+* `free`\n   : Free memory that was allocated on the managed heap.\n \n > **Note:** This list is likely to become out of date. We should auto-generate it\n@@ -2618,24 +2618,24 @@ Rust defines six symbolic unary operators.\n They are all written as prefix operators,\n before the expression they apply to.\n \n-`-`\n+* `-`\n   : Negation. May only be applied to numeric types.\n-`*`\n+* `*`\n   : Dereference. When applied to a [pointer](#pointer-types) it denotes the pointed-to location.\n     For pointers to mutable locations, the resulting [lvalue](#lvalues-rvalues-and-temporaries) can be assigned to.\n     On non-pointer types, it calls the `deref` method of the `std::ops::Deref` trait, or the\n     `deref_mut` method of the `std::ops::DerefMut` trait (if implemented by the type and required\n     for an outer expression that will or could mutate the dereference), and produces the\n     result of dereferencing the `&` or `&mut` borrowed pointer returned from the overload method.\n \n-`!`\n+* `!`\n   : Logical negation. On the boolean type, this flips between `true` and\n     `false`. On integer types, this inverts the individual bits in the\n     two's complement representation of the value.\n-`~`\n+* `~`\n   :  [Boxing](#pointer-types) operators. Allocate a box to hold the value they are applied to,\n      and store the value in it. `~` creates an owned box.\n-`&`\n+* `&`\n   : Borrow operator. Returns a reference, pointing to its operand.\n     The operand of a borrow is statically proven to outlive the resulting pointer.\n     If the borrow-checker cannot prove this, it is a compilation error.\n@@ -2656,19 +2656,19 @@ defined in the `std::ops` module of the `std` library.\n This means that arithmetic operators can be overridden for user-defined types.\n The default meaning of the operators on standard types is given here.\n \n-`+`\n+* `+`\n   : Addition and vector/string concatenation.\n     Calls the `add` method on the `std::ops::Add` trait.\n-`-`\n+* `-`\n   : Subtraction.\n     Calls the `sub` method on the `std::ops::Sub` trait.\n-`*`\n+* `*`\n   : Multiplication.\n     Calls the `mul` method on the `std::ops::Mul` trait.\n-`/`\n+* `/`\n   : Quotient.\n     Calls the `div` method on the `std::ops::Div` trait.\n-`%`\n+* `%`\n   : Remainder.\n     Calls the `rem` method on the `std::ops::Rem` trait.\n \n@@ -2679,19 +2679,19 @@ are syntactic sugar for calls to methods of built-in traits.\n This means that bitwise operators can be overridden for user-defined types.\n The default meaning of the operators on standard types is given here.\n \n-`&`\n+* `&`\n   : And.\n     Calls the `bitand` method of the `std::ops::BitAnd` trait.\n-`|`\n+* `|`\n   : Inclusive or.\n     Calls the `bitor` method of the `std::ops::BitOr` trait.\n-`^`\n+* `^`\n   : Exclusive or.\n     Calls the `bitxor` method of the `std::ops::BitXor` trait.\n-`<<`\n+* `<<`\n   : Logical left shift.\n     Calls the `shl` method of the `std::ops::Shl` trait.\n-`>>`\n+* `>>`\n   : Logical right shift.\n     Calls the `shr` method of the `std::ops::Shr` trait.\n \n@@ -2712,22 +2712,22 @@ syntactic sugar for calls to built-in traits.\n This means that comparison operators can be overridden for user-defined types.\n The default meaning of the operators on standard types is given here.\n \n-`==`\n+* `==`\n   : Equal to.\n     Calls the `eq` method on the `std::cmp::Eq` trait.\n-`!=`\n+* `!=`\n   : Unequal to.\n     Calls the `ne` method on the `std::cmp::Eq` trait.\n-`<`\n+* `<`\n   : Less than.\n     Calls the `lt` method on the `std::cmp::Ord` trait.\n-`>`\n+* `>`\n   : Greater than.\n     Calls the `gt` method on the `std::cmp::Ord` trait.\n-`<=`\n+* `<=`\n   : Less than or equal.\n     Calls the `le` method on the `std::cmp::Ord` trait.\n-`>=`\n+* `>=`\n   : Greater than or equal.\n     Calls the `ge` method on the `std::cmp::Ord` trait.\n \n@@ -3413,7 +3413,7 @@ All pointers in Rust are explicit first-class values.\n They can be copied, stored into data structures, and returned from functions.\n There are four varieties of pointer in Rust:\n \n-Owning pointers (`~`)\n+* Owning pointers (`~`)\n   : These point to owned heap allocations (or \"boxes\") in the shared, inter-task heap.\n     Each owned box has a single owning pointer; pointer and pointee retain a 1:1 relationship at all times.\n     Owning pointers are written `~content`,\n@@ -3422,7 +3422,7 @@ Owning pointers (`~`)\n     it involves allocating a new owned box and copying the contents of the old box into the new box.\n     Releasing an owning pointer immediately releases its corresponding owned box.\n \n-References (`&`)\n+* References (`&`)\n   : These point to memory _owned by some other value_.\n     References arise by (automatic) conversion from owning pointers, managed pointers,\n     or by applying the borrowing operator `&` to some other value,\n@@ -3435,7 +3435,7 @@ References (`&`)\n     with the exception of temporary values,\n     which are released when the last reference to them is released.\n \n-Raw pointers (`*`)\n+* Raw pointers (`*`)\n   : Raw pointers are pointers without safety or liveness guarantees.\n     Raw pointers are written `*content`,\n     for example `*int` means a raw pointer to an integer.\n@@ -3609,24 +3609,24 @@ call to the method `make_string`.\n Types in Rust are categorized into kinds, based on various properties of the components of the type.\n The kinds are:\n \n-`Send`\n+* `Send`\n   : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and\n     structural types containing only other owned types.\n     All `Send` types are `'static`.\n-`Copy`\n+* `Copy`\n   : Types of this kind consist of \"Plain Old Data\"\n     which can be copied by simply moving bits.\n     All values of this kind can be implicitly copied.\n     This kind includes scalars and immutable references,\n     as well as structural types containing other `Copy` types.\n-`'static`\n+* `'static`\n   : Types of this kind do not contain any references (except for\n     references with the `static` lifetime, which are allowed).\n     This can be a useful guarantee for code\n     that breaks borrowing assumptions\n     using [`unsafe` operations](#unsafe-functions).\n-`Drop`\n+* `Drop`\n   : This is not strictly a kind,\n     but its presence interacts with kinds:\n     the `Drop` trait provides a single method `drop`\n@@ -3638,7 +3638,7 @@ The kinds are:\n     before any of the values it owns run their destructors.\n     Only `Send` types can implement `Drop`.\n \n-_Default_\n+* _Default_\n   : Types with destructors, closure environments,\n     and various other _non-first-class_ types,\n     are not copyable at all."}]}