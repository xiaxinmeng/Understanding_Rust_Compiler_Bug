{"sha": "ec434500157c47143a9b5600a7e34522c49f4e8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNDM0NTAwMTU3YzQ3MTQzYTliNTYwMGE3ZTM0NTIyYzQ5ZjRlOGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T09:06:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T10:25:34Z"}, "message": "expand: simplify flat_map_item wrt. inline module detection", "tree": {"sha": "f3565dcc7c2b4c9bbce4688e45db24aaec2d3c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3565dcc7c2b4c9bbce4688e45db24aaec2d3c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec434500157c47143a9b5600a7e34522c49f4e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec434500157c47143a9b5600a7e34522c49f4e8e", "html_url": "https://github.com/rust-lang/rust/commit/ec434500157c47143a9b5600a7e34522c49f4e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec434500157c47143a9b5600a7e34522c49f4e8e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6bd6a12347f27c937c19adfda542f694fb61c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6bd6a12347f27c937c19adfda542f694fb61c5", "html_url": "https://github.com/rust-lang/rust/commit/dc6bd6a12347f27c937c19adfda542f694fb61c5"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "316dd02bd9581154c1f89ebb0c86acfcfeacb148", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec434500157c47143a9b5600a7e34522c49f4e8e/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec434500157c47143a9b5600a7e34522c49f4e8e/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=ec434500157c47143a9b5600a7e34522c49f4e8e", "patch": "@@ -1383,17 +1383,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     _ => unreachable!(),\n                 })\n             }\n-            ast::ItemKind::Mod(ast::Mod { inner, .. }) if item.ident != Ident::invalid() => {\n+            ast::ItemKind::Mod(ast::Mod { inner, inline, .. })\n+                if item.ident != Ident::invalid() =>\n+            {\n                 let orig_directory_ownership = self.cx.current_expansion.directory_ownership;\n                 let mut module = (*self.cx.current_expansion.module).clone();\n                 module.mod_path.push(item.ident);\n \n-                // Detect if this is an inline module (`mod m { ... }` as opposed to `mod m;`).\n-                // In the non-inline case, `inner` is never the dummy span (cf. `parse_item_mod`).\n-                // Thus, if `inner` is the dummy span, we know the module is inline.\n-                let inline_module = item.span.contains(inner) || inner.is_dummy();\n-\n-                if inline_module {\n+                if inline {\n                     if let Some(path) = attr::first_attr_value_str_by_name(&item.attrs, sym::path) {\n                         self.cx.current_expansion.directory_ownership =\n                             DirectoryOwnership::Owned { relative: None };"}]}