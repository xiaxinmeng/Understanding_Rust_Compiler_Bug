{"sha": "56d288fa46e04cd5faf53d369a1a640a97e2bb08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDI4OGZhNDZlMDRjZDVmYWY1M2QzNjlhMWE2NDBhOTdlMmJiMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T11:43:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T11:43:18Z"}, "message": "Auto merge of #78227 - SergioBenitez:test-stdout-threading, r=m-ou-se\n\nCapture output from threads spawned in tests\n\nThis is revival of #75172.\n\nOriginal text:\n> Fixes #42474.\n>\n> r? `@\u200bdtolnay` since you expressed interest in this, but feel free to redirect if you aren't the right person anymore.\n\n---\n\nCloses #75172.", "tree": {"sha": "c2f7e816a443a91a45a9038ce7ecc46ede60f97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2f7e816a443a91a45a9038ce7ecc46ede60f97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d288fa46e04cd5faf53d369a1a640a97e2bb08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d288fa46e04cd5faf53d369a1a640a97e2bb08", "html_url": "https://github.com/rust-lang/rust/commit/56d288fa46e04cd5faf53d369a1a640a97e2bb08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d288fa46e04cd5faf53d369a1a640a97e2bb08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20b1e05a8d0e1773dc840a3286aa37916e87d84b", "url": "https://api.github.com/repos/rust-lang/rust/commits/20b1e05a8d0e1773dc840a3286aa37916e87d84b", "html_url": "https://github.com/rust-lang/rust/commit/20b1e05a8d0e1773dc840a3286aa37916e87d84b"}, {"sha": "7c4fe002131f1160f2054885ab40c74464951a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4fe002131f1160f2054885ab40c74464951a64", "html_url": "https://github.com/rust-lang/rust/commit/7c4fe002131f1160f2054885ab40c74464951a64"}], "stats": {"total": 196, "additions": 184, "deletions": 12}, "files": [{"sha": "46a6c5861d59d2df8394c69843cde1238cd1942d", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -115,6 +115,11 @@ impl Write for Sink {\n         Ok(())\n     }\n }\n+impl io::LocalOutput for Sink {\n+    fn clone_box(&self) -> Box<dyn io::LocalOutput> {\n+        Box::new(Self(self.0.clone()))\n+    }\n+}\n \n /// Like a `thread::Builder::spawn` followed by a `join()`, but avoids the need\n /// for `'static` bounds."}, {"sha": "66426101d278e3894232116b70633ce51dd40899", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -213,13 +213,13 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n #[cfg(test)]\n /// This impl is only used by printing logic, so any error returned is always\n /// of kind `Other`, and should be ignored.\n-impl Write for Box<dyn (::realstd::io::Write) + Send> {\n+impl Write for dyn ::realstd::io::LocalOutput {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        (**self).write(buf).map_err(|_| ErrorKind::Other.into())\n+        (*self).write(buf).map_err(|_| ErrorKind::Other.into())\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n-        (**self).flush().map_err(|_| ErrorKind::Other.into())\n+        (*self).flush().map_err(|_| ErrorKind::Other.into())\n     }\n }\n "}, {"sha": "e6efe6ec57eeafd58f4e601e1d48f4642003952b", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -277,10 +277,12 @@ pub use self::stdio::{StderrLock, StdinLock, StdoutLock};\n pub use self::stdio::{_eprint, _print};\n #[unstable(feature = \"libstd_io_internals\", issue = \"42788\")]\n #[doc(no_inline, hidden)]\n-pub use self::stdio::{set_panic, set_print};\n+pub use self::stdio::{set_panic, set_print, LocalOutput};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::util::{copy, empty, repeat, sink, Empty, Repeat, Sink};\n \n+pub(crate) use self::stdio::clone_io;\n+\n mod buffered;\n mod cursor;\n mod error;"}, {"sha": "2eb5fb45286201e3d44dbccfee8c9642fa150e8d", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -18,14 +18,14 @@ use crate::thread::LocalKey;\n \n thread_local! {\n     /// Used by the test crate to capture the output of the print! and println! macros.\n-    static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {\n+    static LOCAL_STDOUT: RefCell<Option<Box<dyn LocalOutput>>> = {\n         RefCell::new(None)\n     }\n }\n \n thread_local! {\n     /// Used by the test crate to capture the output of the eprint! and eprintln! macros, and panics.\n-    static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {\n+    static LOCAL_STDERR: RefCell<Option<Box<dyn LocalOutput>>> = {\n         RefCell::new(None)\n     }\n }\n@@ -888,6 +888,18 @@ impl fmt::Debug for StderrLock<'_> {\n     }\n }\n \n+/// A writer than can be cloned to new threads.\n+#[unstable(\n+    feature = \"set_stdio\",\n+    reason = \"this trait may disappear completely or be replaced \\\n+                     with a more general mechanism\",\n+    issue = \"none\"\n+)]\n+#[doc(hidden)]\n+pub trait LocalOutput: Write + Send {\n+    fn clone_box(&self) -> Box<dyn LocalOutput>;\n+}\n+\n /// Resets the thread-local stderr handle to the specified writer\n ///\n /// This will replace the current thread's stderr handle, returning the old\n@@ -903,7 +915,7 @@ impl fmt::Debug for StderrLock<'_> {\n     issue = \"none\"\n )]\n #[doc(hidden)]\n-pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n+pub fn set_panic(sink: Option<Box<dyn LocalOutput>>) -> Option<Box<dyn LocalOutput>> {\n     use crate::mem;\n     if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n         // LOCAL_STDERR is definitely None since LOCAL_STREAMS is false.\n@@ -934,7 +946,7 @@ pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n     issue = \"none\"\n )]\n #[doc(hidden)]\n-pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n+pub fn set_print(sink: Option<Box<dyn LocalOutput>>) -> Option<Box<dyn LocalOutput>> {\n     use crate::mem;\n     if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n         // LOCAL_STDOUT is definitely None since LOCAL_STREAMS is false.\n@@ -950,6 +962,22 @@ pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n     s\n }\n \n+pub(crate) fn clone_io() -> (Option<Box<dyn LocalOutput>>, Option<Box<dyn LocalOutput>>) {\n+    // Don't waste time when LOCAL_{STDOUT,STDERR} are definitely None.\n+    if !LOCAL_STREAMS.load(Ordering::Relaxed) {\n+        return (None, None);\n+    }\n+\n+    LOCAL_STDOUT.with(|stdout| {\n+        LOCAL_STDERR.with(|stderr| {\n+            (\n+                stdout.borrow().as_ref().map(|o| o.clone_box()),\n+                stderr.borrow().as_ref().map(|o| o.clone_box()),\n+            )\n+        })\n+    })\n+}\n+\n /// Write `args` to output stream `local_s` if possible, `global_s`\n /// otherwise. `label` identifies the stream in a panic message.\n ///\n@@ -962,7 +990,7 @@ pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n /// However, if the actual I/O causes an error, this function does panic.\n fn print_to<T>(\n     args: fmt::Arguments<'_>,\n-    local_s: &'static LocalKey<RefCell<Option<Box<dyn Write + Send>>>>,\n+    local_s: &'static LocalKey<RefCell<Option<Box<dyn LocalOutput>>>>,\n     global_s: fn() -> T,\n     label: &str,\n ) where"}, {"sha": "fbbc61f4e600b5c2fa32eb0bee0489f4648a8c93", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -220,7 +220,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n \n     if let Some(mut local) = set_panic(None) {\n         // NB. In `cfg(test)` this uses the forwarding impl\n-        // for `Box<dyn (::realstd::io::Write) + Send>`.\n+        // for `dyn ::realstd::io::LocalOutput`.\n         write(&mut local);\n         set_panic(Some(local));\n     } else if let Some(mut out) = panic_output() {"}, {"sha": "bdb8fc7807b3ad74a649e0e1f1b05b1e7766ef76", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -457,11 +457,16 @@ impl Builder {\n         let my_packet: Arc<UnsafeCell<Option<Result<T>>>> = Arc::new(UnsafeCell::new(None));\n         let their_packet = my_packet.clone();\n \n+        let (stdout, stderr) = crate::io::clone_io();\n+\n         let main = move || {\n             if let Some(name) = their_thread.cname() {\n                 imp::Thread::set_name(name);\n             }\n \n+            crate::io::set_print(stdout);\n+            crate::io::set_panic(stderr);\n+\n             // SAFETY: the stack guard passed is the one for the current thread.\n             // This means the current thread's stack and the new thread's stack\n             // are properly set and protected from each other."}, {"sha": "dfbf0a3b72f54cd9d4f744ba937a27b98ce39616", "filename": "library/test/src/helpers/sink.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Ftest%2Fsrc%2Fhelpers%2Fsink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/library%2Ftest%2Fsrc%2Fhelpers%2Fsink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fsink.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -6,6 +6,7 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n+#[derive(Clone)]\n pub struct Sink(Arc<Mutex<Vec<u8>>>);\n \n impl Sink {\n@@ -14,6 +15,12 @@ impl Sink {\n     }\n }\n \n+impl io::LocalOutput for Sink {\n+    fn clone_box(&self) -> Box<dyn io::LocalOutput> {\n+        Box::new(self.clone())\n+    }\n+}\n+\n impl Write for Sink {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         Write::write(&mut *self.0.lock().unwrap(), data)"}, {"sha": "21fc12759f87c587ec11dd40ef8a85ae01911e25", "filename": "src/test/ui/panic-while-printing.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-while-printing.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -5,7 +5,7 @@\n \n use std::fmt;\n use std::fmt::{Display, Formatter};\n-use std::io::set_panic;\n+use std::io::{self, set_panic, LocalOutput, Write};\n \n pub struct A;\n \n@@ -15,8 +15,23 @@ impl Display for A {\n     }\n }\n \n+struct Sink;\n+impl Write for Sink {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        Ok(buf.len())\n+    }\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+impl LocalOutput for Sink {\n+    fn clone_box(&self) -> Box<dyn LocalOutput> {\n+        Box::new(Sink)\n+    }\n+}\n+\n fn main() {\n-    set_panic(Some(Box::new(Vec::new())));\n+    set_panic(Some(Box::new(Sink)));\n     assert!(std::panic::catch_unwind(|| {\n         eprintln!(\"{}\", A);\n     })"}, {"sha": "6bec48cd816789128251ace2309cf820aad85cca", "filename": "src/test/ui/test-thread-capture.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-capture.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: --test\n+// run-fail\n+// run-flags: --test-threads=1\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=0\n+// ignore-emscripten no threads support\n+\n+#[test]\n+fn thready_pass() {\n+    println!(\"fee\");\n+    std::thread::spawn(|| {\n+        println!(\"fie\");\n+        println!(\"foe\");\n+    })\n+    .join()\n+    .unwrap();\n+    println!(\"fum\");\n+}\n+\n+#[test]\n+fn thready_fail() {\n+    println!(\"fee\");\n+    std::thread::spawn(|| {\n+        println!(\"fie\");\n+        println!(\"foe\");\n+    })\n+    .join()\n+    .unwrap();\n+    println!(\"fum\");\n+    panic!();\n+}"}, {"sha": "1102aadab02a9f916355b8fa6fe9bfe0dfe0e0ac", "filename": "src/test/ui/test-thread-capture.run.stdout", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-capture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-capture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-capture.run.stdout?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -0,0 +1,21 @@\n+\n+running 2 tests\n+test thready_fail ... FAILED\n+test thready_pass ... ok\n+\n+failures:\n+\n+---- thready_fail stdout ----\n+fee\n+fie\n+foe\n+fum\n+thread 'main' panicked at 'explicit panic', $DIR/test-thread-capture.rs:30:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+\n+\n+failures:\n+    thready_fail\n+\n+test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "82df6e77cb1dab318b6eea63d0a3a3738808404e", "filename": "src/test/ui/test-thread-nocapture.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-nocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-nocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-nocapture.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: --test\n+// run-fail\n+// run-flags: --test-threads=1 --nocapture\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=0\n+// ignore-emscripten no threads support\n+\n+#[test]\n+fn thready_pass() {\n+    println!(\"fee\");\n+    std::thread::spawn(|| {\n+        println!(\"fie\");\n+        println!(\"foe\");\n+    })\n+    .join()\n+    .unwrap();\n+    println!(\"fum\");\n+}\n+\n+#[test]\n+fn thready_fail() {\n+    println!(\"fee\");\n+    std::thread::spawn(|| {\n+        println!(\"fie\");\n+        println!(\"foe\");\n+    })\n+    .join()\n+    .unwrap();\n+    println!(\"fum\");\n+    panic!();\n+}"}, {"sha": "98bd96d0abe83cf66d70558d13d14856436f23b8", "filename": "src/test/ui/test-thread-nocapture.run.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stderr?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'explicit panic', $DIR/test-thread-nocapture.rs:30:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "77b42ed88d63fb0aabdf767c62093d82b9482b30", "filename": "src/test/ui/test-thread-nocapture.run.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stdout?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -0,0 +1,20 @@\n+\n+running 2 tests\n+test thready_fail ... fee\n+fie\n+foe\n+fum\n+FAILED\n+test thready_pass ... fee\n+fie\n+foe\n+fum\n+ok\n+\n+failures:\n+\n+failures:\n+    thready_fail\n+\n+test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "bc4bedac196ec467047a3e11c91eadb8b14ab059", "filename": "src/test/ui/threads-sendsync/task-stderr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288fa46e04cd5faf53d369a1a640a97e2bb08/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs?ref=56d288fa46e04cd5faf53d369a1a640a97e2bb08", "patch": "@@ -16,6 +16,11 @@ impl Write for Sink {\n     }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n+impl io::LocalOutput for Sink {\n+    fn clone_box(&self) -> Box<dyn io::LocalOutput> {\n+        Box::new(Sink(self.0.clone()))\n+    }\n+}\n \n fn main() {\n     let data = Arc::new(Mutex::new(Vec::new()));"}]}