{"sha": "d8b299d179653cbde783f62f70b5531dbaa5c5a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjI5OWQxNzk2NTNjYmRlNzgzZjYyZjcwYjU1MzFkYmFhNWM1YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-05T18:28:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-05T18:28:56Z"}, "message": "auto merge of #8293 : dim-an/rust/trie-iterator, r=thestinger\n\nCloses #5506.", "tree": {"sha": "19438e4cb330089609afa87a74014c4574cea9df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19438e4cb330089609afa87a74014c4574cea9df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b299d179653cbde783f62f70b5531dbaa5c5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b299d179653cbde783f62f70b5531dbaa5c5a6", "html_url": "https://github.com/rust-lang/rust/commit/d8b299d179653cbde783f62f70b5531dbaa5c5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b299d179653cbde783f62f70b5531dbaa5c5a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1eb1916e8f9124cbaa90a823fed8341697521c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1eb1916e8f9124cbaa90a823fed8341697521c", "html_url": "https://github.com/rust-lang/rust/commit/2d1eb1916e8f9124cbaa90a823fed8341697521c"}, {"sha": "28165d5ad8f944eb4d3225b113d03fdeefa662a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/28165d5ad8f944eb4d3225b113d03fdeefa662a0", "html_url": "https://github.com/rust-lang/rust/commit/28165d5ad8f944eb4d3225b113d03fdeefa662a0"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "6f61d29780f044307d048aff29d1ae0de826a547", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d8b299d179653cbde783f62f70b5531dbaa5c5a6/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b299d179653cbde783f62f70b5531dbaa5c5a6/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=d8b299d179653cbde783f62f70b5531dbaa5c5a6", "patch": "@@ -14,6 +14,7 @@ use prelude::*;\n use iterator::{IteratorUtil, FromIterator, Extendable};\n use uint;\n use util::{swap, replace};\n+use vec;\n \n // FIXME: #5244: need to manually update the TrieNode constructor\n static SHIFT: uint = 4;\n@@ -146,6 +147,15 @@ impl<T> TrieMap<T> {\n     pub fn each_value_reverse(&self, f: &fn(&T) -> bool) -> bool {\n         self.each_reverse(|_, v| f(v))\n     }\n+\n+    /// Get an iterator over the key-value pairs in the map\n+    pub fn iter<'a>(&'a self) -> TrieMapIterator<'a, T> {\n+        TrieMapIterator {\n+            stack: ~[self.root.children.iter()],\n+            remaining_min: self.length,\n+            remaining_max: self.length\n+        }\n+    }\n }\n \n impl<T, Iter: Iterator<(uint, T)>> FromIterator<(uint, T), Iter> for TrieMap<T> {\n@@ -217,6 +227,12 @@ impl TrieSet {\n     pub fn each_reverse(&self, f: &fn(&uint) -> bool) -> bool {\n         self.map.each_key_reverse(f)\n     }\n+\n+    /// Get an iterator over the values in the set\n+    #[inline]\n+    pub fn iter<'a>(&'a self) -> TrieSetIterator<'a> {\n+        TrieSetIterator{iter: self.map.iter()}\n+    }\n }\n \n impl<Iter: Iterator<uint>> FromIterator<uint, Iter> for TrieSet {\n@@ -366,6 +382,61 @@ fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n     return ret;\n }\n \n+/// Forward iterator over a map\n+pub struct TrieMapIterator<'self, T> {\n+    priv stack: ~[vec::VecIterator<'self, Child<T>>],\n+    priv remaining_min: uint,\n+    priv remaining_max: uint\n+}\n+\n+impl<'self, T> Iterator<(uint, &'self T)> for TrieMapIterator<'self, T> {\n+    fn next(&mut self) -> Option<(uint, &'self T)> {\n+        while !self.stack.is_empty() {\n+            match self.stack[self.stack.len() - 1].next() {\n+                None => {\n+                    self.stack.pop();\n+                }\n+                Some(ref child) => {\n+                    match **child {\n+                        Internal(ref node) => {\n+                            self.stack.push(node.children.iter());\n+                        }\n+                        External(key, ref value) => {\n+                            self.remaining_max -= 1;\n+                            if self.remaining_min > 0 {\n+                                self.remaining_min -= 1;\n+                            }\n+                            return Some((key, value));\n+                        }\n+                        Nothing => {}\n+                    }\n+                }\n+            }\n+        }\n+        return None;\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        (self.remaining_min, Some(self.remaining_max))\n+    }\n+}\n+\n+/// Forward iterator over a set\n+pub struct TrieSetIterator<'self> {\n+    priv iter: TrieMapIterator<'self, ()>\n+}\n+\n+impl<'self> Iterator<uint> for TrieSetIterator<'self> {\n+    fn next(&mut self) -> Option<uint> {\n+        do self.iter.next().map |&(key, _)| { key }\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n #[cfg(test)]\n pub fn check_integrity<T>(trie: &TrieNode<T>) {\n     assert!(trie.count != 0);\n@@ -553,6 +624,29 @@ mod test_map {\n             assert_eq!(map.find(&k), Some(&v));\n         }\n     }\n+\n+    #[test]\n+    fn test_iteration() {\n+        let empty_map : TrieMap<uint> = TrieMap::new();\n+        assert_eq!(empty_map.iter().next(), None);\n+\n+        let first = uint::max_value - 10000;\n+        let last = uint::max_value;\n+\n+        let mut map = TrieMap::new();\n+        do uint::range_rev(last, first) |x| {\n+            map.insert(x, x / 2);\n+            true\n+        };\n+\n+        let mut i = 0;\n+        for (k, &v) in map.iter() {\n+            assert_eq!(k, first + i);\n+            assert_eq!(v, k / 2);\n+            i += 1;\n+        }\n+        assert_eq!(i, last - first);\n+    }\n }\n \n #[cfg(test)]"}]}