{"sha": "f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTc2MWRkYjNlOTZiNTkzM2QwY2FjOWYxNDBmNzNkMjQwMmJmNmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-14T18:31:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:13:22Z"}, "message": "enable intrinsics for multiple arch", "tree": {"sha": "bd06ad8d572494d65fb3e98bb84ed40bb04bb19c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd06ad8d572494d65fb3e98bb84ed40bb04bb19c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "html_url": "https://github.com/rust-lang/rust/commit/f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c1f999ac8c1ee2d823806429b6eebce0b7e854", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c1f999ac8c1ee2d823806429b6eebce0b7e854", "html_url": "https://github.com/rust-lang/rust/commit/f0c1f999ac8c1ee2d823806429b6eebce0b7e854"}], "stats": {"total": 186, "additions": 165, "deletions": 21}, "files": [{"sha": "2a43b7c1667aef051ddd6e49e9956b0b6fed51c0", "filename": "mk/intrinsics.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/mk%2Fintrinsics.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/mk%2Fintrinsics.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fintrinsics.mk?ref=f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "patch": "@@ -11,7 +11,7 @@ $(INTRINSICS_LL):  $(INTRINSICS_LL_IN) $(MKFILES)\n \t@$(call E, mkdir: intrinsics)\n \t$(Q)mkdir -p intrinsics\n \t@$(call E, sed: $@)\n-\t$(Q)sed s/@CFG_LLVM_TRIPLE@/$(CFG_LLVM_TRIPLE)/g $< > $@\n+\t$(Q)sed s/@CFG_TARGET_TRIPLE@/$(CFG_LLVM_TRIPLE)/g $< > $@\n \n $(INTRINSICS_BC):   $(INTRINSICS_LL) $(MKFILES)\n \t@$(call E, llvm-as: $@)"}, {"sha": "a486edd6ea87c2e14ea8c77d1b6711792bfb974e", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "patch": "@@ -103,6 +103,8 @@ RUNTIME_INCS := -I $(S)src/rt/isaac -I $(S)src/rt/uthash \\\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o) $(RUNTIME_LL:.ll=.o) $(RUNTIME_S:.S=.o)\n RUNTIME_LIBS := $(LIBUV_LIB)\n \n+RT_COMPILE_C := $(call CFG_COMPILE_C, $(0), $(1) -I $(S)src/rt/arch/$(2))\n+\n rt/%.o: rt/%.cpp $(MKFILES)\n \t@$(call E, compile: $@)\n \t$(Q)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<"}, {"sha": "1b1d177e20fb736a1aee46006262b4feae44dbf2", "filename": "mk/target.mk", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "patch": "@@ -7,9 +7,19 @@\n \n define TARGET_STAGE_N\n \n-$$(TARGET_LIB$(1)$(2))/intrinsics.bc: $$(INTRINSICS_BC)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n+TARGET_HOST    := $$(word 1,$$(subst -, ,$(2)))\n+\n+# For some reason there is (sometimes) a mismatch here between i686, i386, etc\n+INTR_HOST := $$(subst i686,i386,$$(TARGET_HOST))\n+\n+$$(TARGET_LIB$(1)$(2))/intrinsics.ll: \\\n+\t\t$$(S)src/rt/intrinsics/intrinsics.$$(INTR_HOST).ll.in\n+\t@$$(call E, sed: $$@)\n+\tsed s/@CFG_TARGET_TRIPLE@/$(2)/ $$< > $$@\n+\n+$$(TARGET_LIB$(1)$(2))/intrinsics.bc: $$(TARGET_LIB$(1)$(2))/intrinsics.ll\n+\t@$$(call E, llvms-as: $$@)\n+\t$$(LLVM_AS) -o $$@ $$<\n \n $$(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB): \\\n \t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\"}, {"sha": "45fd5482f4a7372763529f018b9deac82c0da54c", "filename": "src/etc/gen-intrinsics", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/src%2Fetc%2Fgen-intrinsics", "raw_url": "https://github.com/rust-lang/rust/raw/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/src%2Fetc%2Fgen-intrinsics", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgen-intrinsics?ref=f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "patch": "@@ -0,0 +1,19 @@\n+#!/bin/sh\n+\n+# This script generates new definitions for the intrinsics using\n+# clang. This is not currently in the Makefile to avoid any dependency\n+# on clang.\n+\n+for ARCH in i386 x86_64\n+do\n+    clang++ -emit-llvm -S -arch $ARCH -O3 -Isrc/rt/isaac -Isrc/rt/uthash \\\n+        -Isrc/rt/arch/$ARCH -fno-stack-protector \\\n+        -o src/rt/intrinsics/intrinsics.$ARCH.ll.in \\\n+        src/rt/intrinsics/intrinsics.cpp\n+    sed -i \"\" \\\n+        -e 's/^target datalayout =/; target datalayout =/' \\\n+        src/rt/intrinsics/intrinsics.$ARCH.ll.in\n+    sed -i \"\" \\\n+        -e 's/^target triple = \"[^\"]*\"/target triple = \"@CFG_TARGET_TRIPLE@\"/' \\\n+        src/rt/intrinsics/intrinsics.$ARCH.ll.in\n+done\n\\ No newline at end of file"}, {"sha": "93cc32fe99512e2c6e5d6ae4d0f05f5d79251279", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "renamed", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "patch": "@@ -1,5 +1,6 @@\n-; ModuleID = 'intrinsics.cpp'\n-target triple = \"@CFG_LLVM_TRIPLE@\"\n+; ModuleID = 'src/rt/intrinsics/intrinsics.cpp'\n+; target datalayout = \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32\"\n+target triple = \"@CFG_TARGET_TRIPLE@\"\n \n %0 = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n %1 = type { i32, %struct.rust_scheduler**, i32 }\n@@ -52,10 +53,10 @@ target triple = \"@CFG_LLVM_TRIPLE@\"\n %struct.rust_vec = type { i32, i32, [0 x i8] }\n %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %struct.rust_cond, %\"struct.std::_Rb_tree_node_base\", i32 }\n %\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n-%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n+%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n \n @.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\"\n-@.str1 = private unnamed_addr constant [15 x i8] c\"intrinsics.cpp\\00\"\n+@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\"\n \n define void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n   %1 = load %struct.rust_vec** %vp, align 4\n@@ -77,7 +78,7 @@ define void @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, i8**\n   ret void\n }\n \n-define void @rust_intrinsic_cast(%struct.rust_task* nocapture %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+define void @rust_intrinsic_cast(%struct.rust_task* %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n   %2 = load i32* %1, align 4\n   %3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n@@ -86,7 +87,7 @@ define void @rust_intrinsic_cast(%struct.rust_task* nocapture %task, i8* nocaptu\n   br i1 %5, label %7, label %6\n \n ; <label>:6                                       ; preds = %0\n-  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 32)\n+  tail call void @upcall_fail(%struct.rust_task* %task, i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i32 0, i32 0), i32 32)\n   br label %8\n \n ; <label>:7                                       ; preds = %0\n@@ -97,7 +98,7 @@ define void @rust_intrinsic_cast(%struct.rust_task* nocapture %task, i8* nocaptu\n   ret void\n }\n \n-declare void @upcall_fail(i8*, i8*, i32)\n+declare void @upcall_fail(%struct.rust_task*, i8*, i8*, i32)\n \n declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n \n@@ -106,16 +107,11 @@ define void @rust_intrinsic_addr_of(%struct.rust_task* nocapture %task, i8** noc\n   ret void\n }\n \n-define void @rust_intrinsic_recv(%struct.rust_task* nocapture %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n-  %1 = bitcast i8** %retptr to i32*\n-  tail call void @port_recv(i32* %1, %class.rust_port* %port)\n+define void @rust_intrinsic_recv(%struct.rust_task* %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n+  %1 = bitcast %struct.rust_task* %task to i8*\n+  %2 = bitcast i8** %retptr to i32*\n+  tail call void @port_recv(i8* %1, i32* %2, %class.rust_port* %port)\n   ret void\n }\n \n-declare void @port_recv(i32*, %class.rust_port*)\n-\n-define void @rust_intrinsic_get_type_desc(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* %ty) nounwind {\n-  %ty.c = bitcast %struct.type_desc* %ty to i8*\n-  store i8* %ty.c, i8** %retptr, align 4\n-  ret void\n-}\n+declare void @port_recv(i8*, i32*, %class.rust_port*)", "previous_filename": "src/rt/intrinsics/intrinsics.ll.in"}, {"sha": "50e2e9178d498aa64f12d5e5ede8be5e907d3f49", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/f05761ddb3e96b5933d0cac9f140f73d2402bf6a/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=f05761ddb3e96b5933d0cac9f140f73d2402bf6a", "patch": "@@ -0,0 +1,117 @@\n+; ModuleID = 'src/rt/intrinsics/intrinsics.cpp'\n+; target datalayout = \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64\"\n+target triple = \"@CFG_TARGET_TRIPLE@\"\n+\n+%0 = type { i64, %\"struct.memory_region::alloc_header\"**, i64 }\n+%1 = type { i64, %struct.rust_scheduler**, i64 }\n+%2 = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n+%3 = type { %struct.rust_task*, i64, i64, %class.rust_chan** }\n+%class.array_list = type { i64, %struct.rust_task**, i64 }\n+%class.circular_buffer = type { %class.rust_kernel*, i64, i64, i64, i64, i8* }\n+%class.context = type { %struct.registers_t, %class.context* }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n+%class.hash_map = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n+%class.indexed_list = type { i32 (...)**, %class.array_list }\n+%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_attr_t, %struct._opaque_pthread_t*, i8, i8 }\n+%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n+%class.ptr_vec = type { %struct.rust_task*, i64, i64, %struct.rust_token** }\n+%class.rust_chan = type { i64, %class.rust_kernel*, %struct.rust_task*, %class.rust_port*, i64, %class.circular_buffer }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i64 }\n+%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %1, %struct.randctx, i64, %2, i64, i32, i32, %struct.rust_env* }\n+%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n+%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n+%class.rust_port = type { i64, i64, %class.rust_kernel*, %struct.rust_task*, %class.rust_chan*, i64, %class.ptr_vec, %3, %class.lock_and_signal }\n+%class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n+%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n+%class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n+%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n+%class.timer = type { i32 (...)**, i64, i64 }\n+%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n+%struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }\n+%struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i64, i32, i32, i32, i32 }\n+%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }\n+%struct._opaque_pthread_attr_t = type { i64, [56 x i8] }\n+%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }\n+%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [1168 x i8] }\n+%struct.chan_handle = type { i64, i64 }\n+%\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n+%\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n+%\"struct.memory_region::alloc_header\" = type { i32, i32, i8*, i32, [0 x i8] }\n+%struct.randctx = type { i64, [256 x i64], [256 x i64], i64, i64, i64 }\n+%struct.registers_t = type { [7 x i64], [6 x i64], i64 }\n+%struct.rust_cond = type { i8 }\n+%struct.rust_env = type { i64, i64, i8*, i8, i8, i8* }\n+%struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i64, i64, i64, [0 x i8] }\n+%struct.rust_scheduler = type { %class.rust_thread, i64, i64, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i64, %struct._opaque_pthread_attr_t, %struct.rust_env*, %class.context }\n+%struct.rust_shape_tables = type { i8*, i8* }\n+%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, %class.array_list, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task_user = type { i64, i32, %struct.chan_handle, i64 }\n+%struct.rust_token = type opaque\n+%struct.rust_vec = type { i64, i64, [0 x i8] }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %struct.rust_cond, %\"struct.std::_Rb_tree_node_base\", i64 }\n+%\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n+%struct.stk_seg = type { i32, i64, [0 x i8] }\n+%struct.type_desc = type { %struct.type_desc**, i64, i64, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i64, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*, i8*, i8)*, i8*, %struct.rust_shape_tables*, i64, i64, %struct.UT_hash_handle, i64, [0 x %struct.type_desc*] }\n+\n+@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\"\n+@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\"\n+\n+define void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i64* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n+  %1 = load %struct.rust_vec** %vp, align 8\n+  %2 = getelementptr inbounds %struct.rust_vec* %1, i64 0, i32 0\n+  %3 = load i64* %2, align 8\n+  %4 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n+  %5 = load i64* %4, align 8\n+  %6 = udiv i64 %3, %5\n+  store i64 %6, i64* %retptr, align 8\n+  ret void\n+}\n+\n+define void @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind {\n+  %1 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n+  %2 = load i64* %1, align 8\n+  %3 = mul i64 %2, %count\n+  %4 = getelementptr inbounds i8* %ptr, i64 %3\n+  store i8* %4, i8** %retptr, align 8\n+  ret void\n+}\n+\n+define void @rust_intrinsic_cast(%struct.rust_task* %task, i8* nocapture %retptr, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+  %1 = getelementptr inbounds %struct.type_desc* %t1, i64 0, i32 1\n+  %2 = load i64* %1, align 8\n+  %3 = getelementptr inbounds %struct.type_desc* %t2, i64 0, i32 1\n+  %4 = load i64* %3, align 8\n+  %5 = icmp eq i64 %2, %4\n+  br i1 %5, label %7, label %6\n+\n+; <label>:6                                       ; preds = %0\n+  tail call void @upcall_fail(%struct.rust_task* %task, i8* getelementptr inbounds ([42 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i64 0, i64 0), i64 32)\n+  br label %8\n+\n+; <label>:7                                       ; preds = %0\n+  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %retptr, i8* %src, i64 %2, i32 1, i1 false)\n+  br label %8\n+\n+; <label>:8                                       ; preds = %7, %6\n+  ret void\n+}\n+\n+declare void @upcall_fail(%struct.rust_task*, i8*, i8*, i64)\n+\n+declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind\n+\n+define void @rust_intrinsic_addr_of(%struct.rust_task* nocapture %task, i8** nocapture %retptr, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n+  store i8* %valptr, i8** %retptr, align 8\n+  ret void\n+}\n+\n+define void @rust_intrinsic_recv(%struct.rust_task* %task, i8** %retptr, %struct.type_desc* nocapture %ty, %class.rust_port* %port) {\n+  %1 = bitcast %struct.rust_task* %task to i8*\n+  %2 = bitcast i8** %retptr to i64*\n+  tail call void @port_recv(i8* %1, i64* %2, %class.rust_port* %port)\n+  ret void\n+}\n+\n+declare void @port_recv(i8*, i64*, %class.rust_port*)"}]}