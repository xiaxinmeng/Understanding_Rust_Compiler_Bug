{"sha": "3397fa4701f64062777a6eb09f7b27a9304ff192", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTdmYTQ3MDFmNjQwNjI3NzdhNmViMDlmN2IyN2E5MzA0ZmYxOTI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T12:57:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T12:57:49Z"}, "message": "Move to short kind kinds words in test suite\n\nIssue #1076", "tree": {"sha": "33cc3bca17772c286c85f697169215e9127509f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33cc3bca17772c286c85f697169215e9127509f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3397fa4701f64062777a6eb09f7b27a9304ff192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3397fa4701f64062777a6eb09f7b27a9304ff192", "html_url": "https://github.com/rust-lang/rust/commit/3397fa4701f64062777a6eb09f7b27a9304ff192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3397fa4701f64062777a6eb09f7b27a9304ff192/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba4ddc6a4c7ac382aeab60ab016159e57f8f5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba4ddc6a4c7ac382aeab60ab016159e57f8f5df", "html_url": "https://github.com/rust-lang/rust/commit/cba4ddc6a4c7ac382aeab60ab016159e57f8f5df"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "af2a4e2889dd6824330be1d93f54bba261e93e22", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -55,25 +55,25 @@ mod map_reduce {\n     export reducer;\n     export map_reduce;\n \n-    type putter<unique K, unique V> = fn(K, V);\n+    type putter<uniq K, uniq V> = fn(K, V);\n \n     // FIXME: the first K1 parameter should probably be a -, but that\n     // doesn't parse at the moment.\n-    type mapper<unique K1, unique K2, unique V> = fn(K1, putter<K2, V>);\n+    type mapper<uniq K1, uniq K2, uniq V> = fn(K1, putter<K2, V>);\n \n-    type getter<unique V> = fn() -> option<V>;\n+    type getter<uniq V> = fn() -> option<V>;\n \n-    type reducer<unique K, unique V> = fn(K, getter<V>);\n+    type reducer<uniq K, uniq V> = fn(K, getter<V>);\n \n-    tag ctrl_proto<unique K, unique V> {\n+    tag ctrl_proto<uniq K, uniq V> {\n         find_reducer(K, chan<chan<reduce_proto<V>>>);\n         mapper_done;\n     }\n \n-    tag reduce_proto<unique V> { emit_val(V); done; ref; release; }\n+    tag reduce_proto<uniq V> { emit_val(V); done; ref; release; }\n \n-    fn start_mappers<unique K1, unique K2,\n-                     unique V>(map: mapper<K1, K2, V>,\n+    fn start_mappers<uniq K1, uniq K2,\n+                     uniq V>(map: mapper<K1, K2, V>,\n                          ctrl: chan<ctrl_proto<K2, V>>, inputs: [K1]) ->\n        [joinable_task] {\n         let tasks = [];\n@@ -84,15 +84,15 @@ mod map_reduce {\n         ret tasks;\n     }\n \n-    fn map_task<unique K1, unique K2,\n-                unique V>(-map: mapper<K1, K2, V>,\n+    fn map_task<uniq K1, uniq K2,\n+                uniq V>(-map: mapper<K1, K2, V>,\n                           -ctrl: chan<ctrl_proto<K2, V>>,\n                     -input: K1) {\n         // log_err \"map_task \" + input;\n         let intermediates = treemap::init();\n \n-        fn emit<unique K2,\n-                unique V>(im: treemap::treemap<K2, chan<reduce_proto<V>>>,\n+        fn emit<uniq K2,\n+                uniq V>(im: treemap::treemap<K2, chan<reduce_proto<V>>>,\n                     ctrl: chan<ctrl_proto<K2, V>>, key: K2, val: V) {\n             let c;\n             alt treemap::find(im, key) {\n@@ -110,15 +110,15 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        fn finish<unique K, unique V>(_k: K, v: chan<reduce_proto<V>>) {\n+        fn finish<uniq K, uniq V>(_k: K, v: chan<reduce_proto<V>>) {\n             send(v, release);\n         }\n         treemap::traverse(intermediates, finish);\n         send(ctrl, mapper_done);\n     }\n \n-    fn reduce_task<unique K,\n-                   unique V>(-reduce: reducer<K, V>, -key: K,\n+    fn reduce_task<uniq K,\n+                   uniq V>(-reduce: reducer<K, V>, -key: K,\n                        -out: chan<chan<reduce_proto<V>>>) {\n         let p = port();\n \n@@ -127,7 +127,7 @@ mod map_reduce {\n         let ref_count = 0;\n         let is_done = false;\n \n-        fn get<unique V>(p: port<reduce_proto<V>>,\n+        fn get<uniq V>(p: port<reduce_proto<V>>,\n                          &ref_count: int, &is_done: bool)\n            -> option<V> {\n             while !is_done || ref_count > 0 {\n@@ -150,8 +150,8 @@ mod map_reduce {\n         reduce(key, bind get(p, ref_count, is_done));\n     }\n \n-    fn map_reduce<unique K1, unique K2,\n-                  unique V>(map: mapper<K1, K2, V>, reduce: reducer<K2, V>,\n+    fn map_reduce<uniq K1, uniq K2,\n+                  uniq V>(map: mapper<K1, K2, V>, reduce: reducer<K2, V>,\n                       inputs: [K1]) {\n         let ctrl = port();\n \n@@ -194,7 +194,7 @@ mod map_reduce {\n             }\n         }\n \n-        fn finish<unique K, unique V>(_k: K, v: chan<reduce_proto<V>>) {\n+        fn finish<uniq K, uniq V>(_k: K, v: chan<reduce_proto<V>>) {\n             send(v, done);\n         }\n         treemap::traverse(reducers, finish);"}, {"sha": "c56655ba322dbd55cd8202808a936e2727b7532a", "filename": "src/test/compile-fail/implicit-copy-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fcompile-fail%2Fimplicit-copy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fcompile-fail%2Fimplicit-copy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimplicit-copy-2.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -4,7 +4,7 @@ resource r(i: @mutable int) {\n     *i = *i + 1;\n }\n \n-fn movearg<pinned T>(i: T) {\n+fn movearg<pin T>(i: T) {\n     // Implicit copy to mutate reference i\n     let j <- i;\n }"}, {"sha": "2504a4d689015130e4e56a8f64649bc947738b4c", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: needed unique type\n \n-fn f<unique T>(i: T) {\n+fn f<uniq T>(i: T) {\n }\n \n fn main() {"}, {"sha": "7a70292f526510a248740fa24dbaa78c374888ef", "filename": "src/test/compile-fail/use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: Unsatisfied precondition constraint\n-fn send<unique T>(ch: _chan<T>, -data: T) { log ch; log data; fail; }\n+fn send<uniq T>(ch: _chan<T>, -data: T) { log ch; log data; fail; }\n type _chan<T> = int;\n \n // Tests that \"log message;\" is flagged as using"}, {"sha": "c9ebbfe5d0841460d9084549497ca3f78b715bed", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -4,8 +4,8 @@ fn test00_start(ch: chan_t<int>, message: int) { send(ch, message); }\n type task_id = int;\n type port_id = int;\n \n-type chan_t<unique T> = {task: task_id, port: port_id};\n+type chan_t<uniq T> = {task: task_id, port: port_id};\n \n-fn send<unique T>(ch: chan_t<T>, -data: T) { fail; }\n+fn send<uniq T>(ch: chan_t<T>, -data: T) { fail; }\n \n fn main() { fail \"quux\"; }"}, {"sha": "e9a4e0679b70d112cc48e3302555699463da5848", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -5,7 +5,7 @@ import std::comm::port;\n import std::comm::send;\n import std::comm::recv;\n \n-fn echo<unique T>(c: chan<T>, oc: chan<chan<T>>) {\n+fn echo<uniq T>(c: chan<T>, oc: chan<chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n     let p = port::<T>();"}, {"sha": "6fe82172814dbbda43b3b4bec37ea69b77d709d2", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help<A, unique B>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, uniq B>(f: fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f(bind fix_help(f, _), x);\n }\n \n-fn fix<A, unique B>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, uniq B>(f: fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret bind fix_help(f, _);\n }\n "}, {"sha": "e0da008d75c31a0f9fe6b9affc33989f929ea5da", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -1,6 +1,6 @@\n // This is what the signature to spawn should look like with bare functions\n \n-fn spawn<unique T>(val: T, f: fn(T)) {\n+fn spawn<uniq T>(val: T, f: fn(T)) {\n     f(val);\n }\n "}, {"sha": "d1b7598d35e4253e93ab49b33f19b1718a1c796f", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -1,6 +1,6 @@\n \n \n-fn id<unique T>(t: T) -> T { ret t; }\n+fn id<uniq T>(t: T) -> T { ret t; }\n \n fn main() {\n     let expected = ~100;"}, {"sha": "96cc02337cc6607519c6491998bb3ec1f611d81c", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -5,7 +5,7 @@ type closable = @mutable bool;\n \n resource close_res(i: closable) { *i = false; }\n \n-tag option<pinned T> { none; some(T); }\n+tag option<pin T> { none; some(T); }\n \n fn sink(res: option<close_res>) { }\n "}, {"sha": "0cc9a45d062280a9ec0b928d2c33e73aa592bbbd", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -4,9 +4,9 @@ import std::comm::send;\n import std::comm::port;\n \n // tests that ctrl's type gets inferred properly\n-type command<unique K, unique V> = {key: K, val: V};\n+type command<uniq K, uniq V> = {key: K, val: V};\n \n-fn cache_server<unique K, unique V>(c: chan<chan<command<K, V>>>) {\n+fn cache_server<uniq K, uniq V>(c: chan<chan<command<K, V>>>) {\n     let ctrl = port();\n     send(c, chan(ctrl));\n }"}, {"sha": "445632e33b5443cf108b51bc24da59926691dbd0", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -1,6 +1,6 @@\n-fn p_foo<T>(pinned: T) { }\n+fn p_foo<pin T>(pinned: T) { }\n fn s_foo<T>(shared: T) { }\n-fn u_foo<unique T>(unique: T) { }\n+fn u_foo<uniq T>(unique: T) { }\n \n resource r(i: int) { }\n "}, {"sha": "da8babb0b9aa7e78f46b80b3b4ddf646dffe3c11", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -1,10 +1,10 @@\n fn unique() {\n \n-    fn f<unique T>(i: T, j: T) {\n+    fn f<uniq T>(i: T, j: T) {\n         assert i == j;\n     }\n \n-    fn g<unique T>(i: T, j: T) {\n+    fn g<uniq T>(i: T, j: T) {\n         assert i != j;\n     }\n \n@@ -36,11 +36,11 @@ fn shared() {\n \n fn pinned() {\n \n-    fn f<T>(i: T, j: T) {\n+    fn f<pin T>(i: T, j: T) {\n         assert i == j;\n     }\n \n-    fn g<T>(i: T, j: T) {\n+    fn g<pin T>(i: T, j: T) {\n         assert i != j;\n     }\n "}, {"sha": "1c983251937ed7d753369bf1f7a3b630a3fd1c90", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3397fa4701f64062777a6eb09f7b27a9304ff192/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=3397fa4701f64062777a6eb09f7b27a9304ff192", "patch": "@@ -80,7 +80,7 @@ fn test_join_convenient() {\n #[ignore]\n fn spawn_polymorphic() {\n     // FIXME #1038: Can't spawn palymorphic functions\n-    /*fn foo<unique T>(x: T) { log_err x; }\n+    /*fn foo<uniq T>(x: T) { log_err x; }\n \n     task::spawn(true, foo);\n     task::spawn(42, foo);*/"}]}