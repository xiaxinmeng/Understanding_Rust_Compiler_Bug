{"sha": "15833d91acc65895d4cfd0949ab24e9c71e6e48c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODMzZDkxYWNjNjU4OTVkNGNmZDA5NDlhYjI0ZTljNzFlNmU0OGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-11T20:31:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-11T20:31:20Z"}, "message": "auto merge of #16429 : steveklabnik/rust/guide_vectors, r=cmr\n\nSince https://github.com/rust-lang/rust/pull/16380 didn't get pulled in yet, I added it in here too.\r\n\r\nThis covers the very, very, very basics of vectors. I wanted to have a section that mentioned them, but I'm\r\nunsure what else I should cover. So I just did the absolute simplest things. Feedback very welcome.", "tree": {"sha": "b9a33e095eb123156c64dce89f3c0f6d91550273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a33e095eb123156c64dce89f3c0f6d91550273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15833d91acc65895d4cfd0949ab24e9c71e6e48c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15833d91acc65895d4cfd0949ab24e9c71e6e48c", "html_url": "https://github.com/rust-lang/rust/commit/15833d91acc65895d4cfd0949ab24e9c71e6e48c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15833d91acc65895d4cfd0949ab24e9c71e6e48c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6faad3ec3aba8e9ea7c68331b7c6561890929658", "url": "https://api.github.com/repos/rust-lang/rust/commits/6faad3ec3aba8e9ea7c68331b7c6561890929658", "html_url": "https://github.com/rust-lang/rust/commit/6faad3ec3aba8e9ea7c68331b7c6561890929658"}, {"sha": "8175cba597a18875ae04071b345479d4311ed02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8175cba597a18875ae04071b345479d4311ed02e", "html_url": "https://github.com/rust-lang/rust/commit/8175cba597a18875ae04071b345479d4311ed02e"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "2bc3fe7111f7f901c16390f9be559421ceb37ede", "filename": "src/doc/guide.md", "status": "modified", "additions": 71, "deletions": 6, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/15833d91acc65895d4cfd0949ab24e9c71e6e48c/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/15833d91acc65895d4cfd0949ab24e9c71e6e48c/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=15833d91acc65895d4cfd0949ab24e9c71e6e48c", "patch": "@@ -1341,7 +1341,7 @@ computer science: naming things, cache invalidation, and off-by-one errors.\"\n The joke, of course, being that the setup says \"two hard problems\" but then\n lists three things. This happens quite a bit with \"C style\" `for` loops.\n \n-We'll talk more about `for` when we cover **vector**s, later in the Guide.\n+We'll talk more about `for` when we cover **iterator**s, later in the Guide.\n \n ## `while`\n \n@@ -1427,11 +1427,6 @@ for x in range(0i, 10i) {\n \n Both `continue` and `break` are valid in both kinds of loops.\n \n-We have now learned all of the most basic Rust concepts. We're ready to start\n-building our guessing game, but we need to know how to do one last thing first:\n-get input from the keyboard. You can't have a guessing game without the ability\n-to guess!\n-\n # Strings\n \n Strings are an important concept for any programmer to master. Rust's string\n@@ -1512,6 +1507,76 @@ low-level details matter, they really matter. Just remember that `String`s\n allocate memory and control their data, while `&str`s are a reference to\n another string, and you'll be all set.\n \n+# Vectors\n+\n+Like many programming languages, Rust has a list type for when you want a list\n+of things. But similar to strings, Rust has different types to represent this\n+idea: `Vec<T>` (a 'vector'), `[T, .. N]` (an 'array'), and `&[T]` (a 'slice').\n+Whew!\n+\n+Vectors are similar to `String`s: they have a dynamic length, and they\n+allocate enough memory to fit. You can create a vector with the `vec!` macro:\n+\n+```{rust}\n+let nums = vec![1i, 2i, 3i];\n+```\n+\n+Notice that unlike the `println!` macro we've used in the past, we use square\n+brackets (`[]`) with `vec!`. Rust allows you to use either in either situation,\n+this is just convention.\n+\n+You can create an array with just square brackets:\n+\n+```{rust}\n+let nums = [1i, 2i, 3i];\n+```\n+\n+So what's the difference? An array has a fixed size, so you can't add or\n+subtract elements:\n+\n+```{rust,ignore}\n+let mut nums = vec![1i, 2i, 3i];\n+nums.push(4i); // works\n+\n+let mut nums = [1i, 2i, 3i];\n+nums.push(4i); //  error: type `[int, .. 3]` does not implement any method\n+               // in scope named `push`\n+```\n+\n+The `push()` method lets you append a value to the end of the vector. But\n+since arrays have fixed sizes, adding an element doesn't make any sense.\n+You can see how it has the exact type in the error message: `[int, .. 3]`.\n+An array of `int`s, with length 3.\n+\n+Similar to `&str`, a slice is a reference to another array. We can get a\n+slice from a vector by using the `as_slice()` method:\n+\n+```{rust}\n+let vec = vec![1i, 2i, 3i];\n+let slice = vec.as_slice();\n+```\n+\n+All three types implement an `iter()` method, which returns an iterator. We'll\n+talk more about the details of iterators later, but for now, the `iter()` method\n+allows you to write a `for` loop that prints out the contents of a vector, array,\n+or slice:\n+\n+```{rust}\n+let vec = vec![1i, 2i, 3i];\n+\n+for i in vec.iter() {\n+    println!(\"{}\", i);\n+}\n+```\n+\n+This code will print each number in order, on its own line.\n+\n+There's a whole lot more to vectors, but that's enough to get started. We have\n+now learned all of the most basic Rust concepts. We're ready to start building\n+our guessing game, but we need to know how to do one last thing first: get\n+input from the keyboard. You can't have a guessing game without the ability to\n+guess!\n+\n # Standard Input\n \n Getting input from the keyboard is pretty easy, but uses some things"}]}