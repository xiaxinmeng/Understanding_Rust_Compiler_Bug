{"sha": "e9ecd8805dadbac76173e5207c18b42374e0aba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZWNkODgwNWRhZGJhYzc2MTczZTUyMDdjMThiNDIzNzRlMGFiYTE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-11-21T21:05:25Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-22T02:17:05Z"}, "message": "further lowering of signature data", "tree": {"sha": "8e87c960b2a2e98e866c64640965c94ad8455007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e87c960b2a2e98e866c64640965c94ad8455007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ecd8805dadbac76173e5207c18b42374e0aba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ecd8805dadbac76173e5207c18b42374e0aba1", "html_url": "https://github.com/rust-lang/rust/commit/e9ecd8805dadbac76173e5207c18b42374e0aba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ecd8805dadbac76173e5207c18b42374e0aba1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb27b5166e9e35cd315acda6b6db91fe4c220fcd", "html_url": "https://github.com/rust-lang/rust/commit/eb27b5166e9e35cd315acda6b6db91fe4c220fcd"}], "stats": {"total": 97, "additions": 89, "deletions": 8}, "files": [{"sha": "777e64fe77f8b85623373b23b973560933233432", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e9ecd8805dadbac76173e5207c18b42374e0aba1/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ecd8805dadbac76173e5207c18b42374e0aba1/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=e9ecd8805dadbac76173e5207c18b42374e0aba1", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n use external_data::*;\n-use data::{VariableKind, Visibility};\n+use data::{VariableKind, Visibility, SigElement};\n use dump::Dump;\n use super::Format;\n \n@@ -179,7 +179,7 @@ struct Def {\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n     docs: String,\n-    sig: Option<Signature>,\n+    sig: Option<JsonSignature>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -277,7 +277,7 @@ impl From<StructData> for Option<Def> {\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: Some(data.sig),\n+            sig: Some(From::from(data.sig)),\n         }),\n             _ => None,\n         }\n@@ -400,6 +400,7 @@ impl From<TypeDefData> for Option<Def> {\n         }\n     }\n }\n+\n impl From<VariableData> for Option<Def> {\n     fn from(data: VariableData) -> Option<Def> {\n         match data.visibility {\n@@ -419,9 +420,49 @@ impl From<VariableData> for Option<Def> {\n                 parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n                 docs: data.docs,\n-                sig: data.sig,\n+                sig: data.sig.map(|s| From::from(s)),\n             }),\n             _ => None,\n         }\n     }\n }\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSignature {\n+    span: SpanData,\n+    text: String,\n+    ident_start: usize,\n+    ident_end: usize,\n+    defs: Vec<JsonSigElement>,\n+    refs: Vec<JsonSigElement>,\n+}\n+\n+impl From<Signature> for JsonSignature {\n+    fn from(data: Signature) -> JsonSignature {\n+        JsonSignature {\n+            span: data.span,\n+            text: data.text,\n+            ident_start: data.ident_start,\n+            ident_end: data.ident_end,\n+            defs: data.defs.into_iter().map(|s| From::from(s)).collect(),\n+            refs: data.refs.into_iter().map(|s| From::from(s)).collect(),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSigElement {\n+    id: Id,\n+    start: usize,\n+    end: usize,\n+}\n+\n+impl From<SigElement> for JsonSigElement {\n+    fn from(data: SigElement) -> JsonSigElement {\n+        JsonSigElement {\n+            id: From::from(data.id),\n+            start: data.start,\n+            end: data.end,\n+        }\n+    }\n+}"}, {"sha": "818190ca7d2851184772222f71d43afd3fe1ce2e", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e9ecd8805dadbac76173e5207c18b42374e0aba1/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ecd8805dadbac76173e5207c18b42374e0aba1/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=e9ecd8805dadbac76173e5207c18b42374e0aba1", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc_serialize::json::as_json;\n \n use external_data::*;\n-use data::VariableKind;\n+use data::{VariableKind, SigElement};\n use dump::Dump;\n use super::Format;\n \n@@ -224,7 +224,7 @@ struct Def {\n     children: Vec<Id>,\n     decl_id: Option<Id>,\n     docs: String,\n-    sig: Option<Signature>,\n+    sig: Option<JsonSignature>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -315,7 +315,7 @@ impl From<StructData> for Def {\n             children: data.fields.into_iter().map(|id| From::from(id)).collect(),\n             decl_id: None,\n             docs: data.docs,\n-            sig: Some(data.sig),\n+            sig: Some(From::from(data.sig)),\n         }\n     }\n }\n@@ -379,7 +379,7 @@ impl From<MacroData> for Def {\n             children: vec![],\n             decl_id: None,\n             docs: data.docs,\n-            sig: data.sig,\n+            sig: data.sig.map(|s| From::from(s)),\n         }\n     }\n }\n@@ -507,3 +507,43 @@ impl From<MacroUseData> for MacroRef {\n         }\n     }\n }\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSignature {\n+    span: SpanData,\n+    text: String,\n+    ident_start: usize,\n+    ident_end: usize,\n+    defs: Vec<JsonSigElement>,\n+    refs: Vec<JsonSigElement>,\n+}\n+\n+impl From<Signature> for JsonSignature {\n+    fn from(data: Signature) -> JsonSignature {\n+        JsonSignature {\n+            span: data.span,\n+            text: data.text,\n+            ident_start: data.ident_start,\n+            ident_end: data.ident_end,\n+            defs: data.defs.into_iter().map(|s| From::from(s)).collect(),\n+            refs: data.refs.into_iter().map(|s| From::from(s)).collect(),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, RustcEncodable)]\n+pub struct JsonSigElement {\n+    id: Id,\n+    start: usize,\n+    end: usize,\n+}\n+\n+impl From<SigElement> for JsonSigElement {\n+    fn from(data: SigElement) -> JsonSigElement {\n+        JsonSigElement {\n+            id: From::from(data.id),\n+            start: data.start,\n+            end: data.end,\n+        }\n+    }\n+}"}]}