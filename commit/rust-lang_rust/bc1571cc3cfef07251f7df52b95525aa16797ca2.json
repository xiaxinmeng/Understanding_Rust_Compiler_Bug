{"sha": "bc1571cc3cfef07251f7df52b95525aa16797ca2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTU3MWNjM2NmZWYwNzI1MWY3ZGY1MmI5NTUyNWFhMTY3OTdjYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-05T17:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-05T17:31:32Z"}, "message": "Auto merge of #67903 - Dylan-DPC:rollup-k9djyrf, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #67818 (rustdoc: Avoid panic when parsing codeblocks for playground links)\n - #67845 (Also remove const-hack for abs)\n - #67879 (Remove negative number check from float sqrt)\n - #67881 (Add backticks to various diagnostics)\n - #67882 (remove bespoke flock bindings)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5f3fb5773cad1973ec174a5e1436076bd5fa87ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f3fb5773cad1973ec174a5e1436076bd5fa87ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1571cc3cfef07251f7df52b95525aa16797ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1571cc3cfef07251f7df52b95525aa16797ca2", "html_url": "https://github.com/rust-lang/rust/commit/bc1571cc3cfef07251f7df52b95525aa16797ca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1571cc3cfef07251f7df52b95525aa16797ca2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69f6e65c081f9a628ef5db83ba77e3861e60e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69f6e65c081f9a628ef5db83ba77e3861e60e60", "html_url": "https://github.com/rust-lang/rust/commit/b69f6e65c081f9a628ef5db83ba77e3861e60e60"}, {"sha": "b9160fb56ced49c6087acb782c3260fab3936be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9160fb56ced49c6087acb782c3260fab3936be9", "html_url": "https://github.com/rust-lang/rust/commit/b9160fb56ced49c6087acb782c3260fab3936be9"}], "stats": {"total": 527, "additions": 228, "deletions": 299}, "files": [{"sha": "b6b4a46e0b81227ee9d041788e79e0faeea74c4d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -2001,6 +2001,9 @@ $EndFeature, \"\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub const fn abs(self) -> Self {\n+                // Note that the #[inline] above means that the overflow\n+                // semantics of the subtraction depend on the crate we're being\n+                // inlined into.\n                 if self.is_negative() {\n                     -self\n                 } else {"}, {"sha": "69c5ea56ad626272f86a4420dc7b9aa381f5c3ba", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -661,7 +661,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             },\n             ObligationCauseCode::IfExpression(box IfExpressionCause { then, outer, semicolon }) => {\n                 err.span_label(then, \"expected because of this\");\n-                outer.map(|sp| err.span_label(sp, \"if and else have incompatible types\"));\n+                outer.map(|sp| err.span_label(sp, \"`if` and `else` have incompatible types\"));\n                 if let Some(sp) = semicolon {\n                     err.span_suggestion_short(\n                         sp,\n@@ -1883,13 +1883,13 @@ impl<'tcx> ObligationCause<'tcx> {\n                     hir::MatchSource::TryDesugar => {\n                         \"try expression alternatives have incompatible types\"\n                     }\n-                    _ => \"match arms have incompatible types\",\n+                    _ => \"`match` arms have incompatible types\",\n                 })\n             }\n-            IfExpression { .. } => Error0308(\"if and else have incompatible types\"),\n-            IfExpressionWithNoElse => Error0317(\"if may be missing an else clause\"),\n-            MainFunctionType => Error0580(\"main function has wrong type\"),\n-            StartFunctionType => Error0308(\"start function has wrong type\"),\n+            IfExpression { .. } => Error0308(\"`if` and `else` have incompatible types\"),\n+            IfExpressionWithNoElse => Error0317(\"`if` may be missing an `else` clause\"),\n+            MainFunctionType => Error0580(\"`main` function has wrong type\"),\n+            StartFunctionType => Error0308(\"`#[start]` function has wrong type\"),\n             IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n             MethodReceiver => Error0308(\"mismatched `self` parameter type\"),\n \n@@ -1917,12 +1917,12 @@ impl<'tcx> ObligationCause<'tcx> {\n             ExprAssignable => \"expression is assignable\",\n             MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\",\n-                _ => \"match arms have compatible types\",\n+                _ => \"`match` arms have compatible types\",\n             },\n-            IfExpression { .. } => \"if and else have incompatible types\",\n-            IfExpressionWithNoElse => \"if missing an else returns ()\",\n+            IfExpression { .. } => \"`if` and `else` have incompatible types\",\n+            IfExpressionWithNoElse => \"`if` missing an `else` returns `()`\",\n             MainFunctionType => \"`main` function has the correct type\",\n-            StartFunctionType => \"`start` function has the correct type\",\n+            StartFunctionType => \"`#[start]` function has the correct type\",\n             IntrinsicType => \"intrinsic has the correct type\",\n             MethodReceiver => \"method receiver has the correct type\",\n             _ => \"types are compatible\","}, {"sha": "e3282c5d276b039291dfc2b9566b166afcedff6b", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 15, "deletions": 106, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -13,96 +13,9 @@ use std::path::Path;\n cfg_if! {\n     if #[cfg(unix)] {\n         use std::ffi::{CString, OsStr};\n+        use std::mem;\n         use std::os::unix::prelude::*;\n \n-        #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"freebsd\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(any(target_os = \"dragonfly\",\n-                  target_os = \"netbsd\",\n-                  target_os = \"openbsd\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"haiku\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"solaris\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_sysid: libc::c_int,\n-                pub l_pid: libc::pid_t,\n-            }\n-        }\n-\n         #[derive(Debug)]\n         pub struct Lock {\n             fd: libc::c_int,\n@@ -132,19 +45,17 @@ cfg_if! {\n                 }\n \n                 let lock_type = if exclusive {\n-                    libc::F_WRLCK as libc::c_short\n+                    libc::F_WRLCK\n                 } else {\n-                    libc::F_RDLCK as libc::c_short\n+                    libc::F_RDLCK\n                 };\n \n-                let flock = os::flock {\n-                    l_start: 0,\n-                    l_len: 0,\n-                    l_pid: 0,\n-                    l_whence: libc::SEEK_SET as libc::c_short,\n-                    l_type: lock_type,\n-                    l_sysid: 0,\n-                };\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = lock_type as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n                 let cmd = if wait { libc::F_SETLKW } else { libc::F_SETLK };\n                 let ret = unsafe {\n                     libc::fcntl(fd, cmd, &flock)\n@@ -161,14 +72,12 @@ cfg_if! {\n \n         impl Drop for Lock {\n             fn drop(&mut self) {\n-                let flock = os::flock {\n-                    l_start: 0,\n-                    l_len: 0,\n-                    l_pid: 0,\n-                    l_whence: libc::SEEK_SET as libc::c_short,\n-                    l_type: libc::F_UNLCK as libc::c_short,\n-                    l_sysid: 0,\n-                };\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = libc::F_UNLCK as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n                 unsafe {\n                     libc::fcntl(self.fd, libc::F_SETLK, &flock);\n                     libc::close(self.fd);"}, {"sha": "910d752359908230a48d8d489727796f38c090e9", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -134,7 +134,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 ctxt.start_fn = Some((item.hir_id, item.span));\n             } else {\n                 struct_span_err!(ctxt.session, item.span, E0138, \"multiple `start` functions\")\n-                    .span_label(ctxt.start_fn.unwrap().1, \"previous `start` function here\")\n+                    .span_label(ctxt.start_fn.unwrap().1, \"previous `#[start]` function here\")\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n             }"}, {"sha": "47e80e8db19f66229ab5f99d0934390e841bd535", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -81,7 +81,7 @@ pub fn options() -> TargetOptions {\n         dynamic_linking: true,\n         only_cdylib: true,\n \n-        // This means we'll just embed a `start` function in the wasm module\n+        // This means we'll just embed a `#[start]` function in the wasm module\n         executables: true,\n \n         // relatively self-explanatory!"}, {"sha": "1f0bc6a8e13c4e924e6872d9f4d1807f8891507d", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // LL ||         10u32\n             //    ||         ^^^^^ expected `i32`, found `u32`\n             // LL ||     };\n-            //    ||_____- if and else have incompatible types\n+            //    ||_____- `if` and `else` have incompatible types\n             // ```\n             Some(span)\n         } else {\n@@ -340,7 +340,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // by not pointing at the entire expression:\n                 // ```\n                 // 2 |       let x = if true {\n-                //   |               ------- if and else have incompatible types\n+                //   |               ------- `if` and `else` have incompatible types\n                 // 3 |           3\n                 //   |           - expected because of this\n                 // 4 |       } else {"}, {"sha": "db66b7530b29d99f0f417141f0adb57f34c00eb2", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 72, "deletions": 76, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -202,17 +202,7 @@ fn run_test(\n     opts: &TestOptions,\n     edition: Edition,\n ) -> Result<(), TestFailure> {\n-    let (test, line_offset) = match panic::catch_unwind(|| {\n-        make_test(test, Some(cratename), as_test_harness, opts, edition)\n-    }) {\n-        Ok((test, line_offset)) => (test, line_offset),\n-        Err(cause) if cause.is::<errors::FatalErrorMarker>() => {\n-            // If the parser used by `make_test` panicked due to a fatal error, pass the test code\n-            // through unchanged. The error will be reported during compilation.\n-            (test.to_owned(), 0)\n-        }\n-        Err(cause) => panic::resume_unwind(cause),\n-    };\n+    let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts, edition);\n \n     // FIXME(#44940): if doctests ever support path remapping, then this filename\n     // needs to be the result of `SourceMap::span_to_unmapped_path`.\n@@ -362,11 +352,6 @@ fn run_test(\n \n /// Transforms a test into code that can be compiled into a Rust binary, and returns the number of\n /// lines before the test code begins.\n-///\n-/// # Panics\n-///\n-/// This function uses the compiler's parser internally. The parser will panic if it encounters a\n-/// fatal error while parsing the test.\n pub fn make_test(\n     s: &str,\n     cratename: Option<&str>,\n@@ -401,83 +386,94 @@ pub fn make_test(\n \n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n-    let (already_has_main, already_has_extern_crate, found_macro) = with_globals(edition, || {\n-        use errors::emitter::EmitterWriter;\n-        use errors::Handler;\n-        use rustc_parse::maybe_new_parser_from_source_str;\n-        use rustc_span::source_map::FilePathMapping;\n-        use syntax::sess::ParseSess;\n-\n-        let filename = FileName::anon_source_code(s);\n-        let source = crates + &everything_else;\n-\n-        // Any errors in parsing should also appear when the doctest is compiled for real, so just\n-        // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n-        let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n-        // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n-        let handler = Handler::with_emitter(false, None, box emitter);\n-        let sess = ParseSess::with_span_handler(handler, cm);\n-\n-        let mut found_main = false;\n-        let mut found_extern_crate = cratename.is_none();\n-        let mut found_macro = false;\n-\n-        let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source) {\n-            Ok(p) => p,\n-            Err(errs) => {\n-                for mut err in errs {\n-                    err.cancel();\n+    let result = rustc_driver::catch_fatal_errors(|| {\n+        with_globals(edition, || {\n+            use errors::emitter::EmitterWriter;\n+            use errors::Handler;\n+            use rustc_parse::maybe_new_parser_from_source_str;\n+            use rustc_span::source_map::FilePathMapping;\n+            use syntax::sess::ParseSess;\n+\n+            let filename = FileName::anon_source_code(s);\n+            let source = crates + &everything_else;\n+\n+            // Any errors in parsing should also appear when the doctest is compiled for real, so just\n+            // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n+            let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+            let emitter =\n+                EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n+            // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n+            let handler = Handler::with_emitter(false, None, box emitter);\n+            let sess = ParseSess::with_span_handler(handler, cm);\n+\n+            let mut found_main = false;\n+            let mut found_extern_crate = cratename.is_none();\n+            let mut found_macro = false;\n+\n+            let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source) {\n+                Ok(p) => p,\n+                Err(errs) => {\n+                    for mut err in errs {\n+                        err.cancel();\n+                    }\n+\n+                    return (found_main, found_extern_crate, found_macro);\n                 }\n+            };\n+\n+            loop {\n+                match parser.parse_item() {\n+                    Ok(Some(item)) => {\n+                        if !found_main {\n+                            if let ast::ItemKind::Fn(..) = item.kind {\n+                                if item.ident.name == sym::main {\n+                                    found_main = true;\n+                                }\n+                            }\n+                        }\n \n-                return (found_main, found_extern_crate, found_macro);\n-            }\n-        };\n+                        if !found_extern_crate {\n+                            if let ast::ItemKind::ExternCrate(original) = item.kind {\n+                                // This code will never be reached if `cratename` is none because\n+                                // `found_extern_crate` is initialized to `true` if it is none.\n+                                let cratename = cratename.unwrap();\n \n-        loop {\n-            match parser.parse_item() {\n-                Ok(Some(item)) => {\n-                    if !found_main {\n-                        if let ast::ItemKind::Fn(..) = item.kind {\n-                            if item.ident.name == sym::main {\n-                                found_main = true;\n+                                match original {\n+                                    Some(name) => found_extern_crate = name.as_str() == cratename,\n+                                    None => found_extern_crate = item.ident.as_str() == cratename,\n+                                }\n                             }\n                         }\n-                    }\n-\n-                    if !found_extern_crate {\n-                        if let ast::ItemKind::ExternCrate(original) = item.kind {\n-                            // This code will never be reached if `cratename` is none because\n-                            // `found_extern_crate` is initialized to `true` if it is none.\n-                            let cratename = cratename.unwrap();\n \n-                            match original {\n-                                Some(name) => found_extern_crate = name.as_str() == cratename,\n-                                None => found_extern_crate = item.ident.as_str() == cratename,\n+                        if !found_macro {\n+                            if let ast::ItemKind::Mac(..) = item.kind {\n+                                found_macro = true;\n                             }\n                         }\n-                    }\n \n-                    if !found_macro {\n-                        if let ast::ItemKind::Mac(..) = item.kind {\n-                            found_macro = true;\n+                        if found_main && found_extern_crate {\n+                            break;\n                         }\n                     }\n-\n-                    if found_main && found_extern_crate {\n+                    Ok(None) => break,\n+                    Err(mut e) => {\n+                        e.cancel();\n                         break;\n                     }\n                 }\n-                Ok(None) => break,\n-                Err(mut e) => {\n-                    e.cancel();\n-                    break;\n-                }\n             }\n-        }\n \n-        (found_main, found_extern_crate, found_macro)\n+            (found_main, found_extern_crate, found_macro)\n+        })\n     });\n+    let (already_has_main, already_has_extern_crate, found_macro) = match result {\n+        Ok(result) => result,\n+        Err(ErrorReported) => {\n+            // If the parser panicked due to a fatal error, pass the test code through unchanged.\n+            // The error will be reported during compilation.\n+            return (s.to_owned(), 0);\n+        }\n+    };\n \n     // If a doctest's `fn main` is being masked by a wrapper macro, the parsing loop above won't\n     // see it. In that case, run the old text-based scan to see if they at least have a main"}, {"sha": "267d7013b1e420721e38ab3632c741bc55ffb69e", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -376,7 +376,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sqrt(self) -> f32 {\n-        if self < 0.0 { NAN } else { unsafe { intrinsics::sqrtf32(self) } }\n+        unsafe { intrinsics::sqrtf32(self) }\n     }\n \n     /// Returns `e^(self)`, (the exponential function)."}, {"sha": "61ce7b29e26fc306d71d98e8814277bb510cdc41", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -342,7 +342,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sqrt(self) -> f64 {\n-        if self < 0.0 { NAN } else { unsafe { intrinsics::sqrtf64(self) } }\n+        unsafe { intrinsics::sqrtf64(self) }\n     }\n \n     /// Returns `e^(self)`, (the exponential function)."}, {"sha": "0e94a722777515dc6e6b00b35f69e9ab07fb06e7", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -387,8 +387,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                         &self,\n                         start,\n                         i.span,\n-                        \"a `#[start]` function is an experimental \\\n-                                       feature whose signature may change \\\n+                        \"`#[start]` functions are experimental \\\n+                                       and their signature may change \\\n                                        over time\"\n                     );\n                 }"}, {"sha": "8918ae874f89801939325e3cda0235d12a73643b", "filename": "src/test/rustdoc/playground-syntax-error.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Frustdoc%2Fplayground-syntax-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Frustdoc%2Fplayground-syntax-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-syntax-error.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -0,0 +1,21 @@\n+#![crate_name = \"foo\"]\n+#![doc(html_playground_url = \"https://play.rust-lang.org/\")]\n+\n+/// bar docs\n+///\n+/// ```edition2015\n+/// use std::future::Future;\n+/// use std::pin::Pin;\n+/// fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {\n+///     Box::pin(async move {\n+///         if n > 0 {\n+///             foo_recursive(n - 1).await;\n+///         }\n+///     })\n+/// }\n+/// ```\n+pub fn bar() {}\n+\n+// @has foo/fn.bar.html\n+// @has - '//a[@class=\"test-arrow\"]' \"Run\"\n+// @has - '//*[@class=\"docblock\"]' 'foo_recursive'"}, {"sha": "3ab8220b4aff3d17df54c8a7395bc46e426c77f7", "filename": "src/test/ui/async-await/issue-66387-if-without-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n async fn f() -> i32 {\n-    if true { //~ ERROR if may be missing an else clause\n+    if true { //~ ERROR `if` may be missing an `else` clause\n         return 0;\n     }\n     // An `if` block without `else` causes the type table not to have a type for this expr."}, {"sha": "e8e2a48983c89e3840087e102498fe924aa5ab1c", "filename": "src/test/ui/async-await/issue-66387-if-without-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-66387-if-without-else.rs:3:5\n    |\n LL | /     if true {"}, {"sha": "31fc9cf2cb575620d7a02d6fa91c2470c8f0e73a", "filename": "src/test/ui/bad/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,6 +1,6 @@\n mod m1 {}\n \n-fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+fn main(arguments: Vec<String>) { //~ ERROR `main` function has wrong type\n     log(debug, m1::arguments);\n     //~^ ERROR cannot find function `log` in this scope\n     //~| ERROR cannot find value `debug` in this scope"}, {"sha": "56bb6e2be88c4d385a0280e38ec43e93c8905752", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -16,7 +16,7 @@ error[E0425]: cannot find value `arguments` in module `m1`\n LL |     log(debug, m1::arguments);\n    |                    ^^^^^^^^^ not found in `m1`\n \n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/bad-expr-path.rs:3:1\n    |\n LL | fn main(arguments: Vec<String>) {"}, {"sha": "eb88edb9071ef0ddc8428ca79adf4017385d126b", "filename": "src/test/ui/bad/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -2,7 +2,7 @@ mod m1 {\n     pub mod arguments {}\n }\n \n-fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+fn main(arguments: Vec<String>) { //~ ERROR `main` function has wrong type\n     log(debug, m1::arguments);\n     //~^ ERROR cannot find function `log` in this scope\n     //~| ERROR cannot find value `debug` in this scope"}, {"sha": "e217c45b267af9f3f887b6e83aafebf13592fb7d", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -16,7 +16,7 @@ error[E0423]: expected value, found module `m1::arguments`\n LL |     log(debug, m1::arguments);\n    |                ^^^^^^^^^^^^^ not a value\n \n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/bad-expr-path2.rs:5:1\n    |\n LL | fn main(arguments: Vec<String>) {"}, {"sha": "7511599614247426d652bba0638a45b6a056be2b", "filename": "src/test/ui/bad/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1 +1 @@\n-fn main(x: isize) { } //~ ERROR: main function has wrong type [E0580]\n+fn main(x: isize) { } //~ ERROR: `main` function has wrong type [E0580]"}, {"sha": "675b66d057838d0931a15417817639f6f73324d6", "filename": "src/test/ui/bad/bad-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/bad-main.rs:1:1\n    |\n LL | fn main(x: isize) { }"}, {"sha": "6771224e6cf5ea630b7513fde2a1219dfd207eb6", "filename": "src/test/ui/consts/control-flow/issue-50577.if_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)"}, {"sha": "9600f8b6aeeab8fda71d7cb3a21d2a922b164717", "filename": "src/test/ui/consts/control-flow/issue-50577.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     enum Foo {\n         Drop = assert_eq!(1, 1)\n-        //[stock,if_match]~^ ERROR if may be missing an else clause\n+        //[stock,if_match]~^ ERROR `if` may be missing an `else` clause\n         //[stock]~^^ ERROR `match` is not allowed in a `const`\n         //[stock]~| ERROR `match` is not allowed in a `const`\n         //[stock]~| ERROR `if` is not allowed in a `const`"}, {"sha": "7d637f5aa9671925559c82c35f43e9ba5bfe2a1f", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -28,7 +28,7 @@ LL |         Drop = assert_eq!(1, 1)\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:7:16\n    |\n LL |         Drop = assert_eq!(1, 1)"}, {"sha": "2dc6976fe0e9cf6e8312dabc5b4f3aa482b9e32f", "filename": "src/test/ui/error-codes/E0138.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -2,7 +2,7 @@ error[E0138]: multiple `start` functions\n   --> $DIR/E0138.rs:7:1\n    |\n LL | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }\n-   | ---------------------------------------------------------- previous `start` function here\n+   | ---------------------------------------------------------- previous `#[start]` function here\n ...\n LL | fn f(argc: isize, argv: *const *const u8) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `start` functions"}, {"sha": "ddf2e136f03ce247c4798f484b2ba6dbae8b126f", "filename": "src/test/ui/extern/extern-main-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1 +1 @@\n-extern fn main() {} //~ ERROR: main function has wrong type [E0580]\n+extern fn main() {} //~ ERROR: `main` function has wrong type [E0580]"}, {"sha": "9c994985a3e0d6d7738dc20676c51a8fa564d3b5", "filename": "src/test/ui/extern/extern-main-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/extern-main-fn.rs:1:1\n    |\n LL | extern fn main() {}"}, {"sha": "e617f1c47594dc2e03e1a29cf2eec4bed95bb06e", "filename": "src/test/ui/feature-gates/feature-gate-start.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,3 +1,3 @@\n #[start]\n fn foo(_: isize, _: *const *const u8) -> isize { 0 }\n-//~^ ERROR a `#[start]` function is an experimental feature\n+//~^ ERROR `#[start]` functions are experimental"}, {"sha": "f42e42ea0391f07c544c33982e3cc6d2330b1e0b", "filename": "src/test/ui/feature-gates/feature-gate-start.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-start.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: a `#[start]` function is an experimental feature whose signature may change over time\n+error[E0658]: `#[start]` functions are experimental and their signature may change over time\n   --> $DIR/feature-gate-start.rs:2:1\n    |\n LL | fn foo(_: isize, _: *const *const u8) -> isize { 0 }"}, {"sha": "1a0a36df2ad63f1746b349ec456c3349f7db7ae8", "filename": "src/test/ui/if-else-type-mismatch.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -4,43 +4,43 @@ fn main() {\n     } else {\n         2u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true { 42i32 } else { 42u32 };\n-    //~^ ERROR if and else have incompatible types\n+    //~^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         3u32;\n     } else {\n         4u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         5u32\n     } else {\n         6u32;\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         7i32;\n     } else {\n         8u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         9i32\n     } else {\n         10u32;\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n \n     } else {\n         11u32\n     };\n-    //~^^ ERROR if and else have incompatible types\n+    //~^^ ERROR `if` and `else` have incompatible types\n     let _ = if true {\n         12i32\n     } else {\n \n     };\n-    //~^^^ ERROR if and else have incompatible types\n+    //~^^^ ERROR `if` and `else` have incompatible types\n }"}, {"sha": "9fa190d6c9df3d0c6d047a6198a402896a441456", "filename": "src/test/ui/if-else-type-mismatch.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:5:9\n    |\n LL |       let _ = if true {\n@@ -9,17 +9,17 @@ LL | |     } else {\n LL | |         2u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:8:38\n    |\n LL |     let _ = if true { 42i32 } else { 42u32 };\n    |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:13:9\n    |\n LL |       let _ = if true {\n@@ -33,9 +33,9 @@ LL | |     } else {\n LL | |         4u32\n    | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:19:9\n    |\n LL |       let _ = if true {\n@@ -49,9 +49,9 @@ LL | |         6u32;\n    | |         |   help: consider removing this semicolon\n    | |         expected `u32`, found `()`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:25:9\n    |\n LL |       let _ = if true {\n@@ -62,9 +62,9 @@ LL | |     } else {\n LL | |         8u32\n    | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:31:9\n    |\n LL |       let _ = if true {\n@@ -75,9 +75,9 @@ LL | |     } else {\n LL | |         10u32;\n    | |         ^^^^^^ expected `i32`, found `()`\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:37:9\n    |\n LL |       let _ = if true {\n@@ -88,11 +88,11 @@ LL | |     } else {\n LL |           11u32\n    |           ^^^^^ expected `()`, found `u32`\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:42:12\n    |\n LL |       let _ = if true {\n-   |               ------- if and else have incompatible types\n+   |               ------- `if` and `else` have incompatible types\n LL |           12i32\n    |           ----- expected because of this\n LL |       } else {"}, {"sha": "c125ba30606c553df7d36e26fcc98ee78211dfcc", "filename": "src/test/ui/if/if-branch-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = if true { 10i32 } else { 10u32 };\n-    //~^ ERROR if and else have incompatible types\n+    //~^ ERROR `if` and `else` have incompatible types\n     //~| expected `i32`, found `u32`\n }"}, {"sha": "14f02163a8320f212a099abdf0e1a134c8b1b33e", "filename": "src/test/ui/if/if-branch-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-branch-types.rs:2:38\n    |\n LL |     let x = if true { 10i32 } else { 10u32 };"}, {"sha": "1e8260a017da2b57d23842095944caf36fbe2536", "filename": "src/test/ui/if/if-let-arm-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,11 +1,11 @@\n fn main() {\n     if let Some(b) = None {\n-        //~^ NOTE if and else have incompatible types\n+        //~^ NOTE `if` and `else` have incompatible types\n         ()\n         //~^ NOTE expected because of this\n     } else {\n         1\n     };\n-    //~^^ ERROR: if and else have incompatible types\n+    //~^^ ERROR: `if` and `else` have incompatible types\n     //~| NOTE expected `()`, found integer\n }"}, {"sha": "b40a0f479d3185136b7cd79367f2fc66372314a0", "filename": "src/test/ui/if/if-let-arm-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-let-arm-types.rs:7:9\n    |\n LL | /     if let Some(b) = None {\n@@ -10,7 +10,7 @@ LL | |     } else {\n LL | |         1\n    | |         ^ expected `()`, found integer\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n error: aborting due to previous error\n "}, {"sha": "19fbfb27ba6e97b9bc66f063d779e3a160b2a7e1", "filename": "src/test/ui/if/if-without-else-as-fn-expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -2,44 +2,44 @@ fn foo(bar: usize) -> usize {\n     if bar % 5 == 0 {\n         return 3;\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n fn foo2(bar: usize) -> usize {\n     let x: usize = if bar % 5 == 0 {\n         return 3;\n     };\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n     x\n }\n \n fn foo3(bar: usize) -> usize {\n     if bar % 5 == 0 {\n         3\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n fn foo_let(bar: usize) -> usize {\n     if let 0 = 1 {\n         return 3;\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n fn foo2_let(bar: usize) -> usize {\n     let x: usize = if let 0 = 1 {\n         return 3;\n     };\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n     x\n }\n \n fn foo3_let(bar: usize) -> usize {\n     if let 0 = 1 {\n         3\n     }\n-    //~^^^ ERROR if may be missing an else clause\n+    //~^^^ ERROR `if` may be missing an `else` clause\n }\n \n // FIXME(60254): deduplicate first error in favor of second."}, {"sha": "4daf27493c19d3a857f6f66f6e43b25dcf7cbaab", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:2:5\n    |\n LL |   fn foo(bar: usize) -> usize {\n@@ -11,7 +11,7 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:9:20\n    |\n LL |       let x: usize = if bar % 5 == 0 {\n@@ -25,7 +25,7 @@ LL | |     };\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:17:5\n    |\n LL |   fn foo3(bar: usize) -> usize {\n@@ -38,7 +38,7 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:24:5\n    |\n LL |   fn foo_let(bar: usize) -> usize {\n@@ -51,7 +51,7 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:31:20\n    |\n LL |       let x: usize = if let 0 = 1 {\n@@ -65,7 +65,7 @@ LL | |     };\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-as-fn-expr.rs:39:5\n    |\n LL |   fn foo3_let(bar: usize) -> usize {"}, {"sha": "cf84a99e53fa113b2eee3795bd8c635cd146c198", "filename": "src/test/ui/if/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let a = if true { true };\n-    //~^ ERROR if may be missing an else clause [E0317]\n+    //~^ ERROR `if` may be missing an `else` clause [E0317]\n     //~| expected `()`, found `bool`\n     println!(\"{}\", a);\n }"}, {"sha": "821635d3768f319fc48a8f1db8fa970621d94d8b", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/if-without-else-result.rs:2:13\n    |\n LL |     let a = if true { true };"}, {"sha": "ab69ab250ff05c9c24149e41919f5a7735dcd958", "filename": "src/test/ui/issues/issue-11319.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -6,7 +6,7 @@ fn main() {\n         Some(2) => true,\n         //~^ NOTE this is found to be of type `bool`\n         None    => (),\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `bool`, found `()`\n         _       => true\n     }"}, {"sha": "fc44205e81e6cf90c1700796840d23cebd60d7a5", "filename": "src/test/ui/issues/issue-11319.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-11319.rs:8:20\n    |\n LL | /     match Some(10) {"}, {"sha": "d515cf451c410d8beb627a15ae987814fce34edc", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-17728.rs:109:14\n    |\n LL | /     match to_parse {"}, {"sha": "bec52d87d29838af79a94be3f0930c9f9448b4a7", "filename": "src/test/ui/issues/issue-17728.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -108,7 +108,7 @@ fn str_to_direction(to_parse: &str) -> RoomDirection {\n         \"down\" => RoomDirection::Down,\n         _ => None\n     }\n-        //~^^ ERROR match arms have incompatible types\n+        //~^^ ERROR `match` arms have incompatible types\n }\n \n fn main() {"}, {"sha": "2f9ae63aa41453adaf730c9a5c2fb548c7fcf83c", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -9,7 +9,7 @@ LL |     fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&R\n LL |             Some(entry) => Ok(entry),\n    |                            ^^^^^^^^^ ...but data from `room` is returned here\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-17728.rs:109:14\n    |\n LL | /     match to_parse {"}, {"sha": "0f3f83001d3c689c99b3c03233243df4cb6eecd6", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,8 +1,8 @@\n // Test if the sugared if-let construct correctly prints \"missing an else clause\" when an else\n-// clause does not exist, instead of the unsympathetic \"match arms have incompatible types\"\n+// clause does not exist, instead of the unsympathetic \"`match` arms have incompatible types\"\n \n fn main() {\n-    if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n+    if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an `else` clause\n                                            //~| expected `()`, found integer\n         765\n     };"}, {"sha": "6e92be87a02e9a730944286e90aa3bd4cded4138", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-19991.rs:5:5\n    |\n LL | /     if let Some(homura) = Some(\"madoka\") {"}, {"sha": "bd82f95c9ef663c8d63a21d2ec616788c0b2cbe9", "filename": "src/test/ui/issues/issue-24036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -10,7 +10,7 @@ fn closure_from_match() {\n         2 => |c| c - 1,\n         _ => |c| c - 1\n     };\n-    //~^^^ ERROR match arms have incompatible types\n+    //~^^^ ERROR `match` arms have incompatible types\n }\n \n fn main() { }"}, {"sha": "b0e729a59eb22921ef751bd0b89c9fd5e07fb40a", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -9,7 +9,7 @@ LL |     x = |c| c + 1;\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-24036.rs:10:14\n    |\n LL |       let x = match 1usize {"}, {"sha": "1f292229fd6cd54414e1d5a68f54fa63bd77c4b2", "filename": "src/test/ui/issues/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let a = if true {\n         0\n     } else if false {\n-//~^ ERROR if may be missing an else clause\n+//~^ ERROR `if` may be missing an `else` clause\n //~| expected `()`, found integer\n         1\n     };"}, {"sha": "bc638ddf55be03e51cb17b13522e952adade1f98", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0317]: if may be missing an else clause\n+error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-4201.rs:4:12\n    |\n LL |       } else if false {"}, {"sha": "06b252990b642b0560c2f49cdd4687b59d190d6e", "filename": "src/test/ui/issues/issue-9575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-9575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-9575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9575.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -2,6 +2,6 @@\n \n #[start]\n fn start(argc: isize, argv: *const *const u8, crate_map: *const u8) -> isize {\n-    //~^ start function has wrong type\n+    //~^ `#[start]` function has wrong type\n    0\n }"}, {"sha": "5b8ce84a0716832051ec74d037fce3b518d4d364", "filename": "src/test/ui/issues/issue-9575.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9575.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: start function has wrong type\n+error[E0308]: `#[start]` function has wrong type\n   --> $DIR/issue-9575.rs:4:1\n    |\n LL | fn start(argc: isize, argv: *const *const u8, crate_map: *const u8) -> isize {"}, {"sha": "bc7b787cd65ac3bff77e4b354bd08839731e2f3b", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -13,7 +13,7 @@ fn foo(\n ) {\n     let z = match 22 {\n         0 => x,\n-        _ => y, //~ ERROR match arms have incompatible types\n+        _ => y, //~ ERROR `match` arms have incompatible types\n     };\n }\n "}, {"sha": "6d5d51174699fa17569e33b837610acf441487f0", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/old-lub-glb-hr.rs:16:14\n    |\n LL |       let z = match 22 {"}, {"sha": "63bbae59991bc3e9ad736754c36aaecdc7619449", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -9,7 +9,7 @@ fn foo(\n ) {\n     let z = match 22 {\n         0 => x,\n-        _ => y, //~ ERROR match arms have incompatible types\n+        _ => y, //~ ERROR `match` arms have incompatible types\n     };\n }\n "}, {"sha": "65c797f6b19d70083531f76d7c1fa928aa850d81", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/old-lub-glb-object.rs:12:14\n    |\n LL |       let z = match 22 {"}, {"sha": "31deba72af4b3eb404ab07390d39d25bd353962a", "filename": "src/test/ui/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-type.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -4,5 +4,5 @@ struct S {\n }\n \n fn main(foo: S) {\n-//~^ ERROR: main function has wrong type [E0580]\n+//~^ ERROR: `main` function has wrong type [E0580]\n }"}, {"sha": "43efaf884e3a7aab2a36f1f732b29e32b9cdb724", "filename": "src/test/ui/main-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmain-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmain-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-type.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0580]: main function has wrong type\n+error[E0580]: `main` function has wrong type\n   --> $DIR/main-wrong-type.rs:6:1\n    |\n LL | fn main(foo: S) {"}, {"sha": "6ef249c05247e390231ce8fa98d7d9a8a0b97bbf", "filename": "src/test/ui/match/match-arm-resolving-to-never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         E::C => 3,\n         E::D => 4,\n         E::E => unimplemented!(\"\"),\n-        E::F => \"\", //~ ERROR match arms have incompatible types\n+        E::F => \"\", //~ ERROR `match` arms have incompatible types\n     };\n }"}, {"sha": "3a723de9f6b8a346defb89157128928d27318a34", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-arm-resolving-to-never.rs:17:17\n    |\n LL | /     match E::F {"}, {"sha": "e9027eb24897fe2e0c2d6889f38897c9a8474107", "filename": "src/test/ui/match/match-type-err-first-arm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -16,7 +16,7 @@ fn test_func2(n: i32) -> i32 {\n     let x = match n { //~ NOTE `match` arms have incompatible types\n         12 => 'b', //~ NOTE this is found to be of type `char`\n         _ => 42,\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `char`, found integer\n     };\n     x\n@@ -32,7 +32,7 @@ fn test_func3(n: i32) -> i32 {\n         6 => 'b',\n         //~^ NOTE this and all prior arms are found to be of type `char`\n         _ => 42,\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `char`, found integer\n     };\n     x\n@@ -44,7 +44,7 @@ fn test_func4() {\n             x //~ NOTE this is found to be of type `u32`\n         },\n         None => {}\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n         //~| NOTE expected `u32`, found `()`\n     };\n }"}, {"sha": "fd489afa84db4ed5f2dcb156003113673956015a", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -7,7 +7,7 @@ LL |     match n {\n LL |         12 => 'b',\n    |               ^^^ expected `i32`, found `char`\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:18:14\n    |\n LL |       let x = match n {\n@@ -21,7 +21,7 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:34:14\n    |\n LL |       let x = match n {\n@@ -40,7 +40,7 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n \n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:46:17\n    |\n LL | /     match Some(0u32) {"}, {"sha": "a80e5df1a26a2057c00adf868a00be3ec94a476a", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -29,7 +29,7 @@ fn qux() -> impl std::fmt::Display {\n         0i32\n     } else {\n         1u32\n-        //~^ ERROR if and else have incompatible types\n+        //~^ ERROR `if` and `else` have incompatible types\n     }\n }\n "}, {"sha": "27b86007451d860fe3b6385aa904d665e3fff79f", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -34,7 +34,7 @@ LL |     } else {\n LL |         1u32\n    |         ^^^^ expected `i32`, found `u32`\n \n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:31:9\n    |\n LL | /     if false {\n@@ -45,7 +45,7 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |\n LL | |     }\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:39:14"}, {"sha": "750cc3566e032e3afe251d11c2f7eeca55c06faf", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/region-invariant-static-error-reporting.rs:17:9\n    |\n LL |       let bad = if x.is_some() {\n@@ -9,7 +9,7 @@ LL | |     } else {\n LL | |         mk_static()\n    | |         ^^^^^^^^^^^ lifetime mismatch\n LL | |     };\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n    |\n    = note: expected struct `Invariant<'a>`\n               found struct `Invariant<'static>`"}, {"sha": "323eefb381af92b1eb2de54d88c165d35a59083c", "filename": "src/test/ui/str/str-array-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n   let s = \"abc\";\n   let t = if true { s[..2] } else { s };\n-  //~^ ERROR if and else have incompatible types\n+  //~^ ERROR `if` and `else` have incompatible types\n   let u: &str = if true { s[..2] } else { s };\n   //~^ ERROR mismatched types\n   let v = s[..2];"}, {"sha": "cc767de3845d28c1d382d6add13d8a70df7ccb3f", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/str-array-assignment.rs:3:37\n    |\n LL |   let t = if true { s[..2] } else { s };"}, {"sha": "5e1147403143e55bd436d9b707a6031adcd3e200", "filename": "src/test/ui/suggestions/opaque-type-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -17,7 +17,7 @@ async fn thing() -> Result<(), ()> {\n     if true {\n         thing_one()\n     } else {\n-        thing_two() //~ ERROR if and else have incompatible types\n+        thing_two() //~ ERROR `if` and `else` have incompatible types\n     }.await\n }\n "}, {"sha": "1465b9e49ef1aba38880a2fc2c77dbe2cc2fb9f1", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: if and else have incompatible types\n+error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n LL | /     if true {\n@@ -8,7 +8,7 @@ LL | |     } else {\n LL | |         thing_two()\n    | |         ^^^^^^^^^^^ expected opaque type, found a different opaque type\n LL | |     }.await\n-   | |_____- if and else have incompatible types\n+   | |_____- `if` and `else` have incompatible types\n    |\n    = note:     expected type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n            found opaque type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:12:19>)"}, {"sha": "c39ab954473cd6f4eed6cb3a45e473ef473cf003", "filename": "src/test/ui/type/type-check/issue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.rs?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -20,7 +20,7 @@ fn main() {\n         // However, in #67273, we would delay the unification of this arm with the above\n         // because we used the hitherto accumulated coercion as opposed to the \"initial\" type.\n         2 => i = 1,\n-        //~^ ERROR match arms have incompatible types\n+        //~^ ERROR `match` arms have incompatible types\n \n         _ => (),\n     }"}, {"sha": "a431fe89c237c5a6439486c1a98c066ae1a19c4c", "filename": "src/test/ui/type/type-check/issue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-67273-assignment-match-prior-arm-bool-expected-unit.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/issue-67273-assignment-match-prior-arm-bool-expected-unit.rs:22:14\n    |\n LL | /     match i {"}, {"sha": "594fad4138505fcfb0e28b2ec430d370894a59ff", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc1571cc3cfef07251f7df52b95525aa16797ca2/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=bc1571cc3cfef07251f7df52b95525aa16797ca2", "patch": "@@ -1,4 +1,4 @@\n-error[E0308]: match arms have incompatible types\n+error[E0308]: `match` arms have incompatible types\n   --> $DIR/wf-unsafe-trait-obj-match.rs:23:17\n    |\n LL | /     match opt() {"}]}