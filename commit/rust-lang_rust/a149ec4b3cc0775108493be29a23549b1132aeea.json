{"sha": "a149ec4b3cc0775108493be29a23549b1132aeea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNDllYzRiM2NjMDc3NTEwODQ5M2JlMjlhMjM1NDliMTEzMmFlZWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-02-20T07:32:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-20T07:32:01Z"}, "message": "Merge pull request #2458 from flip1995/suspicious_impl\n\nLint for suspicious implementations of arithmetic std::ops traits", "tree": {"sha": "0867aef4f31dcdb9c1d276b2268144d37a881cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0867aef4f31dcdb9c1d276b2268144d37a881cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a149ec4b3cc0775108493be29a23549b1132aeea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJai87xCRBK7hj4Ov3rIwAAdHIIADexfeJcd5tX+kmlvZXWJOcG\nDlrRA437rHQpVG4jxc+qiWJcBqhyOHjECVo4TKzjI7L7HJUhFaAouZSGoPm+os5s\nOQrA1ZOLoOfvJeNq59SOBXlJL2Pwy74eHepupfedxibqVfjp3+C2JM2v2Ytlmex5\nvasFWbxXpK70aJDf5aoBMke1ZUEKykuY6WPqJ8DCRLpqgiVqRWQuJrRpP7MnAl9+\nJFvHcLoWA65DYJgvPFtQ2yBABz0B869z452JYXU34HAXupx+MYuriA+X98bOIUeR\nBCSdpwozRXP0bcyyo5Zb1pN5EAXk36f9CNqV5m83l5MpJ/4d1gcqbQjfo6qe5OA=\n=lm9T\n-----END PGP SIGNATURE-----\n", "payload": "tree 0867aef4f31dcdb9c1d276b2268144d37a881cc8\nparent e061261c4868539ed834a86ba070f28993c0dbce\nparent c43e053f3fb7c84c4270d837b1f4684666970b0a\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1519111921 +0100\ncommitter GitHub <noreply@github.com> 1519111921 +0100\n\nMerge pull request #2458 from flip1995/suspicious_impl\n\nLint for suspicious implementations of arithmetic std::ops traits"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a149ec4b3cc0775108493be29a23549b1132aeea", "html_url": "https://github.com/rust-lang/rust/commit/a149ec4b3cc0775108493be29a23549b1132aeea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a149ec4b3cc0775108493be29a23549b1132aeea/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e061261c4868539ed834a86ba070f28993c0dbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e061261c4868539ed834a86ba070f28993c0dbce", "html_url": "https://github.com/rust-lang/rust/commit/e061261c4868539ed834a86ba070f28993c0dbce"}, {"sha": "c43e053f3fb7c84c4270d837b1f4684666970b0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43e053f3fb7c84c4270d837b1f4684666970b0a", "html_url": "https://github.com/rust-lang/rust/commit/c43e053f3fb7c84c4270d837b1f4684666970b0a"}], "stats": {"total": 267, "additions": 267, "deletions": 0}, "files": [{"sha": "7f3b176b889c48be2be7ae323fe29dce1e6cc0e5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a149ec4b3cc0775108493be29a23549b1132aeea/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a149ec4b3cc0775108493be29a23549b1132aeea/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a149ec4b3cc0775108493be29a23549b1132aeea", "patch": "@@ -159,6 +159,7 @@ pub mod returns;\n pub mod serde_api;\n pub mod shadow;\n pub mod strings;\n+pub mod suspicious_trait_impl;\n pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n@@ -374,8 +375,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box types::UnitArg);\n     reg.register_late_lint_pass(box double_comparison::DoubleComparisonPass);\n     reg.register_late_lint_pass(box question_mark::QuestionMarkPass);\n+    reg.register_late_lint_pass(box suspicious_trait_impl::SuspiciousImpl);\n     reg.register_late_lint_pass(box redundant_field_names::RedundantFieldNames);\n \n+\n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n@@ -602,6 +605,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         returns::NEEDLESS_RETURN,\n         serde_api::SERDE_API_MISUSE,\n         strings::STRING_LIT_AS_BYTES,\n+        suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n+        suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,"}, {"sha": "682ab4d15ea3c58beeb26919120cb000740f62ce", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/a149ec4b3cc0775108493be29a23549b1132aeea/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a149ec4b3cc0775108493be29a23549b1132aeea/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=a149ec4b3cc0775108493be29a23549b1132aeea", "patch": "@@ -0,0 +1,192 @@\n+use rustc::lint::*;\n+use rustc::hir;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use syntax::ast;\n+use utils::{get_trait_def_id, span_lint};\n+\n+/// **What it does:** Lints for suspicious operations in impls of arithmetic operators, e.g.\n+/// subtracting elements in an Add impl.\n+///\n+/// **Why this is bad?** This is probably a typo or copy-and-paste error and not intended.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// impl Add for Foo {\n+///     type Output = Foo;\n+///\n+///     fn add(self, other: Foo) -> Foo {\n+///         Foo(self.0 - other.0)\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub SUSPICIOUS_ARITHMETIC_IMPL,\n+    Warn,\n+    \"suspicious use of operators in impl of arithmetic trait\"\n+}\n+\n+/// **What it does:** Lints for suspicious operations in impls of OpAssign, e.g.\n+/// subtracting elements in an AddAssign impl.\n+///\n+/// **Why this is bad?** This is probably a typo or copy-and-paste error and not intended.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// impl AddAssign for Foo {\n+///     fn add_assign(&mut self, other: Foo) {\n+///         *self = *self - other;\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub SUSPICIOUS_OP_ASSIGN_IMPL,\n+    Warn,\n+    \"suspicious use of operators in impl of OpAssign trait\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct SuspiciousImpl;\n+\n+impl LintPass for SuspiciousImpl {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![SUSPICIOUS_ARITHMETIC_IMPL, SUSPICIOUS_OP_ASSIGN_IMPL]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        use rustc::hir::BinOp_::*;\n+        if let hir::ExprBinary(binop, _, _) = expr.node {\n+            // Check if the binary expression is part of another binary expression\n+            // as a child node\n+            let mut parent_expr = cx.tcx.hir.get_parent_node(expr.id);\n+            while parent_expr != ast::CRATE_NODE_ID {\n+                if_chain! {\n+                    if let hir::map::Node::NodeExpr(e) = cx.tcx.hir.get(parent_expr);\n+                    if let hir::ExprBinary(_, _, _) = e.node;\n+                    then {\n+                        return\n+                    }\n+                }\n+\n+                parent_expr = cx.tcx.hir.get_parent_node(parent_expr);\n+            }\n+            // as a parent node\n+            let mut visitor = BinaryExprVisitor {\n+                in_binary_expr: false,\n+            };\n+            walk_expr(&mut visitor, expr);\n+\n+            if visitor.in_binary_expr {\n+                return;\n+            }\n+\n+            if let Some(impl_trait) = check_binop(\n+                cx,\n+                expr,\n+                &binop.node,\n+                &[\"Add\", \"Sub\", \"Mul\", \"Div\"],\n+                &[BiAdd, BiSub, BiMul, BiDiv],\n+            ) {\n+                span_lint(\n+                    cx,\n+                    SUSPICIOUS_ARITHMETIC_IMPL,\n+                    binop.span,\n+                    &format!(\n+                        r#\"Suspicious use of binary operator in `{}` impl\"#,\n+                        impl_trait\n+                    ),\n+                );\n+            }\n+\n+            if let Some(impl_trait) = check_binop(\n+                cx,\n+                expr,\n+                &binop.node,\n+                &[\n+                    \"AddAssign\",\n+                    \"SubAssign\",\n+                    \"MulAssign\",\n+                    \"DivAssign\",\n+                    \"BitAndAssign\",\n+                    \"BitOrAssign\",\n+                    \"BitXorAssign\",\n+                    \"RemAssign\",\n+                    \"ShlAssign\",\n+                    \"ShrAssign\",\n+                ],\n+                &[\n+                    BiAdd, BiSub, BiMul, BiDiv, BiBitAnd, BiBitOr, BiBitXor, BiRem, BiShl, BiShr\n+                ],\n+            ) {\n+                span_lint(\n+                    cx,\n+                    SUSPICIOUS_OP_ASSIGN_IMPL,\n+                    binop.span,\n+                    &format!(\n+                        r#\"Suspicious use of binary operator in `{}` impl\"#,\n+                        impl_trait\n+                    ),\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn check_binop<'a>(\n+    cx: &LateContext,\n+    expr: &hir::Expr,\n+    binop: &hir::BinOp_,\n+    traits: &[&'a str],\n+    expected_ops: &[hir::BinOp_],\n+) -> Option<&'a str> {\n+    let mut trait_ids = vec![];\n+    let [krate, module] = ::utils::paths::OPS_MODULE;\n+\n+    for t in traits {\n+        let path = [krate, module, t];\n+        if let Some(trait_id) = get_trait_def_id(cx, &path) {\n+            trait_ids.push(trait_id);\n+        } else {\n+            return None;\n+        }\n+    }\n+\n+    // Get the actually implemented trait\n+    let parent_fn = cx.tcx.hir.get_parent(expr.id);\n+    let parent_impl = cx.tcx.hir.get_parent(parent_fn);\n+\n+    if_chain! {\n+        if parent_impl != ast::CRATE_NODE_ID;\n+        if let hir::map::Node::NodeItem(item) = cx.tcx.hir.get(parent_impl);\n+        if let hir::Item_::ItemImpl(_, _, _, _, Some(ref trait_ref), _, _) = item.node;\n+        if let Some(idx) = trait_ids.iter().position(|&tid| tid == trait_ref.path.def.def_id());\n+        if *binop != expected_ops[idx];\n+        then{\n+            return Some(traits[idx])\n+        }\n+    }\n+\n+    None\n+}\n+\n+struct BinaryExprVisitor {\n+    in_binary_expr: bool,\n+}\n+\n+impl<'a, 'tcx: 'a> Visitor<'tcx> for BinaryExprVisitor {\n+    fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+        if let hir::ExprBinary(_, _, _) = expr.node {\n+            self.in_binary_expr = true;\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "097627e1d7c28fc3548dd50af869a5431c275e14", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a149ec4b3cc0775108493be29a23549b1132aeea/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a149ec4b3cc0775108493be29a23549b1132aeea/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=a149ec4b3cc0775108493be29a23549b1132aeea", "patch": "@@ -0,0 +1,52 @@\n+\n+\n+\n+#![warn(suspicious_arithmetic_impl)]\n+use std::ops::{Add, AddAssign, Mul, Sub, Div};\n+\n+#[derive(Copy, Clone)]\n+struct Foo(u32);\n+\n+impl Add for Foo {\n+    type Output = Foo;\n+\n+    fn add(self, other: Self) -> Self {\n+        Foo(self.0 - other.0)\n+    }\n+}\n+\n+impl AddAssign for Foo {\n+    fn add_assign(&mut self, other: Foo) {\n+        *self = *self - other;\n+    }\n+}\n+\n+impl Mul for Foo {\n+    type Output = Foo;\n+\n+    fn mul(self, other: Foo) -> Foo {\n+        Foo(self.0 * other.0 % 42) // OK: BiRem part of BiExpr as parent node\n+    }\n+}\n+\n+impl Sub for Foo {\n+    type Output = Foo;\n+\n+    fn sub(self, other: Self) -> Self {\n+        Foo(self.0 * other.0 - 42) // OK: BiMul part of BiExpr as child node\n+    }\n+}\n+\n+impl Div for Foo {\n+    type Output = Foo;\n+\n+    fn div(self, other: Self) -> Self {\n+        Foo(do_nothing(self.0 + other.0) / 42) // OK: BiAdd part of BiExpr as child node\n+    }\n+}\n+\n+fn main() {}\n+\n+fn do_nothing(x: u32) -> u32 {\n+    x\n+}"}, {"sha": "9d5086e5497abb67bde7cdef26c3fd15a1806b12", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a149ec4b3cc0775108493be29a23549b1132aeea/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a149ec4b3cc0775108493be29a23549b1132aeea/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=a149ec4b3cc0775108493be29a23549b1132aeea", "patch": "@@ -0,0 +1,18 @@\n+error: Suspicious use of binary operator in `Add` impl\n+  --> $DIR/suspicious_arithmetic_impl.rs:14:20\n+   |\n+14 |         Foo(self.0 - other.0)\n+   |                    ^\n+   |\n+   = note: `-D suspicious-arithmetic-impl` implied by `-D warnings`\n+\n+error: Suspicious use of binary operator in `AddAssign` impl\n+  --> $DIR/suspicious_arithmetic_impl.rs:20:23\n+   |\n+20 |         *self = *self - other;\n+   |                       ^\n+   |\n+   = note: `-D suspicious-op-assign-impl` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n+"}]}