{"sha": "9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYjU5M2M5MGFmMDRkYmY4ZjliZWJiOGEzNjUwZmY5NjA5ZDEwZjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-03T23:36:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-04T04:11:20Z"}, "message": "rollup merge of #21907: alexcrichton/iter-by-ref\n\nThis removes the `ByRef` iterator adaptor to stay in line with the changes to\n`std::io`. The `by_ref` method instead just returns `&mut Self`.\n\nThis also removes the implementation of `Iterator for &mut Iterator` and instead\ngeneralizes it to `Iterator for &mut I` where `I: Iterator + ?Sized`. The\n`Box<I>` implementations were also updated.", "tree": {"sha": "abd54c9f3907c4189f3b8a2fca708de20898c0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd54c9f3907c4189f3b8a2fca708de20898c0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "html_url": "https://github.com/rust-lang/rust/commit/9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db593c90af04dbf8f9bebb8a3650ff9609d10f2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f7e0693909a45f9159c6d2ef72b42fcb4f1bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f7e0693909a45f9159c6d2ef72b42fcb4f1bac", "html_url": "https://github.com/rust-lang/rust/commit/74f7e0693909a45f9159c6d2ef72b42fcb4f1bac"}, {"sha": "d30f225b492163b14005d5069b7924f3fecf868c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30f225b492163b14005d5069b7924f3fecf868c", "html_url": "https://github.com/rust-lang/rust/commit/d30f225b492163b14005d5069b7924f3fecf868c"}], "stats": {"total": 93, "additions": 34, "deletions": 59}, "files": [{"sha": "340a8d59612f21af31e685b6f5e40fb824b234cf", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9db593c90af04dbf8f9bebb8a3650ff9609d10f2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db593c90af04dbf8f9bebb8a3650ff9609d10f2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "patch": "@@ -45,22 +45,18 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use core::prelude::*;\n+\n use core::any::Any;\n-use core::clone::Clone;\n-use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n+use core::cmp::Ordering;\n use core::default::Default;\n use core::error::{Error, FromError};\n use core::fmt;\n use core::hash::{self, Hash};\n-use core::iter::Iterator;\n-use core::marker::Sized;\n use core::mem;\n use core::ops::{Deref, DerefMut};\n-use core::option::Option;\n use core::ptr::Unique;\n use core::raw::TraitObject;\n-use core::result::Result::{Ok, Err};\n-use core::result::Result;\n \n /// A value that represents the heap. This is the default place that the `box` keyword allocates\n /// into when no place is supplied.\n@@ -296,18 +292,20 @@ impl<T: ?Sized> DerefMut for Box<T> {\n     fn deref_mut(&mut self) -> &mut T { &mut **self }\n }\n \n-impl<'a, T> Iterator for Box<Iterator<Item=T> + 'a> {\n-    type Item = T;\n-\n-    fn next(&mut self) -> Option<T> {\n-        (**self).next()\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (**self).size_hint()\n-    }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I: Iterator + ?Sized> Iterator for Box<I> {\n+    type Item = I::Item;\n+    fn next(&mut self) -> Option<I::Item> { (**self).next() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }\n+}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n+    fn next_back(&mut self) -> Option<I::Item> { (**self).next_back() }\n }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> FromError<E> for Box<Error + 'a> {\n     fn from_error(err: E) -> Box<Error + 'a> {\n         Box::new(err)"}, {"sha": "23157072d536b554e14e47d01207755a4120665b", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 19, "deletions": 42, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9db593c90af04dbf8f9bebb8a3650ff9609d10f2/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db593c90af04dbf8f9bebb8a3650ff9609d10f2/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=9db593c90af04dbf8f9bebb8a3650ff9609d10f2", "patch": "@@ -101,16 +101,11 @@ pub trait Iterator {\n     fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }\n }\n \n-impl<'a, T> Iterator for &'a mut (Iterator<Item=T> + 'a) {\n-    type Item = T;\n-\n-    fn next(&mut self) -> Option<T> {\n-        (**self).next()\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (**self).size_hint()\n-    }\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n+    type Item = I::Item;\n+    fn next(&mut self) -> Option<I::Item> { (**self).next() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }\n }\n \n /// Conversion from an `Iterator`\n@@ -549,9 +544,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// assert!(it.next() == Some(5));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn by_ref<'r>(&'r mut self) -> ByRef<'r, Self> {\n-        ByRef{iter: self}\n-    }\n+    fn by_ref(&mut self) -> &mut Self { self }\n \n     /// Loops through the entire iterator, collecting all of the elements into\n     /// a container implementing `FromIterator`.\n@@ -1019,15 +1012,22 @@ impl<I> IteratorExt for I where I: Iterator {}\n \n /// A range iterator able to yield elements from both ends\n ///\n-/// A `DoubleEndedIterator` can be thought of as a deque in that `next()` and `next_back()` exhaust\n-/// elements from the *same* range, and do not work independently of each other.\n+/// A `DoubleEndedIterator` can be thought of as a deque in that `next()` and\n+/// `next_back()` exhaust elements from the *same* range, and do not work\n+/// independently of each other.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait DoubleEndedIterator: Iterator {\n-    /// Yield an element from the end of the range, returning `None` if the range is empty.\n+    /// Yield an element from the end of the range, returning `None` if the\n+    /// range is empty.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n+    fn next_back(&mut self) -> Option<I::Item> { (**self).next_back() }\n+}\n+\n /// An object implementing random access indexing by `usize`\n ///\n /// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n@@ -1067,6 +1067,9 @@ pub trait ExactSizeIterator: Iterator {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<'a, I: ExactSizeIterator + ?Sized> ExactSizeIterator for &'a mut I {}\n+\n // All adaptors that preserve the size of the wrapped iterator are fine\n // Adaptors that may overflow in `size_hint` are not, i.e. `Chain`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1119,32 +1122,6 @@ impl<I> RandomAccessIterator for Rev<I> where I: DoubleEndedIterator + RandomAcc\n     }\n }\n \n-/// A mutable reference to an iterator\n-#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct ByRef<'a, I:'a> {\n-    iter: &'a mut I,\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I> Iterator for ByRef<'a, I> where I: 'a + Iterator {\n-    type Item = <I as Iterator>::Item;\n-\n-    #[inline]\n-    fn next(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n-    #[inline]\n-    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I> DoubleEndedIterator for ByRef<'a, I> where I: 'a + DoubleEndedIterator {\n-    #[inline]\n-    fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next_back() }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I> ExactSizeIterator for ByRef<'a, I> where I: 'a + ExactSizeIterator {}\n-\n /// A trait for iterators over elements which can be added together\n #[unstable(feature = \"core\",\n            reason = \"needs to be re-evaluated as part of numerics reform\")]"}]}