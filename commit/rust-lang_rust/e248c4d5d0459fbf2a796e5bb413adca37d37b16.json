{"sha": "e248c4d5d0459fbf2a796e5bb413adca37d37b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDhjNGQ1ZDA0NTlmYmYyYTc5NmU1YmI0MTNhZGNhMzdkMzdiMTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:19Z"}, "message": "Rollup merge of #88565 - lqd:issue-83190, r=spastorino\n\nAdd regression test for issue 83190\n\nReduced from `bioyino-metric` by ````@hellow554```` and myself.\n\nCloses #83190.\n\nr? ````@spastorino````", "tree": {"sha": "ab0326c98bb6be7a824289ba69cbf5c723f17fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab0326c98bb6be7a824289ba69cbf5c723f17fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e248c4d5d0459fbf2a796e5bb413adca37d37b16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQV7CRBK7hj4Ov3rIwAAWikIAJv8hFB20iBB/N0KK6UHYk8+\nIEhAxCvR5JC30SE9FRhAEbEcxTAl8lUl+iIaSoESGIv1MMtaslS9d+wKUxvqxZRX\nkFTfEjtEeouQvCffGLt8UfPHLirWdy3Uc3wVRncPikFbW8Rno9oQbvH4AaE+7fy4\nsgKVrTgn5sYJJmZ4K4I9AE3LCn8V/DaqNYi51Qi7tmlmWhdzp/DxA9PEuS7d7U8h\nyo5P62R9/NwKQuQgflnLpUd2ASuSNMnxp/6nljLwIBMJSftVRLH3tHwH9JbSlHif\ntE07z7EI/mIAVE9yOmxY6ov32IfOAxaFwN0mXjJNKAn3Y81/LxIpxo1PxAFRNKE=\n=KwcG\n-----END PGP SIGNATURE-----\n", "payload": "tree ab0326c98bb6be7a824289ba69cbf5c723f17fee\nparent 0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e\nparent a5fd955b9531e6cd6e8394ccf3a1f804ad227881\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602619 +0200\ncommitter GitHub <noreply@github.com> 1630602619 +0200\n\nRollup merge of #88565 - lqd:issue-83190, r=spastorino\n\nAdd regression test for issue 83190\n\nReduced from `bioyino-metric` by ````@hellow554```` and myself.\n\nCloses #83190.\n\nr? ````@spastorino````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e248c4d5d0459fbf2a796e5bb413adca37d37b16", "html_url": "https://github.com/rust-lang/rust/commit/e248c4d5d0459fbf2a796e5bb413adca37d37b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e248c4d5d0459fbf2a796e5bb413adca37d37b16/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e", "html_url": "https://github.com/rust-lang/rust/commit/0d105c0e77a35cbb6513b4bbaa4d8a2d4fd4009e"}, {"sha": "a5fd955b9531e6cd6e8394ccf3a1f804ad227881", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fd955b9531e6cd6e8394ccf3a1f804ad227881", "html_url": "https://github.com/rust-lang/rust/commit/a5fd955b9531e6cd6e8394ccf3a1f804ad227881"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "da931c3edaf6f9de6805e771f2b3b28edd27001f", "filename": "src/test/ui/issues/issue-83190.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e248c4d5d0459fbf2a796e5bb413adca37d37b16/src%2Ftest%2Fui%2Fissues%2Fissue-83190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e248c4d5d0459fbf2a796e5bb413adca37d37b16/src%2Ftest%2Fui%2Fissues%2Fissue-83190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83190.rs?ref=e248c4d5d0459fbf2a796e5bb413adca37d37b16", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+// Regression test for issue #83190, triggering an ICE in borrowck.\n+\n+pub trait Any {}\n+impl<T> Any for T {}\n+\n+pub trait StreamOnce {\n+    type Range;\n+}\n+\n+pub trait Parser<Input>: Sized {\n+    type Output;\n+    type PartialState;\n+    fn map(self) -> Map<Self> {\n+        todo!()\n+    }\n+}\n+\n+pub struct Map<P>(P);\n+impl<I, P: Parser<I, Output = ()>> Parser<I> for Map<P> {\n+    type Output = ();\n+    type PartialState = P::PartialState;\n+}\n+\n+struct TakeWhile1<Input>(Input);\n+impl<I: StreamOnce> Parser<I> for TakeWhile1<I> {\n+    type Output = I::Range;\n+    type PartialState = ();\n+}\n+impl<I> TakeWhile1<I> {\n+    fn new() -> Self {\n+        todo!()\n+    }\n+}\n+\n+impl<I, A: Parser<I>> Parser<I> for (A,) {\n+    type Output = ();\n+    type PartialState = Map<A::Output>;\n+}\n+\n+pub fn metric_stream_parser<'a, I>() -> impl Parser<I, Output = (), PartialState = impl Any + 'a>\n+where\n+    I: StreamOnce<Range = &'a [()]>,\n+{\n+    (TakeWhile1::new(),).map()\n+}\n+\n+fn main() {}"}]}