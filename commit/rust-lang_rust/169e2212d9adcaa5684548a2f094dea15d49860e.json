{"sha": "169e2212d9adcaa5684548a2f094dea15d49860e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OWUyMjEyZDlhZGNhYTU2ODQ1NDhhMmYwOTRkZWExNWQ0OTg2MGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-19T22:58:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-19T22:58:45Z"}, "message": "Rollup merge of #79194 - est31:array_into_iter_slice, r=scottmcm\n\nMake as{_mut,}_slice on array::IntoIter public\n\nThe functions are useful in cases where you want to move data out of the IntoIter in bulk, by transmute_copy'ing the slice and then forgetting the IntoIter.\n\nIn the compiler, this is useful for providing a sped up IntoIter implementation. One can alternatively provide a separate allocate_array function but one can avoid duplicating some logic by passing everything through the generic iterator using interface.\n\nAs per suggestion in https://github.com/rust-lang/rust/pull/78569/files#r526506964", "tree": {"sha": "0ce6c00ca364fc82367eda4a9a7ae7f6fb86f58d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce6c00ca364fc82367eda4a9a7ae7f6fb86f58d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/169e2212d9adcaa5684548a2f094dea15d49860e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJftvilCRBK7hj4Ov3rIwAAdHIIAFocntJe2lYp3/FZpqgQOT8x\nDxZWZE/gZZO1HSlMSZmS0WrzAhIxhXiVoGCfS/pg+c7C7felIwYpOdFD4LMJoA8/\naSK3VNbn+K+nLSHcv1Rc92LG/F66SUoPAon4J1wAasx16PsQeftpTCP7jqF3O5uX\n3uhLwzP1FV+UIVCH8yjBNyMTRo7FWrYeaEwi3zfzXEqBYEFrzJWCWtF3Rr9sTAYD\nhTz+fmgJQ2wSLGekMD96T7ow9kALIQYMbExNVcHI1CPd3OTdkpBkmAPd4oIHhJeI\nv62fiW300PqgVb/hM2K/RIfq/30iagJyw4eYiCe0zVjN/Wcczl90YptEG6wirAQ=\n=DNwR\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ce6c00ca364fc82367eda4a9a7ae7f6fb86f58d\nparent 084fc293eb75582548fb8f2ef22727ff18d4b04c\nparent de08df26d3e27cf005aaddbb60e02481de4f5866\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605826725 +0100\ncommitter GitHub <noreply@github.com> 1605826725 +0100\n\nRollup merge of #79194 - est31:array_into_iter_slice, r=scottmcm\n\nMake as{_mut,}_slice on array::IntoIter public\n\nThe functions are useful in cases where you want to move data out of the IntoIter in bulk, by transmute_copy'ing the slice and then forgetting the IntoIter.\n\nIn the compiler, this is useful for providing a sped up IntoIter implementation. One can alternatively provide a separate allocate_array function but one can avoid duplicating some logic by passing everything through the generic iterator using interface.\n\nAs per suggestion in https://github.com/rust-lang/rust/pull/78569/files#r526506964\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/169e2212d9adcaa5684548a2f094dea15d49860e", "html_url": "https://github.com/rust-lang/rust/commit/169e2212d9adcaa5684548a2f094dea15d49860e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/169e2212d9adcaa5684548a2f094dea15d49860e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084fc293eb75582548fb8f2ef22727ff18d4b04c", "url": "https://api.github.com/repos/rust-lang/rust/commits/084fc293eb75582548fb8f2ef22727ff18d4b04c", "html_url": "https://github.com/rust-lang/rust/commit/084fc293eb75582548fb8f2ef22727ff18d4b04c"}, {"sha": "de08df26d3e27cf005aaddbb60e02481de4f5866", "url": "https://api.github.com/repos/rust-lang/rust/commits/de08df26d3e27cf005aaddbb60e02481de4f5866", "html_url": "https://github.com/rust-lang/rust/commit/de08df26d3e27cf005aaddbb60e02481de4f5866"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "706f865b4d14f1fd9fbe4573dc473a2c3f696876", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/169e2212d9adcaa5684548a2f094dea15d49860e/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/169e2212d9adcaa5684548a2f094dea15d49860e/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=169e2212d9adcaa5684548a2f094dea15d49860e", "patch": "@@ -69,7 +69,8 @@ impl<T, const N: usize> IntoIter<T, N> {\n \n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet.\n-    fn as_slice(&self) -> &[T] {\n+    #[unstable(feature = \"array_value_iter_slice\", issue = \"65798\")]\n+    pub fn as_slice(&self) -> &[T] {\n         // SAFETY: We know that all elements within `alive` are properly initialized.\n         unsafe {\n             let slice = self.data.get_unchecked(self.alive.clone());\n@@ -78,7 +79,8 @@ impl<T, const N: usize> IntoIter<T, N> {\n     }\n \n     /// Returns a mutable slice of all elements that have not been yielded yet.\n-    fn as_mut_slice(&mut self) -> &mut [T] {\n+    #[unstable(feature = \"array_value_iter_slice\", issue = \"65798\")]\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n         // SAFETY: We know that all elements within `alive` are properly initialized.\n         unsafe {\n             let slice = self.data.get_unchecked_mut(self.alive.clone());"}]}