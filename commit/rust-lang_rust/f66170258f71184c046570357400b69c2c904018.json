{"sha": "f66170258f71184c046570357400b69c2c904018", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NjE3MDI1OGY3MTE4NGMwNDY1NzAzNTc0MDBiNjljMmM5MDQwMTg=", "commit": {"author": {"name": "Seeker14491", "email": "seeker14491@gmail.com", "date": "2015-10-03T23:01:42Z"}, "committer": {"name": "Seeker14491", "email": "seeker14491@gmail.com", "date": "2015-10-03T23:01:42Z"}, "message": "fix a few typos", "tree": {"sha": "f245b2aebe269057ae46ff983941fc156f9c5f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f245b2aebe269057ae46ff983941fc156f9c5f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66170258f71184c046570357400b69c2c904018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66170258f71184c046570357400b69c2c904018", "html_url": "https://github.com/rust-lang/rust/commit/f66170258f71184c046570357400b69c2c904018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66170258f71184c046570357400b69c2c904018/comments", "author": {"login": "Seeker14491", "id": 6490497, "node_id": "MDQ6VXNlcjY0OTA0OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6490497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seeker14491", "html_url": "https://github.com/Seeker14491", "followers_url": "https://api.github.com/users/Seeker14491/followers", "following_url": "https://api.github.com/users/Seeker14491/following{/other_user}", "gists_url": "https://api.github.com/users/Seeker14491/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seeker14491/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seeker14491/subscriptions", "organizations_url": "https://api.github.com/users/Seeker14491/orgs", "repos_url": "https://api.github.com/users/Seeker14491/repos", "events_url": "https://api.github.com/users/Seeker14491/events{/privacy}", "received_events_url": "https://api.github.com/users/Seeker14491/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Seeker14491", "id": 6490497, "node_id": "MDQ6VXNlcjY0OTA0OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6490497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seeker14491", "html_url": "https://github.com/Seeker14491", "followers_url": "https://api.github.com/users/Seeker14491/followers", "following_url": "https://api.github.com/users/Seeker14491/following{/other_user}", "gists_url": "https://api.github.com/users/Seeker14491/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seeker14491/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seeker14491/subscriptions", "organizations_url": "https://api.github.com/users/Seeker14491/orgs", "repos_url": "https://api.github.com/users/Seeker14491/repos", "events_url": "https://api.github.com/users/Seeker14491/events{/privacy}", "received_events_url": "https://api.github.com/users/Seeker14491/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d11a81c71c0d51980df5bd2d8c56cd295e3f2df", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d11a81c71c0d51980df5bd2d8c56cd295e3f2df", "html_url": "https://github.com/rust-lang/rust/commit/6d11a81c71c0d51980df5bd2d8c56cd295e3f2df"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "eed430aa4352a770fafcfa4766911acdf48b67c4", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f66170258f71184c046570357400b69c2c904018/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/f66170258f71184c046570357400b69c2c904018/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=f66170258f71184c046570357400b69c2c904018", "patch": "@@ -225,7 +225,7 @@ sense to put it into a function:\n ```rust\n # fn find(_: &str, _: char) -> Option<usize> { None }\n // Returns the extension of the given file name, where the extension is defined\n-// as all characters proceding the first `.`.\n+// as all characters proceeding the first `.`.\n // If `file_name` has no `.`, then `None` is returned.\n fn extension_explicit(file_name: &str) -> Option<&str> {\n     match find(file_name, '.') {\n@@ -272,7 +272,7 @@ to get rid of the case analysis:\n ```rust\n # fn find(_: &str, _: char) -> Option<usize> { None }\n // Returns the extension of the given file name, where the extension is defined\n-// as all characters proceding the first `.`.\n+// as all characters proceeding the first `.`.\n // If `file_name` has no `.`, then `None` is returned.\n fn extension(file_name: &str) -> Option<&str> {\n     find(file_name, '.').map(|i| &file_name[i+1..])\n@@ -755,7 +755,7 @@ fn main() {\n (N.B. The `AsRef<Path>` is used because those are the\n [same bounds used on\n `std::fs::File::open`](../std/fs/struct.File.html#method.open).\n-This makes it ergnomic to use any kind of string as a file path.)\n+This makes it ergonomic to use any kind of string as a file path.)\n \n There are three different errors that can occur here:\n \n@@ -1552,7 +1552,7 @@ parser and a help message from a vector of options (The fact that it\n is a vector is hidden behind a struct and a set of methods). Once the\n parsing is done, we can decode the program arguments into a Rust\n struct. From there, we can get information about the flags, for\n-instance, wether they were passed in, and what arguments they\n+instance, whether they were passed in, and what arguments they\n had. Here's our program with the appropriate `extern crate`\n statements, and the basic argument setup for Getopts:\n \n@@ -1594,7 +1594,7 @@ then store the first one, knowing that it is our program's name. Once\n that's done, we set up our argument flags, in this case a simplistic\n help message flag. Once we have the argument flags set up, we use\n `Options.parse` to parse the argument vector (starting from index one,\n-becouse index 0 is the program name). If this was successful, we\n+because index 0 is the program name). If this was successful, we\n assign matches to the parsed object, if not, we panic. Once past that,\n we test if the user passed in the help flag, and if so print the usage\n message. The option help messages are constructed by Getopts, so all\n@@ -1896,7 +1896,7 @@ for pop in search(&data_file, &city) {\n ...\n ```\n \n-In this peice of code, we take `file` (which has the type\n+In this piece of code, we take `file` (which has the type\n `Option<String>`), and convert it to a type that `search` can use, in\n this case, `&Option<AsRef<Path>>`. Do do this, we take a reference of\n file, and map `Path::new` onto it. In this case, `as_ref()` converts\n@@ -2120,7 +2120,7 @@ heuristics!\n   and\n   [`Error`](../std/error/trait.Error.html)\n   impls to make the [`try!`](../std/macro.try!.html)\n-  macro more ergnomic.\n+  macro more ergonomic.\n * If you're writing a library and your code can produce errors, define your own\n   error type and implement the\n   [`std::error::Error`](../std/error/trait.Error.html)"}]}