{"sha": "270f0eef733a625bcee68019189f19dc119f8f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MGYwZWVmNzMzYTYyNWJjZWU2ODAxOTE4OWYxOWRjMTE5ZjhmMjQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-17T20:41:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T19:29:01Z"}, "message": "Add `: Box<_>` or `::Box<_>` type annotations to various places.\n\nThis is the kind of change that one is expected to need to make to\naccommodate overloaded-`box`.\n\n----\n\nNote that this is not *all* of the changes necessary to accommodate\nIssue 22181.  It is merely the subset of those cases where there was\nalready a let-binding in place that made it easy to add the necesasry\ntype ascription.\n\n(For unnamed intermediate `Box` values, one must go down a different\nroute; `Box::new` is the option that maximizes portability, but has\npotential inefficiency depending on whether the call is inlined.)\n\n----\n\nThere is one place worth note, `run-pass/coerce-match.rs`, where I\nused an ugly form of `Box<_>` type ascription where I would have\npreferred to use `Box::new` to accommodate overloaded-`box`.  I\ndeliberately did not use `Box::new` here, because that is already done\nin coerce-match-calls.rs.\n\n----\n\nPrecursor for overloaded-`box` and placement-`in`; see Issue 22181.", "tree": {"sha": "1b58f6d17a7ca5cb04f6124eaa93e0234ff3c906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b58f6d17a7ca5cb04f6124eaa93e0234ff3c906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/270f0eef733a625bcee68019189f19dc119f8f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/270f0eef733a625bcee68019189f19dc119f8f24", "html_url": "https://github.com/rust-lang/rust/commit/270f0eef733a625bcee68019189f19dc119f8f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/270f0eef733a625bcee68019189f19dc119f8f24/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f0942a49b77f81d0bedb3d8b5fb615ef521bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f0942a49b77f81d0bedb3d8b5fb615ef521bb3", "html_url": "https://github.com/rust-lang/rust/commit/14f0942a49b77f81d0bedb3d8b5fb615ef521bb3"}], "stats": {"total": 545, "additions": 281, "deletions": 264}, "files": [{"sha": "dc1938cac1ada7b51f3d12e264d9e85245f9773d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -69,6 +69,8 @@\n //! }\n //! ```\n \n+use boxed::Box;\n+\n use core::prelude::*;\n \n use core::atomic;\n@@ -170,7 +172,7 @@ impl<T> Arc<T> {\n     pub fn new(data: T) -> Arc<T> {\n         // Start the weak pointer count as 1 which is the weak pointer that's\n         // held by all the strong pointers (kinda), see std/rc.rs for more info\n-        let x = box ArcInner {\n+        let x: Box<_> = box ArcInner {\n             strong: atomic::AtomicUsize::new(1),\n             weak: atomic::AtomicUsize::new(1),\n             data: data,"}, {"sha": "3b93171386a076e13d1f77a83e31756f2e8fb4a0", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -387,6 +387,7 @@ mod test {\n     extern crate test;\n     use self::test::Bencher;\n     use core::ptr::PtrExt;\n+    use boxed::Box;\n     use heap;\n \n     #[test]\n@@ -404,7 +405,7 @@ mod test {\n     #[bench]\n     fn alloc_owned_small(b: &mut Bencher) {\n         b.iter(|| {\n-            box 10\n+            let _: Box<_> = box 10;\n         })\n     }\n }"}, {"sha": "b1fdf139b0c51c739ac10325c00f93857eb538f8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -96,9 +96,15 @@ pub mod heap;\n \n // Primitive types using the heaps above\n \n+// Need to conditionally define the mod from `boxed.rs` to avoid\n+// duplicating the lang-items when building in test cfg; but also need\n+// to allow code to have `use boxed::HEAP;`\n+// and `use boxed::Box;` declarations.\n #[cfg(not(test))]\n pub mod boxed;\n #[cfg(test)]\n+mod boxed { pub use std::boxed::{Box, HEAP}; }\n+#[cfg(test)]\n mod boxed_test;\n pub mod arc;\n pub mod rc;"}, {"sha": "763dcc7f256e91534ac4a6c07e8745c8f91767fc", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -795,6 +795,7 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n #[cfg(test)]\n mod tests {\n     use super::{Rc, Weak, weak_count, strong_count};\n+    use std::boxed::Box;\n     use std::cell::RefCell;\n     use std::option::Option;\n     use std::option::Option::{Some, None};\n@@ -826,7 +827,7 @@ mod tests {\n \n     #[test]\n     fn test_destructor() {\n-        let x = Rc::new(box 5);\n+        let x: Rc<Box<_>> = Rc::new(box 5);\n         assert_eq!(**x, 5);\n     }\n "}, {"sha": "4678fe15c8b7ba91efe53d6f9da1525a0ff5dbd1", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -581,11 +581,11 @@ mod tests {\n     #[bench]\n     pub fn bench_copy_nonarena(b: &mut Bencher) {\n         b.iter(|| {\n-            box Point {\n+            let _: Box<_> = box Point {\n                 x: 1,\n                 y: 2,\n                 z: 3,\n-            }\n+            };\n         })\n     }\n \n@@ -634,10 +634,10 @@ mod tests {\n     #[bench]\n     pub fn bench_noncopy_nonarena(b: &mut Bencher) {\n         b.iter(|| {\n-            box Noncopy {\n+            let _: Box<_> = box Noncopy {\n                 string: \"hello world\".to_string(),\n                 array: vec!( 1, 2, 3, 4, 5 ),\n-            }\n+            };\n         })\n     }\n "}, {"sha": "2e575ddb00a3275bb23cf8c33fedea0857050192", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -790,7 +790,7 @@ mod tests {\n \n     #[test]\n     fn test_push_unique() {\n-        let mut heap = BinaryHeap::from_vec(vec![box 2, box 4, box 9]);\n+        let mut heap = BinaryHeap::<Box<_>>::from_vec(vec![box 2, box 4, box 9]);\n         assert_eq!(heap.len(), 3);\n         assert!(*heap.peek().unwrap() == box 9);\n         heap.push(box 11);"}, {"sha": "5ca3cb380583bc3e5580048b779d9a9ac42e8ccc", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -984,7 +984,7 @@ mod tests {\n \n     #[test]\n     fn test_basic() {\n-        let mut m = LinkedList::new();\n+        let mut m = LinkedList::<Box<_>>::new();\n         assert_eq!(m.pop_front(), None);\n         assert_eq!(m.pop_back(), None);\n         assert_eq!(m.pop_front(), None);"}, {"sha": "ecff2c7cc4bb54d1fe2035eed31aaddc06fabfd6", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -1509,6 +1509,7 @@ fn merge_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> Order\n \n #[cfg(test)]\n mod tests {\n+    use alloc::boxed::Box;\n     use core::cmp::Ordering::{Greater, Less, Equal};\n     use core::prelude::{Some, None, Clone};\n     use core::prelude::{Iterator, IteratorExt};\n@@ -1799,7 +1800,7 @@ mod tests {\n     #[test]\n     fn test_swap_remove_noncopyable() {\n         // Tests that we don't accidentally run destructors twice.\n-        let mut v = Vec::new();\n+        let mut v: Vec<Box<_>> = Vec::new();\n         v.push(box 0u8);\n         v.push(box 0u8);\n         v.push(box 0u8);\n@@ -1828,7 +1829,7 @@ mod tests {\n \n     #[test]\n     fn test_truncate() {\n-        let mut v = vec![box 6,box 5,box 4];\n+        let mut v: Vec<Box<_>> = vec![box 6,box 5,box 4];\n         v.truncate(1);\n         let v = v;\n         assert_eq!(v.len(), 1);\n@@ -1838,7 +1839,7 @@ mod tests {\n \n     #[test]\n     fn test_clear() {\n-        let mut v = vec![box 6,box 5,box 4];\n+        let mut v: Vec<Box<_>> = vec![box 6,box 5,box 4];\n         v.clear();\n         assert_eq!(v.len(), 0);\n         // If the unsafe block didn't drop things properly, we blow up here.\n@@ -1863,11 +1864,11 @@ mod tests {\n \n     #[test]\n     fn test_dedup_unique() {\n-        let mut v0 = vec![box 1, box 1, box 2, box 3];\n+        let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n         v0.dedup();\n-        let mut v1 = vec![box 1, box 2, box 2, box 3];\n+        let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n         v1.dedup();\n-        let mut v2 = vec![box 1, box 2, box 3, box 3];\n+        let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n         v2.dedup();\n         /*\n          * If the boxed pointers were leaked or otherwise misused, valgrind\n@@ -1877,11 +1878,11 @@ mod tests {\n \n     #[test]\n     fn test_dedup_shared() {\n-        let mut v0 = vec![box 1, box 1, box 2, box 3];\n+        let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];\n         v0.dedup();\n-        let mut v1 = vec![box 1, box 2, box 2, box 3];\n+        let mut v1: Vec<Box<_>> = vec![box 1, box 2, box 2, box 3];\n         v1.dedup();\n-        let mut v2 = vec![box 1, box 2, box 3, box 3];\n+        let mut v2: Vec<Box<_>> = vec![box 1, box 2, box 3, box 3];\n         v2.dedup();\n         /*\n          * If the pointers were leaked or otherwise misused, valgrind and/or\n@@ -2254,8 +2255,9 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_permute_fail() {\n-        let v = [(box 0, Rc::new(0)), (box 0, Rc::new(0)),\n-                 (box 0, Rc::new(0)), (box 0, Rc::new(0))];\n+        let v: [(Box<_>, Rc<_>); 4] =\n+            [(box 0, Rc::new(0)), (box 0, Rc::new(0)),\n+             (box 0, Rc::new(0)), (box 0, Rc::new(0))];\n         let mut i = 0;\n         for _ in v.permutations() {\n             if i == 2 {\n@@ -2849,7 +2851,7 @@ mod tests {\n \n     #[test]\n     fn test_to_vec() {\n-        let xs = box [1, 2, 3];\n+        let xs: Box<_> = box [1, 2, 3];\n         let ys = xs.to_vec();\n         assert_eq!(ys, [1, 2, 3]);\n     }"}, {"sha": "2e947ea24602aafdedb64848032d87ab8b53dc6a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -2130,8 +2130,8 @@ mod tests {\n     #[test]\n     fn test_clone_from() {\n         let mut v = vec!();\n-        let three = vec!(box 1, box 2, box 3);\n-        let two = vec!(box 4, box 5);\n+        let three: Vec<Box<_>> = vec!(box 1, box 2, box 3);\n+        let two: Vec<Box<_>> = vec!(box 4, box 5);\n         // zero, long\n         v.clone_from(&three);\n         assert_eq!(v, three);"}, {"sha": "515de74e340ac9d5fd6f7b3c78d784a1e05d82a2", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -1205,7 +1205,7 @@ mod test_map {\n \n     #[test]\n     fn test_move_iter() {\n-        let mut m = VecMap::new();\n+        let mut m: VecMap<Box<_>> = VecMap::new();\n         m.insert(1, box 2);\n         let mut called = false;\n         for (k, v) in m {"}, {"sha": "39f5d237a2b7364501ab7a52bbccc5ca2b8df2c4", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -68,7 +68,7 @@ fn any_downcast_ref() {\n #[test]\n fn any_downcast_mut() {\n     let mut a = 5_usize;\n-    let mut b = box 7_usize;\n+    let mut b: Box<_> = box 7_usize;\n \n     let a_r = &mut a as &mut Any;\n     let tmp: &mut uint = &mut *b;"}, {"sha": "59116f23d44b64ab7dbe50ba8e69702d4c557e41", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -16,7 +16,7 @@ use core::clone::Clone;\n #[test]\n fn test_get_ptr() {\n     unsafe {\n-        let x = box 0;\n+        let x: Box<_> = box 0;\n         let addr_x: *const int = mem::transmute(&*x);\n         let opt = Some(x);\n         let y = opt.unwrap();"}, {"sha": "844920ad5ece1a8d7ec7731df38714ee054eebfd", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -606,7 +606,7 @@ mod tests {\n \n         let tests = wikipedia_tests;\n \n-        let mut sh = box Sha256::new();\n+        let mut sh: Box<_> = box Sha256::new();\n \n         test_hash(&mut *sh, &tests);\n     }"}, {"sha": "f1634cd422935db42c534236ab13e3abced87055", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -323,22 +323,22 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n-        let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr();\n-        let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr();\n-        self.read_or(&mut [box ipv4_addr, box ipv6_addr])\n+        let ipv4_addr: Box<_> = box |p: &mut Parser| p.read_ipv4_addr();\n+        let ipv6_addr: Box<_> = box |p: &mut Parser| p.read_ipv6_addr();\n+        self.read_or(&mut [ipv4_addr, ipv6_addr])\n     }\n \n     fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n         let ip_addr = |p: &mut Parser| {\n-            let ipv4_p = |p: &mut Parser| p.read_ip_addr();\n-            let ipv6_p = |p: &mut Parser| {\n+            let ipv4_p: Box<_> = box |p: &mut Parser| p.read_ip_addr();\n+            let ipv6_p: Box<_> = box |p: &mut Parser| {\n                 let open_br = |p: &mut Parser| p.read_given_char('[');\n                 let ip_addr = |p: &mut Parser| p.read_ipv6_addr();\n                 let clos_br = |p: &mut Parser| p.read_given_char(']');\n                 p.read_seq_3::<char, IpAddr, char, _, _, _>(open_br, ip_addr, clos_br)\n                         .map(|t| match t { (_, ip, _) => ip })\n             };\n-            p.read_or(&mut [box ipv4_p, box ipv6_p])\n+            p.read_or(&mut [ipv4_p, ipv6_p])\n         };\n         let colon = |p: &mut Parser| p.read_given_char(':');\n         let port  = |p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);"}, {"sha": "1a1e9e69e71122eabe6254036f1e174fcb1a8aaa", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -1044,13 +1044,13 @@ mod test {\n \n     #[test]\n     fn drop_full() {\n-        let (tx, _rx) = channel();\n+        let (tx, _rx) = channel::<Box<int>>();\n         tx.send(box 1).unwrap();\n     }\n \n     #[test]\n     fn drop_full_shared() {\n-        let (tx, _rx) = channel();\n+        let (tx, _rx) = channel::<Box<int>>();\n         drop(tx.clone());\n         drop(tx.clone());\n         tx.send(box 1).unwrap();\n@@ -1389,7 +1389,7 @@ mod test {\n     #[test]\n     fn oneshot_multi_thread_send_recv_stress() {\n         for _ in 0..stress_factor() {\n-            let (tx, rx) = channel();\n+            let (tx, rx) = channel::<Box<int>>();\n             let _t = thread::spawn(move|| {\n                 tx.send(box 10).unwrap();\n             });\n@@ -1566,7 +1566,7 @@ mod sync_tests {\n \n     #[test]\n     fn drop_full() {\n-        let (tx, _rx) = sync_channel(1);\n+        let (tx, _rx) = sync_channel::<Box<int>>(1);\n         tx.send(box 1).unwrap();\n     }\n "}, {"sha": "14ed253d8e27ef8f056d7c1e62a4dd5edeb7be09", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -164,7 +164,7 @@ mod tests {\n \n     #[test]\n     fn test_full() {\n-        let q = Queue::new();\n+        let q: Queue<Box<_>> = Queue::new();\n         q.push(box 1);\n         q.push(box 2);\n     }"}, {"sha": "3fb13739aa75af4b0a4cc766791a73fc7b39da81", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -289,7 +289,7 @@ mod test {\n     #[test]\n     fn drop_full() {\n         unsafe {\n-            let q = Queue::new(0);\n+            let q: Queue<Box<_>> = Queue::new(0);\n             q.push(box 1);\n             q.push(box 2);\n         }"}, {"sha": "9be77e78ed1f3cb910a7fb5f542fba12b162e542", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -804,7 +804,7 @@ mod test {\n     fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Thunk<'static>) {\n         let (tx, rx) = channel();\n \n-        let x = box 1;\n+        let x: Box<_> = box 1;\n         let x_in_parent = (&*x) as *const i32 as usize;\n \n         spawnfn(Thunk::new(move|| {"}, {"sha": "5cfe62d967c580b9face83b4cb4c074fe79fd429", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -146,7 +146,7 @@ impl Table {\n     fn search_remainder<C:TableCallback>(item: &mut Entry, key: Code, c: C) {\n         match item.next {\n             None => {\n-                let mut entry = box Entry {\n+                let mut entry: Box<_> = box Entry {\n                     code: key,\n                     count: 0,\n                     next: None,\n@@ -170,7 +170,7 @@ impl Table {\n \n         {\n             if self.items[index as usize].is_none() {\n-                let mut entry = box Entry {\n+                let mut entry: Box<_> = box Entry {\n                     code: key,\n                     count: 0,\n                     next: None,"}, {"sha": "f308743ad136d276fbf2c472bbc5690ad0a2ac69", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -124,7 +124,7 @@ impl Sudoku {\n     fn next_color(&mut self, row: u8, col: u8, start_color: u8) -> bool {\n         if start_color < 10u8 {\n             // colors not yet used\n-            let mut avail = box Colors::new(start_color);\n+            let mut avail: Box<_> = box Colors::new(start_color);\n \n             // drop colors already in use in neighbourhood\n             self.drop_colors(&mut *avail, row, col);"}, {"sha": "b1abbad525356a5ff43f6a894b765ff3d5a20290", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -16,7 +16,7 @@ struct Foo(Box<isize>, isize);\n struct Bar(isize, isize);\n \n fn main() {\n-    let x = (box 1, 2);\n+    let x: (Box<_>, _) = (box 1, 2);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n "}, {"sha": "7913f9ac90300c80f9a54abf4e6dc5a62432fe79", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -23,7 +23,7 @@ fn add(v: &usize, w: usize) -> usize {\n }\n \n fn implicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n \n     // Note the danger here:\n     //\n@@ -36,7 +36,7 @@ fn implicit() {\n }\n \n fn explicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n     add(\n         &*a,\n         rewrite(&mut a)); //~ ERROR cannot borrow"}, {"sha": "e24d4e87add83613a27f3d3acc7480cd79c84fd7", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -23,7 +23,7 @@ fn add(v: &usize, w: Box<usize>) -> usize {\n }\n \n fn implicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n \n     // Note the danger here:\n     //\n@@ -36,7 +36,7 @@ fn implicit() {\n }\n \n fn explicit() {\n-    let mut a = box 1;\n+    let mut a: Box<_> = box 1;\n     add(\n         &*a,\n         a); //~ ERROR cannot move"}, {"sha": "3662e23a4122f71da9c7e74be2b7aa23773cb9b6", "filename": "src/test/compile-fail/borrowck-borrow-immut-deref-of-box-as-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -18,7 +18,7 @@ impl A {\n }\n \n pub fn main() {\n-    let a = box A;\n+    let a: Box<_> = box A;\n     a.foo();\n     //~^ ERROR cannot borrow immutable `Box` content `*a` as mutable\n }"}, {"sha": "59514f75a77d8b07bb39f68791677173a108fbd4", "filename": "src/test/compile-fail/borrowck-box-insensitivity.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -31,100 +31,100 @@ struct D {\n }\n \n fn copy_after_move() {\n-    let a = box A { x: box 0, y: 1 };\n+    let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n     let _y = a.y; //~ ERROR use of moved\n     //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn move_after_move() {\n-    let a = box B { x: box 0, y: box 1 };\n+    let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n     let _y = a.y; //~ ERROR use of moved\n     //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn borrow_after_move() {\n-    let a = box A { x: box 0, y: 1 };\n+    let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n     let _y = &a.y; //~ ERROR use of moved\n     //~^^ NOTE `a` moved here (through moving `a.x`)\n }\n \n fn move_after_borrow() {\n-    let a = box B { x: box 0, y: box 1 };\n+    let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn copy_after_mut_borrow() {\n-    let mut a = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n     let _y = a.y; //~ ERROR cannot use\n }\n \n fn move_after_mut_borrow() {\n-    let mut a = box B { x: box 0, y: box 1 };\n+    let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn borrow_after_mut_borrow() {\n-    let mut a = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n     let _y = &a.y; //~ ERROR cannot borrow\n }\n \n fn mut_borrow_after_borrow() {\n-    let mut a = box A { x: box 0, y: 1 };\n+    let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n     let _y = &mut a.y; //~ ERROR cannot borrow\n }\n \n fn copy_after_move_nested() {\n-    let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n     let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_move_nested() {\n-    let a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n     let _y = a.y; //~ ERROR use of collaterally moved\n }\n \n fn borrow_after_move_nested() {\n-    let a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n     let _y = &a.y; //~ ERROR use of collaterally moved\n }\n \n fn move_after_borrow_nested() {\n-    let a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn copy_after_mut_borrow_nested() {\n-    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n     let _y = a.y; //~ ERROR cannot use\n }\n \n fn move_after_mut_borrow_nested() {\n-    let mut a = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n+    let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n     let _y = a.y; //~ ERROR cannot move\n }\n \n fn borrow_after_mut_borrow_nested() {\n-    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n     let _y = &a.y; //~ ERROR cannot borrow\n }\n \n fn mut_borrow_after_borrow_nested() {\n-    let mut a = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n+    let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n     let _y = &mut a.y; //~ ERROR cannot borrow\n }"}, {"sha": "aaa0766121543fc5c4b0f2a000fb424b2d2ff106", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -52,7 +52,7 @@ fn e() {\n }\n \n fn f() {\n-    let mut x = box 3;\n+    let mut x: Box<_> = box 3;\n     let c1 = || get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }\n@@ -62,7 +62,7 @@ fn g() {\n         f: Box<isize>\n     }\n \n-    let mut x = box Foo { f: box 3 };\n+    let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n     *x.f = 5; //~ ERROR cannot assign to `*x.f`\n }\n@@ -72,7 +72,7 @@ fn h() {\n         f: Box<isize>\n     }\n \n-    let mut x = box Foo { f: box 3 };\n+    let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n     let c2 = || *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n }"}, {"sha": "29546abe0bb20bb66b40b284ea23a686840e61af", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -50,7 +50,7 @@ fn g() {\n         f: Box<isize>\n     }\n \n-    let mut x = box Foo { f: box 3 };\n+    let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once"}, {"sha": "bb474342a7c6f5bcb61fbab51b66e4ba8105f189", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -25,7 +25,7 @@ impl Drop for Foo {\n }\n \n fn main() {\n-  let mut ptr = box Foo { x: 0 };\n+  let mut ptr: Box<_> = box Foo { x: 0 };\n   let mut test = |foo: &Foo| {\n     ptr = box Foo { x: ptr.x + 1 };\n   };"}, {"sha": "b6b260065557a16baac6f2de819475bba376c8a4", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     for &a in &f.a {  //~ ERROR cannot move out\n     }\n \n-    let x = Some(box 1);\n+    let x: Option<Box<_>> = Some(box 1);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n }"}, {"sha": "deae1fbad20c8484f65d2d6b47b9d7c3ac78b71f", "filename": "src/test/compile-fail/borrowck-issue-14498.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -18,7 +18,7 @@ struct B<'a> { a: Box<&'a mut isize> }\n \n fn borrow_in_var_from_var() {\n     let mut x: isize = 1;\n-    let y = box &mut x;\n+    let y: Box<_> = box &mut x;\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n@@ -28,7 +28,7 @@ fn borrow_in_var_from_var() {\n \n fn borrow_in_var_from_field() {\n     let mut x = A { a: 1 };\n-    let y = box &mut x.a;\n+    let y: Box<_> = box &mut x.a;\n     let p = &y;\n     let q = &***p;\n     **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed"}, {"sha": "0e1712137d34e27c554732cd7aa48e869ef3ee16", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1);\n+    let x: Option<Box<_>> = Some(box 1);\n     match x {\n       Some(ref _y) => {\n         let _a = x; //~ ERROR cannot move"}, {"sha": "a389a4a5593f07ca879ecbb53f9b6d200636da51", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1);\n+    let x: Option<Box<_>> = Some(box 1);\n     match x {\n       Some(ref y) => {\n         let _b = *y; //~ ERROR cannot move out"}, {"sha": "0efe8622621785c0e762210c11463bd3b51db05c", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -30,7 +30,7 @@ fn pre_freeze_cond() {\n     // In this instance, the freeze is conditional and starts before\n     // the mut borrow.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w;\n     if cond() {\n         _w = &v;\n@@ -42,7 +42,7 @@ fn pre_freeze_else() {\n     // In this instance, the freeze and mut borrow are on separate sides\n     // of the if.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w;\n     if cond() {\n         _w = &v;"}, {"sha": "f841fedf75af913cd03a0e26fe7f17c3b3dfaf5b", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -28,7 +28,7 @@ fn inc(v: &mut Box<isize>) {\n fn loop_overarching_alias_mut() {\n     // In this instance, the borrow encompasses the entire loop.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n@@ -39,7 +39,7 @@ fn loop_overarching_alias_mut() {\n fn block_overarching_alias_mut() {\n     // In this instance, the borrow encompasses the entire closure call.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     for _ in 0..3 {\n         borrow(&*v); //~ ERROR cannot borrow\n@@ -50,8 +50,8 @@ fn block_overarching_alias_mut() {\n fn loop_aliased_mut() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n         borrow_mut(&mut *v); //~ ERROR cannot borrow\n@@ -62,8 +62,8 @@ fn loop_aliased_mut() {\n fn while_aliased_mut() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n         borrow_mut(&mut *v); //~ ERROR cannot borrow\n@@ -75,8 +75,8 @@ fn while_aliased_mut() {\n fn loop_aliased_mut_break() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n         borrow_mut(&mut *v);\n@@ -89,8 +89,8 @@ fn loop_aliased_mut_break() {\n fn while_aliased_mut_break() {\n     // In this instance, the borrow is carried through the loop.\n \n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n         borrow_mut(&mut *v);\n@@ -101,8 +101,8 @@ fn while_aliased_mut_break() {\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut x = &mut w;\n     while cond {\n         **x += 1;"}, {"sha": "6da8f088b3279005474b3368b9d6cd4e5f745784", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -29,15 +29,15 @@ fn inc(v: &mut Box<isize>) {\n fn pre_freeze() {\n     // In this instance, the freeze starts before the mut borrow.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w = &v;\n     borrow_mut(&mut *v); //~ ERROR cannot borrow\n }\n \n fn post_freeze() {\n     // In this instance, the const alias starts after the borrow.\n \n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     borrow_mut(&mut *v);\n     let _w = &v;\n }"}, {"sha": "57b584a89599f0a88512b043d7ec66dc34047eff", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -17,7 +17,7 @@ fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n }\n \n fn box_imm() {\n-    let v = box 3;\n+    let v: Box<_> = box 3;\n     let _w = &v;\n     thread::spawn(move|| {\n         println!(\"v={}\", *v);\n@@ -26,7 +26,7 @@ fn box_imm() {\n }\n \n fn box_imm_explicit() {\n-    let v = box 3;\n+    let v: Box<_> = box 3;\n     let _w = &v;\n     thread::spawn(move|| {\n         println!(\"v={}\", *v);"}, {"sha": "32d8088549d4fb9fd113ffe82313bee07ab7c4d0", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -15,7 +15,7 @@ fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n }\n \n fn box_imm() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     borrow(&*v,\n            |w| { //~ ERROR cannot borrow `v` as mutable\n             v = box 4;"}, {"sha": "bad521210439ff2f68f3773bea6e627feeb15ad6", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@ fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n pub fn main() {\n-    let bar = box 3;\n+    let bar: Box<_> = box 3;\n     let _g = to_fn_mut(|| {\n         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n     });"}, {"sha": "c02c6a7151428fbedb7e79b8e3b2ff89cde5308d", "filename": "src/test/compile-fail/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let a = box box 2;\n+    let a: Box<Box<_>> = box box 2;\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed"}, {"sha": "c46bcbb32b9cf13bd796b10637762629bd7af739", "filename": "src/test/compile-fail/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -15,7 +15,7 @@ fn call_f<F:FnOnce() -> isize>(f: F) -> isize {\n }\n \n fn main() {\n-    let t = box 3;\n+    let t: Box<_> = box 3;\n \n     call_f(move|| { *t + 1 });\n     call_f(move|| { *t + 1 }); //~ ERROR capture of moved value"}, {"sha": "f417416e7b53e6c860c13f70722845dc9573fa8a", "filename": "src/test/compile-fail/borrowck-multiple-captures.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -15,9 +15,9 @@ use std::thread;\n fn borrow<T>(_: &T) { }\n \n fn different_vars_after_borrows() {\n-    let x1 = box 1;\n+    let x1: Box<_> = box 1;\n     let p1 = &x1;\n-    let x2 = box 2;\n+    let x2: Box<_> = box 2;\n     let p2 = &x2;\n     thread::spawn(move|| {\n         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n@@ -28,9 +28,9 @@ fn different_vars_after_borrows() {\n }\n \n fn different_vars_after_moves() {\n-    let x1 = box 1;\n+    let x1: Box<_> = box 1;\n     drop(x1);\n-    let x2 = box 2;\n+    let x2: Box<_> = box 2;\n     drop(x2);\n     thread::spawn(move|| {\n         drop(x1); //~ ERROR capture of moved value: `x1`\n@@ -39,7 +39,7 @@ fn different_vars_after_moves() {\n }\n \n fn same_var_after_borrow() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     let p = &x;\n     thread::spawn(move|| {\n         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n@@ -49,7 +49,7 @@ fn same_var_after_borrow() {\n }\n \n fn same_var_after_move() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     drop(x);\n     thread::spawn(move|| {\n         drop(x); //~ ERROR capture of moved value: `x`"}, {"sha": "8cb7423f3cb5efc1aa4bf349ba25c0b1821f0c31", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -19,7 +19,7 @@ enum cycle {\n     empty\n }\n fn main() {\n-    let mut x = box cycle::node(node_ {a: box cycle::empty});\n+    let mut x: Box<_> = box cycle::node(node_ {a: box cycle::empty});\n     // Create a cycle!\n     match *x {\n       cycle::node(ref mut y) => {"}, {"sha": "58668b73cbffbc609681893e986472ba282117de", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -25,7 +25,7 @@ impl<T> Index<usize> for MyVec<T> {\n }\n \n fn main() {\n-    let v = MyVec { data: vec!(box 1, box 2, box 3) };\n+    let v = MyVec::<Box<_>> { data: vec!(box 1, box 2, box 3) };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n     //~^ ERROR cannot move out of indexed content"}, {"sha": "f36dc0ca43fa25beaa03a6ac3bd03bbbcbaa1f07", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,7 +13,7 @@\n fn borrow(_v: &isize) {}\n \n fn local() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     borrow(&*v);\n }\n \n@@ -32,27 +32,27 @@ fn local_recs() {\n }\n \n fn aliased_imm() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w = &v;\n     borrow(&*v);\n }\n \n fn aliased_mut() {\n-    let mut v = box 3;\n+    let mut v: Box<_> = box 3;\n     let _w = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n }\n \n fn aliased_other() {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let _x = &mut w;\n     borrow(&*v);\n }\n \n fn aliased_other_reassign() {\n-    let mut v = box 3;\n-    let mut w = box 4;\n+    let mut v: Box<_> = box 3;\n+    let mut w: Box<_> = box 4;\n     let mut _x = &mut w;\n     _x = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`"}, {"sha": "08e8effc626f5bd68b7e6bda91e97b9fb3fa3aa5", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     let f = move|| {\n         let _a = x;\n         drop(x);"}, {"sha": "7313d357ffc1a09f2a068e53e1667be3e953f38c", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -21,7 +21,7 @@ impl Drop for Foo {\n }\n \n fn main() {\n-    let mut ptr = box Foo { x: 0 };\n+    let mut ptr: Box<_> = box Foo { x: 0 };\n     let mut test = |foo: &Foo| {\n         println!(\"access {}\", foo.x);\n         ptr = box Foo { x: ptr.x + 1 };"}, {"sha": "7bd072c6268cdfcc7520130b545a62fc46a8a95b", "filename": "src/test/compile-fail/issue-11925.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let r = {\n-        let x = box 42;\n+        let x: Box<_> = box 42;\n         let f = to_fn_once(move|| &x); //~ ERROR: `x` does not live long enough\n         f()\n     };"}, {"sha": "5565a9a5761166d0a52fb7649d241990b546c492", "filename": "src/test/compile-fail/issue-12127.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn do_it(x: &isize) { }\n \n fn main() {\n-    let x = box 22;\n+    let x: Box<_> = box 22;\n     let f = to_fn_once(move|| do_it(&*x));\n     to_fn_once(move|| {\n         f();"}, {"sha": "f40d51f1d2fd3c59c3aef358a2ca1de3b5aef372", "filename": "src/test/compile-fail/issue-17263.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,12 +13,12 @@\n struct Foo { a: isize, b: isize }\n \n fn main() {\n-    let mut x = box Foo { a: 1, b: 2 };\n+    let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n     //~^ ERROR cannot borrow `x` (here through borrowing `x.b`) as mutable more than once at a time\n     //~^^ NOTE previous borrow of `x` occurs here (through borrowing `x.a`)\n \n-    let mut foo = box Foo { a: 1, b: 2 };\n+    let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n     let (c, d) = (&mut foo.a, &foo.b);\n     //~^ ERROR cannot borrow `foo` (here through borrowing `foo.b`) as immutable\n     //~^^ NOTE previous borrow of `foo` occurs here (through borrowing `foo.a`)"}, {"sha": "80e5f2b6e2157917e943bc88a1397a720c917abd", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -16,13 +16,13 @@\n #[cfg(target_pointer_width = \"64\")]\n fn main() {\n     let n = 0_usize;\n-    let a = box [&n; 0xF000000000000000_usize];\n+    let a: Box<_> = box [&n; 0xF000000000000000_usize];\n     println!(\"{}\", a[0xFFFFFF_usize]);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n fn main() {\n     let n = 0_usize;\n-    let a = box [&n; 0xFFFFFFFF_usize];\n+    let a: Box<_> = box [&n; 0xFFFFFFFF_usize];\n     println!(\"{}\", a[0xFFFFFF_usize]);\n }"}, {"sha": "fd0789421e0045fb4a5c45f25076c139a8ac7e2c", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -21,7 +21,7 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn main() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     take_param(&x);\n     //~^ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "52ca24d0f547a7fe20a4177bdd25f5f19453c630", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -24,12 +24,12 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     take_param(&x); //~ ERROR `core::marker::Copy` is not implemented\n }\n \n fn b() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     let y = &x;\n     let z = &x as &Foo; //~ ERROR `core::marker::Copy` is not implemented\n }"}, {"sha": "6fcab380030331417ffe56711e8eb3630ce9a15f", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 5;\n+    let x: Box<_> = box 5;\n     let y = x;\n     println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n     y.clone();"}, {"sha": "068bfa3cd7c7b0728cdee3600590a4d9182e5292", "filename": "src/test/compile-fail/move-in-guard-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-1.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n \n     let v = (1, 2);\n "}, {"sha": "984963b2f830ee2246e297175db744f6d1d3eb47", "filename": "src/test/compile-fail/move-in-guard-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-in-guard-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n \n     let v = (1, 2);\n "}, {"sha": "b7393666719630029aa400475ed9bb880ac0acae", "filename": "src/test/compile-fail/move-out-of-tuple-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,7 +13,7 @@\n struct Foo(Box<isize>);\n \n fn main() {\n-    let x = (box 1,);\n+    let x: (Box<_>,) = (box 1,);\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n "}, {"sha": "6829cd574e1b00114c716a17c851bf14ec930405", "filename": "src/test/compile-fail/mut-cross-borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,7 +13,7 @@\n fn f(_: &mut isize) {}\n \n fn main() {\n-    let mut x = box 3;\n+    let mut x: Box<_> = box 3;\n     f(x)    //~ ERROR mismatched types\n }\n "}, {"sha": "eca22bfdda07a8a1579af54dd3cb380d5d450c6d", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,7 +13,7 @@\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     f(x);\n     let x = &3; //~ ERROR borrowed value does not live long enough\n     f(x);"}, {"sha": "26d22b072eb48ce3eda25139d5348ebe21141180", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -34,8 +34,8 @@ impl List {\n }\n \n fn main() {\n-    let n = box Number { n: 42 };\n-    let mut l = box List { list: Vec::new() };\n+    let n: Box<_> = box Number { n: 42 };\n+    let mut l: Box<_> = box List { list: Vec::new() };\n     l.push(n);\n     let x = n.to_string();\n     //~^ ERROR: use of moved value: `n`"}, {"sha": "4430ea9380d43585a8c11ef49edbaf7febd4a074", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -78,7 +78,7 @@ fn main() {\n     let stack_val_interior_ref_2: &f64 = &stack_val.y;\n     let ref_to_unnamed: &SomeStruct = &SomeStruct { x: 11, y: 24.5 };\n \n-    let unique_val = box SomeStruct { x: 13, y: 26.5 };\n+    let unique_val: Box<_> = box SomeStruct { x: 13, y: 26.5 };\n     let unique_val_ref: &SomeStruct = &*unique_val;\n     let unique_val_interior_ref_1: &int = &unique_val.x;\n     let unique_val_interior_ref_2: &f64 = &unique_val.y;"}, {"sha": "9c6e197e65e23ebd495db0996f15fe8ed50c762e", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -57,9 +57,9 @@ impl Drop for StructWithDestructor {\n \n fn main() {\n \n-    let unique = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n+    let unique: Box<_> = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n \n-    let unique_dtor = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n+    let unique_dtor: Box<_> = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n     zzz(); // #break\n }\n "}, {"sha": "8b698d900af0428cb2ec8ce8fbb90a71cc80d3fd", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -142,7 +142,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n-    let owned = box Struct { x: 1234.5f64 };\n+    let owned: Box<_> = box Struct { x: 1234.5f64 };\n     let _ = owned.self_by_ref(-5, -6_i32);\n     let _ = owned.self_by_val(-7, -8_i64);\n     let _ = owned.self_owned(-9, -10.5_f32);"}, {"sha": "638d73f0d4e3c09e222663576a4a4fb22f8d5bac", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -144,7 +144,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Enum::Variant1{ x: 1799, y: 1799 };\n+    let owned: Box<_> = box Enum::Variant1{ x: 1799, y: 1799 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "784d60eec9a1ad953787b9cb7ee984a0710067bf", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -143,7 +143,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 1234.5f64 };\n+    let owned: Box<_> = box Struct { x: 1234.5f64 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "a91586a6aa6bee4e335b0a27433c34f2788f7e0c", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -143,7 +143,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 200 };\n+    let owned: Box<_> = box Struct { x: 200 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "e2c827ee5170f0f8af4b08fbd025a56862556734", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -149,7 +149,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 200 };\n+    let owned: Box<_> = box Struct { x: 200 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "e8bc40f1810f3b921df98a481eaf00eaa01d76eb", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -141,7 +141,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box TupleStruct(200, -200.5);\n+    let owned: Box<_> = box TupleStruct(200, -200.5);\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "03a799933421c0d35c629f62507033ccea7dd905", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -143,7 +143,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, -2);\n     let _ = stack.self_by_val(-3, -4);\n \n-    let owned = box Struct { x: 200 };\n+    let owned: Box<_> = box Struct { x: 200 };\n     let _ = owned.self_by_ref(-5, -6);\n     let _ = owned.self_by_val(-7, -8);\n     let _ = owned.self_owned(-9, -10);"}, {"sha": "5869625bafe597feeeb2c24470d2b3230d608d16", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -144,7 +144,7 @@ fn main() {\n     let _ = stack.self_by_ref(-1, 2_u16);\n     let _ = stack.self_by_val(-3, -4_i16);\n \n-    let owned = box Struct { x: 879 };\n+    let owned: Box<_> = box Struct { x: 879 };\n     let _ = owned.self_by_ref(-5, -6_i32);\n     let _ = owned.self_by_val(-7, -8_i64);\n     let _ = owned.self_owned(-9, -10.5_f32);"}, {"sha": "607a237d22e41ee1b4624cb0e1710b253e13864c", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -67,15 +67,15 @@ fn main() {\n     // 0b01111100011111000111110001111100 = 2088533116\n     // 0b0111110001111100 = 31868\n     // 0b01111100 = 124\n-    let the_a = box ABC::TheA { x: 0, y: 8970181431921507452 };\n+    let the_a: Box<_> = box ABC::TheA { x: 0, y: 8970181431921507452 };\n \n     // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n     // 0b00010001000100010001000100010001 = 286331153\n     // 0b0001000100010001 = 4369\n     // 0b00010001 = 17\n-    let the_b = box ABC::TheB (0, 286331153, 286331153);\n+    let the_b: Box<_> = box ABC::TheB (0, 286331153, 286331153);\n \n-    let univariant = box Univariant::TheOnlyCase(123234);\n+    let univariant: Box<_> = box Univariant::TheOnlyCase(123234);\n \n     zzz(); // #break\n }"}, {"sha": "05872e3fc36b2fb8072e01ab07fe29b931041864", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -98,7 +98,7 @@ fn main() {\n     };\n \n     let struct_ref = &a_struct;\n-    let owned = box 6;\n+    let owned: Box<_> = box 6;\n \n     let mut closure = || {\n         let closure_local = 8;"}, {"sha": "295d57f4cfa97fc22acc1926bbba4b5bf40d20d4", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -58,7 +58,7 @@ fn main() {\n         c: 4\n     };\n \n-    let owned = box 5;\n+    let owned: Box<_> = box 5;\n \n     let closure = move || {\n         zzz(); // #break"}, {"sha": "57dcac409bab8ad6cd39e22d5081dfccd84708cc", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -90,7 +90,7 @@ fn main() {\n     };\n \n     let struct_ref = &a_struct;\n-    let owned = box 6;\n+    let owned: Box<_> = box 6;\n \n     {\n         let mut first_closure = || {"}, {"sha": "8121edfd2cc6ddc621aca2bede107744482bd06b", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -20,6 +20,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x = box() (box 3_usize as Box<double>);\n+    let x: Box<_> = box() (box 3_usize as Box<double>);\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "537894bfd158dffdeb71cd5d8e90fb7166525f38", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -24,6 +24,6 @@ impl double for Box<uint> {\n }\n \n pub fn main() {\n-    let x = box 3_usize;\n+    let x: Box<_> = box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "2ffdd576ffb783aae0c29ca52d55cf35a8719c79", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -20,6 +20,6 @@ impl double for Box<uint> {\n }\n \n pub fn main() {\n-    let x = box box box box box 3_usize;\n+    let x: Box<Box<Box<Box<Box<_>>>>> = box box box box box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "82510aea162b8bb733610bf96d781b9abe3351fa", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -20,6 +20,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x = box box 3_usize;\n+    let x: Box<Box<_>> = box box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "c9aa1133101788ef3fafad86029e04a25b1e4417", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -20,6 +20,6 @@ impl double for uint {\n }\n \n pub fn main() {\n-    let x = box 3_usize;\n+    let x: Box<_> = box 3_usize;\n     assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "6e6e58a7ddf104796a2d5895cc16f1bcd6f574e0", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -29,6 +29,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x = box 3_usize;\n+    let x: Box<_> = box 3_usize;\n     assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "24bfbd9eb44088b54b901caaa95587d5653255e7", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -16,8 +16,8 @@ extern crate collections;\n use std::collections::BitVec;\n \n fn bitv_test() {\n-    let mut v1 = box BitVec::from_elem(31, false);\n-    let v2 = box BitVec::from_elem(31, true);\n+    let mut v1: Box<_> = box BitVec::from_elem(31, false);\n+    let v2: Box<_> = box BitVec::from_elem(31, true);\n     v1.union(&*v2);\n }\n "}, {"sha": "27fbfc9641088137c6abe59aa178e9c854d45d96", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,7 +13,7 @@\n #![feature(unboxed_closures)]\n \n pub fn main() {\n-    let bar = box 3;\n+    let bar: Box<_> = box 3;\n     let h = || -> int *bar;\n     assert_eq!(h(), 3);\n }"}, {"sha": "499650a6e51db82718408d3a71225b5d6e437f1e", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -30,7 +30,7 @@ fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&int) -> bool {\n }\n \n pub fn main() {\n-    let mut ints = box Ints {sum: box 0, values: Vec::new()};\n+    let mut ints: Box<_> = box Ints {sum: box 0, values: Vec::new()};\n     add_int(&mut *ints, 22);\n     add_int(&mut *ints, 44);\n "}, {"sha": "89babb8f7221d4fdf2120ee1e218f77ec3c1ab2c", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -17,7 +17,7 @@ extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n pub fn main() {\n-    let p = box 22_usize;\n+    let p: Box<_> = box 22_usize;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22_usize);"}, {"sha": "ff883294fd3940b4c115ef22e195b433b37e788b", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -43,7 +43,7 @@ fn get_bar(x: uint) -> Vec<uint> { vec!(x * 2) }\n \n pub fn fails() {\n     let x = 2;\n-    let mut y = Vec::new();\n+    let mut y: Vec<Box<_>> = Vec::new();\n     y.push(box Conzabble::Bickwick(do_it(&get_bar(x))));\n }\n "}, {"sha": "5cc567cb14c6efda9c6561f00cdcced39a449d0d", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -19,7 +19,7 @@ struct Pair {\n }\n \n pub fn main() {\n-    let z = box Pair { a : 10, b : 12};\n+    let z: Box<_> = box Pair { a : 10, b : 12};\n \n     let _t = Thread::spawn(move|| {\n         assert_eq!(z.a, 10);"}, {"sha": "2592957b738596541d5bdd1afc5058d2787e9e5f", "filename": "src/test/run-pass/coerce-match.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcoerce-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-match.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,9 +14,13 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _: Box<[int]> = if true { box [1, 2, 3] } else { box [1] };\n+    let _: Box<[int]> =\n+        if true { let b: Box<_> = box [1, 2, 3]; b } else { let b: Box<_> = box [1]; b };\n \n-    let _: Box<[int]> = match true { true => box [1, 2, 3], false => box [1] };\n+    let _: Box<[int]> = match true {\n+        true => { let b: Box<_> = box [1, 2, 3]; b }\n+        false => { let b: Box<_> = box [1]; b }\n+    };\n \n     // Check we don't get over-keen at propagating coercions in the case of casts.\n     let x = if true { 42 } else { 42u8 } as u16;"}, {"sha": "043bfe429add3286620f4eefd503d6d66767e09d", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -22,7 +22,7 @@ extern crate crate_method_reexport_grrrrrrr2;\n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n-    let x = box() ();\n+    let x: Box<_> = box () ();\n     x.cx();\n     let y = ();\n     y.add(\"hi\".to_string());"}, {"sha": "fc97b22a4a99e3cedd167e1789ca91091854e4b6", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n use std::cell::Cell;\n \n pub fn main() {\n-    let x = box Cell::new(5);\n+    let x: Box<_> = box Cell::new(5);\n     x.set(1000);\n     println!(\"{}\", x.get());\n }"}, {"sha": "865fccbc3fa3a865e65dbdfebcee08ea08a1c390", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -33,6 +33,6 @@ impl<K,V> HashMap<K,V> {\n }\n \n pub fn main() {\n-    let mut m = box linear_map::<(),()>();\n+    let mut m: Box<_> = box linear_map::<(),()>();\n     assert_eq!(m.len(), 0);\n }"}, {"sha": "3d06a5562034cc0c383bcfba68ad93a498f66bc8", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -70,7 +70,7 @@ trait Nus { fn f(&self); }\n impl Nus for thing { fn f(&self) {} }\n \n pub fn main() {\n-    let y = box thing(A {a: 10});\n+    let y: Box<_> = box thing(A {a: 10});\n     assert_eq!(y.clone().bar(), 10);\n     assert_eq!(y.quux(), 10);\n "}, {"sha": "d7d5a39f452f3dee030474b068d7e7ba05c4fd0d", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,4 +12,4 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-pub fn main() { let x = { box 100 }; assert!((*x == 100)); }\n+pub fn main() { let x: Box<_> = { box 100 }; assert!((*x == 100)); }"}, {"sha": "a58161277989870bf9da7f8a5230ecf9ec836897", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -15,7 +15,7 @@\n \n // Tests for if as expressions returning boxed types\n fn test_box() {\n-    let rs = if true { box 100 } else { box 101 };\n+    let rs: Box<_> = if true { box 100 } else { box 101 };\n     assert_eq!(*rs, 100);\n }\n "}, {"sha": "9641cacddc0a682e22cc498188ed097e172df876", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,7 +13,7 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { box 100 }, _ => panic!() };\n+    let res: Box<_> = match true { true => { box 100 }, _ => panic!() };\n     assert_eq!(*res, 100);\n }\n "}, {"sha": "581f71a737651a59f5fe1abfcac2eda76e3fd6a8", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -25,7 +25,7 @@ fn foo(Foo {x, ..}: Foo) -> *const uint {\n }\n \n pub fn main() {\n-    let obj = box 1;\n+    let obj: Box<_> = box 1;\n     let objptr: *const uint = &*obj;\n     let f = Foo {x: obj, y: box 2};\n     let xptr = foo(f);"}, {"sha": "799b865bd2d7aa5c91d50d27cadd4b42f05716c0", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -28,7 +28,7 @@ fn checkval(box ref x: Box<uint>) -> uint {\n }\n \n pub fn main() {\n-    let obj = box 1;\n+    let obj: Box<_> = box 1;\n     let objptr: *const uint = &*obj;\n     let xptr = getaddr(obj);\n     assert_eq!(objptr, xptr);"}, {"sha": "42062b89cfd2fe459eb7d2c86612ec88cab8a7dc", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n fn id<T:Send>(t: T) -> T { return t; }\n \n pub fn main() {\n-    let expected = box 100;\n+    let expected: Box<_> = box 100;\n     let actual = id::<Box<int>>(expected.clone());\n     println!(\"{}\", *actual);\n     assert_eq!(*expected, *actual);"}, {"sha": "41c859214e96b188cdc19f970946831ad3bf30f2", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -154,7 +154,7 @@ pub fn main() {\n     test_order();\n \n     // make sure that format! doesn't move out of local variables\n-    let a = box 3;\n+    let a: Box<_> = box 3;\n     format!(\"{}\", a);\n     format!(\"{}\", a);\n "}, {"sha": "4ee06d44e65656a1f8957c09f0722f8619a5a9ad", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -67,15 +67,15 @@ fn test_tup() {\n fn test_unique() {\n     let i = &Cell::new(0);\n     {\n-        let _a = box r(i);\n+        let _a: Box<_> = box r(i);\n     }\n     assert_eq!(i.get(), 1);\n }\n \n fn test_unique_rec() {\n     let i = &Cell::new(0);\n     {\n-        let _a = box BoxR {\n+        let _a: Box<_> = box BoxR {\n             x: r(i)\n         };\n     }"}, {"sha": "1d7a74b042fac815fb7dbc48a9f70873122d607c", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -40,7 +40,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let mut x = box 1;\n+        let mut x: Box<_> = box 1;\n \n         assert_eq!(rusti::atomic_load(&*x), 1);\n         *x = 5;"}, {"sha": "09dd5304ec5c21a2a75bdb0bf22c4c270507ff47", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -23,7 +23,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let x = box 1;\n+        let x: Box<_> = box 1;\n         let mut y = rusti::init();\n         let mut z: *const uint = transmute(&x);\n         rusti::move_val_init(&mut y, x);"}, {"sha": "48ea00e47d696a70c2ef4bd6c72eb7b1e6d12a2d", "filename": "src/test/run-pass/issue-10802.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10802.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -42,13 +42,13 @@ impl  Whatever {\n \n fn main() {\n     {\n-        let f = box DroppableStruct;\n+        let f: Box<_> = box DroppableStruct;\n         let _a = Whatever::new(box f as Box<MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n     unsafe { DROPPED = false; }\n     {\n-        let f = box DroppableEnum::DroppableVariant1;\n+        let f: Box<_> = box DroppableEnum::DroppableVariant1;\n         let _a = Whatever::new(box f as Box<MyTrait>);\n     }\n     assert!(unsafe { DROPPED });"}, {"sha": "d413e323a09997738ede945cb2b603abb11e2b08", "filename": "src/test/run-pass/issue-14399.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14399.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -23,6 +23,6 @@ trait A { fn foo(&self) {} }\n impl A for B1 {}\n \n fn main() {\n-    let v = box B1;\n+    let v: Box<_> = box B1;\n     let _c: Box<A> = v.clone();\n }"}, {"sha": "0bef42b6202edfaec0291b7706f2b8a63ed10452", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -17,6 +17,6 @@ fn a_val(x: Box<int>, y: Box<int>) -> int {\n }\n \n pub fn main() {\n-    let z = box 22;\n+    let z: Box<_> = box 22;\n     a_val(z.clone(), z.clone());\n }"}, {"sha": "6aeec228c0d3e2f9a1bf4f3564b21daece451fa0", "filename": "src/test/run-pass/issue-2708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-2708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2708.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -31,5 +31,5 @@ fn Font() -> Font {\n }\n \n pub fn main() {\n-    let _f = box Font();\n+    let _f: Box<_> = box Font();\n }"}, {"sha": "e653dda8de5f00591470368694d1b2ad82b4aac8", "filename": "src/test/run-pass/issue-2935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-2935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2935.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -28,7 +28,7 @@ pub fn main() {\n   //   let y = box ({a: 4});\n   //    let z = box ({a: 4} as it);\n   //    let z = box ({a: true} as it);\n-    let z = box() (box true as Box<it>);\n+    let z: Box<_> = box () (box true as Box<it>);\n     //  x.f();\n     // y.f();\n     // (*z).f();"}, {"sha": "6f107a37e9b25b9bec97cb09f671e76b61017910", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -20,5 +20,5 @@ use socketlib::socket;\n \n pub fn main() {\n     let fd: libc::c_int = 1 as libc::c_int;\n-    let _sock = box socket::socket_handle(fd);\n+    let _sock: Box<_> = box socket::socket_handle(fd);\n }"}, {"sha": "98c9f3d5ec5ade97e045bbbe8973429857c07078", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -17,7 +17,7 @@ extern crate collections;\n use std::collections::HashMap;\n \n pub fn main() {\n-    let x;\n+    let x: Box<_>;\n     let mut buggy_map: HashMap<uint, &uint> = HashMap::new();\n     x = box 1;\n     buggy_map.insert(42, &*x);"}, {"sha": "1c1b329e314c1d7ad96109c6467d138005685926", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-   let mut x = box 3;\n+   let mut x: Box<_> = box 3;\n    x = x;\n    assert_eq!(*x, 3);\n }"}, {"sha": "1f53d9ce5422fc4831c540c3725beb2c424debf6", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,6 +13,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let y = box 1;\n+    let y: Box<_> = box 1;\n     y;\n }"}, {"sha": "7e773cd799476c12f9b46b0a53c991ba0d8c57f4", "filename": "src/test/run-pass/issue-5718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fissue-5718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5718.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -16,7 +16,7 @@ struct Element;\n macro_rules! foo {\n     ($tag: expr, $string: expr) => {\n         if $tag == $string {\n-            let element = box Element;\n+            let element: Box<_> = box Element;\n             unsafe {\n                 return std::mem::transmute::<_, uint>(element);\n             }"}, {"sha": "7b11aae168ca965744ccbb01a9423e799947db1f", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -17,7 +17,7 @@ struct A { a: Box<int> }\n \n pub fn main() {\n     fn invoke<F>(f: F) where F: FnOnce() { f(); }\n-    let k = box 22;\n+    let k: Box<_> = box 22;\n     let _u = A {a: k.clone()};\n     invoke(|| println!(\"{}\", k.clone()) )\n }"}, {"sha": "1500edce779c371d5baa8ee5d069b95a2695c4f8", "filename": "src/test/run-pass/let-assignability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn f() {\n-    let a = box 1;\n+    let a: Box<_> = box 1;\n     let b: &int = &*a;\n     println!(\"{}\", b);\n }"}, {"sha": "cd4802f4b397a6407f5e4525f459b842d415b99b", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n struct Pair { a: Box<int>, b: Box<int> }\n \n pub fn main() {\n-    let mut x = box Pair {a: box 10, b: box 20};\n+    let mut x: Box<_> = box Pair {a: box 10, b: box 20};\n     let x_internal = &mut *x;\n     match *x_internal {\n       Pair {a: ref mut a, b: ref mut _b} => {"}, {"sha": "a49ce82617007e2921b3fb5f207af537c0b1eccb", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -39,7 +39,7 @@ fn call_foo_copy() -> int {\n }\n \n fn call_foo_other() -> int {\n-    let mut x = Vec::new();\n+    let mut x: Vec<Box<_>> = Vec::new();\n     let y = x.foo();\n     x.push(box 0);\n     y"}, {"sha": "ff06df079b05e029717153c437d1d7a6ff28432f", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -26,7 +26,7 @@ fn test(x: bool, foo: Box<Triple>) -> int {\n }\n \n pub fn main() {\n-    let x = box Triple{x: 1, y: 2, z: 3};\n+    let x: Box<_> = box Triple{x: 1, y: 2, z: 3};\n     assert_eq!(test(true, x.clone()), 2);\n     assert_eq!(test(true, x.clone()), 2);\n     assert_eq!(test(true, x.clone()), 2);"}, {"sha": "590caff3c2dc850c168fb376c7c72b8137efba7a", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n struct X { x: int, y: int, z: int }\n \n pub fn main() {\n-    let x = box X{x: 1, y: 2, z: 3};\n+    let x: Box<_> = box X{x: 1, y: 2, z: 3};\n     let y = x;\n     assert!((y.y == 2));\n }"}, {"sha": "0bff2c2292e74be2caf7c884473571bc40f038f0", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,4 +13,4 @@\n \n struct X { x: int, y: int, z: int }\n \n-pub fn main() { let x = box X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }\n+pub fn main() { let x: Box<_> = box X {x: 1, y: 2, z: 3}; let y = x; assert!((y.y == 2)); }"}, {"sha": "8241424124e0e0e3373913c695927e0cd14a61f4", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -26,7 +26,7 @@ fn test(x: bool, foo: Box<Triple>) -> int {\n }\n \n pub fn main() {\n-    let x = box Triple{x: 1, y: 2, z: 3};\n+    let x: Box<_> = box Triple{x: 1, y: 2, z: 3};\n     for _ in 0_usize..10000_usize {\n         assert_eq!(test(true, x.clone()), 2);\n     }"}, {"sha": "d68a7c831f212ca4ae683e5e4469e4cc9c818d83", "filename": "src/test/run-pass/move-guard-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-guard-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fmove-guard-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-guard-const.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 1;\n+    let x: Box<_> = box 1;\n \n     let v = (1, 2);\n "}, {"sha": "8f655f0517ddf47fe56224d420ba0e0a34992a59", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -55,7 +55,7 @@ impl Int for int {\n }\n \n fn main() {\n-    let mut f = box Foo {\n+    let mut f: Box<_> = box Foo {\n         x: 1,\n         y: 2,\n     };"}, {"sha": "1fd83041f62077ca3c824706e7ae3bf9eef4904d", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -25,7 +25,7 @@ fn sums_to(v: Vec<int> , sum: int) -> bool {\n \n fn sums_to_using_uniq(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0_usize;\n-    let mut sum0 = box 0;\n+    let mut sum0: Box<_> = box 0;\n     while i < v.len() {\n         *sum0 += v[i];\n         i += 1_usize;\n@@ -47,7 +47,7 @@ struct F<T> { f: T }\n \n fn sums_to_using_uniq_rec(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0_usize;\n-    let mut sum0 = F {f: box 0};\n+    let mut sum0 = F::<Box<_>> {f: box 0};\n     while i < v.len() {\n         *sum0.f += v[i];\n         i += 1_usize;"}, {"sha": "7bc761d2f606d06119d9b83a25196ade1b54c10b", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -25,7 +25,7 @@ impl<'a> get for &'a int {\n }\n \n pub fn main() {\n-    let x = box 6;\n+    let x: Box<_> = box 6;\n     let y = x.get();\n     println!(\"y={}\", y);\n     assert_eq!(y, 6);"}, {"sha": "1e91ab7e921d32aeeba7361bbca7c4d7cb109806", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -16,7 +16,7 @@ fn foo(x: &uint) -> uint {\n }\n \n pub fn main() {\n-    let p = box 22_usize;\n+    let p: Box<_> = box 22_usize;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22_usize);"}, {"sha": "7c9b1ae226f5aca97a6f091b970149367bda301c", "filename": "src/test/run-pass/regions-borrow-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -16,7 +16,7 @@ fn foo(x: &uint) -> uint {\n }\n \n pub fn main() {\n-    let p = box 3_usize;\n+    let p: Box<_> = box 3_usize;\n     let r = foo(&*p);\n     assert_eq!(r, 3_usize);\n }"}, {"sha": "0ca17e218d2f637751d3dd781f4f131a0c515f5d", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -15,6 +15,6 @@ fn foo(x: &uint) -> &uint { x }\n fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {\n-    let p = box 3_usize;\n+    let p: Box<_> = box 3_usize;\n     assert_eq!(bar(foo(&*p)), 3);\n }"}, {"sha": "86f4f2dd18e643377501f2444adadfce20133a99", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n fn borrow<T>(x: &T) -> &T {x}\n \n pub fn main() {\n-    let x = box 3;\n+    let x: Box<_> = box 3;\n     loop {\n         let y = borrow(&*x);\n         assert_eq!(*x, *y);"}, {"sha": "ebbc5b70f604153934b97bcd208ee3b1413dd42f", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -18,7 +18,7 @@ fn x_coord(p: &Point) -> &int {\n }\n \n pub fn main() {\n-    let p = box Point {x: 3, y: 4};\n+    let p: Box<_> = box Point {x: 3, y: 4};\n     let xc = x_coord(&*p);\n     assert_eq!(*xc, 3);\n }"}, {"sha": "92582177989b6d234d5dc26eb664898ce7dcc411", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n     let new_x = x.change();\n     assert_eq!(new_x.a, 55);\n \n-    let x = box new_x;\n+    let x: Box<_> = box new_x;\n     let new_x = x.change_again();\n     assert_eq!(new_x.a, 45);\n }"}, {"sha": "b71b907fcf0432b23ae33ca4bee943041ccf282f", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -17,7 +17,7 @@\n use std::rc::Rc;\n \n pub fn main() {\n-   let mut x = box 3;\n+   let mut x: Box<_> = box 3;\n    x = x;\n    assert!(*x == 3);\n "}, {"sha": "264ee5f55b9771814b3907724d1d0209f3f85a1c", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -20,7 +20,7 @@ fn test05_start<F:FnOnce(int)>(f: F) {\n }\n \n fn test05() {\n-    let three = box 3;\n+    let three: Box<_> = box 3;\n     let fn_to_send = move|n:int| {\n         println!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);"}, {"sha": "46f9e991347e42bc601c200cf0fd39d8b8fcb9c4", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -17,7 +17,7 @@ use std::sync::mpsc::channel;\n pub fn main() {\n     let (tx, rx) = channel::<uint>();\n \n-    let x = box 1;\n+    let x: Box<_> = box 1;\n     let x_in_parent = &(*x) as *const int as uint;\n \n     let _t = Thread::spawn(move || {"}, {"sha": "432dbd72a294887c30c2f8d3ac7820077a9aac06", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -32,13 +32,13 @@ fn r(i:int) -> r {\n pub fn main() {\n     p_foo(r(10));\n \n-    p_foo(box r(10));\n-    p_foo(box 10);\n+    p_foo::<Box<_>>(box r(10));\n+    p_foo::<Box<_>>(box 10);\n     p_foo(10);\n \n-    s_foo(box 10);\n+    s_foo::<Box<_>>(box 10);\n     s_foo(10);\n \n-    u_foo(box 10);\n+    u_foo::<Box<_>>(box 10);\n     u_foo(10);\n }"}, {"sha": "832c1f8802d1ff9ab3a67a5d0f5d303eb481b042", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -46,11 +46,11 @@ impl<T> Bar<T> {\n }\n \n fn main() {\n-    let foo = box Foo {\n+    let foo: Box<_> = box Foo {\n         f: 1,\n     };\n     println!(\"{} {} {}\", foo.foo(2), foo.bar(2), foo.baz(2));\n-    let bar = box Bar {\n+    let bar: Box<_> = box Bar {\n         f: 1,\n     };\n     println!(\"{} {} {}\", bar.foo(2), bar.bar(2), bar.baz(2));"}, {"sha": "d44a8cdcc24756ec1968e787bdb5270c6c9940fd", "filename": "src/test/run-pass/uniq-self-in-mut-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -27,7 +27,7 @@ impl Changer for X {\n }\n \n pub fn main() {\n-    let x = box X { a: 32 };\n+    let x: Box<_> = box X { a: 32 };\n     let new_x = x.change();\n     assert_eq!(new_x.a, 55);\n }"}, {"sha": "78578bdb3c3a1159d8badf59cea88674fe9f5ba1", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i = box 1;\n+    let mut i: Box<_> = box 1;\n     // Should be a copy\n     let mut j;\n     j = i.clone();"}, {"sha": "9edd83d2c7cb96a4ed107a70cf9ccf181d4a85da", "filename": "src/test/run-pass/unique-assign-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,8 +13,8 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 1;\n-    let mut j = box 2;\n+    let i: Box<_> = box 1;\n+    let mut j: Box<_> = box 2;\n     // Should drop the previous value of j\n     j = i;\n     assert_eq!(*j, 1);"}, {"sha": "64f8b998096ed6e76a8e62fdd84eca1a5ccf03d0", "filename": "src/test/run-pass/unique-assign-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-generic.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -18,6 +18,6 @@ fn f<T>(t: T) -> T {\n }\n \n pub fn main() {\n-    let t = f(box 100);\n+    let t = f::<Box<_>>(box 100);\n     assert_eq!(t, box 100);\n }"}, {"sha": "c9cbaf27c4f2ff73d0d0edd3a32ce41da3d3f31b", "filename": "src/test/run-pass/unique-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i;\n+    let mut i: Box<_>;\n     i = box 1;\n     assert_eq!(*i, 1);\n }"}, {"sha": "3bab3a6b79a116b0d7f8b950fe7454a1cedc8c82", "filename": "src/test/run-pass/unique-autoderef-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n struct J { j: int }\n \n pub fn main() {\n-    let i = box J {\n+    let i: Box<_> = box J {\n         j: 100\n     };\n     assert_eq!(i.j, 100);"}, {"sha": "1c94447392160ce0226f5fde8364eed03241ce18", "filename": "src/test/run-pass/unique-autoderef-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box vec!(100);\n+    let i: Box<_> = box vec!(100);\n     assert_eq!((*i)[0], 100);\n }"}, {"sha": "8fe86455b4525785601685136f34b1d7b838131c", "filename": "src/test/run-pass/unique-cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-cmp.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     assert!(i == box 100);\n     assert!(i < box 101);\n     assert!(i <= box 100);"}, {"sha": "cb6e84ae1aa7387b052dc45a76bbb86854298ef7", "filename": "src/test/run-pass/unique-containing-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-containing-tag.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n pub fn main() {\n     enum t { t1(int), t2(int), }\n \n-    let _x = box t::t1(10);\n+    let _x: Box<_> = box t::t1(10);\n \n     /*alt *x {\n       t1(a) {"}, {"sha": "7264b9fee9524d672ba809b9bc1ae003091fe114", "filename": "src/test/run-pass/unique-create.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-create.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-create.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-create.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    box 100;\n+    let _: Box<_> = box 100;\n }\n \n fn vec() {"}, {"sha": "14bb72f4412bed49871b612cb5a0605b049d0f28", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i = box 1;\n+    let mut i: Box<_> = box 1;\n     // Should be a copy\n     let mut j = i.clone();\n     *i = 2;"}, {"sha": "803e7ba16ed4003aaeadc0f692cb8e809a81a579", "filename": "src/test/run-pass/unique-decl-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-decl-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 1;\n+    let i: Box<_> = box 1;\n     let j = i;\n     assert_eq!(*j, 1);\n }"}, {"sha": "360adaa638f96fcbcd9c5bec045948da8dfda016", "filename": "src/test/run-pass/unique-decl-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     let j = i;\n     assert_eq!(*j, 100);\n }"}, {"sha": "1c1228f924145090952bc7958017b50612cc777d", "filename": "src/test/run-pass/unique-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-deref.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     assert_eq!(*i, 100);\n }"}, {"sha": "745a55e06510facf894e3764eb21c3ed045bb6fb", "filename": "src/test/run-pass/unique-drop-complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-drop-complex.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,5 +12,5 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _x = box vec!(0,0,0,0,0);\n+    let _x: Box<_> = box vec!(0,0,0,0,0);\n }"}, {"sha": "20bf4bef1714dae413a5f886f154cab440456fe8", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut a = vec!(box 10);\n+    let mut a: Vec<Box<_>> = vec!(box 10);\n     let b = a.clone();\n \n     assert_eq!(*a[0], 10);"}, {"sha": "c24ec8fe44a3c396c9c2ad99128d0b098b949fa2", "filename": "src/test/run-pass/unique-in-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let vect = vec!(box 100);\n+    let vect : Vec<Box<_>> = vec!(box 100);\n     assert!(vect[0] == box 100);\n }"}, {"sha": "44e8703aaf2febcf6f662c84c43a7721b4c2ee05", "filename": "src/test/run-pass/unique-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-init.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,5 +12,5 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _i = box 100;\n+    let _i: Box<_> = box 100;\n }"}, {"sha": "6bb1fdcf5627a5b72a20644832bff3bc7171a848", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -23,11 +23,11 @@ fn sendable() {\n         assert!(i != j);\n     }\n \n-    let i = box 100;\n-    let j = box 100;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 100;\n     f(i, j);\n-    let i = box 100;\n-    let j = box 101;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 101;\n     g(i, j);\n }\n \n@@ -41,11 +41,11 @@ fn copyable() {\n         assert!(i != j);\n     }\n \n-    let i = box 100;\n-    let j = box 100;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 100;\n     f(i, j);\n-    let i = box 100;\n-    let j = box 101;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 101;\n     g(i, j);\n }\n \n@@ -59,11 +59,11 @@ fn noncopyable() {\n         assert!(i != j);\n     }\n \n-    let i = box 100;\n-    let j = box 100;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 100;\n     f(i, j);\n-    let i = box 100;\n-    let j = box 101;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 101;\n     g(i, j);\n }\n "}, {"sha": "148ca4757ae927eccb8f1c5cb89e20f19a27c52f", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,6 +12,6 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     println!(\"{}\", i);\n }"}, {"sha": "126cc646833a14b83bb938680b83ee1341096da3", "filename": "src/test/run-pass/unique-move-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-drop.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -13,8 +13,8 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n-    let j = box 200;\n+    let i: Box<_> = box 100;\n+    let j: Box<_> = box 200;\n     let j = i;\n     assert_eq!(*j, 100);\n }"}, {"sha": "9ac5e86f87b54af426e54b9182a065020a2e9d13", "filename": "src/test/run-pass/unique-move-temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-temp.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i;\n+    let mut i: Box<_>;\n     i = box 100;\n     assert_eq!(*i, 100);\n }"}, {"sha": "a54b343f2fa3d21862d88f6b412bdc9ea358fe6d", "filename": "src/test/run-pass/unique-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let i = box 100;\n+    let i: Box<_> = box 100;\n     let mut j;\n     j = i;\n     assert_eq!(*j, 100);"}, {"sha": "ca01c07ab80431e73f6dabfe2866e71a16eab114", "filename": "src/test/run-pass/unique-mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-mutable.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let mut i = box 0;\n+    let mut i: Box<_> = box 0;\n     *i = 1;\n     assert_eq!(*i, 1);\n }"}, {"sha": "c20604406b94c823769c184dbb1287848f003279", "filename": "src/test/run-pass/unique-rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-rec.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n struct X { x: int }\n \n pub fn main() {\n-    let x = box X {x: 1};\n+    let x: Box<_> = box X {x: 1};\n     let bar = x;\n     assert_eq!(bar.x, 1);\n }"}, {"sha": "72022afe5fd99a489415f631fd9a1ea35e3ac0ce", "filename": "src/test/run-pass/unique-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n use std::sync::mpsc::channel;\n \n pub fn main() {\n-    let (tx, rx) = channel();\n+    let (tx, rx) = channel::<Box<_>>();\n     tx.send(box 100).unwrap();\n     let v = rx.recv().unwrap();\n     assert_eq!(v, box 100);"}, {"sha": "1315e443816228c61613df4cf6a0eace2977d742", "filename": "src/test/run-pass/unique-swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,8 +14,8 @@\n use std::mem::swap;\n \n pub fn main() {\n-    let mut i = box 100;\n-    let mut j = box 200;\n+    let mut i: Box<_> = box 100;\n+    let mut j: Box<_> = box 200;\n     swap(&mut i, &mut j);\n     assert_eq!(i, box 200);\n     assert_eq!(j, box 100);"}, {"sha": "c9a9d6ad1474ee6e86e8863685296aad740cdf53", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -66,7 +66,7 @@ pub fn main() {\n             f: [T; 3]\n         }\n \n-        let data = box Foo_{f: [1i32, 2, 3] };\n+        let data: Box<_> = box Foo_{f: [1i32, 2, 3] };\n         let x: &Foo<i32> = mem::transmute(raw::Slice { len: 3, data: &*data });\n         assert!(x.f.len() == 3);\n         assert!(x.f[0] == 1);\n@@ -78,7 +78,8 @@ pub fn main() {\n             f2: [u8; 5],\n         }\n \n-        let data = box Baz_{ f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n+        let data: Box<_> = box Baz_ {\n+            f1: 42, f2: ['a' as u8, 'b' as u8, 'c' as u8, 'd' as u8, 'e' as u8] };\n         let x: &Baz = mem::transmute( raw::Slice { len: 5, data: &*data } );\n         assert!(x.f1 == 42);\n         let chs: Vec<char> = x.f2.chars().collect();\n@@ -96,7 +97,7 @@ pub fn main() {\n         let obj: Box<St> = box St { f: 42 };\n         let obj: &Tr = &*obj;\n         let obj: raw::TraitObject = mem::transmute(&*obj);\n-        let data = box Qux_{ f: St { f: 234 } };\n+        let data: Box<_> = box Qux_{ f: St { f: 234 } };\n         let x: &Qux = mem::transmute(raw::TraitObject { vtable: obj.vtable,\n                                                         data: mem::transmute(&*data) });\n         assert!(x.f.foo() == 234);"}, {"sha": "9f20426aa218ecbb1ddb4e62558d6201a87e0198", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n pub fn main() {\n-    let _x = box 1;\n+    let _x: Box<_> = box 1;\n     let lam_move = || {};\n     lam_move();\n }"}, {"sha": "57534feec31214ac1377fae6bc1ad209cd19bd35", "filename": "src/test/run-pass/unused-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funused-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funused-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -18,6 +18,6 @@\n \n pub fn main()\n {\n-    let y = box 1;\n+    let y: Box<_> = box 1;\n     y;\n }"}, {"sha": "b7229a00480cb0c112e73b150090b3197fed1eec", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270f0eef733a625bcee68019189f19dc119f8f24/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=270f0eef733a625bcee68019189f19dc119f8f24", "patch": "@@ -14,7 +14,7 @@\n use std::thread;\n \n fn f() {\n-    let _a = box 0;\n+    let _a: Box<_> = box 0;\n     panic!();\n }\n "}]}