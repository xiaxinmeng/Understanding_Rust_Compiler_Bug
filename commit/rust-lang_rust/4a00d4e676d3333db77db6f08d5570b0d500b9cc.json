{"sha": "4a00d4e676d3333db77db6f08d5570b0d500b9cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMDBkNGU2NzZkMzMzM2RiNzdkYjZmMDhkNTU3MGIwZDUwMGI5Y2M=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-07-17T19:06:13Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-07-23T07:58:46Z"}, "message": "TreeMap examples fixes\n\n1. Removed obsolete comment regarding recursive/iteration implementations of tree_find_with/tree_find_mut_with\n2. Replaced easy breakable find_with example with simpler one (which only removes redundant allocation during search)", "tree": {"sha": "b39ba7f336171ea46cc28c4b4d319f27855da74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b39ba7f336171ea46cc28c4b4d319f27855da74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a00d4e676d3333db77db6f08d5570b0d500b9cc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a00d4e676d3333db77db6f08d5570b0d500b9cc", "html_url": "https://github.com/rust-lang/rust/commit/4a00d4e676d3333db77db6f08d5570b0d500b9cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a00d4e676d3333db77db6f08d5570b0d500b9cc/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b5bf86b775b2749b2e5f4300650370052c9001", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b5bf86b775b2749b2e5f4300650370052c9001", "html_url": "https://github.com/rust-lang/rust/commit/92b5bf86b775b2749b2e5f4300650370052c9001"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "6f36270b5b23ab2e6bbaaf0859d724d9c8b40fc9", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4a00d4e676d3333db77db6f08d5570b0d500b9cc/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a00d4e676d3333db77db6f08d5570b0d500b9cc/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=4a00d4e676d3333db77db6f08d5570b0d500b9cc", "patch": "@@ -190,33 +190,38 @@ impl<K: Ord, V> TreeMap<K, V> {\n }\n \n impl<K, V> TreeMap<K, V> {\n-    /// Return the value for which f(key) returns Equal. f is invoked\n-    /// with current key and helps to navigate the tree\n+    /// Return the value for which `f(key)` returns `Equal`. `f` is invoked\n+    /// with current key and guides tree navigation. That means `f` should\n+    /// be aware of natural ordering of the tree.\n     ///\n     /// # Example\n     ///\n     /// ```\n-    /// use std::ascii::StrAsciiExt;\n+    /// use collections::treemap::TreeMap;\n     ///\n-    /// let mut t = collections::treemap::TreeMap::new();\n-    /// t.insert(\"Content-Type\", \"application/xml\");\n-    /// t.insert(\"User-Agent\", \"Curl-Rust/0.1\");\n+    /// fn get_headers() -> TreeMap<String, String> {\n+    ///     let mut result = TreeMap::new();\n+    ///     result.insert(\"Content-Type\".to_string(), \"application/xml\".to_string());\n+    ///     result.insert(\"User-Agent\".to_string(), \"Curl-Rust/0.1\".to_string());\n+    ///     result\n+    /// }\n     ///\n-    /// let ua_key = \"user-agent\";\n-    /// let ua = t.find_with(|&k| {\n-    ///    ua_key.cmp(&k.to_ascii_lower().as_slice())\n+    /// let headers = get_headers();\n+    /// let ua_key = \"User-Agent\";\n+    /// let ua = headers.find_with(|k| {\n+    ///    ua_key.cmp(&k.as_slice())\n     /// });\n     ///\n-    /// assert_eq!(*ua.unwrap(), \"Curl-Rust/0.1\");\n+    /// assert_eq!((*ua.unwrap()).as_slice(), \"Curl-Rust/0.1\");\n     /// ```\n     #[inline]\n     pub fn find_with<'a>(&'a self, f:|&K| -> Ordering) -> Option<&'a V> {\n         tree_find_with(&self.root, f)\n     }\n \n-    /// Return the value for which f(key) returns Equal. f is invoked\n-    /// with current key and helps to navigate the tree\n-    ///\n+    /// Return the value for which `f(key)` returns `Equal`. `f` is invoked\n+    /// with current key and guides tree navigation. That means `f` should\n+    /// be aware of natural ordering of the tree.\n     /// # Example\n     ///\n     /// ```\n@@ -913,14 +918,9 @@ fn split<K: Ord, V>(node: &mut Box<TreeNode<K, V>>) {\n     }\n }\n \n-// Next 2 functions have the same conventions\n-//\n-// The only difference is that non-mutable version uses loop instead\n-// of recursion (performance considerations)\n-// It seems to be impossible to avoid recursion with mutability\n-//\n-// So convention is that comparator is gets at input current key\n-// and returns search_key cmp cur_key (i.e. search_key.cmp(cur_key))\n+// Next 2 functions have the same convention: comparator gets\n+// at input current key and returns search_key cmp cur_key\n+// (i.e. search_key.cmp(&cur_key))\n fn tree_find_with<'r, K, V>(node: &'r Option<Box<TreeNode<K, V>>>,\n                             f: |&K| -> Ordering) -> Option<&'r V> {\n     let mut current: &'r Option<Box<TreeNode<K, V>>> = node;"}]}