{"sha": "d18719bbaf86b33344769ef68150c58604718722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODcxOWJiYWY4NmIzMzM0NDc2OWVmNjgxNTBjNTg2MDQ3MTg3MjI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-18T00:27:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T00:27:43Z"}, "message": "Rollup merge of #75464 - poliorcetics:intra-links-panic-and-ascii, r=jyn514\n\nMove to intra doc links for ascii.rs and panic.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nI also updated the doc to fix the wording in `AsciiExt` since it is now deprecated.\nThe two file are small changes so I bundled them together.\n\nSome links could not be changed to make them work, I believe those are known issues with primitive types.", "tree": {"sha": "91be057aa3f52015e7852628b5c0a27f0a1a89a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91be057aa3f52015e7852628b5c0a27f0a1a89a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18719bbaf86b33344769ef68150c58604718722", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOyCACRBK7hj4Ov3rIwAAdHIIAAxkuXhosBRgv4Q5HKFYf5x4\nm88Ioi8YgkatLgnUxoz8yQ1H5q4yNTPHvlqysorBwiEwBT4eAJ5mAvQRQqcMNKWG\ntQ3e6oFdaOqDzz9MoOg66v2zz+nG52OgKkDpHuOQpaB8aeGKzyAAKlC6Nukl71Lg\nVwvg5R2FMtx+op1GouxMMpph3anWArrblOIzwKqN/YBBouN06klBtFWitjGkc0BJ\neDa6tMq+anyEqU7G1JPhF8c+DG4XQh50pOJ4ETY3X1skUDSjWlagqyxcsgqIaefv\nHnU+hUVwLwoCrkRtlNERE+mlYv+2XqayesmyCqCsTIYrTN4f/yasf5A9Mc+fHcU=\n=eKYo\n-----END PGP SIGNATURE-----\n", "payload": "tree 91be057aa3f52015e7852628b5c0a27f0a1a89a6\nparent 5498367faff37704b22f77dcf1cc10c89d42faba\nparent 0e010a69926d400262626dd13803890e00e2598c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597710463 +0900\ncommitter GitHub <noreply@github.com> 1597710463 +0900\n\nRollup merge of #75464 - poliorcetics:intra-links-panic-and-ascii, r=jyn514\n\nMove to intra doc links for ascii.rs and panic.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nI also updated the doc to fix the wording in `AsciiExt` since it is now deprecated.\nThe two file are small changes so I bundled them together.\n\nSome links could not be changed to make them work, I believe those are known issues with primitive types.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18719bbaf86b33344769ef68150c58604718722", "html_url": "https://github.com/rust-lang/rust/commit/d18719bbaf86b33344769ef68150c58604718722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18719bbaf86b33344769ef68150c58604718722/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5498367faff37704b22f77dcf1cc10c89d42faba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5498367faff37704b22f77dcf1cc10c89d42faba", "html_url": "https://github.com/rust-lang/rust/commit/5498367faff37704b22f77dcf1cc10c89d42faba"}, {"sha": "0e010a69926d400262626dd13803890e00e2598c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e010a69926d400262626dd13803890e00e2598c", "html_url": "https://github.com/rust-lang/rust/commit/0e010a69926d400262626dd13803890e00e2598c"}], "stats": {"total": 40, "additions": 10, "deletions": 30}, "files": [{"sha": "c9106136d3441a8bab44a92a6080b5d801c2d03a", "filename": "library/std/src/ascii.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d18719bbaf86b33344769ef68150c58604718722/library%2Fstd%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18719bbaf86b33344769ef68150c58604718722/library%2Fstd%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fascii.rs?ref=d18719bbaf86b33344769ef68150c58604718722", "patch": "@@ -10,9 +10,6 @@\n //!\n //! The [`escape_default`] function provides an iterator over the bytes of an\n //! escaped version of the character given.\n-//!\n-//! [`AsciiExt`]: trait.AsciiExt.html\n-//! [`escape_default`]: fn.escape_default.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -52,7 +49,7 @@ pub trait AsciiExt {\n     ///\n     /// # Note\n     ///\n-    /// This method will be deprecated in favor of the identically-named\n+    /// This method is deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn is_ascii(&self) -> bool;\n@@ -69,10 +66,10 @@ pub trait AsciiExt {\n     ///\n     /// # Note\n     ///\n-    /// This method will be deprecated in favor of the identically-named\n+    /// This method is deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n-    /// [`make_ascii_uppercase`]: #tymethod.make_ascii_uppercase\n+    /// [`make_ascii_uppercase`]: AsciiExt::make_ascii_uppercase\n     /// [`str::to_uppercase`]: ../primitive.str.html#method.to_uppercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow(deprecated)]\n@@ -90,10 +87,10 @@ pub trait AsciiExt {\n     ///\n     /// # Note\n     ///\n-    /// This method will be deprecated in favor of the identically-named\n+    /// This method is deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n-    /// [`make_ascii_lowercase`]: #tymethod.make_ascii_lowercase\n+    /// [`make_ascii_lowercase`]: AsciiExt::make_ascii_lowercase\n     /// [`str::to_lowercase`]: ../primitive.str.html#method.to_lowercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow(deprecated)]\n@@ -106,7 +103,7 @@ pub trait AsciiExt {\n     ///\n     /// # Note\n     ///\n-    /// This method will be deprecated in favor of the identically-named\n+    /// This method is deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n@@ -121,10 +118,10 @@ pub trait AsciiExt {\n     ///\n     /// # Note\n     ///\n-    /// This method will be deprecated in favor of the identically-named\n+    /// This method is deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n-    /// [`to_ascii_uppercase`]: #tymethod.to_ascii_uppercase\n+    /// [`to_ascii_uppercase`]: AsciiExt::to_ascii_uppercase\n     #[stable(feature = \"ascii\", since = \"1.9.0\")]\n     fn make_ascii_uppercase(&mut self);\n \n@@ -138,10 +135,10 @@ pub trait AsciiExt {\n     ///\n     /// # Note\n     ///\n-    /// This method will be deprecated in favor of the identically-named\n+    /// This method is deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     ///\n-    /// [`to_ascii_lowercase`]: #tymethod.to_ascii_lowercase\n+    /// [`to_ascii_lowercase`]: AsciiExt::to_ascii_lowercase\n     #[stable(feature = \"ascii\", since = \"1.9.0\")]\n     fn make_ascii_lowercase(&mut self);\n }"}, {"sha": "8fcb24033b1a74819d2b89e2b1a8e15ed72473bf", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d18719bbaf86b33344769ef68150c58604718722/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18719bbaf86b33344769ef68150c58604718722/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=d18719bbaf86b33344769ef68150c58604718722", "patch": "@@ -30,10 +30,6 @@ pub use core::panic::{Location, PanicInfo};\n /// purpose of this trait is to encode what types are safe to cross a [`catch_unwind`]\n /// boundary with no fear of unwind safety.\n ///\n-/// [`Send`]: ../marker/trait.Send.html\n-/// [`Sync`]: ../marker/trait.Sync.html\n-/// [`catch_unwind`]: ./fn.catch_unwind.html\n-///\n /// ## What is unwind safety?\n ///\n /// In Rust a function can \"return\" early if it either panics or calls a\n@@ -99,8 +95,6 @@ pub use core::panic::{Location, PanicInfo};\n /// above, the lack of `unsafe` means it is mostly an advisory. The\n /// [`AssertUnwindSafe`] wrapper struct can be used to force this trait to be\n /// implemented for any closed over variables passed to `catch_unwind`.\n-///\n-/// [`AssertUnwindSafe`]: ./struct.AssertUnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may not be safely transferred across an unwind boundary\",\n@@ -116,9 +110,6 @@ pub auto trait UnwindSafe {}\n ///\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// [`UnwindSafe`] trait, for more information see that documentation.\n-///\n-/// [`UnsafeCell`]: ../cell/struct.UnsafeCell.html\n-/// [`UnwindSafe`]: ./trait.UnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may contain interior mutability and a reference may not be safely \\\n@@ -138,7 +129,6 @@ pub auto trait RefUnwindSafe {}\n /// account. This wrapper struct is useful for a quick and lightweight\n /// annotation that a variable is indeed unwind safe.\n ///\n-/// [`catch_unwind`]: ./fn.catch_unwind.html\n /// # Examples\n ///\n /// One way to use `AssertUnwindSafe` is to assert that the entire closure\n@@ -352,8 +342,6 @@ impl<F: Future> Future for AssertUnwindSafe<F> {\n /// can fail on a regular basis. Additionally, this function is not guaranteed\n /// to catch all panics, see the \"Notes\" section below.\n ///\n-/// [`Result`]: ../result/enum.Result.html\n-///\n /// The closure provided is required to adhere to the [`UnwindSafe`] trait to ensure\n /// that all captured variables are safe to cross this boundary. The purpose of\n /// this bound is to encode the concept of [exception safety][rfc] in the type\n@@ -362,9 +350,6 @@ impl<F: Future> Future for AssertUnwindSafe<F> {\n /// becomes a problem the [`AssertUnwindSafe`] wrapper struct can be used to quickly\n /// assert that the usage here is indeed unwind safe.\n ///\n-/// [`AssertUnwindSafe`]: ./struct.AssertUnwindSafe.html\n-/// [`UnwindSafe`]: ./trait.UnwindSafe.html\n-///\n /// [rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md\n ///\n /// # Notes\n@@ -399,8 +384,6 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n /// This is designed to be used in conjunction with [`catch_unwind`] to, for\n /// example, carry a panic across a layer of C code.\n ///\n-/// [`catch_unwind`]: ./fn.catch_unwind.html\n-///\n /// # Notes\n ///\n /// Note that panics in Rust are not always implemented via unwinding, but they"}]}