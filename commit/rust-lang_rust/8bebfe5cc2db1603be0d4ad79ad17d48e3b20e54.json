{"sha": "8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZWJmZTVjYzJkYjE2MDNiZTBkNGFkNzlhZDE3ZDQ4ZTNiMjBlNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-26T21:50:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-26T21:50:24Z"}, "message": "Auto merge of #87480 - GuillaumeGomez:rollup-3ly8t5d, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #87436 (Suggest `;` on parse error where applicable)\n - #87444 (Flatten nested `format!` calls)\n - #87447 (Miri: santiy check that null pointer can never have an AllocId)\n - #87457 (freebsd remove compiler workaround.)\n - #87458 (Fix help message for modification to &T created by &{t})\n - #87464 (Remove unnecessary `structhead` parameter from `render_union`)\n - #87473 (Notify the Rust 2021 edition working group in zulip of edition bugs)\n - #87474 (Add missing whitespace after attribute in HTML template)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2de080e1558f17a4a5879c822811c024d5602715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de080e1558f17a4a5879c822811c024d5602715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "html_url": "https://github.com/rust-lang/rust/commit/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08095fc1f875c89e507f17cf6c6a780c8ffa4c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/08095fc1f875c89e507f17cf6c6a780c8ffa4c01", "html_url": "https://github.com/rust-lang/rust/commit/08095fc1f875c89e507f17cf6c6a780c8ffa4c01"}, {"sha": "12c2092adb24e6cdc2bf2da71190beb2a66e381e", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c2092adb24e6cdc2bf2da71190beb2a66e381e", "html_url": "https://github.com/rust-lang/rust/commit/12c2092adb24e6cdc2bf2da71190beb2a66e381e"}], "stats": {"total": 255, "additions": 174, "deletions": 81}, "files": [{"sha": "336f48bde55ecff4441a177c6684acf53c9c21cd", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -905,16 +905,16 @@ fn suggest_ampmut<'tcx>(\n                         Some(c) if c.is_whitespace() => true,\n                         // e.g. `&mut(x)`\n                         Some('(') => true,\n+                        // e.g. `&mut{x}`\n+                        Some('{') => true,\n                         // e.g. `&mutablevar`\n                         _ => false,\n                     }\n                 } else {\n                     false\n                 }\n             };\n-            if let (true, Some(ws_pos)) =\n-                (src.starts_with(\"&'\"), src.find(|c: char| -> bool { c.is_whitespace() }))\n-            {\n+            if let (true, Some(ws_pos)) = (src.starts_with(\"&'\"), src.find(char::is_whitespace)) {\n                 let lt_name = &src[1..ws_pos];\n                 let ty = src[ws_pos..].trim_start();\n                 if !is_mutbl(ty) {\n@@ -940,9 +940,7 @@ fn suggest_ampmut<'tcx>(\n     };\n \n     if let Ok(src) = tcx.sess.source_map().span_to_snippet(highlight_span) {\n-        if let (true, Some(ws_pos)) =\n-            (src.starts_with(\"&'\"), src.find(|c: char| -> bool { c.is_whitespace() }))\n-        {\n+        if let (true, Some(ws_pos)) = (src.starts_with(\"&'\"), src.find(char::is_whitespace)) {\n             let lt_name = &src[1..ws_pos];\n             let ty = &src[ws_pos..];\n             return (highlight_span, format!(\"&{} mut{}\", lt_name, ty));"}, {"sha": "0396806f822fbd862bb676264303f204780f4aeb", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -1142,7 +1142,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Err(ptr) => ptr.into(),\n             Ok(bits) => {\n                 let addr = u64::try_from(bits).unwrap();\n-                M::ptr_from_addr(&self, addr)\n+                let ptr = M::ptr_from_addr(&self, addr);\n+                if addr == 0 {\n+                    assert!(ptr.provenance.is_none(), \"null pointer can never have an AllocId\");\n+                }\n+                ptr\n             }\n         }\n     }"}, {"sha": "9818bd8d314690391642690b0234e965102fbf1d", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -242,6 +242,63 @@ impl<'a> Parser<'a> {\n         expected.sort_by_cached_key(|x| x.to_string());\n         expected.dedup();\n \n+        let sm = self.sess.source_map();\n+        let msg = format!(\"expected `;`, found {}\", super::token_descr(&self.token));\n+        let appl = Applicability::MachineApplicable;\n+        if expected.contains(&TokenType::Token(token::Semi)) {\n+            if self.token.span == DUMMY_SP || self.prev_token.span == DUMMY_SP {\n+                // Likely inside a macro, can't provide meaningful suggestions.\n+            } else if !sm.is_multiline(self.prev_token.span.until(self.token.span)) {\n+                // The current token is in the same line as the prior token, not recoverable.\n+            } else if [token::Comma, token::Colon].contains(&self.token.kind)\n+                && self.prev_token.kind == token::CloseDelim(token::Paren)\n+            {\n+                // Likely typo: The current token is on a new line and is expected to be\n+                // `.`, `;`, `?`, or an operator after a close delimiter token.\n+                //\n+                // let a = std::process::Command::new(\"echo\")\n+                //         .arg(\"1\")\n+                //         ,arg(\"2\")\n+                //         ^\n+                // https://github.com/rust-lang/rust/issues/72253\n+            } else if self.look_ahead(1, |t| {\n+                t == &token::CloseDelim(token::Brace)\n+                    || t.can_begin_expr() && t.kind != token::Colon\n+            }) && [token::Comma, token::Colon].contains(&self.token.kind)\n+            {\n+                // Likely typo: `,` \u2192 `;` or `:` \u2192 `;`. This is triggered if the current token is\n+                // either `,` or `:`, and the next token could either start a new statement or is a\n+                // block close. For example:\n+                //\n+                //   let x = 32:\n+                //   let y = 42;\n+                self.bump();\n+                let sp = self.prev_token.span;\n+                self.struct_span_err(sp, &msg)\n+                    .span_suggestion_short(sp, \"change this to `;`\", \";\".to_string(), appl)\n+                    .emit();\n+                return Ok(false);\n+            } else if self.look_ahead(0, |t| {\n+                t == &token::CloseDelim(token::Brace)\n+                    || (\n+                        t.can_begin_expr() && t != &token::Semi && t != &token::Pound\n+                        // Avoid triggering with too many trailing `#` in raw string.\n+                    )\n+            }) {\n+                // Missing semicolon typo. This is triggered if the next token could either start a\n+                // new statement or is a block close. For example:\n+                //\n+                //   let x = 32\n+                //   let y = 42;\n+                let sp = self.prev_token.span.shrink_to_hi();\n+                self.struct_span_err(sp, &msg)\n+                    .span_label(self.token.span, \"unexpected token\")\n+                    .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n+                    .emit();\n+                return Ok(false);\n+            }\n+        }\n+\n         let expect = tokens_to_string(&expected[..]);\n         let actual = super::token_descr(&self.token);\n         let (msg_exp, (label_sp, label_exp)) = if expected.len() > 1 {\n@@ -303,7 +360,6 @@ impl<'a> Parser<'a> {\n             return Err(err);\n         }\n \n-        let sm = self.sess.source_map();\n         if self.prev_token.span == DUMMY_SP {\n             // Account for macro context where the previous span might not be\n             // available to avoid incorrect output (#54841).\n@@ -1144,62 +1200,6 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::Semi) {\n             return Ok(());\n         }\n-        let sm = self.sess.source_map();\n-        let msg = format!(\"expected `;`, found {}\", super::token_descr(&self.token));\n-        let appl = Applicability::MachineApplicable;\n-        if self.token.span == DUMMY_SP || self.prev_token.span == DUMMY_SP {\n-            // Likely inside a macro, can't provide meaningful suggestions.\n-            return self.expect(&token::Semi).map(drop);\n-        } else if !sm.is_multiline(self.prev_token.span.until(self.token.span)) {\n-            // The current token is in the same line as the prior token, not recoverable.\n-        } else if [token::Comma, token::Colon].contains(&self.token.kind)\n-            && self.prev_token.kind == token::CloseDelim(token::Paren)\n-        {\n-            // Likely typo: The current token is on a new line and is expected to be\n-            // `.`, `;`, `?`, or an operator after a close delimiter token.\n-            //\n-            // let a = std::process::Command::new(\"echo\")\n-            //         .arg(\"1\")\n-            //         ,arg(\"2\")\n-            //         ^\n-            // https://github.com/rust-lang/rust/issues/72253\n-            self.expect(&token::Semi)?;\n-            return Ok(());\n-        } else if self.look_ahead(1, |t| {\n-            t == &token::CloseDelim(token::Brace) || t.can_begin_expr() && t.kind != token::Colon\n-        }) && [token::Comma, token::Colon].contains(&self.token.kind)\n-        {\n-            // Likely typo: `,` \u2192 `;` or `:` \u2192 `;`. This is triggered if the current token is\n-            // either `,` or `:`, and the next token could either start a new statement or is a\n-            // block close. For example:\n-            //\n-            //   let x = 32:\n-            //   let y = 42;\n-            self.bump();\n-            let sp = self.prev_token.span;\n-            self.struct_span_err(sp, &msg)\n-                .span_suggestion_short(sp, \"change this to `;`\", \";\".to_string(), appl)\n-                .emit();\n-            return Ok(());\n-        } else if self.look_ahead(0, |t| {\n-            t == &token::CloseDelim(token::Brace)\n-                || (\n-                    t.can_begin_expr() && t != &token::Semi && t != &token::Pound\n-                    // Avoid triggering with too many trailing `#` in raw string.\n-                )\n-        }) {\n-            // Missing semicolon typo. This is triggered if the next token could either start a\n-            // new statement or is a block close. For example:\n-            //\n-            //   let x = 32\n-            //   let y = 42;\n-            let sp = self.prev_token.span.shrink_to_hi();\n-            self.struct_span_err(sp, &msg)\n-                .span_label(self.token.span, \"unexpected token\")\n-                .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n-                .emit();\n-            return Ok(());\n-        }\n         self.expect(&token::Semi).map(drop) // Error unconditionally\n     }\n "}, {"sha": "f2ec6aae9f2e62184f622d94489e2a3d617008c8", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{FramePointer, RelroLevel, TargetOptions};\n+use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -8,7 +8,6 @@ pub fn opts() -> TargetOptions {\n         families: vec![\"unix\".to_string()],\n         has_rpath: true,\n         position_independent_executables: true,\n-        frame_pointer: FramePointer::Always, // FIXME 43575: should be MayOmit...\n         relro_level: RelroLevel::Full,\n         abi_return_struct_as_int: true,\n         dwarf_version: Some(2),"}, {"sha": "b8756d2526edf1a78c89178e8a72d8c71b21e8ed", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -234,9 +234,9 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                     return Some(Event::Html(\n                         format!(\n                             \"<div class=\\\"example-wrap\\\">\\\n-                                 <pre{}>{}</pre>\\\n+                                 <pre class=\\\"language-{}\\\">{}</pre>\\\n                              </div>\",\n-                            format!(\" class=\\\"language-{}\\\"\", lang),\n+                            lang,\n                             Escape(&text),\n                         )\n                         .into(),"}, {"sha": "83ad4f7097bdf625e5acc532037e41bcc2444553", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -888,7 +888,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust union\\\">\");\n         render_attributes_in_pre(w, it, \"\");\n-        render_union(w, it, Some(&s.generics), &s.fields, \"\", true, cx);\n+        render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n         w.write_str(\"</pre>\")\n     });\n \n@@ -1380,14 +1380,12 @@ fn render_union(\n     g: Option<&clean::Generics>,\n     fields: &[clean::Item],\n     tab: &str,\n-    structhead: bool,\n     cx: &Context<'_>,\n ) {\n     write!(\n         w,\n-        \"{}{}{}\",\n+        \"{}union {}\",\n         it.visibility.print_with_space(it.def_id, cx),\n-        if structhead { \"union \" } else { \"\" },\n         it.name.as_ref().unwrap()\n     );\n     if let Some(g) = g {"}, {"sha": "cc9c488db7c43bf9c05add8d1f2290f1225863d3", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -83,7 +83,7 @@\n                     </select> {#- -#}\n                     {%- endif -%}\n                     <input {# -#}\n-                        class=\"search-input\"{# -#}\n+                        class=\"search-input\" {# -#}\n                         name=\"search\" {# -#}\n                         disabled {# -#}\n                         autocomplete=\"off\" {# -#}"}, {"sha": "2b1ab2f705057cc4da4c307cbc9e9f1cfd95d702", "filename": "src/test/ui/borrowck/issue-85765.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -12,4 +12,18 @@ fn main() {\n     *r = 0;\n     //~^ ERROR cannot assign to `*r`, which is behind a `&` reference\n     //~| NOTE `r` is a `&` reference, so the data it refers to cannot be written\n+\n+    #[rustfmt::skip]\n+    let x: &usize = &mut{0};\n+    //~^ HELP consider changing this to be a mutable reference\n+    *x = 1;\n+    //~^ ERROR cannot assign to `*x`, which is behind a `&` reference\n+    //~| NOTE `x` is a `&` reference, so the data it refers to cannot be written\n+\n+    #[rustfmt::skip]\n+    let y: &usize = &mut(0);\n+    //~^ HELP consider changing this to be a mutable reference\n+    *y = 1;\n+    //~^ ERROR cannot assign to `*y`, which is behind a `&` reference\n+    //~| NOTE `y` is a `&` reference, so the data it refers to cannot be written\n }"}, {"sha": "af83c6ea6d903a9e259f0457d9b80586f63f6f5f", "filename": "src/test/ui/borrowck/issue-85765.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -16,7 +16,25 @@ LL |\n LL |     *r = 0;\n    |     ^^^^^^ `r` is a `&` reference, so the data it refers to cannot be written\n \n-error: aborting due to 2 previous errors\n+error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n+  --> $DIR/issue-85765.rs:19:5\n+   |\n+LL |     let x: &usize = &mut{0};\n+   |         - help: consider changing this to be a mutable reference: `&mut usize`\n+LL |\n+LL |     *x = 1;\n+   |     ^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `*y`, which is behind a `&` reference\n+  --> $DIR/issue-85765.rs:26:5\n+   |\n+LL |     let y: &usize = &mut(0);\n+   |         - help: consider changing this to be a mutable reference: `&mut usize`\n+LL |\n+LL |     *y = 1;\n+   |     ^^^^^^ `y` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "53f071db7819a9b90cbdef1bd9997f212f44db69", "filename": "src/test/ui/parser/issue-87197-missing-semicolon.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.fixed?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// Parser should know when a semicolon is missing.\n+// https://github.com/rust-lang/rust/issues/87197\n+\n+fn main() {\n+    let x = 100; //~ ERROR: expected `;`\n+    println!(\"{}\", x); //~ ERROR: expected `;`\n+    let y = 200; //~ ERROR: expected `;`\n+    println!(\"{}\", y);\n+}"}, {"sha": "db0edf4529c77c8a94d670562ea3beca13fbec77", "filename": "src/test/ui/parser/issue-87197-missing-semicolon.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// Parser should know when a semicolon is missing.\n+// https://github.com/rust-lang/rust/issues/87197\n+\n+fn main() {\n+    let x = 100 //~ ERROR: expected `;`\n+    println!(\"{}\", x) //~ ERROR: expected `;`\n+    let y = 200 //~ ERROR: expected `;`\n+    println!(\"{}\", y);\n+}"}, {"sha": "57772de1e7a4bc3324fe55c4753ec57be01f357e", "filename": "src/test/ui/parser/issue-87197-missing-semicolon.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87197-missing-semicolon.stderr?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -0,0 +1,26 @@\n+error: expected `;`, found `println`\n+  --> $DIR/issue-87197-missing-semicolon.rs:6:16\n+   |\n+LL |     let x = 100\n+   |                ^ help: add `;` here\n+LL |     println!(\"{}\", x)\n+   |     ------- unexpected token\n+\n+error: expected `;`, found keyword `let`\n+  --> $DIR/issue-87197-missing-semicolon.rs:7:22\n+   |\n+LL |     println!(\"{}\", x)\n+   |                      ^ help: add `;` here\n+LL |     let y = 200\n+   |     --- unexpected token\n+\n+error: expected `;`, found `println`\n+  --> $DIR/issue-87197-missing-semicolon.rs:8:16\n+   |\n+LL |     let y = 200\n+   |                ^ help: add `;` here\n+LL |     println!(\"{}\", y);\n+   |     ------- unexpected token\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "24d1ae9e6236851a48eaec549a098695e793f049", "filename": "src/test/ui/parser/macros-no-semicolon.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.rs?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    assert_eq!(1, 2)\n-    assert_eq!(3, 4) //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `assert_eq`\n+    assert_eq!(1, 2) //~ ERROR: expected `;`\n+    assert_eq!(3, 4) //~ ERROR: expected `;`\n     println!(\"hello\");\n }"}, {"sha": "f310662dbb0e790799099057c8bdc6d2f2a95016", "filename": "src/test/ui/parser/macros-no-semicolon.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon.stderr?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -1,10 +1,18 @@\n-error: expected one of `.`, `;`, `?`, `}`, or an operator, found `assert_eq`\n-  --> $DIR/macros-no-semicolon.rs:3:5\n+error: expected `;`, found `assert_eq`\n+  --> $DIR/macros-no-semicolon.rs:2:21\n    |\n LL |     assert_eq!(1, 2)\n-   |                     - expected one of `.`, `;`, `?`, `}`, or an operator\n+   |                     ^ help: add `;` here\n LL |     assert_eq!(3, 4)\n-   |     ^^^^^^^^^ unexpected token\n+   |     --------- unexpected token\n \n-error: aborting due to previous error\n+error: expected `;`, found `println`\n+  --> $DIR/macros-no-semicolon.rs:3:21\n+   |\n+LL |     assert_eq!(3, 4)\n+   |                     ^ help: add `;` here\n+LL |     println!(\"hello\");\n+   |     ------- unexpected token\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "81c6719647fc1476ff7bf3d2bbc5ddb9e154f8aa", "filename": "triagebot.toml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=8bebfe5cc2db1603be0d4ad79ad17d48e3b20e54", "patch": "@@ -112,6 +112,14 @@ message_on_add = \"\"\"\\\n \"\"\"\n message_on_remove = \"Issue #{number}'s nomination request has been removed.\"\n \n+[notify-zulip.\"A-edition-2021\"]\n+required_labels = [\"C-bug\"]\n+zulip_stream = 268952 # #edition 2021\n+topic = \"Edition Bugs\"\n+message_on_add = \"\"\"\\\n+Issue #{number} \"{title}\" has been added.\n+\"\"\"\n+\n [github-releases]\n format = \"rustc\"\n project-name = \"Rust\""}]}