{"sha": "5e1d0bab8075df5ce06543537296d7294440bd45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMWQwYmFiODA3NWRmNWNlMDY1NDM1MzcyOTZkNzI5NDQ0MGJkNDU=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2012-10-13T00:48:45Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-17T18:19:38Z"}, "message": "Sigil patrol: change fn@ fn& fn~ to @fn &fn ~fn\n\nThis also involves removing references to the old long-form closure\nsyntax, which pcwalton alleges is deprecated and which was never updated\nfor the new forms, e.g. `@fn() {}` is illegal.", "tree": {"sha": "176bee4b0c0b1fd71bbf00cd71f596f5e248f6fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/176bee4b0c0b1fd71bbf00cd71f596f5e248f6fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1d0bab8075df5ce06543537296d7294440bd45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1d0bab8075df5ce06543537296d7294440bd45", "html_url": "https://github.com/rust-lang/rust/commit/5e1d0bab8075df5ce06543537296d7294440bd45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1d0bab8075df5ce06543537296d7294440bd45/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94e82cb8ef0491667bc8041d370199aed838f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94e82cb8ef0491667bc8041d370199aed838f2d", "html_url": "https://github.com/rust-lang/rust/commit/e94e82cb8ef0491667bc8041d370199aed838f2d"}], "stats": {"total": 36, "additions": 11, "deletions": 25}, "files": [{"sha": "67c9bcd8281168809516166295938b5cfb4678bb", "filename": "doc/tutorial.md", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e1d0bab8075df5ce06543537296d7294440bd45/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e1d0bab8075df5ce06543537296d7294440bd45/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=5e1d0bab8075df5ce06543537296d7294440bd45", "patch": "@@ -1569,7 +1569,7 @@ let bloop = |well, oh: mygoodness| -> what_the { fail oh(well) };\n ~~~~\n \n There are several forms of closure, each with its own role. The most\n-common, called a _stack closure_, has type `fn&` and can directly\n+common, called a _stack closure_, has type `&fn` and can directly\n access local variables in the enclosing scope.\n \n ~~~~\n@@ -1591,7 +1591,7 @@ pervasively in Rust code.\n When you need to store a closure in a data structure, a stack closure\n will not do, since the compiler will refuse to let you store it. For\n this purpose, Rust provides a type of closure that has an arbitrary\n-lifetime, written `fn@` (boxed closure, analogous to the `@` pointer\n+lifetime, written `@fn` (boxed closure, analogous to the `@` pointer\n type described earlier). This type of closure *is* first-class.\n \n A managed closure does not directly access its environment, but merely\n@@ -1604,8 +1604,9 @@ returns it from a function, and then calls it:\n \n ~~~~\n # extern mod std;\n-fn mk_appender(suffix: ~str) -> fn@(~str) -> ~str {\n-    return fn@(s: ~str) -> ~str { s + suffix };\n+fn mk_appender(suffix: ~str) -> @fn(~str) -> ~str {\n+    // The compiler knows that we intend this closure to be of type @fn\n+    return |s| s + suffix;\n }\n \n fn main() {\n@@ -1614,22 +1615,9 @@ fn main() {\n }\n ~~~~\n \n-This example uses the long closure syntax, `fn@(s: ~str) ...`. Using\n-this syntax makes it explicit that we are declaring a boxed\n-closure. In practice, boxed closures are usually defined with the\n-short closure syntax introduced earlier, in which case the compiler\n-infers the type of closure. Thus our managed closure example could\n-also be written:\n-\n-~~~~\n-fn mk_appender(suffix: ~str) -> fn@(~str) -> ~str {\n-    return |s| s + suffix;\n-}\n-~~~~\n-\n ## Owned closures\n \n-Owned closures, written `fn~` in analogy to the `~` pointer type,\n+Owned closures, written `~fn` in analogy to the `~` pointer type,\n hold on to things that can safely be sent between\n processes. They copy the values they close over, much like managed\n closures, but they also own them: that is, no other code can access\n@@ -1649,12 +1637,10 @@ callers may pass any kind of closure.\n \n ~~~~\n fn call_twice(f: fn()) { f(); f(); }\n-call_twice(|| { \"I am an inferred stack closure\"; } );\n-call_twice(fn&() { \"I am also a stack closure\"; } );\n-call_twice(fn@() { \"I am a managed closure\"; });\n-call_twice(fn~() { \"I am an owned closure\"; });\n-fn bare_function() { \"I am a plain function\"; }\n-call_twice(bare_function);\n+let closure = || { \"I'm a closure, and it doesn't matter what type I am\"; };\n+fn function() { \"I'm a normal function\"; }\n+call_twice(closure);\n+call_twice(function);\n ~~~~\n \n > ***Note:*** Both the syntax and the semantics will be changing\n@@ -1715,7 +1701,7 @@ parentheses, where it looks more like a typical block of\n code.\n \n `do` is a convenient way to create tasks with the `task::spawn`\n-function.  `spawn` has the signature `spawn(fn: fn~())`. In other\n+function.  `spawn` has the signature `spawn(fn: ~fn())`. In other\n words, it is a function that takes an owned closure that takes no\n arguments.\n "}]}