{"sha": "457c4c133a4bc83da668b5bceac75cd229ff112e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1N2M0YzEzM2E0YmM4M2RhNjY4YjViY2VhYzc1Y2QyMjlmZjExMmU=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-13T20:58:00Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-04-20T20:42:46Z"}, "message": "Add BinderScopeType to replace binder_depth and from_poly_trait_ref", "tree": {"sha": "55fa4ecdf962e9a7a3749ac87282482d0e30a991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55fa4ecdf962e9a7a3749ac87282482d0e30a991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457c4c133a4bc83da668b5bceac75cd229ff112e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457c4c133a4bc83da668b5bceac75cd229ff112e", "html_url": "https://github.com/rust-lang/rust/commit/457c4c133a4bc83da668b5bceac75cd229ff112e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457c4c133a4bc83da668b5bceac75cd229ff112e/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32942ab8078dd9c266aa5886f98ab32eda310749", "url": "https://api.github.com/repos/rust-lang/rust/commits/32942ab8078dd9c266aa5886f98ab32eda310749", "html_url": "https://github.com/rust-lang/rust/commit/32942ab8078dd9c266aa5886f98ab32eda310749"}], "stats": {"total": 197, "additions": 86, "deletions": 111}, "files": [{"sha": "58d053aca1ab19a1ec1dfa6ed01c7082e2b48120", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 86, "deletions": 111, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/457c4c133a4bc83da668b5bceac75cd229ff112e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457c4c133a4bc83da668b5bceac75cd229ff112e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=457c4c133a4bc83da668b5bceac75cd229ff112e", "patch": "@@ -244,12 +244,7 @@ enum Scope<'a> {\n         /// of the resulting opaque type.\n         opaque_type_parent: bool,\n \n-        /// True only if this `Binder` scope is from the quantifiers on a\n-        /// `PolyTraitRef`. This is necessary for `associated_type_bounds`, which\n-        /// requires binders of nested trait refs to be merged.\n-        from_poly_trait_ref: bool,\n-\n-        binder_depth: u32,\n+        scope_type: BinderScopeType,\n \n         /// The late bound vars for a given item are stored by `HirId` to be\n         /// queried later. However, if we enter an elision scope, we have to\n@@ -335,6 +330,13 @@ enum Scope<'a> {\n     Root,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+enum BinderScopeType {\n+    Other,\n+    PolyTraitRef,\n+    Concatenating,\n+}\n+\n // A helper struct for debugging scopes without printing parent scopes\n struct TruncatedScopeDebug<'a>(&'a Scope<'a>);\n \n@@ -346,8 +348,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 next_early_index,\n                 track_lifetime_uses,\n                 opaque_type_parent,\n-                from_poly_trait_ref,\n-                binder_depth,\n+                scope_type,\n                 hir_id,\n                 s: _,\n             } => f\n@@ -356,8 +357,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 .field(\"next_early_index\", next_early_index)\n                 .field(\"track_lifetime_uses\", track_lifetime_uses)\n                 .field(\"opaque_type_parent\", opaque_type_parent)\n-                .field(\"from_poly_trait_ref\", from_poly_trait_ref)\n-                .field(\"binder_depth\", binder_depth)\n+                .field(\"scope_type\", scope_type)\n                 .field(\"hir_id\", hir_id)\n                 .field(\"s\", &\"..\")\n                 .finish(),\n@@ -622,48 +622,6 @@ fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::\n     }\n }\n \n-impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n-    fn depth(&self, concanetate: bool) -> u32 {\n-        let mut passed_boundary = false;\n-        let mut scope = self.scope;\n-        loop {\n-            match *scope {\n-                Scope::Root => {\n-                    break 0;\n-                }\n-\n-                Scope::TraitRefBoundary { s, .. } => {\n-                    passed_boundary = true;\n-                    scope = s;\n-                }\n-\n-                Scope::Binder { binder_depth, from_poly_trait_ref, .. } => {\n-                    if concanetate && !passed_boundary && !from_poly_trait_ref {\n-                        bug!(\"{:?}\", self.scope);\n-                    }\n-                    break if concanetate {\n-                        if passed_boundary || !from_poly_trait_ref {\n-                            binder_depth + 1\n-                        } else {\n-                            binder_depth\n-                        }\n-                    } else {\n-                        binder_depth + 1\n-                    };\n-                }\n-\n-                Scope::Elision { s, .. }\n-                | Scope::ObjectLifetimeDefault { s, .. }\n-                | Scope::TraitRefHackInner { s, .. }\n-                | Scope::Supertrait { s, .. }\n-                | Scope::Body { s, .. } => {\n-                    scope = s;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n@@ -721,8 +679,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n-                    from_poly_trait_ref: false,\n-                    binder_depth: self.depth(false),\n+                    scope_type: BinderScopeType::Other,\n                 };\n                 self.with(scope, move |_old_scope, this| {\n                     intravisit::walk_fn(this, fk, fd, b, s, hir_id)\n@@ -847,8 +804,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index: index + non_lifetime_count,\n                     opaque_type_parent: true,\n                     track_lifetime_uses,\n-                    from_poly_trait_ref: false,\n-                    binder_depth: self.depth(false),\n+                    scope_type: BinderScopeType::Other,\n                     s: ROOT_SCOPE,\n                 };\n                 self.with(scope, |old_scope, this| {\n@@ -920,8 +876,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index,\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n-                    from_poly_trait_ref: false,\n-                    binder_depth: self.depth(false),\n+                    scope_type: BinderScopeType::Other,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     // a bare fn has no bounds, so everything\n@@ -1117,8 +1072,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             s: this.scope,\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n-                            from_poly_trait_ref: false,\n-                            binder_depth: this.depth(false),\n+                            scope_type: BinderScopeType::Other,\n                         };\n                         this.with(scope, |_old_scope, this| {\n                             this.visit_generics(generics);\n@@ -1138,8 +1092,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         s: self.scope,\n                         track_lifetime_uses: true,\n                         opaque_type_parent: false,\n-                        from_poly_trait_ref: false,\n-                        binder_depth: self.depth(false),\n+                        scope_type: BinderScopeType::Other,\n                     };\n                     self.with(scope, |_old_scope, this| {\n                         let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -1198,8 +1151,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n-                    from_poly_trait_ref: false,\n-                    binder_depth: self.depth(false),\n+                    scope_type: BinderScopeType::Other,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1268,8 +1220,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     s: self.scope,\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n-                    from_poly_trait_ref: false,\n-                    binder_depth: self.depth(false),\n+                    scope_type: BinderScopeType::Other,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1373,29 +1324,28 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 })\n                                 .unzip();\n                         this.map.late_bound_vars.insert(bounded_ty.hir_id, binders.clone());\n-                            if !lifetimes.is_empty() {\n-                                let next_early_index = this.next_early_index();\n-                                let scope = Scope::Binder {\n-                                    hir_id: bounded_ty.hir_id,\n-                                    lifetimes,\n-                                    s: this.scope,\n-                                    next_early_index,\n-                                    track_lifetime_uses: true,\n-                                    opaque_type_parent: false,\n-                                    from_poly_trait_ref: true,\n-                                    binder_depth: this.depth(false),\n-                                };\n-                                this.with(scope, |old_scope, this| {\n-                                    this.check_lifetime_params(old_scope, &bound_generic_params);\n-                                    this.visit_ty(&bounded_ty);\n-                                    this.trait_ref_hack = Some(bounded_ty.hir_id);\n-                                    walk_list!(this, visit_param_bound, bounds);\n-                                    this.trait_ref_hack = None;\n-                                })\n-                            } else {\n+                        if !lifetimes.is_empty() {\n+                            let next_early_index = this.next_early_index();\n+                            let scope = Scope::Binder {\n+                                hir_id: bounded_ty.hir_id,\n+                                lifetimes,\n+                                s: this.scope,\n+                                next_early_index,\n+                                track_lifetime_uses: true,\n+                                opaque_type_parent: false,\n+                                scope_type: BinderScopeType::PolyTraitRef,\n+                            };\n+                            this.with(scope, |old_scope, this| {\n+                                this.check_lifetime_params(old_scope, &bound_generic_params);\n                                 this.visit_ty(&bounded_ty);\n+                                this.trait_ref_hack = Some(bounded_ty.hir_id);\n                                 walk_list!(this, visit_param_bound, bounds);\n-                            }\n+                                this.trait_ref_hack = None;\n+                            })\n+                        } else {\n+                            this.visit_ty(&bounded_ty);\n+                            walk_list!(this, visit_param_bound, bounds);\n+                        }\n                     }\n                     &hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                         ref lifetime,\n@@ -1429,8 +1379,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     next_early_index: self.next_early_index(),\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n-                    from_poly_trait_ref: false,\n-                    binder_depth: self.depth(false),\n+                    scope_type: BinderScopeType::Other,\n                 };\n                 self.with(scope, |_, this| {\n                     intravisit::walk_param_bound(this, bound);\n@@ -1527,12 +1476,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         break vec![];\n                     }\n \n-                    Scope::Binder { hir_id, from_poly_trait_ref, .. } => {\n-                        if !from_poly_trait_ref {\n-                            // We should only see super trait lifetimes if there is a `Binder` above\n-                            assert!(supertrait_lifetimes.is_empty());\n-                            break vec![];\n-                        }\n+                    Scope::Binder { hir_id, .. } => {\n                         // Nested poly trait refs have the binders concatenated\n                         let mut full_binders =\n                             self.map.late_bound_vars.entry(*hir_id).or_default().clone();\n@@ -1569,15 +1513,41 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         self.map.late_bound_vars.insert(trait_ref.trait_ref.hir_ref_id, binders);\n \n         if trait_ref_hack.is_none() || has_lifetimes {\n+            let scope_type = {\n+                let mut scope = self.scope;\n+                loop {\n+                    match *scope {\n+                        Scope::Root | Scope::TraitRefBoundary { .. } => {\n+                            break BinderScopeType::PolyTraitRef;\n+                        }\n+\n+                        Scope::Binder { scope_type, .. } => {\n+                            if let BinderScopeType::Other = scope_type {\n+                                bug!(\n+                                    \"Expected all syntacic poly trait refs to be surrounded by a `TraitRefBoundary`\"\n+                                )\n+                            }\n+                            break BinderScopeType::Concatenating;\n+                        }\n+\n+                        Scope::Elision { s, .. }\n+                        | Scope::ObjectLifetimeDefault { s, .. }\n+                        | Scope::TraitRefHackInner { s, .. }\n+                        | Scope::Supertrait { s, .. }\n+                        | Scope::Body { s, .. } => {\n+                            scope = s;\n+                        }\n+                    }\n+                }\n+            };\n             let scope = Scope::Binder {\n                 hir_id: trait_ref.trait_ref.hir_ref_id,\n                 lifetimes,\n                 s: self.scope,\n                 next_early_index,\n                 track_lifetime_uses: true,\n                 opaque_type_parent: false,\n-                from_poly_trait_ref: true,\n-                binder_depth: self.depth(true),\n+                scope_type,\n             };\n             self.with(scope, |old_scope, this| {\n                 this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n@@ -2327,8 +2297,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             s: self.scope,\n             opaque_type_parent: true,\n             track_lifetime_uses: false,\n-            from_poly_trait_ref: false,\n-            binder_depth: self.depth(false),\n+            scope_type: BinderScopeType::Other,\n         };\n         self.with(scope, move |old_scope, this| {\n             this.check_lifetime_params(old_scope, &generics.params);\n@@ -2386,7 +2355,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // given name or we run out of scopes.\n         // search.\n         let mut late_depth = 0;\n-        let mut first_binder_depth = None;\n         let mut scope = self.scope;\n         let mut outermost_body = None;\n         let result = loop {\n@@ -2404,7 +2372,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     break None;\n                 }\n \n-                Scope::Binder { ref lifetimes, s, binder_depth, .. } => {\n+                Scope::Binder { ref lifetimes, scope_type, s, .. } => {\n                     match lifetime_ref.name {\n                         LifetimeName::Param(param_name) => {\n                             if let Some(&def) = lifetimes.get(&param_name.normalize_to_macros_2_0())\n@@ -2414,8 +2382,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         }\n                         _ => bug!(\"expected LifetimeName::Param\"),\n                     }\n-                    first_binder_depth = first_binder_depth.or(Some(binder_depth));\n-                    late_depth = first_binder_depth.unwrap_or(binder_depth) - binder_depth + 1;\n+                    match scope_type {\n+                        BinderScopeType::Other => late_depth += 1,\n+                        BinderScopeType::PolyTraitRef => late_depth += 1,\n+                        BinderScopeType::Concatenating => {}\n+                    }\n                     scope = s;\n                 }\n \n@@ -3126,7 +3097,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         let span = lifetime_refs[0].span;\n         let mut late_depth = 0;\n-        let mut first_binder_depth = None;\n         let mut scope = self.scope;\n         let mut lifetime_names = FxHashSet::default();\n         let mut lifetime_spans = vec![];\n@@ -3137,16 +3107,19 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                 Scope::Root => break None,\n \n-                Scope::Binder { s, ref lifetimes, binder_depth, .. } => {\n+                Scope::Binder { s, ref lifetimes, scope_type, .. } => {\n                     // collect named lifetimes for suggestions\n                     for name in lifetimes.keys() {\n                         if let hir::ParamName::Plain(name) = name {\n                             lifetime_names.insert(name.name);\n                             lifetime_spans.push(name.span);\n                         }\n                     }\n-                    first_binder_depth = first_binder_depth.or(Some(binder_depth));\n-                    late_depth = first_binder_depth.unwrap_or(binder_depth) - binder_depth + 1;\n+                    match scope_type {\n+                        BinderScopeType::Other => late_depth += 1,\n+                        BinderScopeType::PolyTraitRef => late_depth += 1,\n+                        BinderScopeType::Concatenating => {}\n+                    }\n                     scope = s;\n                 }\n \n@@ -3303,13 +3276,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn resolve_object_lifetime_default(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         debug!(\"resolve_object_lifetime_default(lifetime_ref={:?})\", lifetime_ref);\n         let mut late_depth = 0;\n-        let mut first_binder_depth = None;\n         let mut scope = self.scope;\n         let lifetime = loop {\n             match *scope {\n-                Scope::Binder { s, binder_depth, .. } => {\n-                    first_binder_depth = first_binder_depth.or(Some(binder_depth));\n-                    late_depth = first_binder_depth.unwrap_or(binder_depth) - binder_depth + 1;\n+                Scope::Binder { s, scope_type, .. } => {\n+                    match scope_type {\n+                        BinderScopeType::Other => late_depth += 1,\n+                        BinderScopeType::PolyTraitRef => late_depth += 1,\n+                        BinderScopeType::Concatenating => {}\n+                    }\n                     scope = s;\n                 }\n "}]}