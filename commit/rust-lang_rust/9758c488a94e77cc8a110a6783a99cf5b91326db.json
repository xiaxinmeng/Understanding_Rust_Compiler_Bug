{"sha": "9758c488a94e77cc8a110a6783a99cf5b91326db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NThjNDg4YTk0ZTc3Y2M4YTExMGE2NzgzYTk5Y2Y1YjkxMzI2ZGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-22T20:33:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-23T23:50:03Z"}, "message": "Deprecated attributes don't take 'feature' names and are paired with stable/unstable\n\nConflicts:\n\tsrc/libcore/atomic.rs\n\tsrc/libcore/finally.rs\n\tsrc/test/auxiliary/inherited_stability.rs\n\tsrc/test/auxiliary/lint_stability.rs", "tree": {"sha": "ca5f2436cb4b9dc39aa7f525cf4a5fc9288d0ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5f2436cb4b9dc39aa7f525cf4a5fc9288d0ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9758c488a94e77cc8a110a6783a99cf5b91326db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9758c488a94e77cc8a110a6783a99cf5b91326db", "html_url": "https://github.com/rust-lang/rust/commit/9758c488a94e77cc8a110a6783a99cf5b91326db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9758c488a94e77cc8a110a6783a99cf5b91326db/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd6d9eab5d75584edfcae4ffdef8b0836db80c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6d9eab5d75584edfcae4ffdef8b0836db80c1e", "html_url": "https://github.com/rust-lang/rust/commit/cd6d9eab5d75584edfcae4ffdef8b0836db80c1e"}], "stats": {"total": 606, "additions": 437, "deletions": 169}, "files": [{"sha": "3327548581abe19a03e23d04963c839f0ed79d10", "filename": "src/etc/featureck.py", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Fetc%2Ffeatureck.py", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Fetc%2Ffeatureck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ffeatureck.py?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -84,8 +84,6 @@\n                     level = \"unstable\"\n                 elif \"[stable(\" in line:\n                     level = \"stable\"\n-                elif \"[deprecated(\" in line:\n-                    level = \"deprecated\"\n                 else:\n                     continue\n \n@@ -94,12 +92,12 @@\n                 # the same line, e.g.\n                 # `#[unstable(feature = \"foo\", since = \"1.0.0\")]`\n \n-                p = re.compile('(unstable|stable|deprecated).*feature *= *\"(\\w*)\"')\n+                p = re.compile('(unstable|stable).*feature *= *\"(\\w*)\"')\n                 m = p.search(line)\n                 if not m is None:\n                     feature_name = m.group(2)\n                     since = None\n-                    if \"stable\" in line or \"deprecated\" in line:\n+                    if \"stable\" in line:\n                         pp = re.compile('since *= *\"([\\w\\.]*)\"')\n                         mm = pp.search(line)\n                         since = m.group(1)\n@@ -135,7 +133,7 @@\n                     errors = True\n \n # Merge data about both lists\n-# name, lang, lib, status, stable since, partially deprecated\n+# name, lang, lib, status, stable since\n \n language_feature_stats = {}\n \n@@ -145,15 +143,13 @@\n     lib = False\n     status = \"unstable\"\n     stable_since = None\n-    partially_deprecated = False\n \n     if f[2] == \"Accepted\":\n         status = \"stable\"\n     if status == \"stable\":\n         stable_since = f[1]\n \n-    language_feature_stats[name] = (name, lang, lib, status, stable_since, \\\n-                                    partially_deprecated)\n+    language_feature_stats[name] = (name, lang, lib, status, stable_since)\n \n lib_feature_stats = {}\n \n@@ -163,11 +159,9 @@\n     lib = True\n     status = \"unstable\"\n     stable_since = None\n-    partially_deprecated = False\n \n     is_stable = lib_features_and_level.get((name, \"stable\")) is not None\n     is_unstable = lib_features_and_level.get((name, \"unstable\")) is not None\n-    is_deprecated = lib_features_and_level.get((name, \"deprecated\")) is not None\n \n     if is_stable and is_unstable:\n         print \"error: feature '\" + name + \"' is both stable and unstable\"\n@@ -179,14 +173,8 @@\n     elif is_unstable:\n         status = \"unstable\"\n         stable_since = lib_features_and_level[(name, \"unstable\")][0]\n-    elif is_deprecated:\n-        status = \"deprecated\"\n \n-    if (is_stable or is_unstable) and is_deprecated:\n-        partially_deprecated = True\n-\n-    lib_feature_stats[name] = (name, lang, lib, status, stable_since, \\\n-                               partially_deprecated)\n+    lib_feature_stats[name] = (name, lang, lib, status, stable_since)\n \n # Check for overlap in two sets\n merged_stats = { }\n@@ -200,25 +188,18 @@\n         lib_status = lib_feature_stats[name][3]\n         lang_stable_since = lang_feature_stats[name][4]\n         lib_stable_since = lib_feature_stats[name][4]\n-        lang_partially_deprecated = lang_feature_stats[name][5]\n-        lib_partially_deprecated = lib_feature_stats[name][5]\n \n         if lang_status != lib_status and lib_status != \"deprecated\":\n             print \"error: feature '\" + name + \"' has lang status \" + lang_status + \\\n                   \" but lib status \" + lib_status\n             errors = True\n \n-        partially_deprecated = lang_partially_deprecated or lib_partially_deprecated\n-        if lib_status == \"deprecated\" and lang_status != \"deprecated\":\n-            partially_deprecated = True\n-\n         if lang_stable_since != lib_stable_since:\n             print \"error: feature '\" + name + \"' has lang stable since \" + lang_stable_since + \\\n                   \" but lib stable since \" + lib_stable_since\n             errors = True\n \n-        merged_stats[name] = (name, True, True, lang_status, lang_stable_since, \\\n-                              partially_deprecated)\n+        merged_stats[name] = (name, True, True, lang_status, lang_stable_since)\n \n         del language_feature_stats[name]\n         del lib_feature_stats[name]\n@@ -244,8 +225,6 @@\n            \"{: <8}\".format(type_) + \\\n            \"{: <12}\".format(s[3]) + \\\n            \"{: <8}\".format(str(s[4]))\n-    if s[5]:\n-        line += \"(partially deprecated)\"\n     lines += [line]\n \n lines.sort()"}, {"sha": "9396e2d6fb2f9d4cfb948be9e9d38eb26b7695d0", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -37,6 +37,8 @@\n #![allow(missing_docs)]\n #![feature(alloc)]\n #![feature(core)]\n+#![cfg_attr(test, feature(test))]\n+#![cfg_attr(test, feature(collections))]\n \n extern crate alloc;\n "}, {"sha": "b5725e63327047910e81ddcbd64caa29acf68db6", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -33,6 +33,7 @@\n #![feature(alloc)]\n #![feature(unicode)]\n #![feature(hash)]\n+#![cfg_attr(test, feature(test))]\n \n #[macro_use]\n extern crate core;"}, {"sha": "869b8539494552acf0a691aa65ec5d91d0492bad", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -642,7 +642,8 @@ pub trait SliceExt {\n     fn binary_search(&self, x: &Self::Item) -> Result<uint, uint> where Self::Item: Ord;\n \n     /// Deprecated: use `binary_search` instead.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"use binary_search instead\")]\n+    #[unstable(feature = \"collections\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"use binary_search instead\")]\n     fn binary_search_elem(&self, x: &Self::Item) -> Result<uint, uint> where Self::Item: Ord {\n         self.binary_search(x)\n     }"}, {"sha": "5f48c965e70ec4f1eed6047fcfe972fca3d8c1e8", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -1036,7 +1036,8 @@ pub fn fence(order: Ordering) {\n     }\n }\n \n-#[deprecated(feature = \"core\", since = \"1.0.0\",\n+#[unstable(feature = \"core\")]\n+#[deprecated(since = \"1.0.0\",\n              reason = \"renamed to AtomicIsize\")]\n #[allow(missing_docs)]\n pub struct AtomicInt {\n@@ -1045,7 +1046,8 @@ pub struct AtomicInt {\n \n unsafe impl Sync for AtomicInt {}\n \n-#[deprecated(feature = \"core\", since = \"1.0.0\",\n+#[unstable(feature = \"core\")]\n+#[deprecated(since = \"1.0.0\",\n              reason = \"renamed to AtomicUsize\")]\n #[allow(missing_docs)]\n pub struct AtomicUint {\n@@ -1054,12 +1056,14 @@ pub struct AtomicUint {\n \n unsafe impl Sync for AtomicUint {}\n \n-#[deprecated(feature = \"core\", since = \"1.0.0\",\n+#[unstable(feature = \"core\")]\n+#[deprecated(since = \"1.0.0\",\n              reason = \"use ATOMIC_ISIZE_INIT instead\")]\n #[allow(missing_docs, deprecated)]\n pub const ATOMIC_INT_INIT: AtomicInt =\n         AtomicInt { v: UnsafeCell { value: 0 } };\n-#[deprecated(feature = \"core\", since = \"1.0.0\",\n+#[unstable(feature = \"core\")]\n+#[deprecated(since = \"1.0.0\",\n              reason = \"use ATOMIC_USIZE_INIT instead\")]\n #[allow(missing_docs, deprecated)]\n pub const ATOMIC_UINT_INIT: AtomicUint ="}, {"sha": "0f444ef186f9abe37ec960601b91a334c3cc74d0", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -30,7 +30,8 @@\n //! })\n //! ```\n \n-#![deprecated(feature = \"core\", since = \"1.0.0\",\n+#![unstable(feature = \"core\")]\n+#![deprecated(since = \"1.0.0\",\n               reason = \"It is unclear if this module is more robust than implementing \\\n                         Drop on a custom type, and this module is being removed with no \\\n                         replacement. Use a custom Drop implementation to regain existing \\"}, {"sha": "dcb010d8bc327666cbb6125eca843bedc0eb1294", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -112,7 +112,8 @@ impl SipHasher {\n     }\n \n     /// Returns the computed hash.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"renamed to finish\")]\n+    #[unstable(feature = \"hash\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"renamed to finish\")]\n     pub fn result(&self) -> u64 { self.finish() }\n }\n "}, {"sha": "b3733efe7b30b4d43e8a1bdda19fc714b4cd3bde", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -178,43 +178,53 @@ impl Float for f32 {\n     }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn mantissa_digits(_: Option<f32>) -> uint { MANTISSA_DIGITS }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn digits(_: Option<f32>) -> uint { DIGITS }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn epsilon() -> f32 { EPSILON }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_exp(_: Option<f32>) -> int { MIN_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn max_exp(_: Option<f32>) -> int { MAX_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_10_exp(_: Option<f32>) -> int { MIN_10_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn max_10_exp(_: Option<f32>) -> int { MAX_10_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_value() -> f32 { MIN_VALUE }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_pos_value(_: Option<f32>) -> f32 { MIN_POS_VALUE }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn max_value() -> f32 { MAX_VALUE }\n \n     /// Returns the mantissa, exponent and sign as integers."}, {"sha": "8a3767068df2519dc8507376bb8c08b12169e326", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -185,43 +185,53 @@ impl Float for f64 {\n     }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn mantissa_digits(_: Option<f64>) -> uint { MANTISSA_DIGITS }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn digits(_: Option<f64>) -> uint { DIGITS }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn epsilon() -> f64 { EPSILON }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_exp(_: Option<f64>) -> int { MIN_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn max_exp(_: Option<f64>) -> int { MAX_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_10_exp(_: Option<f64>) -> int { MIN_10_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn max_10_exp(_: Option<f64>) -> int { MAX_10_EXP }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_value() -> f64 { MIN_VALUE }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn min_pos_value(_: Option<f64>) -> f64 { MIN_POS_VALUE }\n \n     #[inline]\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn max_value() -> f64 { MAX_VALUE }\n \n     /// Returns the mantissa, exponent and sign as integers."}, {"sha": "2132b9516abad0973d95c422f34e503f246c6c03", "filename": "src/libcore/num/int.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -14,7 +14,8 @@\n //! alpha cycle along with the development of clearer conventions\n //! around integer types.\n \n-#![deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"replaced by isize\")]\n+#![unstable(feature = \"core\")]\n+#![deprecated(since = \"1.0.0\", reason = \"replaced by isize\")]\n \n #[cfg(target_pointer_width = \"32\")] int_module! { int, 32 }\n #[cfg(target_pointer_width = \"64\")] int_module! { int, 64 }"}, {"sha": "09dbec93bf033b6f589abd3283143c027b7bfdf0", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -1292,45 +1292,55 @@ pub trait Float\n     // FIXME (#5527): These should be associated constants\n \n     /// Returns the number of binary digits of mantissa that this type supports.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MANTISSA_DIGITS` or \\\n                            `std::f64::MANTISSA_DIGITS` as appropriate\")]\n     fn mantissa_digits(unused_self: Option<Self>) -> uint;\n     /// Returns the number of base-10 digits of precision that this type supports.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::DIGITS` or `std::f64::DIGITS` as appropriate\")]\n     fn digits(unused_self: Option<Self>) -> uint;\n     /// Returns the difference between 1.0 and the smallest representable number larger than 1.0.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::EPSILON` or `std::f64::EPSILON` as appropriate\")]\n     fn epsilon() -> Self;\n     /// Returns the minimum binary exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` as appropriate\")]\n     fn min_exp(unused_self: Option<Self>) -> int;\n     /// Returns the maximum binary exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` as appropriate\")]\n     fn max_exp(unused_self: Option<Self>) -> int;\n     /// Returns the minimum base-10 exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` as appropriate\")]\n     fn min_10_exp(unused_self: Option<Self>) -> int;\n     /// Returns the maximum base-10 exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\")]\n     fn max_10_exp(unused_self: Option<Self>) -> int;\n     /// Returns the smallest finite value that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_VALUE` or `std::f64::MIN_VALUE` as appropriate\")]\n     fn min_value() -> Self;\n     /// Returns the smallest normalized positive number that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_POS_VALUE` or \\\n                            `std::f64::MIN_POS_VALUE` as appropriate\")]\n     fn min_pos_value(unused_self: Option<Self>) -> Self;\n     /// Returns the largest finite value that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"core\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_VALUE` or `std::f64::MAX_VALUE` as appropriate\")]\n     fn max_value() -> Self;\n "}, {"sha": "f66a0eed971612913bf5e7e0b1fa98cfbdbfeab4", "filename": "src/libcore/num/uint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -14,6 +14,7 @@\n //! alpha cycle along with the development of clearer conventions\n //! around integer types.\n \n-#![deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"replaced by usize\")]\n+#![unstable(feature = \"core\")]\n+#![deprecated(since = \"1.0.0\", reason = \"replaced by usize\")]\n \n uint_module! { uint, int, ::int::BITS }"}, {"sha": "d487d135df4810ffd839f8ceede4d0274e7a688a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -195,7 +195,8 @@ pub unsafe fn from_utf8_unchecked<'a>(v: &'a [u8]) -> &'a str {\n /// # Panics\n ///\n /// This function will panic if the string pointed to by `s` is not valid UTF-8.\n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+#[unstable(feature = \"core\")]\n+#[deprecated(since = \"1.0.0\",\n              reason = \"use std::ffi::c_str_to_bytes + str::from_utf8\")]\n pub unsafe fn from_c_str(s: *const i8) -> &'static str {\n     let s = s as *const u8;"}, {"sha": "f62ffccabcca2661679a2fc39ab82377e6a0c98e", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -93,6 +93,7 @@\n #![deny(missing_docs)]\n #![feature(collections)]\n #![feature(core)]\n+#![cfg_attr(test, feature(rustc_private))]\n \n #[cfg(test)] #[macro_use] extern crate log;\n \n@@ -541,7 +542,8 @@ pub fn opt(short_name: &str,\n \n impl Fail {\n     /// Convert a `Fail` enum into an error string.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"rustc_private\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `fmt::String` (`{}` format specifier)\")]\n     pub fn to_err_msg(self) -> String {\n         self.to_string()"}, {"sha": "4f21ce411eec2ab49710e23d7aaaa09130db2b93", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"use std::vec::CowVec\")]\n+#![unstable(feature = \"rustc_private\")]\n+#![deprecated(since = \"1.0.0\", reason = \"use std::vec::CowVec\")]\n \n pub use self::MaybeOwnedVector::*;\n "}, {"sha": "ee5df1d6d2f46015f05ee8559a822858c9c50b21", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -21,6 +21,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![cfg_attr(test, feature(test))]\n \n //! Bindings for the C standard library and other platform libraries\n //!"}, {"sha": "e73771649d5b8e5295fd26f8c07cfc951e7364b6", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -1637,7 +1637,7 @@ impl Stability {\n \n         // deprecated attributes apply in-crate and cross-crate\n         let (lint, label) = match *stability {\n-            Some(attr::Stability { level: attr::Deprecated, .. }) =>\n+            Some(attr::Stability { deprecated_since: Some(_), .. }) =>\n                 (DEPRECATED, \"deprecated\"),\n             _ => return\n         };"}, {"sha": "5c28e4c9d803a92ae2939189749b4f415fb1b2f7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -52,10 +52,10 @@ impl<'a> Annotator<'a> {\n     // Determine the stability for a node based on its attributes and inherited\n     // stability. The stability is recorded in the index and used as the parent.\n     fn annotate<F>(&mut self, id: NodeId, use_parent: bool,\n-                   attrs: &Vec<Attribute>, f: F) where\n+                   attrs: &Vec<Attribute>, item_sp: Span, f: F) where\n         F: FnOnce(&mut Annotator),\n     {\n-        match attr::find_stability(self.sess.diagnostic(), attrs.as_slice()) {\n+        match attr::find_stability(self.sess.diagnostic(), attrs.as_slice(), item_sp) {\n             Some(stab) => {\n                 self.index.local.insert(id, stab.clone());\n \n@@ -93,53 +93,54 @@ impl<'a, 'v> Visitor<'v> for Annotator<'a> {\n             _ => true,\n         };\n \n-        self.annotate(i.id, use_parent, &i.attrs, |v| visit::walk_item(v, i));\n+        self.annotate(i.id, use_parent, &i.attrs, i.span, |v| visit::walk_item(v, i));\n \n         if let ast::ItemStruct(ref sd, _) = i.node {\n             sd.ctor_id.map(|id| {\n-                self.annotate(id, true, &i.attrs, |_| {})\n+                self.annotate(id, true, &i.attrs, i.span, |_| {})\n             });\n         }\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'v>, _: &'v FnDecl,\n-                _: &'v Block, _: Span, _: NodeId) {\n+                _: &'v Block, sp: Span, _: NodeId) {\n         if let FkMethod(_, _, meth) = fk {\n             // Methods are not already annotated, so we annotate it\n-            self.annotate(meth.id, true, &meth.attrs, |_| {});\n+            self.annotate(meth.id, true, &meth.attrs, sp, |_| {});\n         }\n         // Items defined in a function body have no reason to have\n         // a stability attribute, so we don't recurse.\n     }\n \n     fn visit_trait_item(&mut self, t: &TraitItem) {\n-        let (id, attrs) = match *t {\n-            RequiredMethod(TypeMethod {id, ref attrs, ..}) => (id, attrs),\n+        let (id, attrs, sp) = match *t {\n+            RequiredMethod(TypeMethod {id, ref attrs, span, ..}) => (id, attrs, span),\n \n             // work around lack of pattern matching for @ types\n             ProvidedMethod(ref method) => {\n                 match **method {\n-                    Method {ref attrs, id, ..} => (id, attrs),\n+                    Method {ref attrs, id, span, ..} => (id, attrs, span),\n                 }\n             }\n \n-            TypeTraitItem(ref typedef) => (typedef.ty_param.id, &typedef.attrs),\n+            TypeTraitItem(ref typedef) => (typedef.ty_param.id, &typedef.attrs,\n+                                           typedef.ty_param.span),\n         };\n-        self.annotate(id, true, attrs, |v| visit::walk_trait_item(v, t));\n+        self.annotate(id, true, attrs, sp, |v| visit::walk_trait_item(v, t));\n     }\n \n     fn visit_variant(&mut self, var: &Variant, g: &'v Generics) {\n-        self.annotate(var.node.id, true, &var.node.attrs,\n+        self.annotate(var.node.id, true, &var.node.attrs, var.span,\n                       |v| visit::walk_variant(v, var, g))\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n-        self.annotate(s.node.id, true, &s.node.attrs,\n+        self.annotate(s.node.id, true, &s.node.attrs, s.span,\n                       |v| visit::walk_struct_field(v, s));\n     }\n \n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n-        self.annotate(i.id, true, &i.attrs, |_| {});\n+        self.annotate(i.id, true, &i.attrs, i.span, |_| {});\n     }\n }\n \n@@ -171,7 +172,7 @@ impl Index {\n             index: index,\n             parent: None\n         };\n-        annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs,\n+        annotator.annotate(ast::CRATE_NODE_ID, true, &krate.attrs, krate.span,\n                            |v| visit::walk_crate(v, krate));\n         annotator.index\n     }"}, {"sha": "bb026e237df82051b917b20a5b25ba9b1e596c1a", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -40,6 +40,7 @@\n #![feature(rustc_private)]\n #![feature(std_misc)]\n #![feature(unicode)]\n+#![feature(hash)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "255ce03c586f884aadcb012a535b8ca4767cb0d0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -765,9 +765,6 @@ impl fmt::String for ModuleSummary {\n             try!(write!(f, \"<span class='summary Unstable' \\\n                             style='width: {:.4}%; display: inline-block'>&nbsp</span>\",\n                         (100 * cnt.unstable) as f64/tot as f64));\n-            try!(write!(f, \"<span class='summary Deprecated' \\\n-                            style='width: {:.4}%; display: inline-block'>&nbsp</span>\",\n-                        (100 * cnt.deprecated) as f64/tot as f64));\n             try!(write!(f, \"<span class='summary Unmarked' \\\n                             style='width: {:.4}%; display: inline-block'>&nbsp</span>\",\n                         (100 * cnt.unmarked) as f64/tot as f64));\n@@ -783,12 +780,11 @@ impl fmt::String for ModuleSummary {\n         let mut context = Vec::new();\n \n         let tot = self.counts.total();\n-        let (stable, unstable, deprecated, unmarked) = if tot == 0 {\n-            (0, 0, 0, 0)\n+        let (stable, unstable, unmarked) = if tot == 0 {\n+            (0, 0, 0)\n         } else {\n             ((100 * self.counts.stable)/tot,\n              (100 * self.counts.unstable)/tot,\n-             (100 * self.counts.deprecated)/tot,\n              (100 * self.counts.unmarked)/tot)\n         };\n \n@@ -800,12 +796,11 @@ its children (percentages total for {name}):\n <blockquote>\n <a class='stability Stable'></a> stable ({}%),<br/>\n <a class='stability Unstable'></a> unstable ({}%),<br/>\n-<a class='stability Deprecated'></a> deprecated ({}%),<br/>\n <a class='stability Unmarked'></a> unmarked ({}%)\n </blockquote>\n The counts do not include methods or trait\n implementations that are visible only through a re-exported type.\",\n-stable, unstable, deprecated, unmarked,\n+stable, unstable, unmarked,\n name=self.name));\n         try!(write!(f, \"<table>\"));\n         try!(fmt_inner(f, &mut context, self));"}, {"sha": "9e6986d7846457b07bada323e3e4e9c32b1e601e", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -16,7 +16,7 @@\n use std::cmp::Ordering;\n use std::ops::Add;\n \n-use syntax::attr::{Deprecated, Unstable, Stable};\n+use syntax::attr::{Unstable, Stable};\n use syntax::ast::Public;\n \n use clean::{Crate, Item, ModuleItem, Module, EnumItem, Enum};\n@@ -29,7 +29,6 @@ use html::render::cache;\n /// The counts for each stability level.\n #[derive(Copy)]\n pub struct Counts {\n-    pub deprecated: uint,\n     pub unstable: uint,\n     pub stable: uint,\n \n@@ -42,7 +41,6 @@ impl Add for Counts {\n \n     fn add(self, other: Counts) -> Counts {\n         Counts {\n-            deprecated:   self.deprecated   + other.deprecated,\n             unstable:     self.unstable     + other.unstable,\n             stable:       self.stable       + other.stable,\n             unmarked:     self.unmarked     + other.unmarked,\n@@ -53,15 +51,14 @@ impl Add for Counts {\n impl Counts {\n     fn zero() -> Counts {\n         Counts {\n-            deprecated:   0,\n             unstable:     0,\n             stable:       0,\n             unmarked:     0,\n         }\n     }\n \n     pub fn total(&self) -> uint {\n-        self.deprecated + self.unstable + self.stable + self.unmarked\n+        self.unstable + self.stable + self.unmarked\n     }\n }\n \n@@ -96,11 +93,10 @@ fn visible(item: &Item) -> bool {\n \n fn count_stability(stab: Option<&Stability>) -> Counts {\n     match stab {\n-        None             => Counts { unmarked: 1,     .. Counts::zero() },\n+        None            => Counts { unmarked: 1,     .. Counts::zero() },\n         Some(ref stab) => match stab.level {\n-            Deprecated   => Counts { deprecated: 1,   .. Counts::zero() },\n-            Unstable     => Counts { unstable: 1,     .. Counts::zero() },\n-            Stable       => Counts { stable: 1,       .. Counts::zero() },\n+            Unstable    => Counts { unstable: 1,     .. Counts::zero() },\n+            Stable      => Counts { stable: 1,       .. Counts::zero() },\n         }\n     }\n }"}, {"sha": "c3e9815f22872d939a23194d1e4708f0c0c8c3bc", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -37,6 +37,7 @@ Core encoding and decoding interfaces.\n #![feature(rustc_private)]\n #![feature(std_misc)]\n #![feature(unicode)]\n+#![cfg_attr(test, feature(test))]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "bbc3f80dd86cb9e5c7fac980e135d40fd2f2b500", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -62,7 +62,8 @@ impl Writer for Vec<u8> {\n ///\n /// assert_eq!(w.into_inner(), vec!(0, 1, 2));\n /// ```\n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+#[unstable(feature = \"io\")]\n+#[deprecated(since = \"1.0.0\",\n              reason = \"use the Vec<u8> Writer implementation directly\")]\n #[derive(Clone)]\n pub struct MemWriter {"}, {"sha": "643e10f0f297f89888aad44658684eaf410d4b6d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -121,6 +121,7 @@\n #![feature(collections)]\n #![feature(rand)]\n #![feature(hash)]\n+#![cfg_attr(test, feature(test))]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "669952eee3924a8bb81e94cd953a16ca965cdc77", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -14,7 +14,8 @@\n //! alpha cycle along with the development of clearer conventions\n //! around integer types.\n \n-#![deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"replaced by isize\")]\n+#![unstable(feature = \"std_misc\")]\n+#![deprecated(since = \"1.0.0\", reason = \"replaced by isize\")]\n \n pub use core::int::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "78ccaeef7bc6cb836c92e632b01bf69496e70f40", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -79,32 +79,39 @@ pub trait Float\n     // FIXME (#5527): These should be associated constants\n \n     /// Returns the number of binary digits of mantissa that this type supports.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MANTISSA_DIGITS` or \\\n                            `std::f64::MANTISSA_DIGITS` as appropriate\")]\n     fn mantissa_digits(unused_self: Option<Self>) -> uint;\n     /// Returns the number of base-10 digits of precision that this type supports.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::DIGITS` or `std::f64::DIGITS` as appropriate\")]\n     fn digits(unused_self: Option<Self>) -> uint;\n     /// Returns the difference between 1.0 and the smallest representable number larger than 1.0.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::EPSILON` or `std::f64::EPSILON` as appropriate\")]\n     fn epsilon() -> Self;\n     /// Returns the minimum binary exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` as appropriate\")]\n     fn min_exp(unused_self: Option<Self>) -> int;\n     /// Returns the maximum binary exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` as appropriate\")]\n     fn max_exp(unused_self: Option<Self>) -> int;\n     /// Returns the minimum base-10 exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` as appropriate\")]\n     fn min_10_exp(unused_self: Option<Self>) -> int;\n     /// Returns the maximum base-10 exponent that this type can represent.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\")]\n     fn max_10_exp(unused_self: Option<Self>) -> int;\n "}, {"sha": "c7b491381f337abca0b65054bfdaa8b620469cd9", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -14,7 +14,8 @@\n //! alpha cycle along with the development of clearer conventions\n //! around integer types.\n \n-#![deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"replaced by usize\")]\n+#![unstable(feature = \"std_misc\")]\n+#![deprecated(since = \"1.0.0\", reason = \"replaced by usize\")]\n \n pub use core::uint::{BITS, BYTES, MIN, MAX};\n "}, {"sha": "f5cf44476527e3dfb5138bbfb06726e5113c3544", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -37,5 +37,4 @@\n \n #![stable(feature = \"grandfathered\", since = \"1.0.0\")]\n \n-#[stable(feature = \"grandfathered\", since = \"1.0.0\")]\n pub mod v1;"}, {"sha": "f5bb7a56d7722186d62e0d58aaa0e62b5827a9c2", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -105,7 +105,8 @@ impl<T> Error for PoisonError<T> {\n impl<T> PoisonError<T> {\n     /// Consumes this error indicating that a lock is poisoned, returning the\n     /// underlying guard to allow access regardless.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"renamed to into_inner\")]\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"renamed to into_inner\")]\n     pub fn into_guard(self) -> T { self.guard }\n \n     /// Consumes this error indicating that a lock is poisoned, returning the"}, {"sha": "bb8f73214d055b84b3c84285b91551d2576fe1d5", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -319,7 +319,8 @@ impl<T: 'static> Key<T> {\n     }\n \n     /// Deprecated\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"std_misc\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"function renamed to state() and returns more info\")]\n     pub fn destroyed(&'static self) -> bool { self.state() == State::Destroyed }\n }"}, {"sha": "d63370b41f58d53ab4f2014282eca1ed837613cb", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 74, "deletions": 26, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -351,13 +351,15 @@ pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: InternedString,\n     pub since: Option<InternedString>,\n+    pub deprecated_since: Option<InternedString>,\n+    // The reason for the current stability level. If deprecated, the\n+    // reason for deprecation.\n     pub reason: Option<InternedString>,\n }\n \n /// The available stability levels.\n #[derive(RustcEncodable,RustcDecodable,PartialEq,PartialOrd,Clone,Show,Copy)]\n pub enum StabilityLevel {\n-    Deprecated,\n     Unstable,\n     Stable,\n }\n@@ -368,18 +370,24 @@ impl fmt::String for StabilityLevel {\n     }\n }\n \n-pub fn find_stability_generic<'a,\n+fn find_stability_generic<'a,\n                               AM: AttrMetaMethods,\n                               I: Iterator<Item=&'a AM>>\n-                             (diagnostic: &SpanHandler, mut attrs: I)\n-                             -> Option<(Stability, &'a AM)> {\n-    for attr in attrs {\n-        let level = match attr.name().get() {\n-            \"deprecated\" => Deprecated,\n-            \"unstable\" => Unstable,\n-            \"stable\" => Stable,\n-            _ => continue // not a stability level\n-        };\n+                             (diagnostic: &SpanHandler, mut attrs: I, item_sp: Span)\n+                             -> (Option<Stability>, Vec<&'a AM>) {\n+\n+    let mut stab: Option<Stability> = None;\n+    let mut deprecated: Option<(InternedString, Option<InternedString>)> = None;\n+    let mut used_attrs: Vec<&'a AM> = vec![];\n+\n+    'outer: for attr in attrs {\n+        let tag = attr.name();\n+        let tag = tag.get();\n+        if tag != \"deprecated\" && tag != \"unstable\" && tag != \"stable\" {\n+            continue // not a stability level\n+        }\n+\n+        used_attrs.push(attr);\n \n         let (feature, since, reason) = match attr.meta_item_list() {\n             Some(metas) => {\n@@ -392,6 +400,7 @@ pub fn find_stability_generic<'a,\n                             Some(v) => feature = Some(v),\n                             None => {\n                                 diagnostic.span_err(meta.span, \"incorrect meta item\");\n+                                continue 'outer;\n                             }\n                         }\n                     }\n@@ -400,6 +409,7 @@ pub fn find_stability_generic<'a,\n                             Some(v) => since = Some(v),\n                             None => {\n                                 diagnostic.span_err(meta.span, \"incorrect meta item\");\n+                                continue 'outer;\n                             }\n                         }\n                     }\n@@ -408,6 +418,7 @@ pub fn find_stability_generic<'a,\n                             Some(v) => reason = Some(v),\n                             None => {\n                                 diagnostic.span_err(meta.span, \"incorrect meta item\");\n+                                continue 'outer;\n                             }\n                         }\n                     }\n@@ -416,34 +427,71 @@ pub fn find_stability_generic<'a,\n             }\n             None => {\n                 diagnostic.span_err(attr.span(), \"incorrect stability attribute type\");\n-                (None, None, None)\n+                continue\n             }\n         };\n \n-        if feature == None {\n+        // Deprecated tags don't require feature names\n+        if feature == None && tag != \"deprecated\" {\n             diagnostic.span_err(attr.span(), \"missing 'feature'\");\n         }\n \n-        if since == None && level != Unstable {\n+        // Unstable tags don't require a version\n+        if since == None && tag != \"unstable\" {\n             diagnostic.span_err(attr.span(), \"missing 'since'\");\n         }\n \n-        return Some((Stability {\n-            level: level,\n-            feature: feature.unwrap_or(intern_and_get_ident(\"bogus\")),\n-            since: since,\n-            reason: reason,\n-        }, attr));\n+        if tag == \"unstable\" || tag == \"stable\" {\n+            if stab.is_some() {\n+                diagnostic.span_err(item_sp, \"multiple stability levels\");\n+            }\n+\n+            let level = match tag {\n+                \"unstable\" => Unstable,\n+                \"stable\" => Stable,\n+                _ => unreachable!()\n+            };\n+\n+            stab = Some(Stability {\n+                level: level,\n+                feature: feature.unwrap_or(intern_and_get_ident(\"bogus\")),\n+                since: since,\n+                deprecated_since: None,\n+                reason: reason\n+            });\n+        } else { // \"deprecated\"\n+            if deprecated.is_some() {\n+                diagnostic.span_err(item_sp, \"multiple deprecated attributes\");\n+            }\n+\n+            deprecated = Some((since.unwrap_or(intern_and_get_ident(\"bogus\")), reason));\n+        }\n+    }\n+\n+    // Merge the deprecation info into the stability info\n+    if deprecated.is_some() {\n+        match stab {\n+            Some(ref mut s) => {\n+                let (since, reason) = deprecated.unwrap();\n+                s.deprecated_since = Some(since);\n+                s.reason = reason;\n+            }\n+            None => {\n+                diagnostic.span_err(item_sp, \"deprecated attribute must be paired with \\\n+                                              either stable or unstable attribute\");\n+            }\n+        }\n     }\n-    None\n+\n+    (stab, used_attrs)\n }\n \n /// Find the first stability attribute. `None` if none exists.\n-pub fn find_stability(diagnostic: &SpanHandler, attrs: &[Attribute]) -> Option<Stability> {\n-    find_stability_generic(diagnostic, attrs.iter()).map(|(s, attr)| {\n-        mark_used(attr);\n-        s\n-    })\n+pub fn find_stability(diagnostic: &SpanHandler, attrs: &[Attribute],\n+                      item_sp: Span) -> Option<Stability> {\n+    let (s, used) = find_stability_generic(diagnostic, attrs.iter(), item_sp);\n+    for used in used.into_iter() { mark_used(used) }\n+    return s;\n }\n \n pub fn require_unique_names(diagnostic: &SpanHandler, metas: &[P<MetaItem>]) {"}, {"sha": "bca7131fdb719ff7d7ad160e6c85ef18ab1483dc", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -568,7 +568,8 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\",\n+    #[unstable(feature = \"rustc_private\")]\n+    #[deprecated(since = \"1.0.0\",\n                  reason = \"Replaced with `expander().fold_expr()`\")]\n     pub fn expand_expr(&mut self, e: P<ast::Expr>) -> P<ast::Expr> {\n         self.expander().fold_expr(e)"}, {"sha": "22f2fb36fc88a8bc4026d71488007e7a5d5fc775", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -112,7 +112,8 @@ impl<T> SmallVector<T> {\n     }\n \n     /// Deprecated: use `into_iter`.\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"use into_iter\")]\n+    #[unstable(feature = \"rustc_private\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"use into_iter\")]\n     pub fn move_iter(self) -> IntoIter<T> {\n         self.into_iter()\n     }"}, {"sha": "bb2a5d796c250e41366cb085295a56fb17a33b86", "filename": "src/test/auxiliary/inherited_stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finherited_stability.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -28,7 +28,8 @@ pub mod stable_mod {\n \n #[unstable(feature = \"test_feature\")]\n pub mod unstable_mod {\n-    #[deprecated(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.0.0\")]\n     pub fn deprecated() {}\n \n     pub fn unstable() {}"}, {"sha": "1977e2aad285e902350eb498f1c632fdd8748cf2", "filename": "src/test/auxiliary/lint_output_format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_output_format.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -14,7 +14,8 @@\n #![staged_api]\n #![unstable(feature = \"test_feature\")]\n \n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\")]\n pub fn foo() -> uint {\n     20\n }"}, {"sha": "f534d4bbb7e658294e310fc252e49d9f2a6884c5", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -12,11 +12,20 @@\n #![feature(staged_api)]\n #![staged_api]\n \n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\")]\n pub fn deprecated() {}\n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"text\")]\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_text() {}\n \n+#[unstable(feature = \"test_feature\")]\n+#[deprecated(since = \"1.0.0\")]\n+pub fn deprecated_unstable() {}\n+#[unstable(feature = \"test_feature\")]\n+#[deprecated(since = \"1.0.0\", reason = \"text\")]\n+pub fn deprecated_unstable_text() {}\n+\n #[unstable(feature = \"test_feature\")]\n pub fn unstable() {}\n #[unstable(feature = \"test_feature\", reason = \"text\")]\n@@ -33,11 +42,20 @@ pub fn stable_text() {}\n pub struct MethodTester;\n \n impl MethodTester {\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.0.0\")]\n     pub fn method_deprecated(&self) {}\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"text\")]\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n+    pub fn method_deprecated_unstable(&self) {}\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    pub fn method_deprecated_unstable_text(&self) {}\n+\n     #[unstable(feature = \"test_feature\")]\n     pub fn method_unstable(&self) {}\n     #[unstable(feature = \"test_feature\", reason = \"text\")]\n@@ -62,11 +80,20 @@ impl MethodTester {\n }\n \n pub trait Trait {\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn trait_deprecated(&self) {}\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"text\")]\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n+    fn trait_deprecated_unstable(&self) {}\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n+    fn trait_deprecated_unstable_text(&self) {}\n+\n     #[unstable(feature = \"test_feature\")]\n     fn trait_unstable(&self) {}\n     #[unstable(feature = \"test_feature\", reason = \"text\")]\n@@ -95,36 +122,52 @@ impl Trait for MethodTester {}\n #[unstable(feature = \"test_feature\")]\n pub trait UnstableTrait {}\n \n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedStruct { pub i: int }\n #[unstable(feature = \"test_feature\")]\n+#[deprecated(since = \"1.0.0\")]\n+pub struct DeprecatedUnstableStruct { pub i: int }\n+#[unstable(feature = \"test_feature\")]\n pub struct UnstableStruct { pub i: int }\n pub struct UnmarkedStruct { pub i: int }\n #[stable(feature = \"grandfathered\", since = \"1.0.0\")]\n pub struct StableStruct { pub i: int }\n \n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedUnitStruct;\n #[unstable(feature = \"test_feature\")]\n+#[deprecated(since = \"1.0.0\")]\n+pub struct DeprecatedUnstableUnitStruct;\n+#[unstable(feature = \"test_feature\")]\n pub struct UnstableUnitStruct;\n pub struct UnmarkedUnitStruct;\n #[stable(feature = \"grandfathered\", since = \"1.0.0\")]\n pub struct StableUnitStruct;\n \n pub enum Enum {\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.0.0\")]\n     DeprecatedVariant,\n     #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n+    DeprecatedUnstableVariant,\n+    #[unstable(feature = \"test_feature\")]\n     UnstableVariant,\n \n     UnmarkedVariant,\n     #[stable(feature = \"grandfathered\", since = \"1.0.0\")]\n     StableVariant,\n }\n \n-#[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+#[stable(feature = \"test_feature\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.0.0\")]\n pub struct DeprecatedTupleStruct(pub int);\n #[unstable(feature = \"test_feature\")]\n+#[deprecated(since = \"1.0.0\")]\n+pub struct DeprecatedUnstableTupleStruct(pub int);\n+#[unstable(feature = \"test_feature\")]\n pub struct UnstableTupleStruct(pub int);\n pub struct UnmarkedTupleStruct(pub int);\n #[stable(feature = \"grandfathered\", since = \"1.0.0\")]"}, {"sha": "ff640793afe01f314662a9a26310baad8505fdc4", "filename": "src/test/compile-fail/issue-17337.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17337.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -15,7 +15,8 @@\n struct Foo;\n \n impl Foo {\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn foo(self) {}\n }\n "}, {"sha": "1d5399b93f90f9e081dd1746d766d155f91ad899", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 58, "deletions": 13, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -39,6 +39,20 @@ mod cross_crate {\n         foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n \n+        deprecated_unstable(); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        foo.method_deprecated_unstable(); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+\n+        deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+        foo.method_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n+\n         unstable(); //~ WARNING use of unstable library feature\n         foo.method_unstable(); //~ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n@@ -60,21 +74,29 @@ mod cross_crate {\n         foo.trait_stable_text();\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnstableStruct { i: 0 }; //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n         let _ = UnstableStruct { i: 0 }; //~ WARNING use of unstable library feature\n         let _ = UnmarkedStruct { i: 0 }; //~ ERROR use of unmarked library feature\n         let _ = StableStruct { i: 0 };\n \n         let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnstableUnitStruct; //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n         let _ = UnstableUnitStruct; //~ WARNING use of unstable library feature\n         let _ = UnmarkedUnitStruct; //~ ERROR use of unmarked library feature\n         let _ = StableUnitStruct;\n \n         let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n+        let _ = Enum::DeprecatedUnstableVariant; //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n         let _ = Enum::UnstableVariant; //~ WARNING use of unstable library feature\n         let _ = Enum::UnmarkedVariant; //~ ERROR use of unmarked library feature\n         let _ = Enum::StableVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n+        let _ = DeprecatedUnstableTupleStruct (1); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n         let _ = UnstableTupleStruct (1); //~ WARNING use of unstable library feature\n         let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked library feature\n         let _ = StableTupleStruct (1);\n@@ -86,13 +108,19 @@ mod cross_crate {\n         // on macros themselves are not yet linted.\n         macro_test!();\n         macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item: text\n+        macro_test_arg!(deprecated_unstable_text()); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n         macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n         macro_test_arg_nested!(deprecated_text);\n     }\n \n     fn test_method_param<F: Trait>(foo: F) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n         foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n         foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n@@ -102,6 +130,10 @@ mod cross_crate {\n     fn test_method_object(foo: &Trait) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_unstable(); //~ ERROR use of deprecated item\n+        //~^ WARNING use of unstable library feature\n+        foo.trait_deprecated_unstable_text(); //~ ERROR use of deprecated item: text\n+        //~^ WARNING use of unstable library feature\n         foo.trait_unstable(); //~ WARNING use of unstable library feature\n         foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'test_feature': text\n         foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n@@ -139,9 +171,11 @@ mod inheritance {\n }\n \n mod this_crate {\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n     pub fn deprecated() {}\n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"text\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n     #[unstable(feature = \"test_feature\")]\n@@ -160,9 +194,11 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+        #[unstable(feature = \"test_feature\")]\n+        #[deprecated(since = \"1.0.0\")]\n         pub fn method_deprecated(&self) {}\n-        #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"text\")]\n+        #[unstable(feature = \"test_feature\")]\n+        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n         #[unstable(feature = \"test_feature\")]\n@@ -179,9 +215,11 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+        #[unstable(feature = \"test_feature\")]\n+        #[deprecated(since = \"1.0.0\")]\n         fn trait_deprecated(&self) {}\n-        #[deprecated(feature = \"oldstuff\", since = \"1.0.0\", reason = \"text\")]\n+        #[unstable(feature = \"test_feature\")]\n+        #[deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n         #[unstable(feature = \"test_feature\")]\n@@ -199,15 +237,17 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n     pub struct DeprecatedStruct { i: isize }\n     #[unstable(feature = \"test_feature\")]\n     pub struct UnstableStruct { i: isize }\n     pub struct UnmarkedStruct { i: isize }\n     #[stable(feature = \"grandfathered\", since = \"1.0.0\")]\n     pub struct StableStruct { i: isize }\n \n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n     pub struct DeprecatedUnitStruct;\n     #[unstable(feature = \"test_feature\")]\n     pub struct UnstableUnitStruct;\n@@ -216,7 +256,8 @@ mod this_crate {\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+        #[unstable(feature = \"test_feature\")]\n+        #[deprecated(since = \"1.0.0\")]\n         DeprecatedVariant,\n         #[unstable(feature = \"test_feature\")]\n         UnstableVariant,\n@@ -226,7 +267,8 @@ mod this_crate {\n         StableVariant,\n     }\n \n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n     pub struct DeprecatedTupleStruct(isize);\n     #[unstable(feature = \"test_feature\")]\n     pub struct UnstableTupleStruct(isize);\n@@ -308,21 +350,24 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n-        #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+        #[unstable(feature = \"test_feature\")]\n+        #[deprecated(since = \"1.0.0\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n-    #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n+    #[unstable(feature = \"test_feature\")]\n+    #[deprecated(since = \"1.0.0\")]\n     pub trait DeprecatedTrait {}\n \n     struct S;"}, {"sha": "dcbb1880b1089da7de0a85b896226e9cb8963962", "filename": "src/test/compile-fail/stability-attribute-sanity.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758c488a94e77cc8a110a6783a99cf5b91326db/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs?ref=9758c488a94e77cc8a110a6783a99cf5b91326db", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various checks that stability attributes are used correctly, per RFC 507\n+\n+#![feature(staged_api)]\n+#![staged_api]\n+\n+mod bogus_attribute_types_1 {\n+    #[stable(feature = \"a\", since = \"a\", reason)] //~ ERROR incorrect meta item\n+    fn f1() { }\n+\n+    #[stable(feature = \"a\", since, reason = \"a\")] //~ ERROR incorrect meta item\n+    fn f2() { }\n+\n+    #[stable(feature, since = \"a\", reason = \"a\")] //~ ERROR incorrect meta item\n+    fn f3() { }\n+\n+    #[stable(feature = \"a\", since = \"a\", reason(b))] //~ ERROR incorrect meta item\n+    fn f4() { }\n+\n+    #[stable(feature = \"a\", since(b), reason = \"a\")] //~ ERROR incorrect meta item\n+    fn f5() { }\n+\n+    #[stable(feature(b), since = \"a\", reason = \"a\")] //~ ERROR incorrect meta item\n+    fn f6() { }\n+}\n+\n+mod bogus_attribute_types_2 {\n+    #[unstable] //~ ERROR incorrect stability attribute type\n+    fn f1() { }\n+\n+    #[unstable = \"a\"] //~ ERROR incorrect stability attribute type\n+    fn f2() { }\n+\n+    #[stable] //~ ERROR incorrect stability attribute type\n+    fn f3() { }\n+\n+    #[stable = \"a\"] //~ ERROR incorrect stability attribute type\n+    fn f4() { }\n+\n+    #[stable(feature = \"a\", since = \"b\")]\n+    #[deprecated] //~ ERROR incorrect stability attribute type\n+    fn f5() { }\n+\n+    #[stable(feature = \"a\", since = \"b\")]\n+    #[deprecated = \"a\"] //~ ERROR incorrect stability attribute type\n+    fn f6() { }\n+}\n+\n+mod missing_feature_names {\n+    #[unstable(since = \"a\")] //~ ERROR missing 'feature'\n+    fn f1() { }\n+\n+    #[stable(since = \"a\")] //~ ERROR missing 'feature'\n+    fn f2() { }\n+}\n+\n+mod missing_version {\n+    #[stable(feature = \"a\")] //~ ERROR missing 'since'\n+    fn f1() { }\n+\n+    #[stable(feature = \"a\", since = \"b\")]\n+    #[deprecated(reason = \"a\")] //~ ERROR missing 'since'\n+    fn f2() { }\n+}\n+\n+#[unstable(feature = \"a\", since = \"b\")]\n+#[stable(feature = \"a\", since = \"b\")]\n+fn multiple1() { } //~ ERROR multiple stability levels\n+\n+#[unstable(feature = \"a\", since = \"b\")]\n+#[unstable(feature = \"a\", since = \"b\")]\n+fn multiple2() { } //~ ERROR multiple stability levels\n+\n+#[stable(feature = \"a\", since = \"b\")]\n+#[stable(feature = \"a\", since = \"b\")]\n+fn multiple3() { } //~ ERROR multiple stability levels\n+\n+#[stable(feature = \"a\", since = \"b\")]\n+#[deprecated(since = \"b\")]\n+#[deprecated(since = \"b\")]\n+fn multiple4() { } //~ ERROR multiple deprecated attributes\n+\n+#[deprecated(since = \"a\")]\n+fn deprecated_without_unstable_or_stable() { } //~ ERROR deprecated attribute must be paired\n+\n+fn main() { }"}]}