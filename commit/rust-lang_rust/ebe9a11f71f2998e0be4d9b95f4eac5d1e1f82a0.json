{"sha": "ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "node_id": "C_kwDOAAsO6NoAKGViZTlhMTFmNzFmMjk5OGUwYmU0ZDliOTVmNGVhYzVkMWUxZjgyYTA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-29T03:55:02Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-30T18:16:24Z"}, "message": "rustdoc: Remove `Crate.name` and instead compute it on-demand\n\nIt is not as large as `Crate.src` was, but it's still 8 bytes, and\n`clean::Crate` is moved by-value a lot.", "tree": {"sha": "d1c502e2e8b21149a426315976348c8324c84369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c502e2e8b21149a426315976348c8324c84369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "html_url": "https://github.com/rust-lang/rust/commit/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f8ae8ec49683df08a598b0f2594dd066f24a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f8ae8ec49683df08a598b0f2594dd066f24a11", "html_url": "https://github.com/rust-lang/rust/commit/85f8ae8ec49683df08a598b0f2594dd066f24a11"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "88fffaecb937baadca06e723664f2f48388c923a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "patch": "@@ -116,7 +116,6 @@ impl From<DefId> for ItemId {\n /// The crate currently being documented.\n #[derive(Clone, Debug)]\n crate struct Crate {\n-    crate name: Symbol,\n     crate module: Item,\n     crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n@@ -130,6 +129,10 @@ crate struct Crate {\n rustc_data_structures::static_assert_size!(Crate, 104);\n \n impl Crate {\n+    crate fn name(&self, tcx: TyCtxt<'_>) -> Symbol {\n+        ExternalCrate::LOCAL.name(tcx)\n+    }\n+\n     crate fn src(&self, tcx: TyCtxt<'_>) -> FileName {\n         ExternalCrate::LOCAL.src(tcx)\n     }"}, {"sha": "b0da92081c1a69d57e9efea93a715fcb0af189b6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "patch": "@@ -57,7 +57,6 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     }\n \n     let local_crate = ExternalCrate { crate_num: LOCAL_CRATE };\n-    let name = local_crate.name(cx.tcx);\n     let primitives = local_crate.primitives(cx.tcx);\n     let keywords = local_crate.keywords(cx.tcx);\n     {\n@@ -79,7 +78,6 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     }\n \n     Crate {\n-        name,\n         module,\n         externs,\n         primitives,"}, {"sha": "7a6d70e8fbcb8a886fe08bd1d488d95c7b0d9a69", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "patch": "@@ -172,7 +172,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n     // Collect the index into a string\n     format!(\n         r#\"\"{}\":{}\"#,\n-        krate.name,\n+        krate.name(tcx),\n         serde_json::to_string(&CrateData {\n             doc: crate_doc,\n             items: crate_items,"}, {"sha": "e4c759a5705875a05f415ceddc79bef40a6273d5", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "patch": "@@ -416,14 +416,14 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         let mut playground = None;\n         if let Some(url) = playground_url {\n             playground =\n-                Some(markdown::Playground { crate_name: Some(krate.name.to_string()), url });\n+                Some(markdown::Playground { crate_name: Some(krate.name(tcx).to_string()), url });\n         }\n         let mut layout = layout::Layout {\n             logo: String::new(),\n             favicon: String::new(),\n             external_html,\n             default_settings,\n-            krate: krate.name.to_string(),\n+            krate: krate.name(tcx).to_string(),\n             css_file_extension: extension_css,\n             generate_search_filter,\n             scrape_examples_extension: !call_locations.is_empty(),\n@@ -444,7 +444,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                 }\n                 (sym::html_playground_url, Some(s)) => {\n                     playground = Some(markdown::Playground {\n-                        crate_name: Some(krate.name.to_string()),\n+                        crate_name: Some(krate.name(tcx).to_string()),\n                         url: s.to_string(),\n                     });\n                 }"}, {"sha": "08f4435c45c4be2a039aaa2180e2995c2bf8bc64", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "patch": "@@ -455,10 +455,10 @@ pub(super) fn write_shared(\n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n         let make_sources = || {\n             let (mut all_sources, _krates) =\n-                try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n+                try_err!(collect(&dst, &krate.name(cx.tcx()).as_str(), \"sourcesIndex\"), &dst);\n             all_sources.push(format!(\n                 \"sourcesIndex[\\\"{}\\\"] = {};\",\n-                &krate.name,\n+                &krate.name(cx.tcx()),\n                 hierarchy.to_json_string()\n             ));\n             all_sources.sort();\n@@ -473,9 +473,10 @@ pub(super) fn write_shared(\n \n     // Update the search index and crate list.\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n-    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name.as_str()), &dst);\n+    let (mut all_indexes, mut krates) =\n+        try_err!(collect_json(&dst, &krate.name(cx.tcx()).as_str()), &dst);\n     all_indexes.push(search_index);\n-    krates.push(krate.name.to_string());\n+    krates.push(krate.name(cx.tcx()).to_string());\n     krates.sort();\n \n     // Sort the indexes by crate so the file will be generated identically even\n@@ -599,7 +600,7 @@ pub(super) fn write_shared(\n \n         let implementors = format!(\n             r#\"implementors[\"{}\"] = {};\"#,\n-            krate.name,\n+            krate.name(cx.tcx()),\n             serde_json::to_string(&implementors).unwrap()\n         );\n \n@@ -611,7 +612,7 @@ pub(super) fn write_shared(\n         mydst.push(&format!(\"{}.{}.js\", remote_item_type, remote_path[remote_path.len() - 1]));\n \n         let (mut all_implementors, _) =\n-            try_err!(collect(&mydst, &krate.name.as_str(), \"implementors\"), &mydst);\n+            try_err!(collect(&mydst, &krate.name(cx.tcx()).as_str(), \"implementors\"), &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel."}, {"sha": "9422f84f99775ce270269a885462b4c0cfcb475a", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=ebe9a11f71f2998e0be4d9b95f4eac5d1e1f82a0", "patch": "@@ -18,7 +18,7 @@ use std::path::{Component, Path, PathBuf};\n \n crate fn render(cx: &mut Context<'_>, krate: clean::Crate) -> Result<clean::Crate, Error> {\n     info!(\"emitting source files\");\n-    let dst = cx.dst.join(\"src\").join(&*krate.name.as_str());\n+    let dst = cx.dst.join(\"src\").join(&*krate.name(cx.tcx()).as_str());\n     cx.shared.ensure_dir(&dst)?;\n     let mut folder = SourceCollector { dst, cx, emitted_local_sources: FxHashSet::default() };\n     Ok(folder.fold_crate(krate))"}]}