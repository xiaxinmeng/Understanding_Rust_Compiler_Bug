{"sha": "cb343c33acf0f9833d8d6eb637234acf4321976b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMzQzYzMzYWNmMGY5ODMzZDhkNmViNjM3MjM0YWNmNDMyMTk3NmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-23T07:49:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-26T17:29:28Z"}, "message": "Fix warnings during tests\n\nThe deny(warnings) attribute is now enabled for tests so we need to weed out\nthese warnings as well.", "tree": {"sha": "e8f94b5bd4fac82b36d1ea8efa37e8690e8229eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f94b5bd4fac82b36d1ea8efa37e8690e8229eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb343c33acf0f9833d8d6eb637234acf4321976b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb343c33acf0f9833d8d6eb637234acf4321976b", "html_url": "https://github.com/rust-lang/rust/commit/cb343c33acf0f9833d8d6eb637234acf4321976b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb343c33acf0f9833d8d6eb637234acf4321976b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b3c35509b7bd75c0b4712bb45440955d997ae75", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3c35509b7bd75c0b4712bb45440955d997ae75", "html_url": "https://github.com/rust-lang/rust/commit/4b3c35509b7bd75c0b4712bb45440955d997ae75"}], "stats": {"total": 278, "additions": 137, "deletions": 141}, "files": [{"sha": "120301afa449f910f2201e5ec16ed2f07bb65a39", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -15,7 +15,6 @@ use core::ops::Deref;\n use core::result::Result::{Ok, Err};\n use core::clone::Clone;\n \n-use std::boxed;\n use std::boxed::Box;\n \n #[test]"}, {"sha": "1438103d7f6d4ef2566b47c9b0422dd0f3ed7515", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -75,31 +75,28 @@\n #![feature(allocator)]\n #![feature(box_syntax)]\n #![feature(coerce_unsized)]\n+#![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n+#![feature(drop_in_place)]\n+#![feature(dropck_parametricity)]\n #![feature(fundamental)]\n #![feature(lang_items)]\n+#![feature(needs_allocator)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n-#![feature(placement_new_protocol)]\n-#![feature(raw)]\n #![feature(shared)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n-#![feature(dropck_parametricity)]\n #![feature(unsize)]\n-#![feature(drop_in_place)]\n-#![feature(fn_traits)]\n-#![feature(const_fn)]\n-\n-#![feature(needs_allocator)]\n \n // Issue# 30592: Systematically use alloc_system during stage0 since jemalloc\n // might be unavailable or disabled\n #![cfg_attr(stage0, feature(alloc_system))]\n \n+#![cfg_attr(not(test), feature(raw, fn_traits, placement_new_protocol))]\n #![cfg_attr(test, feature(test, rustc_private, box_heap))]\n \n #[cfg(stage0)]"}, {"sha": "4958f75016651c647a47d0052c91c961e391416e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -56,7 +56,7 @@\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag)]\n-#![cfg_attr(test, feature(clone_from_slice, rand, test))]\n+#![cfg_attr(test, feature(rand, test))]\n \n #![no_std]\n "}, {"sha": "6252e4888eb3ca71f6d37e9e2a9df764d443607b", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -83,20 +83,14 @@\n \n // Many of the usings in this module are only used in the test configuration.\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n-#![allow(unused_imports)]\n+#![cfg_attr(test, allow(unused_imports, dead_code))]\n \n use alloc::boxed::Box;\n-use core::clone::Clone;\n use core::cmp::Ordering::{self, Greater, Less};\n-use core::cmp::{self, Ord, PartialEq};\n-use core::iter::Iterator;\n-use core::marker::Sized;\n+use core::cmp;\n use core::mem::size_of;\n use core::mem;\n-use core::ops::FnMut;\n-use core::option::Option::{self, Some, None};\n use core::ptr;\n-use core::result::Result;\n use core::slice as core_slice;\n \n use borrow::{Borrow, BorrowMut, ToOwned};\n@@ -136,12 +130,7 @@ pub use self::hack::to_vec;\n // `test_permutations` test\n mod hack {\n     use alloc::boxed::Box;\n-    use core::clone::Clone;\n-    #[cfg(test)]\n-    use core::iter::Iterator;\n     use core::mem;\n-    #[cfg(test)]\n-    use core::option::Option::{Some, None};\n \n     #[cfg(test)]\n     use string::ToString;"}, {"sha": "094b7f1d034536494d7e8554f22886582451306c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -19,10 +19,6 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![allow(unused_imports)]\n \n-use core::clone::Clone;\n-use core::iter::{Iterator, Extend};\n-use core::option::Option::{self, Some, None};\n-use core::result::Result;\n use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};"}, {"sha": "e5e15025625b5e23847f516bfa10d8a2d9ed23c5", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::default::Default;\n use std::mem;\n use std::__rand::{Rng, thread_rng};\n use std::rc::Rc;"}, {"sha": "531be63b7bb73468615480b4f3b75a5bb12a0bed", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -36,7 +36,7 @@\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n \n-#![cfg_attr(test, feature(test, rand, rustc_private, iter_order_deprecated))]\n+#![cfg_attr(test, feature(test, rand, rustc_private))]\n \n #![allow(deprecated)]\n "}, {"sha": "2310a8237f4262649f4869de008ba855212f0fa0", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -2606,7 +2606,6 @@ impl FromStr for Json {\n mod tests {\n     extern crate test;\n     use self::Animal::*;\n-    use self::DecodeEnum::*;\n     use self::test::Bencher;\n     use {Encodable, Decodable};\n     use super::Json::*;"}, {"sha": "585051a98e5f7db7047af818a5ecfc5c8a37ef63", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -16,7 +16,6 @@\n             reason = \"API has not been scrutinized and is highly likely to \\\n                       either disappear or change\",\n             issue = \"27810\")]\n-#![rustc_deprecated(since = \"1.5.0\", reason = \"replaced with 'dylib' on crates.io\")]\n #![allow(missing_docs)]\n #![allow(deprecated)]\n \n@@ -26,6 +25,11 @@ use env;\n use ffi::{CString, OsString};\n use path::{Path, PathBuf};\n \n+#[unstable(feature = \"dynamic_lib\",\n+           reason = \"API has not been scrutinized and is highly likely to \\\n+                     either disappear or change\",\n+           issue = \"27810\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"replaced with 'dylib' on crates.io\")]\n pub struct DynamicLibrary {\n     handle: *mut u8\n }\n@@ -43,6 +47,11 @@ impl Drop for DynamicLibrary {\n     }\n }\n \n+#[unstable(feature = \"dynamic_lib\",\n+           reason = \"API has not been scrutinized and is highly likely to \\\n+                     either disappear or change\",\n+           issue = \"27810\")]\n+#[rustc_deprecated(since = \"1.5.0\", reason = \"replaced with 'dylib' on crates.io\")]\n impl DynamicLibrary {\n     /// Lazily open a dynamic library. When passed None it gives a\n     /// handle to the calling process\n@@ -126,7 +135,6 @@ mod tests {\n     use prelude::v1::*;\n     use libc;\n     use mem;\n-    use path::Path;\n \n     #[test]\n     #[cfg_attr(any(windows,\n@@ -167,6 +175,8 @@ mod tests {\n               target_os = \"openbsd\"))]\n     #[allow(deprecated)]\n     fn test_errors_do_not_crash() {\n+        use path::Path;\n+\n         // Open /dev/null as a library to get an error, and make sure\n         // that only causes an error, and not a crash.\n         let path = Path::new(\"/dev/null\");"}, {"sha": "ccebf3682c217c2683dc2a6450566d59915cc531", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -1095,8 +1095,8 @@ mod tests {\n \n         thread::spawn(|| {\n             let mut writer = BufWriter::new(PanicWriter);\n-            writer.write(b\"hello world\");\n-            writer.flush();\n+            let _ = writer.write(b\"hello world\");\n+            let _ = writer.flush();\n         }).join().err().unwrap();\n \n         assert_eq!(WRITES.load(Ordering::SeqCst), 1);"}, {"sha": "31d889fd422b75e54753870efbe09d9ab9677070", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -68,6 +68,7 @@ pub enum c_void {\n }\n \n #[cfg(test)]\n+#[allow(unused_imports)]\n mod tests {\n     use any::TypeId;\n     use libc;"}, {"sha": "207c4d02e481703b52de58f74db2e29a87141b1a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -3326,11 +3326,13 @@ mod tests {\n                          \"{:?}.ends_with({:?}), expected {:?}, got {:?}\", $path1, $path2,\n                          $ends_with, ends_with);\n \n-                 let relative_from = path1.relative_from(path2).map(|p| p.to_str().unwrap());\n+                 let relative_from = path1.strip_prefix(path2)\n+                                          .map(|p| p.to_str().unwrap())\n+                                          .ok();\n                  let exp: Option<&str> = $relative_from;\n                  assert!(relative_from == exp,\n-                         \"{:?}.relative_from({:?}), expected {:?}, got {:?}\", $path1, $path2,\n-                         exp, relative_from);\n+                         \"{:?}.strip_prefix({:?}), expected {:?}, got {:?}\",\n+                         $path1, $path2, exp, relative_from);\n             });\n         );\n "}, {"sha": "7197dfa8b2d47986da6d26ba21f3b7e8a1e10eb2", "filename": "src/libstd/process.rs", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -618,26 +618,26 @@ mod tests {\n \n     // FIXME(#10380) these tests should not all be ignored on android.\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn smoke() {\n         let p = Command::new(\"true\").spawn();\n         assert!(p.is_ok());\n         let mut p = p.unwrap();\n         assert!(p.wait().unwrap().success());\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn smoke_failure() {\n         match Command::new(\"if-this-is-a-binary-then-the-world-has-ended\").spawn() {\n             Ok(..) => panic!(),\n             Err(..) => {}\n         }\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn exit_reported_right() {\n         let p = Command::new(\"false\").spawn();\n         assert!(p.is_ok());\n@@ -646,8 +646,9 @@ mod tests {\n         drop(p.wait());\n     }\n \n-    #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n+    #[cfg(unix)]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn signal_reported_right() {\n         use os::unix::process::ExitStatusExt;\n \n@@ -674,16 +675,16 @@ mod tests {\n         return ret;\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn stdout_works() {\n         let mut cmd = Command::new(\"echo\");\n         cmd.arg(\"foobar\").stdout(Stdio::piped());\n         assert_eq!(run_output(cmd), \"foobar\\n\");\n     }\n \n-    #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n+    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n     fn set_current_dir_works() {\n         let mut cmd = Command::new(\"/bin/sh\");\n         cmd.arg(\"-c\").arg(\"pwd\")\n@@ -692,8 +693,8 @@ mod tests {\n         assert_eq!(run_output(cmd), \"/\\n\");\n     }\n \n-    #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n+    #[cfg_attr(any(windows, target_os = \"android\"), ignore)]\n     fn stdin_works() {\n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"read line; echo $line\")\n@@ -709,8 +710,9 @@ mod tests {\n     }\n \n \n-    #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg(unix)]\n     fn uid_works() {\n         use os::unix::prelude::*;\n         use libc;\n@@ -722,8 +724,9 @@ mod tests {\n         assert!(p.wait().unwrap().success());\n     }\n \n-    #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n+    #[cfg(unix)]\n     fn uid_to_root_fails() {\n         use os::unix::prelude::*;\n         use libc;\n@@ -734,8 +737,8 @@ mod tests {\n         assert!(Command::new(\"/bin/ls\").uid(0).gid(0).spawn().is_err());\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_status() {\n         let mut status = Command::new(\"false\").status().unwrap();\n         assert!(status.code() == Some(1));\n@@ -752,8 +755,8 @@ mod tests {\n         }\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_output_output() {\n         let Output {status, stdout, stderr}\n              = Command::new(\"echo\").arg(\"hello\").output().unwrap();\n@@ -764,8 +767,8 @@ mod tests {\n         assert_eq!(stderr, Vec::new());\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_output_error() {\n         let Output {status, stdout, stderr}\n              = Command::new(\"mkdir\").arg(\".\").output().unwrap();\n@@ -775,23 +778,23 @@ mod tests {\n         assert!(!stderr.is_empty());\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_finish_once() {\n         let mut prog = Command::new(\"false\").spawn().unwrap();\n         assert!(prog.wait().unwrap().code() == Some(1));\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_finish_twice() {\n         let mut prog = Command::new(\"false\").spawn().unwrap();\n         assert!(prog.wait().unwrap().code() == Some(1));\n         assert!(prog.wait().unwrap().code() == Some(1));\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n+    #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_wait_with_output_once() {\n         let prog = Command::new(\"echo\").arg(\"hello\").stdout(Stdio::piped())\n             .spawn().unwrap();\n@@ -821,7 +824,6 @@ mod tests {\n         cmd\n     }\n \n-    #[cfg(not(target_os=\"android\"))]\n     #[test]\n     fn test_inherit_env() {\n         use env;\n@@ -830,36 +832,22 @@ mod tests {\n         let output = String::from_utf8(result.stdout).unwrap();\n \n         for (ref k, ref v) in env::vars() {\n+            // don't check android RANDOM variables\n+            if cfg!(target_os = \"android\") && *k == \"RANDOM\" {\n+                continue\n+            }\n+\n             // Windows has hidden environment variables whose names start with\n             // equals signs (`=`). Those do not show up in the output of the\n             // `set` command.\n             assert!((cfg!(windows) && k.starts_with(\"=\")) ||\n                     k.starts_with(\"DYLD\") ||\n-                    output.contains(&format!(\"{}={}\", *k, *v)),\n+                    output.contains(&format!(\"{}={}\", *k, *v)) ||\n+                    output.contains(&format!(\"{}='{}'\", *k, *v)),\n                     \"output doesn't contain `{}={}`\\n{}\",\n                     k, v, output);\n         }\n     }\n-    #[cfg(target_os=\"android\")]\n-    #[test]\n-    fn test_inherit_env() {\n-        use env;\n-\n-        let mut result = env_cmd().output().unwrap();\n-        let output = String::from_utf8(result.stdout).unwrap();\n-\n-        for (ref k, ref v) in env::vars() {\n-            // don't check android RANDOM variables\n-            if *k != \"RANDOM\".to_string() {\n-                assert!(output.contains(&format!(\"{}={}\",\n-                                                 *k,\n-                                                 *v)) ||\n-                        output.contains(&format!(\"{}=\\'{}\\'\",\n-                                                 *k,\n-                                                 *v)));\n-            }\n-        }\n-    }\n \n     #[test]\n     fn test_override_env() {"}, {"sha": "5aa4ce81b8ae43c53c4b9ecf8a19fcae72230106", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -789,7 +789,7 @@ mod tests {\n     fn fmt_debug_handle() {\n         let (_, rx) = channel::<i32>();\n         let sel = Select::new();\n-        let mut handle = sel.handle(&rx);\n+        let handle = sel.handle(&rx);\n         assert_eq!(format!(\"{:?}\", handle), \"Handle { .. }\");\n     }\n }"}, {"sha": "dd76444d3ae02edbbc0064f794b2b43e7f7b6de3", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -12,9 +12,6 @@\n             reason = \"the interaction between semaphores and the acquisition/release \\\n                       of resources is currently unclear\",\n             issue = \"27798\")]\n-#![rustc_deprecated(since = \"1.7.0\",\n-                    reason = \"easily confused with system semaphores and not \\\n-                              used enough to pull its weight\")]\n #![allow(deprecated)]\n \n use ops::Drop;\n@@ -49,17 +46,38 @@ use sync::{Mutex, Condvar};\n /// // Release our initially acquired resource\n /// sem.release();\n /// ```\n+#[rustc_deprecated(since = \"1.7.0\",\n+                   reason = \"easily confused with system semaphores and not \\\n+                             used enough to pull its weight\")]\n+#[unstable(feature = \"semaphore\",\n+           reason = \"the interaction between semaphores and the acquisition/release \\\n+                     of resources is currently unclear\",\n+           issue = \"27798\")]\n pub struct Semaphore {\n     lock: Mutex<isize>,\n     cvar: Condvar,\n }\n \n /// An RAII guard which will release a resource acquired from a semaphore when\n /// dropped.\n+#[rustc_deprecated(since = \"1.7.0\",\n+                   reason = \"easily confused with system semaphores and not \\\n+                             used enough to pull its weight\")]\n+#[unstable(feature = \"semaphore\",\n+           reason = \"the interaction between semaphores and the acquisition/release \\\n+                     of resources is currently unclear\",\n+           issue = \"27798\")]\n pub struct SemaphoreGuard<'a> {\n     sem: &'a Semaphore,\n }\n \n+#[rustc_deprecated(since = \"1.7.0\",\n+                   reason = \"easily confused with system semaphores and not \\\n+                             used enough to pull its weight\")]\n+#[unstable(feature = \"semaphore\",\n+           reason = \"the interaction between semaphores and the acquisition/release \\\n+                     of resources is currently unclear\",\n+           issue = \"27798\")]\n impl Semaphore {\n     /// Creates a new semaphore with the initial count specified.\n     ///"}, {"sha": "2e89becfa67e625439d3342d3dd8984b83133275", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_docs)]\n-#![allow(non_camel_case_types)]\n+#![allow(missing_docs, bad_style)]\n \n use io::{self, ErrorKind};\n use libc;\n use num::One;\n use ops::Neg;\n-use alloc::oom;\n \n #[cfg(target_os = \"android\")]   pub use os::android as platform;\n #[cfg(target_os = \"bitrig\")]    pub use os::bitrig as platform;\n@@ -46,25 +44,10 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n-// A nicer handler for out-of-memory situations than the default one. This one\n-// prints a message to stderr before aborting. It is critical that this code\n-// does not allocate any memory since we are in an OOM situation. Any errors are\n-// ignored while printing since there's nothing we can do about them and we are\n-// about to exit anyways.\n-fn oom_handler() -> ! {\n-    use intrinsics;\n-    let msg = \"fatal runtime error: out of memory\\n\";\n-    unsafe {\n-        libc::write(libc::STDERR_FILENO,\n-                    msg.as_ptr() as *const libc::c_void,\n-                    msg.len() as libc::size_t);\n-        intrinsics::abort();\n-    }\n-}\n-\n-#[cfg(not(any(target_os = \"nacl\", test)))]\n+#[cfg(not(test))]\n pub fn init() {\n-    use libc::signal;\n+    use alloc::oom;\n+\n     // By default, some platforms will send a *signal* when an EPIPE error\n     // would otherwise be delivered. This runtime doesn't install a SIGPIPE\n     // handler, causing it to kill the program, which isn't exactly what we\n@@ -73,15 +56,33 @@ pub fn init() {\n     // Hence, we set SIGPIPE to ignore when the program starts up in order\n     // to prevent this problem.\n     unsafe {\n-        assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n+        reset_sigpipe();\n     }\n \n     oom::set_oom_handler(oom_handler);\n-}\n \n-#[cfg(all(target_os = \"nacl\", not(test)))]\n-pub fn init() {\n-    oom::set_oom_handler(oom_handler);\n+    // A nicer handler for out-of-memory situations than the default one. This\n+    // one prints a message to stderr before aborting. It is critical that this\n+    // code does not allocate any memory since we are in an OOM situation. Any\n+    // errors are ignored while printing since there's nothing we can do about\n+    // them and we are about to exit anyways.\n+    fn oom_handler() -> ! {\n+        use intrinsics;\n+        let msg = \"fatal runtime error: out of memory\\n\";\n+        unsafe {\n+            libc::write(libc::STDERR_FILENO,\n+                        msg.as_ptr() as *const libc::c_void,\n+                        msg.len() as libc::size_t);\n+            intrinsics::abort();\n+        }\n+    }\n+\n+    #[cfg(not(target_os = \"nacl\"))]\n+    unsafe fn reset_sigpipe() {\n+        assert!(libc::signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n+    }\n+    #[cfg(target_os = \"nacl\")]\n+    unsafe fn reset_sigpipe() {}\n }\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {"}, {"sha": "c7614db3299592239d6e933c319e57d918b3f6fb", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n #![cfg_attr(test, allow(dead_code))]\n \n use libc;"}, {"sha": "9e28cf06d619a13e9a8b724885a8a317013bc101", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n-\n use prelude::v1::*;\n \n use alloc::boxed::FnBox;\n@@ -174,6 +172,7 @@ impl Drop for Thread {\n           not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n           not(target_os = \"openbsd\")))]\n+#[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     pub unsafe fn current() -> Option<usize> { None }\n     pub unsafe fn init() -> Option<usize> { None }\n@@ -185,15 +184,13 @@ pub mod guard {\n           target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\"))]\n-#[allow(unused_imports)]\n+#[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     use prelude::v1::*;\n \n-    use libc::{self, pthread_t};\n+    use libc;\n     use libc::mmap;\n     use libc::{PROT_NONE, MAP_PRIVATE, MAP_ANON, MAP_FAILED, MAP_FIXED};\n-    use mem;\n-    use ptr;\n     use sys::os;\n \n     #[cfg(any(target_os = \"macos\",\n@@ -206,10 +203,10 @@ pub mod guard {\n     #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         let mut ret = None;\n-        let mut attr: libc::pthread_attr_t = mem::zeroed();\n+        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n         if libc::pthread_getattr_np(libc::pthread_self(), &mut attr) == 0 {\n-            let mut stackaddr = ptr::null_mut();\n+            let mut stackaddr = ::ptr::null_mut();\n             let mut stacksize = 0;\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n                                                    &mut stacksize), 0);\n@@ -265,7 +262,7 @@ pub mod guard {\n \n     #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]\n     pub unsafe fn current() -> Option<usize> {\n-        let mut current_stack: libc::stack_t = mem::zeroed();\n+        let mut current_stack: libc::stack_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_stackseg_np(libc::pthread_self(),\n                                              &mut current_stack), 0);\n \n@@ -282,15 +279,15 @@ pub mod guard {\n     #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n     pub unsafe fn current() -> Option<usize> {\n         let mut ret = None;\n-        let mut attr: libc::pthread_attr_t = mem::zeroed();\n+        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n         if libc::pthread_getattr_np(libc::pthread_self(), &mut attr) == 0 {\n             let mut guardsize = 0;\n             assert_eq!(libc::pthread_attr_getguardsize(&attr, &mut guardsize), 0);\n             if guardsize == 0 {\n                 panic!(\"there is no guard page\");\n             }\n-            let mut stackaddr = ptr::null_mut();\n+            let mut stackaddr = ::ptr::null_mut();\n             let mut size = 0;\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n                                                    &mut size), 0);"}, {"sha": "a8b82ef5f297c09e2a99f93b07044eec3e6f511d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -639,7 +639,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n fn directory_junctions_are_directories() {\n     use ffi::OsStr;\n     use env;\n-    use rand::{self, StdRng, Rng};\n+    use rand::{self, Rng};\n     use vec::Vec;\n \n     macro_rules! t {\n@@ -683,7 +683,7 @@ fn directory_junctions_are_directories() {\n             let mut data = [0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n             let mut db = data.as_mut_ptr()\n                             as *mut c::REPARSE_MOUNTPOINT_DATA_BUFFER;\n-            let mut buf = &mut (*db).ReparseTarget as *mut _;\n+            let buf = &mut (*db).ReparseTarget as *mut _;\n             let mut i = 0;\n             let v = br\"\\??\\\";\n             let v = v.iter().map(|x| *x as u16);"}, {"sha": "9ecef5ee92c714c6e1cbb3b9ca7be9a1046fbf40", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_docs)]\n-#![allow(non_camel_case_types)]\n-#![allow(non_snake_case)]\n+#![allow(missing_docs, bad_style)]\n \n use prelude::v1::*;\n \n@@ -20,7 +18,6 @@ use num::Zero;\n use os::windows::ffi::{OsStrExt, OsStringExt};\n use path::PathBuf;\n use time::Duration;\n-use alloc::oom;\n \n #[macro_use] pub mod compat;\n \n@@ -43,25 +40,26 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n-// See comment in sys/unix/mod.rs\n-fn oom_handler() -> ! {\n-    use intrinsics;\n-    use ptr;\n-    let msg = \"fatal runtime error: out of memory\\n\";\n-    unsafe {\n-        // WriteFile silently fails if it is passed an invalid handle, so there\n-        // is no need to check the result of GetStdHandle.\n-        c::WriteFile(c::GetStdHandle(c::STD_ERROR_HANDLE),\n-                     msg.as_ptr() as c::LPVOID,\n-                     msg.len() as c::DWORD,\n-                     ptr::null_mut(),\n-                     ptr::null_mut());\n-        intrinsics::abort();\n-    }\n-}\n-\n+#[cfg(not(test))]\n pub fn init() {\n-    oom::set_oom_handler(oom_handler);\n+    ::alloc::oom::set_oom_handler(oom_handler);\n+\n+    // See comment in sys/unix/mod.rs\n+    fn oom_handler() -> ! {\n+        use intrinsics;\n+        use ptr;\n+        let msg = \"fatal runtime error: out of memory\\n\";\n+        unsafe {\n+            // WriteFile silently fails if it is passed an invalid handle, so\n+            // there is no need to check the result of GetStdHandle.\n+            c::WriteFile(c::GetStdHandle(c::STD_ERROR_HANDLE),\n+                         msg.as_ptr() as c::LPVOID,\n+                         msg.len() as c::DWORD,\n+                         ptr::null_mut(),\n+                         ptr::null_mut());\n+            intrinsics::abort();\n+        }\n+    }\n }\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {"}, {"sha": "4ab9f678d065d001861f479b5084bfadfdb646a4", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -386,7 +386,6 @@ impl Stdio {\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;\n-    use str;\n     use ffi::{OsStr, OsString};\n     use super::make_command_line;\n "}, {"sha": "4a406d70e63abc2ceaeaf8aea8656bf06495c577", "filename": "src/libstd/sys/windows/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![cfg_attr(test, allow(dead_code))]\n+\n use sys_common::util::report_overflow;\n use sys::c;\n "}, {"sha": "b18772c0c24381c75589fcd140786f87d96067d4", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -83,6 +83,7 @@ impl Thread {\n     pub fn into_handle(self) -> Handle { self.handle }\n }\n \n+#[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     pub unsafe fn current() -> Option<usize> { None }\n     pub unsafe fn init() -> Option<usize> { None }"}, {"sha": "c31cd5a06ce53448060ea449380894898e23d688", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb343c33acf0f9833d8d6eb637234acf4321976b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cb343c33acf0f9833d8d6eb637234acf4321976b", "patch": "@@ -3149,7 +3149,6 @@ mod tests {\n     use super::*;\n \n     use ast;\n-    use ast_util;\n     use codemap;\n     use parse::token;\n "}]}