{"sha": "5a87a24f8288d905428db755c7ea806640b6ac1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODdhMjRmODI4OGQ5MDU0MjhkYjc1NWM3ZWE4MDY2NDBiNmFjMWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T14:18:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T14:18:26Z"}, "message": "move Path", "tree": {"sha": "220b3df25bfe9c9b5434da097a4f7edf9104ab6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220b3df25bfe9c9b5434da097a4f7edf9104ab6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a87a24f8288d905428db755c7ea806640b6ac1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a87a24f8288d905428db755c7ea806640b6ac1d", "html_url": "https://github.com/rust-lang/rust/commit/5a87a24f8288d905428db755c7ea806640b6ac1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a87a24f8288d905428db755c7ea806640b6ac1d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18000ba864cd076141778fd692b3853716adb683", "url": "https://api.github.com/repos/rust-lang/rust/commits/18000ba864cd076141778fd692b3853716adb683", "html_url": "https://github.com/rust-lang/rust/commit/18000ba864cd076141778fd692b3853716adb683"}], "stats": {"total": 209, "additions": 117, "deletions": 92}, "files": [{"sha": "e6225479dcc9eb1744d82939adddc43a9882a666", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a87a24f8288d905428db755c7ea806640b6ac1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a87a24f8288d905428db755c7ea806640b6ac1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=5a87a24f8288d905428db755c7ea806640b6ac1d", "patch": "@@ -1,11 +1,12 @@\n pub(crate) mod function;\n pub(crate) mod module;\n+mod path;\n \n use std::sync::Arc;\n \n use ra_syntax::{\n-    ast::{self, AstNode, FnDefNode},\n-    TextRange, SmolStr,\n+    ast::{self, FnDefNode},\n+    TextRange,\n };\n \n use crate::{\n@@ -18,6 +19,8 @@ use crate::{\n     Cancelable,\n };\n \n+pub(crate) use self::path::{Path, PathKind};\n+\n salsa::query_group! {\n     pub(crate) trait DescriptorDatabase: SyntaxDatabase + IdDatabase {\n         fn fn_scopes(fn_id: FnId) -> Arc<FnScopes> {\n@@ -50,20 +53,6 @@ salsa::query_group! {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub(crate) struct Path {\n-    kind: PathKind,\n-    segments: Vec<SmolStr>,\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n-pub(crate) enum PathKind {\n-    Abs,\n-    Self_,\n-    Super,\n-    Crate,\n-}\n-\n #[derive(Debug)]\n pub struct ReferenceDescriptor {\n     pub range: TextRange,"}, {"sha": "bf671470cbb41b2341882ec8d7c9a8b8b0bb723b", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 6, "deletions": 76, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5a87a24f8288d905428db755c7ea806640b6ac1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a87a24f8288d905428db755c7ea806640b6ac1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=5a87a24f8288d905428db755c7ea806640b6ac1d", "patch": "@@ -195,86 +195,16 @@ impl InputModuleItems {\n     }\n \n     fn add_use_item(&mut self, item: ast::UseItem) {\n-        if let Some(tree) = item.use_tree() {\n-            self.add_use_tree(None, tree);\n-        }\n-    }\n-\n-    fn add_use_tree(&mut self, prefix: Option<Path>, tree: ast::UseTree) {\n-        if let Some(use_tree_list) = tree.use_tree_list() {\n-            let prefix = match tree.path() {\n-                None => prefix,\n-                Some(path) => match convert_path(prefix, path) {\n-                    Some(it) => Some(it),\n-                    None => return, // TODO: report errors somewhere\n-                },\n+        Path::expand_use_item(item, |path, ptr| {\n+            let kind = match ptr {\n+                None => ImportKind::Glob,\n+                Some(ptr) => ImportKind::Named(ptr),\n             };\n-            for tree in use_tree_list.use_trees() {\n-                self.add_use_tree(prefix.clone(), tree);\n-            }\n-        } else {\n-            if let Some(ast_path) = tree.path() {\n-                if let Some(path) = convert_path(prefix, ast_path) {\n-                    let kind = if tree.has_star() {\n-                        ImportKind::Glob\n-                    } else {\n-                        let ptr = LocalSyntaxPtr::new(ast_path.segment().unwrap().syntax());\n-                        ImportKind::Named(ptr)\n-                    };\n-                    self.imports.push(Import { kind, path })\n-                }\n-            }\n-        }\n+            self.imports.push(Import { kind, path })\n+        })\n     }\n }\n \n-fn convert_path(prefix: Option<Path>, path: ast::Path) -> Option<Path> {\n-    let prefix = if let Some(qual) = path.qualifier() {\n-        Some(convert_path(prefix, qual)?)\n-    } else {\n-        None\n-    };\n-    let segment = path.segment()?;\n-    let res = match segment.kind()? {\n-        ast::PathSegmentKind::Name(name) => {\n-            let mut res = prefix.unwrap_or_else(|| Path {\n-                kind: PathKind::Abs,\n-                segments: Vec::with_capacity(1),\n-            });\n-            res.segments.push(name.text());\n-            res\n-        }\n-        ast::PathSegmentKind::CrateKw => {\n-            if prefix.is_some() {\n-                return None;\n-            }\n-            Path {\n-                kind: PathKind::Crate,\n-                segments: Vec::new(),\n-            }\n-        }\n-        ast::PathSegmentKind::SelfKw => {\n-            if prefix.is_some() {\n-                return None;\n-            }\n-            Path {\n-                kind: PathKind::Self_,\n-                segments: Vec::new(),\n-            }\n-        }\n-        ast::PathSegmentKind::SuperKw => {\n-            if prefix.is_some() {\n-                return None;\n-            }\n-            Path {\n-                kind: PathKind::Super,\n-                segments: Vec::new(),\n-            }\n-        }\n-    };\n-    Some(res)\n-}\n-\n impl ModuleItem {\n     fn new<'a>(item: impl ast::NameOwner<'a>) -> Option<ModuleItem> {\n         let name = item.name()?.text();"}, {"sha": "4ed561b51afcfe3b435fbe9962395a5ea0ec2d94", "filename": "crates/ra_analysis/src/descriptors/path.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5a87a24f8288d905428db755c7ea806640b6ac1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a87a24f8288d905428db755c7ea806640b6ac1d/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fpath.rs?ref=5a87a24f8288d905428db755c7ea806640b6ac1d", "patch": "@@ -0,0 +1,106 @@\n+use ra_syntax::{SmolStr, ast, AstNode};\n+\n+use crate::syntax_ptr::LocalSyntaxPtr;\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub(crate) struct Path {\n+    pub(crate) kind: PathKind,\n+    pub(crate) segments: Vec<SmolStr>,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub(crate) enum PathKind {\n+    Abs,\n+    Self_,\n+    Super,\n+    Crate,\n+}\n+\n+impl Path {\n+    pub(crate) fn expand_use_item(\n+        item: ast::UseItem,\n+        mut cb: impl FnMut(Path, Option<LocalSyntaxPtr>),\n+    ) {\n+        if let Some(tree) = item.use_tree() {\n+            expand_use_tree(None, tree, &mut cb);\n+        }\n+    }\n+}\n+\n+fn expand_use_tree(\n+    prefix: Option<Path>,\n+    tree: ast::UseTree,\n+    cb: &mut impl FnMut(Path, Option<LocalSyntaxPtr>),\n+) {\n+    if let Some(use_tree_list) = tree.use_tree_list() {\n+        let prefix = match tree.path() {\n+            None => prefix,\n+            Some(path) => match convert_path(prefix, path) {\n+                Some(it) => Some(it),\n+                None => return, // TODO: report errors somewhere\n+            },\n+        };\n+        for tree in use_tree_list.use_trees() {\n+            expand_use_tree(prefix.clone(), tree, cb);\n+        }\n+    } else {\n+        if let Some(ast_path) = tree.path() {\n+            if let Some(path) = convert_path(prefix, ast_path) {\n+                let ptr = if tree.has_star() {\n+                    None\n+                } else {\n+                    let ptr = LocalSyntaxPtr::new(ast_path.segment().unwrap().syntax());\n+                    Some(ptr)\n+                };\n+                cb(path, ptr)\n+            }\n+        }\n+    }\n+}\n+\n+fn convert_path(prefix: Option<Path>, path: ast::Path) -> Option<Path> {\n+    let prefix = if let Some(qual) = path.qualifier() {\n+        Some(convert_path(prefix, qual)?)\n+    } else {\n+        None\n+    };\n+    let segment = path.segment()?;\n+    let res = match segment.kind()? {\n+        ast::PathSegmentKind::Name(name) => {\n+            let mut res = prefix.unwrap_or_else(|| Path {\n+                kind: PathKind::Abs,\n+                segments: Vec::with_capacity(1),\n+            });\n+            res.segments.push(name.text());\n+            res\n+        }\n+        ast::PathSegmentKind::CrateKw => {\n+            if prefix.is_some() {\n+                return None;\n+            }\n+            Path {\n+                kind: PathKind::Crate,\n+                segments: Vec::new(),\n+            }\n+        }\n+        ast::PathSegmentKind::SelfKw => {\n+            if prefix.is_some() {\n+                return None;\n+            }\n+            Path {\n+                kind: PathKind::Self_,\n+                segments: Vec::new(),\n+            }\n+        }\n+        ast::PathSegmentKind::SuperKw => {\n+            if prefix.is_some() {\n+                return None;\n+            }\n+            Path {\n+                kind: PathKind::Super,\n+                segments: Vec::new(),\n+            }\n+        }\n+    };\n+    Some(res)\n+}"}]}