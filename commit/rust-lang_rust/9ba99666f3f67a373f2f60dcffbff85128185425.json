{"sha": "9ba99666f3f67a373f2f60dcffbff85128185425", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYTk5NjY2ZjNmNjdhMzczZjJmNjBkY2ZmYmZmODUxMjgxODU0MjU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-28T20:52:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-29T22:58:10Z"}, "message": "Review changes", "tree": {"sha": "ad05cb0db72a3690b3d9d167641f058550567c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad05cb0db72a3690b3d9d167641f058550567c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba99666f3f67a373f2f60dcffbff85128185425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba99666f3f67a373f2f60dcffbff85128185425", "html_url": "https://github.com/rust-lang/rust/commit/9ba99666f3f67a373f2f60dcffbff85128185425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba99666f3f67a373f2f60dcffbff85128185425/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b159d9cde595bf4c8beecb687d0aa1c0231edf6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b159d9cde595bf4c8beecb687d0aa1c0231edf6c", "html_url": "https://github.com/rust-lang/rust/commit/b159d9cde595bf4c8beecb687d0aa1c0231edf6c"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "0dc871703f983c9dff1f98c095b8b3b2ded6c98d", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9ba99666f3f67a373f2f60dcffbff85128185425/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba99666f3f67a373f2f60dcffbff85128185425/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=9ba99666f3f67a373f2f60dcffbff85128185425", "patch": "@@ -130,9 +130,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                      global: path.global,\n                                      segments: segs};\n             let qualname = if i == 0 && path.global {\n-                let mut result = \"::\".to_string();\n-                result.push_str(&path_to_string(&sub_path)[]);\n-                result\n+                format(\"::{}\", path_to_string(&sub_path))\n             } else {\n                 path_to_string(&sub_path)\n             };\n@@ -143,6 +141,10 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         result\n     }\n \n+    // The global arg allows us to override the global-ness of the path (which\n+    // actually means 'does the path start with `::`', rather than 'is the path\n+    // semantically global). We use the override for `use` imports (etc.) where\n+    // the syntax is non-global, but the semantics are global.\n     fn write_sub_paths(&mut self, path: &ast::Path, global: bool) {\n         let sub_paths = self.process_path_prefixes(path);\n         for (i, &(ref span, ref qualname)) in sub_paths.iter().enumerate() {\n@@ -159,7 +161,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n     }\n \n     // As write_sub_paths, but does not process the last ident in the path (assuming it\n-    // will be processed elsewhere).\n+    // will be processed elsewhere). See note on write_sub_paths about global.\n     fn write_sub_paths_truncated(&mut self, path: &ast::Path, global: bool) {\n         let sub_paths = self.process_path_prefixes(path);\n         let len = sub_paths.len();\n@@ -291,7 +293,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n \n         let mut scope_id;\n         // The qualname for a method is the trait name or name of the struct in an impl in\n-        // which the method is declared in followed by the method's name.\n+        // which the method is declared in, followed by the method's name.\n         let qualname = match ty::impl_of_method(&self.analysis.ty_cx,\n                                                 ast_util::local_def(method.id)) {\n             Some(impl_id) => match self.analysis.ty_cx.map.get(impl_id.node) {\n@@ -311,7 +313,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                                 },\n                                 None => {}\n                             }\n-                            result.push_str(\">::\");\n+                            result.push_str(\">\");\n                             result\n                         }\n                         _ => {\n@@ -336,8 +338,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                     scope_id = def_id.node;\n                     match self.analysis.ty_cx.map.get(def_id.node) {\n                         NodeItem(_) => {\n-                            let mut result = ty::item_path_str(&self.analysis.ty_cx, def_id);\n-                            result.push_str(\"::\");\n+                            format!(\"::{}\", ty::item_path_str(&self.analysis.ty_cx, def_id))\n                             result\n                         }\n                         _ => {\n@@ -355,7 +356,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             },\n         };\n \n-        let qualname = format!(\"::{}{}\", qualname, get_ident(method.pe_ident()).get());\n+        let qualname = format!(\"{}::{}\", qualname, get_ident(method.pe_ident()).get());\n         let qualname = &qualname[];\n \n         // record the decl for this def (if it has one)"}]}