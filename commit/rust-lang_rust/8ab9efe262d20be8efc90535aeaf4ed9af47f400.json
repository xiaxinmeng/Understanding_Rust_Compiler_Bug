{"sha": "8ab9efe262d20be8efc90535aeaf4ed9af47f400", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjllZmUyNjJkMjBiZThlZmM5MDUzNWFlYWY0ZWQ5YWY0N2Y0MDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T19:22:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T23:45:54Z"}, "message": "parser: Rewrite parse_path_without_tps so it knows beforehand which is the last ident\n\nNeeded to centralize all keyword-as-value parsing in parse_value_ident", "tree": {"sha": "5ef282631f44128f46e6ee2e9a9c4ce84d930c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef282631f44128f46e6ee2e9a9c4ce84d930c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab9efe262d20be8efc90535aeaf4ed9af47f400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab9efe262d20be8efc90535aeaf4ed9af47f400", "html_url": "https://github.com/rust-lang/rust/commit/8ab9efe262d20be8efc90535aeaf4ed9af47f400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab9efe262d20be8efc90535aeaf4ed9af47f400/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beece25abefb50cb2db91e5cde1f54e239d6e20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/beece25abefb50cb2db91e5cde1f54e239d6e20a", "html_url": "https://github.com/rust-lang/rust/commit/beece25abefb50cb2db91e5cde1f54e239d6e20a"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "0c7622fbc138cb377cb0a7f4ef8f4f7be5a00787", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ab9efe262d20be8efc90535aeaf4ed9af47f400/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab9efe262d20be8efc90535aeaf4ed9af47f400/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=8ab9efe262d20be8efc90535aeaf4ed9af47f400", "patch": "@@ -511,9 +511,18 @@ fn parse_path_without_tps(p: parser) -> @ast::path {\n     let lo = p.span.lo;\n     let global = eat(p, token::MOD_SEP);\n     let mut ids = [];\n-    do {\n+    loop {\n+        let is_not_last =\n+            p.look_ahead(2u) != token::LT\n+            && p.look_ahead(1u) == token::MOD_SEP;\n+\n         ids += [parse_ident(p)];\n-    } while p.look_ahead(1u) != token::LT && eat(p, token::MOD_SEP);\n+        if is_not_last {\n+            expect(p, token::MOD_SEP);\n+        } else {\n+            break;\n+        }\n+    }\n     @{span: mk_sp(lo, p.last_span.hi), global: global,\n       idents: ids, rp: none, types: []}\n }"}]}