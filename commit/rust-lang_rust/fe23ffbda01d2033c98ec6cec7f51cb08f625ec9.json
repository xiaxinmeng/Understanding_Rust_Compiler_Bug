{"sha": "fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjNmZmJkYTAxZDIwMzNjOThlYzZjZWM3ZjUxY2IwOGY2MjVlYzk=", "commit": {"author": {"name": "Axary", "email": "bastian_kauschke@hotmail.de", "date": "2018-11-16T18:27:27Z"}, "committer": {"name": "Axary", "email": "bastian_kauschke@hotmail.de", "date": "2018-11-16T18:27:27Z"}, "message": "improve error when self is used as not the first argument", "tree": {"sha": "cc2a6830cdafdab958767b4ae39a7597e3a213dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc2a6830cdafdab958767b4ae39a7597e3a213dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "html_url": "https://github.com/rust-lang/rust/commit/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "646d68f585e6cbabba5b7a67665af9a1f83ea6ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/646d68f585e6cbabba5b7a67665af9a1f83ea6ea", "html_url": "https://github.com/rust-lang/rust/commit/646d68f585e6cbabba5b7a67665af9a1f83ea6ea"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "a4b01f485d38b8235546f1cc56b03f9ea062d8cb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "patch": "@@ -1824,6 +1824,14 @@ impl<'a> Parser<'a> {\n     fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n+        if let Ok(Some(_)) = self.parse_self_arg() {\n+            let mut err = self.struct_span_err(self.prev_span,\n+                \"unexpected `self` argument in function\");\n+            err.span_label(self.prev_span,\n+                \"`self` is only valid as the first argument of a trait function\");\n+            return Err(err);\n+        }\n+\n         let (pat, ty) = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n@@ -5386,14 +5394,7 @@ impl<'a> Parser<'a> {\n     fn parse_fn_args(&mut self, named_args: bool, allow_variadic: bool)\n                      -> PResult<'a, (Vec<Arg> , bool)> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n-\n-        if let Ok(Some(_)) = self.parse_self_arg() {\n-            let mut err = self.struct_span_err(self.prev_span\n-                , \"unexpected `self` argument in bare function\");\n-            err.span_label(self.prev_span, \"invalid argument in bare function\");\n-            return Err(err);\n-        }\n-\n+        \n         let sp = self.span;\n         let mut variadic = false;\n         let args: Vec<Option<Arg>> ="}, {"sha": "f906b176d92407b050d6cace2940a1a2dfebfabb", "filename": "src/test/ui/bare-function-self.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/646d68f585e6cbabba5b7a67665af9a1f83ea6ea/src%2Ftest%2Fui%2Fbare-function-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646d68f585e6cbabba5b7a67665af9a1f83ea6ea/src%2Ftest%2Fui%2Fbare-function-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbare-function-self.rs?ref=646d68f585e6cbabba5b7a67665af9a1f83ea6ea", "patch": "@@ -1,5 +0,0 @@\n-fn a(&self) { }\n-//~^ ERROR unexpected `self` argument in bare function\n-//~| NOTE invalid argument in bare function\n-\n-fn main() { }"}, {"sha": "a84fe55502dc14e4e86e0719051f575d46416a49", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs?ref=fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "patch": "@@ -0,0 +1,5 @@\n+fn a(&self) { }\n+//~^ ERROR unexpected `self` argument in function\n+//~| NOTE `self` is only valid as the first argument of a trait function\n+\n+fn main() { }"}, {"sha": "27e56a537139f933e009e14034438730fbecff28", "filename": "src/test/ui/invalid-self-argument/bare-fn.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs?ref=fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "patch": "@@ -0,0 +1,5 @@\n+fn b(foo: u32, &mut self) { }\n+//~^ ERROR unexpected `self` argument in function\n+//~| NOTE `self` is only valid as the first argument of a trait function\n+\n+fn main() { }"}, {"sha": "e2107e4d8676dc4ebc3d5be6aebe19e641b4c3a3", "filename": "src/test/ui/invalid-self-argument/trait-fn.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe23ffbda01d2033c98ec6cec7f51cb08f625ec9/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs?ref=fe23ffbda01d2033c98ec6cec7f51cb08f625ec9", "patch": "@@ -0,0 +1,11 @@\n+struct Foo {}\n+\n+impl Foo {\n+    fn c(foo: u32, self) {}\n+    //~^ ERROR unexpected `self` argument in function\n+    //~| NOTE `self` is only valid as the first argument of a trait function\n+\n+    fn good(&mut self, foo: u32) {}\n+}\n+\n+fn main() { }"}]}