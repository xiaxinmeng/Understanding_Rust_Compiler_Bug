{"sha": "925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNWQ1YWM0NWY0YTQ0ZGQ2MWYxZWJkNGI3YmQzY2M4OWZjYjJiNWY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-21T21:53:12Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-27T18:37:58Z"}, "message": "Fix and bless tests", "tree": {"sha": "c78379b10cb5e0ed9b1a17a48cf5b6ad1915b19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c78379b10cb5e0ed9b1a17a48cf5b6ad1915b19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f", "html_url": "https://github.com/rust-lang/rust/commit/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3bae5ce73a65671ee35037ac988766973628295", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3bae5ce73a65671ee35037ac988766973628295", "html_url": "https://github.com/rust-lang/rust/commit/a3bae5ce73a65671ee35037ac988766973628295"}], "stats": {"total": 189, "additions": 168, "deletions": 21}, "files": [{"sha": "6dfb97c230d66fc0043c0fb97a7303ee62b390c0", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsafe_block_in_unsafe_fn)]\n-#![warn(unsafe_op_in_unsafe_fn)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n #![deny(unused_unsafe)]\n #![deny(safe_packed_borrows)]\n \n@@ -14,18 +14,34 @@ pub struct Packed {\n \n const PACKED: Packed = Packed { data: &0 };\n \n-unsafe fn foo() {\n+unsafe fn deny_level() {\n     unsf();\n-    //~^ WARNING call to unsafe function is unsafe and requires unsafe block\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n     *PTR;\n-    //~^ WARNING dereference of raw pointer is unsafe and requires unsafe block\n+    //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n-    //~^ WARNING use of mutable static is unsafe and requires unsafe block\n-    &PACKED.data; // the level for the `safe_packed_borrows` lint is ignored\n-    //~^ WARNING borrow of packed field is unsafe and requires unsafe block\n+    //~^ ERROR use of mutable static is unsafe and requires unsafe block\n+    &PACKED.data;\n+    //~^ ERROR borrow of packed field is unsafe and requires unsafe block\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n }\n \n-unsafe fn bar() {\n+// Check that `unsafe_op_in_unsafe_fn` works starting from the `warn` level.\n+#[warn(unsafe_op_in_unsafe_fn)]\n+#[deny(warnings)]\n+unsafe fn warning_level() {\n+    unsf();\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    *PTR;\n+    //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n+    VOID = ();\n+    //~^ ERROR use of mutable static is unsafe and requires unsafe block\n+    &PACKED.data;\n+    //~^ ERROR borrow of packed field is unsafe and requires unsafe block\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+}\n+\n+unsafe fn explicit_block() {\n     // no error\n     unsafe {\n         unsf();\n@@ -35,13 +51,25 @@ unsafe fn bar() {\n     }\n }\n \n-unsafe fn baz() {\n+unsafe fn two_explicit_blocks() {\n     unsafe { unsafe { unsf() } }\n     //~^ ERROR unnecessary `unsafe` block\n }\n \n+#[warn(safe_packed_borrows)]\n+unsafe fn warn_packed_borrows() {\n+    &PACKED.data;\n+    //~^ WARNING borrow of packed field is unsafe and requires unsafe block\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+}\n+\n+#[allow(safe_packed_borrows)]\n+unsafe fn allow_packed_borrows() {\n+    &PACKED.data; // `safe_packed_borrows` is allowed, no error\n+}\n+\n #[allow(unsafe_op_in_unsafe_fn)]\n-unsafe fn qux() {\n+unsafe fn allow_level() {\n     // lint allowed -> no error\n     unsf();\n     *PTR;\n@@ -52,7 +80,26 @@ unsafe fn qux() {\n     //~^ ERROR unnecessary `unsafe` block\n }\n \n+unsafe fn nested_allow_level() {\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    {\n+        // lint allowed -> no error\n+        unsf();\n+        *PTR;\n+        VOID = ();\n+        &PACKED.data;\n+\n+        unsafe { unsf() }\n+        //~^ ERROR unnecessary `unsafe` block\n+    }\n+}\n+\n fn main() {\n-    unsf()\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    unsf();\n+    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    #[allow(unsafe_op_in_unsafe_fn)]\n+    {\n+        unsf();\n+        //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    }\n }"}, {"sha": "efc53f0b28b291a7029b7f72a909a58f05364ed0", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.stderr", "status": "modified", "additions": 109, "deletions": 9, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr?ref=925d5ac45f4a44dd61f1ebd4b7bd3cc89fcb2b5f", "patch": "@@ -1,18 +1,89 @@\n-warning: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:8:5\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:18:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:2:9\n    |\n-LL | #![warn(unsafe_op_in_unsafe_fn)]\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:20:5\n+   |\n+LL |     *PTR;\n+   |     ^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:22:5\n+   |\n+LL |     VOID = ();\n+   |     ^^^^^^^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: borrow of packed field is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:24:5\n+   |\n+LL |     &PACKED.data;\n+   |     ^^^^^^^^^^^^ borrow of packed field\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n+   |\n+LL | #![deny(safe_packed_borrows)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:33:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:8\n+   |\n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^\n+   = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:35:5\n+   |\n+LL |     *PTR;\n+   |     ^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:37:5\n+   |\n+LL |     VOID = ();\n+   |     ^^^^^^^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: borrow of packed field is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:39:5\n+   |\n+LL |     &PACKED.data;\n+   |     ^^^^^^^^^^^^ borrow of packed field\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:17:14\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:55:14\n    |\n LL |     unsafe { unsafe { unsf() } }\n    |     ------   ^^^^^^ unnecessary `unsafe` block\n@@ -25,20 +96,49 @@ note: the lint level is defined here\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n+warning: borrow of packed field is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:61:5\n+   |\n+LL |     &PACKED.data;\n+   |     ^^^^^^^^^^^^ borrow of packed field\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:59:8\n+   |\n+LL | #[warn(safe_packed_borrows)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n+\n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:79:5\n    |\n LL |     unsafe { unsf() }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:30:5\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:92:9\n    |\n-LL |     unsf()\n+LL |         unsafe { unsf() }\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:98:5\n+   |\n+LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:102:9\n+   |\n+LL |         unsf();\n+   |         ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 13 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0133`."}]}