{"sha": "aaaed51ab857b3e08870bb13ec44617fce902004", "node_id": "C_kwDOAAsO6NoAKGFhYWVkNTFhYjg1N2IzZTA4ODcwYmIxM2VjNDQ2MTdmY2U5MDIwMDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T02:52:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T02:52:23Z"}, "message": "Auto merge of #2279 - RalfJung:adjacent-allocs, r=RalfJung\n\nAllow non-ZST allocations to be adjacent\n\nAlso `cargo update` in test-cargo-miri... no need to make a separate PR for that right?...", "tree": {"sha": "b83382f0f75c17a6212e709b056e4c16ada9d68d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b83382f0f75c17a6212e709b056e4c16ada9d68d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaaed51ab857b3e08870bb13ec44617fce902004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaed51ab857b3e08870bb13ec44617fce902004", "html_url": "https://github.com/rust-lang/rust/commit/aaaed51ab857b3e08870bb13ec44617fce902004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaaed51ab857b3e08870bb13ec44617fce902004/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aefaa5b6f057140613467d30f2d20d7e1214b2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aefaa5b6f057140613467d30f2d20d7e1214b2a7", "html_url": "https://github.com/rust-lang/rust/commit/aefaa5b6f057140613467d30f2d20d7e1214b2a7"}, {"sha": "65497649602ca5b56bed9418eda7d2e2be72487d", "url": "https://api.github.com/repos/rust-lang/rust/commits/65497649602ca5b56bed9418eda7d2e2be72487d", "html_url": "https://github.com/rust-lang/rust/commit/65497649602ca5b56bed9418eda7d2e2be72487d"}], "stats": {"total": 157, "additions": 106, "deletions": 51}, "files": [{"sha": "a7ee11e82e0f032ebcfcdcefd24e2471270fa4f1", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaaed51ab857b3e08870bb13ec44617fce902004/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/aaaed51ab857b3e08870bb13ec44617fce902004/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=aaaed51ab857b3e08870bb13ec44617fce902004", "patch": "@@ -277,7 +277,7 @@ environment variable. We first document the most relevant and most commonly used\n   and `warn-nobacktrace` are the supported actions. The default is to `abort`,\n   which halts the machine. Some (but not all) operations also support continuing\n   execution with a \"permission denied\" error being returned to the program.\n-  `warn` prints a full backtrace when that happen; `warn-nobacktrace` is less\n+  `warn` prints a full backtrace when that happens; `warn-nobacktrace` is less\n   verbose. `hide` hides the warning entirely.\n * `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from the host so that it\n   cannot be accessed by the program. Can be used multiple times to exclude several variables. The"}, {"sha": "0ebc62ebbfb198b3701290c01d382283a1e95215", "filename": "src/intptrcast.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aaaed51ab857b3e08870bb13ec44617fce902004/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaed51ab857b3e08870bb13ec44617fce902004/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=aaaed51ab857b3e08870bb13ec44617fce902004", "patch": "@@ -1,4 +1,5 @@\n use std::cell::RefCell;\n+use std::cmp::max;\n use std::collections::hash_map::Entry;\n \n use log::trace;\n@@ -187,11 +188,11 @@ impl<'mir, 'tcx> GlobalStateInner {\n                     slack,\n                 );\n \n-                // Remember next base address.  Leave a gap of at least 1 to avoid two zero-sized allocations\n-                // having the same base address, and to avoid ambiguous provenance for the address between two\n-                // allocations (also see https://github.com/rust-lang/unsafe-code-guidelines/issues/313).\n-                let size_plus_1 = size.bytes().checked_add(1).unwrap();\n-                global_state.next_base_addr = base_addr.checked_add(size_plus_1).unwrap();\n+                // Remember next base address.  If this allocation is zero-sized, leave a gap\n+                // of at least 1 to avoid two allocations having the same base address.\n+                // (The logic in `alloc_id_from_addr` assumes unique addresses, and function\n+                // pointers to different functions need to be distinguishable!)\n+                global_state.next_base_addr = base_addr.checked_add(max(size.bytes(), 1)).unwrap();\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n                 global_state.int_to_ptr_map.push((base_addr, alloc_id));"}, {"sha": "d34db9f14dfcf07778cd25bb2c3e2af009d0a49f", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 34, "deletions": 44, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/aaaed51ab857b3e08870bb13ec44617fce902004/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aaaed51ab857b3e08870bb13ec44617fce902004/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=aaaed51ab857b3e08870bb13ec44617fce902004", "patch": "@@ -16,7 +16,7 @@ dependencies = [\n  \"cdylib\",\n  \"exported_symbol\",\n  \"getrandom 0.1.16\",\n- \"getrandom 0.2.2\",\n+ \"getrandom 0.2.7\",\n  \"issue_1567\",\n  \"issue_1691\",\n  \"issue_1705\",\n@@ -64,20 +64,20 @@ dependencies = [\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.2\"\n+version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c9495705279e7140bf035dde1f6e750c162df8b625267cd52cc44e0b156732c8\"\n+checksum = \"4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n- \"wasi 0.10.2+wasi-snapshot-preview1\",\n+ \"wasi 0.11.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.18\"\n+version = \"0.1.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c\"\n+checksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\n dependencies = [\n  \"libc\",\n ]\n@@ -110,15 +110,15 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.92\"\n+version = \"0.2.126\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"56d855069fafbb9b344c0f962150cd2c1187975cb1c22c1522c240d8c4986714\"\n+checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n \n [[package]]\n name = \"num_cpus\"\n-version = \"1.13.0\"\n+version = \"1.13.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\n+checksum = \"19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1\"\n dependencies = [\n  \"hermit-abi\",\n  \"libc\",\n@@ -136,73 +136,63 @@ dependencies = [\n \n [[package]]\n name = \"ppv-lite86\"\n-version = \"0.2.10\"\n+version = \"0.2.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857\"\n+checksum = \"eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.26\"\n+version = \"1.0.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec\"\n+checksum = \"dd96a1e8ed2596c337f8eae5f24924ec83f5ad5ab21ea8e455d3566c69fbcaf7\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.9\"\n+version = \"1.0.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7\"\n+checksum = \"3bcdf212e9776fbcb2d23ab029360416bb1706b1aea2d1a5ba002727cbcab804\"\n dependencies = [\n  \"proc-macro2\",\n ]\n \n [[package]]\n name = \"rand\"\n-version = \"0.8.3\"\n+version = \"0.8.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n dependencies = [\n  \"libc\",\n  \"rand_chacha\",\n  \"rand_core\",\n- \"rand_hc\",\n ]\n \n [[package]]\n name = \"rand_chacha\"\n-version = \"0.3.0\"\n+version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d\"\n+checksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\n dependencies = [\n  \"ppv-lite86\",\n  \"rand_core\",\n ]\n \n [[package]]\n name = \"rand_core\"\n-version = \"0.6.2\"\n+version = \"0.6.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"34cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7\"\n+checksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\n dependencies = [\n- \"getrandom 0.2.2\",\n-]\n-\n-[[package]]\n-name = \"rand_hc\"\n-version = \"0.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73\"\n-dependencies = [\n- \"rand_core\",\n+ \"getrandom 0.2.7\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.125\"\n+version = \"1.0.137\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b093b7a2bb58203b5da3056c05b4ec1fed827dcfdb37347a8841695263b3d06d\"\n+checksum = \"1f26faba0c3959972377d3b2d306ee9f71faee9714294e41bb777f83f88578be\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -218,20 +208,20 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.68\"\n+version = \"1.0.98\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3ce15dd3ed8aa2f8eeac4716d6ef5ab58b6b9256db41d7e1a0224c2788e8fd87\"\n+checksum = \"c50aef8a904de4c23c788f104b7dddc7d6f79c647c7c8ce4cc8f73eb0ca773dd\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"unicode-xid\",\n+ \"unicode-ident\",\n ]\n \n [[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.1\"\n+name = \"unicode-ident\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n+checksum = \"5bd2fe26506023ed7b5e1e315add59d6f584c621d037f9368fea9cfb988f368c\"\n \n [[package]]\n name = \"wasi\"\n@@ -241,9 +231,9 @@ checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n \n [[package]]\n name = \"wasi\"\n-version = \"0.10.2+wasi-snapshot-preview1\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n \n [[package]]\n name = \"winapi\""}, {"sha": "09e7df39b1c073c8ce152609d72e4676e2f1d204", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaaed51ab857b3e08870bb13ec44617fce902004/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/aaaed51ab857b3e08870bb13ec44617fce902004/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=aaaed51ab857b3e08870bb13ec44617fce902004", "patch": "@@ -114,7 +114,7 @@ def test_cargo_miri_test():\n     default_ref = \"test.cross-target.stdout.ref\" if is_foreign else \"test.default.stdout.ref\"\n     filter_ref = \"test.filter.cross-target.stdout.ref\" if is_foreign else \"test.filter.stdout.ref\"\n \n-    # macOS needs permissive provenance inside getrandom.\n+    # macOS needs permissive provenance inside getrandom_1.\n     test(\"`cargo miri test`\",\n         cargo_miri(\"test\"),\n         default_ref, \"test.stderr-empty.ref\","}, {"sha": "d0dc8b5d876222d42d2e47f034596d5070cbd6b7", "filename": "tests/pass/adjacent-allocs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aaaed51ab857b3e08870bb13ec44617fce902004/tests%2Fpass%2Fadjacent-allocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaed51ab857b3e08870bb13ec44617fce902004/tests%2Fpass%2Fadjacent-allocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fadjacent-allocs.rs?ref=aaaed51ab857b3e08870bb13ec44617fce902004", "patch": "@@ -1,5 +1,20 @@\n // compile-flags: -Zmiri-permissive-provenance\n \n+fn ensure_allocs_can_be_adjacent() {\n+    for _ in 0..512 {\n+        let n = 0u64;\n+        let ptr: *const u64 = &n;\n+        let ptr2 = {\n+            let m = 0u64;\n+            &m as *const u64\n+        };\n+        if ptr.wrapping_add(1) == ptr2 {\n+            return;\n+        }\n+    }\n+    panic!(\"never saw adjacent stack variables?\");\n+}\n+\n fn test1() {\n     // The slack between allocations is random.\n     // Loop a few times to hit the zero-slack case.\n@@ -42,6 +57,7 @@ fn test2() {\n }\n \n fn main() {\n+    ensure_allocs_can_be_adjacent();\n     test1();\n     test2();\n }"}, {"sha": "aebf5b222389517b9cff907eabcebf6613029416", "filename": "tests/pass/intptrcast.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aaaed51ab857b3e08870bb13ec44617fce902004/tests%2Fpass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaed51ab857b3e08870bb13ec44617fce902004/tests%2Fpass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintptrcast.rs?ref=aaaed51ab857b3e08870bb13ec44617fce902004", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -Zmiri-permissive-provenance\n \n+use std::mem;\n+\n // This strips provenance\n fn transmute_ptr_to_int<T>(x: *const T) -> usize {\n     unsafe { std::mem::transmute(x) }\n@@ -100,6 +102,51 @@ fn zst_deref_of_dangling() {\n     let _val = unsafe { *zst };\n }\n \n+fn functions() {\n+    // Roundtrip a few functions through integers. Do this multiple times to make sure this does not\n+    // work by chance. If we did not give unique addresses to ZST allocations -- which fn\n+    // allocations are -- then we might be unable to cast back, or we might call the wrong function!\n+    // Every function gets at most one address so doing a loop would not help...\n+    fn fn0() -> i32 {\n+        0\n+    }\n+    fn fn1() -> i32 {\n+        1\n+    }\n+    fn fn2() -> i32 {\n+        2\n+    }\n+    fn fn3() -> i32 {\n+        3\n+    }\n+    fn fn4() -> i32 {\n+        4\n+    }\n+    fn fn5() -> i32 {\n+        5\n+    }\n+    fn fn6() -> i32 {\n+        6\n+    }\n+    fn fn7() -> i32 {\n+        7\n+    }\n+    let fns = [\n+        fn0 as fn() -> i32 as *const () as usize,\n+        fn1 as fn() -> i32 as *const () as usize,\n+        fn2 as fn() -> i32 as *const () as usize,\n+        fn3 as fn() -> i32 as *const () as usize,\n+        fn4 as fn() -> i32 as *const () as usize,\n+        fn5 as fn() -> i32 as *const () as usize,\n+        fn6 as fn() -> i32 as *const () as usize,\n+        fn7 as fn() -> i32 as *const () as usize,\n+    ];\n+    for (idx, &addr) in fns.iter().enumerate() {\n+        let fun: fn() -> i32 = unsafe { mem::transmute(addr as *const ()) };\n+        assert_eq!(fun(), idx as i32);\n+    }\n+}\n+\n fn main() {\n     cast();\n     cast_dangling();\n@@ -112,4 +159,5 @@ fn main() {\n     ptr_eq_out_of_bounds_null();\n     ptr_eq_integer();\n     zst_deref_of_dangling();\n+    functions();\n }"}]}