{"sha": "7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMGE5NTJlNDY1YjY1ODRkMmE4NmQyZmNhM2M4YTRiMDc3NTY3Y2Q=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-05-02T14:53:12Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-06-24T08:45:20Z"}, "message": "Implement initernal lint LINT_PASS_IMPL_WITHOUT_MACRO", "tree": {"sha": "e96901aa2ef080ca8d384ed60a74a45341be6bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e96901aa2ef080ca8d384ed60a74a45341be6bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl0QjaAACgkQaTCGhp1Q\nZjfmIA//chh7VBZcoCA19nT3H3/MXmdnuppI9tWyYy7u9Uu0sVXpP1pKT+V6DPqO\nT/zp8OuxexZ4oa1d9a49gHKEfRxePOPk98XGUPEKWm1bQHsaXPeiXivZRVS+ZqNf\n0So3OvQ09u2lPm35JLpu448K2CBsKwiPRIy7k0Wer6zD4lgC8JzfWdvqNc/8/6Ad\n41HfSxUiSSvIM1JHqII9ACzO8KmPkaIDw7T5YvWdKR3fvBRkYOYAPPxbo0Te0BK0\nvs/2pfW3PdZ/8ys/p+NiCHCS91gAX/w4xhSuDX4kHnBS3Sx3gIQrRyFaY0GDz81s\nHf7a/k5uO5GfYlgCDL1A5xnNLiXfTKYZpVCEIVgBDsToqU0eV0gVu6Pjv/wkGv1H\nuRFglwBsBdroSGM0kKeWNklowDwRH/nkHY132fMHJmYj/YDiR6DoDuEQG6eGTn/Q\nc3MtyAQ73jVynyhAyc73Ii79pufki7/7TVmNZz4cnCVAIJXFObL8/IGItGUxnyC7\nRkCvOFQub+xzp4kbg8WjKDBLN57nTPr4ofmPMGFXCg7nHJUgLeYrXa3VUR6yuOE2\ntZuCfNR0RlAugMtqvjUZWZas04CyrfwOSUTleJ3iGrRTVdiZKr9Vm99VFezBs+2Z\nxsL3x/BdD1Z+Fuu7BQJFfCn3+Uig2Pv2l0bopVfaMgoW+rU1AzY=\n=qpBJ\n-----END PGP SIGNATURE-----", "payload": "tree e96901aa2ef080ca8d384ed60a74a45341be6bb6\nparent 3cc34867339356a34428e9ec3efa618d86228fed\nauthor flip1995 <hello@philkrones.com> 1556808792 +0200\ncommitter flip1995 <hello@philkrones.com> 1561365920 +0200\n\nImplement initernal lint LINT_PASS_IMPL_WITHOUT_MACRO\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "html_url": "https://github.com/rust-lang/rust/commit/7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc34867339356a34428e9ec3efa618d86228fed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc34867339356a34428e9ec3efa618d86228fed", "html_url": "https://github.com/rust-lang/rust/commit/3cc34867339356a34428e9ec3efa618d86228fed"}], "stats": {"total": 104, "additions": 87, "deletions": 17}, "files": [{"sha": "7203dd9beaae452c2b093df881ebb16ec744b325", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "patch": "@@ -1341,6 +1341,7 @@ struct LateLintPassObjects<'a> {\n     lints: &'a mut [LateLintPassObject],\n }\n \n+#[cfg_attr(not(stage0), allow(lint_pass_impl_without_macro))]\n impl LintPass for LateLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()\n@@ -1510,6 +1511,7 @@ struct EarlyLintPassObjects<'a> {\n     lints: &'a mut [EarlyLintPassObject],\n }\n \n+#[cfg_attr(not(stage0), allow(lint_pass_impl_without_macro))]\n impl LintPass for EarlyLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()"}, {"sha": "d3996c4e37a9fb146440a2c0f16598eadfdb3009", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "patch": "@@ -7,7 +7,7 @@ use crate::lint::{\n };\n use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n-use syntax::ast::Ident;\n+use syntax::ast::{Ident, Item, ItemKind};\n use syntax::symbol::{sym, Symbol};\n \n declare_lint! {\n@@ -36,22 +36,16 @@ impl_lint_pass!(DefaultHashTypes => [DEFAULT_HASH_TYPES]);\n impl EarlyLintPass for DefaultHashTypes {\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n         if let Some(replace) = self.map.get(&ident.name) {\n-            let msg = format!(\n-                \"Prefer {} over {}, it has better performance\",\n-                replace, ident\n-            );\n+            let msg = format!(\"Prefer {} over {}, it has better performance\", replace, ident);\n             let mut db = cx.struct_span_lint(DEFAULT_HASH_TYPES, ident.span, &msg);\n             db.span_suggestion(\n                 ident.span,\n                 \"use\",\n                 replace.to_string(),\n                 Applicability::MaybeIncorrect, // FxHashMap, ... needs another import\n             );\n-            db.note(&format!(\n-                \"a `use rustc_data_structures::fx::{}` may be necessary\",\n-                replace\n-            ))\n-            .emit();\n+            db.note(&format!(\"a `use rustc_data_structures::fx::{}` may be necessary\", replace))\n+                .emit();\n         }\n     }\n }\n@@ -137,13 +131,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n                     }\n                 }\n             }\n-            TyKind::Rptr(\n-                _,\n-                MutTy {\n-                    ty: inner_ty,\n-                    mutbl: Mutability::MutImmutable,\n-                },\n-            ) => {\n+            TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::MutImmutable }) => {\n                 if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner_def_id()) {\n                     if cx.tcx.impl_trait_ref(impl_did).is_some() {\n                         return;\n@@ -225,3 +213,31 @@ fn gen_args(segment: &PathSegment) -> String {\n \n     String::new()\n }\n+\n+declare_lint! {\n+    pub LINT_PASS_IMPL_WITHOUT_MACRO,\n+    Allow,\n+    \"`impl LintPass` without the `declare_lint_pass!` or `impl_lint_pass!` macros\"\n+}\n+\n+declare_lint_pass!(LintPassImpl => [LINT_PASS_IMPL_WITHOUT_MACRO]);\n+\n+impl EarlyLintPass for LintPassImpl {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if let ItemKind::Impl(_, _, _, _, Some(lint_pass), _, _) = &item.node {\n+            if !lint_pass.path.span.ctxt().outer_expn_info().is_some() {\n+                if let Some(last) = lint_pass.path.segments.last() {\n+                    if last.ident.as_str() == \"LintPass\" {\n+                        cx.struct_span_lint(\n+                            LINT_PASS_IMPL_WITHOUT_MACRO,\n+                            lint_pass.path.span,\n+                            \"implementing `LintPass` by hand\",\n+                        )\n+                        .help(\"try using `declare_lint_pass!` or `impl_lint_pass!` instead\")\n+                        .emit();\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "8a5fde322b2a76e39edac08239ff8c5bffc6e112", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "patch": "@@ -493,6 +493,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_early_pass(sess, false, false, box DefaultHashTypes::new());\n+    store.register_early_pass(sess, false, false, box LintPassImpl);\n     store.register_late_pass(sess, false, false, false, box TyTyKind);\n     store.register_group(\n         sess,\n@@ -502,6 +503,7 @@ pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n             LintId::of(USAGE_OF_TY_TYKIND),\n+            LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n             LintId::of(TY_PASS_BY_REFERENCE),\n             LintId::of(USAGE_OF_QUALIFIED_TY),\n         ],"}, {"sha": "92f8e8364a77558cb4c32dcea546f8b166bc29de", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "patch": "@@ -0,0 +1,35 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![deny(lint_pass_impl_without_macro)]\n+\n+extern crate rustc;\n+\n+use rustc::lint::{LintArray, LintPass};\n+use rustc::{declare_lint, declare_lint_pass, impl_lint_pass, lint_array};\n+\n+declare_lint! {\n+    pub TEST_LINT,\n+    Allow,\n+    \"test\"\n+}\n+\n+struct Foo;\n+\n+impl LintPass for Foo { //~ERROR implementing `LintPass` by hand\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"Foo\"\n+    }\n+}\n+\n+struct Bar;\n+\n+impl_lint_pass!(Bar => [TEST_LINT]);\n+\n+declare_lint_pass!(Baz => [TEST_LINT]);\n+\n+fn main() {}"}, {"sha": "9ddd6af472a8b189ef9b41fabd7fe62bfc8516ce", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d0a952e465b6584d2a86d2fca3c8a4b077567cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=7d0a952e465b6584d2a86d2fca3c8a4b077567cd", "patch": "@@ -0,0 +1,15 @@\n+error: implementing `LintPass` by hand\n+  --> $DIR/lint_pass_impl_without_macro.rs:19:6\n+   |\n+LL | impl LintPass for Foo {\n+   |      ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint_pass_impl_without_macro.rs:4:9\n+   |\n+LL | #![deny(lint_pass_impl_without_macro)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n+\n+error: aborting due to previous error\n+"}]}