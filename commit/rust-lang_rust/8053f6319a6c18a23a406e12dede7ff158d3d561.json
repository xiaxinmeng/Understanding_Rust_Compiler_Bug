{"sha": "8053f6319a6c18a23a406e12dede7ff158d3d561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNTNmNjMxOWE2YzE4YTIzYTQwNmUxMmRlZGU3ZmYxNThkM2Q1NjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-11T10:06:37Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-11T10:06:37Z"}, "message": "Rebase fallout", "tree": {"sha": "63c039074784730285b7498fbe4686b87795fc46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63c039074784730285b7498fbe4686b87795fc46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8053f6319a6c18a23a406e12dede7ff158d3d561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8053f6319a6c18a23a406e12dede7ff158d3d561", "html_url": "https://github.com/rust-lang/rust/commit/8053f6319a6c18a23a406e12dede7ff158d3d561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8053f6319a6c18a23a406e12dede7ff158d3d561/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec86708caa23dda718f58a52d9159bc40201b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec86708caa23dda718f58a52d9159bc40201b7a", "html_url": "https://github.com/rust-lang/rust/commit/1ec86708caa23dda718f58a52d9159bc40201b7a"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "cd91b85689b30efede4c8b2efd738877960098d3", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8053f6319a6c18a23a406e12dede7ff158d3d561/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8053f6319a6c18a23a406e12dede7ff158d3d561/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=8053f6319a6c18a23a406e12dede7ff158d3d561", "patch": "@@ -16,7 +16,7 @@ use std::fmt;\n use std::u32;\n \n newtype_index! {\n-    pub struct CrateNum {\n+    pub struct CrateId {\n         ENCODABLE = custom\n     }\n }\n@@ -38,7 +38,7 @@ pub enum CrateNum {\n impl ::std::fmt::Debug for CrateNum {\n     fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n         match self {\n-            CrateNum::Index(id) => write!(fmt, \"crate{}\", id.0),\n+            CrateNum::Index(id) => write!(fmt, \"crate{}\", id.private),\n             CrateNum::Invalid => write!(fmt, \"invalid crate\"),\n             CrateNum::BuiltinMacros => write!(fmt, \"bultin macros crate\"),\n             CrateNum::ReservedForIncrCompCache => write!(fmt, \"crate for decoding incr comp cache\"),\n@@ -48,7 +48,7 @@ impl ::std::fmt::Debug for CrateNum {\n \n /// Item definitions in the currently-compiled crate would have the CrateNum\n /// LOCAL_CRATE in their DefId.\n-pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId(0));\n+pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32_const(0));\n \n \n impl Idx for CrateNum {\n@@ -71,13 +71,35 @@ impl CrateNum {\n         CrateNum::from_usize(x)\n     }\n \n+    pub fn from_usize(x: usize) -> CrateNum {\n+        CrateNum::Index(CrateId::from_usize(x))\n+    }\n+\n+    pub fn from_u32(x: u32) -> CrateNum {\n+        CrateNum::Index(CrateId::from_u32(x))\n+    }\n+\n+    pub fn as_usize(self) -> usize {\n+        match self {\n+            CrateNum::Index(id) => id.as_usize(),\n+            _ => bug!(\"tried to get index of nonstandard crate {:?}\", self),\n+        }\n+    }\n+\n+    pub fn as_u32(self) -> u32 {\n+        match self {\n+            CrateNum::Index(id) => id.as_u32(),\n+            _ => bug!(\"tried to get index of nonstandard crate {:?}\", self),\n+        }\n+    }\n+\n     pub fn as_def_id(&self) -> DefId { DefId { krate: *self, index: CRATE_DEF_INDEX } }\n }\n \n impl fmt::Display for CrateNum {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self {\n-            CrateNum::Index(id) => fmt::Display::fmt(&id.0, f),\n+            CrateNum::Index(id) => fmt::Display::fmt(&id.private, f),\n             CrateNum::Invalid => write!(f, \"invalid crate\"),\n             CrateNum::BuiltinMacros => write!(f, \"bultin macros crate\"),\n             CrateNum::ReservedForIncrCompCache => write!(f, \"crate for decoding incr comp cache\"),"}, {"sha": "56960675b74153f3273dfbf47512b8e2140f6986", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8053f6319a6c18a23a406e12dede7ff158d3d561/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8053f6319a6c18a23a406e12dede7ff158d3d561/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=8053f6319a6c18a23a406e12dede7ff158d3d561", "patch": "@@ -143,7 +143,7 @@ pub enum ScopeData {\n ///   and thus does not include EXPR_2, but covers the `...`.\n \n newtype_index! {\n-    pub struct FirstStatementIndex;\n+    pub struct FirstStatementIndex { .. }\n }\n \n impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });"}]}