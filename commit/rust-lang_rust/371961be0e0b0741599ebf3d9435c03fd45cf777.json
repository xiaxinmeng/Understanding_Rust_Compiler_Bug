{"sha": "371961be0e0b0741599ebf3d9435c03fd45cf777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTk2MWJlMGUwYjA3NDE1OTllYmYzZDk0MzVjMDNmZDQ1Y2Y3Nzc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-01T11:34:19Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-01T11:34:19Z"}, "message": "Improve goto definition for MBE", "tree": {"sha": "21ffd6c02196fc8419abf15f1206b9608378b234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ffd6c02196fc8419abf15f1206b9608378b234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371961be0e0b0741599ebf3d9435c03fd45cf777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371961be0e0b0741599ebf3d9435c03fd45cf777", "html_url": "https://github.com/rust-lang/rust/commit/371961be0e0b0741599ebf3d9435c03fd45cf777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371961be0e0b0741599ebf3d9435c03fd45cf777/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1ec865fb931ffd789e2caa9e2ce82d1df97c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c1ec865fb931ffd789e2caa9e2ce82d1df97c4d", "html_url": "https://github.com/rust-lang/rust/commit/6c1ec865fb931ffd789e2caa9e2ce82d1df97c4d"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "51913d37bd1d4a68eb06c46984b2569d220058a7", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=371961be0e0b0741599ebf3d9435c03fd45cf777", "patch": "@@ -828,7 +828,7 @@ where\n                     .ast_id(e)\n                     .with_file_id(self.current_file_id);\n \n-                if let Some(def) = self.resolver.resolve_macro_call(path) {\n+                if let Some(def) = self.resolver.resolve_macro_call(self.db, path) {\n                     let call_id = MacroCallLoc { def, ast_id }.id(self.db);\n                     let file_id = call_id.as_file(MacroFileKind::Expr);\n                     if let Some(node) = self.db.parse_or_expand(file_id) {"}, {"sha": "6b1160aa7f1fd16aec28df38ff1242e1e25a4848", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=371961be0e0b0741599ebf3d9435c03fd45cf777", "patch": "@@ -320,8 +320,22 @@ impl CrateDefMap {\n         (res.resolved_def, res.segment_index)\n     }\n \n-    pub(crate) fn find_macro(&self, name: &Name) -> Option<MacroDefId> {\n-        self.public_macros.get(name).or(self.local_macros.get(name)).map(|it| *it)\n+    pub(crate) fn find_macro(\n+        &self,\n+        db: &impl DefDatabase,\n+        original_module: CrateModuleId,\n+        path: &Path,\n+    ) -> Option<MacroDefId> {\n+        let name = path.expand_macro_expr()?;\n+        // search local first\n+        // FIXME: Remove public_macros check when we have a correct local_macors implementation\n+        let local = self.public_macros.get(&name).or(self.local_macros.get(&name)).map(|it| *it);\n+        if local.is_some() {\n+            return local;\n+        }\n+\n+        let res = self.resolve_path_fp_with_macro(db, ResolveMode::Other, original_module, path);\n+        res.resolved_def.right().map(|m| m.id)\n     }\n \n     // Returns Yes if we are sure that additions to `ItemMap` wouldn't change"}, {"sha": "0f6ee7f47009033c860bba8f4b11e6b398cb4d02", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=371961be0e0b0741599ebf3d9435c03fd45cf777", "patch": "@@ -130,9 +130,13 @@ impl Resolver {\n         resolution\n     }\n \n-    pub(crate) fn resolve_macro_call(&self, path: Option<Path>) -> Option<MacroDefId> {\n-        let name = path.and_then(|path| path.expand_macro_expr()).unwrap_or_else(Name::missing);\n-        self.module()?.0.find_macro(&name)\n+    pub(crate) fn resolve_macro_call(\n+        &self,\n+        db: &impl HirDatabase,\n+        path: Option<Path>,\n+    ) -> Option<MacroDefId> {\n+        let m = self.module()?;\n+        m.0.find_macro(db, m.1, &path?)\n     }\n \n     /// Returns the resolved path segments"}, {"sha": "75ed2de6cd9b1383fe9bc17137543f470b57b709", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=371961be0e0b0741599ebf3d9435c03fd45cf777", "patch": "@@ -283,8 +283,13 @@ impl SourceAnalyzer {\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n-    pub fn resolve_macro_call(&self, macro_call: &ast::MacroCall) -> Option<MacroByExampleDef> {\n-        let id = self.resolver.resolve_macro_call(macro_call.path().and_then(Path::from_ast))?;\n+    pub fn resolve_macro_call(\n+        &self,\n+        db: &impl HirDatabase,\n+        macro_call: &ast::MacroCall,\n+    ) -> Option<MacroByExampleDef> {\n+        let id =\n+            self.resolver.resolve_macro_call(db, macro_call.path().and_then(Path::from_ast))?;\n         Some(MacroByExampleDef { id })\n     }\n "}, {"sha": "e72b7a6e7a8c09b1a19f91acce3614d77e35fdd9", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=371961be0e0b0741599ebf3d9435c03fd45cf777", "patch": "@@ -216,6 +216,29 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_definition_works_for_macros_from_other_crates() {\n+        covers!(goto_definition_works_for_macros);\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            use foo::foo;\n+            fn bar() {\n+                <|>foo!();\n+            }\n+\n+            //- /foo/lib.rs\n+            #[macro_export]\n+            macro_rules! foo {\n+                () => {             \n+                    {}\n+                };\n+            }            \n+            \",\n+            \"foo MACRO_CALL FileId(2) [0; 79) [29; 32)\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_definition_works_for_methods() {\n         covers!(goto_definition_works_for_methods);"}, {"sha": "90972bc5892be055c742224b50446521e5768b91", "filename": "crates/ra_ide_api/src/name_ref_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371961be0e0b0741599ebf3d9435c03fd45cf777/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs?ref=371961be0e0b0741599ebf3d9435c03fd45cf777", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn classify_name_ref(\n         .and_then(ast::MacroCall::cast)\n     {\n         tested_by!(goto_definition_works_for_macros);\n-        if let Some(mac) = analyzer.resolve_macro_call(macro_call) {\n+        if let Some(mac) = analyzer.resolve_macro_call(db, macro_call) {\n             return Some(Macro(mac));\n         }\n     }"}]}