{"sha": "fbdd3b2ef6196f236a8333b7435f1b31390c0194", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZGQzYjJlZjYxOTZmMjM2YTgzMzNiNzQzNWYxYjMxMzkwYzAxOTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-27T07:41:55Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-28T13:11:56Z"}, "message": "sync: Rename arc::Condvar to arc::ArcCondvar.\n\nThe sync submodule also has a `Condvar` type, and its reexport was\nshadowing the `arc` type, making it crate-private.", "tree": {"sha": "b66a34d5eead7dca6e19e7bcbd3f59b72208e601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66a34d5eead7dca6e19e7bcbd3f59b72208e601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbdd3b2ef6196f236a8333b7435f1b31390c0194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdd3b2ef6196f236a8333b7435f1b31390c0194", "html_url": "https://github.com/rust-lang/rust/commit/fbdd3b2ef6196f236a8333b7435f1b31390c0194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbdd3b2ef6196f236a8333b7435f1b31390c0194/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "859277dfdb481c35824acdcea30fb72628fb1073", "url": "https://api.github.com/repos/rust-lang/rust/commits/859277dfdb481c35824acdcea30fb72628fb1073", "html_url": "https://github.com/rust-lang/rust/commit/859277dfdb481c35824acdcea30fb72628fb1073"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "17a35f331705d2bc29153213fc9f77cca9034dd3", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fbdd3b2ef6196f236a8333b7435f1b31390c0194/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdd3b2ef6196f236a8333b7435f1b31390c0194/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=fbdd3b2ef6196f236a8333b7435f1b31390c0194", "patch": "@@ -49,14 +49,15 @@ use std::kinds::marker;\n use std::sync::arc::UnsafeArc;\n use std::task;\n \n-/// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n-pub struct Condvar<'a> {\n+/// As sync::condvar, a mechanism for unlock-and-descheduling and\n+/// signaling, for use with the Arc types.\n+pub struct ArcCondvar<'a> {\n     priv is_mutex: bool,\n     priv failed: &'a bool,\n     priv cond: &'a sync::Condvar<'a>\n }\n \n-impl<'a> Condvar<'a> {\n+impl<'a> ArcCondvar<'a> {\n     /// Atomically exit the associated Arc and block until a signal is sent.\n     #[inline]\n     pub fn wait(&self) { self.wait_on(0) }\n@@ -219,14 +220,14 @@ impl<T:Send> MutexArc<T> {\n \n     /// As access(), but with a condvar, as sync::mutex.lock_cond().\n     #[inline]\n-    pub fn access_cond<U>(&self, blk: |x: &mut T, c: &Condvar| -> U) -> U {\n+    pub fn access_cond<U>(&self, blk: |x: &mut T, c: &ArcCondvar| -> U) -> U {\n         let state = self.x.get();\n         unsafe {\n             (&(*state).lock).lock_cond(|cond| {\n                 check_poison(true, (*state).failed);\n                 let _z = PoisonOnFail::new(&mut (*state).failed);\n                 blk(&mut (*state).data,\n-                    &Condvar {is_mutex: true,\n+                    &ArcCondvar {is_mutex: true,\n                             failed: &(*state).failed,\n                             cond: cond })\n             })\n@@ -345,15 +346,15 @@ impl<T:Freeze + Send> RWArc<T> {\n     /// As write(), but with a condvar, as sync::rwlock.write_cond().\n     #[inline]\n     pub fn write_cond<U>(&self,\n-                         blk: |x: &mut T, c: &Condvar| -> U)\n+                         blk: |x: &mut T, c: &ArcCondvar| -> U)\n                          -> U {\n         unsafe {\n             let state = self.x.get();\n             (*borrow_rwlock(state)).write_cond(|cond| {\n                 check_poison(false, (*state).failed);\n                 let _z = PoisonOnFail::new(&mut (*state).failed);\n                 blk(&mut (*state).data,\n-                    &Condvar {is_mutex: false,\n+                    &ArcCondvar {is_mutex: false,\n                               failed: &(*state).failed,\n                               cond: cond})\n             })\n@@ -481,7 +482,7 @@ impl<'a, T:Freeze + Send> RWWriteMode<'a, T> {\n \n     /// Access the pre-downgrade RWArc in write mode with a condvar.\n     pub fn write_cond<U>(&mut self,\n-                         blk: |x: &mut T, c: &Condvar| -> U)\n+                         blk: |x: &mut T, c: &ArcCondvar| -> U)\n                          -> U {\n         match *self {\n             RWWriteMode {\n@@ -491,7 +492,7 @@ impl<'a, T:Freeze + Send> RWWriteMode<'a, T> {\n             } => {\n                 token.write_cond(|cond| {\n                     unsafe {\n-                        let cvar = Condvar {\n+                        let cvar = ArcCondvar {\n                             is_mutex: false,\n                             failed: &*poison.flag,\n                             cond: cond\n@@ -915,7 +916,7 @@ mod tests {\n         // rwarc gives us extra shared state to help check for the race.\n         // If you want to see this test fail, go to sync.rs and replace the\n         // line in RWLock::write_cond() that looks like:\n-        //     \"blk(&Condvar { order: opt_lock, ..*cond })\"\n+        //     \"blk(&ArcCondvar { order: opt_lock, ..*cond })\"\n         // with just \"blk(cond)\".\n         let x = RWArc::new(true);\n         let (wp, wc) = Chan::new();"}, {"sha": "80abcce0df35024736b5886c60893330c582a271", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbdd3b2ef6196f236a8333b7435f1b31390c0194/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdd3b2ef6196f236a8333b7435f1b31390c0194/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=fbdd3b2ef6196f236a8333b7435f1b31390c0194", "patch": "@@ -17,7 +17,7 @@\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n \n-pub use arc::{Arc, MutexArc, RWArc, RWWriteMode, RWReadMode, Condvar, CowArc};\n+pub use arc::{Arc, MutexArc, RWArc, RWWriteMode, RWReadMode, ArcCondvar, CowArc};\n pub use sync::{Mutex, RWLock, Condvar, Semaphore, RWLockWriteMode,\n     RWLockReadMode, Barrier, one, mutex};\n pub use comm::{DuplexStream, SyncChan, SyncPort, rendezvous};"}]}