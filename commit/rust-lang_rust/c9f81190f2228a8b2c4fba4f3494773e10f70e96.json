{"sha": "c9f81190f2228a8b2c4fba4f3494773e10f70e96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjgxMTkwZjIyMjhhOGIyYzRmYmE0ZjM0OTQ3NzNlMTBmNzBlOTY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T05:49:56Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T06:02:47Z"}, "message": "Refactor `ext::base::Resolver::add_ext` to only define macros in the crate root.", "tree": {"sha": "4b9abf79522c6465add453b6fd1c4108cb6795c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b9abf79522c6465add453b6fd1c4108cb6795c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f81190f2228a8b2c4fba4f3494773e10f70e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f81190f2228a8b2c4fba4f3494773e10f70e96", "html_url": "https://github.com/rust-lang/rust/commit/c9f81190f2228a8b2c4fba4f3494773e10f70e96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f81190f2228a8b2c4fba4f3494773e10f70e96/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797eb57aa8a82716dc493a98e0ba595da0253001", "url": "https://api.github.com/repos/rust-lang/rust/commits/797eb57aa8a82716dc493a98e0ba595da0253001", "html_url": "https://github.com/rust-lang/rust/commit/797eb57aa8a82716dc493a98e0ba595da0253001"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "4068c34a7f9087052872abdad7bfdd6949f8dfa4", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9f81190f2228a8b2c4fba4f3494773e10f70e96/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f81190f2228a8b2c4fba4f3494773e10f70e96/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=c9f81190f2228a8b2c4fba4f3494773e10f70e96", "patch": "@@ -74,25 +74,28 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.session.span_err(def.span, \"user-defined macros may not be named `macro_rules`\");\n         }\n         if def.use_locally {\n+            self.macro_names.insert(def.ident.name);\n             let ext = macro_rules::compile(&self.session.parse_sess, &def);\n-            self.add_ext(scope, def.ident, Rc::new(ext));\n+\n+            let mut module = self.expansion_data[&scope].module;\n+            while module.macros_escape {\n+                module = module.parent.unwrap();\n+            }\n+            module.macros.borrow_mut().insert(def.ident.name, NameBinding {\n+                ext: Rc::new(ext),\n+            });\n         }\n         if def.export {\n             def.id = self.next_node_id();\n             self.exported_macros.push(def);\n         }\n     }\n \n-    fn add_ext(&mut self, scope: Mark, ident: ast::Ident, ext: Rc<SyntaxExtension>) {\n+    fn add_ext(&mut self, ident: ast::Ident, ext: Rc<SyntaxExtension>) {\n         if let NormalTT(..) = *ext {\n             self.macro_names.insert(ident.name);\n         }\n-\n-        let mut module = self.expansion_data[&scope].module;\n-        while module.macros_escape {\n-            module = module.parent.unwrap();\n-        }\n-        module.macros.borrow_mut().insert(ident.name, NameBinding {\n+        self.graph_root.macros.borrow_mut().insert(ident.name, NameBinding {\n             ext: ext,\n         });\n     }"}, {"sha": "b56018e1e9dcd98b33e30a6c421e47559ef1bdd4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9f81190f2228a8b2c4fba4f3494773e10f70e96/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f81190f2228a8b2c4fba4f3494773e10f70e96/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c9f81190f2228a8b2c4fba4f3494773e10f70e96", "patch": "@@ -519,7 +519,7 @@ pub trait Resolver {\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion);\n     fn add_macro(&mut self, scope: Mark, def: ast::MacroDef);\n-    fn add_ext(&mut self, scope: Mark, ident: ast::Ident, ext: Rc<SyntaxExtension>);\n+    fn add_ext(&mut self, ident: ast::Ident, ext: Rc<SyntaxExtension>);\n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>);\n \n     fn find_attr_invoc(&mut self, attrs: &mut Vec<Attribute>) -> Option<Attribute>;\n@@ -535,7 +535,7 @@ impl Resolver for DummyResolver {\n \n     fn visit_expansion(&mut self, _invoc: Mark, _expansion: &Expansion) {}\n     fn add_macro(&mut self, _scope: Mark, _def: ast::MacroDef) {}\n-    fn add_ext(&mut self, _scope: Mark, _ident: ast::Ident, _ext: Rc<SyntaxExtension>) {}\n+    fn add_ext(&mut self, _ident: ast::Ident, _ext: Rc<SyntaxExtension>) {}\n     fn add_expansions_at_stmt(&mut self, _id: ast::NodeId, _macros: Vec<Mark>) {}\n \n     fn find_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>) -> Option<Attribute> { None }\n@@ -749,7 +749,7 @@ impl<'a> ExtCtxt<'a> {\n \n         for (name, extension) in user_exts {\n             let ident = ast::Ident::with_empty_ctxt(name);\n-            self.resolver.add_ext(Mark::root(), ident, Rc::new(extension));\n+            self.resolver.add_ext(ident, Rc::new(extension));\n         }\n \n         let mut module = ModuleData {"}, {"sha": "6e4f3dde4bd24d7153abc4f71ba0277e347d31e5", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9f81190f2228a8b2c4fba4f3494773e10f70e96/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f81190f2228a8b2c4fba4f3494773e10f70e96/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=c9f81190f2228a8b2c4fba4f3494773e10f70e96", "patch": "@@ -51,13 +51,12 @@ pub mod deriving;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::ext::base::{MacroExpanderFn, NormalTT, IdentTT, MultiModifier};\n-use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules::MacroRulesExpander;\n use syntax::parse::token::intern;\n \n pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver, enable_quotes: bool) {\n     let mut register = |name, ext| {\n-        resolver.add_ext(Mark::root(), ast::Ident::with_empty_ctxt(intern(name)), Rc::new(ext));\n+        resolver.add_ext(ast::Ident::with_empty_ctxt(intern(name)), Rc::new(ext));\n     };\n \n     register(\"macro_rules\", IdentTT(Box::new(MacroRulesExpander), None, false));"}]}