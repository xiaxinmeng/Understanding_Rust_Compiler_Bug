{"sha": "abe5f7b95a1d856b69eb68344426e29d30918aea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTVmN2I5NWExZDg1NmI2OWViNjgzNDQ0MjZlMjlkMzA5MThhZWE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-05T04:03:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-06-14T20:14:50Z"}, "message": "save-analysis: move fields to the API", "tree": {"sha": "f5803ae369ed84749832e9adf206a220798893a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5803ae369ed84749832e9adf206a220798893a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe5f7b95a1d856b69eb68344426e29d30918aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe5f7b95a1d856b69eb68344426e29d30918aea", "html_url": "https://github.com/rust-lang/rust/commit/abe5f7b95a1d856b69eb68344426e29d30918aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe5f7b95a1d856b69eb68344426e29d30918aea/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc44423566726260e316d879a0a1dd9d3fb92e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc44423566726260e316d879a0a1dd9d3fb92e07", "html_url": "https://github.com/rust-lang/rust/commit/cc44423566726260e316d879a0a1dd9d3fb92e07"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "6f6d02e95a486278a62200f3eaee5c7f6f43b334", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/abe5f7b95a1d856b69eb68344426e29d30918aea/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe5f7b95a1d856b69eb68344426e29d30918aea/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=abe5f7b95a1d856b69eb68344426e29d30918aea", "patch": "@@ -437,30 +437,20 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n     fn process_struct_field_def(&mut self,\n                                 field: &ast::StructField,\n-                                qualname: &str,\n-                                scope_id: NodeId) {\n-        match field.node.kind {\n-            ast::NamedField(ident, _) => {\n-                let name = get_ident(ident);\n-                let qualname = format!(\"{}::{}\", qualname, name);\n-                let typ =\n-                    ppaux::ty_to_string(\n-                        &self.analysis.ty_cx,\n-                        *self.analysis.ty_cx.node_types().get(&field.node.id).unwrap());\n-                match self.span.sub_span_before_token(field.span, token::Colon) {\n-                    Some(sub_span) => self.fmt.field_str(field.span,\n-                                                         Some(sub_span),\n-                                                         field.node.id,\n-                                                         &name,\n-                                                         &qualname,\n-                                                         &typ,\n-                                                         scope_id),\n-                    None => self.sess.span_bug(field.span,\n-                                               &format!(\"Could not find sub-span for field {}\",\n-                                                       qualname)),\n-                }\n-            },\n-            _ => (),\n+                                parent_id: NodeId) {\n+        let field_data = self.save_ctxt.get_field_data(field, parent_id);\n+        if let Some(field_data) = field_data {\n+            if let super::Data::VariableData(field_data) = field_data {\n+                self.fmt.field_str(field.span,\n+                                   Some(field_data.span),\n+                                   field_data.id,\n+                                   &field_data.name,\n+                                   &field_data.qualname,\n+                                   &field_data.type_value,\n+                                   field_data.scope);\n+            } else {\n+                self.sess.span_bug(field.span, \"expected VariableData\");\n+            }\n         }\n     }\n \n@@ -593,8 +583,8 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n         // fields\n         for field in &def.fields {\n-            self.process_struct_field_def(field, &qualname, item.id);\n-            self.visit_ty(&*field.node.ty);\n+            self.process_struct_field_def(field, item.id);\n+            self.visit_ty(&field.node.ty);\n         }\n \n         self.process_generic_params(ty_params, item.span, &qualname, item.id);\n@@ -648,7 +638,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                                                     item.id);\n \n                         for field in &struct_def.fields {\n-                            self.process_struct_field_def(field, &qualname, variant.node.id);\n+                            self.process_struct_field_def(field, variant.node.id);\n                             self.visit_ty(&*field.node.ty);\n                         }\n                     }"}, {"sha": "6d3de80ab14b698a9e2bea17e4baee8d393c1c98", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/abe5f7b95a1d856b69eb68344426e29d30918aea/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe5f7b95a1d856b69eb68344426e29d30918aea/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=abe5f7b95a1d856b69eb68344426e29d30918aea", "patch": "@@ -23,9 +23,11 @@ use syntax::parse::token::{self, get_ident, keywords};\n use syntax::visit::{self, Visitor};\n use syntax::print::pprust::ty_to_string;\n \n+use util::ppaux;\n \n use self::span_utils::SpanUtils;\n \n+\n mod span_utils;\n mod recorder;\n \n@@ -47,7 +49,7 @@ pub struct CrateData {\n pub enum Data {\n     /// Data for all kinds of functions and methods.\n     FunctionData(FunctionData),\n-    /// Data for local and global variables (consts and statics).\n+    /// Data for local and global variables (consts and statics), and fields.\n     VariableData(VariableData),\n     /// Data for modules.\n     ModData(ModData),\n@@ -218,6 +220,33 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    // FIXME: we ought to be able to get the parent id ourselves, but we can't\n+    // for now.\n+    pub fn get_field_data(&self, field: &ast::StructField, parent: NodeId) -> Option<Data> {\n+        match field.node.kind {\n+            ast::NamedField(ident, _) => {\n+                let name = get_ident(ident);\n+                let qualname = format!(\"::{}::{}\",\n+                                       self.analysis.ty_cx.map.path_to_string(parent),\n+                                       name);\n+                let typ = ppaux::ty_to_string(&self.analysis.ty_cx,\n+                                              *self.analysis.ty_cx.node_types()\n+                                                  .get(&field.node.id).unwrap());\n+                let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n+                Some(Data::VariableData(VariableData {\n+                    id: field.node.id,\n+                    name: get_ident(ident).to_string(),\n+                    qualname: qualname,\n+                    span: sub_span.unwrap(),\n+                    scope: parent,\n+                    value: \"\".to_owned(),\n+                    type_value: typ,\n+                }))\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     pub fn get_expr_data(&self, expr: &ast::Expr) -> Data {\n         match expr.node {\n             ast::ExprField(ref sub_ex, ident) => {"}]}