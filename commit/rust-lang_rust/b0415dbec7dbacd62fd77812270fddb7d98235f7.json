{"sha": "b0415dbec7dbacd62fd77812270fddb7d98235f7", "node_id": "C_kwDOAAsO6NoAKGIwNDE1ZGJlYzdkYmFjZDYyZmQ3NzgxMjI3MGZkZGI3ZDk4MjM1Zjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-22T04:54:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-22T04:54:16Z"}, "message": "Rollup merge of #111810 - compiler-errors:less-macro, r=thomcc\n\nDon't use inner macro in `marker_impls`\n\nJust recurse instead of having to define an inner macro to avoid the problem with expansion binders being misnumbered between the `$meta` and `$T` variables.\n\ncc `@Veykril` this should fix rust-lang/rust-analyzer#14862 since we've gotten rid of the inner macro.", "tree": {"sha": "b1e88a4a06fed626152d20129dab8176ff6e8e88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1e88a4a06fed626152d20129dab8176ff6e8e88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0415dbec7dbacd62fd77812270fddb7d98235f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkavV4CRBK7hj4Ov3rIwAAK5cIAHzyufYXaQeh+h5TtB6tCYDx\nyB5uAQAYT0B4DxaB3IWCiaAWYGYTPSSW95TXjexORrazRDs/qCsEyf6b0cqlth5f\nuHiLAODBUztvGUWvPq/hluOmWSNhK0+sLpmkrHy/S5Qlf57ayImFn+IEgAYQxEYR\n5+fub68Tihbn3zN9Wg6RzJgfgZ1mzwEvGgRiQ7u/je0g/C1xWFSwmfRl0bNzQ914\nVG5hMVjDWmrregCj7FeNxMf/E2E1nYRBl/bOMI4Un7CWhYVUXYwy18sLgENxNBXv\npG1Y56Qx3SEcgTJTcH+4ax9ZiT2pJDu8mr7yRksiqlmnT5G1x8pyN/r/6MGv5vQ=\n=DixG\n-----END PGP SIGNATURE-----\n", "payload": "tree b1e88a4a06fed626152d20129dab8176ff6e8e88\nparent 3869b7b12df0320d869479768c540db1a220f7a4\nparent e9a5a9d7d5502ac6847328a12c9f319f3bb5a903\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684731256 +0200\ncommitter GitHub <noreply@github.com> 1684731256 +0200\n\nRollup merge of #111810 - compiler-errors:less-macro, r=thomcc\n\nDon't use inner macro in `marker_impls`\n\nJust recurse instead of having to define an inner macro to avoid the problem with expansion binders being misnumbered between the `$meta` and `$T` variables.\n\ncc `@Veykril` this should fix rust-lang/rust-analyzer#14862 since we've gotten rid of the inner macro.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0415dbec7dbacd62fd77812270fddb7d98235f7", "html_url": "https://github.com/rust-lang/rust/commit/b0415dbec7dbacd62fd77812270fddb7d98235f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0415dbec7dbacd62fd77812270fddb7d98235f7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3869b7b12df0320d869479768c540db1a220f7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3869b7b12df0320d869479768c540db1a220f7a4", "html_url": "https://github.com/rust-lang/rust/commit/3869b7b12df0320d869479768c540db1a220f7a4"}, {"sha": "e9a5a9d7d5502ac6847328a12c9f319f3bb5a903", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a5a9d7d5502ac6847328a12c9f319f3bb5a903", "html_url": "https://github.com/rust-lang/rust/commit/e9a5a9d7d5502ac6847328a12c9f319f3bb5a903"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "8dab8d1a6923f39272cb39a85b82c62fface5850", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0415dbec7dbacd62fd77812270fddb7d98235f7/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0415dbec7dbacd62fd77812270fddb7d98235f7/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=b0415dbec7dbacd62fd77812270fddb7d98235f7", "patch": "@@ -43,27 +43,17 @@ use crate::hash::Hasher;\n /// ```\n #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n macro marker_impls {\n-    ( $(#[$($meta:tt)*])* $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n-        // This inner macro is needed because... idk macros are weird.\n-        // It allows repeating `meta` on all impls.\n-        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n-        macro _impl {\n-            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n-                $(#[$($meta)*])* impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n-            }\n-        }\n-        $( _impl! { $({$($bounds)*})? $T } )+\n+    ( $(#[$($meta:tt)*])* $Trait:ident for $({$($bounds:tt)*})? $T:ty $(, $($rest:tt)*)? ) => {\n+        $(#[$($meta)*])* impl< $($($bounds)*)? > $Trait for $T {}\n+        marker_impls! { $(#[$($meta)*])* $Trait for $($($rest)*)? }\n     },\n-    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n-        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n-        macro _impl {\n-            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n-                $(#[$($meta)*])* unsafe impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n-            }\n-        }\n+    ( $(#[$($meta:tt)*])* $Trait:ident for ) => {},\n \n-        $( _impl! { $({$($bounds)*})? $T } )+\n+    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for $({$($bounds:tt)*})? $T:ty $(, $($rest:tt)*)? ) => {\n+        $(#[$($meta)*])* unsafe impl< $($($bounds)*)? > $Trait for $T {}\n+        marker_impls! { $(#[$($meta)*])* unsafe $Trait for $($($rest)*)? }\n     },\n+    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for ) => {},\n }\n \n /// Types that can be transferred across thread boundaries."}]}