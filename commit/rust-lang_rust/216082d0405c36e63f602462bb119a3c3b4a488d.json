{"sha": "216082d0405c36e63f602462bb119a3c3b4a488d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNjA4MmQwNDA1YzM2ZTYzZjYwMjQ2MmJiMTE5YTNjM2I0YTQ4OGQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-06T01:31:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-06T01:31:24Z"}, "message": "Translate ast.box unary expressions and support extraction of TypeRefs from AST annotations.", "tree": {"sha": "abf6a632c69178ddad0dfd8049b970ec48e86dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf6a632c69178ddad0dfd8049b970ec48e86dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/216082d0405c36e63f602462bb119a3c3b4a488d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/216082d0405c36e63f602462bb119a3c3b4a488d", "html_url": "https://github.com/rust-lang/rust/commit/216082d0405c36e63f602462bb119a3c3b4a488d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/216082d0405c36e63f602462bb119a3c3b4a488d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb3861c7076345f2e43497e5079e9a970571ff0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb3861c7076345f2e43497e5079e9a970571ff0", "html_url": "https://github.com/rust-lang/rust/commit/ffb3861c7076345f2e43497e5079e9a970571ff0"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "79ffc3e069a315c00b65f0a2ae56c5f307d133b7", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/216082d0405c36e63f602462bb119a3c3b4a488d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216082d0405c36e63f602462bb119a3c3b4a488d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=216082d0405c36e63f602462bb119a3c3b4a488d", "patch": "@@ -451,7 +451,20 @@ impure fn trans_lit(@block_ctxt cx, &ast.lit lit) -> result {\n     }\n }\n \n-impure fn trans_unary(@block_ctxt cx, ast.unop op, &ast.expr e) -> result {\n+fn node_type(@trans_ctxt cx, &ast.ann a) -> TypeRef {\n+    alt (a) {\n+        case (ast.ann_none) {\n+            log \"missing type annotation\";\n+            fail;\n+        }\n+        case (ast.ann_type(?t)) {\n+            ret type_of(cx, t);\n+        }\n+    }\n+}\n+\n+impure fn trans_unary(@block_ctxt cx, ast.unop op,\n+                      &ast.expr e, &ast.ann a) -> result {\n \n     auto sub = trans_expr(cx, e);\n \n@@ -469,6 +482,15 @@ impure fn trans_unary(@block_ctxt cx, ast.unop op, &ast.expr e) -> result {\n             sub.val = cx.build.Neg(sub.val);\n             ret sub;\n         }\n+        case (ast.box) {\n+            auto e_ty = node_type(cx.fcx.tcx, a);\n+            auto box_ty = T_box(e_ty);\n+            sub.val = cx.build.Malloc(box_ty);\n+            auto rc = sub.bcx.build.GEP(sub.val,\n+                                        vec(C_int(0),\n+                                            C_int(abi.box_rc_field_refcnt)));\n+            ret res(sub.bcx, cx.build.Store(C_int(1), rc));\n+        }\n     }\n     cx.fcx.tcx.sess.unimpl(\"expr variant in trans_unary\");\n     fail;\n@@ -759,8 +781,8 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n             ret trans_lit(cx, *lit);\n         }\n \n-        case (ast.expr_unary(?op, ?x, _)) {\n-            ret trans_unary(cx, op, *x);\n+        case (ast.expr_unary(?op, ?x, ?ann)) {\n+            ret trans_unary(cx, op, *x, ann);\n         }\n \n         case (ast.expr_binary(?op, ?x, ?y, _)) {"}]}