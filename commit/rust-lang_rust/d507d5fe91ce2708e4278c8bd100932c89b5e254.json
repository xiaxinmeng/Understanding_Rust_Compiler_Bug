{"sha": "d507d5fe91ce2708e4278c8bd100932c89b5e254", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MDdkNWZlOTFjZTI3MDhlNDI3OGM4YmQxMDA5MzJjODliNWUyNTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-24T15:55:02Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-24T19:13:26Z"}, "message": "Remove res idents from stdlib", "tree": {"sha": "66fc8b7a62fde94763cfceae9426ec59a1587825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66fc8b7a62fde94763cfceae9426ec59a1587825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d507d5fe91ce2708e4278c8bd100932c89b5e254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d507d5fe91ce2708e4278c8bd100932c89b5e254", "html_url": "https://github.com/rust-lang/rust/commit/d507d5fe91ce2708e4278c8bd100932c89b5e254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d507d5fe91ce2708e4278c8bd100932c89b5e254/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7fdb509a652f3316888ee6f632740eb00f30e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7fdb509a652f3316888ee6f632740eb00f30e4", "html_url": "https://github.com/rust-lang/rust/commit/3d7fdb509a652f3316888ee6f632740eb00f30e4"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "28ae5b0ee778fe52ed17a7a271985e93e73db239", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=d507d5fe91ce2708e4278c8bd100932c89b5e254", "patch": "@@ -154,11 +154,11 @@ fn to_vec(&t v) -> vec[uint] {\n }\n \n fn to_str(&t v) -> str {\n-    auto res = \"\";\n+    auto rs = \"\";\n     for (uint i in bitv::to_vec(v)) {\n-        if (i == 1u) { res += \"1\"; } else { res += \"0\"; }\n+        if (i == 1u) { rs += \"1\"; } else { rs += \"0\"; }\n     }\n-    ret res;\n+    ret rs;\n }\n \n "}, {"sha": "400a7f4c3c722ccee68d129f8b2c18bc9847fd18", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=d507d5fe91ce2708e4278c8bd100932c89b5e254", "patch": "@@ -95,9 +95,9 @@ mod ct {\n                     i += 1u;\n                 } else {\n                     buf = flush_buf(buf, pieces);\n-                    auto res = parse_conversion(s, i, lim, error);\n-                    pieces += [res._0];\n-                    i = res._1;\n+                    auto rs = parse_conversion(s, i, lim, error);\n+                    pieces += [rs._0];\n+                    i = rs._1;\n                 }\n             } else { buf += curr; i += 1u; }\n         }\n@@ -273,7 +273,7 @@ mod rt {\n     }\n     fn conv_uint(&conv cv, uint u) -> str {\n         auto prec = get_int_precision(cv);\n-        auto res =\n+        auto rs =\n             alt (cv.ty) {\n                 case (ty_default) { uint_to_str_prec(u, 10u, prec) }\n                 case (ty_hex_lower) { uint_to_str_prec(u, 16u, prec) }\n@@ -283,7 +283,7 @@ mod rt {\n                 case (ty_bits) { uint_to_str_prec(u, 2u, prec) }\n                 case (ty_octal) { uint_to_str_prec(u, 8u, prec) }\n             };\n-        ret pad(cv, res, pad_unsigned);\n+        ret pad(cv, rs, pad_unsigned);\n     }\n     fn conv_bool(&conv cv, bool b) -> str {\n         auto s = if (b) { \"true\" } else { \"false\" };"}, {"sha": "281f208070eff70fd960087f90b6b0ff97cf4523", "filename": "src/lib/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=d507d5fe91ce2708e4278c8bd100932c89b5e254", "patch": "@@ -37,7 +37,7 @@ fn find[T, U](&list[T] ls_, fn(&T) -> option::t[U]  f) -> option::t[U] {\n             case (cons(?hd, ?tl)) {\n                 alt (f(hd)) {\n                     case (none) { ls = *tl; }\n-                    case (some(?res)) { ret some(res); }\n+                    case (some(?rs)) { ret some(rs); }\n                 }\n             }\n             case (nil) { break; }"}, {"sha": "9e8885b7c089f8199eaf10e07ec14c21f1924ed7", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=d507d5fe91ce2708e4278c8bd100932c89b5e254", "patch": "@@ -162,15 +162,15 @@ fn mk_sha1() -> sha1 {\n     }\n     fn mk_result(&sha1state st) -> vec[u8] {\n         if (!st.computed) { pad_msg(st); st.computed = true; }\n-        let vec[u8] res = [];\n+        let vec[u8] rs = [];\n         for (u32 hpart in st.h) {\n             auto a = hpart >> 24u32 & 0xFFu32 as u8;\n             auto b = hpart >> 16u32 & 0xFFu32 as u8;\n             auto c = hpart >> 8u32 & 0xFFu32 as u8;\n             auto d = hpart & 0xFFu32 as u8;\n-            res += [a, b, c, d];\n+            rs += [a, b, c, d];\n         }\n-        ret res;\n+        ret rs;\n     }\n     /*\n      * According to the standard, the message must be padded to an even"}, {"sha": "445f1bf70f8d0414c2b1cfeb1d7c77089187c990", "filename": "src/lib/sort.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsort.rs?ref=d507d5fe91ce2708e4278c8bd100932c89b5e254", "patch": "@@ -10,20 +10,20 @@ type lteq[T] = fn(&T, &T) -> bool ;\n \n fn merge_sort[T](lteq[T] le, vec[T] v) -> vec[T] {\n     fn merge[T](lteq[T] le, vec[T] a, vec[T] b) -> vec[T] {\n-        let vec[T] res = [];\n+        let vec[T] rs = [];\n         let uint a_len = len[T](a);\n         let uint a_ix = 0u;\n         let uint b_len = len[T](b);\n         let uint b_ix = 0u;\n         while (a_ix < a_len && b_ix < b_len) {\n             if (le(a.(a_ix), b.(b_ix))) {\n-                res += [a.(a_ix)];\n+                rs += [a.(a_ix)];\n                 a_ix += 1u;\n-            } else { res += [b.(b_ix)]; b_ix += 1u; }\n+            } else { rs += [b.(b_ix)]; b_ix += 1u; }\n         }\n-        res += slice[T](a, a_ix, a_len);\n-        res += slice[T](b, b_ix, b_len);\n-        ret res;\n+        rs += slice[T](a, a_ix, a_len);\n+        rs += slice[T](b, b_ix, b_len);\n+        ret rs;\n     }\n     let uint v_len = len[T](v);\n     if (v_len <= 1u) { ret v; }"}, {"sha": "3477f9d8b5cabd3099cd1da7034bc0893df2f03c", "filename": "src/lib/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=d507d5fe91ce2708e4278c8bd100932c89b5e254", "patch": "@@ -410,10 +410,10 @@ fn push_byte(&mutable str s, u8 b) {\n }\n \n fn unshift_byte(&mutable str s, u8 b) {\n-    auto res = alloc(byte_len(s) + 1u);\n-    res += unsafe_from_byte(b);\n-    res += s;\n-    s = res;\n+    auto rs = alloc(byte_len(s) + 1u);\n+    rs += unsafe_from_byte(b);\n+    rs += s;\n+    s = rs;\n }\n \n fn split(str s, u8 sep) -> vec[str] {"}, {"sha": "2d42abc8f7fc6801928b1b3a67774046d42f97c0", "filename": "src/lib/vec.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d507d5fe91ce2708e4278c8bd100932c89b5e254/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=d507d5fe91ce2708e4278c8bd100932c89b5e254", "patch": "@@ -172,10 +172,10 @@ fn top[T](&array[T] v) -> T {\n fn push[T](&mutable array[T] v, &T t) { v += [t]; }\n \n fn unshift[T](&mutable array[T] v, &T t) {\n-    auto res = alloc[T](len[T](v) + 1u);\n-    res += [t];\n-    res += v;\n-    v = res;\n+    auto rs = alloc[T](len[T](v) + 1u);\n+    rs += [t];\n+    rs += v;\n+    v = rs;\n }\n \n fn grow[T](&mutable array[T] v, uint n, &T initval) {\n@@ -201,17 +201,17 @@ fn grow_init_fn_set[T](&array[T] v, uint index, fn() -> T  init_fn, &T val) {\n }\n \n fn map[T, U](&fn(&T) -> U  f, &vec[T] v) -> vec[U] {\n-    let vec[U] res = alloc[U](len[T](v));\n-    for (T ve in v) { res += [f(ve)]; }\n-    ret res;\n+    let vec[U] rs = alloc[U](len[T](v));\n+    for (T ve in v) { rs += [f(ve)]; }\n+    ret rs;\n }\n \n fn filter_map[T, U](&fn(&T) -> option::t[U]  f, &vec[T] v) -> vec[U] {\n-    let vec[U] res = [];\n+    let vec[U] rs = [];\n     for (T ve in v) {\n-        alt (f(ve)) { case (some(?elt)) { res += [elt]; } case (none) { } }\n+        alt (f(ve)) { case (some(?elt)) { rs += [elt]; } case (none) { } }\n     }\n-    ret res;\n+    ret rs;\n }\n \n fn map2[T, U, V](&operator2[T, U, V] f, &vec[T] v0, &vec[U] v1) -> vec[V] {\n@@ -288,11 +288,11 @@ fn plus_option[T](&mutable vec[T] v, &option::t[T] o) {\n }\n \n fn cat_options[T](&vec[option::t[T]] v) -> vec[T] {\n-    let vec[T] res = [];\n+    let vec[T] rs = [];\n     for (option::t[T] o in v) {\n-        alt (o) { case (none) { } case (some(?t)) { res += [t]; } }\n+        alt (o) { case (none) { } case (some(?t)) { rs += [t]; } }\n     }\n-    ret res;\n+    ret rs;\n }\n \n \n@@ -322,12 +322,12 @@ fn reverse[T](&vec[mutable T] v) {\n \n // Functional vector reversal. Returns a reversed copy of v.\n fn reversed[T](vec[T] v) -> vec[T] {\n-    let vec[T] res = [];\n+    let vec[T] rs = [];\n     auto i = len[T](v);\n-    if (i == 0u) { ret res; } else { i -= 1u; }\n-    while (i != 0u) { push[T](res, v.(i)); i -= 1u; }\n-    push[T](res, v.(0));\n-    ret res;\n+    if (i == 0u) { ret rs; } else { i -= 1u; }\n+    while (i != 0u) { push[T](rs, v.(i)); i -= 1u; }\n+    push[T](rs, v.(0));\n+    ret rs;\n }\n \n "}]}