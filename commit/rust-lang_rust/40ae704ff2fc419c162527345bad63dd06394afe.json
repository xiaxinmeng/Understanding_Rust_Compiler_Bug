{"sha": "40ae704ff2fc419c162527345bad63dd06394afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYWU3MDRmZjJmYzQxOWMxNjI1MjczNDViYWQ2M2RkMDYzOTRhZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-10T20:36:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-10T20:36:57Z"}, "message": "Begin valgrinding run-fail tests\n\nIntroduce a temporary no-valgrind directive for the few that aren't clean", "tree": {"sha": "f01e3d39919426f73d7e754505239dd819b8ba70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01e3d39919426f73d7e754505239dd819b8ba70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ae704ff2fc419c162527345bad63dd06394afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ae704ff2fc419c162527345bad63dd06394afe", "html_url": "https://github.com/rust-lang/rust/commit/40ae704ff2fc419c162527345bad63dd06394afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ae704ff2fc419c162527345bad63dd06394afe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86", "html_url": "https://github.com/rust-lang/rust/commit/0cd607bcbdc70d3d7ccefd5faf830cc8e5d68c86"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "c99a8cc61d29b4b65e23003b3aa1628ff1be9edf", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -185,11 +185,11 @@ CFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n                   --build-base test/compile-fail/ \\\n                   --mode compile-fail \\\n \n-# FIXME (236): run-fail should run under valgrind once unwinding works\n RFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n                   --src-base $$(S)src/test/run-fail/ \\\n                   --build-base test/run-fail/ \\\n                   --mode run-fail \\\n+                  $$(CTEST_RUNTOOL) \\\n \n RPASS_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n                   --src-base $(S)src/test/run-pass/ \\"}, {"sha": "bd250073405bc1a76a784cbe83e5e3cd94407336", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -16,14 +16,18 @@ type test_props = {\n     compile_flags: option::t[str],\n     // If present, the name of a file that this test should match when\n     // pretty-printed\n-    pp_exact: option::t[str]\n+    pp_exact: option::t[str],\n+    // FIXME: no-valgrind is a temporary directive until all of run-fail\n+    // is valgrind-clean\n+    no_valgrind: bool\n };\n \n // Load any test directives embedded in the file\n fn load_props(testfile: &str) -> test_props {\n     let error_patterns = ~[];\n     let compile_flags = option::none;\n     let pp_exact = option::none;\n+    let no_valgrind = false;\n     for each ln: str  in iter_header(testfile) {\n         alt parse_error_pattern(ln) {\n           option::some(ep) { error_patterns += ~[ep]; }\n@@ -37,11 +41,16 @@ fn load_props(testfile: &str) -> test_props {\n         if option::is_none(pp_exact) {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n+\n+        if no_valgrind == false {\n+            no_valgrind = parse_name_directive(ln, \"no-valgrind\");\n+        }\n     }\n     ret {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n-        pp_exact: pp_exact\n+        pp_exact: pp_exact,\n+        no_valgrind: no_valgrind\n     };\n }\n "}, {"sha": "048dbd64b868081559f6edfcebfe35c72b5d652d", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -53,13 +53,22 @@ fn run_rfail_test(cx: &cx, props: &test_props, testfile: &str) {\n     if procres.status != 0 {\n         fatal_procres(\"compilation failed!\", procres); }\n \n-    procres = exec_compiled_test(cx, testfile);\n+    procres = exec_compiled_test(cx, props, testfile);\n \n     if procres.status == 0 {\n         fatal_procres(\"run-fail test didn't produce an error!\",\n                       procres);\n     }\n \n+    // This is the value valgrind returns on failure\n+    // FIXME: Why is this value neither the value we pass to\n+    // valgrind as --error-exitcode (1), nor the value we see as the\n+    // exit code on the command-line (137)?\n+    const valgrind_err: int = 9;\n+    if procres.status == valgrind_err {\n+        fatal_procres(\"run-fail test isn't valgrind-clean!\", procres);\n+    }\n+\n     check_error_patterns(props, testfile, procres);\n }\n \n@@ -69,7 +78,7 @@ fn run_rpass_test(cx: &cx, props: &test_props, testfile: &str) {\n     if procres.status != 0 {\n         fatal_procres(\"compilation failed!\", procres); }\n \n-    procres = exec_compiled_test(cx, testfile);\n+    procres = exec_compiled_test(cx, props, testfile);\n \n \n     if procres.status != 0 { fatal_procres(\"test run failed!\", procres); }\n@@ -219,8 +228,9 @@ fn compile_test(cx: &cx, props: &test_props, testfile: &str) -> procres {\n                     cx.config.compile_lib_path, option::none)\n }\n \n-fn exec_compiled_test(cx: &cx, testfile: &str) -> procres {\n-    compose_and_run(cx, testfile, make_run_args,\n+fn exec_compiled_test(cx: &cx, props: &test_props,\n+                      testfile: &str) -> procres {\n+    compose_and_run(cx, testfile, bind make_run_args(_, props, _),\n                     cx.config.run_lib_path, option::none)\n }\n \n@@ -248,12 +258,17 @@ fn make_exe_name(config: &config, testfile: &str) -> str {\n     output_base_name(config, testfile) + os::exec_suffix()\n }\n \n-fn make_run_args(config: &config, testfile: &str) -> procargs {\n-    // If we've got another tool to run under (valgrind),\n-    // then split apart its command\n-    let args =\n+fn make_run_args(config: &config,\n+                 props: &test_props, testfile: &str) -> procargs {\n+    let toolargs = if !props.no_valgrind {\n+        // If we've got another tool to run under (valgrind),\n+        // then split apart its command\n         split_maybe_args(config.runtool)\n-        + [make_exe_name(config, testfile)];\n+    } else {\n+        []\n+    };\n+\n+    let args = toolargs + [make_exe_name(config, testfile)];\n     ret {prog: args.(0), args: vec::slice(args, 1u, vec::len(args))};\n }\n "}, {"sha": "f238d226b34592484db04070fc4793151dd9037a", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -1,4 +1,3 @@\n-\n-\n // error-pattern:wooooo\n+// no-valgrind\n fn main() { let a = 1; if 1 == 1 { a = 2; } fail \"woooo\" + \"o\"; }\n\\ No newline at end of file"}, {"sha": "d4eb12292a659d327841dacfd76e0c9a8578c65d", "filename": "src/test/run-fail/fmt-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffmt-fail.rs?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:meh\n+// no-valgrind\n use std;\n import std::str;\n "}, {"sha": "a237b0ca39468707817df27552be59f133b346ec", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -1,6 +1,7 @@\n // -*- rust -*-\n \n // error-pattern:1 == 2\n+// no-valgrind\n \n fn child() { assert (1 == 2); }\n "}, {"sha": "64d2bf48a6a6c766e70be32d8c3163ef750f1629", "filename": "src/test/run-fail/vec-overrun.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-overrun.rs?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -1,9 +1,7 @@\n-\n-\n-\n // -*- rust -*-\n \n // error-pattern:bounds check\n+// no-valgrind\n fn main() {\n     let v: vec[int] = [10];\n     let x: int = 0;"}, {"sha": "3c227107198ee328cea435d7e29a754f6bf50579", "filename": "src/test/run-fail/vec-underrun.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ae704ff2fc419c162527345bad63dd06394afe/src%2Ftest%2Frun-fail%2Fvec-underrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-underrun.rs?ref=40ae704ff2fc419c162527345bad63dd06394afe", "patch": "@@ -1,9 +1,7 @@\n-\n-\n-\n // -*- rust -*-\n \n // error-pattern:bounds check\n+// no-valgrind\n fn main() {\n     let v: vec[int] = [10, 20];\n     let x: int = 0;"}]}