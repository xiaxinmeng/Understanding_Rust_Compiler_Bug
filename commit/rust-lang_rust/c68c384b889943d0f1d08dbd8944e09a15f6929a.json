{"sha": "c68c384b889943d0f1d08dbd8944e09a15f6929a", "node_id": "C_kwDOAAsO6NoAKGM2OGMzODRiODg5OTQzZDBmMWQwOGRiZDg5NDRlMDlhMTVmNjkyOWE", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-12-20T18:21:36Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-05T10:39:03Z"}, "message": "Update documentation in thread/local.rs.", "tree": {"sha": "36570b8d0ddab926ab01234de8fa813a95743d49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36570b8d0ddab926ab01234de8fa813a95743d49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c68c384b889943d0f1d08dbd8944e09a15f6929a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c68c384b889943d0f1d08dbd8944e09a15f6929a", "html_url": "https://github.com/rust-lang/rust/commit/c68c384b889943d0f1d08dbd8944e09a15f6929a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c68c384b889943d0f1d08dbd8944e09a15f6929a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c904594ee0d3a311f720827025c293d071a006", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c904594ee0d3a311f720827025c293d071a006", "html_url": "https://github.com/rust-lang/rust/commit/36c904594ee0d3a311f720827025c293d071a006"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "8063242157367fc7b1bd3a9d5eeb4abd0c3ee41d", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c68c384b889943d0f1d08dbd8944e09a15f6929a/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68c384b889943d0f1d08dbd8944e09a15f6929a/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=c68c384b889943d0f1d08dbd8944e09a15f6929a", "patch": "@@ -443,6 +443,18 @@ impl<T: 'static> LocalKey<T> {\n         }\n     }\n \n+    /// Acquires a reference to the value in this TLS key, initializing it with\n+    /// `init` if it wasn't already initialized on this thread.\n+    ///\n+    /// If `init` was used to initialize the thread local variable, `None` is\n+    /// passed as the first argument to `f`. If it was already initialized,\n+    /// `Some(init)` is passed to `f`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the key currently has its destructor\n+    /// running, and it **may** panic if the destructor has previously been run\n+    /// for this thread.\n     fn initialize_with<F, R>(&'static self, init: T, f: F) -> R\n     where\n         F: FnOnce(Option<T>, &T) -> R,\n@@ -488,9 +500,12 @@ impl<T: 'static> LocalKey<Cell<T>> {\n     /// ```\n     #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn set(&'static self, value: T) {\n-        self.initialize_with(Cell::new(value), |init, cell| {\n-            if let Some(init) = init {\n-                cell.set(init.into_inner());\n+        self.initialize_with(Cell::new(value), |value, cell| {\n+            if let Some(value) = value {\n+                // The cell was already initialized, so `value` wasn't used to\n+                // initialize it. So we overwrite the current value with the\n+                // new one instead.\n+                cell.set(value.into_inner());\n             }\n         });\n     }\n@@ -593,7 +608,7 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is currently borrowed.\n+    /// Panics if the value is currently mutably borrowed.\n     ///\n     /// Panics if the key currently has its destructor running,\n     /// and it **may** panic if the destructor has previously been run for this thread.\n@@ -660,6 +675,8 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     ///\n     /// # Panics\n     ///\n+    /// Panics if the value is currently borrowed.\n+    ///\n     /// Panics if the key currently has its destructor running,\n     /// and it **may** panic if the destructor has previously been run for this thread.\n     ///\n@@ -681,8 +698,11 @@ impl<T: 'static> LocalKey<RefCell<T>> {\n     /// ```\n     #[unstable(feature = \"local_key_cell_methods\", issue = \"92122\")]\n     pub fn set(&'static self, value: T) {\n-        self.initialize_with(RefCell::new(value), |init, cell| {\n-            if let Some(init) = init {\n+        self.initialize_with(RefCell::new(value), |value, cell| {\n+            if let Some(value) = value {\n+                // The cell was already initialized, so `value` wasn't used to\n+                // initialize it. So we overwrite the current value with the\n+                // new one instead.\n                 cell.replace(init.into_inner());\n             }\n         });"}]}