{"sha": "7ad4297a4960c657932885173bef77fde0f26ccd", "node_id": "C_kwDOAAsO6NoAKDdhZDQyOTdhNDk2MGM2NTc5MzI4ODUxNzNiZWY3N2ZkZTBmMjZjY2Q", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-27T09:59:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-27T10:28:05Z"}, "message": "Use the first codegen backend in the config.toml as default\n\nIt is currently hard coded to llvm if enabled and cranelift otherwise.\nThis made some sense when cranelift was the only alternative codegen\nbackend. Since the introduction of the gcc backend this doesn't make\nmuch sense anymore. Before this PR bootstrapping rustc using a backend\nother than llvm or cranelift required changing the source of\nrustc_interface. With this PR it becomes a matter of putting the right\nbackend as first enabled backend in config.toml.", "tree": {"sha": "b54c17185b0191108d3f7b011e579f03787e8d83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b54c17185b0191108d3f7b011e579f03787e8d83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad4297a4960c657932885173bef77fde0f26ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad4297a4960c657932885173bef77fde0f26ccd", "html_url": "https://github.com/rust-lang/rust/commit/7ad4297a4960c657932885173bef77fde0f26ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad4297a4960c657932885173bef77fde0f26ccd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d127e2040b57157936f5f24e114a8b4c9a505ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d127e2040b57157936f5f24e114a8b4c9a505ef", "html_url": "https://github.com/rust-lang/rust/commit/3d127e2040b57157936f5f24e114a8b4c9a505ef"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "046f4f9451f58b535e27c470bd6b8f71d919e23a", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ad4297a4960c657932885173bef77fde0f26ccd/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad4297a4960c657932885173bef77fde0f26ccd/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=7ad4297a4960c657932885173bef77fde0f26ccd", "patch": "@@ -236,13 +236,9 @@ pub fn get_codegen_backend(\n     static LOAD: SyncOnceCell<unsafe fn() -> Box<dyn CodegenBackend>> = SyncOnceCell::new();\n \n     let load = LOAD.get_or_init(|| {\n-        #[cfg(feature = \"llvm\")]\n-        const DEFAULT_CODEGEN_BACKEND: &str = \"llvm\";\n+        let default_codegen_backend = option_env!(\"CFG_DEFAULT_CODEGEN_BACKEND\").unwrap_or(\"llvm\");\n \n-        #[cfg(not(feature = \"llvm\"))]\n-        const DEFAULT_CODEGEN_BACKEND: &str = \"cranelift\";\n-\n-        match backend_name.unwrap_or(DEFAULT_CODEGEN_BACKEND) {\n+        match backend_name.unwrap_or(default_codegen_backend) {\n             filename if filename.contains('.') => load_backend_from_dylib(filename.as_ref()),\n             #[cfg(feature = \"llvm\")]\n             \"llvm\" => rustc_codegen_llvm::LlvmCodegenBackend::new,"}, {"sha": "466a3a29c4c78284043d12ddb7a220c6406e2892", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ad4297a4960c657932885173bef77fde0f26ccd/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/7ad4297a4960c657932885173bef77fde0f26ccd/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=7ad4297a4960c657932885173bef77fde0f26ccd", "patch": "@@ -551,7 +551,9 @@ changelog-seen = 2\n \n # This is an array of the codegen backends that will be compiled for the rustc\n # that's being compiled. The default is to only build the LLVM codegen backend,\n-# and currently the only standard options supported are `\"llvm\"` and `\"cranelift\"`.\n+# and currently the only standard options supported are `\"llvm\"`, `\"cranelift\"`\n+# and `\"gcc\"`. The first backend in this list will be used as default by rustc\n+# when no explicit backend is specified.\n #codegen-backends = [\"llvm\"]\n \n # Indicates whether LLD will be compiled and made available in the sysroot for"}, {"sha": "2ceca28da0c6e24074079eab4304597d851e697c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ad4297a4960c657932885173bef77fde0f26ccd/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad4297a4960c657932885173bef77fde0f26ccd/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7ad4297a4960c657932885173bef77fde0f26ccd", "patch": "@@ -662,6 +662,10 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n         .env(\"CFG_VERSION\", builder.rust_version());\n \n+    if let Some(backend) = builder.config.rust_codegen_backends.get(0) {\n+        cargo.env(\"CFG_DEFAULT_CODEGEN_BACKEND\", backend);\n+    }\n+\n     let libdir_relative = builder.config.libdir_relative().unwrap_or_else(|| Path::new(\"lib\"));\n     let target_config = builder.config.target_config.get(&target);\n "}]}