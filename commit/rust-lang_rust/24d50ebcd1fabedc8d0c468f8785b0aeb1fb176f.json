{"sha": "24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZDUwZWJjZDFmYWJlZGM4ZDBjNDY4Zjg3ODViMGFlYjFmYjE3NmY=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-10-20T18:16:01Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-10-20T18:16:01Z"}, "message": "Guess macro braces from docs", "tree": {"sha": "4f497cd2842771f4e301d4c4a1187c44e9a5102a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f497cd2842771f4e301d4c4a1187c44e9a5102a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2spGEACgkQztOS3gxI\nPQAtLRAAm8J7BcBxxK5gia+wwqRmDec64NXf8DlYeItO27LRcz4U9uGfYGHkcvWB\nd4Otxk4Fvbwxcrsve5PlMfoPc/EGeip99qQmatZVhGs/T/dWL3RHIMAxK6wwqZ2E\ns/hjJ2EEKWobwJ+d6B99OT0CWpTAjy8E5nNHUmjGSx+yIhd1YT8Cr+OPP2wC996N\n1X0lMlcbMNn/b1k+1RO069S4jhJ7ixLaeNToAkpi2oo5hfeW4xdOlvzoSsgsTaw+\nJ0m9BlGOYhNPSQQqcMGVw9XX2b3UvZShf8UGvYM0FG2XjO0otqkcBxMvSGxsglbB\n6cbT4y1tC4qNFA569fO69SWVPRCUR8G0foDWi1ABksb7UvOlyqZ3P61K0q3zdaX2\nvlvHGu0Iz8kttOIMwEImP64lkxeBTnPH4AII/fadXjQV+jUXCOuDFCujrouKRJHu\nlpcNmkx1DYlMX50WRWw7tmkTyHtR5a46nSOfg1uq+NQ2m8sAj5jianHruTiy/1zs\n7W284av5sz7BhYqBfdRC3lIckJNIwezQoqJI1V6WKYNBnBmiKJNVDG0yzseqhdV4\n2SOWlCoMZCP73Wh5yJ1YOmMnL55LLomcsEHq+523pNA2knfdHgT9oYmCfrSZ8o3h\n3e1avk5PkDzFZggoM0d2qYRQbzyMQrwiPkdQ0EH/7LeNKSjcsI8=\n=Dah8\n-----END PGP SIGNATURE-----", "payload": "tree 4f497cd2842771f4e301d4c4a1187c44e9a5102a\nparent 6b9bd7bdd2712a7e85d6bfc70c231dbe36c2e585\nauthor oxalica <oxalicc@pm.me> 1571595361 +0800\ncommitter oxalica <oxalicc@pm.me> 1571595361 +0800\n\nGuess macro braces from docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "html_url": "https://github.com/rust-lang/rust/commit/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9bd7bdd2712a7e85d6bfc70c231dbe36c2e585", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9bd7bdd2712a7e85d6bfc70c231dbe36c2e585", "html_url": "https://github.com/rust-lang/rust/commit/6b9bd7bdd2712a7e85d6bfc70c231dbe36c2e585"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "09f743c660cb2220b784e47506b040c39dbc9ddb", "filename": "crates/ra_ide_api/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "patch": "@@ -56,6 +56,16 @@ mod tests {\n             do_reference_completion(\n                 \"\n                 //- /main.rs\n+                /// Creates a [`Vec`] containing the arguments.\n+                ///\n+                /// - Create a [`Vec`] containing a given list of elements:\n+                ///\n+                /// ```\n+                /// let v = vec![1, 2, 3];\n+                /// assert_eq!(v[0], 1);\n+                /// assert_eq!(v[1], 2);\n+                /// assert_eq!(v[2], 3);\n+                /// ```\n                 macro_rules! vec {\n                     () => {}\n                 }\n@@ -68,13 +78,61 @@ mod tests {\n             @r##\"[\n     CompletionItem {\n         label: \"vec!\",\n-        source_range: [46; 46),\n-        delete: [46; 46),\n+        source_range: [280; 280),\n+        delete: [280; 280),\n         insert: \"vec![$0]\",\n         kind: Macro,\n         detail: \"macro_rules! vec\",\n+        documentation: Documentation(\n+            \"Creates a [`Vec`] containing the arguments.\\n\\n- Create a [`Vec`] containing a given list of elements:\\n\\n```\\nlet v = vec![1, 2, 3];\\nassert_eq!(v[0], 1);\\nassert_eq!(v[1], 2);\\nassert_eq!(v[2], 3);\\n```\",\n+        ),\n     },\n ]\"##\n         );\n     }\n+\n+    #[test]\n+    fn completes_macros_braces_guessing() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                /// Foo\n+                ///\n+                /// Not call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\n+                /// Call as `let _=foo!  { hello world };`\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    <|>\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"foo!\",\n+        source_range: [163; 163),\n+        delete: [163; 163),\n+        insert: \"foo! {$0}\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+        documentation: Documentation(\n+            \"Foo\\n\\nNot call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\\nCall as `let _=foo!  { hello world };`\",\n+        ),\n+    },\n+    CompletionItem {\n+        label: \"main()\",\n+        source_range: [163; 163),\n+        delete: [163; 163),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        lookup: \"main\",\n+        detail: \"fn main()\",\n+    },\n+]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "aed4ce6d44bc8d0655dab72fd2864281f413d297", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "patch": "@@ -131,6 +131,33 @@ impl Completions {\n         self.add_function_with_name(ctx, None, func)\n     }\n \n+    fn guess_macro_braces(&self, macro_name: &str, docs: &str) -> &'static str {\n+        let mut votes = [0, 0, 0];\n+        for (idx, s) in docs.match_indices(&macro_name) {\n+            let (before, after) = (&docs[..idx], &docs[idx + s.len()..]);\n+            // Ensure to match the full word\n+            if after.starts_with(\"!\")\n+                && before\n+                    .chars()\n+                    .rev()\n+                    .next()\n+                    .map_or(true, |c| c != '_' && !c.is_ascii_alphanumeric())\n+            {\n+                // It may have spaces before the braces like `foo! {}`\n+                match after[1..].chars().find(|&c| !c.is_whitespace()) {\n+                    Some('{') => votes[0] += 1,\n+                    Some('[') => votes[1] += 1,\n+                    Some('(') => votes[2] += 1,\n+                    _ => {}\n+                }\n+            }\n+        }\n+\n+        // Insert a space before `{}`.\n+        // We prefer the last one when some votes equal.\n+        *votes.iter().zip(&[\" {$0}\", \"[$0]\", \"($0)\"]).max_by_key(|&(&vote, _)| vote).unwrap().1\n+    }\n+\n     pub(crate) fn add_macro(\n         &mut self,\n         ctx: &CompletionContext,\n@@ -141,10 +168,9 @@ impl Completions {\n         if let Some(name) = name {\n             let detail = macro_label(&ast_node);\n \n-            let macro_braces_to_insert = match name.as_str() {\n-                \"vec\" => \"[$0]\",\n-                _ => \"($0)\",\n-            };\n+            let docs = macro_.docs(ctx.db);\n+            let macro_braces_to_insert =\n+                self.guess_macro_braces(&name, docs.as_ref().map_or(\"\", |s| s.as_str()));\n             let macro_declaration = name + \"!\";\n \n             let builder = CompletionItem::new(\n@@ -153,7 +179,7 @@ impl Completions {\n                 &macro_declaration,\n             )\n             .kind(CompletionItemKind::Macro)\n-            .set_documentation(macro_.docs(ctx.db))\n+            .set_documentation(docs)\n             .detail(detail)\n             .insert_snippet(macro_declaration + macro_braces_to_insert);\n "}]}