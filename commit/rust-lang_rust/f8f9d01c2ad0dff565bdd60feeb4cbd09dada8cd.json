{"sha": "f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "node_id": "C_kwDOAAsO6NoAKGY4ZjlkMDFjMmFkMGRmZjU2NWJkZDYwZmVlYjRjYmQwOWRhZGE4Y2Q", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2022-06-16T15:39:06Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2022-06-16T15:39:06Z"}, "message": "Merge commit 'd7b5cbf065b88830ca519adcb73fad4c0d24b1c7' into clippyup", "tree": {"sha": "c87b416454f6d0cbc909fd94d8af6d4a951abfb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c87b416454f6d0cbc909fd94d8af6d4a951abfb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "html_url": "https://github.com/rust-lang/rust/commit/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd071bf5b2395edced30dfc5197eafb355c49b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd071bf5b2395edced30dfc5197eafb355c49b4d", "html_url": "https://github.com/rust-lang/rust/commit/bd071bf5b2395edced30dfc5197eafb355c49b4d"}], "stats": {"total": 6053, "additions": 4140, "deletions": 1913}, "files": [{"sha": "b8ea424ef3483152763d7b7e83e475a55635fdf8", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -143,6 +143,25 @@ jobs:\n       env:\n         OS: ${{ runner.os }}\n \n+  metadata_collection:\n+    needs: base\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+     # Setup\n+    - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+      with:\n+        github_token: \"${{ secrets.github_token }}\"\n+\n+    - name: Checkout\n+      uses: actions/checkout@v3.0.2\n+\n+    - name: Install toolchain\n+      run: rustup show active-toolchain\n+\n+    - name: Test metadata collection\n+      run: cargo collect-metadata\n+\n   integration_build:\n     needs: changelog\n     runs-on: ubuntu-latest"}, {"sha": "ff471207b65a3e2779300a95aa4cc79b01113f14", "filename": ".github/workflows/remark.yml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/.github%2Fworkflows%2Fremark.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/.github%2Fworkflows%2Fremark.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fremark.yml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -26,10 +26,19 @@ jobs:\n     - name: Install remark\n       run: npm install remark-cli remark-lint remark-lint-maximum-line-length remark-preset-lint-recommended remark-gfm\n \n+    - name: Install mdbook\n+      run: |\n+        mkdir mdbook\n+        curl -Lf https://github.com/rust-lang/mdBook/releases/download/v0.4.18/mdbook-v0.4.18-x86_64-unknown-linux-gnu.tar.gz | tar -xz --directory=./mdbook\n+        echo `pwd`/mdbook >> $GITHUB_PATH\n+\n     # Run\n     - name: Check *.md files\n       run: git ls-files -z '*.md' | xargs -0 -n 1 -I {} ./node_modules/.bin/remark {} -u lint -f > /dev/null\n \n+    - name: Build mdbook\n+      run: mdbook build book\n+\n   # These jobs doesn't actually test anything, but they're only used to tell\n   # bors the build completed, as there is no practical way to detect when a\n   # workflow is successful listening to webhooks only."}, {"sha": "503ae3c50903921c42c63f628073c5d51ae7a949", "filename": ".gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -39,3 +39,6 @@ helper.txt\n *.iml\n .vscode\n .idea\n+\n+# mdbook generated output\n+/book/book"}, {"sha": "6aaf12ed9324adba257cd237e71c74a162818163", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -3605,6 +3605,7 @@ Released 2018-09-13\n [`needless_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_match\n [`needless_option_as_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_as_deref\n [`needless_option_take`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take\n+[`needless_parens_on_range_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_parens_on_range_literals\n [`needless_pass_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\n [`needless_question_mark`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark\n [`needless_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n@@ -3677,6 +3678,7 @@ Released 2018-09-13\n [`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n [`rc_clone_in_vec_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_clone_in_vec_init\n [`rc_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex\n+[`read_zero_byte_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#read_zero_byte_vec\n [`recursive_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone"}, {"sha": "e81e7ceedcb50fe372a273cc5ee1c2b710b28dbe", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 17, "deletions": 151, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -13,44 +13,44 @@ anything, feel free to ask questions on issues or visit the `#clippy` on [Zulip]\n All contributors are expected to follow the [Rust Code of Conduct].\n \n - [Contributing to Clippy](#contributing-to-clippy)\n-  - [Getting started](#getting-started)\n-    - [High level approach](#high-level-approach)\n-    - [Finding something to fix/improve](#finding-something-to-fiximprove)\n+  - [The Clippy book](#the-clippy-book)\n+  - [High level approach](#high-level-approach)\n+  - [Finding something to fix/improve](#finding-something-to-fiximprove)\n   - [Writing code](#writing-code)\n   - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n     - [IntelliJ Rust](#intellij-rust)\n     - [Rust Analyzer](#rust-analyzer)\n   - [How Clippy works](#how-clippy-works)\n-  - [Syncing changes between Clippy and `rust-lang/rust`](#syncing-changes-between-clippy-and-rust-langrust)\n-    - [Patching git-subtree to work with big repos](#patching-git-subtree-to-work-with-big-repos)\n-    - [Performing the sync from `rust-lang/rust` to Clippy](#performing-the-sync-from-rust-langrust-to-clippy)\n-    - [Performing the sync from Clippy to `rust-lang/rust`](#performing-the-sync-from-clippy-to-rust-langrust)\n-    - [Defining remotes](#defining-remotes)\n   - [Issue and PR triage](#issue-and-pr-triage)\n   - [Bors and Homu](#bors-and-homu)\n   - [Contributions](#contributions)\n \n [Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/clippy\n [Rust Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n \n-## Getting started\n+## The Clippy book\n \n-**Note: If this is your first time contributing to Clippy, you should\n-first read the [Basics docs](doc/basics.md).**\n+If you're new to Clippy and don't know where to start the [Clippy book] includes\n+a developer guide and is a good place to start your journey.\n \n-### High level approach\n+<!-- FIXME: Link to the deployed book, once it is deployed through CI -->\n+[Clippy book]: book/src\n+\n+## High level approach\n \n 1. Find something to fix/improve\n 2. Change code (likely some file in `clippy_lints/src/`)\n-3. Follow the instructions in the [Basics docs](doc/basics.md) to get set up\n+3. Follow the instructions in the [Basics docs](book/src/development/basics.md)\n+   to get set up\n 4. Run `cargo test` in the root directory and wiggle code until it passes\n 5. Open a PR (also can be done after 2. if you run into problems)\n \n-### Finding something to fix/improve\n+## Finding something to fix/improve\n \n-All issues on Clippy are mentored, if you want help simply ask @Manishearth, @flip1995, @phansch\n-or @llogiq directly by mentioning them in the issue or over on [Zulip]. This list may be out of date.\n-All currently active mentors can be found [here](https://github.com/rust-lang/highfive/blob/master/highfive/configs/rust-lang/rust-clippy.json#L3)\n+All issues on Clippy are mentored, if you want help simply ask someone from the\n+Clippy team directly by mentioning them in the issue or over on [Zulip]. All\n+currently active team members can be found\n+[here](https://github.com/rust-lang/highfive/blob/master/highfive/configs/rust-lang/rust-clippy.json#L3)\n \n Some issues are easier than others. The [`good-first-issue`] label can be used to find the easy\n issues. You can use `@rustbot claim` to assign the issue to yourself.\n@@ -91,20 +91,6 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n [let chains]: https://github.com/rust-lang/rust/pull/94927\n [nest-less]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/bit_mask.rs#L133-L159\n \n-## Writing code\n-\n-Have a look at the [docs for writing lints][adding_lints] for more details.\n-\n-If you want to add a new lint or change existing ones apart from bugfixing, it's\n-also a good idea to give the [stability guarantees][rfc_stability] and\n-[lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n-quick read.\n-\n-[adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n-[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n-[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n-[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n-\n ## Getting code-completion for rustc internals to work\n \n ### IntelliJ Rust\n@@ -205,126 +191,6 @@ That's why the `else_if_without_else` example uses the `register_early_pass` fun\n [early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n [late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n \n-## Syncing changes between Clippy and [`rust-lang/rust`]\n-\n-Clippy currently gets built with a pinned nightly version.\n-\n-In the `rust-lang/rust` repository, where rustc resides, there's a copy of Clippy\n-that compiler hackers modify from time to time to adapt to changes in the unstable\n-API of the compiler.\n-\n-We need to sync these changes back to this repository periodically, and the changes\n-made to this repository in the meantime also need to be synced to the `rust-lang/rust` repository.\n-\n-To avoid flooding the `rust-lang/rust` PR queue, this two-way sync process is done\n-in a bi-weekly basis if there's no urgent changes. This is done starting on the day of\n-the Rust stable release and then every other week. That way we guarantee that we keep\n-this repo up to date with the latest compiler API, and every feature in Clippy is available\n-for 2 weeks in nightly, before it can get to beta. For reference, the first sync\n-following this cadence was performed the 2020-08-27.\n-\n-This process is described in detail in the following sections. For general information\n-about `subtree`s in the Rust repository see [Rust's `CONTRIBUTING.md`][subtree].\n-\n-### Patching git-subtree to work with big repos\n-\n-Currently, there's a bug in `git-subtree` that prevents it from working properly\n-with the [`rust-lang/rust`] repo. There's an open PR to fix that, but it's stale.\n-Before continuing with the following steps, we need to manually apply that fix to\n-our local copy of `git-subtree`.\n-\n-You can get the patched version of `git-subtree` from [here][gitgitgadget-pr].\n-Put this file under `/usr/lib/git-core` (taking a backup of the previous file)\n-and make sure it has the proper permissions:\n-\n-```bash\n-sudo cp --backup /path/to/patched/git-subtree.sh /usr/lib/git-core/git-subtree\n-sudo chmod --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n-sudo chown --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n-```\n-\n-_Note:_ The first time running `git subtree push` a cache has to be built. This\n-involves going through the complete Clippy history once. For this you have to\n-increase the stack limit though, which you can do with `ulimit -s 60000`.\n-Make sure to run the `ulimit` command from the same session you call git subtree.\n-\n-_Note:_ If you are a Debian user, `dash` is the shell used by default for scripts instead of `sh`.\n-This shell has a hardcoded recursion limit set to 1000. In order to make this process work,\n-you need to force the script to run `bash` instead. You can do this by editing the first\n-line of the `git-subtree` script and changing `sh` to `bash`.\n-\n-### Performing the sync from [`rust-lang/rust`] to Clippy\n-\n-Here is a TL;DR version of the sync process (all of the following commands have\n-to be run inside the `rust` directory):\n-\n-1. Clone the [`rust-lang/rust`] repository or make sure it is up to date.\n-2. Checkout the commit from the latest available nightly. You can get it using `rustup check`.\n-3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n-    ```bash\n-    # Make sure to change `your-github-name` to your github name in the following command. Also be\n-    # sure to either use a net-new branch, e.g. `sync-from-rust`, or delete the branch beforehand\n-    # because changes cannot be fast forwarded\n-    git subtree push -P src/tools/clippy git@github.com:your-github-name/rust-clippy sync-from-rust\n-    ```\n-\n-    _Note:_ This will directly push to the remote repository. You can also push\n-    to your local copy by replacing the remote address with `/path/to/rust-clippy`\n-    directory.\n-\n-    _Note:_ Most of the time you have to create a merge commit in the\n-    `rust-clippy` repo (this has to be done in the Clippy repo, not in the\n-    rust-copy of Clippy):\n-    ```bash\n-    git fetch origin && git fetch upstream\n-    git checkout sync-from-rust\n-    git merge upstream/master\n-    ```\n-4. Open a PR to `rust-lang/rust-clippy` and wait for it to get merged (to\n-   accelerate the process ping the `@rust-lang/clippy` team in your PR and/or\n-   ~~annoy~~ ask them in the [Zulip] stream.)\n-\n-### Performing the sync from Clippy to [`rust-lang/rust`]\n-\n-All of the following commands have to be run inside the `rust` directory.\n-\n-1. Make sure Clippy itself is up-to-date by following the steps outlined in the previous\n-section if necessary.\n-\n-2. Sync the `rust-lang/rust-clippy` master to the rust-copy of Clippy:\n-    ```bash\n-    git checkout -b sync-from-clippy\n-    git subtree pull -P src/tools/clippy https://github.com/rust-lang/rust-clippy master\n-    ```\n-3. Open a PR to [`rust-lang/rust`]\n-\n-### Defining remotes\n-\n-You may want to define remotes, so you don't have to type out the remote\n-addresses on every sync. You can do this with the following commands (these\n-commands still have to be run inside the `rust` directory):\n-\n-```bash\n-# Set clippy-upstream remote for pulls\n-$ git remote add clippy-upstream https://github.com/rust-lang/rust-clippy\n-# Make sure to not push to the upstream repo\n-$ git remote set-url --push clippy-upstream DISABLED\n-# Set clippy-origin remote to your fork for pushes\n-$ git remote add clippy-origin git@github.com:your-github-name/rust-clippy\n-# Set a local remote\n-$ git remote add clippy-local /path/to/rust-clippy\n-```\n-\n-You can then sync with the remote names from above, e.g.:\n-\n-```bash\n-$ git subtree push -P src/tools/clippy clippy-local sync-from-rust\n-```\n-\n-[gitgitgadget-pr]: https://github.com/gitgitgadget/git/pull/493\n-[subtree]: https://rustc-dev-guide.rust-lang.org/contributing.html#external-dependencies-subtree\n-[`rust-lang/rust`]: https://github.com/rust-lang/rust\n-\n ## Issue and PR triage\n \n Clippy is following the [Rust triage procedure][triage] for issues and pull"}, {"sha": "e4060ce29a7b55302f470975c379db2845668b50", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -58,7 +58,7 @@ rustc_tools_util = { version = \"0.2\", path = \"rustc_tools_util\" }\n [features]\n deny-warnings = [\"clippy_lints/deny-warnings\"]\n integration = [\"tempfile\"]\n-internal = [\"clippy_lints/internal\"]\n+internal = [\"clippy_lints/internal\", \"tempfile\"]\n \n [package.metadata.rust-analyzer]\n # This package uses #[feature(rustc_private)]"}, {"sha": "b652194d0d13b25ec38c99d56460923b5ab7b02f", "filename": "book/README.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2FREADME.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,4 @@\n+# Clippy Book\n+\n+This is the source for the Clippy Book. See the\n+[book](src/infrastructure/book.md) for more information."}, {"sha": "93b6641f7e1e743c3705298c6a1593ab2719cbec", "filename": "book/book.toml", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fbook.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fbook.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fbook.toml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,28 @@\n+[book]\n+authors = [\"The Rust Clippy Developers\"]\n+language = \"en\"\n+multilingual = false\n+src = \"src\"\n+title = \"Clippy Documentation\"\n+\n+[rust]\n+edition = \"2018\"\n+\n+[output.html]\n+edit-url-template = \"https://github.com/rust-lang/rust-clippy/edit/master/book/{path}\"\n+git-repository-url = \"https://github.com/rust-lang/rust-clippy/tree/master/book\"\n+mathjax-support = true\n+site-url = \"/rust-clippy/\"\n+\n+[output.html.playground]\n+editable = true\n+line-numbers = true\n+\n+[output.html.search]\n+boost-hierarchy = 2\n+boost-paragraph = 1\n+boost-title = 2\n+expand = true\n+heading-split-level = 2\n+limit-results = 20\n+use-boolean-and = true"}, {"sha": "de1f70d7e9640080e1bc4873e48f94ce8c409feb", "filename": "book/src/README.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FREADME.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,34 @@\n+# Clippy\n+\n+[![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test/badge.svg?branch=auto&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test%22+event%3Apush+branch%3Aauto)\n+[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](#license)\n+\n+A collection of lints to catch common mistakes and improve your\n+[Rust](https://github.com/rust-lang/rust) code.\n+\n+[There are over 500 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+\n+Lints are divided into categories, each with a default [lint\n+level](https://doc.rust-lang.org/rustc/lints/levels.html). You can choose how\n+much Clippy is supposed to ~~annoy~~ help you by changing the lint level by\n+category.\n+\n+| Category              | Description                                                                         | Default level |\n+| --------------------- | ----------------------------------------------------------------------------------- | ------------- |\n+| `clippy::all`         | all lints that are on by default (correctness, suspicious, style, complexity, perf) | **warn/deny** |\n+| `clippy::correctness` | code that is outright wrong or useless                                              | **deny**      |\n+| `clippy::suspicious`  | code that is most likely wrong or useless                                           | **warn**      |\n+| `clippy::complexity`  | code that does something simple but in a complex way                                | **warn**      |\n+| `clippy::perf`        | code that can be written to run faster                                              | **warn**      |\n+| `clippy::style`       | code that should be written in a more idiomatic way                                 | **warn**      |\n+| `clippy::pedantic`    | lints which are rather strict or might have false positives                         | allow         |\n+| `clippy::nursery`     | new lints that are still under development                                          | allow         |\n+| `clippy::cargo`       | lints for the cargo manifest                                                        | allow         |                                   | allow         |\n+\n+More to come, please [file an\n+issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n+\n+The [lint list](https://rust-lang.github.io/rust-clippy/master/index.html) also\n+contains \"restriction lints\", which are for things which are usually not\n+considered \"bad\", but may be useful to turn on in specific cases. These should\n+be used very selectively, if at all."}, {"sha": "0b945faf9b78effe2d1dbd0fc5d6a269c87c50a2", "filename": "book/src/SUMMARY.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,23 @@\n+# Summary\n+\n+[Introduction](README.md)\n+\n+- [Installation](installation.md)\n+- [Usage](usage.md)\n+- [Configuration](configuration.md)\n+- [Clippy's Lints](lints.md)\n+- [Continuous Integration](continuous_integration/README.md)\n+    - [GitHub Actions](continuous_integration/github_actions.md)\n+    - [Travis CI](continuous_integration/travis.md)\n+- [Development](development/README.md)\n+    - [Basics](development/basics.md)\n+    - [Adding Lints](development/adding_lints.md)\n+    - [Common Tools](development/common_tools_writing_lints.md)\n+    - [Infrastructure](development/infrastructure/README.md)\n+        - [Syncing changes between Clippy and rust-lang/rust](development/infrastructure/sync.md)\n+        - [Backporting Changes](development/infrastructure/backport.md)\n+        - [Updating the Changelog](development/infrastructure/changelog_update.md)\n+        - [Release a New Version](development/infrastructure/release.md)\n+        - [The Clippy Book](development/infrastructure/book.md)\n+    - [Proposals](development/proposals/README.md)\n+        - [Roadmap 2021](development/proposals/roadmap-2021.md)"}, {"sha": "6e295ac3181dd99e7c3e40324eafa69069076185", "filename": "book/src/configuration.md", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,92 @@\n+# Configuring Clippy\n+\n+> **Note:** The configuration file is unstable and may be deprecated in the future.\n+\n+Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a\n+basic `variable = value` mapping eg.\n+\n+```toml\n+avoid-breaking-exported-api = false\n+blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n+cognitive-complexity-threshold = 30\n+```\n+\n+See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which\n+lints can be configured and the meaning of the variables.\n+\n+To deactivate the \"for further information visit *lint-link*\" message you can define the `CLIPPY_DISABLE_DOCS_LINKS`\n+environment variable.\n+\n+### Allowing/denying lints\n+\n+You can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n+\n+* the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`)\n+\n+* all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n+  `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive lints prone to false\n+  positives.\n+\n+* only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n+\n+* `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n+\n+Note: `allow` means to suppress the lint for your code. With `warn` the lint will only emit a warning, while with `deny`\n+the lint will emit an error, when triggering for your code. An error causes clippy to exit with an error code, so is\n+useful in scripts like CI/CD.\n+\n+If you do not want to include your lint levels in your code, you can globally enable/disable lints by passing extra\n+flags to Clippy during the run:\n+\n+To allow `lint_name`, run\n+\n+```terminal\n+cargo clippy -- -A clippy::lint_name\n+```\n+\n+And to warn on `lint_name`, run\n+\n+```terminal\n+cargo clippy -- -W clippy::lint_name\n+```\n+\n+This also works with lint groups. For example you can run Clippy with warnings for all lints enabled:\n+\n+```terminal\n+cargo clippy -- -W clippy::pedantic\n+```\n+\n+If you care only about a single lint, you can allow all others and then explicitly warn on the lint(s) you are\n+interested in:\n+\n+```terminal\n+cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n+```\n+\n+### Specifying the minimum supported Rust version\n+\n+Projects that intend to support old versions of Rust can disable lints pertaining to newer features by specifying the\n+minimum supported Rust version (MSRV) in the clippy configuration file.\n+\n+```toml\n+msrv = \"1.30.0\"\n+```\n+\n+The MSRV can also be specified as an inner attribute, like below.\n+\n+```rust\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.30.0\"]\n+\n+fn main() {\n+    ...\n+}\n+```\n+\n+You can also omit the patch version when specifying the MSRV, so `msrv = 1.30`\n+is equivalent to `msrv = 1.30.0`.\n+\n+Note: `custom_inner_attributes` is an unstable feature so it has to be enabled explicitly.\n+\n+Lints that recognize this configuration option can be\n+found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)"}, {"sha": "e5c3673bde451f9c7b792c70c9f2b47227ce6282", "filename": "book/src/continuous_integration/README.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fcontinuous_integration%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fcontinuous_integration%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2FREADME.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,18 @@\n+# Continuous Integration\n+\n+It is recommended to run Clippy on CI with `-Dwarnings`, so that Clippy lints\n+prevent CI from passing. To enforce errors on warnings on all `cargo` commands\n+not just `cargo clippy`, you can set the env var `RUSTFLAGS=\"-Dwarnings\"`.\n+\n+We recommend to use Clippy from the same toolchain, that you use for compiling\n+your crate for maximum compatibility. E.g. if your crate is compiled with the\n+`stable` toolchain, you should also use `stable` Clippy.\n+\n+> _Note:_ New Clippy lints are first added to the `nightly` toolchain. If you\n+> want to help with improving Clippy and have CI resources left, please consider\n+> adding a `nightly` Clippy check to your CI and report problems like false\n+> positives back to us. With that we can fix bugs early, before they can get to\n+> stable.\n+\n+This chapter will give an overview on how to use Clippy on different popular CI\n+providers."}, {"sha": "42a43ef1380166baa78ede87652b6ba4292f239f", "filename": "book/src/continuous_integration/github_actions.md", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,21 @@\n+# GitHub Actions\n+\n+On the GitHub hosted runners, Clippy from the latest stable Rust version comes\n+pre-installed. So all you have to do is to run `cargo clippy`.\n+\n+```yml\n+on: push\n+name: Clippy check\n+\n+# Make sure CI fails on all warnings, including Clippy lints\n+env:\n+  RUSTFLAGS: \"-Dwarnings\"\n+\n+jobs:\n+  clippy_check:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v1\n+      - name: Run Clippy\n+        run: cargo clippy --all-targets --all-features\n+```"}, {"sha": "85b9ed53daeafde3135c07424c10982449178b84", "filename": "book/src/continuous_integration/travis.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,20 @@\n+# Travis CI\n+\n+You can add Clippy to Travis CI in the same way you use it locally:\n+\n+```yml\n+language: rust\n+rust:\n+  - stable\n+  - beta\n+before_script:\n+  - rustup component add clippy\n+script:\n+  - cargo clippy\n+  # if you want the build job to fail when encountering warnings, use\n+  - cargo clippy -- -D warnings\n+  # in order to also check tests and non-default crate features, use\n+  - cargo clippy --all-targets --all-features -- -D warnings\n+  - cargo test\n+  # etc.\n+```"}, {"sha": "5cf7201cffad7411104cac766896d7eff5290cb4", "filename": "book/src/development/README.md", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2FREADME.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,43 @@\n+# Clippy Development\n+\n+Hello fellow Rustacean! If you made it here, you're probably interested in\n+making Clippy better by contributing to it. In that case, welcome to the\n+project!\n+\n+> _Note:_ If you're just interested in using Clippy, there's nothing to see from\n+> this point onward and you should return to one of the earlier chapters.\n+\n+## Getting started\n+\n+If this is your first time contributing to Clippy, you should first read the\n+[Basics docs](basics.md). This will explain the basics on how to get the source\n+code and how to compile and test the code.\n+\n+## Writing code\n+\n+If you have done the basic setup, it's time to start hacking.\n+\n+The [Adding lints](adding_lints.md) chapter is a walk through on how to add a\n+new lint to Clippy. This is also interesting if you just want to fix a lint,\n+because it also covers how to test lints and gives an overview of the bigger\n+picture.\n+\n+If you want to add a new lint or change existing ones apart from bugfixing, it's\n+also a good idea to give the [stability guarantees][rfc_stability] and\n+[lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n+quick read. The lint categories are also described [earlier in this\n+book](../lints.md).\n+\n+> _Note:_ Some higher level things about contributing to Clippy are still\n+> covered in the [`CONTRIBUTING.md`] document. Some of those will be moved to\n+> the book over time, like:\n+> - Finding something to fix\n+> - IDE setup\n+> - High level overview on how Clippy works\n+> - Triage procedure\n+> - Bors and Homu\n+\n+[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n+[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n+[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n+[`CONTRIBUTING.md`]: https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md"}, {"sha": "3da07fcb9686363fe3948d265202e32f1c9b930c", "filename": "book/src/development/adding_lints.md", "status": "renamed", "additions": 170, "deletions": 156, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -45,9 +45,9 @@ take a look at our [lint naming guidelines][lint_naming]. To get started on this\n lint you can run `cargo dev new_lint --name=foo_functions --pass=early\n --category=pedantic` (category will default to nursery if not provided). This\n command will create two files: `tests/ui/foo_functions.rs` and\n-`clippy_lints/src/foo_functions.rs`, as well as\n-[registering the lint](#lint-registration). For cargo lints, two project\n-hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n+`clippy_lints/src/foo_functions.rs`, as well as [registering the\n+lint](#lint-registration). For cargo lints, two project hierarchies (fail/pass)\n+will be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n \n@@ -58,8 +58,8 @@ Let's write some tests first that we can execute while we iterate on our lint.\n Clippy uses UI tests for testing. UI tests check that the output of Clippy is\n exactly as expected. Each test is just a plain Rust file that contains the code\n we want to check. The output of Clippy is compared against a `.stderr` file.\n-Note that you don't have to create this file yourself, we'll get to\n-generating the `.stderr` files further down.\n+Note that you don't have to create this file yourself, we'll get to generating\n+the `.stderr` files further down.\n \n We start by opening the test file created at `tests/ui/foo_functions.rs`.\n \n@@ -96,61 +96,57 @@ fn main() {\n }\n ```\n \n-Now we can run the test with `TESTNAME=foo_functions cargo uitest`,\n-currently this test is meaningless though.\n+Now we can run the test with `TESTNAME=foo_functions cargo uitest`, currently\n+this test is meaningless though.\n \n-While we are working on implementing our lint, we can keep running the UI\n-test. That allows us to check if the output is turning into what we want.\n+While we are working on implementing our lint, we can keep running the UI test.\n+That allows us to check if the output is turning into what we want.\n \n-Once we are satisfied with the output, we need to run\n-`cargo dev bless` to update the `.stderr` file for our lint.\n-Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n-every time before running `cargo dev bless`.\n-Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n-our lint, we need to commit the generated `.stderr` files, too. In general, you\n-should only commit files changed by `cargo dev bless` for the\n+Once we are satisfied with the output, we need to run `cargo dev bless` to\n+update the `.stderr` file for our lint. Please note that, we should run\n+`TESTNAME=foo_functions cargo uitest` every time before running `cargo dev\n+bless`. Running `TESTNAME=foo_functions cargo uitest` should pass then. When we\n+commit our lint, we need to commit the generated `.stderr` files, too. In\n+general, you should only commit files changed by `cargo dev bless` for the\n specific lint you are creating/editing. Note that if the generated files are\n empty, they should be removed.\n \n-Note that you can run multiple test files by specifying a comma separated list:\n-`TESTNAME=foo_functions,test2,test3`.\n+> _Note:_ you can run multiple test files by specifying a comma separated list:\n+> `TESTNAME=foo_functions,test2,test3`.\n \n ### Cargo lints\n \n-For cargo lints, the process of testing differs in that we are interested in\n-the `Cargo.toml` manifest file. We also need a minimal crate associated\n-with that manifest.\n+For cargo lints, the process of testing differs in that we are interested in the\n+`Cargo.toml` manifest file. We also need a minimal crate associated with that\n+manifest.\n \n-If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint`\n-we will find by default two new crates, each with its manifest file:\n+If our new lint is named e.g. `foo_categories`, after running `cargo dev\n+new_lint` we will find by default two new crates, each with its manifest file:\n \n-* `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the new lint to raise an error.\n-* `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger the lint.\n+* `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the\n+  new lint to raise an error.\n+* `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger\n+  the lint.\n \n-If you need more cases, you can copy one of those crates (under `foo_categories`) and rename it.\n+If you need more cases, you can copy one of those crates (under\n+`foo_categories`) and rename it.\n \n-The process of generating the `.stderr` file is the same, and prepending the `TESTNAME`\n-variable to `cargo uitest` works too.\n+The process of generating the `.stderr` file is the same, and prepending the\n+`TESTNAME` variable to `cargo uitest` works too.\n \n ## Rustfix tests\n \n-If the lint you are working on is making use of structured suggestions, the\n-test file should include a `// run-rustfix` comment at the top. This will\n+If the lint you are working on is making use of structured suggestions, the test\n+file should include a `// run-rustfix` comment at the top. This will\n additionally run [rustfix] for that test. Rustfix will apply the suggestions\n-from the lint to the code of the test file and compare that to the contents of\n-a `.fixed` file.\n+from the lint to the code of the test file and compare that to the contents of a\n+`.fixed` file.\n \n-Use `cargo dev bless` to automatically generate the\n-`.fixed` file after running the tests.\n+Use `cargo dev bless` to automatically generate the `.fixed` file after running\n+the tests.\n \n [rustfix]: https://github.com/rust-lang/rustfix\n \n-## Edition 2018 tests\n-\n-Some features require the 2018 edition to work (e.g. `async_await`), but\n-compile-test tests run on the 2015 edition by default. To change this behavior\n-add `// edition:2018` at the top of the test file (note that it's space-sensitive).\n-\n ## Testing manually\n \n Manually testing against an example file can be useful if you have added some\n@@ -166,9 +162,9 @@ implementing our lint now.\n \n ## Lint declaration\n \n-Let's start by opening the new file created in the `clippy_lints` crate\n-at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n-lint code is. This file has already imported some initial things we will need:\n+Let's start by opening the new file created in the `clippy_lints` crate at\n+`clippy_lints/src/foo_functions.rs`. That's the crate where all the lint code\n+is. This file has already imported some initial things we will need:\n \n ```rust\n use rustc_lint::{EarlyLintPass, EarlyContext};\n@@ -178,7 +174,8 @@ use rustc_ast::ast::*;\n \n The next step is to update the lint declaration. Lints are declared using the\n [`declare_clippy_lint!`][declare_clippy_lint] macro, and we just need to update\n-the auto-generated lint declaration to have a real description, something like this:\n+the auto-generated lint declaration to have a real description, something like\n+this:\n \n ```rust\n declare_clippy_lint! {\n@@ -198,24 +195,25 @@ declare_clippy_lint! {\n ```\n \n * The section of lines prefixed with `///` constitutes the lint documentation\n-  section. This is the default documentation style and will be displayed\n-  [like this][example_lint_page]. To render and open this documentation locally\n-  in a browser, run `cargo dev serve`.\n-* The `#[clippy::version]` attribute will be rendered as part of the lint documentation.\n-  The value should be set to the current Rust version that the lint is developed in,\n-  it can be retrieved by running `rustc -vV` in the rust-clippy directory. The version\n-  is listed under *release*. (Use the version without the `-nightly`) suffix.\n-* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the\n-  [lint naming guidelines][lint_naming] here when naming your lint.\n-  In short, the name should state the thing that is being checked for and\n-  read well when used with `allow`/`warn`/`deny`.\n-* `pedantic` sets the lint level to `Allow`.\n-  The exact mapping can be found [here][category_level_mapping]\n+  section. This is the default documentation style and will be displayed [like\n+  this][example_lint_page]. To render and open this documentation locally in a\n+  browser, run `cargo dev serve`.\n+* The `#[clippy::version]` attribute will be rendered as part of the lint\n+  documentation. The value should be set to the current Rust version that the\n+  lint is developed in, it can be retrieved by running `rustc -vV` in the\n+  rust-clippy directory. The version is listed under *release*. (Use the version\n+  without the `-nightly`) suffix.\n+* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n+  guidelines][lint_naming] here when naming your lint. In short, the name should\n+  state the thing that is being checked for and read well when used with\n+  `allow`/`warn`/`deny`.\n+* `pedantic` sets the lint level to `Allow`. The exact mapping can be found\n+  [here][category_level_mapping]\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-The rest of this file contains an empty implementation for our lint pass,\n-which in this case is `EarlyLintPass` and should look like this:\n+The rest of this file contains an empty implementation for our lint pass, which\n+in this case is `EarlyLintPass` and should look like this:\n \n ```rust\n // clippy_lints/src/foo_functions.rs\n@@ -324,9 +322,9 @@ impl EarlyLintPass for FooFunctions {\n Running our UI test should now produce output that contains the lint message.\n \n According to [the rustc-dev-guide], the text should be matter of fact and avoid\n-capitalization and periods, unless multiple sentences are needed.\n-When code or an identifier must appear in a message or label, it should be\n-surrounded with single grave accents \\`.\n+capitalization and periods, unless multiple sentences are needed. When code or\n+an identifier must appear in a message or label, it should be surrounded with\n+single grave accents \\`.\n \n [check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html#method.check_fn\n [diagnostics]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_utils/src/diagnostics.rs\n@@ -382,8 +380,8 @@ fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n ```\n \n Now we should also run the full test suite with `cargo test`. At this point\n-running `cargo test` should produce the expected output. Remember to run\n-`cargo dev bless` to update the `.stderr` file.\n+running `cargo test` should produce the expected output. Remember to run `cargo\n+dev bless` to update the `.stderr` file.\n \n `cargo test` (as opposed to `cargo uitest`) will also ensure that our lint\n implementation is not violating any Clippy lints itself.\n@@ -397,13 +395,16 @@ pass.\n \n ## Specifying the lint's minimum supported Rust version (MSRV)\n \n-Sometimes a lint makes suggestions that require a certain version of Rust. For example, the `manual_strip` lint suggests\n-using `str::strip_prefix` and `str::strip_suffix` which is only available after Rust 1.45. In such cases, you need to\n-ensure that the MSRV configured for the project is >= the MSRV of the required Rust feature. If multiple features are\n-required, just use the one with a lower MSRV.\n+Sometimes a lint makes suggestions that require a certain version of Rust. For\n+example, the `manual_strip` lint suggests using `str::strip_prefix` and\n+`str::strip_suffix` which is only available after Rust 1.45. In such cases, you\n+need to ensure that the MSRV configured for the project is >= the MSRV of the\n+required Rust feature. If multiple features are required, just use the one with\n+a lower MSRV.\n \n-First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be\n-accessed later as `msrvs::STR_STRIP_PREFIX`, for example.\n+First, add an MSRV alias for the required feature in\n+[`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be accessed later\n+as `msrvs::STR_STRIP_PREFIX`, for example.\n \n ```rust\n msrv_aliases! {\n@@ -412,8 +413,9 @@ msrv_aliases! {\n }\n ```\n \n-In order to access the project-configured MSRV, you need to have an `msrv` field in the LintPass struct, and a\n-constructor to initialize the field. The `msrv` value is passed to the constructor in `clippy_lints/lib.rs`.\n+In order to access the project-configured MSRV, you need to have an `msrv` field\n+in the LintPass struct, and a constructor to initialize the field. The `msrv`\n+value is passed to the constructor in `clippy_lints/lib.rs`.\n \n ```rust\n pub struct ManualStrip {\n@@ -472,11 +474,10 @@ If you have trouble implementing your lint, there is also the internal `author`\n lint to generate Clippy code that detects the offending pattern. It does not\n work for all of the Rust syntax, but can give a good starting point.\n \n-The quickest way to use it, is the\n-[Rust playground: play.rust-lang.org][author_example].\n-Put the code you want to lint into the editor and add the `#[clippy::author]`\n-attribute above the item. Then run Clippy via `Tools -> Clippy` and you should\n-see the generated code in the output below.\n+The quickest way to use it, is the [Rust playground:\n+play.rust-lang.org][author_example]. Put the code you want to lint into the\n+editor and add the `#[clippy::author]` attribute above the item. Then run Clippy\n+via `Tools -> Clippy` and you should see the generated code in the output below.\n \n [Here][author_example] is an example on the playground.\n \n@@ -487,13 +488,15 @@ you are implementing your lint.\n \n ## Print HIR lint\n \n-To implement a lint, it's helpful to first understand the internal representation\n-that rustc uses. Clippy has the `#[clippy::dump]` attribute that prints the\n-[_High-Level Intermediate Representation (HIR)_] of the item, statement, or \n-expression that the attribute is attached to. To attach the attribute to expressions\n-you often need to enable `#![feature(stmt_expr_attributes)]`.\n+To implement a lint, it's helpful to first understand the internal\n+representation that rustc uses. Clippy has the `#[clippy::dump]` attribute that\n+prints the [_High-Level Intermediate Representation (HIR)_] of the item,\n+statement, or expression that the attribute is attached to. To attach the\n+attribute to expressions you often need to enable\n+`#![feature(stmt_expr_attributes)]`.\n \n-[Here][print_hir_example] you can find an example, just select _Tools_ and run _Clippy_.\n+[Here][print_hir_example] you can find an example, just select _Tools_ and run\n+_Clippy_.\n \n [_High-Level Intermediate Representation (HIR)_]: https://rustc-dev-guide.rust-lang.org/hir.html\n [print_hir_example]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=daf14db3a7f39ca467cd1b86c34b9afb\n@@ -518,7 +521,7 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// // A short example of code that triggers the lint\n     /// ```\n-    /// \n+    ///\n     /// Use instead:\n     /// ```rust,ignore\n     /// // A short example of improved code that doesn't trigger the lint\n@@ -537,9 +540,9 @@ list][lint_list].\n \n ## Running rustfmt\n \n-[Rustfmt] is a tool for formatting Rust code according to style guidelines.\n-Your code has to be formatted by `rustfmt` before a PR can be merged.\n-Clippy uses nightly `rustfmt` in the CI.\n+[Rustfmt] is a tool for formatting Rust code according to style guidelines. Your\n+code has to be formatted by `rustfmt` before a PR can be merged. Clippy uses\n+nightly `rustfmt` in the CI.\n \n It can be installed via `rustup`:\n \n@@ -575,94 +578,105 @@ Before submitting your PR make sure you followed all of the basic requirements:\n \n ## Adding configuration to a lint\n \n-Clippy supports the configuration of lints values using a `clippy.toml` file in the workspace\n-directory. Adding a configuration to a lint can be useful for thresholds or to constrain some\n-behavior that can be seen as a false positive for some users. Adding a configuration is done\n-in the following steps:\n+Clippy supports the configuration of lints values using a `clippy.toml` file in\n+the workspace directory. Adding a configuration to a lint can be useful for\n+thresholds or to constrain some behavior that can be seen as a false positive\n+for some users. Adding a configuration is done in the following steps:\n \n-1. Adding a new configuration entry to [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs)\n-    like this:\n-    ```rust\n-    /// Lint: LINT_NAME.\n-    ///\n-    /// <The configuration field doc comment>\n-    (configuration_ident: Type = DefaultValue),\n-    ```\n-    The doc comment is automatically added to the documentation of the listed lints. The default\n-    value will be formatted using the `Debug` implementation of the type.\n-2. Adding the configuration value to the lint impl struct:\n-    1. This first requires the definition of a lint impl struct. Lint impl structs are usually\n-        generated with the `declare_lint_pass!` macro. This struct needs to be defined manually\n-        to add some kind of metadata to it:\n-        ```rust\n-        // Generated struct definition\n-        declare_lint_pass!(StructName => [\n-            LINT_NAME\n-        ]);\n-\n-        // New manual definition struct\n-        #[derive(Copy, Clone)]\n-        pub struct StructName {}\n-\n-        impl_lint_pass!(StructName => [\n-            LINT_NAME\n-        ]);\n-        ```\n-\n-    2. Next add the configuration value and a corresponding creation method like this:\n-        ```rust\n-        #[derive(Copy, Clone)]\n-        pub struct StructName {\n-            configuration_ident: Type,\n-        }\n+1. Adding a new configuration entry to\n+   [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs) like this:\n \n-        // ...\n+   ```rust\n+   /// Lint: LINT_NAME.\n+   ///\n+   /// <The configuration field doc comment>\n+   (configuration_ident: Type = DefaultValue),\n+   ```\n \n-        impl StructName {\n-            pub fn new(configuration_ident: Type) -> Self {\n-                Self {\n-                    configuration_ident,\n-                }\n-            }\n-        }\n-        ```\n+   The doc comment is automatically added to the documentation of the listed\n+   lints. The default value will be formatted using the `Debug` implementation\n+   of the type.\n+2. Adding the configuration value to the lint impl struct:\n+    1. This first requires the definition of a lint impl struct. Lint impl\n+       structs are usually generated with the `declare_lint_pass!` macro. This\n+       struct needs to be defined manually to add some kind of metadata to it:\n+       ```rust\n+       // Generated struct definition\n+       declare_lint_pass!(StructName => [\n+           LINT_NAME\n+       ]);\n+\n+       // New manual definition struct\n+       #[derive(Copy, Clone)]\n+       pub struct StructName {}\n+\n+       impl_lint_pass!(StructName => [\n+           LINT_NAME\n+       ]);\n+       ```\n+\n+    2. Next add the configuration value and a corresponding creation method like\n+       this:\n+       ```rust\n+       #[derive(Copy, Clone)]\n+       pub struct StructName {\n+           configuration_ident: Type,\n+       }\n+\n+       // ...\n+\n+       impl StructName {\n+           pub fn new(configuration_ident: Type) -> Self {\n+               Self {\n+                   configuration_ident,\n+               }\n+           }\n+       }\n+       ```\n 3. Passing the configuration value to the lint impl struct:\n \n-    First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs).\n-    The configuration value is now cloned or copied into a local value that is then passed to the\n-    impl struct like this:\n-    ```rust\n-    // Default generated registration:\n-    store.register_*_pass(|| box module::StructName);\n+   First find the struct construction in the [clippy_lints lib\n+   file](/clippy_lints/src/lib.rs). The configuration value is now cloned or\n+   copied into a local value that is then passed to the impl struct like this:\n+\n+   ```rust\n+   // Default generated registration:\n+   store.register_*_pass(|| box module::StructName);\n \n-    // New registration with configuration value\n-    let configuration_ident = conf.configuration_ident.clone();\n-    store.register_*_pass(move || box module::StructName::new(configuration_ident));\n-    ```\n+   // New registration with configuration value\n+   let configuration_ident = conf.configuration_ident.clone();\n+   store.register_*_pass(move || box module::StructName::new(configuration_ident));\n+   ```\n \n-    Congratulations the work is almost done. The configuration value can now be accessed\n-    in the linting code via `self.configuration_ident`.\n+   Congratulations the work is almost done. The configuration value can now be\n+   accessed in the linting code via `self.configuration_ident`.\n \n 4. Adding tests:\n-    1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n-    2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml).\n-        Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file\n-        with the configuration value and a rust file that should be linted by Clippy. The test can\n-        otherwise be written as usual.\n+    1. The default configured value can be tested like any normal lint in\n+       [`tests/ui`](/tests/ui).\n+    2. The configuration itself will be tested separately in\n+       [`tests/ui-toml`](/tests/ui-toml). Simply add a new subfolder with a\n+       fitting name. This folder contains a `clippy.toml` file with the\n+       configuration value and a rust file that should be linted by Clippy. The\n+       test can otherwise be written as usual.\n \n ## Cheat Sheet\n \n Here are some pointers to things you are likely going to need for every lint:\n \n * [Clippy utils][utils] - Various helper functions. Maybe the function you need\n-  is already in here ([`is_type_diagnostic_item`], [`implements_trait`], [`snippet`], etc)\n+  is already in here ([`is_type_diagnostic_item`], [`implements_trait`],\n+  [`snippet`], etc)\n * [Clippy diagnostics][diagnostics]\n * [Let chains][let-chains]\n-* [`from_expansion`][from_expansion] and [`in_external_macro`][in_external_macro]\n+* [`from_expansion`][from_expansion] and\n+  [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n-* [Common tools for writing lints](common_tools_writing_lints.md) helps with common operations\n-* [The rustc-dev-guide][rustc-dev-guide] explains a lot of internal compiler concepts\n+* [Common tools for writing lints](common_tools_writing_lints.md) helps with\n+  common operations\n+* [The rustc-dev-guide][rustc-dev-guide] explains a lot of internal compiler\n+  concepts\n * [The nightly rustc docs][nightly_docs] which has been linked to throughout\n   this guide\n ", "previous_filename": "doc/adding_lints.md"}, {"sha": "78c429ea0132247f555723fb03bf1452bcd3a05c", "filename": "book/src/development/basics.md", "status": "renamed", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fbasics.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,8 +1,8 @@\n # Basics for hacking on Clippy\n \n This document explains the basics for hacking on Clippy. Besides others, this\n-includes how to build and test Clippy. For a more in depth description on\n-the codebase take a look at [Adding Lints] or [Common Tools].\n+includes how to build and test Clippy. For a more in depth description on the\n+codebase take a look at [Adding Lints] or [Common Tools].\n \n [Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n [Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n@@ -62,8 +62,8 @@ TESTNAME=\"test_\" cargo uitest\n cargo test --test dogfood\n ```\n \n-If the output of a [UI test] differs from the expected output, you can update the\n-reference file with:\n+If the output of a [UI test] differs from the expected output, you can update\n+the reference file with:\n \n ```bash\n cargo dev bless\n@@ -72,8 +72,8 @@ cargo dev bless\n For example, this is necessary, if you fix a typo in an error message of a lint\n or if you modify a test file to add a test case.\n \n-_Note:_ This command may update more files than you intended. In that case only\n-commit the files you wanted to update.\n+> _Note:_ This command may update more files than you intended. In that case\n+> only commit the files you wanted to update.\n \n [UI test]: https://rustc-dev-guide.rust-lang.org/tests/adding.html#guide-to-the-ui-tests\n \n@@ -96,22 +96,26 @@ cargo dev setup git-hook\n # (experimental) Setup Clippy to work with IntelliJ-Rust\n cargo dev setup intellij\n ```\n-More about intellij command usage and reasons [here](../CONTRIBUTING.md#intellij-rust)\n+\n+More about intellij command usage and reasons\n+[here](../CONTRIBUTING.md#intellij-rust)\n \n ## lintcheck\n-`cargo lintcheck` will build and run clippy on a fixed set of crates and generate a log of the results.  \n-You can `git diff` the updated log against its previous version and\n-see what impact your lint made on a small set of crates.  \n-If you add a new lint, please audit the resulting warnings and make sure\n-there are no false positives and that the suggestions are valid.\n+\n+`cargo lintcheck` will build and run clippy on a fixed set of crates and\n+generate a log of the results.  You can `git diff` the updated log against its\n+previous version and see what impact your lint made on a small set of crates.\n+If you add a new lint, please audit the resulting warnings and make sure there\n+are no false positives and that the suggestions are valid.\n \n Refer to the tools [README] for more details.\n \n [README]: https://github.com/rust-lang/rust-clippy/blob/master/lintcheck/README.md\n+\n ## PR\n \n-We follow a rustc no merge-commit policy.\n-See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n+We follow a rustc no merge-commit policy. See\n+<https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n \n ## Common Abbreviations\n \n@@ -126,27 +130,34 @@ See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n | HIR          | High-Level Intermediate Representation |\n | TCX          | Type context                           |\n \n-This is a concise list of abbreviations that can come up during Clippy development. An extensive\n-general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n-an abbreviation or meaning is unclear to you.\n+This is a concise list of abbreviations that can come up during Clippy\n+development. An extensive general list can be found in the [rustc-dev-guide\n+glossary][glossary]. Always feel free to ask if an abbreviation or meaning is\n+unclear to you.\n \n ## Install from source\n \n-If you are hacking on Clippy and want to install it from source, do the following:\n+If you are hacking on Clippy and want to install it from source, do the\n+following:\n \n-First, take note of the toolchain [override](https://rust-lang.github.io/rustup/overrides.html) in `/rust-toolchain`.\n-We will use this override to install Clippy into the right toolchain.\n+First, take note of the toolchain\n+[override](https://rust-lang.github.io/rustup/overrides.html) in\n+`/rust-toolchain`. We will use this override to install Clippy into the right\n+toolchain.\n \n-> Tip: You can view the active toolchain for the current directory with `rustup show active-toolchain`.\n+> Tip: You can view the active toolchain for the current directory with `rustup\n+> show active-toolchain`.\n \n-From the Clippy project root, run the following command to build the Clippy binaries and copy them into the\n-toolchain directory. This will override the currently installed Clippy component.\n+From the Clippy project root, run the following command to build the Clippy\n+binaries and copy them into the toolchain directory. This will override the\n+currently installed Clippy component.\n \n ```terminal\n cargo build --release --bin cargo-clippy --bin clippy-driver -Zunstable-options --out-dir \"$(rustc --print=sysroot)/bin\"\n ```\n \n-Now you may run `cargo clippy` in any project, using the toolchain where you just installed Clippy.\n+Now you may run `cargo clippy` in any project, using the toolchain where you\n+just installed Clippy.\n \n ```terminal\n cd my-project\n@@ -159,16 +170,19 @@ cargo +nightly-2021-07-01 clippy\n clippy-driver +nightly-2021-07-01 <filename>\n ```\n \n-If you need to restore the default Clippy installation, run the following (from the Clippy project root).\n+If you need to restore the default Clippy installation, run the following (from\n+the Clippy project root).\n \n ```terminal\n rustup component remove clippy\n rustup component add clippy\n ```\n \n-> **DO NOT** install using `cargo install --path . --force` since this will overwrite rustup\n-> [proxies](https://rust-lang.github.io/rustup/concepts/proxies.html). That is, `~/.cargo/bin/cargo-clippy` and\n-> `~/.cargo/bin/clippy-driver` should be hard or soft links to `~/.cargo/bin/rustup`. You can repair these by running\n-> `rustup update`.\n+> **DO NOT** install using `cargo install --path . --force` since this will\n+> overwrite rustup\n+> [proxies](https://rust-lang.github.io/rustup/concepts/proxies.html). That is,\n+> `~/.cargo/bin/cargo-clippy` and `~/.cargo/bin/clippy-driver` should be hard or\n+> soft links to `~/.cargo/bin/rustup`. You can repair these by running `rustup\n+> update`.\n \n [glossary]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html", "previous_filename": "doc/basics.md"}, {"sha": "e1ed89262f677c925ff49c0c77d8e20c9de82611", "filename": "book/src/development/common_tools_writing_lints.md", "status": "renamed", "additions": 72, "deletions": 59, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -18,15 +18,17 @@ Useful Rustc dev guide links:\n \n ## Retrieving the type of an expression\n \n-Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for example to answer following questions:\n+Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for\n+example to answer following questions:\n \n - which type does this expression correspond to (using its [`TyKind`][TyKind])?\n - is it a sized type?\n - is it a primitive type?\n - does it implement a trait?\n \n-This operation is performed using the [`expr_ty()`][expr_ty] method from the [`TypeckResults`][TypeckResults] struct,\n-that gives you access to the underlying structure [`Ty`][Ty].\n+This operation is performed using the [`expr_ty()`][expr_ty] method from the\n+[`TypeckResults`][TypeckResults] struct, that gives you access to the underlying\n+structure [`Ty`][Ty].\n \n Example of use:\n ```rust\n@@ -43,21 +45,22 @@ impl LateLintPass<'_> for MyStructLint {\n }\n ```\n \n-Similarly in [`TypeckResults`][TypeckResults] methods, you have the [`pat_ty()`][pat_ty] method\n-to retrieve a type from a pattern.\n+Similarly in [`TypeckResults`][TypeckResults] methods, you have the\n+[`pat_ty()`][pat_ty] method to retrieve a type from a pattern.\n \n Two noticeable items here:\n - `cx` is the lint context [`LateContext`][LateContext]. The two most useful\n   data structures in this context are `tcx` and the `TypeckResults` returned by\n   `LateContext::typeck_results`, allowing us to jump to type definitions and\n   other compilation stages such as HIR.\n - `typeck_results`'s return value is [`TypeckResults`][TypeckResults] and is\n-  created by type checking step, it includes useful information such as types\n-  of expressions, ways to resolve methods and so on.\n+  created by type checking step, it includes useful information such as types of\n+  expressions, ways to resolve methods and so on.\n \n ## Checking if an expr is calling a specific method\n \n-Starting with an `expr`, you can check whether it is calling a specific method `some_method`:\n+Starting with an `expr`, you can check whether it is calling a specific method\n+`some_method`:\n \n ```rust\n impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n@@ -77,8 +80,9 @@ impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n \n ## Checking for a specific type\n \n-There are three ways to check if an expression type is a specific type we want to check for.\n-All of these methods only check for the base type, generic arguments have to be checked separately.\n+There are three ways to check if an expression type is a specific type we want\n+to check for. All of these methods only check for the base type, generic\n+arguments have to be checked separately.\n \n ```rust\n use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n@@ -115,7 +119,8 @@ Prefer using diagnostic items and lang items where possible.\n \n ## Checking if a type implements a specific trait\n \n-There are three ways to do this, depending on if the target trait has a diagnostic item, lang item or neither.\n+There are three ways to do this, depending on if the target trait has a\n+diagnostic item, lang item or neither.\n \n ```rust\n use clippy_utils::{implements_trait, is_trait_method, match_trait_method, paths};\n@@ -151,8 +156,9 @@ impl LateLintPass<'_> for MyStructLint {\n \n > Prefer using diagnostic and lang items, if the target trait has one.\n \n-We access lang items through the type context `tcx`. `tcx` is of type [`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate.\n-A list of defined paths for Clippy can be found in [paths.rs][paths]\n+We access lang items through the type context `tcx`. `tcx` is of type\n+[`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate. A list of defined\n+paths for Clippy can be found in [paths.rs][paths]\n \n ## Checking if a type defines a specific method\n \n@@ -182,14 +188,15 @@ impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n ## Dealing with macros and expansions\n \n Keep in mind that macros are already expanded and desugaring is already applied\n-to the code representation that you are working with in Clippy. This unfortunately causes a lot of\n-false positives because macro expansions are \"invisible\" unless you actively check for them.\n-Generally speaking, code with macro expansions should just be ignored by Clippy because that code can be\n-dynamic in ways that are difficult or impossible to see.\n-Use the following functions to deal with macros:\n+to the code representation that you are working with in Clippy. This\n+unfortunately causes a lot of false positives because macro expansions are\n+\"invisible\" unless you actively check for them. Generally speaking, code with\n+macro expansions should just be ignored by Clippy because that code can be\n+dynamic in ways that are difficult or impossible to see. Use the following\n+functions to deal with macros:\n \n-- `span.from_expansion()`: detects if a span is from macro expansion or desugaring.\n-  Checking this is a common first step in a lint.\n+- `span.from_expansion()`: detects if a span is from macro expansion or\n+  desugaring. Checking this is a common first step in a lint.\n \n    ```rust\n    if expr.span.from_expansion() {\n@@ -198,45 +205,51 @@ Use the following functions to deal with macros:\n    }\n    ```\n \n-- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, which macro call expanded it.\n-   It is sometimes useful to check if the context of two spans are equal.\n-\n-   ```rust\n-   // expands to `1 + 0`, but don't lint\n-   1 + mac!()\n-   ```\n-   ```rust\n-   if left.span.ctxt() != right.span.ctxt() {\n-       // the coder most likely cannot modify this expression\n-       return;\n-   }\n-   ```\n-  Note: Code that is not from expansion is in the \"root\" context. So any spans where `from_expansion` returns `true` can\n-  be assumed to have the same context. And so just using `span.from_expansion()` is often good enough.\n-\n-\n-- `in_external_macro(span)`: detect if the given span is from a macro defined in a foreign crate.\n-   If you want the lint to work with macro-generated code, this is the next line of defense to avoid macros\n-   not defined in the current crate. It doesn't make sense to lint code that the coder can't change.\n-\n-   You may want to use it for example to not start linting in macros from other crates\n-\n-   ```rust\n-   #[macro_use]\n-   extern crate a_crate_with_macros;\n-\n-   // `foo` is defined in `a_crate_with_macros`\n-   foo!(\"bar\");\n-\n-   // if we lint the `match` of `foo` call and test its span\n-   assert_eq!(in_external_macro(cx.sess(), match_span), true);\n-   ```\n-\n-- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, what expanded it\n-\n-One thing `SpanContext` is useful for is to check if two spans are in the same context. For example,\n-in `a == b`, `a` and `b` have the same context. In a `macro_rules!` with `a == $b`, `$b` is expanded to some\n-expression with a different context from `a`.\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and\n+  if so, which macro call expanded it. It is sometimes useful to check if the\n+  context of two spans are equal.\n+\n+  ```rust\n+  // expands to `1 + 0`, but don't lint\n+  1 + mac!()\n+  ```\n+  ```rust\n+  if left.span.ctxt() != right.span.ctxt() {\n+      // the coder most likely cannot modify this expression\n+      return;\n+  }\n+  ```\n+  > Note: Code that is not from expansion is in the \"root\" context. So any spans\n+  > where `from_expansion` returns `true` can be assumed to have the same\n+  > context. And so just using `span.from_expansion()` is often good enough.\n+\n+\n+- `in_external_macro(span)`: detect if the given span is from a macro defined in\n+  a foreign crate. If you want the lint to work with macro-generated code, this\n+  is the next line of defense to avoid macros not defined in the current crate.\n+  It doesn't make sense to lint code that the coder can't change.\n+\n+  You may want to use it for example to not start linting in macros from other\n+  crates\n+\n+  ```rust\n+  #[macro_use]\n+  extern crate a_crate_with_macros;\n+\n+  // `foo` is defined in `a_crate_with_macros`\n+  foo!(\"bar\");\n+\n+  // if we lint the `match` of `foo` call and test its span\n+  assert_eq!(in_external_macro(cx.sess(), match_span), true);\n+  ```\n+\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and\n+  if so, what expanded it\n+\n+  One thing `SpanContext` is useful for is to check if two spans are in the same\n+  context. For example, in `a == b`, `a` and `b` have the same context. In a\n+  `macro_rules!` with `a == $b`, `$b` is expanded to some expression with a\n+  different context from `a`.\n \n    ```rust\n    macro_rules! m {", "previous_filename": "doc/common_tools_writing_lints.md"}, {"sha": "3b2a253999629c54d536f64a4bfad41b6c086dcd", "filename": "book/src/development/infrastructure/README.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2FREADME.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,19 @@\n+# Infrastructure\n+\n+In order to deploy Clippy over `rustup`, some infrastructure is necessary. This\n+chapter describes the different parts of the Clippy infrastructure that need to\n+be maintained to make this possible.\n+\n+The most important part is the sync between the `rust-lang/rust` repository and\n+the Clippy repository that takes place every two weeks. This process is\n+described in the [Syncing changes between Clippy and `rust-lang/rust`](sync.md)\n+section.\n+\n+A new Clippy release is done together with every Rust release, so every six\n+weeks. The release process is described in the [Release a new Clippy\n+Version](release.md) section. During a release cycle a changelog entry for the\n+next release has to be written. The format of that and how to do that is\n+documented in the [Changelog Update](changelog_update.md) section.\n+\n+> _Note:_ The Clippy CI should also be described in this chapter, but for now is\n+> left as a TODO."}, {"sha": "15f3d1f080604d7286cf870a66569b9f123e287d", "filename": "book/src/development/infrastructure/backport.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "previous_filename": "doc/backport.md"}, {"sha": "b62314c6735a2de4b48ecb07e11f2064c852f51d", "filename": "book/src/development/infrastructure/book.md", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,42 @@\n+# The Clippy Book\n+\n+This document explains how to make additions and changes to the Clippy book, the\n+guide to Clippy that you're reading right now. The Clippy book is formatted with\n+[Markdown](https://www.markdownguide.org) and generated by\n+[mdbook](https://github.com/rust-lang/mdBook).\n+\n+- [Get mdbook](#get-mdbook)\n+- [Make changes](#make-changes)\n+\n+## Get mdbook\n+\n+While not strictly necessary since the book source is simply Markdown text\n+files, having mdbook locally will allow you to build, test and serve the book\n+locally to view changes before you commit them to the repository. You likely\n+already have `cargo` installed, so the easiest option is to simply:\n+\n+```shell\n+cargo install mdbook\n+```\n+\n+See the mdbook [installation](https://github.com/rust-lang/mdBook#installation)\n+instructions for other options.\n+\n+## Make changes\n+\n+The book's\n+[src](https://github.com/joshrotenberg/rust-clippy/tree/clippy_guide/book/src)\n+directory contains all of the markdown files used to generate the book. If you\n+want to see your changes in real time, you can use the mdbook `serve` command to\n+run a web server locally that will automatically update changes as they are\n+made. From the top level of your `rust-clippy` directory:\n+\n+```shell\n+mdbook serve book --open\n+```\n+\n+Then navigate to `http://localhost:3000` to see the generated book. While the\n+server is running, changes you make will automatically be updated.\n+\n+For more information, see the mdbook\n+[guide](https://rust-lang.github.io/mdBook/)."}, {"sha": "e560f4c6a3e51d5b752af5b7c4479509469ac5f0", "filename": "book/src/development/infrastructure/changelog_update.md", "status": "renamed", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,6 +1,6 @@\n # Changelog Update\n \n-If you want to help with updating the [changelog][changelog], you're in the right place.\n+If you want to help with updating the [changelog], you're in the right place.\n \n ## When to update\n \n@@ -11,8 +11,8 @@ Rust release. For that purpose, the changelog is ideally updated during the week\n before an upcoming stable release. You can find the release dates on the [Rust\n Forge][forge].\n \n-Most of the time we only need to update the changelog for minor Rust releases. It's\n-been very rare that Clippy changes were included in a patch release.\n+Most of the time we only need to update the changelog for minor Rust releases.\n+It's been very rare that Clippy changes were included in a patch release.\n \n ## Changelog update walkthrough\n \n@@ -24,18 +24,21 @@ be found in the `tools` directory of the Rust repository.\n Depending on the current time and what exactly you want to update, the following\n bullet points might be helpful:\n \n-* When writing the release notes for the **upcoming stable release** you need to check\n-  out the Clippy commit of the current Rust `beta` branch. [Link][rust_beta_tools]\n-* When writing the release notes for the **upcoming beta release**, you need to check\n-  out the Clippy commit of the current Rust `master`. [Link][rust_master_tools]\n+* When writing the release notes for the **upcoming stable release** you need to\n+  check out the Clippy commit of the current Rust `beta` branch.\n+  [Link][rust_beta_tools]\n+* When writing the release notes for the **upcoming beta release**, you need to\n+  check out the Clippy commit of the current Rust `master`.\n+  [Link][rust_master_tools]\n * When writing the (forgotten) release notes for a **past stable release**, you\n   need to check out the Rust release tag of the stable release.\n   [Link][rust_stable_tools]\n \n Usually you want to write the changelog of the **upcoming stable release**. Make\n sure though, that `beta` was already branched in the Rust repository.\n \n-To find the commit hash, issue the following command when in a `rust-lang/rust` checkout:\n+To find the commit hash, issue the following command when in a `rust-lang/rust`\n+checkout:\n ```\n git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\"\n ```\n@@ -44,7 +47,9 @@ git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into\n \n Once you've got the correct commit range, run\n \n-    util/fetch_prs_between.sh commit1 commit2 > changes.txt\n+```\n+util/fetch_prs_between.sh commit1 commit2 > changes.txt\n+```\n \n and open that file in your editor of choice.\n \n@@ -54,14 +59,14 @@ already correct in the current changelog.\n ### 3. Authoring the final changelog\n \n The above script should have dumped all the relevant PRs to the file you\n-specified. It should have filtered out most of the irrelevant PRs\n-already, but it's a good idea to do a manual cleanup pass where you look for\n-more irrelevant PRs. If you're not sure about some PRs, just leave them in for\n-the review and ask for feedback.\n-\n-With the PRs filtered, you can start to take each PR and move the\n-`changelog: ` content to `CHANGELOG.md`. Adapt the wording as you see fit but\n-try to keep it somewhat coherent.\n+specified. It should have filtered out most of the irrelevant PRs already, but\n+it's a good idea to do a manual cleanup pass where you look for more irrelevant\n+PRs. If you're not sure about some PRs, just leave them in for the review and\n+ask for feedback.\n+\n+With the PRs filtered, you can start to take each PR and move the `changelog: `\n+content to `CHANGELOG.md`. Adapt the wording as you see fit but try to keep it\n+somewhat coherent.\n \n The order should roughly be:\n ", "previous_filename": "doc/changelog_update.md"}, {"sha": "0572281803e71ea99507d5304b2661be79f2f1c9", "filename": "book/src/development/infrastructure/release.md", "status": "renamed", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,7 +1,7 @@\n # Release a new Clippy Version\n \n-_NOTE: This document is probably only relevant to you, if you're a member of the\n-Clippy team._\n+> _NOTE:_ This document is probably only relevant to you, if you're a member of\n+> the Clippy team.\n \n Clippy is released together with stable Rust releases. The dates for these\n releases can be found at the [Rust Forge]. This document explains the necessary\n@@ -13,12 +13,11 @@ steps to create a Clippy release.\n 4. [Tag the stable commit](#tag-the-stable-commit)\n 5. [Update `CHANGELOG.md`](#update-changelogmd)\n \n-_NOTE: This document is for stable Rust releases, not for point releases. For\n-point releases, step 1. and 2. should be enough._\n+> _NOTE:_ This document is for stable Rust releases, not for point releases. For\n+> point releases, step 1. and 2. should be enough.\n \n [Rust Forge]: https://forge.rust-lang.org/\n \n-\n ## Remerge the `beta` branch\n \n This step is only necessary, if since the last release something was backported\n@@ -29,7 +28,7 @@ tree of the Clippy repository.\n To find out if this step is necessary run\n \n ```bash\n-# Assumes that the local master branch is up-to-date\n+# Assumes that the local master branch of rust-lang/rust-clippy is up-to-date\n $ git fetch upstream\n $ git branch master --contains upstream/beta\n ```\n@@ -45,9 +44,8 @@ $ git push origin backport_remerge  # This can be pushed to your fork\n ```\n \n After this, open a PR to the master branch. In this PR, the commit hash of the\n-`HEAD` of the `beta` branch must exists. In addition to that, no files should\n-be changed by this PR.\n-\n+`HEAD` of the `beta` branch must exists. In addition to that, no files should be\n+changed by this PR.\n \n ## Update the `beta` branch\n \n@@ -58,7 +56,8 @@ determined.\n \n ```bash\n # Assuming the current directory corresponds to the Rust repository\n-$ git checkout beta\n+$ git fetch upstream\n+$ git checkout upstream/beta\n $ BETA_SHA=$(git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\")\n ```\n \n@@ -72,7 +71,6 @@ $ git reset --hard $BETA_SHA\n $ git push upstream beta\n ```\n \n-\n ## Find the Clippy commit\n \n The first step is to tag the Clippy commit, that is included in the stable Rust\n@@ -85,7 +83,6 @@ $ git checkout 1.XX.0   # XX should be exchanged with the corresponding version\n $ SHA=$(git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\")\n ```\n \n-\n ## Tag the stable commit\n \n After finding the Clippy commit, it can be tagged with the release number.\n@@ -112,10 +109,10 @@ tag. Updating the stable branch from here is as easy as:\n $ git push upstream rust-1.XX.0:stable  # `upstream` is the `rust-lang/rust-clippy` remote\n ```\n \n-_NOTE: Usually there are no stable backports for Clippy, so this update should\n-be possible without force pushing or anything like this. If there should have\n-happened a stable backport, make sure to re-merge those changes just as with the\n-`beta` branch._\n+> _NOTE:_ Usually there are no stable backports for Clippy, so this update\n+> should be possible without force pushing or anything like this. If there\n+> should have happened a stable backport, make sure to re-merge those changes\n+> just as with the `beta` branch.\n \n ## Update `CHANGELOG.md`\n \n@@ -142,4 +139,4 @@ the following parts:\n   Current stable, released 20YY-MM-DD -> Released 20YY-MM-DD\n   ```\n \n-[how to update the changelog]: https://github.com/rust-lang/rust-clippy/blob/master/doc/changelog_update.md\n+[how to update the changelog]: changelog_update.md", "previous_filename": "doc/release.md"}, {"sha": "5a0f7409a2e4cebfd42d26bd7771d90912423501", "filename": "book/src/development/infrastructure/sync.md", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,123 @@\n+# Syncing changes between Clippy and [`rust-lang/rust`]\n+\n+Clippy currently gets built with a pinned nightly version.\n+\n+In the `rust-lang/rust` repository, where rustc resides, there's a copy of\n+Clippy that compiler hackers modify from time to time to adapt to changes in the\n+unstable API of the compiler.\n+\n+We need to sync these changes back to this repository periodically, and the\n+changes made to this repository in the meantime also need to be synced to the\n+`rust-lang/rust` repository.\n+\n+To avoid flooding the `rust-lang/rust` PR queue, this two-way sync process is\n+done in a bi-weekly basis if there's no urgent changes. This is done starting on\n+the day of the Rust stable release and then every other week. That way we\n+guarantee that we keep this repo up to date with the latest compiler API, and\n+every feature in Clippy is available for 2 weeks in nightly, before it can get\n+to beta. For reference, the first sync following this cadence was performed the\n+2020-08-27.\n+\n+This process is described in detail in the following sections. For general\n+information about `subtree`s in the Rust repository see [Rust's\n+`CONTRIBUTING.md`][subtree].\n+\n+## Patching git-subtree to work with big repos\n+\n+Currently, there's a bug in `git-subtree` that prevents it from working properly\n+with the [`rust-lang/rust`] repo. There's an open PR to fix that, but it's\n+stale. Before continuing with the following steps, we need to manually apply\n+that fix to our local copy of `git-subtree`.\n+\n+You can get the patched version of `git-subtree` from [here][gitgitgadget-pr].\n+Put this file under `/usr/lib/git-core` (making a backup of the previous file)\n+and make sure it has the proper permissions:\n+\n+```bash\n+sudo cp --backup /path/to/patched/git-subtree.sh /usr/lib/git-core/git-subtree\n+sudo chmod --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n+sudo chown --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n+```\n+\n+> _Note:_ The first time running `git subtree push` a cache has to be built.\n+> This involves going through the complete Clippy history once. For this you\n+> have to increase the stack limit though, which you can do with `ulimit -s\n+> 60000`. Make sure to run the `ulimit` command from the same session you call\n+> git subtree.\n+\n+> _Note:_ If you are a Debian user, `dash` is the shell used by default for\n+> scripts instead of `sh`. This shell has a hardcoded recursion limit set to\n+> 1000. In order to make this process work, you need to force the script to run\n+> `bash` instead. You can do this by editing the first line of the `git-subtree`\n+> script and changing `sh` to `bash`.\n+\n+## Defining remotes\n+\n+You may want to define remotes, so you don't have to type out the remote\n+addresses on every sync. You can do this with the following commands (these\n+commands still have to be run inside the `rust` directory):\n+\n+```bash\n+# Set clippy-upstream remote for pulls\n+$ git remote add clippy-upstream https://github.com/rust-lang/rust-clippy\n+# Make sure to not push to the upstream repo\n+$ git remote set-url --push clippy-upstream DISABLED\n+# Set a local remote\n+$ git remote add clippy-local /path/to/rust-clippy\n+```\n+\n+> Note: The following sections assume that you have set those remotes with the\n+> above remote names.\n+\n+## Performing the sync from [`rust-lang/rust`] to Clippy\n+\n+Here is a TL;DR version of the sync process (all of the following commands have\n+to be run inside the `rust` directory):\n+\n+1. Clone the [`rust-lang/rust`] repository or make sure it is up to date.\n+2. Checkout the commit from the latest available nightly. You can get it using\n+   `rustup check`.\n+3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n+    ```bash\n+    # Make sure to change `your-github-name` to your github name in the following command. Also be\n+    # sure to either use a net-new branch, e.g. `sync-from-rust`, or delete the branch beforehand\n+    # because changes cannot be fast forwarded and you have to run this command again.\n+    git subtree push -P src/tools/clippy clippy-local sync-from-rust\n+    ```\n+\n+    > _Note:_ Most of the time you have to create a merge commit in the\n+    > `rust-clippy` repo (this has to be done in the Clippy repo, not in the\n+    > rust-copy of Clippy):\n+    ```bash\n+    git fetch upstream  # assuming upstream is the rust-lang/rust remote\n+    git checkout sync-from-rust\n+    git merge upstream/master --no-ff\n+    ```\n+    > Note: This is one of the few instances where a merge commit is allowed in\n+    > a PR.\n+4. Bump the nightly version in the Clippy repository by changing the date in the\n+   rust-toolchain file to the current date and committing it with the message:\n+   ```bash\n+   git commit -m \"Bump nightly version -> YYYY-MM-DD\"\n+   ```\n+5. Open a PR to `rust-lang/rust-clippy` and wait for it to get merged (to\n+   accelerate the process ping the `@rust-lang/clippy` team in your PR and/or\n+   ask them in the [Zulip] stream.)\n+\n+[Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/clippy\n+\n+## Performing the sync from Clippy to [`rust-lang/rust`]\n+\n+All of the following commands have to be run inside the `rust` directory.\n+\n+1. Make sure you have checked out the latest `master` of `rust-lang/rust`.\n+2. Sync the `rust-lang/rust-clippy` master to the rust-copy of Clippy:\n+    ```bash\n+    git checkout -b sync-from-clippy\n+    git subtree pull -P src/tools/clippy clippy-upstream master\n+    ```\n+3. Open a PR to [`rust-lang/rust`]\n+\n+[gitgitgadget-pr]: https://github.com/gitgitgadget/git/pull/493\n+[subtree]: https://rustc-dev-guide.rust-lang.org/contributing.html#external-dependencies-subtree\n+[`rust-lang/rust`]: https://github.com/rust-lang/rust"}, {"sha": "78fe34ebf8fafdcf04e24d1c26b1285addf5efe8", "filename": "book/src/development/proposals/README.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,11 @@\n+# Proposals\n+\n+This chapter is about accepted proposals for changes that should be worked on in\n+or around Clippy in the long run.\n+\n+Besides adding more and more lints and improve the lints that Clippy already\n+has, Clippy is also interested in making the experience of its users, developers\n+and maintainers better over time. Projects that address bigger picture things\n+like this usually take more time and it is useful to have a proposal for those\n+first. This is the place where such proposals are collected, so that we can\n+refer to them when working on them."}, {"sha": "fe8b080f56f2bc0c518c7b3e2049def4eed5b9f1", "filename": "book/src/development/proposals/roadmap-2021.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "previous_filename": "doc/roadmap-2021.md"}, {"sha": "b2a28d0be622f1874e15f922d487016710ddd248", "filename": "book/src/installation.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Finstallation.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Finstallation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finstallation.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,24 @@\n+# Installation\n+\n+If you're using `rustup` to install and manage you're Rust toolchains, Clippy is\n+usually **already installed**. In that case you can skip this chapter and go to\n+the [Usage] chapter.\n+\n+> Note: If you used the `minimal` profile when installing a Rust toolchain,\n+> Clippy is not automatically installed.\n+\n+## Using Rustup\n+\n+If Clippy was not installed for a toolchain, it can be installed with\n+\n+```\n+$ rustup component add clippy [--toolchain=<name>]\n+```\n+\n+## From Source\n+\n+Take a look at the [Basics] chapter in the Clippy developer guide to find step\n+by step instructions on how to build and install Clippy from source.\n+\n+[Basics]: development/basics.md#install-from-source\n+[Usage]: usage.md"}, {"sha": "35e30960b56c6276571144308efa5af9621e5c02", "filename": "book/src/lints.md", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flints.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,105 @@\n+# Clippy's Lints\n+\n+Clippy offers a bunch of additional lints, to help its users write more correct\n+and idiomatic Rust code. A full list of all lints, that can be filtered by\n+category, lint level or keywords, can be found in the [Clippy lint\n+documentation].\n+\n+This chapter will give an overview of the different lint categories, which kind\n+of lints they offer and recommended actions when you should see a lint out of\n+that category. For examples, see the [Clippy lint documentation] and filter by\n+category.\n+\n+The different lint groups were defined in the [Clippy 1.0 RFC].\n+\n+## Correctness\n+\n+The `clippy::correctness` group is the only lint group in Clippy which lints are\n+deny-by-default and abort the compilation when triggered. This is for good\n+reason: If you see a `correctness` lint, it means that your code is outright\n+wrong or useless and you should try to fix it.\n+\n+Lints in this category are carefully picked and should be free of false\n+positives. So just `#[allow]`ing those lints is not recommended.\n+\n+## Suspicious\n+\n+The `clippy::suspicious` group is similar to the correctness lints in that it\n+contains lints that trigger on code that is really _sus_ and should be fixed. As\n+opposed to correctness lints, it might be possible that the linted code is\n+intentionally written like it is.\n+\n+It is still recommended to fix code that is linted by lints out of this group\n+instead of `#[allow]`ing the lint. In case you intentionally have written code\n+that offends the lint you should specifically and locally `#[allow]` the lint\n+and add give a reason why the code is correct as written.\n+\n+## Complexity\n+\n+The `clippy::complexity` group offers lints that give you suggestions on how to\n+simplify your code. It mostly focuses on code that can be written in a shorter\n+and more readable way, while preserving the semantics.\n+\n+If you should see a complexity lint, it usually means that you can remove or\n+replace some code and it is recommended to do so. However, if you need the more\n+complex code for some expressiveness reason, it is recommended to allow\n+complexity lints on a case-by-case basis.\n+\n+## Perf\n+\n+The `clippy::perf` group gives you suggestions on how you can increase the\n+performance of your code. Those lints are mostly about code that the compiler\n+can't trivially optimize, but has to be written in a slightly different way to\n+make the optimizer's job easier.\n+\n+Perf lints are usually easy to apply and it is recommended to do so.\n+\n+## Style\n+\n+The `clippy::style` group is mostly about writing idiomatic code. Because style\n+is subjective, this lint group is the most opinionated warn-by-default group in\n+Clippy.\n+\n+If you see a style lint, applying the suggestion usually makes your code more\n+readable and idiomatic. But because we know that this is opinionated, feel free\n+to sprinkle `#[allow]`s for style lints in your code or `#![allow]` a style lint\n+on your whole crate if you disagree with the suggested style completely.\n+\n+## Pedantic\n+\n+The `clippy::pedantic` group makes Clippy even more _pedantic_. You can enable\n+the whole group with `#![warn(clippy::pedantic)]` in the `lib.rs`/`main.rs` of\n+your crate. This lint group is for Clippy power users that want an in depth\n+check of their code.\n+\n+> _Note:_ Instead of enabling the whole group (like Clippy itself does), you may\n+> want to cherry-pick lints out of the pedantic group.\n+\n+If you enable this group, expect to also use `#[allow]` attributes generously\n+throughout your code. Lints in this group are designed to be pedantic and false\n+positives sometimes are intentional in order to prevent false negatives.\n+\n+## Restriction\n+\n+The `clippy::restriction` group contains lints that will _restrict_ you from\n+using certain parts of the Rust language. It is **not** recommended to enable\n+the whole group, but rather cherry-pick lints that are useful for your code base\n+and your use case.\n+\n+> _Note:_ Clippy will produce a warning if it finds a\n+> `#![warn(clippy::restriction)]` attribute in your code!\n+\n+Lints from this group will restrict you in some way. If you enable a restriction\n+lint for your crate it is recommended to also fix code that this lint triggers\n+on. However, those lints are really strict by design and you might want to\n+`#[allow]` them in some special cases, with a comment justifying that.\n+\n+## Cargo\n+\n+The `clippy::cargo` group gives you suggestions on how to improve your\n+`Cargo.toml` file. This might be especially interesting if you want to publish\n+your crate and are not sure if you have all useful information in your\n+`Cargo.toml`.\n+\n+[Clippy lint documentation]: https://rust-lang.github.io/rust-clippy/\n+[Clippy 1.0 RFC]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories"}, {"sha": "337680aa3139b3921d9f959aa25b167f4a2bad55", "filename": "book/src/usage.md", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/book%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fusage.md?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,151 @@\n+# Usage\n+\n+This chapter describes how to use Clippy to get the most out of it. Clippy can\n+be used as a `cargo` subcommand or, like `rustc`, directly with the\n+`clippy-driver` binary.\n+\n+> _Note:_ This chapter assumes that you have Clippy installed already. If you're\n+> not sure, take a look at the [Installation] chapter.\n+\n+## Cargo subcommand\n+\n+The easiest and most common way to run Clippy is through `cargo`. To do that,\n+just run\n+\n+```bash\n+cargo clippy\n+```\n+\n+### Lint configuration\n+\n+The above command will run the default set of lints, which are included in the\n+lint group `clippy::all`. You might want to use even more lints or you might not\n+agree with every Clippy lint, and for that there are ways to configure lint\n+levels.\n+\n+> _Note:_ Clippy is meant to be used with a generous sprinkling of\n+> `#[allow(..)]`s through your code. So if you disagree with a lint, don't feel\n+> bad disabling them for parts of your code or the whole project.\n+\n+#### Command line\n+\n+You can configure lint levels on the command line by adding\n+`-A/W/D clippy::lint_name` like this:\n+\n+```bash\n+cargo clippy -- -Aclippy::style -Wclippy::double_neg -Dclippy::perf\n+```\n+\n+For [CI] all warnings can be elevated to errors which will inturn fail\n+the build and cause Clippy to exit with a code other than `0`.\n+\n+```\n+cargo clippy -- -Dwarnings\n+```\n+\n+> _Note:_ Adding `-D warnings` will cause your build to fail if **any** warnings\n+> are found in your code. That includes warnings found by rustc (e.g.\n+> `dead_code`, etc.).\n+\n+For more information on configuring lint levels, see the [rustc documentation].\n+\n+[rustc documentation]: https://doc.rust-lang.org/rustc/lints/levels.html#configuring-warning-levels\n+\n+#### Even more lints\n+\n+Clippy has lint groups which are allow-by-default. This means, that you will\n+have to enable the lints in those groups manually.\n+\n+For a full list of all lints with their description and examples, please refere\n+to [Clippy's lint list]. The two most important allow-by-default groups are\n+described below:\n+\n+[Clippy's lint list]: https://rust-lang.github.io/rust-clippy/master/index.html\n+\n+##### `clippy::pedantic`\n+\n+The first group is the `pedantic` group. This group contains really opinionated\n+lints, that may have some intentional false positives in order to prevent false\n+negatives. So while this group is ready to be used in production, you can expect\n+to sprinkle multiple `#[allow(..)]`s in your code. If you find any false\n+positives, you're still welcome to report them to us for future improvements.\n+\n+> FYI: Clippy uses the whole group to lint itself.\n+\n+##### `clippy::restriction`\n+\n+The second group is the `restriction` group. This group contains lints that\n+\"restrict\" the language in some way. For example the `clippy::unwrap` lint from\n+this group won't allow you to use `.unwrap()` in your code. You may want to look\n+through the lints in this group and enable the ones that fit your need.\n+\n+> _Note:_ You shouldn't enable the whole lint group, but cherry-pick lints from\n+> this group. Some lints in this group will even contradict other Clippy lints!\n+\n+#### Too many lints\n+\n+The most opinionated warn-by-default group of Clippy is the `clippy::style`\n+group. Some people prefer to disable this group completely and then cherry-pick\n+some lints they like from this group. The same is of course possible with every\n+other of Clippy's lint groups.\n+\n+> _Note:_ We try to keep the warn-by-default groups free from false positives\n+> (FP). If you find that a lint wrongly triggers, please report it in an issue\n+> (if there isn't an issue for that FP already)\n+\n+#### Source Code\n+\n+You can configure lint levels in source code the same way you can configure\n+`rustc` lints:\n+\n+```rust\n+#![allow(clippy::style)]\n+\n+#[warn(clippy::double_neg)]\n+fn main() {\n+    let x = 1;\n+    let y = --x;\n+    //      ^^ warning: double negation\n+}\n+```\n+\n+### Automatically applying Clippy suggestions\n+\n+Clippy can automatically apply some lint suggestions, just like the compiler.\n+\n+```terminal\n+cargo clippy --fix\n+```\n+\n+### Workspaces\n+\n+All the usual workspace options should work with Clippy. For example the\n+following command will run Clippy on the `example` crate in your workspace:\n+\n+```terminal\n+cargo clippy -p example\n+```\n+\n+As with `cargo check`, this includes dependencies that are members of the\n+workspace, like path dependencies. If you want to run Clippy **only** on the\n+given crate, use the `--no-deps` option like this:\n+\n+```terminal\n+cargo clippy -p example -- --no-deps\n+```\n+\n+## Using Clippy without `cargo`: `clippy-driver`\n+\n+Clippy can also be used in projects that do not use cargo. To do so, run\n+`clippy-driver` with the same arguments you use for `rustc`. For example:\n+\n+```terminal\n+clippy-driver --edition 2018 -Cpanic=abort foo.rs\n+```\n+\n+> _Note:_ `clippy-driver` is designed for running Clippy and should not be used\n+> as a general replacement for `rustc`. `clippy-driver` may produce artifacts\n+> that are not optimized as expected, for example.\n+\n+[Installation]: installation.md\n+[CI]: continuous_integration"}, {"sha": "71005449b4ddf871d46f1ec86a8cc07b89ed3a8f", "filename": "clippy_dev/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flint.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -13,7 +13,7 @@ fn exit_if_err(status: io::Result<ExitStatus>) {\n     }\n }\n \n-pub fn run<'a>(path: &str, args: impl Iterator<Item = &'a str>) {\n+pub fn run<'a>(path: &str, args: impl Iterator<Item = &'a String>) {\n     let is_file = match fs::metadata(path) {\n         Ok(metadata) => metadata.is_file(),\n         Err(e) => {"}, {"sha": "2c27a0bcaf95ee776f901d76407fad87529f1edd", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 88, "deletions": 124, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -2,63 +2,63 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use clap::{Arg, ArgMatches, Command};\n+use clap::{Arg, ArgAction, ArgMatches, Command, PossibleValue};\n use clippy_dev::{bless, fmt, lint, new_lint, serve, setup, update_lints};\n use indoc::indoc;\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n         Some((\"bless\", matches)) => {\n-            bless::bless(matches.is_present(\"ignore-timestamp\"));\n+            bless::bless(matches.contains_id(\"ignore-timestamp\"));\n         },\n         Some((\"fmt\", matches)) => {\n-            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n+            fmt::run(matches.contains_id(\"check\"), matches.contains_id(\"verbose\"));\n         },\n         Some((\"update_lints\", matches)) => {\n-            if matches.is_present(\"print-only\") {\n+            if matches.contains_id(\"print-only\") {\n                 update_lints::print_lints();\n-            } else if matches.is_present(\"check\") {\n+            } else if matches.contains_id(\"check\") {\n                 update_lints::update(update_lints::UpdateMode::Check);\n             } else {\n                 update_lints::update(update_lints::UpdateMode::Change);\n             }\n         },\n         Some((\"new_lint\", matches)) => {\n             match new_lint::create(\n-                matches.value_of(\"pass\"),\n-                matches.value_of(\"name\"),\n-                matches.value_of(\"category\"),\n-                matches.is_present(\"msrv\"),\n+                matches.get_one::<String>(\"pass\"),\n+                matches.get_one::<String>(\"name\"),\n+                matches.get_one::<String>(\"category\"),\n+                matches.contains_id(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::update(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n         Some((\"setup\", sub_command)) => match sub_command.subcommand() {\n             Some((\"intellij\", matches)) => {\n-                if matches.is_present(\"remove\") {\n+                if matches.contains_id(\"remove\") {\n                     setup::intellij::remove_rustc_src();\n                 } else {\n                     setup::intellij::setup_rustc_src(\n                         matches\n-                            .value_of(\"rustc-repo-path\")\n+                            .get_one::<String>(\"rustc-repo-path\")\n                             .expect(\"this field is mandatory and therefore always valid\"),\n                     );\n                 }\n             },\n             Some((\"git-hook\", matches)) => {\n-                if matches.is_present(\"remove\") {\n+                if matches.contains_id(\"remove\") {\n                     setup::git_hook::remove_hook();\n                 } else {\n-                    setup::git_hook::install_hook(matches.is_present(\"force-override\"));\n+                    setup::git_hook::install_hook(matches.contains_id(\"force-override\"));\n                 }\n             },\n             Some((\"vscode-tasks\", matches)) => {\n-                if matches.is_present(\"remove\") {\n+                if matches.contains_id(\"remove\") {\n                     setup::vscode::remove_tasks();\n                 } else {\n-                    setup::vscode::install_tasks(matches.is_present(\"force-override\"));\n+                    setup::vscode::install_tasks(matches.contains_id(\"force-override\"));\n                 }\n             },\n             _ => {},\n@@ -70,19 +70,19 @@ fn main() {\n             _ => {},\n         },\n         Some((\"serve\", matches)) => {\n-            let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n-            let lint = matches.value_of(\"lint\");\n+            let port = *matches.get_one::<u16>(\"port\").unwrap();\n+            let lint = matches.get_one::<String>(\"lint\");\n             serve::run(port, lint);\n         },\n         Some((\"lint\", matches)) => {\n-            let path = matches.value_of(\"path\").unwrap();\n-            let args = matches.values_of(\"args\").into_iter().flatten();\n+            let path = matches.get_one::<String>(\"path\").unwrap();\n+            let args = matches.get_many::<String>(\"args\").into_iter().flatten();\n             lint::run(path, args);\n         },\n         Some((\"rename_lint\", matches)) => {\n-            let old_name = matches.value_of(\"old_name\").unwrap();\n-            let new_name = matches.value_of(\"new_name\").unwrap_or(old_name);\n-            let uplift = matches.is_present(\"uplift\");\n+            let old_name = matches.get_one::<String>(\"old_name\").unwrap();\n+            let new_name = matches.get_one::<String>(\"new_name\").unwrap_or(old_name);\n+            let uplift = matches.contains_id(\"uplift\");\n             update_lints::rename(old_name, new_name, uplift);\n         },\n         _ => {},\n@@ -92,98 +92,86 @@ fn main() {\n fn get_clap_config() -> ArgMatches {\n     Command::new(\"Clippy developer tooling\")\n         .arg_required_else_help(true)\n-        .subcommand(\n+        .subcommands([\n             Command::new(\"bless\").about(\"bless the test output changes\").arg(\n                 Arg::new(\"ignore-timestamp\")\n                     .long(\"ignore-timestamp\")\n                     .help(\"Include files updated before clippy was built\"),\n             ),\n-        )\n-        .subcommand(\n             Command::new(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n-                .arg(Arg::new(\"check\").long(\"check\").help(\"Use the rustfmt --check option\"))\n-                .arg(Arg::new(\"verbose\").short('v').long(\"verbose\").help(\"Echo commands run\")),\n-        )\n-        .subcommand(\n+                .args([\n+                    Arg::new(\"check\").long(\"check\").help(\"Use the rustfmt --check option\"),\n+                    Arg::new(\"verbose\").short('v').long(\"verbose\").help(\"Echo commands run\"),\n+                ]),\n             Command::new(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n                 .long_about(\n                     \"Makes sure that:\\n \\\n-                 * the lint count in README.md is correct\\n \\\n-                 * the changelog contains markdown link references at the bottom\\n \\\n-                 * all lint groups include the correct lints\\n \\\n-                 * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n-                 * all lints are registered in the lint store\",\n+                    * the lint count in README.md is correct\\n \\\n+                    * the changelog contains markdown link references at the bottom\\n \\\n+                    * all lint groups include the correct lints\\n \\\n+                    * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n+                    * all lints are registered in the lint store\",\n                 )\n-                .arg(Arg::new(\"print-only\").long(\"print-only\").help(\n-                    \"Print a table of lints to STDOUT. \\\n-                 This does not include deprecated and internal lints. \\\n-                 (Does not modify any files)\",\n-                ))\n-                .arg(\n+                .args([\n+                    Arg::new(\"print-only\").long(\"print-only\").help(\n+                        \"Print a table of lints to STDOUT. \\\n+                        This does not include deprecated and internal lints. \\\n+                        (Does not modify any files)\",\n+                    ),\n                     Arg::new(\"check\")\n                         .long(\"check\")\n                         .help(\"Checks that `cargo dev update_lints` has been run. Used on CI.\"),\n-                ),\n-        )\n-        .subcommand(\n+                ]),\n             Command::new(\"new_lint\")\n                 .about(\"Create new lint and run `cargo dev update_lints`\")\n-                .arg(\n+                .args([\n                     Arg::new(\"pass\")\n                         .short('p')\n                         .long(\"pass\")\n                         .help(\"Specify whether the lint runs during the early or late pass\")\n                         .takes_value(true)\n-                        .possible_values(&[\"early\", \"late\"])\n+                        .value_parser([PossibleValue::new(\"early\"), PossibleValue::new(\"late\")])\n                         .required(true),\n-                )\n-                .arg(\n                     Arg::new(\"name\")\n                         .short('n')\n                         .long(\"name\")\n                         .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n                         .takes_value(true)\n                         .required(true),\n-                )\n-                .arg(\n                     Arg::new(\"category\")\n                         .short('c')\n                         .long(\"category\")\n                         .help(\"What category the lint belongs to\")\n                         .default_value(\"nursery\")\n-                        .possible_values(&[\n-                            \"style\",\n-                            \"correctness\",\n-                            \"suspicious\",\n-                            \"complexity\",\n-                            \"perf\",\n-                            \"pedantic\",\n-                            \"restriction\",\n-                            \"cargo\",\n-                            \"nursery\",\n-                            \"internal\",\n-                            \"internal_warn\",\n+                        .value_parser([\n+                            PossibleValue::new(\"style\"),\n+                            PossibleValue::new(\"correctness\"),\n+                            PossibleValue::new(\"suspicious\"),\n+                            PossibleValue::new(\"complexity\"),\n+                            PossibleValue::new(\"perf\"),\n+                            PossibleValue::new(\"pedantic\"),\n+                            PossibleValue::new(\"restriction\"),\n+                            PossibleValue::new(\"cargo\"),\n+                            PossibleValue::new(\"nursery\"),\n+                            PossibleValue::new(\"internal\"),\n+                            PossibleValue::new(\"internal_warn\"),\n                         ])\n                         .takes_value(true),\n-                )\n-                .arg(Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\")),\n-        )\n-        .subcommand(\n+                    Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\"),\n+                ]),\n             Command::new(\"setup\")\n                 .about(\"Support for setting up your personal development environment\")\n                 .arg_required_else_help(true)\n-                .subcommand(\n+                .subcommands([\n                     Command::new(\"intellij\")\n                         .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n-                        .arg(\n+                        .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the dependencies added with 'cargo dev setup intellij'\")\n                                 .required(false),\n-                        )\n-                        .arg(\n                             Arg::new(\"rustc-repo-path\")\n                                 .long(\"repo-path\")\n                                 .short('r')\n@@ -192,67 +180,53 @@ fn get_clap_config() -> ArgMatches {\n                                 .value_name(\"path\")\n                                 .conflicts_with(\"remove\")\n                                 .required(true),\n-                        ),\n-                )\n-                .subcommand(\n+                        ]),\n                     Command::new(\"git-hook\")\n                         .about(\"Add a pre-commit git hook that formats your code to make it look pretty\")\n-                        .arg(\n+                        .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the pre-commit hook added with 'cargo dev setup git-hook'\")\n                                 .required(false),\n-                        )\n-                        .arg(\n                             Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n                                 .short('f')\n                                 .help(\"Forces the override of an existing git pre-commit hook\")\n                                 .required(false),\n-                        ),\n-                )\n-                .subcommand(\n+                        ]),\n                     Command::new(\"vscode-tasks\")\n                         .about(\"Add several tasks to vscode for formatting, validation and testing\")\n-                        .arg(\n+                        .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the tasks added with 'cargo dev setup vscode-tasks'\")\n                                 .required(false),\n-                        )\n-                        .arg(\n                             Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n                                 .short('f')\n                                 .help(\"Forces the override of existing vscode tasks\")\n                                 .required(false),\n-                        ),\n-                ),\n-        )\n-        .subcommand(\n+                        ]),\n+                ]),\n             Command::new(\"remove\")\n                 .about(\"Support for undoing changes done by the setup command\")\n                 .arg_required_else_help(true)\n-                .subcommand(Command::new(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n-                .subcommand(Command::new(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"))\n-                .subcommand(\n+                .subcommands([\n+                    Command::new(\"git-hook\").about(\"Remove any existing pre-commit git hook\"),\n+                    Command::new(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"),\n                     Command::new(\"intellij\").about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n-                ),\n-        )\n-        .subcommand(\n+                ]),\n             Command::new(\"serve\")\n                 .about(\"Launch a local 'ALL the Clippy Lints' website in a browser\")\n-                .arg(\n+                .args([\n                     Arg::new(\"port\")\n                         .long(\"port\")\n                         .short('p')\n                         .help(\"Local port for the http server\")\n                         .default_value(\"8000\")\n-                        .validator_os(serve::validate_port),\n-                )\n-                .arg(Arg::new(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n-        )\n-        .subcommand(\n+                        .value_parser(clap::value_parser!(u16)),\n+                    Arg::new(\"lint\").help(\"Which lint's page to load initially (optional)\"),\n+                ]),\n             Command::new(\"lint\")\n                 .about(\"Manually run clippy on a file or package\")\n                 .after_help(indoc! {\"\n@@ -271,37 +245,27 @@ fn get_clap_config() -> ArgMatches {\n                             cargo dev lint file.rs -- -W clippy::pedantic\n                             cargo dev lint ~/my-project -- -- -W clippy::pedantic\n                 \"})\n-                .arg(\n+                .args([\n                     Arg::new(\"path\")\n                         .required(true)\n                         .help(\"The path to a file or package directory to lint\"),\n-                )\n-                .arg(\n                     Arg::new(\"args\")\n-                        .multiple_occurrences(true)\n+                        .action(ArgAction::Append)\n                         .help(\"Pass extra arguments to cargo/clippy-driver\"),\n-                ),\n-        )\n-        .subcommand(\n-            Command::new(\"rename_lint\")\n-                .about(\"Renames the given lint\")\n-                .arg(\n-                    Arg::new(\"old_name\")\n-                        .index(1)\n-                        .required(true)\n-                        .help(\"The name of the lint to rename\"),\n-                )\n-                .arg(\n-                    Arg::new(\"new_name\")\n-                        .index(2)\n-                        .required_unless_present(\"uplift\")\n-                        .help(\"The new name of the lint\"),\n-                )\n-                .arg(\n-                    Arg::new(\"uplift\")\n-                        .long(\"uplift\")\n-                        .help(\"This lint will be uplifted into rustc\"),\n-                ),\n-        )\n+                ]),\n+            Command::new(\"rename_lint\").about(\"Renames the given lint\").args([\n+                Arg::new(\"old_name\")\n+                    .index(1)\n+                    .required(true)\n+                    .help(\"The name of the lint to rename\"),\n+                Arg::new(\"new_name\")\n+                    .index(2)\n+                    .required_unless_present(\"uplift\")\n+                    .help(\"The new name of the lint\"),\n+                Arg::new(\"uplift\")\n+                    .long(\"uplift\")\n+                    .help(\"This lint will be uplifted into rustc\"),\n+            ]),\n+        ])\n         .get_matches()\n }"}, {"sha": "748d73c0801265b82ff109fce7d089aca1d684c6", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -34,7 +34,12 @@ impl<T> Context for io::Result<T> {\n /// # Errors\n ///\n /// This function errors out if the files couldn't be created or written to.\n-pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>, msrv: bool) -> io::Result<()> {\n+pub fn create(\n+    pass: Option<&String>,\n+    lint_name: Option<&String>,\n+    category: Option<&String>,\n+    msrv: bool,\n+) -> io::Result<()> {\n     let lint = LintData {\n         pass: pass.expect(\"`pass` argument is validated by clap\"),\n         name: lint_name.expect(\"`name` argument is validated by clap\"),"}, {"sha": "f15f24da94671878d56b48ddd562b6ef2c4333ce", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -8,7 +8,7 @@ use std::time::{Duration, SystemTime};\n /// # Panics\n ///\n /// Panics if the python commands could not be spawned\n-pub fn run(port: u16, lint: Option<&str>) -> ! {\n+pub fn run(port: u16, lint: Option<&String>) -> ! {\n     let mut url = Some(match lint {\n         None => format!(\"http://localhost:{}\", port),\n         Some(lint) => format!(\"http://localhost:{}/#{}\", port, lint),"}, {"sha": "1bbd9a45b619e448daea496eb77f63fa6693756f", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -58,6 +58,16 @@ fn generate_lint_files(\n         },\n     );\n \n+    replace_region_in_file(\n+        update_mode,\n+        Path::new(\"book/src/README.md\"),\n+        \"[There are over \",\n+        \" lints included in this crate!]\",\n+        |res| {\n+            write!(res, \"{}\", round_to_fifty(usable_lints.len())).unwrap();\n+        },\n+    );\n+\n     replace_region_in_file(\n         update_mode,\n         Path::new(\"CHANGELOG.md\"),"}, {"sha": "4d5bf47833fb87db88101596da5766e70f241b17", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -10,6 +10,7 @@ edition = \"2021\"\n \n [dependencies]\n cargo_metadata = \"0.14\"\n+clippy_dev = { path = \"../clippy_dev\", optional = true }\n clippy_utils = { path = \"../clippy_utils\" }\n if_chain = \"1.0\"\n itertools = \"0.10.1\"\n@@ -18,6 +19,7 @@ quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n+tempfile = { version = \"3.2\", optional = true }\n toml = \"0.5\"\n unicode-normalization = \"0.1\"\n unicode-script = { version = \"0.5\", default-features = false }\n@@ -30,7 +32,7 @@ url = { version = \"2.2\", features = [\"serde\"] }\n [features]\n deny-warnings = [\"clippy_utils/deny-warnings\"]\n # build clippy with internal lints enabled, off by default\n-internal = [\"clippy_utils/internal\", \"serde_json\"]\n+internal = [\"clippy_utils/internal\", \"serde_json\", \"tempfile\", \"clippy_dev\"]\n \n [package.metadata.rust-analyzer]\n # This crate uses #[feature(rustc_private)]"}, {"sha": "2705ffffdcbff9480403fbf37d2ddbc157251809", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -14,9 +14,6 @@ declare_clippy_lint! {\n     /// Will be optimized out by the compiler or should probably be replaced by a\n     /// `panic!()` or `unreachable!()`\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n     /// ```rust,ignore\n     /// assert!(false)"}, {"sha": "27c2896e1e5cee71bfc27e48d7ecee0aff5edda5", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::implements_trait;\n use rustc_errors::Applicability;\n@@ -24,6 +24,7 @@ declare_clippy_lint! {\n     ///   };\n     /// }\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust\n     /// async fn foo() {}\n@@ -63,9 +64,10 @@ impl<'tcx> LateLintPass<'tcx> for AsyncYieldsAsync {\n                         _ => None,\n                     };\n                     if let Some(return_expr_span) = return_expr_span {\n-                        span_lint_and_then(\n+                        span_lint_hir_and_then(\n                             cx,\n                             ASYNC_YIELDS_ASYNC,\n+                            body.value.hir_id,\n                             return_expr_span,\n                             \"an async construct yields a type which is itself awaitable\",\n                             |db| {"}, {"sha": "ed12ad9c36790fe74ffcb1c344689b52b6c19078", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -340,7 +340,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                             for lint in lint_list {\n                                 match item.kind {\n                                     ItemKind::Use(..) => {\n-                                        if is_word(lint, sym!(unused_imports))\n+                                        if is_word(lint, sym::unused_imports)\n                                             || is_word(lint, sym::deprecated)\n                                             || is_word(lint, sym!(unreachable_pub))\n                                             || is_word(lint, sym!(unused))\n@@ -355,7 +355,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                         }\n                                     },\n                                     ItemKind::ExternCrate(..) => {\n-                                        if is_word(lint, sym!(unused_imports)) && skip_unused_imports {\n+                                        if is_word(lint, sym::unused_imports) && skip_unused_imports {\n                                             return;\n                                         }\n                                         if is_word(lint, sym!(unused_extern_crates)) {"}, {"sha": "eee5f90d178852368c1237a2a7c898ae78cdbee4", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -140,8 +140,6 @@ declare_clippy_lint! {\n     /// from a memory access perspective but will cause bugs at runtime if they\n     /// are held in such a way.\n     ///\n-    /// ### Known problems\n-    ///\n     /// ### Example\n     ///\n     /// ```toml"}, {"sha": "95abe8aa59fbe141e12aff88ad555514adcecfcf", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -17,11 +17,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// assert_eq!(\"a\".is_empty(), false);\n     /// assert_ne!(\"a\".is_empty(), true);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// assert!(!\"a\".is_empty());\n     /// ```\n     #[clippy::version = \"1.53.0\"]"}, {"sha": "1582ec9ee5ce6e21776768a16d4b4159c0450795", "filename": "clippy_lints/src/borrow_deref_ref.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -18,7 +18,7 @@ declare_clippy_lint! {\n     /// Dereferencing and then borrowing a reference value has no effect in most cases.\n     ///\n     /// ### Known problems\n-    /// false negative on such code:\n+    /// False negative on such code:\n     /// ```\n     /// let x = &12;\n     /// let addr_x = &x as *const _ as usize;\n@@ -29,17 +29,20 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n+    /// fn foo(_x: &str) {}\n+    ///\n     /// let s = &String::new();\n     ///\n-    /// // Bad\n     /// let a: &String = &* s;\n     /// foo(&*s);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn foo(_x: &str) {}\n+    /// # let s = &String::new();\n     /// let a: &String = s;\n     /// foo(&**s);\n-    ///\n-    /// fn foo(_: &str){ }\n     /// ```\n     #[clippy::version = \"1.59.0\"]\n     pub BORROW_DEREF_REF,"}, {"sha": "02c2f30a4dd6acb1e4b37f2cf9faa1b6bc9b50ed", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -219,13 +219,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn fun() -> i32 { 1 }\n-    /// let a = fun as i64;\n+    /// let _ = fun as i64;\n+    /// ```\n     ///\n-    /// // Good\n-    /// fn fun2() -> i32 { 1 }\n-    /// let a = fun2 as usize;\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn fun() -> i32 { 1 }\n+    /// let _ = fun as usize;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub FN_TO_NUMERIC_CAST,\n@@ -245,17 +246,19 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn fn1() -> i16 {\n     ///     1\n     /// };\n     /// let _ = fn1 as i32;\n+    /// ```\n     ///\n-    /// // Better: Cast to usize first, then comment with the reason for the truncation\n-    /// fn fn2() -> i16 {\n+    /// Use instead:\n+    /// ```rust\n+    /// // Cast to usize first, then comment with the reason for the truncation\n+    /// fn fn1() -> i16 {\n     ///     1\n     /// };\n-    /// let fn_ptr = fn2 as usize;\n+    /// let fn_ptr = fn1 as usize;\n     /// let fn_ptr_truncated = fn_ptr as i32;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -277,19 +280,24 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad: fn1 is cast as `usize`\n+    /// // fn1 is cast as `usize`\n     /// fn fn1() -> u16 {\n     ///     1\n     /// };\n     /// let _ = fn1 as usize;\n+    /// ```\n     ///\n-    /// // Good: maybe you intended to call the function?\n+    /// Use instead:\n+    /// ```rust\n+    /// // maybe you intended to call the function?\n     /// fn fn2() -> u16 {\n     ///     1\n     /// };\n     /// let _ = fn2() as usize;\n     ///\n-    /// // Good: maybe you intended to cast it to a function type?\n+    /// // or\n+    ///\n+    /// // maybe you intended to cast it to a function type?\n     /// fn fn3() -> u16 {\n     ///     1\n     /// }\n@@ -406,7 +414,7 @@ declare_clippy_lint! {\n     /// enum E { X = 256 };\n     /// let _ = E::X as u8;\n     /// ```\n-    #[clippy::version = \"1.60.0\"]\n+    #[clippy::version = \"1.61.0\"]\n     pub CAST_ENUM_TRUNCATION,\n     suspicious,\n     \"casts from an enum type to an integral type which will truncate the value\"\n@@ -451,7 +459,7 @@ declare_clippy_lint! {\n     ///     println!(\"{:?}\", &*new_ptr);\n     /// }\n     /// ```\n-    #[clippy::version = \"1.60.0\"]\n+    #[clippy::version = \"1.61.0\"]\n     pub CAST_SLICE_DIFFERENT_SIZES,\n     correctness,\n     \"casting using `as` between raw pointers to slices of types with different sizes\""}, {"sha": "17fc81951f95b41e3a4e81b4f8315c23f389143b", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{meets_msrv, msrvs, SpanlessEq};\n+use clippy_utils::{in_constant, meets_msrv, msrvs, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -22,18 +22,14 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let foo: u32 = 5;\n-    /// # let _ =\n-    /// foo <= i32::MAX as u32\n-    /// # ;\n+    /// foo <= i32::MAX as u32;\n     /// ```\n     ///\n-    /// Could be written:\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let foo = 1;\n-    /// # let _ =\n-    /// i32::try_from(foo).is_ok()\n-    /// # ;\n+    /// # #[allow(unused)]\n+    /// i32::try_from(foo).is_ok();\n     /// ```\n     #[clippy::version = \"1.37.0\"]\n     pub CHECKED_CONVERSIONS,\n@@ -61,6 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n         }\n \n         let result = if_chain! {\n+            if !in_constant(cx, item.hir_id);\n             if !in_external_macro(cx.sess(), item.span);\n             if let ExprKind::Binary(op, left, right) = &item.kind;\n "}, {"sha": "90430b71a0ef99638596bfa9ea7ac840fe035867", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -32,20 +32,20 @@ declare_clippy_lint! {\n     /// makes code look more complex than it really is.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # let (x, y) = (true, true);\n     /// if x {\n     ///     if y {\n-    ///         \u2026\n+    ///         // \u2026\n     ///     }\n     /// }\n-    ///\n     /// ```\n     ///\n     /// Use instead:\n-    ///\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # let (x, y) = (true, true);\n     /// if x && y {\n-    ///     \u2026\n+    ///     // \u2026\n     /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "a05b41eb3ab52f72441b53a75dcadfdfa167b1e6", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -35,7 +35,6 @@ declare_clippy_lint! {\n     /// ```\n     ///\n     /// Use instead:\n-    ///\n     /// ```rust,ignore\n     /// use std::cmp::Ordering;\n     /// # fn a() {}"}, {"sha": "1deff9684a140abedbe5d1da5facb0f7bba1486f", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 278, "deletions": 397, "changes": 675, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,18 +1,18 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n use clippy_utils::{\n-    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, is_else_clause, is_lint_allowed,\n-    search_same, ContainsName, SpanlessEq, SpanlessHash,\n+    eq_expr_value, get_enclosing_block, hash_expr, hash_stmt, if_sequence, is_else_clause, is_lint_allowed,\n+    search_same, ContainsName, HirEqInterExpr, SpanlessEq,\n };\n-use if_chain::if_chain;\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic};\n-use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{Block, Expr, ExprKind, HirId};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::nested_filter;\n+use core::iter;\n+use rustc_errors::Applicability;\n+use rustc_hir::intravisit;\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Stmt, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n+use rustc_span::hygiene::walk_chain;\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::{BytePos, Span, Symbol};\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -165,243 +165,315 @@ declare_lint_pass!(CopyAndPaste => [\n \n impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !expr.span.from_expansion() {\n-            if let ExprKind::If(_, _, _) = expr.kind {\n-                // skip ifs directly in else, it will be checked in the parent if\n-                if let Some(&Expr {\n-                    kind: ExprKind::If(_, _, Some(else_expr)),\n-                    ..\n-                }) = get_parent_expr(cx, expr)\n-                {\n-                    if else_expr.hir_id == expr.hir_id {\n-                        return;\n-                    }\n-                }\n-\n-                let (conds, blocks) = if_sequence(expr);\n-                // Conditions\n-                lint_same_cond(cx, &conds);\n-                lint_same_fns_in_if_cond(cx, &conds);\n-                // Block duplication\n-                lint_same_then_else(cx, &conds, &blocks, conds.len() == blocks.len(), expr);\n+        if !expr.span.from_expansion() && matches!(expr.kind, ExprKind::If(..)) && !is_else_clause(cx.tcx, expr) {\n+            let (conds, blocks) = if_sequence(expr);\n+            lint_same_cond(cx, &conds);\n+            lint_same_fns_in_if_cond(cx, &conds);\n+            let all_same =\n+                !is_lint_allowed(cx, IF_SAME_THEN_ELSE, expr.hir_id) && lint_if_same_then_else(cx, &conds, &blocks);\n+            if !all_same && conds.len() != blocks.len() {\n+                lint_branches_sharing_code(cx, &conds, &blocks, expr);\n             }\n         }\n     }\n }\n \n-/// Implementation of `BRANCHES_SHARING_CODE` and `IF_SAME_THEN_ELSE` if the blocks are equal.\n-fn lint_same_then_else<'tcx>(\n+/// Checks if the given expression is a let chain.\n+fn contains_let(e: &Expr<'_>) -> bool {\n+    match e.kind {\n+        ExprKind::Let(..) => true,\n+        ExprKind::Binary(op, lhs, rhs) if op.node == BinOpKind::And => {\n+            matches!(lhs.kind, ExprKind::Let(..)) || contains_let(rhs)\n+        },\n+        _ => false,\n+    }\n+}\n+\n+fn lint_if_same_then_else(cx: &LateContext<'_>, conds: &[&Expr<'_>], blocks: &[&Block<'_>]) -> bool {\n+    let mut eq = SpanlessEq::new(cx);\n+    blocks\n+        .array_windows::<2>()\n+        .enumerate()\n+        .fold(true, |all_eq, (i, &[lhs, rhs])| {\n+            if eq.eq_block(lhs, rhs) && !contains_let(conds[i]) && conds.get(i + 1).map_or(true, |e| !contains_let(e)) {\n+                span_lint_and_note(\n+                    cx,\n+                    IF_SAME_THEN_ELSE,\n+                    lhs.span,\n+                    \"this `if` has identical blocks\",\n+                    Some(rhs.span),\n+                    \"same as this\",\n+                );\n+                all_eq\n+            } else {\n+                false\n+            }\n+        })\n+}\n+\n+fn lint_branches_sharing_code<'tcx>(\n     cx: &LateContext<'tcx>,\n     conds: &[&'tcx Expr<'_>],\n     blocks: &[&Block<'tcx>],\n-    has_conditional_else: bool,\n     expr: &'tcx Expr<'_>,\n ) {\n     // We only lint ifs with multiple blocks\n-    if blocks.len() < 2 || is_else_clause(cx.tcx, expr) {\n-        return;\n-    }\n-\n-    // Check if each block has shared code\n-    let has_expr = blocks[0].expr.is_some();\n-\n-    let (start_eq, mut end_eq, expr_eq) = if let Some(block_eq) = scan_block_for_eq(cx, conds, blocks) {\n-        (block_eq.start_eq, block_eq.end_eq, block_eq.expr_eq)\n-    } else {\n+    let &[first_block, ref blocks @ ..] = blocks else {\n         return;\n     };\n-\n-    // BRANCHES_SHARING_CODE prerequisites\n-    if has_conditional_else || (start_eq == 0 && end_eq == 0 && (has_expr && !expr_eq)) {\n+    let &[.., last_block] = blocks else {\n         return;\n-    }\n-\n-    // Only the start is the same\n-    if start_eq != 0 && end_eq == 0 && (!has_expr || !expr_eq) {\n-        let block = blocks[0];\n-        let start_stmts = block.stmts.split_at(start_eq).0;\n-\n-        let mut start_walker = UsedValueFinderVisitor::new(cx);\n-        for stmt in start_stmts {\n-            intravisit::walk_stmt(&mut start_walker, stmt);\n-        }\n+    };\n \n-        emit_branches_sharing_code_lint(\n-            cx,\n-            start_eq,\n-            0,\n-            false,\n-            check_for_warn_of_moved_symbol(cx, &start_walker.def_symbols, expr),\n-            blocks,\n-            expr,\n-        );\n-    } else if end_eq != 0 || (has_expr && expr_eq) {\n-        let block = blocks[blocks.len() - 1];\n-        let (start_stmts, block_stmts) = block.stmts.split_at(start_eq);\n-        let (block_stmts, end_stmts) = block_stmts.split_at(block_stmts.len() - end_eq);\n+    let res = scan_block_for_eq(cx, conds, first_block, blocks);\n+    let sm = cx.tcx.sess.source_map();\n+    let start_suggestion = res.start_span(first_block, sm).map(|span| {\n+        let first_line_span = first_line_of_span(cx, expr.span);\n+        let replace_span = first_line_span.with_hi(span.hi());\n+        let cond_span = first_line_span.until(first_block.span);\n+        let cond_snippet = reindent_multiline(snippet(cx, cond_span, \"_\"), false, None);\n+        let cond_indent = indent_of(cx, cond_span);\n+        let moved_snippet = reindent_multiline(snippet(cx, span, \"_\"), true, None);\n+        let suggestion = moved_snippet.to_string() + \"\\n\" + &cond_snippet + \"{\";\n+        let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, cond_indent);\n+        (replace_span, suggestion.to_string())\n+    });\n+    let end_suggestion = res.end_span(last_block, sm).map(|span| {\n+        let moved_snipped = reindent_multiline(snippet(cx, span, \"_\"), true, None);\n+        let indent = indent_of(cx, expr.span.shrink_to_hi());\n+        let suggestion = \"}\\n\".to_string() + &moved_snipped;\n+        let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, indent);\n \n-        // Scan start\n-        let mut start_walker = UsedValueFinderVisitor::new(cx);\n-        for stmt in start_stmts {\n-            intravisit::walk_stmt(&mut start_walker, stmt);\n+        let span = span.with_hi(last_block.span.hi());\n+        // Improve formatting if the inner block has indention (i.e. normal Rust formatting)\n+        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt(), span.parent());\n+        let span = if snippet_opt(cx, test_span).map_or(false, |snip| snip == \"    \") {\n+            span.with_lo(test_span.lo())\n+        } else {\n+            span\n+        };\n+        (span, suggestion.to_string())\n+    });\n+\n+    let (span, msg, end_span) = match (&start_suggestion, &end_suggestion) {\n+        (&Some((span, _)), &Some((end_span, _))) => (\n+            span,\n+            \"all if blocks contain the same code at both the start and the end\",\n+            Some(end_span),\n+        ),\n+        (&Some((span, _)), None) => (span, \"all if blocks contain the same code at the start\", None),\n+        (None, &Some((span, _))) => (span, \"all if blocks contain the same code at the end\", None),\n+        (None, None) => return,\n+    };\n+    span_lint_and_then(cx, BRANCHES_SHARING_CODE, span, msg, |diag| {\n+        if let Some(span) = end_span {\n+            diag.span_note(span, \"this code is shared at the end\");\n         }\n-        let mut moved_syms = start_walker.def_symbols;\n-\n-        // Scan block\n-        let mut block_walker = UsedValueFinderVisitor::new(cx);\n-        for stmt in block_stmts {\n-            intravisit::walk_stmt(&mut block_walker, stmt);\n+        if let Some((span, sugg)) = start_suggestion {\n+            diag.span_suggestion(\n+                span,\n+                \"consider moving these statements before the if\",\n+                sugg,\n+                Applicability::Unspecified,\n+            );\n         }\n-        let mut block_defs = block_walker.defs;\n-\n-        // Scan moved stmts\n-        let mut moved_start: Option<usize> = None;\n-        let mut end_walker = UsedValueFinderVisitor::new(cx);\n-        for (index, stmt) in end_stmts.iter().enumerate() {\n-            intravisit::walk_stmt(&mut end_walker, stmt);\n-\n-            for value in &end_walker.uses {\n-                // Well we can't move this and all prev statements. So reset\n-                if block_defs.contains(value) {\n-                    moved_start = Some(index + 1);\n-                    end_walker.defs.drain().for_each(|x| {\n-                        block_defs.insert(x);\n-                    });\n-\n-                    end_walker.def_symbols.clear();\n-                }\n+        if let Some((span, sugg)) = end_suggestion {\n+            diag.span_suggestion(\n+                span,\n+                \"consider moving these statements after the if\",\n+                sugg,\n+                Applicability::Unspecified,\n+            );\n+            if !cx.typeck_results().expr_ty(expr).is_unit() {\n+                diag.note(\"the end suggestion probably needs some adjustments to use the expression result correctly\");\n             }\n-\n-            end_walker.uses.clear();\n         }\n-\n-        if let Some(moved_start) = moved_start {\n-            end_eq -= moved_start;\n+        if check_for_warn_of_moved_symbol(cx, &res.moved_locals, expr) {\n+            diag.warn(\"some moved values might need to be renamed to avoid wrong references\");\n         }\n+    });\n+}\n \n-        let end_linable = block.expr.map_or_else(\n-            || end_eq != 0,\n-            |expr| {\n-                intravisit::walk_expr(&mut end_walker, expr);\n-                end_walker.uses.iter().any(|x| !block_defs.contains(x))\n-            },\n-        );\n-\n-        if end_linable {\n-            end_walker.def_symbols.drain().for_each(|x| {\n-                moved_syms.insert(x);\n-            });\n+struct BlockEq {\n+    /// The end of the range of equal stmts at the start.\n+    start_end_eq: usize,\n+    /// The start of the range of equal stmts at the end.\n+    end_begin_eq: Option<usize>,\n+    /// The name and id of every local which can be moved at the beginning and the end.\n+    moved_locals: Vec<(HirId, Symbol)>,\n+}\n+impl BlockEq {\n+    fn start_span(&self, b: &Block<'_>, sm: &SourceMap) -> Option<Span> {\n+        match &b.stmts[..self.start_end_eq] {\n+            [first, .., last] => Some(sm.stmt_span(first.span, b.span).to(sm.stmt_span(last.span, b.span))),\n+            [s] => Some(sm.stmt_span(s.span, b.span)),\n+            [] => None,\n         }\n+    }\n \n-        emit_branches_sharing_code_lint(\n-            cx,\n-            start_eq,\n-            end_eq,\n-            end_linable,\n-            check_for_warn_of_moved_symbol(cx, &moved_syms, expr),\n-            blocks,\n-            expr,\n-        );\n+    fn end_span(&self, b: &Block<'_>, sm: &SourceMap) -> Option<Span> {\n+        match (&b.stmts[b.stmts.len() - self.end_begin_eq?..], b.expr) {\n+            ([first, .., last], None) => Some(sm.stmt_span(first.span, b.span).to(sm.stmt_span(last.span, b.span))),\n+            ([first, ..], Some(last)) => Some(sm.stmt_span(first.span, b.span).to(sm.stmt_span(last.span, b.span))),\n+            ([s], None) => Some(sm.stmt_span(s.span, b.span)),\n+            ([], Some(e)) => Some(walk_chain(e.span, b.span.ctxt())),\n+            ([], None) => None,\n+        }\n     }\n }\n \n-struct BlockEqual {\n-    /// The amount statements that are equal from the start\n-    start_eq: usize,\n-    /// The amount statements that are equal from the end\n-    end_eq: usize,\n-    ///  An indication if the block expressions are the same. This will also be true if both are\n-    /// `None`\n-    expr_eq: bool,\n+/// If the statement is a local, checks if the bound names match the expected list of names.\n+fn eq_binding_names(s: &Stmt<'_>, names: &[(HirId, Symbol)]) -> bool {\n+    if let StmtKind::Local(l) = s.kind {\n+        let mut i = 0usize;\n+        let mut res = true;\n+        l.pat.each_binding_or_first(&mut |_, _, _, name| {\n+            if names.get(i).map_or(false, |&(_, n)| n == name.name) {\n+                i += 1;\n+            } else {\n+                res = false;\n+            }\n+        });\n+        res && i == names.len()\n+    } else {\n+        false\n+    }\n }\n \n-/// This function can also trigger the `IF_SAME_THEN_ELSE` in which case it'll return `None` to\n-/// abort any further processing and avoid duplicate lint triggers.\n-fn scan_block_for_eq(cx: &LateContext<'_>, conds: &[&Expr<'_>], blocks: &[&Block<'_>]) -> Option<BlockEqual> {\n-    let mut start_eq = usize::MAX;\n-    let mut end_eq = usize::MAX;\n-    let mut expr_eq = true;\n-    let mut iter = blocks.windows(2).enumerate();\n-    while let Some((i, &[block0, block1])) = iter.next() {\n-        let l_stmts = block0.stmts;\n-        let r_stmts = block1.stmts;\n-\n-        // `SpanlessEq` now keeps track of the locals and is therefore context sensitive clippy#6752.\n-        // The comparison therefore needs to be done in a way that builds the correct context.\n-        let mut evaluator = SpanlessEq::new(cx);\n-        let mut evaluator = evaluator.inter_expr();\n-\n-        let current_start_eq = count_eq(&mut l_stmts.iter(), &mut r_stmts.iter(), |l, r| evaluator.eq_stmt(l, r));\n+/// Checks if the given statement should be considered equal to the statement in the same position\n+/// for each block.\n+fn eq_stmts(\n+    stmt: &Stmt<'_>,\n+    blocks: &[&Block<'_>],\n+    get_stmt: impl for<'a> Fn(&'a Block<'a>) -> Option<&'a Stmt<'a>>,\n+    eq: &mut HirEqInterExpr<'_, '_, '_>,\n+    moved_bindings: &mut Vec<(HirId, Symbol)>,\n+) -> bool {\n+    (if let StmtKind::Local(l) = stmt.kind {\n+        let old_count = moved_bindings.len();\n+        l.pat.each_binding_or_first(&mut |_, id, _, name| {\n+            moved_bindings.push((id, name.name));\n+        });\n+        let new_bindings = &moved_bindings[old_count..];\n+        blocks\n+            .iter()\n+            .all(|b| get_stmt(b).map_or(false, |s| eq_binding_names(s, new_bindings)))\n+    } else {\n+        true\n+    }) && blocks\n+        .iter()\n+        .all(|b| get_stmt(b).map_or(false, |s| eq.eq_stmt(s, stmt)))\n+}\n \n-        let current_end_eq = {\n-            // We skip the middle statements which can't be equal\n-            let end_comparison_count = l_stmts.len().min(r_stmts.len()) - current_start_eq;\n-            let it1 = l_stmts.iter().skip(l_stmts.len() - end_comparison_count);\n-            let it2 = r_stmts.iter().skip(r_stmts.len() - end_comparison_count);\n-            it1.zip(it2)\n-                .fold(0, |acc, (l, r)| if evaluator.eq_stmt(l, r) { acc + 1 } else { 0 })\n+fn scan_block_for_eq(cx: &LateContext<'_>, _conds: &[&Expr<'_>], block: &Block<'_>, blocks: &[&Block<'_>]) -> BlockEq {\n+    let mut eq = SpanlessEq::new(cx);\n+    let mut eq = eq.inter_expr();\n+    let mut moved_locals = Vec::new();\n+\n+    let start_end_eq = block\n+        .stmts\n+        .iter()\n+        .enumerate()\n+        .find(|&(i, stmt)| !eq_stmts(stmt, blocks, |b| b.stmts.get(i), &mut eq, &mut moved_locals))\n+        .map_or(block.stmts.len(), |(i, _)| i);\n+\n+    // Walk backwards through the final expression/statements so long as their hashes are equal. Note\n+    // `SpanlessHash` treats all local references as equal allowing locals declared earlier in the block\n+    // to match those in other blocks. e.g. If each block ends with the following the hash value will be\n+    // the same even though each `x` binding will have a different `HirId`:\n+    //     let x = foo();\n+    //     x + 50\n+    let expr_hash_eq = if let Some(e) = block.expr {\n+        let hash = hash_expr(cx, e);\n+        blocks\n+            .iter()\n+            .all(|b| b.expr.map_or(false, |e| hash_expr(cx, e) == hash))\n+    } else {\n+        blocks.iter().all(|b| b.expr.is_none())\n+    };\n+    if !expr_hash_eq {\n+        return BlockEq {\n+            start_end_eq,\n+            end_begin_eq: None,\n+            moved_locals,\n         };\n-        let block_expr_eq = both(&block0.expr, &block1.expr, |l, r| evaluator.eq_expr(l, r));\n-\n-        // IF_SAME_THEN_ELSE\n-        if_chain! {\n-            if block_expr_eq;\n-            if l_stmts.len() == r_stmts.len();\n-            if l_stmts.len() == current_start_eq;\n-            // `conds` may have one last item than `blocks`.\n-            // Any `i` from `blocks.windows(2)` will exist in `conds`, but `i+1` may not exist on the last iteration.\n-            if !matches!(conds[i].kind, ExprKind::Let(..));\n-            if !matches!(conds.get(i + 1).map(|e| &e.kind), Some(ExprKind::Let(..)));\n-            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, block0.hir_id);\n-            if !is_lint_allowed(cx, IF_SAME_THEN_ELSE, block1.hir_id);\n-            then {\n-                span_lint_and_note(\n-                    cx,\n-                    IF_SAME_THEN_ELSE,\n-                    block0.span,\n-                    \"this `if` has identical blocks\",\n-                    Some(block1.span),\n-                    \"same as this\",\n-                );\n-\n-                return None;\n+    }\n+    let end_search_start = block.stmts[start_end_eq..]\n+        .iter()\n+        .rev()\n+        .enumerate()\n+        .find(|&(offset, stmt)| {\n+            let hash = hash_stmt(cx, stmt);\n+            blocks.iter().any(|b| {\n+                b.stmts\n+                    // the bounds check will catch the underflow\n+                    .get(b.stmts.len().wrapping_sub(offset + 1))\n+                    .map_or(true, |s| hash != hash_stmt(cx, s))\n+            })\n+        })\n+        .map_or(block.stmts.len() - start_end_eq, |(i, _)| i);\n+\n+    let moved_locals_at_start = moved_locals.len();\n+    let mut i = end_search_start;\n+    let end_begin_eq = block.stmts[block.stmts.len() - end_search_start..]\n+        .iter()\n+        .zip(iter::repeat_with(move || {\n+            let x = i;\n+            i -= 1;\n+            x\n+        }))\n+        .fold(end_search_start, |init, (stmt, offset)| {\n+            if eq_stmts(\n+                stmt,\n+                blocks,\n+                |b| b.stmts.get(b.stmts.len() - offset),\n+                &mut eq,\n+                &mut moved_locals,\n+            ) {\n+                init\n+            } else {\n+                // Clear out all locals seen at the end so far. None of them can be moved.\n+                let stmts = &blocks[0].stmts;\n+                for stmt in &stmts[stmts.len() - init..=stmts.len() - offset] {\n+                    if let StmtKind::Local(l) = stmt.kind {\n+                        l.pat.each_binding_or_first(&mut |_, id, _, _| {\n+                            eq.locals.remove(&id);\n+                        });\n+                    }\n+                }\n+                moved_locals.truncate(moved_locals_at_start);\n+                offset - 1\n+            }\n+        });\n+    if let Some(e) = block.expr {\n+        for block in blocks {\n+            if block.expr.map_or(false, |expr| !eq.eq_expr(expr, e)) {\n+                moved_locals.truncate(moved_locals_at_start);\n+                return BlockEq {\n+                    start_end_eq,\n+                    end_begin_eq: None,\n+                    moved_locals,\n+                };\n             }\n         }\n-\n-        start_eq = start_eq.min(current_start_eq);\n-        end_eq = end_eq.min(current_end_eq);\n-        expr_eq &= block_expr_eq;\n-    }\n-\n-    if !expr_eq {\n-        end_eq = 0;\n     }\n \n-    // Check if the regions are overlapping. Set `end_eq` to prevent the overlap\n-    let min_block_size = blocks.iter().map(|x| x.stmts.len()).min().unwrap();\n-    if (start_eq + end_eq) > min_block_size {\n-        end_eq = min_block_size - start_eq;\n+    BlockEq {\n+        start_end_eq,\n+        end_begin_eq: Some(end_begin_eq),\n+        moved_locals,\n     }\n-\n-    Some(BlockEqual {\n-        start_eq,\n-        end_eq,\n-        expr_eq,\n-    })\n }\n \n-fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &FxHashSet<Symbol>, if_expr: &Expr<'_>) -> bool {\n+fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &[(HirId, Symbol)], if_expr: &Expr<'_>) -> bool {\n     get_enclosing_block(cx, if_expr.hir_id).map_or(false, |block| {\n         let ignore_span = block.span.shrink_to_lo().to(if_expr.span);\n \n         symbols\n             .iter()\n-            .filter(|sym| !sym.as_str().starts_with('_'))\n-            .any(move |sym| {\n-                let mut walker = ContainsName {\n-                    name: *sym,\n-                    result: false,\n-                };\n+            .filter(|&&(_, name)| !name.as_str().starts_with('_'))\n+            .any(|&(_, name)| {\n+                let mut walker = ContainsName { name, result: false };\n \n                 // Scan block\n                 block\n@@ -419,194 +491,9 @@ fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &FxHashSet<Symb\n     })\n }\n \n-fn emit_branches_sharing_code_lint(\n-    cx: &LateContext<'_>,\n-    start_stmts: usize,\n-    end_stmts: usize,\n-    lint_end: bool,\n-    warn_about_moved_symbol: bool,\n-    blocks: &[&Block<'_>],\n-    if_expr: &Expr<'_>,\n-) {\n-    if start_stmts == 0 && !lint_end {\n-        return;\n-    }\n-\n-    // (help, span, suggestion)\n-    let mut suggestions: Vec<(&str, Span, String)> = vec![];\n-    let mut add_expr_note = false;\n-\n-    // Construct suggestions\n-    let sm = cx.sess().source_map();\n-    if start_stmts > 0 {\n-        let block = blocks[0];\n-        let span_start = first_line_of_span(cx, if_expr.span).shrink_to_lo();\n-        let span_end = sm.stmt_span(block.stmts[start_stmts - 1].span, block.span);\n-\n-        let cond_span = first_line_of_span(cx, if_expr.span).until(block.span);\n-        let cond_snippet = reindent_multiline(snippet(cx, cond_span, \"_\"), false, None);\n-        let cond_indent = indent_of(cx, cond_span);\n-        let moved_span = block.stmts[0].span.source_callsite().to(span_end);\n-        let moved_snippet = reindent_multiline(snippet(cx, moved_span, \"_\"), true, None);\n-        let suggestion = moved_snippet.to_string() + \"\\n\" + &cond_snippet + \"{\";\n-        let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, cond_indent);\n-\n-        let span = span_start.to(span_end);\n-        suggestions.push((\"start\", span, suggestion.to_string()));\n-    }\n-\n-    if lint_end {\n-        let block = blocks[blocks.len() - 1];\n-        let span_end = block.span.shrink_to_hi();\n-\n-        let moved_start = if end_stmts == 0 && block.expr.is_some() {\n-            block.expr.unwrap().span.source_callsite()\n-        } else {\n-            sm.stmt_span(block.stmts[block.stmts.len() - end_stmts].span, block.span)\n-        };\n-        let moved_end = block.expr.map_or_else(\n-            || sm.stmt_span(block.stmts[block.stmts.len() - 1].span, block.span),\n-            |expr| expr.span.source_callsite(),\n-        );\n-\n-        let moved_span = moved_start.to(moved_end);\n-        let moved_snipped = reindent_multiline(snippet(cx, moved_span, \"_\"), true, None);\n-        let indent = indent_of(cx, if_expr.span.shrink_to_hi());\n-        let suggestion = \"}\\n\".to_string() + &moved_snipped;\n-        let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, indent);\n-\n-        let mut span = moved_start.to(span_end);\n-        // Improve formatting if the inner block has indention (i.e. normal Rust formatting)\n-        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt(), span.parent());\n-        if snippet_opt(cx, test_span)\n-            .map(|snip| snip == \"    \")\n-            .unwrap_or_default()\n-        {\n-            span = span.with_lo(test_span.lo());\n-        }\n-\n-        suggestions.push((\"end\", span, suggestion.to_string()));\n-        add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit();\n-    }\n-\n-    let add_optional_msgs = |diag: &mut Diagnostic| {\n-        if add_expr_note {\n-            diag.note(\"The end suggestion probably needs some adjustments to use the expression result correctly\");\n-        }\n-\n-        if warn_about_moved_symbol {\n-            diag.warn(\"Some moved values might need to be renamed to avoid wrong references\");\n-        }\n-    };\n-\n-    // Emit lint\n-    if suggestions.len() == 1 {\n-        let (place_str, span, sugg) = suggestions.pop().unwrap();\n-        let msg = format!(\"all if blocks contain the same code at the {}\", place_str);\n-        let help = format!(\"consider moving the {} statements out like this\", place_str);\n-        span_lint_and_then(cx, BRANCHES_SHARING_CODE, span, msg.as_str(), |diag| {\n-            diag.span_suggestion(span, help.as_str(), sugg, Applicability::Unspecified);\n-\n-            add_optional_msgs(diag);\n-        });\n-    } else if suggestions.len() == 2 {\n-        let (_, end_span, end_sugg) = suggestions.pop().unwrap();\n-        let (_, start_span, start_sugg) = suggestions.pop().unwrap();\n-        span_lint_and_then(\n-            cx,\n-            BRANCHES_SHARING_CODE,\n-            start_span,\n-            \"all if blocks contain the same code at the start and the end. Here at the start\",\n-            move |diag| {\n-                diag.span_note(end_span, \"and here at the end\");\n-\n-                diag.span_suggestion(\n-                    start_span,\n-                    \"consider moving the start statements out like this\",\n-                    start_sugg,\n-                    Applicability::Unspecified,\n-                );\n-\n-                diag.span_suggestion(\n-                    end_span,\n-                    \"and consider moving the end statements out like this\",\n-                    end_sugg,\n-                    Applicability::Unspecified,\n-                );\n-\n-                add_optional_msgs(diag);\n-            },\n-        );\n-    }\n-}\n-\n-/// This visitor collects `HirId`s and Symbols of defined symbols and `HirId`s of used values.\n-struct UsedValueFinderVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-\n-    /// The `HirId`s of defined values in the scanned statements\n-    defs: FxHashSet<HirId>,\n-\n-    /// The Symbols of the defined symbols in the scanned statements\n-    def_symbols: FxHashSet<Symbol>,\n-\n-    /// The `HirId`s of the used values\n-    uses: FxHashSet<HirId>,\n-}\n-\n-impl<'a, 'tcx> UsedValueFinderVisitor<'a, 'tcx> {\n-    fn new(cx: &'a LateContext<'tcx>) -> Self {\n-        UsedValueFinderVisitor {\n-            cx,\n-            defs: FxHashSet::default(),\n-            def_symbols: FxHashSet::default(),\n-            uses: FxHashSet::default(),\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for UsedValueFinderVisitor<'a, 'tcx> {\n-    type NestedFilter = nested_filter::All;\n-\n-    fn nested_visit_map(&mut self) -> Self::Map {\n-        self.cx.tcx.hir()\n-    }\n-\n-    fn visit_local(&mut self, l: &'tcx rustc_hir::Local<'tcx>) {\n-        let local_id = l.pat.hir_id;\n-        self.defs.insert(local_id);\n-\n-        if let Some(sym) = l.pat.simple_ident() {\n-            self.def_symbols.insert(sym.name);\n-        }\n-\n-        if let Some(expr) = l.init {\n-            intravisit::walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn visit_qpath(&mut self, qpath: &'tcx rustc_hir::QPath<'tcx>, id: HirId, _span: rustc_span::Span) {\n-        if let rustc_hir::QPath::Resolved(_, path) = *qpath {\n-            if path.segments.len() == 1 {\n-                if let rustc_hir::def::Res::Local(var) = self.cx.qpath_res(qpath, id) {\n-                    self.uses.insert(var);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n /// Implementation of `IFS_SAME_COND`.\n fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n-    let hash: &dyn Fn(&&Expr<'_>) -> u64 = &|expr| -> u64 {\n-        let mut h = SpanlessHash::new(cx);\n-        h.hash_expr(expr);\n-        h.finish()\n-    };\n-\n-    let eq: &dyn Fn(&&Expr<'_>, &&Expr<'_>) -> bool = &|&lhs, &rhs| -> bool { eq_expr_value(cx, lhs, rhs) };\n-\n-    for (i, j) in search_same(conds, hash, eq) {\n+    for (i, j) in search_same(conds, |e| hash_expr(cx, e), |lhs, rhs| eq_expr_value(cx, lhs, rhs)) {\n         span_lint_and_note(\n             cx,\n             IFS_SAME_COND,\n@@ -620,12 +507,6 @@ fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n \n /// Implementation of `SAME_FUNCTIONS_IN_IF_CONDITION`.\n fn lint_same_fns_in_if_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n-    let hash: &dyn Fn(&&Expr<'_>) -> u64 = &|expr| -> u64 {\n-        let mut h = SpanlessHash::new(cx);\n-        h.hash_expr(expr);\n-        h.finish()\n-    };\n-\n     let eq: &dyn Fn(&&Expr<'_>, &&Expr<'_>) -> bool = &|&lhs, &rhs| -> bool {\n         // Do not lint if any expr originates from a macro\n         if lhs.span.from_expansion() || rhs.span.from_expansion() {\n@@ -638,7 +519,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n         SpanlessEq::new(cx).eq_expr(lhs, rhs)\n     };\n \n-    for (i, j) in search_same(conds, hash, eq) {\n+    for (i, j) in search_same(conds, |e| hash_expr(cx, e), eq) {\n         span_lint_and_note(\n             cx,\n             SAME_FUNCTIONS_IN_IF_CONDITION,"}, {"sha": "18d34370a7b87d136a8c2ac0c7545d5d47b7e8d9", "filename": "clippy_lints/src/create_dir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcreate_dir.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -15,12 +15,12 @@ declare_clippy_lint! {\n     /// Sometimes `std::fs::create_dir` is mistakenly chosen over `std::fs::create_dir_all`.\n     ///\n     /// ### Example\n-    ///\n-    /// ```rust\n+    /// ```rust,ignore\n     /// std::fs::create_dir(\"foo\");\n     /// ```\n+    ///\n     /// Use instead:\n-    /// ```rust\n+    /// ```rust,ignore\n     /// std::fs::create_dir_all(\"foo\");\n     /// ```\n     #[clippy::version = \"1.48.0\"]"}, {"sha": "fe9f4f9ae3cb9f08ebeef9e3d586fb45650dc3ab", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -18,10 +18,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// dbg!(true)\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// true\n     /// ```\n     #[clippy::version = \"1.34.0\"]"}, {"sha": "d99a1aa2969461a40153b91b10933b57b264e794", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -18,15 +18,16 @@ declare_clippy_lint! {\n     /// Checks for literal calls to `Default::default()`.\n     ///\n     /// ### Why is this bad?\n-    /// It's more clear to the reader to use the name of the type whose default is\n-    /// being gotten than the generic `Default`.\n+    /// It's easier for the reader if the name of the type is used, rather than the\n+    /// generic `Default`.\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let s: String = Default::default();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let s = String::default();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -47,13 +48,13 @@ declare_clippy_lint! {\n     /// Assignments to patterns that are of tuple type are not linted.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```\n     /// # #[derive(Default)]\n     /// # struct A { i: i32 }\n     /// let mut a: A = Default::default();\n     /// a.i = 42;\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```\n     /// # #[derive(Default)]"}, {"sha": "fb418a3251f588c4cc58dbb5d8da10c88ffc96bf", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::numeric_literal;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n@@ -76,7 +76,7 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n     }\n \n     /// Check whether a passed literal has potential to cause fallback or not.\n-    fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>) {\n+    fn check_lit(&self, lit: &Lit, lit_ty: Ty<'tcx>, emit_hir_id: HirId) {\n         if_chain! {\n                 if !in_external_macro(self.cx.sess(), lit.span);\n                 if let Some(ty_bound) = self.ty_bounds.last();\n@@ -101,14 +101,15 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n                         }\n                     };\n                     let sugg = numeric_literal::format(&src, Some(suffix), is_float);\n-                    span_lint_and_sugg(\n+                    span_lint_hir_and_then(\n                         self.cx,\n                         DEFAULT_NUMERIC_FALLBACK,\n+                        emit_hir_id,\n                         lit.span,\n                         \"default numeric fallback might occur\",\n-                        \"consider adding suffix\",\n-                        sugg,\n-                        Applicability::MaybeIncorrect,\n+                        |diag| {\n+                            diag.span_suggestion(lit.span, \"consider adding suffix\", sugg, Applicability::MaybeIncorrect);\n+                        }\n                     );\n                 }\n         }\n@@ -179,7 +180,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n             ExprKind::Lit(lit) => {\n                 let ty = self.cx.typeck_results().expr_ty(expr);\n-                self.check_lit(lit, ty);\n+                self.check_lit(lit, ty, expr.hir_id);\n                 return;\n             },\n "}, {"sha": "b47441eff3748fb505cd32b400cd77eccc1e32d2", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n use clippy_utils::ty::peel_mid_ty_refs;\n@@ -30,13 +30,14 @@ declare_clippy_lint! {\n     /// let a: &mut String = &mut String::from(\"foo\");\n     /// let b: &str = a.deref();\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let a: &mut String = &mut String::from(\"foo\");\n     /// let b = &*a;\n     /// ```\n     ///\n-    /// This lint excludes\n+    /// This lint excludes:\n     /// ```rust,ignore\n     /// let _ = d.unwrap().deref();\n     /// ```\n@@ -59,11 +60,13 @@ declare_clippy_lint! {\n     /// ```rust\n     /// fn fun(_a: &i32) {}\n     ///\n-    /// // Bad\n     /// let x: &i32 = &&&&&&5;\n     /// fun(&x);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn fun(_a: &i32) {}\n     /// let x: &i32 = &5;\n     /// fun(x);\n     /// ```\n@@ -82,13 +85,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = Some(\"\");\n     /// if let Some(ref x) = x {\n     ///     // use `x` here\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x = Some(\"\");\n     /// if let Some(x) = x {\n     ///     // use `&x` here\n@@ -131,6 +135,7 @@ pub struct Dereferencing {\n struct StateData {\n     /// Span of the top level expression\n     span: Span,\n+    hir_id: HirId,\n }\n \n enum State {\n@@ -165,6 +170,8 @@ struct RefPat {\n     app: Applicability,\n     /// All the replacements which need to be made.\n     replacements: Vec<(Span, String)>,\n+    /// The [`HirId`] that the lint should be emitted at.\n+    hir_id: HirId,\n }\n \n impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n@@ -218,7 +225,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 is_final_ufcs: matches!(expr.kind, ExprKind::Call(..)),\n                                 target_mut,\n                             },\n-                            StateData { span: expr.span },\n+                            StateData {\n+                                span: expr.span,\n+                                hir_id: expr.hir_id,\n+                            },\n                         ));\n                     },\n                     RefOp::AddrOf => {\n@@ -290,7 +300,10 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                     required_precedence,\n                                     msg,\n                                 },\n-                                StateData { span: expr.span },\n+                                StateData {\n+                                    span: expr.span,\n+                                    hir_id: expr.hir_id,\n+                                },\n                             ));\n                         }\n                     },\n@@ -383,6 +396,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             spans: vec![pat.span],\n                             app,\n                             replacements: vec![(pat.span, snip.into())],\n+                            hir_id: pat.hir_id\n                         }),\n                     );\n                 }\n@@ -395,13 +409,15 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n             for pat in self.ref_locals.drain(..).filter_map(|(_, x)| x) {\n                 let replacements = pat.replacements;\n                 let app = pat.app;\n-                span_lint_and_then(\n+                let lint = if pat.always_deref {\n+                    NEEDLESS_BORROW\n+                } else {\n+                    REF_BINDING_TO_REFERENCE\n+                };\n+                span_lint_hir_and_then(\n                     cx,\n-                    if pat.always_deref {\n-                        NEEDLESS_BORROW\n-                    } else {\n-                        REF_BINDING_TO_REFERENCE\n-                    },\n+                    lint,\n+                    pat.hir_id,\n                     pat.spans,\n                     \"this pattern creates a reference to a reference\",\n                     |diag| {\n@@ -638,19 +654,14 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, state: State, data: S\n         } => {\n             let mut app = Applicability::MachineApplicable;\n             let snip = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app).0;\n-            span_lint_and_sugg(\n-                cx,\n-                NEEDLESS_BORROW,\n-                data.span,\n-                msg,\n-                \"change this to\",\n-                if required_precedence > expr.precedence().order() && !has_enclosing_paren(&snip) {\n+            span_lint_hir_and_then(cx, NEEDLESS_BORROW, data.hir_id, data.span, msg, |diag| {\n+                let sugg = if required_precedence > expr.precedence().order() && !has_enclosing_paren(&snip) {\n                     format!(\"({})\", snip)\n                 } else {\n                     snip.into()\n-                },\n-                app,\n-            );\n+                };\n+                diag.span_suggestion(data.span, \"change this to\", sugg, app);\n+            });\n         },\n     }\n }"}, {"sha": "4d7f4076d7b5134b85e08e04b254e420971f964f", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -30,8 +30,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// Could be written as:\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// #[derive(Default)]\n     /// struct Foo {\n@@ -45,7 +44,6 @@ declare_clippy_lint! {\n     /// specialized than what derive will produce. This lint can't detect the manual `impl`\n     /// has exactly equal bounds, and therefore this lint is disabled for types with\n     /// generic parameters.\n-    ///\n     #[clippy::version = \"1.57.0\"]\n     pub DERIVABLE_IMPLS,\n     complexity,"}, {"sha": "28f218a8e344f1228585e75829795a9683580018", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 54, "deletions": 43, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -4,14 +4,19 @@ use clippy_utils::ty::{implements_trait, implements_trait_with_env, is_copy};\n use clippy_utils::{is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n-    self as hir, BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, UnsafeSource, Unsafety,\n+    self as hir, BlockCheckMode, BodyId, Constness, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, UnsafeSource,\n+    Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, BoundConstness, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef, Ty};\n+use rustc_middle::traits::Reveal;\n+use rustc_middle::ty::{\n+    self, Binder, BoundConstness, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef,\n+    Ty, TyCtxt, Visibility,\n+};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -459,50 +464,18 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     if_chain! {\n         if let ty::Adt(adt, substs) = ty.kind();\n+        if cx.tcx.visibility(adt.did()) == Visibility::Public;\n         if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n-        if let Some(peq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::PartialEq);\n         if let Some(def_id) = trait_ref.trait_def_id();\n         if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);\n-        // New `ParamEnv` replacing `T: PartialEq` with `T: Eq`\n-        let param_env = ParamEnv::new(\n-            cx.tcx.mk_predicates(cx.param_env.caller_bounds().iter().map(|p| {\n-                let kind = p.kind();\n-                match kind.skip_binder() {\n-                    PredicateKind::Trait(p)\n-                        if p.trait_ref.def_id == peq_trait_def_id\n-                            && p.trait_ref.substs.get(0) == p.trait_ref.substs.get(1)\n-                            && matches!(p.trait_ref.self_ty().kind(), ty::Param(_))\n-                            && p.constness == BoundConstness::NotConst\n-                            && p.polarity == ImplPolarity::Positive =>\n-                    {\n-                        cx.tcx.mk_predicate(kind.rebind(PredicateKind::Trait(TraitPredicate {\n-                            trait_ref: TraitRef::new(\n-                                eq_trait_def_id,\n-                                cx.tcx.mk_substs([GenericArg::from(p.trait_ref.self_ty())].into_iter()),\n-                            ),\n-                            constness: BoundConstness::NotConst,\n-                            polarity: ImplPolarity::Positive,\n-                        })))\n-                    },\n-                    _ => p,\n-                }\n-            })),\n-            cx.param_env.reveal(),\n-            cx.param_env.constness(),\n-        );\n-        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, substs);\n+        let param_env = param_env_for_derived_eq(cx.tcx, adt.did(), eq_trait_def_id);\n+        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, &[]);\n+        // If all of our fields implement `Eq`, we can implement `Eq` too\n+        if adt\n+            .all_fields()\n+            .map(|f| f.ty(cx.tcx, substs))\n+            .all(|ty| implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, &[]));\n         then {\n-            // If all of our fields implement `Eq`, we can implement `Eq` too\n-            for variant in adt.variants() {\n-                for field in &variant.fields {\n-                    let ty = field.ty(cx.tcx, substs);\n-\n-                    if !implements_trait(cx, ty, eq_trait_def_id, substs) {\n-                        return;\n-                    }\n-                }\n-            }\n-\n             span_lint_and_sugg(\n                 cx,\n                 DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n@@ -515,3 +488,41 @@ fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_r\n         }\n     }\n }\n+\n+/// Creates the `ParamEnv` used for the give type's derived `Eq` impl.\n+fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) -> ParamEnv<'_> {\n+    // Initial map from generic index to param def.\n+    // Vec<(param_def, needs_eq)>\n+    let mut params = tcx\n+        .generics_of(did)\n+        .params\n+        .iter()\n+        .map(|p| (p, matches!(p.kind, GenericParamDefKind::Type { .. })))\n+        .collect::<Vec<_>>();\n+\n+    let ty_predicates = tcx.predicates_of(did).predicates;\n+    for (p, _) in ty_predicates {\n+        if let PredicateKind::Trait(p) = p.kind().skip_binder()\n+            && p.trait_ref.def_id == eq_trait_id\n+            && let ty::Param(self_ty) = p.trait_ref.self_ty().kind()\n+            && p.constness == BoundConstness::NotConst\n+        {\n+            // Flag types which already have an `Eq` bound.\n+            params[self_ty.index as usize].1 = false;\n+        }\n+    }\n+\n+    ParamEnv::new(\n+        tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n+            params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n+                tcx.mk_predicate(Binder::dummy(PredicateKind::Trait(TraitPredicate {\n+                    trait_ref: TraitRef::new(eq_trait_id, tcx.mk_substs([tcx.mk_param_from_def(param)].into_iter())),\n+                    constness: BoundConstness::NotConst,\n+                    polarity: ImplPolarity::Positive,\n+                })))\n+            }),\n+        )),\n+        Reveal::UserFacing,\n+        Constness::NotConst,\n+    )\n+}"}, {"sha": "da111e7378eaf8be147c455c80ce779e642be12f", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -163,7 +163,7 @@ declare_clippy_lint! {\n     ///     }\n     /// }\n     /// ```\n-    #[clippy::version = \"1.52.0\"]\n+    #[clippy::version = \"1.51.0\"]\n     pub MISSING_PANICS_DOC,\n     pedantic,\n     \"`pub fn` may panic without `# Panics` in doc comment\"\n@@ -178,7 +178,7 @@ declare_clippy_lint! {\n     /// if the `fn main()` is left implicit.\n     ///\n     /// ### Examples\n-    /// ``````rust\n+    /// ```rust\n     /// /// An example of a doctest with a `main()` function\n     /// ///\n     /// /// # Examples\n@@ -191,7 +191,7 @@ declare_clippy_lint! {\n     /// fn needless_main() {\n     ///     unimplemented!();\n     /// }\n-    /// ``````\n+    /// ```\n     #[clippy::version = \"1.40.0\"]\n     pub NEEDLESS_DOCTEST_MAIN,\n     style,"}, {"sha": "23b7510457091eac7c8a9c50e74ac615db2f76e5", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -60,7 +60,8 @@ declare_clippy_lint! {\n     ///     struct BlackForestCake;\n     /// }\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// mod cake {\n     ///     struct BlackForest;"}, {"sha": "2f4c90d07cf666c9dede8ea2bbba5b1bddeaf5f2", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -52,15 +52,13 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// It is more idiomatic to dereference the other argument.\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n+    /// ```rust,ignore\n     /// &x == y\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// x == *y\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "a5a763c37d1bec0f8d3854ef1bf14ac8ad287a44", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -34,14 +34,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// xs.map(|x| foo(x))\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // where `foo(_)` is a plain function that takes the exact argument type of `x`.\n     /// xs.map(foo)\n     /// ```\n-    /// where `foo(_)` is a plain function that takes the exact argument type of\n-    /// `x`.\n     #[clippy::version = \"pre 1.29.0\"]\n     pub REDUNDANT_CLOSURE,\n     style,"}, {"sha": "f7a92bc0795672631544d48d72304131ca875d21", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -54,12 +54,11 @@ declare_clippy_lint! {\n     /// API easier to use.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// fn f(is_round: bool, is_hot: bool) { ... }\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// enum Shape {\n     ///     Round,"}, {"sha": "f2e0798096378a3a0eeb9c9e9196e8f639bf03e3", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -45,10 +45,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let _: f32 = 16_777_217.0; // 16_777_216.0\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let _: f32 = 16_777_216.0;\n     /// let _: f64 = 16_777_217.0;\n     /// ```"}, {"sha": "73261fb8a44c7c9ed0891bdb971b3f40a8edcaa9", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -76,12 +76,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// pub fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// pub unsafe fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }"}, {"sha": "529f7babaa5eab516e5f2a7744f4d31cef4afd4a", "filename": "clippy_lints/src/get_first.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_first.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -20,13 +20,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = vec![2, 3, 5];\n     /// let first_element = x.get(0);\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// let x = vec![2, 3, 5];\n     /// let first_element = x.first();\n     /// ```"}, {"sha": "46654bc61e0f1f2de2263aeecdb869572c152031", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -16,17 +16,21 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let end: u32 = 10;\n-    /// let start: u32 = 5;\n-    ///\n+    /// # let end: u32 = 10;\n+    /// # let start: u32 = 5;\n     /// let mut i: u32 = end - start;\n     ///\n-    /// // Bad\n     /// if i != 0 {\n     ///     i -= 1;\n     /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let end: u32 = 10;\n+    /// # let start: u32 = 5;\n+    /// let mut i: u32 = end - start;\n     ///\n-    /// // Good\n     /// i = i.saturating_sub(1);\n     /// ```\n     #[clippy::version = \"1.44.0\"]\n@@ -48,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n             // Check if the conditional expression is a binary operation\n             if let ExprKind::Binary(ref cond_op, cond_left, cond_right) = cond.kind;\n \n-            // Ensure that the binary operator is >, != and <\n+            // Ensure that the binary operator is >, !=, or <\n             if BinOpKind::Ne == cond_op.node || BinOpKind::Gt == cond_op.node || BinOpKind::Lt == cond_op.node;\n \n             // Check if assign operation is done"}, {"sha": "d0c6495e35a72db0453952e4ae68aaf14b72c9e3", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -45,7 +45,7 @@ declare_clippy_lint! {\n     ///     println!(\"{}\", first);\n     /// }\n     /// ```\n-    #[clippy::version = \"1.58.0\"]\n+    #[clippy::version = \"1.59.0\"]\n     pub INDEX_REFUTABLE_SLICE,\n     nursery,\n     \"avoid indexing on slices which could be destructed\""}, {"sha": "4a375752e1d3b270e6bb8c80b0e63a39ddaceb5e", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -17,19 +17,20 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// This will always panic at runtime.\n     ///\n-    /// ### Known problems\n-    /// Hopefully none.\n-    ///\n     /// ### Example\n-    /// ```no_run\n+    /// ```rust,no_run\n     /// # #![allow(const_err)]\n     /// let x = [1, 2, 3, 4];\n     ///\n-    /// // Bad\n     /// x[9];\n     /// &x[2..9];\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = [1, 2, 3, 4];\n+    /// // Index within bounds\n     ///\n-    /// // Good\n     /// x[0];\n     /// x[3];\n     /// ```\n@@ -49,42 +50,32 @@ declare_clippy_lint! {\n     /// Indexing and slicing can panic at runtime and there are\n     /// safe alternatives.\n     ///\n-    /// ### Known problems\n-    /// Hopefully none.\n-    ///\n     /// ### Example\n     /// ```rust,no_run\n     /// // Vector\n     /// let x = vec![0; 5];\n     ///\n-    /// // Bad\n     /// x[2];\n     /// &x[2..100];\n-    /// &x[2..];\n-    /// &x[..100];\n-    ///\n-    /// // Good\n-    /// x.get(2);\n-    /// x.get(2..100);\n-    /// x.get(2..);\n-    /// x.get(..100);\n     ///\n     /// // Array\n     /// let y = [0, 1, 2, 3];\n     ///\n-    /// // Bad\n     /// &y[10..100];\n     /// &y[10..];\n-    /// &y[..100];\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # #![allow(unused)]\n+    ///\n+    /// # let x = vec![0; 5];\n+    /// # let y = [0, 1, 2, 3];\n+    /// x.get(2);\n+    /// x.get(2..100);\n     ///\n-    /// // Good\n-    /// &y[2..];\n-    /// &y[..2];\n-    /// &y[0..3];\n     /// y.get(10);\n     /// y.get(10..100);\n-    /// y.get(10..);\n-    /// y.get(..100);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub INDEXING_SLICING,"}, {"sha": "78b5ec8ec1ef4f98bff00d5ccdf2fe8121a2ede9", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -41,6 +41,7 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// let infinite_iter = 0..;\n+    /// # #[allow(unused)]\n     /// [0..].iter().zip(infinite_iter.take_while(|x| *x > 5));\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "39f68a8a1b48081382121f15034330f162fb1faf", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -14,12 +14,8 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// This method is also implicitly defined if a type implements the `Display` trait. As the functionality of `Display` is much more versatile, it should be preferred.\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// pub struct A;\n     ///\n     /// impl A {\n@@ -29,8 +25,8 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// use std::fmt;\n     ///\n     /// pub struct A;\n@@ -54,12 +50,8 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// This method is also implicitly defined if a type implements the `Display` trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// use std::fmt;\n     ///\n     /// pub struct A;\n@@ -77,8 +69,8 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// use std::fmt;\n     ///\n     /// pub struct A;"}, {"sha": "9a944def3eb22e6c1eca93de5aba4076af9065a8", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -21,8 +21,7 @@ declare_clippy_lint! {\n     /// if x >= y + 1 {}\n     /// ```\n     ///\n-    /// Could be written as:\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let x = 1;\n     /// # let y = 1;"}, {"sha": "3effba5682607a241c208124760c2905a25c1997", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -15,11 +15,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = 3 / 2;\n     /// println!(\"{}\", x);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x = 3f32 / 2f32;\n     /// println!(\"{}\", x);\n     /// ```"}, {"sha": "46d439b4497e1444d2dcf12b331fa7b197cbefb2", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -17,7 +17,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn foo() {\n     ///     println!(\"cake\");\n     /// }\n@@ -31,8 +30,8 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// fn foo() {\n     ///     println!(\"cake\");\n     /// }"}, {"sha": "289755bfec66ff74a599c3dd5264f2e9282b4e29", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -20,10 +20,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// pub const a = [0u32; 1_000_000];\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust.ignore\n     /// pub static a = [0u32; 1_000_000];\n     /// ```\n     #[clippy::version = \"1.44.0\"]"}, {"sha": "9be057bcf901f5255564173d5b8ea446b800cd61", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -38,12 +38,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// enum Test {\n     ///     A(i32),\n     ///     B([i32; 8000]),\n     /// }\n+    /// ```\n     ///\n+    /// Use instead:\n+    /// ```rust\n     /// // Possibly better\n     /// enum Test2 {\n     ///     A(i32),"}, {"sha": "84dd61a1e4b0d6cb219ca9acdf933667fcab632a", "filename": "clippy_lints/src/large_include_file.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flarge_include_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flarge_include_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_include_file.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -22,10 +22,11 @@ declare_clippy_lint! {\n     /// let included_bytes = include_bytes!(\"very_large_file.txt\");\n     /// ```\n     ///\n-    /// Instead, you can load the file at runtime:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// use std::fs;\n     ///\n+    /// // You can load the file at runtime\n     /// let string = fs::read_to_string(\"very_large_file.txt\")?;\n     /// let bytes = fs::read(\"very_large_file.txt\")?;\n     /// ```"}, {"sha": "26c540e2223b1b08ced6de4ad78494fbe7b0b305", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -45,13 +45,11 @@ declare_clippy_lint! {\n     /// `std::mem::drop` conveys your intention better and is less error-prone.\n     ///\n     /// ### Example\n-    ///\n-    /// Bad:\n     /// ```rust,ignore\n     /// let _ = mutex.lock();\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// let _lock = mutex.lock();\n     /// ```\n@@ -75,24 +73,20 @@ declare_clippy_lint! {\n     /// better and is less error-prone.\n     ///\n     /// ### Example\n-    ///\n-    /// Bad:\n-    /// ```rust,ignore\n-    /// struct Droppable;\n-    /// impl Drop for Droppable {\n-    ///     fn drop(&mut self) {}\n-    /// }\n+    /// ```rust\n+    /// # struct DroppableItem;\n     /// {\n-    ///     let _ = Droppable;\n-    ///     //               ^ dropped here\n+    ///     let _ = DroppableItem;\n+    ///     //                   ^ dropped here\n     ///     /* more code */\n     /// }\n     /// ```\n     ///\n-    /// Good:\n-    /// ```rust,ignore\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct DroppableItem;\n     /// {\n-    ///     let _droppable = Droppable;\n+    ///     let _droppable = DroppableItem;\n     ///     /* more code */\n     ///     // dropped at end of scope\n     /// }"}, {"sha": "8a2cfbff953ecc1859f8be30cf398bbdbaf927b4", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -242,6 +242,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(needless_bool::NEEDLESS_BOOL),\n     LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n     LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n+    LintId::of(needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS),\n     LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n     LintId::of(needless_update::NEEDLESS_UPDATE),\n     LintId::of(neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD),\n@@ -270,6 +271,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n     LintId::of(ranges::REVERSED_EMPTY_RANGES),\n     LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n+    LintId::of(read_zero_byte_vec::READ_ZERO_BYTE_VEC),\n     LintId::of(redundant_clone::REDUNDANT_CLONE),\n     LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n     LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),"}, {"sha": "92a3a0aabf1cabe7f846f2acb85fadfb3caec6bd", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -55,6 +55,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n     LintId::of(ptr::MUT_FROM_REF),\n     LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(read_zero_byte_vec::READ_ZERO_BYTE_VEC),\n     LintId::of(regex::INVALID_REGEX),\n     LintId::of(self_assignment::SELF_ASSIGNMENT),\n     LintId::of(serde_api::SERDE_API_MISUSE),"}, {"sha": "8ad984c68b8ec4685a2227dfa0e83bc03c369f6d", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -408,6 +408,7 @@ store.register_lints(&[\n     needless_continue::NEEDLESS_CONTINUE,\n     needless_for_each::NEEDLESS_FOR_EACH,\n     needless_late_init::NEEDLESS_LATE_INIT,\n+    needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS,\n     needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n     needless_question_mark::NEEDLESS_QUESTION_MARK,\n     needless_update::NEEDLESS_UPDATE,\n@@ -458,6 +459,7 @@ store.register_lints(&[\n     ranges::RANGE_ZIP_WITH_LEN,\n     ranges::REVERSED_EMPTY_RANGES,\n     rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT,\n+    read_zero_byte_vec::READ_ZERO_BYTE_VEC,\n     redundant_clone::REDUNDANT_CLONE,\n     redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n     redundant_else::REDUNDANT_ELSE,"}, {"sha": "b6992ae0ad25f5168a3d50f8099d194c8e2c0aab", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -91,6 +91,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n     LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n     LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n+    LintId::of(needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS),\n     LintId::of(neg_multiply::NEG_MULTIPLY),\n     LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n     LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),"}, {"sha": "84898eae05ac419e1dc9faf1426c71d6656bffaf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,3 @@\n-// error-pattern:cargo-clippy\n-\n #![feature(array_windows)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n@@ -88,10 +86,11 @@ use rustc_session::Session;\n ///     ///\n ///     /// ### Example\n ///     /// ```rust\n-///     /// // Bad\n ///     /// Insert a short example of code that triggers the lint\n+///     /// ```\n ///     ///\n-///     /// // Good\n+///     /// Use instead:\n+///     /// ```rust\n ///     /// Insert a short example of improved code that doesn't trigger the lint\n ///     /// ```\n ///     pub LINT_NAME,\n@@ -315,6 +314,7 @@ mod needless_borrowed_ref;\n mod needless_continue;\n mod needless_for_each;\n mod needless_late_init;\n+mod needless_parens_on_range_literals;\n mod needless_pass_by_value;\n mod needless_question_mark;\n mod needless_update;\n@@ -348,6 +348,7 @@ mod pub_use;\n mod question_mark;\n mod ranges;\n mod rc_clone_in_vec_init;\n+mod read_zero_byte_vec;\n mod redundant_clone;\n mod redundant_closure_call;\n mod redundant_else;\n@@ -746,6 +747,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(collapsible_if::CollapsibleIf));\n     store.register_early_pass(|| Box::new(items_after_statements::ItemsAfterStatements));\n     store.register_early_pass(|| Box::new(precedence::Precedence));\n+    store.register_late_pass(|| Box::new(needless_parens_on_range_literals::NeedlessParensOnRangeLiterals));\n     store.register_early_pass(|| Box::new(needless_continue::NeedlessContinue));\n     store.register_early_pass(|| Box::new(redundant_else::RedundantElse));\n     store.register_late_pass(|| Box::new(create_dir::CreateDir));\n@@ -907,6 +909,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n     store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n     store.register_late_pass(|| Box::new(as_underscore::AsUnderscore));\n+    store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "93f5663312f2e23293a0008e97e0bd63517513b7", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -36,12 +36,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad: unnecessary lifetime annotations\n+    /// // Unnecessary lifetime annotations\n     /// fn in_and_out<'a>(x: &'a u8, y: u8) -> &'a u8 {\n     ///     x\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn elided(x: &u8, y: u8) -> &u8 {\n     ///     x\n     /// }\n@@ -65,12 +67,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad: unnecessary lifetimes\n+    /// // unnecessary lifetimes\n     /// fn unused_lifetime<'a>(x: u8) {\n     ///     // ..\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn no_lifetime(x: u8) {\n     ///     // ...\n     /// }"}, {"sha": "fb2104861c87f2116ea7a3d4d5fbb506143a2cd7", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -22,11 +22,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let x: u64 = 61864918973511;\n+    /// # let _: u64 =\n+    /// 61864918973511\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let x: u64 = 61_864_918_973_511;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _: u64 =\n+    /// 61_864_918_973_511\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNREADABLE_LITERAL,\n@@ -46,6 +51,7 @@ declare_clippy_lint! {\n     /// - Does not match on `_127` since that is a valid grouping for decimal and octal numbers\n     ///\n     /// ### Example\n+    /// ```ignore\n     /// `2_32` => `2_i32`\n     /// `250_8 => `250_u8`\n     /// ```\n@@ -66,11 +72,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let x: u64 = 618_64_9189_73_511;\n+    /// # let _: u64 =\n+    /// 618_64_9189_73_511\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let x: u64 = 61_864_918_973_511;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _: u64 =\n+    /// 61_864_918_973_511\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub INCONSISTENT_DIGIT_GROUPING,\n@@ -125,9 +136,11 @@ declare_clippy_lint! {\n     /// readable than a decimal representation.\n     ///\n     /// ### Example\n+    /// ```text\n     /// `255` => `0xFF`\n     /// `65_535` => `0xFFFF`\n     /// `4_042_322_160` => `0xF0F0_F0F0`\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub DECIMAL_LITERAL_REPRESENTATION,\n     restriction,"}, {"sha": "77de90fd7b94ac7fb196f388f21e29c097ba8e65", "filename": "clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -7,9 +7,22 @@ use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n /// Checks for `for` loops over `Option`s and `Result`s.\n-pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, method_name: Option<&str>) {\n     let ty = cx.typeck_results().expr_ty(arg);\n     if is_type_diagnostic_item(cx, ty, sym::Option) {\n+        let help_string = if let Some(method_name) = method_name {\n+            format!(\n+                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Some({0}) = {1}`\",\n+                snippet(cx, pat.span, \"_\"),\n+                snippet(cx, arg.span, \"_\")\n+            )\n+        } else {\n+            format!(\n+                \"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n+                snippet(cx, pat.span, \"_\"),\n+                snippet(cx, arg.span, \"_\")\n+            )\n+        };\n         span_lint_and_help(\n             cx,\n             FOR_LOOPS_OVER_FALLIBLES,\n@@ -20,13 +33,22 @@ pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,\n-            &format!(\n-                \"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            ),\n+            &help_string,\n         );\n     } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n+        let help_string = if let Some(method_name) = method_name {\n+            format!(\n+                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Ok({0}) = {1}`\",\n+                snippet(cx, pat.span, \"_\"),\n+                snippet(cx, arg.span, \"_\")\n+            )\n+        } else {\n+            format!(\n+                \"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n+                snippet(cx, pat.span, \"_\"),\n+                snippet(cx, arg.span, \"_\")\n+            )\n+        };\n         span_lint_and_help(\n             cx,\n             FOR_LOOPS_OVER_FALLIBLES,\n@@ -37,11 +59,7 @@ pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n                 snippet(cx, arg.span, \"_\")\n             ),\n             None,\n-            &format!(\n-                \"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            ),\n+            &help_string,\n         );\n     }\n }"}, {"sha": "391de922e1e1a71b6d22b4ac05fcca89abcf8fa6", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -42,7 +42,8 @@ declare_clippy_lint! {\n     ///     dst[i + 64] = src[i];\n     /// }\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let src = vec![1];\n     /// # let mut dst = vec![0; 65];\n@@ -70,7 +71,8 @@ declare_clippy_lint! {\n     ///     println!(\"{}\", vec[i]);\n     /// }\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let vec = vec!['a', 'b', 'c'];\n     /// for i in vec {\n@@ -103,7 +105,8 @@ declare_clippy_lint! {\n     ///     // ..\n     /// }\n     /// ```\n-    /// can be rewritten to\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let y = vec![1];\n     /// for x in &y {\n@@ -188,6 +191,10 @@ declare_clippy_lint! {\n     /// for x in &res {\n     ///     // ..\n     /// }\n+    ///\n+    /// for x in res.iter() {\n+    ///     // ..\n+    /// }\n     /// ```\n     ///\n     /// Use instead:\n@@ -282,7 +289,8 @@ declare_clippy_lint! {\n     ///     i += 1;\n     /// }\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let v = vec![1];\n     /// # fn bar(bar: usize, baz: usize) {}\n@@ -469,7 +477,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// This kind of operation can be expressed more succinctly with\n-    /// `vec![item;SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\n+    /// `vec![item; SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\n     /// have better performance.\n     ///\n     /// ### Example\n@@ -484,7 +492,8 @@ declare_clippy_lint! {\n     ///     vec.push(item2);\n     /// }\n     /// ```\n-    /// could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let item1 = 2;\n     /// let item2 = 3;\n@@ -512,7 +521,8 @@ declare_clippy_lint! {\n     ///     println!(\"{}\", item);\n     /// }\n     /// ```\n-    /// could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let item1 = 2;\n     /// let item = &item1;\n@@ -586,7 +596,7 @@ declare_clippy_lint! {\n     ///     std::hint::spin_loop()\n     /// }\n     /// ```\n-    #[clippy::version = \"1.59.0\"]\n+    #[clippy::version = \"1.61.0\"]\n     pub MISSING_SPIN_LOOP,\n     perf,\n     \"An empty busy waiting loop\"\n@@ -695,10 +705,14 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n         let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n-            \"iter\" | \"iter_mut\" => explicit_iter_loop::check(cx, self_arg, arg, method_name),\n+            \"iter\" | \"iter_mut\" => {\n+                explicit_iter_loop::check(cx, self_arg, arg, method_name);\n+                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n+            },\n             \"into_iter\" => {\n                 explicit_iter_loop::check(cx, self_arg, arg, method_name);\n                 explicit_into_iter_loop::check(cx, self_arg, arg);\n+                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n             },\n             \"next\" => {\n                 next_loop_linted = iter_next_loop::check(cx, arg);\n@@ -708,6 +722,6 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     }\n \n     if !next_loop_linted {\n-        for_loops_over_fallibles::check(cx, pat, arg);\n+        for_loops_over_fallibles::check(cx, pat, arg, None);\n     }\n }"}, {"sha": "32de20f6531fec3a88f63c815972274447c3c503", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -117,13 +117,20 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Type(e, _)\n         | ExprKind::Field(e, _)\n         | ExprKind::AddrOf(_, _, e)\n-        | ExprKind::Struct(_, _, Some(e))\n         | ExprKind::Repeat(e, _)\n         | ExprKind::DropTemps(e) => never_loop_expr(e, main_loop_id),\n         ExprKind::Let(let_expr) => never_loop_expr(let_expr.init, main_loop_id),\n         ExprKind::Array(es) | ExprKind::MethodCall(_, es, _) | ExprKind::Tup(es) => {\n             never_loop_expr_all(&mut es.iter(), main_loop_id)\n         },\n+        ExprKind::Struct(_, fields, base) => {\n+            let fields = never_loop_expr_all(&mut fields.iter().map(|f| f.expr), main_loop_id);\n+            if let Some(base) = base {\n+                combine_both(fields, never_loop_expr(base, main_loop_id))\n+            } else {\n+                fields\n+            }\n+        },\n         ExprKind::Call(e, es) => never_loop_expr_all(&mut once(e).chain(es.iter()), main_loop_id),\n         ExprKind::Binary(_, e1, e2)\n         | ExprKind::Assign(e1, e2, _)\n@@ -180,8 +187,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n                 | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_both),\n-        ExprKind::Struct(_, _, None)\n-        | ExprKind::Yield(_, _)\n+        ExprKind::Yield(_, _)\n         | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)"}, {"sha": "16fefea5520190f81f587fdf2f73488fffa8356a", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -110,14 +110,9 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                 arm1.span,\n                 \"this match arm has an identical body to the `_` wildcard arm\",\n                 |diag| {\n-                    diag.span_suggestion(\n-                        arm1.span,\n-                        \"try removing the arm\",\n-                        \"\",\n-                        Applicability::MaybeIncorrect,\n-                    )\n-                    .help(\"or try changing either arm body\")\n-                    .span_note(arm2.span, \"`_` wildcard arm here\");\n+                    diag.span_suggestion(arm1.span, \"try removing the arm\", \"\", Applicability::MaybeIncorrect)\n+                        .help(\"or try changing either arm body\")\n+                        .span_note(arm2.span, \"`_` wildcard arm here\");\n                 },\n             );\n         } else {"}, {"sha": "3e765173fb9f35aec10ca7b3d8379a0fde7dbc74", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -43,13 +43,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # fn bar(stool: &str) {}\n     /// # let x = Some(\"abc\");\n-    /// // Bad\n     /// match x {\n     ///     Some(ref foo) => bar(foo),\n     ///     _ => (),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn bar(stool: &str) {}\n+    /// # let x = Some(\"abc\");\n     /// if let Some(ref foo) = x {\n     ///     bar(foo);\n     /// }\n@@ -114,14 +117,15 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// match x {\n     ///     &A(ref y) => foo(y),\n     ///     &B => bar(),\n     ///     _ => frob(&x),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// match *x {\n     ///     A(ref y) => foo(y),\n     ///     B => bar(),\n@@ -227,13 +231,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x: Option<()> = None;\n     ///\n-    /// // Bad\n     /// let r: Option<&()> = match x {\n     ///     None => None,\n     ///     Some(ref v) => Some(v),\n     /// };\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let x: Option<()> = None;\n     ///\n-    /// // Good\n     /// let r: Option<&()> = x.as_ref();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -257,13 +264,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # enum Foo { A(usize), B(usize) }\n     /// # let x = Foo::B(1);\n-    /// // Bad\n     /// match x {\n     ///     Foo::A(_) => {},\n     ///     _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # enum Foo { A(usize), B(usize) }\n+    /// # let x = Foo::B(1);\n     /// match x {\n     ///     Foo::A(_) => {},\n     ///     Foo::B(_) => {},\n@@ -290,14 +300,17 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # enum Foo { A, B, C }\n     /// # let x = Foo::B;\n-    /// // Bad\n     /// match x {\n     ///     Foo::A => {},\n     ///     Foo::B => {},\n     ///     _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # enum Foo { A, B, C }\n+    /// # let x = Foo::B;\n     /// match x {\n     ///     Foo::A => {},\n     ///     Foo::B => {},\n@@ -320,14 +333,17 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// match \"foo\" {\n+    /// # let s = \"foo\";\n+    /// match s {\n     ///     \"a\" => {},\n     ///     \"bar\" | _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n-    /// match \"foo\" {\n+    /// Use instead:\n+    /// ```rust\n+    /// # let s = \"foo\";\n+    /// match s {\n     ///     \"a\" => {},\n     ///     _ => {},\n     /// }\n@@ -389,15 +405,17 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let a = 1;\n     /// # let b = 2;\n-    ///\n-    /// // Bad\n     /// match (a, b) {\n     ///     (c, d) => {\n     ///         // useless match\n     ///     }\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let a = 1;\n+    /// # let b = 2;\n     /// let (c, d) = (a, b);\n     /// ```\n     #[clippy::version = \"1.43.0\"]\n@@ -419,13 +437,16 @@ declare_clippy_lint! {\n     /// # struct A { a: i32 }\n     /// let a = A { a: 5 };\n     ///\n-    /// // Bad\n     /// match a {\n     ///     A { a: 5, .. } => {},\n     ///     _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct A { a: i32 }\n+    /// # let a = A { a: 5 };\n     /// match a {\n     ///     A { a: 5 } => {},\n     ///     _ => {},\n@@ -509,7 +530,6 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x = Some(5);\n     ///\n-    /// // Bad\n     /// let a = match x {\n     ///     Some(0) => true,\n     ///     _ => false,\n@@ -520,8 +540,11 @@ declare_clippy_lint! {\n     /// } else {\n     ///     false\n     /// };\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = Some(5);\n     /// let a = matches!(x, Some(0));\n     /// ```\n     #[clippy::version = \"1.47.0\"]\n@@ -695,19 +718,18 @@ declare_clippy_lint! {\n     /// let arr = vec![0, 1, 2, 3];\n     /// let idx = 1;\n     ///\n-    /// // Bad\n     /// match arr[idx] {\n     ///     0 => println!(\"{}\", 0),\n     ///     1 => println!(\"{}\", 3),\n     ///     _ => {},\n     /// }\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust, no_run\n     /// let arr = vec![0, 1, 2, 3];\n     /// let idx = 1;\n     ///\n-    /// // Good\n     /// match arr.get(idx) {\n     ///     Some(0) => println!(\"{}\", 0),\n     ///     Some(1) => println!(\"{}\", 3),"}, {"sha": "58c3e52e138c4ae594a35bde1d63fe912d685a49", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PatKind, QPath, UnOp};\n+use rustc_hir::{Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n@@ -155,7 +155,15 @@ pub(super) fn check<'tcx>(\n                 }\n                 false\n             };\n-            if SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg);\n+\n+            if match map_arg.kind {\n+                ExprKind::MethodCall(method, [original_arg], _) => {\n+                    acceptable_methods(method)\n+                        && SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, original_arg)\n+                },\n+                _ => SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg)\n+            };\n+\n             then {\n                 let span = filter_span.with_hi(expr.span.hi());\n                 let (filter_name, lint) = if is_find {\n@@ -171,3 +179,18 @@ pub(super) fn check<'tcx>(\n             }\n     }\n }\n+\n+fn acceptable_methods(method: &PathSegment<'_>) -> bool {\n+    let methods: [Symbol; 8] = [\n+        sym::clone,\n+        sym::as_ref,\n+        sym!(copied),\n+        sym!(cloned),\n+        sym!(as_deref),\n+        sym!(as_mut),\n+        sym!(as_deref_mut),\n+        sym!(to_owned),\n+    ];\n+\n+    methods.contains(&method.ident.name)\n+}"}, {"sha": "06a39c5997e204ab6ac21db206bec7c5769c61a9", "filename": "clippy_lints/src/methods/iter_overeager_cloned.rs", "status": "modified", "additions": 43, "deletions": 54, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,70 +1,59 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::{get_iterator_item_ty, implements_trait, is_copy};\n-use itertools::Itertools;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::{get_associated_type, implements_trait, is_copy};\n use rustc_errors::Applicability;\n-use rustc_hir as hir;\n+use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::sym;\n-use std::ops::Not;\n \n use super::ITER_OVEREAGER_CLONED;\n use crate::redundant_clone::REDUNDANT_CLONE;\n \n-/// lint overeager use of `cloned()` for `Iterator`s\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    recv: &'tcx hir::Expr<'_>,\n-    name: &str,\n-    map_arg: &[hir::Expr<'_>],\n+    expr: &'tcx Expr<'_>,\n+    cloned_call: &'tcx Expr<'_>,\n+    cloned_recv: &'tcx Expr<'_>,\n+    is_count: bool,\n+    needs_into_iter: bool,\n ) {\n-    // Check if it's iterator and get type associated with `Item`.\n-    let inner_ty = if_chain! {\n-        if let Some(iterator_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n-        let recv_ty = cx.typeck_results().expr_ty(recv);\n-        if implements_trait(cx, recv_ty, iterator_trait_id, &[]);\n-        if let Some(inner_ty) = get_iterator_item_ty(cx, cx.typeck_results().expr_ty_adjusted(recv));\n-        then {\n-            inner_ty\n-        } else {\n+    let typeck = cx.typeck_results();\n+    if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator)\n+        && let Some(method_id) = typeck.type_dependent_def_id(expr.hir_id)\n+        && cx.tcx.trait_of_item(method_id) == Some(iter_id)\n+        && let Some(method_id) = typeck.type_dependent_def_id(cloned_call.hir_id)\n+        && cx.tcx.trait_of_item(method_id) == Some(iter_id)\n+        && let cloned_recv_ty = typeck.expr_ty_adjusted(cloned_recv)\n+        && let Some(iter_assoc_ty) = get_associated_type(cx, cloned_recv_ty, iter_id, \"Item\")\n+        && matches!(*iter_assoc_ty.kind(), ty::Ref(_, ty, _) if !is_copy(cx, ty))\n+    {\n+        if needs_into_iter\n+            && let Some(into_iter_id) = cx.tcx.get_diagnostic_item(sym::IntoIterator)\n+            && !implements_trait(cx, iter_assoc_ty, into_iter_id, &[])\n+        {\n             return;\n         }\n-    };\n-\n-    match inner_ty.kind() {\n-        ty::Ref(_, ty, _) if !is_copy(cx, *ty) => {},\n-        _ => return,\n-    };\n \n-    let (lint, preserve_cloned) = match name {\n-        \"count\" => (REDUNDANT_CLONE, false),\n-        _ => (ITER_OVEREAGER_CLONED, true),\n-    };\n-    let wildcard_params = map_arg.is_empty().not().then(|| \"...\").unwrap_or_default();\n-    let msg = format!(\n-        \"called `cloned().{}({})` on an `Iterator`. It may be more efficient to call `{}({}){}` instead\",\n-        name,\n-        wildcard_params,\n-        name,\n-        wildcard_params,\n-        preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n-    );\n+        let (lint, msg, trailing_clone) = if is_count {\n+            (REDUNDANT_CLONE, \"unneeded cloning of iterator items\", \"\")\n+        } else {\n+            (ITER_OVEREAGER_CLONED, \"unnecessarily eager cloning of iterator items\", \".cloned()\")\n+        };\n \n-    span_lint_and_sugg(\n-        cx,\n-        lint,\n-        expr.span,\n-        &msg,\n-        \"try this\",\n-        format!(\n-            \"{}.{}({}){}\",\n-            snippet(cx, recv.span, \"..\"),\n-            name,\n-            map_arg.iter().map(|a| snippet(cx, a.span, \"..\")).join(\", \"),\n-            preserve_cloned.then(|| \".cloned()\").unwrap_or_default(),\n-        ),\n-        Applicability::MachineApplicable,\n-    );\n+        span_lint_and_then(\n+            cx,\n+            lint,\n+            expr.span,\n+            msg,\n+            |diag| {\n+                let method_span = expr.span.with_lo(cloned_call.span.hi());\n+                if let Some(mut snip) = snippet_opt(cx, method_span) {\n+                    snip.push_str(trailing_clone);\n+                    let replace_span = expr.span.with_lo(cloned_recv.span.hi());\n+                    diag.span_suggestion(replace_span, \"try this\", snip, Applicability::MachineApplicable);\n+                }\n+            }\n+        );\n+    }\n }"}, {"sha": "9bb7bb7a7aba468e53abd72274fa654340965bc3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 132, "deletions": 98, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -124,28 +124,24 @@ declare_clippy_lint! {\n     /// It's often inefficient to clone all elements of an iterator, when eventually, only some\n     /// of them will be consumed.\n     ///\n+    /// ### Known Problems\n+    /// This `lint` removes the side of effect of cloning items in the iterator.\n+    /// A code that relies on that side-effect could fail.\n+    ///\n     /// ### Examples\n     /// ```rust\n     /// # let vec = vec![\"string\".to_string()];\n-    ///\n-    /// // Bad\n     /// vec.iter().cloned().take(10);\n-    ///\n-    /// // Good\n-    /// vec.iter().take(10).cloned();\n-    ///\n-    /// // Bad\n     /// vec.iter().cloned().last();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let vec = vec![\"string\".to_string()];\n+    /// vec.iter().take(10).cloned();\n     /// vec.iter().last().cloned();\n-    ///\n     /// ```\n-    /// ### Known Problems\n-    /// This `lint` removes the side of effect of cloning items in the iterator.\n-    /// A code that relies on that side-effect could fail.\n-    ///\n-    #[clippy::version = \"1.59.0\"]\n+    #[clippy::version = \"1.60.0\"]\n     pub ITER_OVEREAGER_CLONED,\n     perf,\n     \"using `cloned()` early with `Iterator::iter()` can lead to some performance inefficiencies\"\n@@ -342,11 +338,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = Ok::<_, ()>(());\n-    ///\n-    /// // Bad\n     /// x.ok().expect(\"why did I do this again?\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = Ok::<_, ()>(());\n     /// x.expect(\"why did I do this again?\");\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -390,12 +387,13 @@ declare_clippy_lint! {\n     /// ### Examples\n     /// ```rust\n     /// # let x = Some(1);\n-    ///\n-    /// // Bad\n     /// x.unwrap_or_else(Default::default);\n     /// x.unwrap_or_else(u32::default);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = Some(1);\n     /// x.unwrap_or_default();\n     /// ```\n     #[clippy::version = \"1.56.0\"]\n@@ -453,11 +451,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let opt = Some(1);\n-    ///\n-    /// // Bad\n     /// opt.map_or(None, |a| Some(a + 1));\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let opt = Some(1);\n     /// opt.and_then(|a| Some(a + 1));\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -475,13 +474,12 @@ declare_clippy_lint! {\n     /// `_.ok()`.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// # let r: Result<u32, &str> = Ok(1);\n     /// assert_eq!(Some(1), r.map_or(None, Some));\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// # let r: Result<u32, &str> = Ok(1);\n     /// assert_eq!(Some(1), r.ok());\n@@ -538,7 +536,8 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().filter(|x| **x == 0).next();\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0);\n@@ -562,7 +561,8 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().skip_while(|x| **x == 0).next();\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let vec = vec![1];\n     /// vec.iter().find(|x| **x != 0);\n@@ -586,11 +586,14 @@ declare_clippy_lint! {\n     /// let vec = vec![vec![1]];\n     /// let opt = Some(5);\n     ///\n-    /// // Bad\n     /// vec.iter().map(|x| x.iter()).flatten();\n     /// opt.map(|x| Some(x * 2)).flatten();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let vec = vec![vec![1]];\n+    /// # let opt = Some(5);\n     /// vec.iter().flat_map(|x| x.iter());\n     /// opt.and_then(|x| Some(x * 2));\n     /// ```\n@@ -610,15 +613,16 @@ declare_clippy_lint! {\n     /// less performant.\n     ///\n      /// ### Example\n-    /// Bad:\n     /// ```rust\n+    /// # #![allow(unused)]\n     /// (0_i32..10)\n     ///     .filter(|n| n.checked_add(1).is_some())\n     ///     .map(|n| n.checked_add(1).unwrap());\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n+    /// # #[allow(unused)]\n     /// (0_i32..10).filter_map(|n| n.checked_add(1));\n     /// ```\n     #[clippy::version = \"1.51.0\"]\n@@ -637,14 +641,13 @@ declare_clippy_lint! {\n     /// less performant.\n     ///\n      /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// (0_i32..10)\n     ///     .find(|n| n.checked_add(1).is_some())\n     ///     .map(|n| n.checked_add(1).unwrap());\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// (0_i32..10).find_map(|n| n.checked_add(1));\n     /// ```\n@@ -712,17 +715,20 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n+    /// # #![allow(unused)]\n     /// let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0).is_some();\n     ///\n-    /// let _ = \"hello world\".find(\"world\").is_none();\n+    /// \"hello world\".find(\"world\").is_none();\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let vec = vec![1];\n     /// vec.iter().any(|x| *x == 0);\n     ///\n-    /// let _ = !\"hello world\".contains(\"world\");\n+    /// # #[allow(unused)]\n+    /// !\"hello world\".contains(\"world\");\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub SEARCH_IS_SOME,\n@@ -744,7 +750,8 @@ declare_clippy_lint! {\n     /// let name = \"foo\";\n     /// if name.chars().next() == Some('_') {};\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let name = \"foo\";\n     /// if name.starts_with('_') {};\n@@ -899,10 +906,13 @@ declare_clippy_lint! {\n     /// # use std::rc::Rc;\n     /// let x = Rc::new(1);\n     ///\n-    /// // Bad\n     /// x.clone();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::rc::Rc;\n+    /// # let x = Rc::new(1);\n     /// Rc::clone(&x);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -1034,11 +1044,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// _.split(\"x\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// _.split('x');\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub SINGLE_CHAR_PATTERN,\n     perf,\n@@ -1099,12 +1111,14 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # use std::collections::HashSet;\n-    /// // Bad\n     /// # let mut s = HashSet::new();\n     /// # s.insert(1);\n     /// let x = s.iter().nth(0);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::collections::HashSet;\n     /// # let mut s = HashSet::new();\n     /// # s.insert(1);\n     /// let x = s.iter().next();\n@@ -1210,11 +1224,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = vec![2, 3, 5];\n     /// let last_element = x.get(x.len() - 1);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x = vec![2, 3, 5];\n     /// let last_element = x.last();\n     /// ```\n@@ -1273,10 +1288,14 @@ declare_clippy_lint! {\n     /// let mut a = vec![1, 2, 3];\n     /// let mut b = vec![4, 5, 6];\n     ///\n-    /// // Bad\n     /// a.extend(b.drain(..));\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut a = vec![1, 2, 3];\n+    /// let mut b = vec![4, 5, 6];\n     ///\n-    /// // Good\n     /// a.append(&mut b);\n     /// ```\n     #[clippy::version = \"1.55.0\"]\n@@ -1351,11 +1370,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let name = \"_\";\n-    ///\n-    /// // Bad\n     /// name.chars().last() == Some('_') || name.chars().next_back() == Some('-');\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let name = \"_\";\n     /// name.ends_with('_') || name.ends_with('-');\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -1401,11 +1421,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n+    /// # #[allow(unused)]\n+    /// (0..3).fold(false, |acc, x| acc || x > 2);\n     /// ```\n-    /// This could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n-    /// let _ = (0..3).any(|x| x > 2);\n+    /// (0..3).any(|x| x > 2);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNNECESSARY_FOLD,\n@@ -1485,11 +1507,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let _ = (&vec![3, 4, 5]).into_iter();\n+    /// # let vec = vec![3, 4, 5];\n+    /// (&vec).into_iter();\n+    /// ```\n     ///\n-    /// // Good\n-    /// let _ = (&vec![3, 4, 5]).iter();\n+    /// Use instead:\n+    /// ```rust\n+    /// # let vec = vec![3, 4, 5];\n+    /// (&vec).iter();\n     /// ```\n     #[clippy::version = \"1.32.0\"]\n     pub INTO_ITER_ON_REF,\n@@ -1704,13 +1729,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let mut string = String::new();\n+    /// # let mut string = String::new();\n     /// string.insert_str(0, \"R\");\n     /// string.push_str(\"R\");\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n-    /// let mut string = String::new();\n+    /// # let mut string = String::new();\n     /// string.insert(0, 'R');\n     /// string.push('R');\n     /// ```\n@@ -1881,7 +1907,7 @@ declare_clippy_lint! {\n     /// let x = [1, 2, 3];\n     /// let y: Vec<_> = x.iter().map(|x| 2*x).collect();\n     /// ```\n-    #[clippy::version = \"1.52.0\"]\n+    #[clippy::version = \"1.47.0\"]\n     pub MAP_IDENTITY,\n     complexity,\n     \"using iterator.map(|x| x)\"\n@@ -1897,11 +1923,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let _ = \"Hello\".bytes().nth(3);\n+    /// # #[allow(unused)]\n+    /// \"Hello\".bytes().nth(3);\n+    /// ```\n     ///\n-    /// // Good\n-    /// let _ = \"Hello\".as_bytes().get(3);\n+    /// Use instead:\n+    /// ```rust\n+    /// # #[allow(unused)]\n+    /// \"Hello\".as_bytes().get(3);\n     /// ```\n     #[clippy::version = \"1.52.0\"]\n     pub BYTES_NTH,\n@@ -1945,15 +1974,19 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n+    /// # #![allow(unused)]\n     /// let some_vec = vec![0, 1, 2, 3];\n-    /// let _ = some_vec.iter().count();\n-    /// let _ = &some_vec[..].iter().count();\n     ///\n-    /// // Good\n+    /// some_vec.iter().count();\n+    /// &some_vec[..].iter().count();\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n     /// let some_vec = vec![0, 1, 2, 3];\n-    /// let _ = some_vec.len();\n-    /// let _ = &some_vec[..].len();\n+    ///\n+    /// some_vec.len();\n+    /// &some_vec[..].len();\n     /// ```\n     #[clippy::version = \"1.52.0\"]\n     pub ITER_COUNT,\n@@ -1973,16 +2006,17 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let s = \"\";\n+    /// # let s = \"\";\n     /// for x in s.splitn(1, \":\") {\n-    ///     // use x\n+    ///     // ..\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n-    /// let s = \"\";\n+    /// Use instead:\n+    /// ```rust\n+    /// # let s = \"\";\n     /// for x in s.splitn(2, \":\") {\n-    ///     // use x\n+    ///     // ..\n     /// }\n     /// ```\n     #[clippy::version = \"1.54.0\"]\n@@ -2000,10 +2034,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x: String = std::iter::repeat('x').take(10).collect();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x: String = \"x\".repeat(10);\n     /// ```\n     #[clippy::version = \"1.54.0\"]\n@@ -2021,7 +2056,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// let s = \"key=value=add\";\n     /// let (key, value) = s.splitn(2, '=').next_tuple()?;\n     /// let value = s.splitn(2, '=').nth(1)?;\n@@ -2030,9 +2064,9 @@ declare_clippy_lint! {\n     /// let key = parts.next()?;\n     /// let value = parts.next()?;\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust,ignore\n-    /// // Good\n     /// let s = \"key=value=add\";\n     /// let (key, value) = s.split_once('=')?;\n     /// let value = s.split_once('=')?.1;\n@@ -2057,17 +2091,16 @@ declare_clippy_lint! {\n     /// that both functions return a lazy iterator.\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let str = \"key=value=add\";\n     /// let _ = str.splitn(3, '=').next().unwrap();\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// let str = \"key=value=add\";\n     /// let _ = str.split('=').next().unwrap();\n     /// ```\n-    #[clippy::version = \"1.58.0\"]\n+    #[clippy::version = \"1.59.0\"]\n     pub NEEDLESS_SPLITN,\n     complexity,\n     \"usages of `str::splitn` that can be replaced with `str::split`\"\n@@ -2098,7 +2131,7 @@ declare_clippy_lint! {\n     /// foo(&path.to_string_lossy());\n     /// fn foo(s: &str) {}\n     /// ```\n-    #[clippy::version = \"1.58.0\"]\n+    #[clippy::version = \"1.59.0\"]\n     pub UNNECESSARY_TO_OWNED,\n     perf,\n     \"unnecessary calls to `to_owned`-like functions\"\n@@ -2149,7 +2182,8 @@ declare_clippy_lint! {\n     /// let a = Some(&1);\n     /// let b = a.as_deref(); // goes from Option<&i32> to Option<&i32>\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let a = Some(&1);\n     /// let b = a;\n@@ -2583,8 +2617,8 @@ impl Methods {\n                     },\n                     _ => {},\n                 },\n-                (name @ \"count\", args @ []) => match method_call(recv) {\n-                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                (\"count\", []) => match method_call(recv) {\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv, recv2, true, false),\n                     Some((name2 @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n                         iter_count::check(cx, expr, recv2, name2);\n                     },\n@@ -2614,9 +2648,9 @@ impl Methods {\n                     flat_map_identity::check(cx, expr, arg, span);\n                     flat_map_option::check(cx, expr, arg, span);\n                 },\n-                (name @ \"flatten\", args @ []) => match method_call(recv) {\n+                (\"flatten\", []) => match method_call(recv) {\n                     Some((\"map\", [recv, map_arg], map_span)) => map_flatten::check(cx, expr, recv, map_arg, map_span),\n-                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, true),\n                     _ => {},\n                 },\n                 (\"fold\", [init, acc]) => unnecessary_fold::check(cx, expr, init, acc, span),\n@@ -2636,10 +2670,10 @@ impl Methods {\n                         unnecessary_join::check(cx, expr, recv, join_arg, span);\n                     }\n                 },\n-                (\"last\", args @ []) | (\"skip\", args @ [_]) => {\n+                (\"last\", []) | (\"skip\", [_]) => {\n                     if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n                         if let (\"cloned\", []) = (name2, args2) {\n-                            iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                            iter_overeager_cloned::check(cx, expr, recv, recv2, false, false);\n                         }\n                     }\n                 },\n@@ -2660,10 +2694,10 @@ impl Methods {\n                     map_identity::check(cx, expr, recv, m_arg, name, span);\n                 },\n                 (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n-                (name @ \"next\", args @ []) => {\n+                (\"next\", []) => {\n                     if let Some((name2, [recv2, args2 @ ..], _)) = method_call(recv) {\n                         match (name2, args2) {\n-                            (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                            (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, false),\n                             (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n                             (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, self.msrv),\n                             (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n@@ -2673,9 +2707,9 @@ impl Methods {\n                         }\n                     }\n                 },\n-                (\"nth\", args @ [n_arg]) => match method_call(recv) {\n+                (\"nth\", [n_arg]) => match method_call(recv) {\n                     Some((\"bytes\", [recv2], _)) => bytes_nth::check(cx, expr, recv2, n_arg),\n-                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv, recv2, false, false),\n                     Some((\"iter\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, false),\n                     Some((\"iter_mut\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, true),\n                     _ => iter_nth_zero::check(cx, expr, recv, n_arg),\n@@ -2698,10 +2732,10 @@ impl Methods {\n                     }\n                 },\n                 (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n-                (\"take\", args @ [_arg]) => {\n+                (\"take\", [_arg]) => {\n                     if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n                         if let (\"cloned\", []) = (name2, args2) {\n-                            iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                            iter_overeager_cloned::check(cx, expr, recv, recv2, false, false);\n                         }\n                     }\n                 },"}, {"sha": "01bf871198a5cb06c4d8cfa7e38ac442a78f1d05", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -45,16 +45,13 @@ declare_clippy_lint! {\n     /// dereferences, e.g., changing `*x` to `x` within the function.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// // Bad\n-    /// fn foo(ref x: u8) -> bool {\n-    ///     true\n-    /// }\n+    /// ```rust\n+    /// fn foo(ref _x: u8) {}\n+    /// ```\n     ///\n-    /// // Good\n-    /// fn foo(x: &u8) -> bool {\n-    ///     true\n-    /// }\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo(_x: &u8) {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub TOPLEVEL_REF_ARG,\n@@ -73,11 +70,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = 1.0;\n-    ///\n-    /// // Bad\n     /// if x == f32::NAN { }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 1.0f32;\n     /// if x.is_nan() { }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -139,7 +137,8 @@ declare_clippy_lint! {\n     /// # let y = String::from(\"foo\");\n     /// if x.to_owned() == y {}\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let x = \"foo\";\n     /// # let y = String::from(\"foo\");\n@@ -232,10 +231,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let a = 0 as *const u32;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let a = std::ptr::null::<u32>();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "704918c0b979bdd6bbbf0820ca407842260456cf", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -34,13 +34,21 @@ declare_clippy_lint! {\n     /// # }\n     /// let f = Foo { a: 0, b: 0, c: 0 };\n     ///\n-    /// // Bad\n     /// match f {\n     ///     Foo { a: _, b: 0, .. } => {},\n     ///     Foo { a: _, b: _, c: _ } => {},\n     /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct Foo {\n+    /// #     a: i32,\n+    /// #     b: i32,\n+    /// #     c: i32,\n+    /// # }\n+    /// let f = Foo { a: 0, b: 0, c: 0 };\n     ///\n-    /// // Good\n     /// match f {\n     ///     Foo { b: 0, .. } => {},\n     ///     Foo { .. } => {},\n@@ -62,10 +70,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn foo(a: i32, _a: i32) {}\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn bar(a: i32, _b: i32) {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -103,11 +112,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let y = 0x1a9BAcD;\n+    /// # let _ =\n+    /// 0x1a9BAcD\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let y = 0x1A9BACD;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// 0x1A9BACD\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub MIXED_CASE_HEX_LITERALS,\n@@ -127,11 +141,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let y = 123832i32;\n+    /// # let _ =\n+    /// 123832i32\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let y = 123832_i32;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// 123832_i32\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNSEPARATED_LITERAL_SUFFIX,\n@@ -150,11 +169,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let y = 123832_i32;\n+    /// # let _ =\n+    /// 123832_i32\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let y = 123832i32;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// 123832i32\n+    /// # ;\n     /// ```\n     #[clippy::version = \"1.58.0\"]\n     pub SEPARATED_LITERAL_SUFFIX,\n@@ -234,14 +258,15 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let v = Some(\"abc\");\n-    ///\n-    /// // Bad\n     /// match v {\n     ///     Some(x) => (),\n     ///     y @ _ => (),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let v = Some(\"abc\");\n     /// match v {\n     ///     Some(x) => (),\n     ///     y => (),\n@@ -262,6 +287,7 @@ declare_clippy_lint! {\n     /// means there are 0 or more elements left. This can make a difference\n     /// when refactoring, but shouldn't result in errors in the refactored code,\n     /// since the wildcard pattern isn't used anyway.\n+    ///\n     /// ### Why is this bad?\n     /// The wildcard pattern is unneeded as the rest pattern\n     /// can match that element as well.\n@@ -270,13 +296,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # struct TupleStruct(u32, u32, u32);\n     /// # let t = TupleStruct(1, 2, 3);\n-    /// // Bad\n     /// match t {\n     ///     TupleStruct(0, .., _) => (),\n     ///     _ => (),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct TupleStruct(u32, u32, u32);\n+    /// # let t = TupleStruct(1, 2, 3);\n     /// match t {\n     ///     TupleStruct(0, ..) => (),\n     ///     _ => (),"}, {"sha": "a2419c277e9c27d2b270961e6c860c99f306ffe3", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -25,14 +25,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let mut x = 0;\n     ///\n-    /// // Bad\n     /// let a = {\n     ///     x = 1;\n     ///     1\n     /// } + x;\n     /// // Unclear whether a is 1 or 2.\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let mut x = 0;\n     /// let tmp = {\n     ///     x = 1;\n     ///     1"}, {"sha": "f434a655f8aff5a9d9c0fd101158b0ef02b1fc72", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -16,12 +16,17 @@ declare_clippy_lint! {\n     /// the value. Also the code misleads about the intent of the call site.\n     ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n-    /// my_vec.push(&mut value)\n+    /// ```rust\n+    /// # let mut vec = Vec::new();\n+    /// # let mut value = 5;\n+    /// vec.push(&mut value);\n+    /// ```\n     ///\n-    /// // Good\n-    /// my_vec.push(&value)\n+    /// Use instead:\n+    /// ```rust\n+    /// # let mut vec = Vec::new();\n+    /// # let value = 5;\n+    /// vec.push(&value);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNNECESSARY_MUT_PASSED,"}, {"sha": "a98577093ed5e5cf7f621bce9223a8b7553c6773", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -27,12 +27,13 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let y = true;\n-    ///\n-    /// // Bad\n     /// # use std::sync::Mutex;\n     /// let x = Mutex::new(&y);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let y = true;\n     /// # use std::sync::atomic::AtomicBool;\n     /// let x = AtomicBool::new(y);\n     /// ```\n@@ -60,8 +61,10 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::sync::Mutex;\n     /// let x = Mutex::new(0usize);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// # use std::sync::atomic::AtomicUsize;\n     /// let x = AtomicUsize::new(0usize);\n     /// ```"}, {"sha": "a4eec95b37159b14ae144e50e9998faf569e19d2", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -30,16 +30,21 @@ declare_clippy_lint! {\n     /// shorter code.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # let x = true;\n     /// if x {\n     ///     false\n     /// } else {\n     ///     true\n     /// }\n+    /// # ;\n     /// ```\n-    /// Could be written as\n-    /// ```rust,ignore\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = true;\n     /// !x\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEEDLESS_BOOL,"}, {"sha": "05c012b92e878e6327f2ba1839bd3327b455aaae", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -27,16 +27,17 @@ declare_clippy_lint! {\n     /// ```\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// let mut v = Vec::<String>::new();\n-    /// let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n+    /// # #[allow(unused)]\n+    /// v.iter_mut().filter(|&ref a| a.is_empty());\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// let mut v = Vec::<String>::new();\n-    /// let _ = v.iter_mut().filter(|a| a.is_empty());\n+    /// # #[allow(unused)]\n+    /// v.iter_mut().filter(|a| a.is_empty());\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEEDLESS_BORROWED_REFERENCE,"}, {"sha": "ff2999b1f4a51da2137295baa6ad007c06348322", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -56,7 +56,7 @@ declare_clippy_lint! {\n     ///     -1\n     /// };\n     /// ```\n-    #[clippy::version = \"1.58.0\"]\n+    #[clippy::version = \"1.59.0\"]\n     pub NEEDLESS_LATE_INIT,\n     style,\n     \"late initializations that can be replaced by a `let` statement with an initializer\"\n@@ -185,14 +185,14 @@ fn assignment_suggestions<'tcx>(\n \n     let suggestions = assignments\n         .iter()\n-        .map(|assignment| Some((assignment.span.until(assignment.rhs_span), String::new())))\n-        .chain(assignments.iter().map(|assignment| {\n-            Some((\n+        .flat_map(|assignment| {\n+            [\n+                assignment.span.until(assignment.rhs_span),\n                 assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()),\n-                String::new(),\n-            ))\n-        }))\n-        .collect::<Option<Vec<(Span, String)>>>()?;\n+            ]\n+        })\n+        .map(|span| (span, String::new()))\n+        .collect::<Vec<(Span, String)>>();\n \n     match suggestions.len() {\n         // All of `exprs` are never types"}, {"sha": "6e54b243c0371d386001a66223bbbf605e690532", "filename": "clippy_lints/src/needless_parens_on_range_literals.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_parens_on_range_literals.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,87 @@\n+use clippy_utils::{\n+    diagnostics::span_lint_and_then,\n+    higher,\n+    source::{snippet, snippet_with_applicability},\n+};\n+\n+use rustc_ast::ast;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+  /// ### What it does\n+  /// The lint checks for parenthesis on literals in range statements that are\n+  /// superfluous.\n+  ///\n+  /// ### Why is this bad?\n+  /// Having superfluous parenthesis makes the code less readable\n+  /// overhead when reading.\n+  ///\n+  /// ### Example\n+  ///\n+  /// ```rust\n+  /// for i in (0)..10 {\n+  ///   println!(\"{i}\");\n+  /// }\n+  /// ```\n+  ///\n+  /// Use instead:\n+  ///\n+  /// ```rust\n+  /// for i in 0..10 {\n+  ///   println!(\"{i}\");\n+  /// }\n+  /// ```\n+  #[clippy::version = \"1.63.0\"]\n+  pub NEEDLESS_PARENS_ON_RANGE_LITERALS,\n+  style,\n+  \"needless parenthesis on range literals can be removed\"\n+}\n+\n+declare_lint_pass!(NeedlessParensOnRangeLiterals => [NEEDLESS_PARENS_ON_RANGE_LITERALS]);\n+\n+fn snippet_enclosed_in_parenthesis(snippet: &str) -> bool {\n+    snippet.starts_with('(') && snippet.ends_with(')')\n+}\n+\n+fn check_for_parens(cx: &LateContext<'_>, e: &Expr<'_>, is_start: bool) {\n+    if is_start &&\n+    let ExprKind::Lit(ref literal) = e.kind &&\n+    let ast::LitKind::Float(_sym, ast::LitFloatType::Unsuffixed) = literal.node\n+    {\n+        // don't check floating point literals on the start expression of a range\n+        return;\n+    }\n+    if_chain! {\n+        if let ExprKind::Lit(ref literal) = e.kind;\n+        // the indicator that parenthesis surround the literal is that the span of the expression and the literal differ\n+        if (literal.span.data().hi - literal.span.data().lo) != (e.span.data().hi - e.span.data().lo);\n+        // inspect the source code of the expression for parenthesis\n+        if snippet_enclosed_in_parenthesis(&snippet(cx, e.span, \"\"));\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_then(cx, NEEDLESS_PARENS_ON_RANGE_LITERALS, e.span,\n+                \"needless parenthesis on range literals can be removed\",\n+                |diag| {\n+                    let suggestion = snippet_with_applicability(cx, literal.span, \"_\", &mut applicability);\n+                    diag.span_suggestion(e.span, \"try\", suggestion, applicability);\n+                });\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for NeedlessParensOnRangeLiterals {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let Some(higher::Range { start, end, .. }) = higher::Range::hir(expr) {\n+            if let Some(start) = start {\n+                check_for_parens(cx, start, true);\n+            }\n+            if let Some(end) = end {\n+                check_for_parens(cx, end, false);\n+            }\n+        }\n+    }\n+}"}, {"sha": "0bd29d1776b28e714dc2438f7a675fa632887fca", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -24,16 +24,17 @@ declare_clippy_lint! {\n     /// #     z: i32,\n     /// # }\n     /// # let zero_point = Point { x: 0, y: 0, z: 0 };\n-    ///\n-    /// // Bad\n     /// Point {\n     ///     x: 1,\n     ///     y: 1,\n     ///     z: 1,\n     ///     ..zero_point\n     /// };\n+    /// ```\n     ///\n-    /// // Ok\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // Missing field `z`\n     /// Point {\n     ///     x: 1,\n     ///     y: 1,"}, {"sha": "a7e0e35787cffbcc092d5ae27a293bbac7a60244", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -19,17 +19,17 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// use std::cmp::Ordering;\n-    ///\n-    /// // Bad\n     /// let a = 1.0;\n     /// let b = f64::NAN;\n     ///\n-    /// let _not_less_or_equal = !(a <= b);\n+    /// let not_less_or_equal = !(a <= b);\n+    /// ```\n     ///\n-    /// // Good\n-    /// let a = 1.0;\n-    /// let b = f64::NAN;\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::cmp::Ordering;\n+    /// # let a = 1.0;\n+    /// # let b = f64::NAN;\n     ///\n     /// let _not_less_or_equal = match a.partial_cmp(&b) {\n     ///     None | Some(Ordering::Greater) => true,"}, {"sha": "ce6bb38b7c0e9d3d981796591aa1f0ea94b1d197", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -19,12 +19,13 @@ declare_clippy_lint! {\n     /// This only catches integers (for now).\n     ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n+    /// ```rust,ignore\n     /// let a = x * -1;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let b = -x;\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let a = -x;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEG_MULTIPLY,"}, {"sha": "1727275a4e06a68014f102f7a797cbdbd69b9662", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -59,12 +59,14 @@ declare_clippy_lint! {\n     /// ```rust\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     ///\n-    /// // Bad.\n     /// const CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\n     /// CONST_ATOM.store(6, SeqCst); // the content of the atomic is unchanged\n     /// assert_eq!(CONST_ATOM.load(SeqCst), 12); // because the CONST_ATOM in these lines are distinct\n+    /// ```\n     ///\n-    /// // Good.\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     /// static STATIC_ATOM: AtomicUsize = AtomicUsize::new(15);\n     /// STATIC_ATOM.store(9, SeqCst);\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n@@ -105,11 +107,15 @@ declare_clippy_lint! {\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     /// const CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\n     ///\n-    /// // Bad.\n     /// CONST_ATOM.store(6, SeqCst); // the content of the atomic is unchanged\n     /// assert_eq!(CONST_ATOM.load(SeqCst), 12); // because the CONST_ATOM in these lines are distinct\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+    /// const CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\n     ///\n-    /// // Good.\n     /// static STATIC_ATOM: AtomicUsize = CONST_ATOM;\n     /// STATIC_ATOM.store(9, SeqCst);\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance"}, {"sha": "3ab4b6c4f6fab72c079a5b5d6ff28d112e164c2e", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -33,15 +33,16 @@ declare_clippy_lint! {\n     ///\n     /// # Example\n     /// ```rust\n-    /// // Bad\n     /// let one = \"\\033[1m Bold? \\033[0m\";  // \\033 intended as escape\n     /// let two = \"\\033\\0\";                 // \\033 intended as null-3-3\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let one = \"\\x1b[1mWill this be bold?\\x1b[0m\";\n     /// let two = \"\\x0033\\x00\";\n     /// ```\n-    #[clippy::version = \"1.58.0\"]\n+    #[clippy::version = \"1.59.0\"]\n     pub OCTAL_ESCAPES,\n     suspicious,\n     \"string escape sequences looking like octal characters\""}, {"sha": "677ac998b56825741e2df8dd8a751c8c53bff432", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -87,7 +87,7 @@ declare_clippy_lint! {\n     /// #     print!(\"{}\", f(1));\n     /// # }\n     /// ```\n-    #[clippy::version = \"1.60.0\"]\n+    #[clippy::version = \"1.61.0\"]\n     pub ONLY_USED_IN_RECURSION,\n     nursery,\n     \"arguments that is only used in recursion can be removed\""}, {"sha": "05ab62786f409ab9e5379ebc2af3d3b533498b9b", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -57,12 +57,11 @@ declare_clippy_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// // Bad\n     /// fn foo(v: &u32) {}\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Better\n     /// fn foo(v: u32) {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -89,14 +88,13 @@ declare_clippy_lint! {\n     /// #[derive(Clone, Copy)]\n     /// struct TooLarge([u8; 2048]);\n     ///\n-    /// // Bad\n     /// fn foo(v: TooLarge) {}\n     /// ```\n-    /// ```rust\n-    /// #[derive(Clone, Copy)]\n-    /// struct TooLarge([u8; 2048]);\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # #[derive(Clone, Copy)]\n+    /// # struct TooLarge([u8; 2048]);\n     /// fn foo(v: &TooLarge) {}\n     /// ```\n     #[clippy::version = \"1.49.0\"]"}, {"sha": "b06eba13d2fdb7bda8e86c8ef95d2228de70e20e", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -48,10 +48,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// // Bad\n     /// fn foo(&Vec<u32>) { .. }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```ignore\n     /// fn foo(&[u32]) { .. }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -70,15 +71,18 @@ declare_clippy_lint! {\n     /// method instead\n     ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n+    /// ```rust,ignore\n+    /// use std::ptr;\n+    ///\n     /// if x == ptr::null {\n-    ///     ..\n+    ///     // ..\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// if x.is_null() {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -129,12 +133,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// // Bad. Undefined behavior\n+    /// // Undefined behavior\n     /// unsafe { std::slice::from_raw_parts(ptr::null(), 0); }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```ignore\n-    /// // Good\n     /// unsafe { std::slice::from_raw_parts(NonNull::dangling().as_ptr(), 0); }\n     /// ```\n     #[clippy::version = \"1.53.0\"]"}, {"sha": "547d4da818727016098b8c7865ab9ef2488cf690", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -27,12 +27,13 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = vec![1];\n-    /// x.iter().zip(0..x.len());\n+    /// let _ = x.iter().zip(0..x.len());\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let x = vec![1];\n-    /// x.iter().enumerate();\n+    /// let _ = x.iter().enumerate();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub RANGE_ZIP_WITH_LEN,\n@@ -65,12 +66,21 @@ declare_clippy_lint! {\n     /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// for x..(y+1) { .. }\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..(y+1) {\n+    ///     // ..\n+    /// }\n     /// ```\n-    /// Could be written as\n-    /// ```rust,ignore\n-    /// for x..=y { .. }\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..=y {\n+    ///     // ..\n+    /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub RANGE_PLUS_ONE,\n@@ -94,12 +104,21 @@ declare_clippy_lint! {\n     /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// for x..=(y-1) { .. }\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..=(y-1) {\n+    ///     // ..\n+    /// }\n     /// ```\n-    /// Could be written as\n-    /// ```rust,ignore\n-    /// for x..y { .. }\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..y {\n+    ///     // ..\n+    /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub RANGE_MINUS_ONE,"}, {"sha": "9538a8104739ee544e516c3997f1f52884b5bfea", "filename": "clippy_lints/src/read_zero_byte_vec.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,142 @@\n+use clippy_utils::{\n+    diagnostics::{span_lint, span_lint_and_sugg},\n+    higher::{get_vec_init_kind, VecInitKind},\n+    source::snippet,\n+    visitors::expr_visitor_no_bodies,\n+};\n+use hir::{intravisit::Visitor, ExprKind, Local, PatKind, PathSegment, QPath, StmtKind};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// This lint catches reads into a zero-length `Vec`.\n+    /// Especially in the case of a call to `with_capacity`, this lint warns that read\n+    /// gets the number of bytes from the `Vec`'s length, not its capacity.\n+    ///\n+    /// ### Why is this bad?\n+    /// Reading zero bytes is almost certainly not the intended behavior.\n+    ///\n+    /// ### Known problems\n+    /// In theory, a very unusual read implementation could assign some semantic meaning\n+    /// to zero-byte reads. But it seems exceptionally unlikely that code intending to do\n+    /// a zero-byte read would allocate a `Vec` for it.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::io;\n+    /// fn foo<F: io::Read>(mut f: F) {\n+    ///     let mut data = Vec::with_capacity(100);\n+    ///     f.read(&mut data).unwrap();\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::io;\n+    /// fn foo<F: io::Read>(mut f: F) {\n+    ///     let mut data = Vec::with_capacity(100);\n+    ///     data.resize(100, 0);\n+    ///     f.read(&mut data).unwrap();\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub READ_ZERO_BYTE_VEC,\n+    correctness,\n+    \"checks for reads into a zero-length `Vec`\"\n+}\n+declare_lint_pass!(ReadZeroByteVec => [READ_ZERO_BYTE_VEC]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ReadZeroByteVec {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &hir::Block<'tcx>) {\n+        for (idx, stmt) in block.stmts.iter().enumerate() {\n+            if !stmt.span.from_expansion()\n+                // matches `let v = Vec::new();`\n+                && let StmtKind::Local(local) = stmt.kind\n+                && let Local { pat, init: Some(init), .. } = local\n+                && let PatKind::Binding(_, _, ident, _) = pat.kind\n+                && let Some(vec_init_kind) = get_vec_init_kind(cx, init)\n+            {\n+                // finds use of `_.read(&mut v)`\n+                let mut read_found = false;\n+                let mut visitor = expr_visitor_no_bodies(|expr| {\n+                    if let ExprKind::MethodCall(path, [_self, arg], _) = expr.kind\n+                        && let PathSegment { ident: read_or_read_exact, .. } = *path\n+                        && matches!(read_or_read_exact.as_str(), \"read\" | \"read_exact\")\n+                        && let ExprKind::AddrOf(_, hir::Mutability::Mut, inner) = arg.kind\n+                        && let ExprKind::Path(QPath::Resolved(None, inner_path)) = inner.kind\n+                        && let [inner_seg] = inner_path.segments\n+                        && ident.name == inner_seg.ident.name\n+                    {\n+                        read_found = true;\n+                    }\n+                    !read_found\n+                });\n+\n+                let next_stmt_span;\n+                if idx == block.stmts.len() - 1 {\n+                    // case { .. stmt; expr }\n+                    if let Some(e) = block.expr {\n+                        visitor.visit_expr(e);\n+                        next_stmt_span = e.span;\n+                    } else {\n+                        return;\n+                    }\n+                } else {\n+                    // case { .. stmt; stmt; .. }\n+                    let next_stmt = &block.stmts[idx + 1];\n+                    visitor.visit_stmt(next_stmt);\n+                    next_stmt_span = next_stmt.span;\n+                }\n+                drop(visitor);\n+\n+                if read_found && !next_stmt_span.from_expansion() {\n+                    let applicability = Applicability::MaybeIncorrect;\n+                    match vec_init_kind {\n+                        VecInitKind::WithConstCapacity(len) => {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                READ_ZERO_BYTE_VEC,\n+                                next_stmt_span,\n+                                \"reading zero byte data to `Vec`\",\n+                                \"try\",\n+                                format!(\"{}.resize({}, 0); {}\",\n+                                    ident.as_str(),\n+                                    len,\n+                                    snippet(cx, next_stmt_span, \"..\")\n+                                ),\n+                                applicability,\n+                            );\n+                        }\n+                        VecInitKind::WithExprCapacity(hir_id) => {\n+                            let e = cx.tcx.hir().expect_expr(hir_id);\n+                            span_lint_and_sugg(\n+                                cx,\n+                                READ_ZERO_BYTE_VEC,\n+                                next_stmt_span,\n+                                \"reading zero byte data to `Vec`\",\n+                                \"try\",\n+                                format!(\"{}.resize({}, 0); {}\",\n+                                    ident.as_str(),\n+                                    snippet(cx, e.span, \"..\"),\n+                                    snippet(cx, next_stmt_span, \"..\")\n+                                ),\n+                                applicability,\n+                            );\n+                        }\n+                        _ => {\n+                            span_lint(\n+                                cx,\n+                                READ_ZERO_BYTE_VEC,\n+                                next_stmt_span,\n+                                \"reading zero byte data to `Vec`\",\n+                            );\n+\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "65ed798867d19f7b9ccd6400159f74bc01da223d", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -23,12 +23,13 @@ declare_clippy_lint! {\n     /// complexity.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// // Bad\n-    /// let a = (|| 42)()\n+    /// ```rust\n+    /// let a = (|| 42)();\n+    /// ```\n     ///\n-    /// // Good\n-    /// let a = 42\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = 42;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub REDUNDANT_CLOSURE_CALL,"}, {"sha": "db6c97f3739c74068a74e4b26ca4e9f80aae964c", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -60,7 +60,7 @@ declare_clippy_lint! {\n     /// let vec = vec![1, 2, 3];\n     /// let slice = &*vec;\n     /// ```\n-    #[clippy::version = \"1.60.0\"]\n+    #[clippy::version = \"1.61.0\"]\n     pub DEREF_BY_SLICING,\n     restriction,\n     \"slicing instead of dereferencing\""}, {"sha": "a642e2da3ba127ad36c6f6c4731ea0524ea0ef10", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -21,11 +21,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// let a = f(*&mut b);\n     /// let c = *&d;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// let a = f(b);\n     /// let c = d;\n     /// ```"}, {"sha": "60be6bd335f686eefc8befed49322c8d021ac983", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -26,37 +26,39 @@ declare_clippy_lint! {\n     /// if it was added on constructors for example.\n     ///\n     /// ### Example\n-    /// Missing attribute\n     /// ```rust\n     /// pub struct Bar;\n     /// impl Bar {\n-    ///     // Bad\n+    ///     // Missing attribute\n     ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n     /// }\n     /// ```\n     ///\n-    /// It's better to have the `#[must_use]` attribute on the method like this:\n+    /// Use instead:\n     /// ```rust\n+    /// # {\n+    /// // It's better to have the `#[must_use]` attribute on the method like this:\n     /// pub struct Bar;\n     /// impl Bar {\n     ///     #[must_use]\n     ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n     /// }\n-    /// ```\n+    /// # }\n     ///\n-    /// Or on the type definition like this:\n-    /// ```rust\n+    /// # {\n+    /// // Or on the type definition like this:\n     /// #[must_use]\n     /// pub struct Bar;\n     /// impl Bar {\n     ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n     /// }\n+    /// # }\n     /// ```\n     #[clippy::version = \"1.59.0\"]\n     pub RETURN_SELF_NOT_MUST_USE,"}, {"sha": "20184d54b76e67b815cbf1effc51c6222bf84acb", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,7 +1,7 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n+use rustc_hir::{HirId, Impl, ItemKind, Node, Path, QPath, TraitRef, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::AssocKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -42,11 +42,12 @@ declare_clippy_lint! {\n declare_lint_pass!(SameNameMethod => [SAME_NAME_METHOD]);\n \n struct ExistingName {\n-    impl_methods: BTreeMap<Symbol, Span>,\n+    impl_methods: BTreeMap<Symbol, (Span, HirId)>,\n     trait_methods: BTreeMap<Symbol, Vec<Span>>,\n }\n \n impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n+    #[expect(clippy::too_many_lines)]\n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>) {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n@@ -97,10 +98,11 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                         };\n \n                         let mut check_trait_method = |method_name: Symbol, trait_method_span: Span| {\n-                            if let Some(impl_span) = existing_name.impl_methods.get(&method_name) {\n-                                span_lint_and_then(\n+                            if let Some((impl_span, hir_id)) = existing_name.impl_methods.get(&method_name) {\n+                                span_lint_hir_and_then(\n                                     cx,\n                                     SAME_NAME_METHOD,\n+                                    *hir_id,\n                                     *impl_span,\n                                     \"method's name is the same as an existing method in a trait\",\n                                     |diag| {\n@@ -136,10 +138,12 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                         }) {\n                             let method_name = impl_item_ref.ident.name;\n                             let impl_span = impl_item_ref.span;\n+                            let hir_id = impl_item_ref.id.hir_id();\n                             if let Some(trait_spans) = existing_name.trait_methods.get(&method_name) {\n-                                span_lint_and_then(\n+                                span_lint_hir_and_then(\n                                     cx,\n                                     SAME_NAME_METHOD,\n+                                    hir_id,\n                                     impl_span,\n                                     \"method's name is the same as an existing method in a trait\",\n                                     |diag| {\n@@ -152,7 +156,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     },\n                                 );\n                             }\n-                            existing_name.impl_methods.insert(method_name, impl_span);\n+                            existing_name.impl_methods.insert(method_name, (impl_span, hir_id));\n                         }\n                     },\n                 }"}, {"sha": "bf318c055dad1d48ae38e37b2ceb70fad1a75b74", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -23,10 +23,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = 1;\n-    /// // Bad\n     /// let x = &x;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 1;\n     /// let y = &x; // use different variable name\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -79,11 +81,14 @@ declare_clippy_lint! {\n     /// # let y = 1;\n     /// # let z = 2;\n     /// let x = y;\n-    ///\n-    /// // Bad\n     /// let x = z; // shadows the earlier binding\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let y = 1;\n+    /// # let z = 2;\n+    /// let x = y;\n     /// let w = z; // use different variable name\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "3dc995e2fa5771b5d677e71b66752449bc3b9ea5", "filename": "clippy_lints/src/single_char_lifetime_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -33,7 +33,7 @@ declare_clippy_lint! {\n     ///     source: &'src str,\n     /// }\n     /// ```\n-    #[clippy::version = \"1.59.0\"]\n+    #[clippy::version = \"1.60.0\"]\n     pub SINGLE_CHAR_LIFETIME_NAMES,\n     restriction,\n     \"warns against single-character lifetime names\""}, {"sha": "975a0a06e38858cde96b6d7cdefedcb9b1aa4201", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -23,15 +23,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use core::iter::repeat;\n     /// # let len = 4;\n-    ///\n-    /// // Bad\n     /// let mut vec1 = Vec::with_capacity(len);\n     /// vec1.resize(len, 0);\n     ///\n     /// let mut vec2 = Vec::with_capacity(len);\n     /// vec2.extend(repeat(0).take(len));\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let len = 4;\n     /// let mut vec1 = vec![0; len];\n     /// let mut vec2 = vec![0; len];\n     /// ```"}, {"sha": "71f3e6b6a6ec67e3d5f81f6788945040b84997b0", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -99,11 +99,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let bs = \"a byte string\".as_bytes();\n+    /// let bstr = \"a byte string\".as_bytes();\n+    /// ```\n     ///\n-    /// // Good\n-    /// let bs = b\"a byte string\";\n+    /// Use instead:\n+    /// ```rust\n+    /// let bstr = b\"a byte string\";\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub STRING_LIT_AS_BYTES,\n@@ -223,11 +224,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n+    /// std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n     /// ```\n-    /// could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n-    /// let _ = &\"Hello World!\"[6..11];\n+    /// &\"Hello World!\"[6..11];\n     /// ```\n     #[clippy::version = \"1.50.0\"]\n     pub STRING_FROM_UTF8_AS_BYTES,"}, {"sha": "ac63d1823371abdc03adb81822598b10a42086b5", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -29,8 +29,7 @@ declare_clippy_lint! {\n     /// pub fn foo<T>(t: T) where T: Copy, T: Clone {}\n     /// ```\n     ///\n-    /// Could be written as:\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// pub fn foo<T>(t: T) where T: Copy + Clone {}\n     /// ```"}, {"sha": "8ea985a89843151555516b5ea02f85d32e4211e2", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -61,12 +61,7 @@ pub(super) fn check<'tcx>(\n                 \"transmute from an integer to a pointer\",\n                 |diag| {\n                     if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n-                        diag.span_suggestion(\n-                            e.span,\n-                            \"try\",\n-                            arg.as_ty(&to_ty.to_string()),\n-                            Applicability::Unspecified,\n-                        );\n+                        diag.span_suggestion(e.span, \"try\", arg.as_ty(&to_ty.to_string()), Applicability::Unspecified);\n                     }\n                 },\n             );"}, {"sha": "cc64d17be05520feefc3a13d3563e149a8d344de", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -41,7 +41,8 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x = String::from(\"\u20ac\");\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let x = String::from(\"\\u{20ac}\");\n     /// ```"}, {"sha": "c8ec4442ab1a47475ec763642f31dd9834d60dd9", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -17,13 +17,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// async fn get_random_number() -> i64 {\n     ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n     /// }\n     /// let number_future = get_random_number();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn get_random_number_improved() -> i64 {\n     ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n     /// }"}, {"sha": "fe29bf29d0caf9c7b3bf9f1f37cfa4693e5bdd4b", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -21,11 +21,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// // format!() returns a `String`\n     /// let s: String = format!(\"hello\").into();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let s: String = format!(\"hello\");\n     /// ```\n     #[clippy::version = \"1.45.0\"]"}, {"sha": "38e5c5e5b7365f3de8550257b218f72384d294fe", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -9,6 +9,29 @@ use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{cmp, env, fmt, fs, io, iter};\n \n+#[rustfmt::skip]\n+const DEFAULT_DOC_VALID_IDENTS: &[&str] = &[\n+    \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n+    \"DirectX\",\n+    \"ECMAScript\",\n+    \"GPLv2\", \"GPLv3\",\n+    \"GitHub\", \"GitLab\",\n+    \"IPv4\", \"IPv6\",\n+    \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\",\n+    \"NaN\", \"NaNs\",\n+    \"OAuth\", \"GraphQL\",\n+    \"OCaml\",\n+    \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\",\n+    \"WebGL\",\n+    \"TensorFlow\",\n+    \"TrueType\",\n+    \"iOS\", \"macOS\", \"FreeBSD\",\n+    \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\",\n+    \"MinGW\",\n+    \"CamelCase\",\n+];\n+const DEFAULT_BLACKLISTED_NAMES: &[&str] = &[\"foo\", \"baz\", \"quux\"];\n+\n /// Holds information used by `MISSING_ENFORCED_IMPORT_RENAMES` lint.\n #[derive(Clone, Debug, Deserialize)]\n pub struct Rename {\n@@ -178,8 +201,10 @@ define_Conf! {\n     (msrv: Option<String> = None),\n     /// Lint: BLACKLISTED_NAME.\n     ///\n-    /// The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n-    (blacklisted_names: Vec<String> = [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n+    /// The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses. The value\n+    /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n+    /// default configuration of Clippy. By default any configuraction will replace the default value.\n+    (blacklisted_names: Vec<String> = super::DEFAULT_BLACKLISTED_NAMES.iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY.\n     ///\n     /// The maximum cognitive complexity a function can have\n@@ -191,27 +216,14 @@ define_Conf! {\n     (cyclomatic_complexity_threshold: Option<u64> = None),\n     /// Lint: DOC_MARKDOWN.\n     ///\n-    /// The list of words this lint should not consider as identifiers needing ticks\n-    (doc_valid_idents: Vec<String> = [\n-        \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n-        \"DirectX\",\n-        \"ECMAScript\",\n-        \"GPLv2\", \"GPLv3\",\n-        \"GitHub\", \"GitLab\",\n-        \"IPv4\", \"IPv6\",\n-        \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\",\n-        \"NaN\", \"NaNs\",\n-        \"OAuth\", \"GraphQL\",\n-        \"OCaml\",\n-        \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\",\n-        \"WebGL\",\n-        \"TensorFlow\",\n-        \"TrueType\",\n-        \"iOS\", \"macOS\", \"FreeBSD\",\n-        \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\",\n-        \"MinGW\",\n-        \"CamelCase\",\n-    ].iter().map(ToString::to_string).collect()),\n+    /// The list of words this lint should not consider as identifiers needing ticks. The value\n+    /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n+    /// default configuration of Clippy. By default any configuraction will replace the default value. For example:\n+    /// * `doc-valid-idents = [\"ClipPy\"]` would replace the default list with `[\"ClipPy\"]`.\n+    /// * `doc-valid-idents = [\"ClipPy\", \"..\"]` would append `ClipPy` to the default list.\n+    ///\n+    /// Default list:\n+    (doc_valid_idents: Vec<String> = super::DEFAULT_DOC_VALID_IDENTS.iter().map(ToString::to_string).collect()),\n     /// Lint: TOO_MANY_ARGUMENTS.\n     ///\n     /// The maximum number of argument a function or method can have\n@@ -401,7 +413,21 @@ pub fn read(path: &Path) -> TryConf {\n         Err(e) => return TryConf::from_error(e),\n         Ok(content) => content,\n     };\n-    toml::from_str(&content).unwrap_or_else(TryConf::from_error)\n+    match toml::from_str::<TryConf>(&content) {\n+        Ok(mut conf) => {\n+            extend_vec_if_indicator_present(&mut conf.conf.doc_valid_idents, DEFAULT_DOC_VALID_IDENTS);\n+            extend_vec_if_indicator_present(&mut conf.conf.blacklisted_names, DEFAULT_BLACKLISTED_NAMES);\n+\n+            conf\n+        },\n+        Err(e) => TryConf::from_error(e),\n+    }\n+}\n+\n+fn extend_vec_if_indicator_present(vec: &mut Vec<String>, default: &[&str]) {\n+    if vec.contains(&\"..\".to_string()) {\n+        vec.extend(default.iter().map(ToString::to_string));\n+    }\n }\n \n const SEPARATOR_WIDTH: usize = 4;"}, {"sha": "b885e5132f1ecd5303f106d21a26865402c90042", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -89,12 +89,11 @@ declare_clippy_lint! {\n     /// warning/error messages.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// cx.span_lint(LINT_NAME, \"message\");\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// utils::span_lint(cx, LINT_NAME, \"message\");\n     /// ```\n@@ -112,12 +111,11 @@ declare_clippy_lint! {\n     /// `cx.outer_expn_data()` is faster and more concise.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// expr.span.ctxt().outer().expn_data()\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// expr.span.ctxt().outer_expn_data()\n     /// ```\n@@ -135,7 +133,6 @@ declare_clippy_lint! {\n     /// ICE in large quantities can damage your teeth\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// \ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\n     /// ```\n@@ -153,12 +150,11 @@ declare_clippy_lint! {\n     /// Indicates that the lint is not finished.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// declare_lint! { pub COOL_LINT, nursery, \"default lint description\" }\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// declare_lint! { pub COOL_LINT, nursery, \"a great new lint\" }\n     /// ```\n@@ -183,7 +179,6 @@ declare_clippy_lint! {\n     /// convenient, readable and less error prone.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n     ///     diag.span_suggestion(\n@@ -207,7 +202,7 @@ declare_clippy_lint! {\n     /// });\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// span_lint_and_sugg(\n     ///     cx,\n@@ -237,12 +232,11 @@ declare_clippy_lint! {\n     /// `utils::is_type_diagnostic_item()` does not require hardcoded paths.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// utils::match_type(cx, ty, &paths::VEC)\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// utils::is_type_diagnostic_item(cx, ty, sym::Vec)\n     /// ```\n@@ -273,12 +267,11 @@ declare_clippy_lint! {\n     /// It's faster and easier to use the symbol constant.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// let _ = sym!(f32);\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// let _ = sym::f32;\n     /// ```\n@@ -295,12 +288,11 @@ declare_clippy_lint! {\n     /// It's faster use symbols directly instead of strings.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// symbol.as_str() == \"clippy\";\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// symbol == sym::clippy;\n     /// ```\n@@ -672,8 +664,8 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             if let ExprKind::Call(func, and_then_args) = expr.kind;\n             if is_expr_path_def_path(cx, func, &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_then\"]);\n             if and_then_args.len() == 5;\n-            if let ExprKind::Closure(_, _, body_id, _, _) = &and_then_args[4].kind;\n-            let body = cx.tcx.hir().body(*body_id);\n+            if let ExprKind::Closure { body, .. } = &and_then_args[4].kind;\n+            let body = cx.tcx.hir().body(*body);\n             let only_expr = peel_blocks_with_stmt(&body.value);\n             if let ExprKind::MethodCall(ps, span_call_args, _) = &only_expr.kind;\n             then {"}, {"sha": "99e9e3275ab53e631bc7c99741e1d0ba359f4870", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 212, "deletions": 20, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -31,6 +31,8 @@ use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::path::Path;\n+use std::path::PathBuf;\n+use std::process::Command;\n \n /// This is the output file of the lint collector.\n const OUTPUT_FILE: &str = \"../util/gh-pages/lints.json\";\n@@ -180,6 +182,7 @@ pub struct MetadataCollector {\n     lints: BinaryHeap<LintMetadata>,\n     applicability_info: FxHashMap<String, ApplicabilityInfo>,\n     config: Vec<ClippyConfiguration>,\n+    clippy_project_root: PathBuf,\n }\n \n impl MetadataCollector {\n@@ -188,6 +191,7 @@ impl MetadataCollector {\n             lints: BinaryHeap::<LintMetadata>::default(),\n             applicability_info: FxHashMap::<String, ApplicabilityInfo>::default(),\n             config: collect_configs(),\n+            clippy_project_root: clippy_dev::clippy_project_root(),\n         }\n     }\n \n@@ -215,11 +219,13 @@ impl Drop for MetadataCollector {\n \n         // Mapping the final data\n         let mut lints = std::mem::take(&mut self.lints).into_sorted_vec();\n-        collect_renames(&mut lints);\n         for x in &mut lints {\n             x.applicability = Some(applicability_info.remove(&x.id).unwrap_or_default());\n+            replace_produces(&x.id, &mut x.docs, &self.clippy_project_root);\n         }\n \n+        collect_renames(&mut lints);\n+\n         // Outputting\n         if Path::new(OUTPUT_FILE).exists() {\n             fs::remove_file(OUTPUT_FILE).unwrap();\n@@ -263,14 +269,193 @@ impl LintMetadata {\n     }\n }\n \n+fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Path) {\n+    let mut doc_lines = docs.lines().map(ToString::to_string).collect::<Vec<_>>();\n+    let mut lines = doc_lines.iter_mut();\n+\n+    'outer: loop {\n+        // Find the start of the example\n+\n+        // ```rust\n+        loop {\n+            match lines.next() {\n+                Some(line) if line.trim_start().starts_with(\"```rust\") => {\n+                    if line.contains(\"ignore\") || line.contains(\"no_run\") {\n+                        // A {{produces}} marker may have been put on a ignored code block by mistake,\n+                        // just seek to the end of the code block and continue checking.\n+                        if lines.any(|line| line.trim_start().starts_with(\"```\")) {\n+                            continue;\n+                        }\n+\n+                        panic!(\"lint `{}` has an unterminated code block\", lint_name)\n+                    }\n+\n+                    break;\n+                },\n+                Some(line) if line.trim_start() == \"{{produces}}\" => {\n+                    panic!(\n+                        \"lint `{}` has marker {{{{produces}}}} with an ignored or missing code block\",\n+                        lint_name\n+                    )\n+                },\n+                Some(line) => {\n+                    let line = line.trim();\n+                    // These are the two most common markers of the corrections section\n+                    if line.eq_ignore_ascii_case(\"Use instead:\") || line.eq_ignore_ascii_case(\"Could be written as:\") {\n+                        break 'outer;\n+                    }\n+                },\n+                None => break 'outer,\n+            }\n+        }\n+\n+        // Collect the example\n+        let mut example = Vec::new();\n+        loop {\n+            match lines.next() {\n+                Some(line) if line.trim_start() == \"```\" => break,\n+                Some(line) => example.push(line),\n+                None => panic!(\"lint `{}` has an unterminated code block\", lint_name),\n+            }\n+        }\n+\n+        // Find the {{produces}} and attempt to generate the output\n+        loop {\n+            match lines.next() {\n+                Some(line) if line.is_empty() => {},\n+                Some(line) if line.trim() == \"{{produces}}\" => {\n+                    let output = get_lint_output(lint_name, &example, clippy_project_root);\n+                    line.replace_range(\n+                        ..,\n+                        &format!(\n+                            \"<details>\\\n+                            <summary>Produces</summary>\\n\\\n+                            \\n\\\n+                            ```text\\n\\\n+                            {}\\n\\\n+                            ```\\n\\\n+                        </details>\",\n+                            output\n+                        ),\n+                    );\n+\n+                    break;\n+                },\n+                // No {{produces}}, we can move on to the next example\n+                Some(_) => break,\n+                None => break 'outer,\n+            }\n+        }\n+    }\n+\n+    *docs = cleanup_docs(&doc_lines);\n+}\n+\n+fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root: &Path) -> String {\n+    let dir = tempfile::tempdir().unwrap_or_else(|e| panic!(\"failed to create temp dir: {e}\"));\n+    let file = dir.path().join(\"lint_example.rs\");\n+\n+    let mut source = String::new();\n+    let unhidden = example\n+        .iter()\n+        .map(|line| line.trim_start().strip_prefix(\"# \").unwrap_or(line));\n+\n+    // Get any attributes\n+    let mut lines = unhidden.peekable();\n+    while let Some(line) = lines.peek() {\n+        if line.starts_with(\"#!\") {\n+            source.push_str(line);\n+            source.push('\\n');\n+            lines.next();\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    let needs_main = !example.iter().any(|line| line.contains(\"fn main\"));\n+    if needs_main {\n+        source.push_str(\"fn main() {\\n\");\n+    }\n+\n+    for line in lines {\n+        source.push_str(line);\n+        source.push('\\n');\n+    }\n+\n+    if needs_main {\n+        source.push_str(\"}\\n\");\n+    }\n+\n+    if let Err(e) = fs::write(&file, &source) {\n+        panic!(\"failed to write to `{}`: {e}\", file.as_path().to_string_lossy());\n+    }\n+\n+    let prefixed_name = format!(\"{}{lint_name}\", CLIPPY_LINT_GROUP_PREFIX);\n+\n+    let mut cmd = Command::new(\"cargo\");\n+\n+    cmd.current_dir(clippy_project_root)\n+        .env(\"CARGO_INCREMENTAL\", \"0\")\n+        .env(\"CLIPPY_ARGS\", \"\")\n+        .env(\"CLIPPY_DISABLE_DOCS_LINKS\", \"1\")\n+        // We need to disable this to enable all lints\n+        .env(\"ENABLE_METADATA_COLLECTION\", \"0\")\n+        .args([\"run\", \"--bin\", \"clippy-driver\"])\n+        .args([\"--target-dir\", \"./clippy_lints/target\"])\n+        .args([\"--\", \"--error-format=json\"])\n+        .args([\"--edition\", \"2021\"])\n+        .arg(\"-Cdebuginfo=0\")\n+        .args([\"-A\", \"clippy::all\"])\n+        .args([\"-W\", &prefixed_name])\n+        .args([\"-L\", \"./target/debug\"])\n+        .args([\"-Z\", \"no-codegen\"]);\n+\n+    let output = cmd\n+        .arg(file.as_path())\n+        .output()\n+        .unwrap_or_else(|e| panic!(\"failed to run `{:?}`: {e}\", cmd));\n+\n+    let tmp_file_path = file.to_string_lossy();\n+    let stderr = std::str::from_utf8(&output.stderr).unwrap();\n+    let msgs = stderr\n+        .lines()\n+        .filter(|line| line.starts_with('{'))\n+        .map(|line| serde_json::from_str(line).unwrap())\n+        .collect::<Vec<serde_json::Value>>();\n+\n+    let mut rendered = String::new();\n+    let iter = msgs\n+        .iter()\n+        .filter(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s == &prefixed_name));\n+\n+    for message in iter {\n+        let rendered_part = message[\"rendered\"].as_str().expect(\"rendered field should exist\");\n+        rendered.push_str(rendered_part);\n+    }\n+\n+    if rendered.is_empty() {\n+        let rendered: Vec<&str> = msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n+        let non_json: Vec<&str> = stderr.lines().filter(|line| !line.starts_with('{')).collect();\n+        panic!(\n+            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n+            lint_name,\n+            non_json.join(\"\\n\"),\n+            rendered.join(\"\\n\")\n+        );\n+    }\n+\n+    // The reader doesn't need to see `/tmp/.tmpfiy2Qd/lint_example.rs` :)\n+    rendered.trim_end().replace(&*tmp_file_path, \"lint_example.rs\")\n+}\n+\n #[derive(Debug, Clone, Serialize, PartialEq, Eq, PartialOrd, Ord)]\n struct SerializableSpan {\n     path: String,\n     line: usize,\n }\n \n-impl std::fmt::Display for SerializableSpan {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+impl fmt::Display for SerializableSpan {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}:{}\", self.path.rsplit('/').next().unwrap_or_default(), self.line)\n     }\n }\n@@ -435,10 +620,10 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // metadata extraction\n                 if let Some((group, level)) = get_lint_group_and_level_or_lint(cx, &lint_name, item);\n-                if let Some(mut docs) = extract_attr_docs_or_lint(cx, item);\n+                if let Some(mut raw_docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n                     if let Some(configuration_section) = self.get_lint_configs(&lint_name) {\n-                        docs.push_str(&configuration_section);\n+                        raw_docs.push_str(&configuration_section);\n                     }\n                     let version = get_lint_version(cx, item);\n \n@@ -448,7 +633,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                         group,\n                         level,\n                         version,\n-                        docs,\n+                        raw_docs,\n                     ));\n                 }\n             }\n@@ -459,7 +644,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // Metadata the little we can get from a deprecated lint\n-                if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n+                if let Some(raw_docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n                     let version = get_lint_version(cx, item);\n \n@@ -469,7 +654,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                         DEPRECATED_LINT_GROUP_STR.to_string(),\n                         DEPRECATED_LINT_LEVEL,\n                         version,\n-                        docs,\n+                        raw_docs,\n                     ));\n                 }\n             }\n@@ -535,22 +720,28 @@ fn extract_attr_docs_or_lint(cx: &LateContext<'_>, item: &Item<'_>) -> Option<St\n /// ```\n ///\n /// Would result in `Hello world!\\n=^.^=\\n`\n-///\n-/// ---\n-///\n+fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n+    let attrs = cx.tcx.hir().attrs(item.hir_id());\n+    let mut lines = attrs.iter().filter_map(ast::Attribute::doc_str);\n+\n+    if let Some(line) = lines.next() {\n+        let raw_docs = lines.fold(String::from(line.as_str()) + \"\\n\", |s, line| s + line.as_str() + \"\\n\");\n+        return Some(raw_docs);\n+    }\n+\n+    None\n+}\n+\n /// This function may modify the doc comment to ensure that the string can be displayed using a\n /// markdown viewer in Clippy's lint list. The following modifications could be applied:\n /// * Removal of leading space after a new line. (Important to display tables)\n /// * Ensures that code blocks only contain language information\n-fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n-    let attrs = cx.tcx.hir().attrs(item.hir_id());\n-    let mut lines = attrs.iter().filter_map(ast::Attribute::doc_str);\n-    let mut docs = String::from(lines.next()?.as_str());\n+fn cleanup_docs(docs_collection: &Vec<String>) -> String {\n     let mut in_code_block = false;\n     let mut is_code_block_rust = false;\n-    for line in lines {\n-        let line = line.as_str();\n \n+    let mut docs = String::new();\n+    for line in docs_collection {\n         // Rustdoc hides code lines starting with `# ` and this removes them from Clippy's lint list :)\n         if is_code_block_rust && line.trim_start().starts_with(\"# \") {\n             continue;\n@@ -583,7 +774,8 @@ fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n             docs.push_str(line);\n         }\n     }\n-    Some(docs)\n+\n+    docs\n }\n \n fn get_lint_version(cx: &LateContext<'_>, item: &Item<'_>) -> String {\n@@ -762,9 +954,9 @@ fn resolve_applicability<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hi\n }\n \n fn check_is_multi_part<'hir>(cx: &LateContext<'hir>, closure_expr: &'hir hir::Expr<'hir>) -> bool {\n-    if let ExprKind::Closure(_, _, body_id, _, _) = closure_expr.kind {\n+    if let ExprKind::Closure { body, .. } = closure_expr.kind {\n         let mut scanner = IsMultiSpanScanner::new(cx);\n-        intravisit::walk_body(&mut scanner, cx.tcx.hir().body(body_id));\n+        intravisit::walk_body(&mut scanner, cx.tcx.hir().body(body));\n         return scanner.is_multi_part();\n     } else if let Some(local) = get_parent_local(cx, closure_expr) {\n         if let Some(local_init) = local.init {"}, {"sha": "297a80e5767a1ed57b322eb643eb44ffece4e65d", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -28,12 +28,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// # fn foo(my_vec: &[u8]) {}\n+    /// fn foo(_x: &[u8]) {}\n     ///\n-    /// // Bad\n     /// foo(&vec![1, 2]);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn foo(_x: &[u8]) {}\n     /// foo(&[1, 2]);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "5418eca382da0ec8cdf8a1e8cbb938481a35d48b", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -26,13 +26,18 @@ declare_clippy_lint! {\n     /// still around.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// // Bad\n+    /// ```rust\n     /// use std::cmp::Ordering::*;\n+    ///\n+    /// # fn foo(_: std::cmp::Ordering) {}\n     /// foo(Less);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// use std::cmp::Ordering;\n+    ///\n+    /// # fn foo(_: Ordering) {}\n     /// foo(Ordering::Less)\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -76,14 +81,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// use crate1::*;\n     ///\n     /// foo();\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust,ignore\n-    /// // Good\n     /// use crate1::foo;\n     ///\n     /// foo();"}, {"sha": "67b2bc8c3f3cd86e823868a0475f083ea535f659", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -25,10 +25,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// println!(\"\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// println!();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -177,10 +178,13 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n-    /// // Bad\n     /// writeln!(buf, \"\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n     /// writeln!(buf);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -204,10 +208,14 @@ declare_clippy_lint! {\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n     /// # let name = \"World\";\n-    /// // Bad\n     /// write!(buf, \"Hello {}!\\n\", name);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n+    /// # let name = \"World\";\n     /// writeln!(buf, \"Hello {}!\", name);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -233,10 +241,13 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n-    /// // Bad\n     /// writeln!(buf, \"{}\", \"foo\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n     /// writeln!(buf, \"foo\");\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "50d3c079fe6758c8ff8ff8dce2adeaed804fd6ac", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -14,10 +14,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let nan = 0.0f32 / 0.0;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let nan = f32::NAN;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "6d4a48b53de3c642f9560e81ed27bf003c02c5c1", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -622,7 +622,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                 ty::Float(FloatTy::F32) => match len.to_valtree().try_to_machine_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n-                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n+                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * usize::try_from(len).unwrap()))\n                         .to_owned()\n                         .chunks(4)\n                         .map(|chunk| {\n@@ -637,7 +637,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                 ty::Float(FloatTy::F64) => match len.to_valtree().try_to_machine_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n-                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n+                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * usize::try_from(len).unwrap()))\n                         .to_owned()\n                         .chunks(8)\n                         .map(|chunk| {"}, {"sha": "af62c4afd5a5110c12df0e71844a778c2705cc4d", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -91,7 +91,7 @@ pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n     // When binding are declared, the binding ID in the left expression is mapped to the one on the\n     // right. For example, when comparing `{ let x = 1; x + 2 }` and `{ let y = 1; y + 2 }`,\n     // these blocks are considered equal since `x` is mapped to `y`.\n-    locals: HirIdMap<HirId>,\n+    pub locals: HirIdMap<HirId>,\n }\n \n impl HirEqInterExpr<'_, '_, '_> {\n@@ -998,3 +998,15 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n }\n+\n+pub fn hash_stmt(cx: &LateContext<'_>, s: &Stmt<'_>) -> u64 {\n+    let mut h = SpanlessHash::new(cx);\n+    h.hash_stmt(s);\n+    h.finish()\n+}\n+\n+pub fn hash_expr(cx: &LateContext<'_>, e: &Expr<'_>) -> u64 {\n+    let mut h = SpanlessHash::new(cx);\n+    h.hash_expr(e);\n+    h.finish()\n+}"}, {"sha": "73c1bdd0e3f4e3ccaf344f7b0f7252594a125163", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -58,7 +58,9 @@ pub mod usage;\n pub mod visitors;\n \n pub use self::attrs::*;\n-pub use self::hir_utils::{both, count_eq, eq_expr_value, over, SpanlessEq, SpanlessHash};\n+pub use self::hir_utils::{\n+    both, count_eq, eq_expr_value, hash_expr, hash_stmt, over, HirEqInterExpr, SpanlessEq, SpanlessHash,\n+};\n \n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;"}, {"sha": "227e97d37ecc3bbcc0eac4d284ceace56057c88b", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -78,9 +78,9 @@ pub fn get_associated_type<'tcx>(\n     cx.tcx\n         .associated_items(trait_id)\n         .find_by_name_and_kind(cx.tcx, Ident::from_str(name), ty::AssocKind::Type, trait_id)\n-        .map(|assoc| {\n+        .and_then(|assoc| {\n             let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n-            cx.tcx.normalize_erasing_regions(cx.param_env, proj)\n+            cx.tcx.try_normalize_erasing_regions(cx.param_env, proj).ok()\n         })\n }\n "}, {"sha": "1742cf677c0f9fefad4e3791012b4f674bd4c2f0", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,50 +1,40 @@\n-use clap::{Arg, ArgMatches, Command};\n+use clap::{Arg, ArgAction, ArgMatches, Command};\n use std::env;\n use std::path::PathBuf;\n \n fn get_clap_config() -> ArgMatches {\n     Command::new(\"lintcheck\")\n         .about(\"run clippy on a set of crates and check output\")\n-        .arg(\n+        .args([\n             Arg::new(\"only\")\n-                .takes_value(true)\n+                .action(ArgAction::Set)\n                 .value_name(\"CRATE\")\n                 .long(\"only\")\n                 .help(\"Only process a single crate of the list\"),\n-        )\n-        .arg(\n             Arg::new(\"crates-toml\")\n-                .takes_value(true)\n+                .action(ArgAction::Set)\n                 .value_name(\"CRATES-SOURCES-TOML-PATH\")\n                 .long(\"crates-toml\")\n                 .help(\"Set the path for a crates.toml where lintcheck should read the sources from\"),\n-        )\n-        .arg(\n             Arg::new(\"threads\")\n-                .takes_value(true)\n+                .action(ArgAction::Set)\n                 .value_name(\"N\")\n+                .value_parser(clap::value_parser!(usize))\n                 .short('j')\n                 .long(\"jobs\")\n                 .help(\"Number of threads to use, 0 automatic choice\"),\n-        )\n-        .arg(\n             Arg::new(\"fix\")\n-                .long(\"--fix\")\n+                .long(\"fix\")\n                 .help(\"Runs cargo clippy --fix and checks if all suggestions apply\"),\n-        )\n-        .arg(\n             Arg::new(\"filter\")\n-                .long(\"--filter\")\n-                .takes_value(true)\n-                .multiple_occurrences(true)\n+                .long(\"filter\")\n+                .action(ArgAction::Append)\n                 .value_name(\"clippy_lint_name\")\n                 .help(\"Apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n-        )\n-        .arg(\n             Arg::new(\"markdown\")\n-                .long(\"--markdown\")\n+                .long(\"markdown\")\n                 .help(\"Change the reports table to use markdown links\"),\n-        )\n+        ])\n         .get_matches()\n }\n \n@@ -75,13 +65,13 @@ impl LintcheckConfig {\n         // if not, use the default \"lintcheck/lintcheck_crates.toml\"\n         let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n             clap_config\n-                .value_of(\"crates-toml\")\n-                .clone()\n+                .get_one::<String>(\"crates-toml\")\n+                .map(|s| &**s)\n                 .unwrap_or(\"lintcheck/lintcheck_crates.toml\")\n-                .to_string()\n+                .into()\n         });\n \n-        let markdown = clap_config.is_present(\"markdown\");\n+        let markdown = clap_config.contains_id(\"markdown\");\n         let sources_toml_path = PathBuf::from(sources_toml);\n \n         // for the path where we save the lint results, get the filename without extension (so for\n@@ -96,25 +86,19 @@ impl LintcheckConfig {\n         // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n         // use half of that for the physical core count\n         // by default use a single thread\n-        let max_jobs = match clap_config.value_of(\"threads\") {\n-            Some(threads) => {\n-                let threads: usize = threads\n-                    .parse()\n-                    .unwrap_or_else(|_| panic!(\"Failed to parse '{}' to a digit\", threads));\n-                if threads == 0 {\n-                    // automatic choice\n-                    // Rayon seems to return thread count so half that for core count\n-                    (rayon::current_num_threads() / 2) as usize\n-                } else {\n-                    threads\n-                }\n+        let max_jobs = match clap_config.get_one::<usize>(\"threads\") {\n+            Some(&0) => {\n+                // automatic choice\n+                // Rayon seems to return thread count so half that for core count\n+                (rayon::current_num_threads() / 2) as usize\n             },\n+            Some(&threads) => threads,\n             // no -j passed, use a single thread\n             None => 1,\n         };\n \n         let lint_filter: Vec<String> = clap_config\n-            .values_of(\"filter\")\n+            .get_many::<String>(\"filter\")\n             .map(|iter| {\n                 iter.map(|lint_name| {\n                     let mut filter = lint_name.replace('_', \"-\");\n@@ -131,8 +115,8 @@ impl LintcheckConfig {\n             max_jobs,\n             sources_toml_path,\n             lintcheck_results_path,\n-            only: clap_config.value_of(\"only\").map(String::from),\n-            fix: clap_config.is_present(\"fix\"),\n+            only: clap_config.get_one::<String>(\"only\").map(String::from),\n+            fix: clap_config.contains_id(\"fix\"),\n             lint_filter,\n             markdown,\n         }"}, {"sha": "6ad56aacf8c955b67c3d672c4ba17c98f08aeed9", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-04\"\n+channel = \"nightly-2022-06-16\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "fffc53603424ba831f52c94c14be81ed01af4b00", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -21,7 +21,7 @@ fn dogfood_clippy() {\n \n     // \"\" is the root package\n     for package in &[\"\", \"clippy_dev\", \"clippy_lints\", \"clippy_utils\", \"rustc_tools_util\"] {\n-        run_clippy_for_package(package, &[]);\n+        run_clippy_for_package(package, &[\"-D\", \"clippy::all\", \"-D\", \"clippy::pedantic\"]);\n     }\n }\n \n@@ -77,8 +77,6 @@ fn run_clippy_for_package(project: &str, args: &[&str]) {\n         .arg(\"--all-features\")\n         .arg(\"--\")\n         .args(args)\n-        .args(&[\"-D\", \"clippy::all\"])\n-        .args(&[\"-D\", \"clippy::pedantic\"])\n         .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n \n     if cfg!(feature = \"internal\") {"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/bad_toml/conf_bad_toml.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,3 +1 @@\n-// error-pattern: error reading Clippy's configuration file\n-\n fn main() {}"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/bad_toml_type/conf_bad_type.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,4 +1 @@\n-// error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a\n-// `Vec < String >` but is a `integer`\n-\n fn main() {}"}, {"sha": "fb2395cf90be357c69b22d4749f4b6a113ab4af4", "filename": "tests/ui-toml/blacklisted_names_append/blacklisted_names.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,10 @@\n+#[warn(clippy::blacklisted_name)]\n+\n+fn main() {\n+    // `foo` is part of the default configuration\n+    let foo = \"bar\";\n+    // `ducks` was unrightfully blacklisted\n+    let ducks = [\"quack\", \"quack\"];\n+    // `fox` is okay\n+    let fox = [\"what\", \"does\", \"the\", \"fox\", \"say\", \"?\"];\n+}"}, {"sha": "9169bb0e866ac2c47cb5698b1dc3ffe02908ab9b", "filename": "tests/ui-toml/blacklisted_names_append/blacklisted_names.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,16 @@\n+error: use of a blacklisted/placeholder name `foo`\n+  --> $DIR/blacklisted_names.rs:5:9\n+   |\n+LL |     let foo = \"bar\";\n+   |         ^^^\n+   |\n+   = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n+\n+error: use of a blacklisted/placeholder name `ducks`\n+  --> $DIR/blacklisted_names.rs:7:9\n+   |\n+LL |     let ducks = [\"quack\", \"quack\"];\n+   |         ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0e052ef50f07bfe5d42a783614f2209c5219255b", "filename": "tests/ui-toml/blacklisted_names_append/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_append%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_append%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_append%2Fclippy.toml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1 @@\n+blacklisted-names = [\"ducks\", \"..\"]"}, {"sha": "fb2395cf90be357c69b22d4749f4b6a113ab4af4", "filename": "tests/ui-toml/blacklisted_names_replace/blacklisted_names.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,10 @@\n+#[warn(clippy::blacklisted_name)]\n+\n+fn main() {\n+    // `foo` is part of the default configuration\n+    let foo = \"bar\";\n+    // `ducks` was unrightfully blacklisted\n+    let ducks = [\"quack\", \"quack\"];\n+    // `fox` is okay\n+    let fox = [\"what\", \"does\", \"the\", \"fox\", \"say\", \"?\"];\n+}"}, {"sha": "ec6f7f084f2a55336408fe0ddeadb30597c5e39b", "filename": "tests/ui-toml/blacklisted_names_replace/blacklisted_names.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,10 @@\n+error: use of a blacklisted/placeholder name `ducks`\n+  --> $DIR/blacklisted_names.rs:7:9\n+   |\n+LL |     let ducks = [\"quack\", \"quack\"];\n+   |         ^^^^^\n+   |\n+   = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4582f1c06674c1aa4d57709363841698ea581aad", "filename": "tests/ui-toml/blacklisted_names_replace/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_replace%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fblacklisted_names_replace%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_replace%2Fclippy.toml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1 @@\n+blacklisted-names = [\"ducks\"]"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,4 +1 @@\n-// error-pattern: error reading Clippy's configuration file: found deprecated field\n-// `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead.\n-\n fn main() {}"}, {"sha": "daf3276854bdb15793944476a877e1c26ed4a660", "filename": "tests/ui-toml/doc_valid_idents_append/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fclippy.toml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1 @@\n+doc-valid-idents = [\"ClipPy\", \"..\"]"}, {"sha": "327a592e9cadcada46ccad7d4eab24224314905b", "filename": "tests/ui-toml/doc_valid_idents_append/doc_markdown.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fdoc_markdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fdoc_markdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fdoc_markdown.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,12 @@\n+#![warn(clippy::doc_markdown)]\n+\n+/// This is a special interface for ClipPy which doesn't require backticks\n+fn allowed_name() {}\n+\n+/// OAuth and LaTeX are inside Clippy's default list.\n+fn default_name() {}\n+\n+/// TestItemThingyOfCoolness might sound cool but is not on the list and should be linted.\n+fn unknown_name() {}\n+\n+fn main() {}"}, {"sha": "0f767c9b8559f712b87b59a2d773d59b966cc997", "filename": "tests/ui-toml/doc_valid_idents_append/doc_markdown.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fdoc_markdown.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fdoc_markdown.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdoc_valid_idents_append%2Fdoc_markdown.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,14 @@\n+error: item in documentation is missing backticks\n+  --> $DIR/doc_markdown.rs:9:5\n+   |\n+LL | /// TestItemThingyOfCoolness might sound cool but is not on the list and should be linted.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n+help: try\n+   |\n+LL | /// `TestItemThingyOfCoolness` might sound cool but is not on the list and should be linted.\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "70bc477b08c6a2deb54e6d638fba8bf5a5e5ee41", "filename": "tests/ui-toml/doc_valid_idents_replace/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fclippy.toml?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1 @@\n+doc-valid-idents = [\"ClipPy\"]"}, {"sha": "327a592e9cadcada46ccad7d4eab24224314905b", "filename": "tests/ui-toml/doc_valid_idents_replace/doc_markdown.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fdoc_markdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fdoc_markdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fdoc_markdown.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,12 @@\n+#![warn(clippy::doc_markdown)]\n+\n+/// This is a special interface for ClipPy which doesn't require backticks\n+fn allowed_name() {}\n+\n+/// OAuth and LaTeX are inside Clippy's default list.\n+fn default_name() {}\n+\n+/// TestItemThingyOfCoolness might sound cool but is not on the list and should be linted.\n+fn unknown_name() {}\n+\n+fn main() {}"}, {"sha": "e0613eb863b3996130d9e662980b2b4077b22bfe", "filename": "tests/ui-toml/doc_valid_idents_replace/doc_markdown.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fdoc_markdown.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fdoc_markdown.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdoc_valid_idents_replace%2Fdoc_markdown.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,36 @@\n+error: item in documentation is missing backticks\n+  --> $DIR/doc_markdown.rs:6:5\n+   |\n+LL | /// OAuth and LaTeX are inside Clippy's default list.\n+   |     ^^^^^\n+   |\n+   = note: `-D clippy::doc-markdown` implied by `-D warnings`\n+help: try\n+   |\n+LL | /// `OAuth` and LaTeX are inside Clippy's default list.\n+   |     ~~~~~~~\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc_markdown.rs:6:15\n+   |\n+LL | /// OAuth and LaTeX are inside Clippy's default list.\n+   |               ^^^^^\n+   |\n+help: try\n+   |\n+LL | /// OAuth and `LaTeX` are inside Clippy's default list.\n+   |               ~~~~~~~\n+\n+error: item in documentation is missing backticks\n+  --> $DIR/doc_markdown.rs:9:5\n+   |\n+LL | /// TestItemThingyOfCoolness might sound cool but is not on the list and should be linted.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL | /// `TestItemThingyOfCoolness` might sound cool but is not on the list and should be linted.\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/good_toml_no_false_negatives/conf_no_false_negatives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fconf_no_false_negatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fconf_no_false_negatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fgood_toml_no_false_negatives%2Fconf_no_false_negatives.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,3 +1 @@\n-// error-pattern: should give absolutely no error\n-\n fn main() {}"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,3 +1 @@\n-// error-pattern: error reading Clippy's configuration file: unknown key `foobar`\n-\n fn main() {}"}, {"sha": "e69b40f35f4c6baf0cc841a6ed9c543fed5694b2", "filename": "tests/ui/almost_complete_letter_range.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Falmost_complete_letter_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Falmost_complete_letter_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -6,6 +6,7 @@\n #![feature(stmt_expr_attributes)]\n #![warn(clippy::almost_complete_letter_range)]\n #![allow(ellipsis_inclusive_range_patterns)]\n+#![allow(clippy::needless_parens_on_range_literals)]\n \n macro_rules! a {\n     () => {"}, {"sha": "f2240981d45fa34baf23694176a80c73e1d06835", "filename": "tests/ui/almost_complete_letter_range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Falmost_complete_letter_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Falmost_complete_letter_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -6,6 +6,7 @@\n #![feature(stmt_expr_attributes)]\n #![warn(clippy::almost_complete_letter_range)]\n #![allow(ellipsis_inclusive_range_patterns)]\n+#![allow(clippy::needless_parens_on_range_literals)]\n \n macro_rules! a {\n     () => {"}, {"sha": "5b5dc40ee54d0ab6da23e65905ffb5865a5f2b34", "filename": "tests/ui/almost_complete_letter_range.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Falmost_complete_letter_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Falmost_complete_letter_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falmost_complete_letter_range.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,5 @@\n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:19:17\n+  --> $DIR/almost_complete_letter_range.rs:20:17\n    |\n LL |         let _ = ('a') ..'z';\n    |                 ^^^^^^--^^^\n@@ -9,87 +9,87 @@ LL |         let _ = ('a') ..'z';\n    = note: `-D clippy::almost-complete-letter-range` implied by `-D warnings`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:20:17\n+  --> $DIR/almost_complete_letter_range.rs:21:17\n    |\n LL |         let _ = 'A' .. ('Z');\n    |                 ^^^^--^^^^^^\n    |                     |\n    |                     help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:26:13\n+  --> $DIR/almost_complete_letter_range.rs:27:13\n    |\n LL |     let _ = (b'a')..(b'z');\n    |             ^^^^^^--^^^^^^\n    |                   |\n    |                   help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:27:13\n+  --> $DIR/almost_complete_letter_range.rs:28:13\n    |\n LL |     let _ = b'A'..b'Z';\n    |             ^^^^--^^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:32:13\n+  --> $DIR/almost_complete_letter_range.rs:33:13\n    |\n LL |     let _ = a!()..'z';\n    |             ^^^^--^^^\n    |                 |\n    |                 help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:35:9\n+  --> $DIR/almost_complete_letter_range.rs:36:9\n    |\n LL |         b'a'..b'z' if true => 1,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:36:9\n+  --> $DIR/almost_complete_letter_range.rs:37:9\n    |\n LL |         b'A'..b'Z' if true => 2,\n    |         ^^^^--^^^^\n    |             |\n    |             help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:43:9\n+  --> $DIR/almost_complete_letter_range.rs:44:9\n    |\n LL |         'a'..'z' if true => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:44:9\n+  --> $DIR/almost_complete_letter_range.rs:45:9\n    |\n LL |         'A'..'Z' if true => 2,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:54:9\n+  --> $DIR/almost_complete_letter_range.rs:55:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^\n    |            |\n    |            help: use an inclusive range: `...`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:61:13\n+  --> $DIR/almost_complete_letter_range.rs:62:13\n    |\n LL |     let _ = 'a'..'z';\n    |             ^^^--^^^\n    |                |\n    |                help: use an inclusive range: `..=`\n \n error: almost complete ascii letter range\n-  --> $DIR/almost_complete_letter_range.rs:63:9\n+  --> $DIR/almost_complete_letter_range.rs:64:9\n    |\n LL |         'a'..'z' => 1,\n    |         ^^^--^^^"}, {"sha": "3cf380d2b954b0b5f4eb1efa22a54d231dac88df", "filename": "tests/ui/async_yields_async.fixed", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fasync_yields_async.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fasync_yields_async.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n \n@@ -65,3 +65,14 @@ fn main() {\n     let _n = async || custom_future_type_ctor();\n     let _o = async || f();\n }\n+\n+#[rustfmt::skip]\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    #[expect(clippy::async_yields_async)]\n+    let _j = async || {\n+        async {\n+            3\n+        }\n+    };\n+}"}, {"sha": "dd4131b60ab3ae6b697d5257601fd2630edbb30e", "filename": "tests/ui/async_yields_async.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![feature(lint_reasons)]\n #![feature(async_closure)]\n #![warn(clippy::async_yields_async)]\n \n@@ -65,3 +65,14 @@ fn main() {\n     let _n = async || custom_future_type_ctor();\n     let _o = async || f();\n }\n+\n+#[rustfmt::skip]\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    #[expect(clippy::async_yields_async)]\n+    let _j = async || {\n+        async {\n+            3\n+        }\n+    };\n+}"}, {"sha": "064482009517a600b68be2592ac5de70e0161c8a", "filename": "tests/ui/branches_sharing_code/false_positives.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Ffalse_positives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Ffalse_positives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Ffalse_positives.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -25,4 +25,17 @@ impl FooBar {\n     fn baz(&mut self) {}\n }\n \n-fn main() {}\n+fn foo(x: u32, y: u32) -> u32 {\n+    x / y\n+}\n+\n+fn main() {\n+    let x = (1, 2);\n+    let _ = if true {\n+        let (x, y) = x;\n+        foo(x, y)\n+    } else {\n+        let (y, x) = x;\n+        foo(x, y)\n+    };\n+}"}, {"sha": "5e1a68d216ea8bf22fb2ba9a17d0bf90bf1982f2", "filename": "tests/ui/branches_sharing_code/shared_at_bottom.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -12,8 +12,8 @@ note: the lint level is defined here\n    |\n LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n-help: consider moving the end statements out like this\n+   = note: the end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     let result = false;\n@@ -28,7 +28,7 @@ LL | /         println!(\"Same end of block\");\n LL | |     }\n    | |_____^\n    |\n-help: consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     println!(\"Same end of block\");\n@@ -44,7 +44,7 @@ LL | |         );\n LL | |     }\n    | |_____^\n    |\n-help: consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     println!(\n@@ -60,7 +60,7 @@ LL | /             println!(\"Hello World\");\n LL | |         }\n    | |_________^\n    |\n-help: consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~         }\n LL +         println!(\"Hello World\");\n@@ -75,8 +75,8 @@ LL | |         // I'm expecting a note about this\n LL | |     }\n    | |_____^\n    |\n-   = warning: Some moved values might need to be renamed to avoid wrong references\n-help: consider moving the end statements out like this\n+   = warning: some moved values might need to be renamed to avoid wrong references\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     let later_used_value = \"A string value\";\n@@ -91,8 +91,8 @@ LL | |         println!(\"This is the new simple_example: {}\", simple_examples);\n LL | |     }\n    | |_____^\n    |\n-   = warning: Some moved values might need to be renamed to avoid wrong references\n-help: consider moving the end statements out like this\n+   = warning: some moved values might need to be renamed to avoid wrong references\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     let simple_examples = \"I now identify as a &str :)\";\n@@ -106,8 +106,8 @@ LL | /         x << 2\n LL | |     };\n    | |_____^\n    |\n-   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n-help: consider moving the end statements out like this\n+   = note: the end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL ~     x << 2;\n@@ -120,8 +120,8 @@ LL | /         x * 4\n LL | |     }\n    | |_____^\n    |\n-   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n-help: consider moving the end statements out like this\n+   = note: the end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     x * 4\n@@ -133,7 +133,7 @@ error: all if blocks contain the same code at the end\n LL |     if x == 17 { b = 1; a = 0x99; } else { a = 0x99; }\n    |                                            ^^^^^^^^^^^\n    |\n-help: consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     if x == 17 { b = 1; a = 0x99; } else { }\n LL +     a = 0x99;"}, {"sha": "d890b12ecbb4c6d0b532ecb97e0254ce3bf1bebe", "filename": "tests/ui/branches_sharing_code/shared_at_top.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider moving the start statements out like this\n+help: consider moving these statements before the if\n    |\n LL ~     println!(\"Hello World!\");\n LL +     if true {\n@@ -25,8 +25,8 @@ LL | |         println!(\"The value y was set to: `{}`\", y);\n LL | |         let _z = y;\n    | |___________________^\n    |\n-   = warning: Some moved values might need to be renamed to avoid wrong references\n-help: consider moving the start statements out like this\n+   = warning: some moved values might need to be renamed to avoid wrong references\n+help: consider moving these statements before the if\n    |\n LL ~     let y = 9;\n LL +     println!(\"The value y was set to: `{}`\", y);\n@@ -41,7 +41,7 @@ LL | /     let _ = if x == 7 {\n LL | |         let y = 16;\n    | |___________________^\n    |\n-help: consider moving the start statements out like this\n+help: consider moving these statements before the if\n    |\n LL ~     let y = 16;\n LL +     let _ = if x == 7 {\n@@ -55,8 +55,8 @@ LL | |         let used_value_name = \"Different type\";\n LL | |         println!(\"Str: {}\", used_value_name);\n    | |_____________________________________________^\n    |\n-   = warning: Some moved values might need to be renamed to avoid wrong references\n-help: consider moving the start statements out like this\n+   = warning: some moved values might need to be renamed to avoid wrong references\n+help: consider moving these statements before the if\n    |\n LL ~     let used_value_name = \"Different type\";\n LL +     println!(\"Str: {}\", used_value_name);\n@@ -71,8 +71,8 @@ LL | |         let can_be_overridden = \"Move me\";\n LL | |         println!(\"I'm also moveable\");\n    | |______________________________________^\n    |\n-   = warning: Some moved values might need to be renamed to avoid wrong references\n-help: consider moving the start statements out like this\n+   = warning: some moved values might need to be renamed to avoid wrong references\n+help: consider moving these statements before the if\n    |\n LL ~     let can_be_overridden = \"Move me\";\n LL +     println!(\"I'm also moveable\");\n@@ -87,7 +87,7 @@ LL | |         println!(\"This should trigger the `SHARED_CODE_IN_IF_BLOCKS` lint\n LL | |         println!(\"Because `IF_SAME_THEN_ELSE` is allowed here\");\n    | |________________________________________________________________^\n    |\n-help: consider moving the start statements out like this\n+help: consider moving these statements before the if\n    |\n LL ~     println!(\"This should trigger the `SHARED_CODE_IN_IF_BLOCKS` lint.\");\n LL +     println!(\"Because `IF_SAME_THEN_ELSE` is allowed here\");"}, {"sha": "11843cc03d8d119bac71a277a5a9507dde193777", "filename": "tests/ui/branches_sharing_code/shared_at_top_and_bottom.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,4 +1,4 @@\n-error: all if blocks contain the same code at the start and the end. Here at the start\n+error: all if blocks contain the same code at both the start and the end\n   --> $DIR/shared_at_top_and_bottom.rs:16:5\n    |\n LL | /     if x == 7 {\n@@ -12,26 +12,26 @@ note: the lint level is defined here\n    |\n LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: and here at the end\n+note: this code is shared at the end\n   --> $DIR/shared_at_top_and_bottom.rs:28:5\n    |\n LL | /         let _u = 9;\n LL | |     }\n    | |_____^\n-help: consider moving the start statements out like this\n+help: consider moving these statements before the if\n    |\n LL ~     let t = 7;\n LL +     let _overlap_start = t * 2;\n LL +     let _overlap_end = 2 * t;\n LL +     if x == 7 {\n    |\n-help: and consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     let _u = 9;\n    |\n \n-error: all if blocks contain the same code at the start and the end. Here at the start\n+error: all if blocks contain the same code at both the start and the end\n   --> $DIR/shared_at_top_and_bottom.rs:32:5\n    |\n LL | /     if x == 99 {\n@@ -40,29 +40,29 @@ LL | |         let _overlap_start = r;\n LL | |         let _overlap_middle = r * r;\n    | |____________________________________^\n    |\n-note: and here at the end\n+note: this code is shared at the end\n   --> $DIR/shared_at_top_and_bottom.rs:43:5\n    |\n LL | /         let _overlap_end = r * r * r;\n LL | |         let z = \"end\";\n LL | |     }\n    | |_____^\n-   = warning: Some moved values might need to be renamed to avoid wrong references\n-help: consider moving the start statements out like this\n+   = warning: some moved values might need to be renamed to avoid wrong references\n+help: consider moving these statements before the if\n    |\n LL ~     let r = 7;\n LL +     let _overlap_start = r;\n LL +     let _overlap_middle = r * r;\n LL +     if x == 99 {\n    |\n-help: and consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     let _overlap_end = r * r * r;\n LL +     let z = \"end\";\n    |\n \n-error: all if blocks contain the same code at the start and the end. Here at the start\n+error: all if blocks contain the same code at both the start and the end\n   --> $DIR/shared_at_top_and_bottom.rs:61:5\n    |\n LL | /     if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n@@ -71,7 +71,7 @@ LL | |         let b = 0xffff00ff;\n LL | |         let e_id = gen_id(a, b);\n    | |________________________________^\n    |\n-note: and here at the end\n+note: this code is shared at the end\n   --> $DIR/shared_at_top_and_bottom.rs:81:5\n    |\n LL | /         let pack = DataPack {\n@@ -82,15 +82,15 @@ LL | |         };\n LL | |         process_data(pack);\n LL | |     }\n    | |_____^\n-   = warning: Some moved values might need to be renamed to avoid wrong references\n-help: consider moving the start statements out like this\n+   = warning: some moved values might need to be renamed to avoid wrong references\n+help: consider moving these statements before the if\n    |\n LL ~     let a = 0xcafe;\n LL +     let b = 0xffff00ff;\n LL +     let e_id = gen_id(a, b);\n LL +     if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n    |\n-help: and consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     let pack = DataPack {\n@@ -100,51 +100,51 @@ LL +         some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n LL +     };\n  ...\n \n-error: all if blocks contain the same code at the start and the end. Here at the start\n+error: all if blocks contain the same code at both the start and the end\n   --> $DIR/shared_at_top_and_bottom.rs:94:5\n    |\n LL | /     let _ = if x == 7 {\n LL | |         let _ = 19;\n    | |___________________^\n    |\n-note: and here at the end\n+note: this code is shared at the end\n   --> $DIR/shared_at_top_and_bottom.rs:103:5\n    |\n LL | /         x << 2\n LL | |     };\n    | |_____^\n-   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n-help: consider moving the start statements out like this\n+   = note: the end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving these statements before the if\n    |\n LL ~     let _ = 19;\n LL +     let _ = if x == 7 {\n    |\n-help: and consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL ~     x << 2;\n    |\n \n-error: all if blocks contain the same code at the start and the end. Here at the start\n+error: all if blocks contain the same code at both the start and the end\n   --> $DIR/shared_at_top_and_bottom.rs:106:5\n    |\n LL | /     if x == 9 {\n LL | |         let _ = 17;\n    | |___________________^\n    |\n-note: and here at the end\n+note: this code is shared at the end\n   --> $DIR/shared_at_top_and_bottom.rs:115:5\n    |\n LL | /         x * 4\n LL | |     }\n    | |_____^\n-   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n-help: consider moving the start statements out like this\n+   = note: the end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving these statements before the if\n    |\n LL ~     let _ = 17;\n LL +     if x == 9 {\n    |\n-help: and consider moving the end statements out like this\n+help: consider moving these statements after the if\n    |\n LL ~     }\n LL +     x * 4"}, {"sha": "cb7100bc9efae463047f00fe353fb1bce319b8b2", "filename": "tests/ui/checked_conversions.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fchecked_conversions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fchecked_conversions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -71,4 +71,9 @@ pub fn i8_to_u8(value: i8) {\n     let _ = value >= 0;\n }\n \n+// Do not lint\n+pub const fn issue_8898(i: u32) -> bool {\n+    i <= i32::MAX as u32\n+}\n+\n fn main() {}"}, {"sha": "ed4e0692388a55a4ad65dee76bf2649af70db3b2", "filename": "tests/ui/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -71,4 +71,9 @@ pub fn i8_to_u8(value: i8) {\n     let _ = value >= 0;\n }\n \n+// Do not lint\n+pub const fn issue_8898(i: u32) -> bool {\n+    i <= i32::MAX as u32\n+}\n+\n fn main() {}"}, {"sha": "55451cf2f7d0fa972bc40a7d48d8709952bdae6e", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n+#![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n     unused,\n@@ -173,4 +174,9 @@ mod in_macro {\n     }\n }\n \n+fn check_expect_suppression() {\n+    #[expect(clippy::default_numeric_fallback)]\n+    let x = 21;\n+}\n+\n fn main() {}"}, {"sha": "62d72f2febaaa4fc75c7d80a707fa9e75f475588", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n // aux-build:macro_rules.rs\n \n+#![feature(lint_reasons)]\n #![warn(clippy::default_numeric_fallback)]\n #![allow(\n     unused,\n@@ -173,4 +174,9 @@ mod in_macro {\n     }\n }\n \n+fn check_expect_suppression() {\n+    #[expect(clippy::default_numeric_fallback)]\n+    let x = 21;\n+}\n+\n fn main() {}"}, {"sha": "f7c5e724c403cdc4a85658800e89e377b106c62e", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,151 +1,151 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:20:17\n+  --> $DIR/default_numeric_fallback_i32.rs:21:17\n    |\n LL |         let x = 22;\n    |                 ^^ help: consider adding suffix: `22_i32`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:18\n+  --> $DIR/default_numeric_fallback_i32.rs:22:18\n    |\n LL |         let x = [1, 2, 3];\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:21\n+  --> $DIR/default_numeric_fallback_i32.rs:22:21\n    |\n LL |         let x = [1, 2, 3];\n    |                     ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:21:24\n+  --> $DIR/default_numeric_fallback_i32.rs:22:24\n    |\n LL |         let x = [1, 2, 3];\n    |                        ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:28\n+  --> $DIR/default_numeric_fallback_i32.rs:23:28\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:31\n+  --> $DIR/default_numeric_fallback_i32.rs:23:31\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                               ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:44\n+  --> $DIR/default_numeric_fallback_i32.rs:23:44\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                            ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:22:47\n+  --> $DIR/default_numeric_fallback_i32.rs:23:47\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                               ^ help: consider adding suffix: `4_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:23:23\n+  --> $DIR/default_numeric_fallback_i32.rs:24:23\n    |\n LL |         let x = match 1 {\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:24:13\n+  --> $DIR/default_numeric_fallback_i32.rs:25:13\n    |\n LL |             1 => 1,\n    |             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:24:18\n+  --> $DIR/default_numeric_fallback_i32.rs:25:18\n    |\n LL |             1 => 1,\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:25:18\n+  --> $DIR/default_numeric_fallback_i32.rs:26:18\n    |\n LL |             _ => 2,\n    |                  ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:42:21\n+  --> $DIR/default_numeric_fallback_i32.rs:43:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:50:21\n+  --> $DIR/default_numeric_fallback_i32.rs:51:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:56:21\n+  --> $DIR/default_numeric_fallback_i32.rs:57:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:68:9\n+  --> $DIR/default_numeric_fallback_i32.rs:69:9\n    |\n LL |         1\n    |         ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:74:27\n+  --> $DIR/default_numeric_fallback_i32.rs:75:27\n    |\n LL |         let f = || -> _ { 1 };\n    |                           ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:78:29\n+  --> $DIR/default_numeric_fallback_i32.rs:79:29\n    |\n LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:92:21\n+  --> $DIR/default_numeric_fallback_i32.rs:93:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:95:32\n+  --> $DIR/default_numeric_fallback_i32.rs:96:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:113:28\n+  --> $DIR/default_numeric_fallback_i32.rs:114:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:116:36\n+  --> $DIR/default_numeric_fallback_i32.rs:117:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:134:24\n+  --> $DIR/default_numeric_fallback_i32.rs:135:24\n    |\n LL |         GenericEnum::X(1);\n    |                        ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:154:23\n+  --> $DIR/default_numeric_fallback_i32.rs:155:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback_i32.rs:161:21\n+  --> $DIR/default_numeric_fallback_i32.rs:162:21\n    |\n LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`"}, {"sha": "bbbe467590f91ae9f5530c87fe734761ab5599ad", "filename": "tests/ui/derive_partial_eq_without_eq.fixed", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -4,28 +4,28 @@\n #![warn(clippy::derive_partial_eq_without_eq)]\n \n // Don't warn on structs that aren't PartialEq\n-struct NotPartialEq {\n+pub struct NotPartialEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq can be derived but is missing\n #[derive(Debug, PartialEq, Eq)]\n-struct MissingEq {\n+pub struct MissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is derived\n #[derive(PartialEq, Eq)]\n-struct NotMissingEq {\n+pub struct NotMissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is manually implemented\n #[derive(PartialEq)]\n-struct ManualEqImpl {\n+pub struct ManualEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -34,13 +34,13 @@ impl Eq for ManualEqImpl {}\n \n // Cannot be Eq because f32 isn't Eq\n #[derive(PartialEq)]\n-struct CannotBeEq {\n+pub struct CannotBeEq {\n     foo: u32,\n     bar: f32,\n }\n \n // Don't warn if PartialEq is manually implemented\n-struct ManualPartialEqImpl {\n+pub struct ManualPartialEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -52,53 +52,75 @@ impl PartialEq for ManualPartialEqImpl {\n }\n \n // Generic fields should be properly checked for Eq-ness\n-#[derive(PartialEq)]\n-struct GenericNotEq<T: Eq, U: PartialEq> {\n+#[derive(PartialEq, Eq)]\n+pub struct GenericNotEq<T: Eq, U: PartialEq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq, Eq)]\n-struct GenericEq<T: Eq, U: Eq> {\n+pub struct GenericEq<T: Eq, U: Eq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq, Eq)]\n-struct TupleStruct(u32);\n+pub struct TupleStruct(u32);\n \n #[derive(PartialEq, Eq)]\n-struct GenericTupleStruct<T: Eq>(T);\n+pub struct GenericTupleStruct<T: Eq>(T);\n \n #[derive(PartialEq)]\n-struct TupleStructNotEq(f32);\n+pub struct TupleStructNotEq(f32);\n \n #[derive(PartialEq, Eq)]\n-enum Enum {\n+pub enum Enum {\n     Foo(u32),\n     Bar { a: String, b: () },\n }\n \n #[derive(PartialEq, Eq)]\n-enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+pub enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n     Foo(T),\n     Bar { a: U, b: V },\n }\n \n #[derive(PartialEq)]\n-enum EnumNotEq {\n+pub enum EnumNotEq {\n     Foo(u32),\n     Bar { a: String, b: f32 },\n }\n \n // Ensure that rustfix works properly when `PartialEq` has other derives on either side\n #[derive(Debug, PartialEq, Eq, Clone)]\n-struct RustFixWithOtherDerives;\n+pub struct RustFixWithOtherDerives;\n \n-#[derive(PartialEq)]\n-struct Generic<T>(T);\n+#[derive(PartialEq, Eq)]\n+pub struct Generic<T>(T);\n \n #[derive(PartialEq, Eq)]\n-struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+pub struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n+mod _hidden {\n+    #[derive(PartialEq, Eq)]\n+    pub struct Reexported;\n+\n+    #[derive(PartialEq, Eq)]\n+    pub struct InPubFn;\n+\n+    #[derive(PartialEq)]\n+    pub(crate) struct PubCrate;\n+\n+    #[derive(PartialEq)]\n+    pub(super) struct PubSuper;\n+}\n+\n+pub use _hidden::Reexported;\n+pub fn _from_mod() -> _hidden::InPubFn {\n+    _hidden::InPubFn\n+}\n+\n+#[derive(PartialEq)]\n+struct InternalTy;\n \n fn main() {}"}, {"sha": "88d6fbd1af7e8bf3ca35f614e1022dcdaca00be2", "filename": "tests/ui/derive_partial_eq_without_eq.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -4,28 +4,28 @@\n #![warn(clippy::derive_partial_eq_without_eq)]\n \n // Don't warn on structs that aren't PartialEq\n-struct NotPartialEq {\n+pub struct NotPartialEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq can be derived but is missing\n #[derive(Debug, PartialEq)]\n-struct MissingEq {\n+pub struct MissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is derived\n #[derive(PartialEq, Eq)]\n-struct NotMissingEq {\n+pub struct NotMissingEq {\n     foo: u32,\n     bar: String,\n }\n \n // Eq is manually implemented\n #[derive(PartialEq)]\n-struct ManualEqImpl {\n+pub struct ManualEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -34,13 +34,13 @@ impl Eq for ManualEqImpl {}\n \n // Cannot be Eq because f32 isn't Eq\n #[derive(PartialEq)]\n-struct CannotBeEq {\n+pub struct CannotBeEq {\n     foo: u32,\n     bar: f32,\n }\n \n // Don't warn if PartialEq is manually implemented\n-struct ManualPartialEqImpl {\n+pub struct ManualPartialEqImpl {\n     foo: u32,\n     bar: String,\n }\n@@ -53,52 +53,74 @@ impl PartialEq for ManualPartialEqImpl {\n \n // Generic fields should be properly checked for Eq-ness\n #[derive(PartialEq)]\n-struct GenericNotEq<T: Eq, U: PartialEq> {\n+pub struct GenericNotEq<T: Eq, U: PartialEq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq)]\n-struct GenericEq<T: Eq, U: Eq> {\n+pub struct GenericEq<T: Eq, U: Eq> {\n     foo: T,\n     bar: U,\n }\n \n #[derive(PartialEq)]\n-struct TupleStruct(u32);\n+pub struct TupleStruct(u32);\n \n #[derive(PartialEq)]\n-struct GenericTupleStruct<T: Eq>(T);\n+pub struct GenericTupleStruct<T: Eq>(T);\n \n #[derive(PartialEq)]\n-struct TupleStructNotEq(f32);\n+pub struct TupleStructNotEq(f32);\n \n #[derive(PartialEq)]\n-enum Enum {\n+pub enum Enum {\n     Foo(u32),\n     Bar { a: String, b: () },\n }\n \n #[derive(PartialEq)]\n-enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+pub enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n     Foo(T),\n     Bar { a: U, b: V },\n }\n \n #[derive(PartialEq)]\n-enum EnumNotEq {\n+pub enum EnumNotEq {\n     Foo(u32),\n     Bar { a: String, b: f32 },\n }\n \n // Ensure that rustfix works properly when `PartialEq` has other derives on either side\n #[derive(Debug, PartialEq, Clone)]\n-struct RustFixWithOtherDerives;\n+pub struct RustFixWithOtherDerives;\n \n #[derive(PartialEq)]\n-struct Generic<T>(T);\n+pub struct Generic<T>(T);\n \n #[derive(PartialEq, Eq)]\n-struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+pub struct GenericPhantom<T>(core::marker::PhantomData<T>);\n+\n+mod _hidden {\n+    #[derive(PartialEq)]\n+    pub struct Reexported;\n+\n+    #[derive(PartialEq)]\n+    pub struct InPubFn;\n+\n+    #[derive(PartialEq)]\n+    pub(crate) struct PubCrate;\n+\n+    #[derive(PartialEq)]\n+    pub(super) struct PubSuper;\n+}\n+\n+pub use _hidden::Reexported;\n+pub fn _from_mod() -> _hidden::InPubFn {\n+    _hidden::InPubFn\n+}\n+\n+#[derive(PartialEq)]\n+struct InternalTy;\n \n fn main() {}"}, {"sha": "794c5dab8445bb1f11a91f5cdd6f0d4f56fc5237", "filename": "tests/ui/derive_partial_eq_without_eq.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fderive_partial_eq_without_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fderive_partial_eq_without_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -6,6 +6,12 @@ LL | #[derive(Debug, PartialEq)]\n    |\n    = note: `-D clippy::derive-partial-eq-without-eq` implied by `-D warnings`\n \n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:55:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n error: you are deriving `PartialEq` and can implement `Eq`\n   --> $DIR/derive_partial_eq_without_eq.rs:61:10\n    |\n@@ -42,5 +48,23 @@ error: you are deriving `PartialEq` and can implement `Eq`\n LL | #[derive(Debug, PartialEq, Clone)]\n    |                 ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n \n-error: aborting due to 7 previous errors\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:98:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:105:14\n+   |\n+LL |     #[derive(PartialEq)]\n+   |              ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:108:14\n+   |\n+LL |     #[derive(PartialEq)]\n+   |              ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "f8d559bf226f18ce14d14c77df6072e7c95b4b45", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -291,3 +291,15 @@ fn coerced_closure() {\n     fn slice_fn(_: impl FnOnce() -> &'static [u8]) {}\n     slice_fn(|| arr());\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7861\n+fn box_dyn() {\n+    fn f(_: impl Fn(usize) -> Box<dyn std::any::Any>) {}\n+    f(|x| Box::new(x));\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/5939\n+fn not_general_enough() {\n+    fn f(_: impl FnMut(&Path) -> std::io::Result<()>) {}\n+    f(|path| std::fs::remove_file(path));\n+}"}, {"sha": "f0fb55a1e5f0618c9e2c6b28192887ec6bc15aa8", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -291,3 +291,15 @@ fn coerced_closure() {\n     fn slice_fn(_: impl FnOnce() -> &'static [u8]) {}\n     slice_fn(|| arr());\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7861\n+fn box_dyn() {\n+    fn f(_: impl Fn(usize) -> Box<dyn std::any::Any>) {}\n+    f(|x| Box::new(x));\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/5939\n+fn not_general_enough() {\n+    fn f(_: impl FnMut(&Path) -> std::io::Result<()>) {}\n+    f(|path| std::fs::remove_file(path));\n+}"}, {"sha": "3390111d0a8fe19e758914ab51f27ab31b81e407", "filename": "tests/ui/for_loops_over_fallibles.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -2,19 +2,34 @@\n \n fn for_loops_over_fallibles() {\n     let option = Some(1);\n-    let result = option.ok_or(\"x not found\");\n+    let mut result = option.ok_or(\"x not found\");\n     let v = vec![0, 1, 2];\n \n     // check over an `Option`\n     for x in option {\n         println!(\"{}\", x);\n     }\n \n+    // check over an `Option`\n+    for x in option.iter() {\n+        println!(\"{}\", x);\n+    }\n+\n     // check over a `Result`\n     for x in result {\n         println!(\"{}\", x);\n     }\n \n+    // check over a `Result`\n+    for x in result.iter_mut() {\n+        println!(\"{}\", x);\n+    }\n+\n+    // check over a `Result`\n+    for x in result.into_iter() {\n+        println!(\"{}\", x);\n+    }\n+\n     for x in option.ok_or(\"x not found\") {\n         println!(\"{}\", x);\n     }"}, {"sha": "8c8c022243aeb8c47b5826fb4ba0f9e922c902ee", "filename": "tests/ui/for_loops_over_fallibles.stderr", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -7,48 +7,72 @@ LL |     for x in option {\n    = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n \n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n+error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n   --> $DIR/for_loops_over_fallibles.rs:14:14\n    |\n+LL |     for x in option.iter() {\n+   |              ^^^^^^\n+   |\n+   = help: consider replacing `for x in option.iter()` with `if let Some(x) = option`\n+\n+error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loops_over_fallibles.rs:19:14\n+   |\n LL |     for x in result {\n    |              ^^^^^^\n    |\n    = help: consider replacing `for x in result` with `if let Ok(x) = result`\n \n+error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loops_over_fallibles.rs:24:14\n+   |\n+LL |     for x in result.iter_mut() {\n+   |              ^^^^^^\n+   |\n+   = help: consider replacing `for x in result.iter_mut()` with `if let Ok(x) = result`\n+\n+error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n+  --> $DIR/for_loops_over_fallibles.rs:29:14\n+   |\n+LL |     for x in result.into_iter() {\n+   |              ^^^^^^\n+   |\n+   = help: consider replacing `for x in result.into_iter()` with `if let Ok(x) = result`\n+\n error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:18:14\n+  --> $DIR/for_loops_over_fallibles.rs:33:14\n    |\n LL |     for x in option.ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loops_over_fallibles.rs:24:14\n+  --> $DIR/for_loops_over_fallibles.rs:39:14\n    |\n LL |     for x in v.iter().next() {\n    |              ^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::iter_next_loop)]` on by default\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:29:14\n+  --> $DIR/for_loops_over_fallibles.rs:44:14\n    |\n LL |     for x in v.iter().next().and(Some(0)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n \n error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:33:14\n+  --> $DIR/for_loops_over_fallibles.rs:48:14\n    |\n LL |     for x in v.iter().next().ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:45:5\n+  --> $DIR/for_loops_over_fallibles.rs:60:5\n    |\n LL | /     while let Some(x) = option {\n LL | |         println!(\"{}\", x);\n@@ -59,13 +83,13 @@ LL | |     }\n    = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:51:5\n+  --> $DIR/for_loops_over_fallibles.rs:66:5\n    |\n LL | /     while let Ok(x) = result {\n LL | |         println!(\"{}\", x);\n LL | |         break;\n LL | |     }\n    | |_____^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "c100705d017816737d872fec5c40f591e35eb313", "filename": "tests/ui/iter_overeager_cloned.fixed", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fiter_overeager_cloned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fiter_overeager_cloned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -18,7 +18,8 @@ fn main() {\n     let _ = vec.iter().filter(|x| x == &\"2\").nth(2).cloned();\n \n     let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n-        .iter().flatten().cloned();\n+        .iter()\n+        .flatten().cloned();\n \n     // Not implemented yet\n     let _ = vec.iter().cloned().filter(|x| x.starts_with('2'));\n@@ -43,6 +44,9 @@ fn main() {\n \n     // Should probably stay as it is.\n     let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+\n+    // `&Range<_>` doesn't implement `IntoIterator`\n+    let _ = [0..1, 2..5].iter().cloned().flatten();\n }\n \n // #8527"}, {"sha": "2caa88020662d6ab24802ad0ab119f0fe7b495a4", "filename": "tests/ui/iter_overeager_cloned.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -45,6 +45,9 @@ fn main() {\n \n     // Should probably stay as it is.\n     let _ = [0, 1, 2, 3, 4].iter().cloned().take(10);\n+\n+    // `&Range<_>` doesn't implement `IntoIterator`\n+    let _ = [0..1, 2..5].iter().cloned().flatten();\n }\n \n // #8527"}, {"sha": "dcae7cecd33e913e3b28274b471a494de1da182a", "filename": "tests/ui/iter_overeager_cloned.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fiter_overeager_cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fiter_overeager_cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_overeager_cloned.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,44 +1,56 @@\n-error: called `cloned().last()` on an `Iterator`. It may be more efficient to call `last().cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:8:29\n    |\n LL |     let _: Option<String> = vec.iter().cloned().last();\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().last().cloned()`\n+   |                             ^^^^^^^^^^----------------\n+   |                                       |\n+   |                                       help: try this: `.last().cloned()`\n    |\n    = note: `-D clippy::iter-overeager-cloned` implied by `-D warnings`\n \n-error: called `cloned().next()` on an `Iterator`. It may be more efficient to call `next().cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:10:29\n    |\n LL |     let _: Option<String> = vec.iter().chain(vec.iter()).cloned().next();\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().chain(vec.iter()).next().cloned()`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------\n+   |                                                         |\n+   |                                                         help: try this: `.next().cloned()`\n \n-error: called `cloned().count()` on an `Iterator`. It may be more efficient to call `count()` instead\n+error: unneeded cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:12:20\n    |\n LL |     let _: usize = vec.iter().filter(|x| x == &\"2\").cloned().count();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").count()`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------\n+   |                                                    |\n+   |                                                    help: try this: `.count()`\n    |\n    = note: `-D clippy::redundant-clone` implied by `-D warnings`\n \n-error: called `cloned().take(...)` on an `Iterator`. It may be more efficient to call `take(...).cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:14:21\n    |\n LL |     let _: Vec<_> = vec.iter().cloned().take(2).collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().take(2).cloned()`\n+   |                     ^^^^^^^^^^-----------------\n+   |                               |\n+   |                               help: try this: `.take(2).cloned()`\n \n-error: called `cloned().skip(...)` on an `Iterator`. It may be more efficient to call `skip(...).cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:16:21\n    |\n LL |     let _: Vec<_> = vec.iter().cloned().skip(2).collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().skip(2).cloned()`\n+   |                     ^^^^^^^^^^-----------------\n+   |                               |\n+   |                               help: try this: `.skip(2).cloned()`\n \n-error: called `cloned().nth(...)` on an `Iterator`. It may be more efficient to call `nth(...).cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:18:13\n    |\n LL |     let _ = vec.iter().filter(|x| x == &\"2\").cloned().nth(2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec.iter().filter(|x| x == &\"2\").nth(2).cloned()`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------\n+   |                                             |\n+   |                                             help: try this: `.nth(2).cloned()`\n \n-error: called `cloned().flatten()` on an `Iterator`. It may be more efficient to call `flatten().cloned()` instead\n+error: unnecessarily eager cloning of iterator items\n   --> $DIR/iter_overeager_cloned.rs:20:13\n    |\n LL |       let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n@@ -50,8 +62,8 @@ LL | |         .flatten();\n    |\n help: try this\n    |\n-LL ~     let _ = [Some(Some(\"str\".to_string())), Some(Some(\"str\".to_string()))]\n-LL ~         .iter().flatten().cloned();\n+LL ~         .iter()\n+LL ~         .flatten().cloned();\n    |\n \n error: aborting due to 7 previous errors"}, {"sha": "de0d86148899d4c7be1220c597291729cec6de4a", "filename": "tests/ui/manual_filter_map.fixed", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_filter_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_filter_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -35,3 +35,53 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.option_field.clone());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.ref_field.cloned());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.ref_field.copied());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.clone().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.as_ref().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.as_deref().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter_map(|f| f.result_field.as_mut().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter_map(|f| f.result_field.as_deref_mut().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .filter_map(|f| f.result_field.to_owned().ok());\n+}"}, {"sha": "bd6516f038b29f90e986931fea796df0c45d2ad1", "filename": "tests/ui/manual_filter_map.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -35,3 +35,62 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.option_field.is_some())\n+        .map(|f| f.option_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.cloned().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.copied().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_ref().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_mut().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref_mut().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .filter(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.to_owned().unwrap());\n+}"}, {"sha": "465f1b1911017bed9e51509b6a46cac40c3ee744", "filename": "tests/ui/manual_filter_map.stderr", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_filter_map.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -18,5 +18,77 @@ error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n LL |     let _ = (0..).filter(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `filter_map(|a| to_res(a).ok())`\n \n-error: aborting due to 3 previous errors\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:54:10\n+   |\n+LL |           .filter(|f| f.option_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.option_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `filter_map(|f| f.option_field.clone())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:59:10\n+   |\n+LL |           .filter(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.cloned().unwrap());\n+   | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.cloned())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:64:10\n+   |\n+LL |           .filter(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.copied().unwrap());\n+   | |_______________________________________________^ help: try: `filter_map(|f| f.ref_field.copied())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:69:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `filter_map(|f| f.result_field.clone().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:74:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_ref().unwrap());\n+   | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_ref().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:79:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref().unwrap());\n+   | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:84:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_mut().unwrap());\n+   | |__________________________________________________^ help: try: `filter_map(|f| f.result_field.as_mut().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:89:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n+   | |________________________________________________________^ help: try: `filter_map(|f| f.result_field.as_deref_mut().ok())`\n+\n+error: `filter(..).map(..)` can be simplified as `filter_map(..)`\n+  --> $DIR/manual_filter_map.rs:94:10\n+   |\n+LL |           .filter(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.to_owned().unwrap());\n+   | |____________________________________________________^ help: try: `filter_map(|f| f.result_field.to_owned().ok())`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "d69b6c1dcf3bb7b5ba84cac8d1e9fab1d0fef668", "filename": "tests/ui/manual_find_map.fixed", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_find_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_find_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -35,3 +35,53 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.option_field.clone());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.ref_field.cloned());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.ref_field.copied());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.clone().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.as_ref().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.as_deref().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find_map(|f| f.result_field.as_mut().ok());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find_map(|f| f.result_field.as_deref_mut().ok());\n+\n+    let _ = vec\n+        .iter()\n+        .find_map(|f| f.result_field.to_owned().ok());\n+}"}, {"sha": "1c4e18e31c8b1883fef79057675513ec717ff79a", "filename": "tests/ui/manual_find_map.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -35,3 +35,62 @@ fn to_opt<T>(_: T) -> Option<T> {\n fn to_res<T>(_: T) -> Result<T, ()> {\n     unimplemented!()\n }\n+\n+struct Issue8920<'a> {\n+    option_field: Option<String>,\n+    result_field: Result<String, ()>,\n+    ref_field: Option<&'a usize>,\n+}\n+\n+fn issue_8920() {\n+    let mut vec = vec![Issue8920 {\n+        option_field: Some(String::from(\"str\")),\n+        result_field: Ok(String::from(\"str\")),\n+        ref_field: Some(&1),\n+    }];\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.option_field.is_some())\n+        .map(|f| f.option_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.cloned().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.ref_field.is_some())\n+        .map(|f| f.ref_field.copied().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.clone().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_ref().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_mut().unwrap());\n+\n+    let _ = vec\n+        .iter_mut()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.as_deref_mut().unwrap());\n+\n+    let _ = vec\n+        .iter()\n+        .find(|f| f.result_field.is_ok())\n+        .map(|f| f.result_field.to_owned().unwrap());\n+}"}, {"sha": "9dea42b76868b7d838338d55767aeef8da541a5d", "filename": "tests/ui/manual_find_map.stderr", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_find_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_find_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_find_map.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -18,5 +18,77 @@ error: `find(..).map(..)` can be simplified as `find_map(..)`\n LL |     let _ = (0..).find(|&n| to_res(n).is_ok()).map(|a| to_res(a).unwrap_or(1));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `find_map(|a| to_res(a).ok())`\n \n-error: aborting due to 3 previous errors\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:54:10\n+   |\n+LL |           .find(|f| f.option_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.option_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `find_map(|f| f.option_field.clone())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:59:10\n+   |\n+LL |           .find(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.cloned().unwrap());\n+   | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.cloned())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:64:10\n+   |\n+LL |           .find(|f| f.ref_field.is_some())\n+   |  __________^\n+LL | |         .map(|f| f.ref_field.copied().unwrap());\n+   | |_______________________________________________^ help: try: `find_map(|f| f.ref_field.copied())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:69:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.clone().unwrap());\n+   | |_________________________________________________^ help: try: `find_map(|f| f.result_field.clone().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:74:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_ref().unwrap());\n+   | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_ref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:79:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref().unwrap());\n+   | |____________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:84:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_mut().unwrap());\n+   | |__________________________________________________^ help: try: `find_map(|f| f.result_field.as_mut().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:89:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.as_deref_mut().unwrap());\n+   | |________________________________________________________^ help: try: `find_map(|f| f.result_field.as_deref_mut().ok())`\n+\n+error: `find(..).map(..)` can be simplified as `find_map(..)`\n+  --> $DIR/manual_find_map.rs:94:10\n+   |\n+LL |           .find(|f| f.result_field.is_ok())\n+   |  __________^\n+LL | |         .map(|f| f.result_field.to_owned().unwrap());\n+   | |____________________________________________________^ help: try: `find_map(|f| f.result_field.to_owned().ok())`\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "a59da4ae10bceb6e4c2a7cf318970b856b19f72c", "filename": "tests/ui/manual_map_option.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -7,6 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n+    clippy::for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "0bdbefa51e8b4eedf65d1cf98a944ae7105d7442", "filename": "tests/ui/manual_map_option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -7,6 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n+    clippy::for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "cdc2c0e62a9b9434838946240bbbc1f44e3a7f5c", "filename": "tests/ui/manual_map_option.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_map_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fmanual_map_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,5 @@\n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:14:5\n+  --> $DIR/manual_map_option.rs:15:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(_) => Some(2),\n@@ -10,7 +10,7 @@ LL | |     };\n    = note: `-D clippy::manual-map` implied by `-D warnings`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:19:5\n+  --> $DIR/manual_map_option.rs:20:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => Some(x + 1),\n@@ -19,7 +19,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x + 1)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:24:5\n+  --> $DIR/manual_map_option.rs:25:5\n    |\n LL | /     match Some(\"\") {\n LL | |         Some(x) => Some(x.is_empty()),\n@@ -28,7 +28,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(\"\").map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:29:5\n+  --> $DIR/manual_map_option.rs:30:5\n    |\n LL | /     if let Some(x) = Some(0) {\n LL | |         Some(!x)\n@@ -38,7 +38,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| !x)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:36:5\n+  --> $DIR/manual_map_option.rs:37:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => { Some(std::convert::identity(x)) }\n@@ -47,7 +47,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(std::convert::identity)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:41:5\n+  --> $DIR/manual_map_option.rs:42:5\n    |\n LL | /     match Some(&String::new()) {\n LL | |         Some(x) => Some(str::len(x)),\n@@ -56,7 +56,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(&String::new()).map(|x| str::len(x))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:51:5\n+  --> $DIR/manual_map_option.rs:52:5\n    |\n LL | /     match &Some([0, 1]) {\n LL | |         Some(x) => Some(x[0]),\n@@ -65,7 +65,7 @@ LL | |     };\n    | |_____^ help: try this: `Some([0, 1]).as_ref().map(|x| x[0])`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:56:5\n+  --> $DIR/manual_map_option.rs:57:5\n    |\n LL | /     match &Some(0) {\n LL | |         &Some(x) => Some(x * 2),\n@@ -74,7 +74,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x * 2)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:61:5\n+  --> $DIR/manual_map_option.rs:62:5\n    |\n LL | /     match Some(String::new()) {\n LL | |         Some(ref x) => Some(x.is_empty()),\n@@ -83,7 +83,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:66:5\n+  --> $DIR/manual_map_option.rs:67:5\n    |\n LL | /     match &&Some(String::new()) {\n LL | |         Some(x) => Some(x.len()),\n@@ -92,7 +92,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.len())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:71:5\n+  --> $DIR/manual_map_option.rs:72:5\n    |\n LL | /     match &&Some(0) {\n LL | |         &&Some(x) => Some(x + x),\n@@ -101,7 +101,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x + x)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:84:9\n+  --> $DIR/manual_map_option.rs:85:9\n    |\n LL | /         match &mut Some(String::new()) {\n LL | |             Some(x) => Some(x.push_str(\"\")),\n@@ -110,7 +110,7 @@ LL | |         };\n    | |_________^ help: try this: `Some(String::new()).as_mut().map(|x| x.push_str(\"\"))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:90:5\n+  --> $DIR/manual_map_option.rs:91:5\n    |\n LL | /     match &mut Some(String::new()) {\n LL | |         Some(ref x) => Some(x.len()),\n@@ -119,7 +119,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.len())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:95:5\n+  --> $DIR/manual_map_option.rs:96:5\n    |\n LL | /     match &mut &Some(String::new()) {\n LL | |         Some(x) => Some(x.is_empty()),\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:100:5\n+  --> $DIR/manual_map_option.rs:101:5\n    |\n LL | /     match Some((0, 1, 2)) {\n LL | |         Some((x, y, z)) => Some(x + y + z),\n@@ -137,7 +137,7 @@ LL | |     };\n    | |_____^ help: try this: `Some((0, 1, 2)).map(|(x, y, z)| x + y + z)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:105:5\n+  --> $DIR/manual_map_option.rs:106:5\n    |\n LL | /     match Some([1, 2, 3]) {\n LL | |         Some([first, ..]) => Some(first),\n@@ -146,7 +146,7 @@ LL | |     };\n    | |_____^ help: try this: `Some([1, 2, 3]).map(|[first, ..]| first)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:110:5\n+  --> $DIR/manual_map_option.rs:111:5\n    |\n LL | /     match &Some((String::new(), \"test\")) {\n LL | |         Some((x, y)) => Some((y, x)),\n@@ -155,7 +155,7 @@ LL | |     };\n    | |_____^ help: try this: `Some((String::new(), \"test\")).as_ref().map(|(x, y)| (y, x))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:168:5\n+  --> $DIR/manual_map_option.rs:169:5\n    |\n LL | /     match Some(0) {\n LL | |         Some(x) => Some(vec![x]),\n@@ -164,7 +164,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| vec![x])`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:173:5\n+  --> $DIR/manual_map_option.rs:174:5\n    |\n LL | /     match option_env!(\"\") {\n LL | |         Some(x) => Some(String::from(x)),\n@@ -173,7 +173,7 @@ LL | |     };\n    | |_____^ help: try this: `option_env!(\"\").map(String::from)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:193:12\n+  --> $DIR/manual_map_option.rs:194:12\n    |\n LL |       } else if let Some(x) = Some(0) {\n    |  ____________^\n@@ -184,7 +184,7 @@ LL | |     };\n    | |_____^ help: try this: `{ Some(0).map(|x| x + 1) }`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:201:12\n+  --> $DIR/manual_map_option.rs:202:12\n    |\n LL |       } else if let Some(x) = Some(0) {\n    |  ____________^"}, {"sha": "e7a483c058295b39c84c901a721f9530cd2e13a3", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n+\n #[warn(clippy::all, clippy::needless_borrow)]\n #[allow(unused_variables, clippy::unnecessary_mut_passed)]\n fn main() {\n@@ -96,3 +98,10 @@ trait Trait {}\n impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n+\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    let a = 5;\n+    #[expect(clippy::needless_borrow)]\n+    let _ = x(&&a);\n+}"}, {"sha": "1d6bf46405a2f0b6cabd288c11780315f15dd9d7", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n+\n #[warn(clippy::all, clippy::needless_borrow)]\n #[allow(unused_variables, clippy::unnecessary_mut_passed)]\n fn main() {\n@@ -96,3 +98,10 @@ trait Trait {}\n impl<'a> Trait for &'a str {}\n \n fn h(_: &dyn Trait) {}\n+\n+#[allow(dead_code)]\n+fn check_expect_suppression() {\n+    let a = 5;\n+    #[expect(clippy::needless_borrow)]\n+    let _ = x(&&a);\n+}"}, {"sha": "be59d8f546d232a2df1f35de2127ed9aaa912fbc", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,97 +1,97 @@\n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:9:15\n+  --> $DIR/needless_borrow.rs:11:15\n    |\n LL |     let _ = x(&&a); // warn\n    |               ^^^ help: change this to: `&a`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:13:13\n+  --> $DIR/needless_borrow.rs:15:13\n    |\n LL |     mut_ref(&mut &mut b); // warn\n    |             ^^^^^^^^^^^ help: change this to: `&mut b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:25:13\n+  --> $DIR/needless_borrow.rs:27:13\n    |\n LL |             &&a\n    |             ^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:27:15\n+  --> $DIR/needless_borrow.rs:29:15\n    |\n LL |         46 => &&a,\n    |               ^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:33:27\n+  --> $DIR/needless_borrow.rs:35:27\n    |\n LL |                     break &ref_a;\n    |                           ^^^^^^ help: change this to: `ref_a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:40:15\n+  --> $DIR/needless_borrow.rs:42:15\n    |\n LL |     let _ = x(&&&a);\n    |               ^^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:41:15\n+  --> $DIR/needless_borrow.rs:43:15\n    |\n LL |     let _ = x(&mut &&a);\n    |               ^^^^^^^^ help: change this to: `&a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:42:15\n+  --> $DIR/needless_borrow.rs:44:15\n    |\n LL |     let _ = x(&&&mut b);\n    |               ^^^^^^^^ help: change this to: `&mut b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:43:15\n+  --> $DIR/needless_borrow.rs:45:15\n    |\n LL |     let _ = x(&&ref_a);\n    |               ^^^^^^^ help: change this to: `ref_a`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:46:11\n+  --> $DIR/needless_borrow.rs:48:11\n    |\n LL |         x(&b);\n    |           ^^ help: change this to: `b`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:53:13\n+  --> $DIR/needless_borrow.rs:55:13\n    |\n LL |     mut_ref(&mut x);\n    |             ^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:54:13\n+  --> $DIR/needless_borrow.rs:56:13\n    |\n LL |     mut_ref(&mut &mut x);\n    |             ^^^^^^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:55:23\n+  --> $DIR/needless_borrow.rs:57:23\n    |\n LL |     let y: &mut i32 = &mut x;\n    |                       ^^^^^^ help: change this to: `x`\n \n error: this expression creates a reference which is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:56:23\n+  --> $DIR/needless_borrow.rs:58:23\n    |\n LL |     let y: &mut i32 = &mut &mut x;\n    |                       ^^^^^^^^^^^ help: change this to: `x`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:72:13\n+  --> $DIR/needless_borrow.rs:74:13\n    |\n LL |     let _ = (&x).0;\n    |             ^^^^ help: change this to: `x`\n \n error: this expression borrows a value the compiler would automatically borrow\n-  --> $DIR/needless_borrow.rs:74:22\n+  --> $DIR/needless_borrow.rs:76:22\n    |\n LL |     let _ = unsafe { (&*x).0 };\n    |                      ^^^^^ help: change this to: `(*x)`"}, {"sha": "1bd75c806bc94378acadd7f86e5bc533de7548e1", "filename": "tests/ui/needless_parens_on_range_literals.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_parens_on_range_literals.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_parens_on_range_literals.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_parens_on_range_literals.fixed?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![warn(clippy::needless_parens_on_range_literals)]\n+#![allow(clippy::almost_complete_letter_range)]\n+\n+fn main() {\n+    let _ = 'a'..='z';\n+    let _ = 'a'..'z';\n+    let _ = (1.)..2.;\n+    let _ = (1.)..2.;\n+    let _ = 'a'..;\n+    let _ = ..'z';\n+}"}, {"sha": "7abb8a1adc1bcc4f0178599adc3391c748f73f5b", "filename": "tests/ui/needless_parens_on_range_literals.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_parens_on_range_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_parens_on_range_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_parens_on_range_literals.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![warn(clippy::needless_parens_on_range_literals)]\n+#![allow(clippy::almost_complete_letter_range)]\n+\n+fn main() {\n+    let _ = ('a')..=('z');\n+    let _ = 'a'..('z');\n+    let _ = (1.)..2.;\n+    let _ = (1.)..(2.);\n+    let _ = ('a')..;\n+    let _ = ..('z');\n+}"}, {"sha": "505f7ac916ddaf381a3339c455ac45fee6501057", "filename": "tests/ui/needless_parens_on_range_literals.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_parens_on_range_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fneedless_parens_on_range_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_parens_on_range_literals.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,40 @@\n+error: needless parenthesis on range literals can be removed\n+  --> $DIR/needless_parens_on_range_literals.rs:8:13\n+   |\n+LL |     let _ = ('a')..=('z');\n+   |             ^^^^^ help: try: `'a'`\n+   |\n+   = note: `-D clippy::needless-parens-on-range-literals` implied by `-D warnings`\n+\n+error: needless parenthesis on range literals can be removed\n+  --> $DIR/needless_parens_on_range_literals.rs:8:21\n+   |\n+LL |     let _ = ('a')..=('z');\n+   |                     ^^^^^ help: try: `'z'`\n+\n+error: needless parenthesis on range literals can be removed\n+  --> $DIR/needless_parens_on_range_literals.rs:9:18\n+   |\n+LL |     let _ = 'a'..('z');\n+   |                  ^^^^^ help: try: `'z'`\n+\n+error: needless parenthesis on range literals can be removed\n+  --> $DIR/needless_parens_on_range_literals.rs:11:19\n+   |\n+LL |     let _ = (1.)..(2.);\n+   |                   ^^^^ help: try: `2.`\n+\n+error: needless parenthesis on range literals can be removed\n+  --> $DIR/needless_parens_on_range_literals.rs:12:13\n+   |\n+LL |     let _ = ('a')..;\n+   |             ^^^^^ help: try: `'a'`\n+\n+error: needless parenthesis on range literals can be removed\n+  --> $DIR/needless_parens_on_range_literals.rs:13:15\n+   |\n+LL |     let _ = ..('z');\n+   |               ^^^^^ help: try: `'z'`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "0a21589dd0d402cd303818b4e5f3fbc245651f85", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -186,6 +186,23 @@ pub fn test16() {\n     }\n }\n \n+// Issue #9001: `continue` in struct expression fields\n+pub fn test17() {\n+    struct Foo {\n+        f: (),\n+    }\n+\n+    let mut n = 0;\n+    let _ = loop {\n+        break Foo {\n+            f: if n < 5 {\n+                n += 1;\n+                continue;\n+            },\n+        };\n+    };\n+}\n+\n fn main() {\n     test1();\n     test2();"}, {"sha": "30807e0f8b92fd62b77911593a705f78525f4bea", "filename": "tests/ui/read_zero_byte_vec.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fread_zero_byte_vec.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,87 @@\n+#![warn(clippy::read_zero_byte_vec)]\n+#![allow(clippy::unused_io_amount)]\n+use std::fs::File;\n+use std::io;\n+use std::io::prelude::*;\n+\n+extern crate futures;\n+use futures::io::{AsyncRead, AsyncReadExt};\n+use tokio::io::{AsyncRead as TokioAsyncRead, AsyncReadExt as _, AsyncWrite as TokioAsyncWrite, AsyncWriteExt as _};\n+\n+fn test() -> io::Result<()> {\n+    let cap = 1000;\n+    let mut f = File::open(\"foo.txt\").unwrap();\n+\n+    // should lint\n+    let mut data = Vec::with_capacity(20);\n+    f.read_exact(&mut data).unwrap();\n+\n+    // should lint\n+    let mut data2 = Vec::with_capacity(cap);\n+    f.read_exact(&mut data2)?;\n+\n+    // should lint\n+    let mut data3 = Vec::new();\n+    f.read_exact(&mut data3)?;\n+\n+    // should lint\n+    let mut data4 = vec![];\n+    let _ = f.read(&mut data4)?;\n+\n+    // should lint\n+    let _ = {\n+        let mut data5 = Vec::new();\n+        f.read(&mut data5)\n+    };\n+\n+    // should lint\n+    let _ = {\n+        let mut data6: Vec<u8> = Default::default();\n+        f.read(&mut data6)\n+    };\n+\n+    // should not lint\n+    let mut buf = [0u8; 100];\n+    f.read(&mut buf)?;\n+\n+    // should not lint\n+    let mut empty = vec![];\n+    let mut data7 = vec![];\n+    f.read(&mut empty);\n+\n+    // should not lint\n+    f.read(&mut data7);\n+\n+    // should not lint\n+    let mut data8 = Vec::new();\n+    data8.resize(100, 0);\n+    f.read_exact(&mut data8)?;\n+\n+    // should not lint\n+    let mut data9 = vec![1, 2, 3];\n+    f.read_exact(&mut data9)?;\n+\n+    Ok(())\n+}\n+\n+async fn test_futures<R: AsyncRead + Unpin>(r: &mut R) {\n+    // should lint\n+    let mut data = Vec::new();\n+    r.read(&mut data).await.unwrap();\n+\n+    // should lint\n+    let mut data2 = Vec::new();\n+    r.read_exact(&mut data2).await.unwrap();\n+}\n+\n+async fn test_tokio<R: TokioAsyncRead + Unpin>(r: &mut R) {\n+    // should lint\n+    let mut data = Vec::new();\n+    r.read(&mut data).await.unwrap();\n+\n+    // should lint\n+    let mut data2 = Vec::new();\n+    r.read_exact(&mut data2).await.unwrap();\n+}\n+\n+fn main() {}"}, {"sha": "08ba9753d7c411256d45ddfb3afef91fd2dce84c", "filename": "tests/ui/read_zero_byte_vec.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fread_zero_byte_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fread_zero_byte_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fread_zero_byte_vec.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -0,0 +1,64 @@\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:17:5\n+   |\n+LL |     f.read_exact(&mut data).unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `data.resize(20, 0); f.read_exact(&mut data).unwrap();`\n+   |\n+   = note: `-D clippy::read-zero-byte-vec` implied by `-D warnings`\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:21:5\n+   |\n+LL |     f.read_exact(&mut data2)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `data2.resize(cap, 0); f.read_exact(&mut data2)?;`\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:25:5\n+   |\n+LL |     f.read_exact(&mut data3)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:29:5\n+   |\n+LL |     let _ = f.read(&mut data4)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:34:9\n+   |\n+LL |         f.read(&mut data5)\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:40:9\n+   |\n+LL |         f.read(&mut data6)\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:70:5\n+   |\n+LL |     r.read(&mut data).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:74:5\n+   |\n+LL |     r.read_exact(&mut data2).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:80:5\n+   |\n+LL |     r.read(&mut data).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:84:5\n+   |\n+LL |     r.read_exact(&mut data2).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "570ef406e4a991d2193fe098945a0fdca7cd58a2", "filename": "tests/ui/ref_binding_to_reference.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fref_binding_to_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fref_binding_to_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,6 @@\n // FIXME: run-rustfix waiting on multi-span suggestions\n \n+#![feature(lint_reasons)]\n #![warn(clippy::ref_binding_to_reference)]\n #![allow(clippy::needless_borrowed_reference)]\n \n@@ -73,3 +74,12 @@ impl T1 for S {\n         let _: &&String = x;\n     }\n }\n+\n+fn check_expect_suppression() {\n+    let x = String::new();\n+    #[expect(clippy::ref_binding_to_reference)]\n+    let _: &&String = match Some(&x) {\n+        Some(ref x) => x,\n+        None => return,\n+    };\n+}"}, {"sha": "eb36cd516a246a9e4f581b7079efb0bacc8cc09d", "filename": "tests/ui/ref_binding_to_reference.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fref_binding_to_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fref_binding_to_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fref_binding_to_reference.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,5 +1,5 @@\n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:30:14\n+  --> $DIR/ref_binding_to_reference.rs:31:14\n    |\n LL |         Some(ref x) => x,\n    |              ^^^^^\n@@ -11,7 +11,7 @@ LL |         Some(x) => &x,\n    |              ~     ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:36:14\n+  --> $DIR/ref_binding_to_reference.rs:37:14\n    |\n LL |         Some(ref x) => {\n    |              ^^^^^\n@@ -25,7 +25,7 @@ LL ~             &x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:46:14\n+  --> $DIR/ref_binding_to_reference.rs:47:14\n    |\n LL |         Some(ref x) => m2!(x),\n    |              ^^^^^\n@@ -36,7 +36,7 @@ LL |         Some(x) => m2!(&x),\n    |              ~         ~~\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:51:15\n+  --> $DIR/ref_binding_to_reference.rs:52:15\n    |\n LL |     let _ = |&ref x: &&String| {\n    |               ^^^^^\n@@ -48,7 +48,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:57:12\n+  --> $DIR/ref_binding_to_reference.rs:58:12\n    |\n LL | fn f2<'a>(&ref x: &&'a String) -> &'a String {\n    |            ^^^^^\n@@ -61,7 +61,7 @@ LL ~     x\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:64:11\n+  --> $DIR/ref_binding_to_reference.rs:65:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^\n@@ -73,7 +73,7 @@ LL ~         let _: &&String = &x;\n    |\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/ref_binding_to_reference.rs:72:11\n+  --> $DIR/ref_binding_to_reference.rs:73:11\n    |\n LL |     fn f(&ref x: &&String) {\n    |           ^^^^^"}, {"sha": "9562b47f0c4ff28610caf5f78856225725642d77", "filename": "tests/ui/same_name_method.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.rs?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,3 +1,4 @@\n+#![feature(lint_reasons)]\n #![warn(clippy::same_name_method)]\n #![allow(dead_code, non_camel_case_types)]\n \n@@ -108,4 +109,19 @@ mod should_not_lint {\n     }\n }\n \n+mod check_expect_suppression {\n+    use crate::T1;\n+\n+    struct S;\n+\n+    impl S {\n+        #[expect(clippy::same_name_method)]\n+        fn foo() {}\n+    }\n+\n+    impl T1 for S {\n+        fn foo() {}\n+    }\n+}\n+\n fn main() {}"}, {"sha": "f55ec9f3cc66b8306f9e6723612dd769646e0475", "filename": "tests/ui/same_name_method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fsame_name_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/tests%2Fui%2Fsame_name_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.stderr?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -1,61 +1,61 @@\n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:20:13\n+  --> $DIR/same_name_method.rs:21:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n    = note: `-D clippy::same-name-method` implied by `-D warnings`\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:24:13\n+  --> $DIR/same_name_method.rs:25:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:34:13\n+  --> $DIR/same_name_method.rs:35:13\n    |\n LL |             fn clone() {}\n    |             ^^^^^^^^^^^^^\n    |\n note: existing `clone` defined here\n-  --> $DIR/same_name_method.rs:30:18\n+  --> $DIR/same_name_method.rs:31:18\n    |\n LL |         #[derive(Clone)]\n    |                  ^^^^^\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:44:13\n+  --> $DIR/same_name_method.rs:45:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:48:13\n+  --> $DIR/same_name_method.rs:49:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:58:13\n+  --> $DIR/same_name_method.rs:59:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:61:9\n+  --> $DIR/same_name_method.rs:62:9\n    |\n LL |         impl T1 for S {}\n    |         ^^^^^^^^^^^^^^^^\n \n error: method's name is the same as an existing method in a trait\n-  --> $DIR/same_name_method.rs:70:13\n+  --> $DIR/same_name_method.rs:71:13\n    |\n LL |             fn foo() {}\n    |             ^^^^^^^^^^^\n    |\n note: existing `foo` defined here\n-  --> $DIR/same_name_method.rs:73:9\n+  --> $DIR/same_name_method.rs:74:9\n    |\n LL |         impl T1 for S {}\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "4999cce75114b77b6e3223a1fdf54f3fbc167e0d", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=f8f9d01c2ad0dff565bdd60feeb4cbd09dada8cd", "patch": "@@ -206,6 +206,26 @@\n             margin: auto 5px;\n             font-family: monospace;\n         }\n+\n+        details {\n+            border-radius: 4px;\n+            padding: .5em .5em 0;\n+        }\n+\n+        code {\n+            white-space: pre !important;\n+        }\n+\n+        summary {\n+            font-weight: bold;\n+            margin: -.5em -.5em 0;\n+            padding: .5em;\n+            display: revert;\n+        }\n+\n+        details[open] {\n+            padding: .5em;\n+        }\n     </style>\n     <style>\n         /* Expanding the mdBoom theme*/"}]}