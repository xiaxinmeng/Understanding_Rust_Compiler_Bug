{"sha": "2540c2b76138b988629b48f54381835f13f18792", "node_id": "C_kwDOAAsO6NoAKDI1NDBjMmI3NjEzOGI5ODg2MjliNDhmNTQzODE4MzVmMTNmMTg3OTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T01:26:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-24T02:48:44Z"}, "message": "Make higher-ranked projections in object types work in new solver", "tree": {"sha": "eecfa77049c2b652b81f5e819889e7669b972104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eecfa77049c2b652b81f5e819889e7669b972104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2540c2b76138b988629b48f54381835f13f18792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2540c2b76138b988629b48f54381835f13f18792", "html_url": "https://github.com/rust-lang/rust/commit/2540c2b76138b988629b48f54381835f13f18792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2540c2b76138b988629b48f54381835f13f18792/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98525aeee7b1f0ddf3573c2921a0d1ef914774a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/98525aeee7b1f0ddf3573c2921a0d1ef914774a8", "html_url": "https://github.com/rust-lang/rust/commit/98525aeee7b1f0ddf3573c2921a0d1ef914774a8"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "88fd8bb8bd095ca111b723f20c25d2270a243371", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2540c2b76138b988629b48f54381835f13f18792/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2540c2b76138b988629b48f54381835f13f18792/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=2540c2b76138b988629b48f54381835f13f18792", "patch": "@@ -151,7 +151,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 };\n                 nested_goals.extend(\n                     structural_traits::predicates_for_object_candidate(\n-                        tcx,\n+                        ecx,\n+                        goal.param_env,\n                         goal.predicate.projection_ty.trait_ref(tcx),\n                         bounds,\n                     )"}, {"sha": "6048082228b35db469fc939be558228a28c53fcd", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2540c2b76138b988629b48f54381835f13f18792/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2540c2b76138b988629b48f54381835f13f18792/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=2540c2b76138b988629b48f54381835f13f18792", "patch": "@@ -110,7 +110,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                 };\n                 nested_goals.extend(\n                     structural_traits::predicates_for_object_candidate(\n-                        tcx,\n+                        ecx,\n+                        goal.param_env,\n                         goal.predicate.trait_ref,\n                         bounds,\n                     )"}, {"sha": "bd4950d8067cf197d003113478e98dc030d6ca72", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2540c2b76138b988629b48f54381835f13f18792/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2540c2b76138b988629b48f54381835f13f18792/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=2540c2b76138b988629b48f54381835f13f18792", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{Movability, Mutability};\n+use rustc_hir::{def_id::DefId, Movability, Mutability};\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n \n@@ -236,10 +236,12 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n }\n \n pub(crate) fn predicates_for_object_candidate<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    ecx: &EvalCtxt<'_, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     object_bound: &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>,\n ) -> Vec<ty::Predicate<'tcx>> {\n+    let tcx = ecx.tcx();\n     let mut requirements = vec![];\n     requirements.extend(\n         tcx.super_predicates_of(trait_ref.def_id).instantiate(tcx, trait_ref.substs).predicates,\n@@ -252,13 +254,9 @@ pub(crate) fn predicates_for_object_candidate<'tcx>(\n \n     let mut replace_projection_with = FxHashMap::default();\n     for bound in object_bound {\n-        let bound = bound.no_bound_vars().expect(\"higher-ranked projections not supported, yet\");\n-        if let ty::ExistentialPredicate::Projection(proj) = bound {\n+        if let ty::ExistentialPredicate::Projection(proj) = bound.skip_binder() {\n             let proj = proj.with_self_ty(tcx, trait_ref.self_ty());\n-            let old_ty = replace_projection_with.insert(\n-                proj.projection_ty,\n-                proj.term.ty().expect(\"expected only types in dyn right now\"),\n-            );\n+            let old_ty = replace_projection_with.insert(proj.def_id(), bound.rebind(proj));\n             assert_eq!(\n                 old_ty,\n                 None,\n@@ -270,24 +268,37 @@ pub(crate) fn predicates_for_object_candidate<'tcx>(\n         }\n     }\n \n-    requirements.fold_with(&mut ReplaceProjectionWith { tcx, mapping: replace_projection_with })\n+    requirements.fold_with(&mut ReplaceProjectionWith {\n+        ecx,\n+        param_env,\n+        mapping: replace_projection_with,\n+    })\n }\n \n-struct ReplaceProjectionWith<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    mapping: FxHashMap<ty::AliasTy<'tcx>, Ty<'tcx>>,\n+struct ReplaceProjectionWith<'a, 'tcx> {\n+    ecx: &'a EvalCtxt<'a, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    mapping: FxHashMap<DefId, ty::PolyProjectionPredicate<'tcx>>,\n }\n \n-impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceProjectionWith<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceProjectionWith<'_, 'tcx> {\n     fn interner(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+        self.ecx.tcx()\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            && let Some(replacement) = self.mapping.get(&alias_ty)\n+            && let Some(replacement) = self.mapping.get(&alias_ty.def_id)\n         {\n-            *replacement\n+            let proj = self.ecx.instantiate_binder_with_infer(*replacement);\n+            // Technically this folder could be fallible?\n+            let nested = self\n+                .ecx\n+                .eq(self.param_env, alias_ty, proj.projection_ty)\n+                .expect(\"expected to be able to unify goal projection with dyn's projection\");\n+            // Technically we could register these too..\n+            assert!(nested.is_empty(), \"did not expect unification to have any nested goals\");\n+            proj.term.ty().unwrap()\n         } else {\n             ty.super_fold_with(self)\n         }"}, {"sha": "c886aeeda3e4690e6f246c4698b41d46a3dd364c", "filename": "tests/ui/traits/new-solver/higher-ranked-dyn-bounds.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2540c2b76138b988629b48f54381835f13f18792/tests%2Fui%2Ftraits%2Fnew-solver%2Fhigher-ranked-dyn-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2540c2b76138b988629b48f54381835f13f18792/tests%2Fui%2Ftraits%2Fnew-solver%2Fhigher-ranked-dyn-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fhigher-ranked-dyn-bounds.rs?ref=2540c2b76138b988629b48f54381835f13f18792", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+trait Trait<'a> {\n+    type Item: for<'b> Trait2<'b>;\n+}\n+\n+trait Trait2<'a> {}\n+impl Trait2<'_> for () {}\n+\n+fn needs_trait(_: Box<impl for<'a> Trait<'a> + ?Sized>) {}\n+\n+fn foo(x: Box<dyn for<'a> Trait<'a, Item = ()>>) {\n+    needs_trait(x);\n+}\n+\n+fn main() {}"}]}