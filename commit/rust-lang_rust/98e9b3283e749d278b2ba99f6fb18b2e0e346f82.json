{"sha": "98e9b3283e749d278b2ba99f6fb18b2e0e346f82", "node_id": "C_kwDOAAsO6NoAKDk4ZTliMzI4M2U3NDlkMjc4YjJiYTk5ZjZmYjE4YjJlMGUzNDZmODI", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-11-22T21:39:32Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-12-04T00:30:19Z"}, "message": "Add test with `#[rustc_evaluate_where_clauses]`\n\nAs suggested via reviewer feedback.", "tree": {"sha": "014793106ffb5c7b639a5c29c3aa22660b2652a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/014793106ffb5c7b639a5c29c3aa22660b2652a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e9b3283e749d278b2ba99f6fb18b2e0e346f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e9b3283e749d278b2ba99f6fb18b2e0e346f82", "html_url": "https://github.com/rust-lang/rust/commit/98e9b3283e749d278b2ba99f6fb18b2e0e346f82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e9b3283e749d278b2ba99f6fb18b2e0e346f82/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c619340e4df07c79e60ac051a0796b30fd0acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c619340e4df07c79e60ac051a0796b30fd0acc", "html_url": "https://github.com/rust-lang/rust/commit/14c619340e4df07c79e60ac051a0796b30fd0acc"}], "stats": {"total": 153, "additions": 152, "deletions": 1}, "files": [{"sha": "1796c9d197c2b372dcf220d0fc19f5cd02d06ce0", "filename": "src/test/incremental/issue-85360-eval-obligation-ice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98e9b3283e749d278b2ba99f6fb18b2e0e346f82/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e9b3283e749d278b2ba99f6fb18b2e0e346f82/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs?ref=98e9b3283e749d278b2ba99f6fb18b2e0e346f82", "patch": "@@ -1,5 +1,6 @@\n // revisions:cfail1 cfail2\n-// compile-flags: --crate-type=lib --edition=2021\n+//[cfail1] compile-flags: --crate-type=lib --edition=2021 -Zassert-incr-state=not-loaded\n+//[cfail2] compile-flags: --crate-type=lib --edition=2021 -Zassert-incr-state=loaded\n // build-pass\n \n use core::any::Any;"}, {"sha": "2dbf912d214dabb45189137d857cabdfc198c3cc", "filename": "src/test/ui/traits/issue-85360-eval-obligation-ice.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/98e9b3283e749d278b2ba99f6fb18b2e0e346f82/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e9b3283e749d278b2ba99f6fb18b2e0e346f82/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs?ref=98e9b3283e749d278b2ba99f6fb18b2e0e346f82", "patch": "@@ -0,0 +1,130 @@\n+// compile-flags: --edition=2021\n+\n+#![feature(rustc_attrs)]\n+\n+use core::any::Any;\n+use core::marker::PhantomData;\n+\n+fn main() {\n+    test::<MaskedStorage<GenericComp<Pos>>>(make());\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+}\n+\n+#[rustc_evaluate_where_clauses]\n+fn test<T: Sized>(_: T) {}\n+\n+fn make<T>() -> T {\n+    todo!()\n+}\n+\n+struct DerefWrap<T>(T);\n+\n+impl<T> core::ops::Deref for DerefWrap<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+struct Storage<T, D> {\n+    phantom: PhantomData<(T, D)>,\n+}\n+\n+type ReadStorage<T> = Storage<T, DerefWrap<MaskedStorage<T>>>;\n+\n+pub trait Component {\n+    type Storage;\n+}\n+\n+struct VecStorage;\n+\n+struct Pos;\n+\n+impl Component for Pos {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp<T> {\n+    type Storage = VecStorage;\n+}\n+struct ReadData {\n+    pos_interpdata: ReadStorage<GenericComp<Pos>>,\n+}\n+\n+trait System {\n+    type SystemData;\n+\n+    fn run(data: Self::SystemData, any: Box<dyn Any>);\n+}\n+\n+struct Sys;\n+\n+impl System for Sys {\n+    type SystemData = (ReadData, ReadStorage<Pos>);\n+\n+    fn run((data, pos): Self::SystemData, any: Box<dyn Any>) {\n+        <ReadStorage<GenericComp<Pos>> as SystemData>::setup(any);\n+\n+        ParJoin::par_join((&pos, &data.pos_interpdata));\n+    }\n+}\n+\n+trait ParJoin {\n+    fn par_join(self)\n+    where\n+        Self: Sized,\n+    {\n+    }\n+}\n+\n+impl<'a, T, D> ParJoin for &'a Storage<T, D>\n+where\n+    T: Component,\n+    D: core::ops::Deref<Target = MaskedStorage<T>>,\n+    T::Storage: Sync,\n+{\n+}\n+\n+impl<A, B> ParJoin for (A, B)\n+where\n+    A: ParJoin,\n+    B: ParJoin,\n+{\n+}\n+\n+pub trait SystemData {\n+    fn setup(any: Box<dyn Any>);\n+}\n+\n+impl<T: 'static> SystemData for ReadStorage<T>\n+where\n+    T: Component,\n+{\n+    fn setup(any: Box<dyn Any>) {\n+        let storage: &MaskedStorage<T> = any.downcast_ref().unwrap();\n+\n+        <dyn Any as CastFrom<MaskedStorage<T>>>::cast(&storage);\n+    }\n+}\n+\n+pub struct MaskedStorage<T: Component> {\n+    _inner: T::Storage,\n+}\n+\n+pub unsafe trait CastFrom<T> {\n+    fn cast(t: &T) -> &Self;\n+}\n+\n+unsafe impl<T> CastFrom<T> for dyn Any\n+where\n+    T: Any + 'static,\n+{\n+    fn cast(t: &T) -> &Self {\n+        t\n+    }\n+}"}, {"sha": "c62aba30f05d2af981f06a819e29828a4987d80c", "filename": "src/test/ui/traits/issue-85360-eval-obligation-ice.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98e9b3283e749d278b2ba99f6fb18b2e0e346f82/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98e9b3283e749d278b2ba99f6fb18b2e0e346f82/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr?ref=98e9b3283e749d278b2ba99f6fb18b2e0e346f82", "patch": "@@ -0,0 +1,20 @@\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:9:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |         - predicate\n+\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:9:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |            ----- predicate\n+\n+error: aborting due to 2 previous errors\n+"}]}