{"sha": "28251e486cf2351cc817d631e0cffd92dd104e30", "node_id": "C_kwDOAAsO6NoAKDI4MjUxZTQ4NmNmMjM1MWNjODE3ZDYzMWUwY2ZmZDkyZGQxMDRlMzA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-01T23:19:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-01T23:19:33Z"}, "message": "Cleanup relevance scoring", "tree": {"sha": "c1fa16d0441cac6bb514d2b525ea91fe9cafafba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1fa16d0441cac6bb514d2b525ea91fe9cafafba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28251e486cf2351cc817d631e0cffd92dd104e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28251e486cf2351cc817d631e0cffd92dd104e30", "html_url": "https://github.com/rust-lang/rust/commit/28251e486cf2351cc817d631e0cffd92dd104e30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28251e486cf2351cc817d631e0cffd92dd104e30/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ae0b085579c92fa8095580681d8b766aa19e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ae0b085579c92fa8095580681d8b766aa19e27", "html_url": "https://github.com/rust-lang/rust/commit/a9ae0b085579c92fa8095580681d8b766aa19e27"}], "stats": {"total": 109, "additions": 47, "deletions": 62}, "files": [{"sha": "2b7202bb6dd22ed538d91d410d8804de5b672b26", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 47, "deletions": 62, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/28251e486cf2351cc817d631e0cffd92dd104e30/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28251e486cf2351cc817d631e0cffd92dd104e30/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=28251e486cf2351cc817d631e0cffd92dd104e30", "patch": "@@ -187,7 +187,6 @@ pub enum CompletionRelevancePostfixMatch {\n }\n \n impl CompletionRelevance {\n-    const BASE_LINE: u32 = 3;\n     /// Provides a relevance score. Higher values are more relevant.\n     ///\n     /// The absolute value of the relevance score is not meaningful, for\n@@ -197,35 +196,42 @@ impl CompletionRelevance {\n     ///\n     /// See is_relevant if you need to make some judgement about score\n     /// in an absolute sense.\n-    pub fn score(&self) -> u32 {\n-        let mut score = Self::BASE_LINE;\n-\n-        // score decreases\n-        if self.is_op_method {\n-            score -= 1;\n-        }\n-        if self.is_private_editable {\n-            score -= 1;\n+    pub fn score(self) -> u32 {\n+        let mut score = 0;\n+        let CompletionRelevance {\n+            exact_name_match,\n+            type_match,\n+            is_local,\n+            is_op_method,\n+            is_private_editable,\n+            postfix_match,\n+        } = self;\n+\n+        // lower rank private things\n+        if !is_private_editable {\n+            score += 1;\n         }\n-        if self.postfix_match.is_some() {\n-            score -= 3;\n+        // lower rank trait op methods\n+        if !is_op_method {\n+            score += 10;\n         }\n-\n-        // score increases\n-        if self.exact_name_match {\n-            score += 1;\n+        if exact_name_match {\n+            score += 10;\n         }\n-        score += match self.type_match {\n-            Some(CompletionRelevanceTypeMatch::Exact) => 4,\n+        score += match postfix_match {\n+            Some(CompletionRelevancePostfixMatch::Exact) => 100,\n+            Some(CompletionRelevancePostfixMatch::NonExact) => 0,\n+            None => 3,\n+        };\n+        score += match type_match {\n+            Some(CompletionRelevanceTypeMatch::Exact) => 8,\n             Some(CompletionRelevanceTypeMatch::CouldUnify) => 3,\n             None => 0,\n         };\n-        if self.is_local {\n+        // slightly prefer locals\n+        if is_local {\n             score += 1;\n         }\n-        if self.postfix_match == Some(CompletionRelevancePostfixMatch::Exact) {\n-            score += 100;\n-        }\n \n         score\n     }\n@@ -234,7 +240,7 @@ impl CompletionRelevance {\n     /// some threshold such that we think it is especially likely\n     /// to be relevant.\n     pub fn is_relevant(&self) -> bool {\n-        self.score() > Self::BASE_LINE\n+        self.score() > 0\n     }\n }\n \n@@ -584,55 +590,34 @@ mod tests {\n \n     #[test]\n     fn relevance_score() {\n+        use CompletionRelevance as Cr;\n+        let default = Cr::default();\n         // This test asserts that the relevance score for these items is ascending, and\n         // that any items in the same vec have the same score.\n         let expected_relevance_order = vec![\n-            vec![CompletionRelevance {\n-                postfix_match: Some(CompletionRelevancePostfixMatch::NonExact),\n-                ..CompletionRelevance::default()\n-            }],\n-            vec![CompletionRelevance {\n-                is_op_method: true,\n-                is_private_editable: true,\n-                ..CompletionRelevance::default()\n-            }],\n-            vec![\n-                CompletionRelevance { is_private_editable: true, ..CompletionRelevance::default() },\n-                CompletionRelevance { is_op_method: true, ..CompletionRelevance::default() },\n-            ],\n-            vec![CompletionRelevance::default()],\n-            vec![\n-                CompletionRelevance { exact_name_match: true, ..CompletionRelevance::default() },\n-                CompletionRelevance { is_local: true, ..CompletionRelevance::default() },\n-            ],\n-            vec![CompletionRelevance {\n-                exact_name_match: true,\n-                is_local: true,\n-                ..CompletionRelevance::default()\n-            }],\n-            vec![CompletionRelevance {\n-                type_match: Some(CompletionRelevanceTypeMatch::CouldUnify),\n-                ..CompletionRelevance::default()\n-            }],\n-            vec![CompletionRelevance {\n-                type_match: Some(CompletionRelevanceTypeMatch::Exact),\n-                ..CompletionRelevance::default()\n-            }],\n-            vec![CompletionRelevance {\n+            vec![],\n+            vec![Cr { is_op_method: true, is_private_editable: true, ..default }],\n+            vec![Cr { is_op_method: true, ..default }],\n+            vec![Cr { postfix_match: Some(CompletionRelevancePostfixMatch::NonExact), ..default }],\n+            vec![Cr { is_private_editable: true, ..default }],\n+            vec![default],\n+            vec![Cr { is_local: true, ..default }],\n+            vec![Cr { type_match: Some(CompletionRelevanceTypeMatch::CouldUnify), ..default }],\n+            vec![Cr { type_match: Some(CompletionRelevanceTypeMatch::Exact), ..default }],\n+            vec![Cr { exact_name_match: true, ..default }],\n+            vec![Cr { exact_name_match: true, is_local: true, ..default }],\n+            vec![Cr {\n                 exact_name_match: true,\n                 type_match: Some(CompletionRelevanceTypeMatch::Exact),\n-                ..CompletionRelevance::default()\n+                ..default\n             }],\n-            vec![CompletionRelevance {\n+            vec![Cr {\n                 exact_name_match: true,\n                 type_match: Some(CompletionRelevanceTypeMatch::Exact),\n                 is_local: true,\n-                ..CompletionRelevance::default()\n-            }],\n-            vec![CompletionRelevance {\n-                postfix_match: Some(CompletionRelevancePostfixMatch::Exact),\n-                ..CompletionRelevance::default()\n+                ..default\n             }],\n+            vec![Cr { postfix_match: Some(CompletionRelevancePostfixMatch::Exact), ..default }],\n         ];\n \n         check_relevance_score_ordered(expected_relevance_order);"}]}