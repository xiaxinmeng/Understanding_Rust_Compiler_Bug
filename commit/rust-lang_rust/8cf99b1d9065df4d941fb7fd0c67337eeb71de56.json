{"sha": "8cf99b1d9065df4d941fb7fd0c67337eeb71de56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjk5YjFkOTA2NWRmNGQ5NDFmYjdmZDBjNjczMzdlZWI3MWRlNTY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-04T03:06:46Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-04T03:06:46Z"}, "message": "Factor out array_tactic", "tree": {"sha": "69273e31a560ef1c63d80b850f33cceba3c14e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69273e31a560ef1c63d80b850f33cceba3c14e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf99b1d9065df4d941fb7fd0c67337eeb71de56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf99b1d9065df4d941fb7fd0c67337eeb71de56", "html_url": "https://github.com/rust-lang/rust/commit/8cf99b1d9065df4d941fb7fd0c67337eeb71de56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf99b1d9065df4d941fb7fd0c67337eeb71de56/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e90f2e7e27120904a7dbaf0732458fbe240d6478", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90f2e7e27120904a7dbaf0732458fbe240d6478", "html_url": "https://github.com/rust-lang/rust/commit/e90f2e7e27120904a7dbaf0732458fbe240d6478"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "cbfb0f1051218ec54536f236d7b376855145216e", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8cf99b1d9065df4d941fb7fd0c67337eeb71de56/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf99b1d9065df4d941fb7fd0c67337eeb71de56/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8cf99b1d9065df4d941fb7fd0c67337eeb71de56", "patch": "@@ -436,38 +436,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n         }\n     }\n \n-    let has_long_item = items\n-        .iter()\n-        .any(|li| li.item.as_ref().map(|s| s.len() > 10).unwrap_or(false));\n-\n-    let tactic = match context.config.indent_style() {\n-        IndentStyle::Block => {\n-            // FIXME wrong shape in one-line case\n-            match shape.width.checked_sub(2 * bracket_size) {\n-                Some(width) => {\n-                    let tactic = ListTactic::LimitedHorizontalVertical(\n-                        context.config.width_heuristics().array_width,\n-                    );\n-                    definitive_tactic(&items, tactic, Separator::Comma, width)\n-                }\n-                None => DefinitiveListTactic::Vertical,\n-            }\n-        }\n-        IndentStyle::Visual => {\n-            if has_long_item || items.iter().any(ListItem::is_multiline) {\n-                definitive_tactic(\n-                    &items,\n-                    ListTactic::LimitedHorizontalVertical(\n-                        context.config.width_heuristics().array_width,\n-                    ),\n-                    Separator::Comma,\n-                    nested_shape.width,\n-                )\n-            } else {\n-                DefinitiveListTactic::Mixed\n-            }\n-        }\n-    };\n+    let tactic = array_tactic(context, shape, nested_shape, exprs, &items, bracket_size);\n     let ends_with_newline = tactic.ends_with_newline(context.config.indent_style());\n \n     let fmt = ListFormatting {\n@@ -518,6 +487,47 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n     Some(result)\n }\n \n+fn array_tactic<T: Rewrite + Spanned + ToExpr>(\n+    context: &RewriteContext,\n+    shape: Shape,\n+    nested_shape: Shape,\n+    exprs: &[&T],\n+    items: &[ListItem],\n+    bracket_size: usize,\n+) -> DefinitiveListTactic {\n+    let has_long_item = items\n+        .iter()\n+        .any(|li| li.item.as_ref().map(|s| s.len() > 10).unwrap_or(false));\n+\n+    match context.config.indent_style() {\n+        IndentStyle::Block => {\n+            match shape.width.checked_sub(2 * bracket_size) {\n+                Some(width) => {\n+                    let tactic = ListTactic::LimitedHorizontalVertical(\n+                        context.config.width_heuristics().array_width,\n+                    );\n+                    definitive_tactic(items, tactic, Separator::Comma, width)\n+                }\n+                None => DefinitiveListTactic::Vertical,\n+            }\n+        }\n+        IndentStyle::Visual => {\n+            if has_long_item || items.iter().any(ListItem::is_multiline) {\n+                definitive_tactic(\n+                    items,\n+                    ListTactic::LimitedHorizontalVertical(\n+                        context.config.width_heuristics().array_width,\n+                    ),\n+                    Separator::Comma,\n+                    nested_shape.width,\n+                )\n+            } else {\n+                DefinitiveListTactic::Mixed\n+            }\n+        }\n+    }\n+}\n+\n fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String> {\n     debug!(\"nop_block_collapse {:?} {}\", block_str, budget);\n     block_str.map(|block_str| {"}]}