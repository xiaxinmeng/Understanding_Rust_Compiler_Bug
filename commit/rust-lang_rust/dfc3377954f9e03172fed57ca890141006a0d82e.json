{"sha": "dfc3377954f9e03172fed57ca890141006a0d82e", "node_id": "C_kwDOAAsO6NoAKGRmYzMzNzc5NTRmOWUwMzE3MmZlZDU3Y2E4OTAxNDEwMDZhMGQ4MmU", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-15T07:57:08Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-15T07:57:08Z"}, "message": "Split the mem-replace codegen test\n\nApparently in CI it's getting generated in the opposite order, one function per file will make the test pass either way.", "tree": {"sha": "5c274c639dcfc55bb6766c952520f29042eda309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c274c639dcfc55bb6766c952520f29042eda309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc3377954f9e03172fed57ca890141006a0d82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc3377954f9e03172fed57ca890141006a0d82e", "html_url": "https://github.com/rust-lang/rust/commit/dfc3377954f9e03172fed57ca890141006a0d82e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc3377954f9e03172fed57ca890141006a0d82e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c6ad89cfd937d741b9d256e950ec0de96a7142", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c6ad89cfd937d741b9d256e950ec0de96a7142", "html_url": "https://github.com/rust-lang/rust/commit/e7c6ad89cfd937d741b9d256e950ec0de96a7142"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "f6898e2f75814e87d1d91c094257601c78504566", "filename": "tests/codegen/mem-replace-big-type.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dfc3377954f9e03172fed57ca890141006a0d82e/tests%2Fcodegen%2Fmem-replace-big-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc3377954f9e03172fed57ca890141006a0d82e/tests%2Fcodegen%2Fmem-replace-big-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmem-replace-big-type.rs?ref=dfc3377954f9e03172fed57ca890141006a0d82e", "patch": "@@ -0,0 +1,36 @@\n+// This test ensures that `mem::replace::<T>` only ever calls `@llvm.memcpy`\n+// with `size_of::<T>()` as the size, and never goes through any wrapper that\n+// may e.g. multiply `size_of::<T>()` with a variable \"count\" (which is only\n+// known to be `1` after inlining).\n+\n+// compile-flags: -C no-prepopulate-passes -Zinline-mir=no\n+// ignore-debug: the debug assertions get in the way\n+\n+#![crate_type = \"lib\"]\n+\n+#[repr(C, align(8))]\n+pub struct Big([u64; 7]);\n+pub fn replace_big(dst: &mut Big, src: Big) -> Big {\n+    // Before the `read_via_copy` intrinsic, this emitted six `memcpy`s.\n+    std::mem::replace(dst, src)\n+}\n+\n+// NOTE(eddyb) the `CHECK-NOT`s ensure that the only calls of `@llvm.memcpy` in\n+// the entire output, are the direct calls we want, from `ptr::replace`.\n+\n+// CHECK-NOT: call void @llvm.memcpy\n+\n+// For a large type, we expect exactly three `memcpy`s\n+// CHECK-LABEL: define internal void @{{.+}}mem{{.+}}replace{{.+}}sret(%Big)\n+    // CHECK-NOT: alloca\n+    // CHECK: alloca %Big\n+    // CHECK-NOT: alloca\n+    // CHECK-NOT: call void @llvm.memcpy\n+    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n+    // CHECK-NOT: call void @llvm.memcpy\n+    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n+    // CHECK-NOT: call void @llvm.memcpy\n+    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n+    // CHECK-NOT: call void @llvm.memcpy\n+\n+// CHECK-NOT: call void @llvm.memcpy"}, {"sha": "83babab4f847b150dc4d0e8301b13c7298e49e3a", "filename": "tests/codegen/mem-replace-direct-memcpy.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dfc3377954f9e03172fed57ca890141006a0d82e/tests%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc3377954f9e03172fed57ca890141006a0d82e/tests%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=dfc3377954f9e03172fed57ca890141006a0d82e", "patch": "@@ -12,33 +12,11 @@ pub fn replace_byte(dst: &mut u8, src: u8) -> u8 {\n     std::mem::replace(dst, src)\n }\n \n-#[repr(C, align(8))]\n-pub struct Big([u64; 7]);\n-pub fn replace_big(dst: &mut Big, src: Big) -> Big {\n-    // Before the `read_via_copy` intrinsic, this emitted six `memcpy`s.\n-    std::mem::replace(dst, src)\n-}\n-\n // NOTE(eddyb) the `CHECK-NOT`s ensure that the only calls of `@llvm.memcpy` in\n // the entire output, are the direct calls we want, from `ptr::replace`.\n \n // CHECK-NOT: call void @llvm.memcpy\n \n-// For a large type, we expect exactly three `memcpy`s\n-// CHECK-LABEL: define internal void @{{.+}}mem{{.+}}replace{{.+}}sret(%Big)\n-    // CHECK-NOT: alloca\n-    // CHECK: alloca %Big\n-    // CHECK-NOT: alloca\n-    // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n-    // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n-    // CHECK-NOT: call void @llvm.memcpy\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{i8\\*|ptr}} align 8 %{{.*}}, {{i8\\*|ptr}} align 8 %{{.*}}, i{{.*}} 56, i1 false)\n-    // CHECK-NOT: call void @llvm.memcpy\n-\n-// CHECK-NOT: call void @llvm.memcpy\n-\n // For a small type, we expect one each of `load`/`store`/`memcpy` instead\n // CHECK-LABEL: define internal noundef i8 @{{.+}}mem{{.+}}replace\n     // CHECK-NOT: alloca"}]}