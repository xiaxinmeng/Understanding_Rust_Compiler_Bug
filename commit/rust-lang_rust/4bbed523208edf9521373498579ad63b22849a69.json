{"sha": "4bbed523208edf9521373498579ad63b22849a69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYmVkNTIzMjA4ZWRmOTUyMTM3MzQ5ODU3OWFkNjNiMjI4NDlhNjk=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-28T15:24:47Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-28T15:24:47Z"}, "message": "Use intra-doc links", "tree": {"sha": "d896d0d06a59cba459012fe3f4d806ee3e550556", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d896d0d06a59cba459012fe3f4d806ee3e550556"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbed523208edf9521373498579ad63b22849a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbed523208edf9521373498579ad63b22849a69", "html_url": "https://github.com/rust-lang/rust/commit/4bbed523208edf9521373498579ad63b22849a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbed523208edf9521373498579ad63b22849a69/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118860a7e76daaac3564c7655d46ac65a14fc612", "url": "https://api.github.com/repos/rust-lang/rust/commits/118860a7e76daaac3564c7655d46ac65a14fc612", "html_url": "https://github.com/rust-lang/rust/commit/118860a7e76daaac3564c7655d46ac65a14fc612"}], "stats": {"total": 234, "additions": 7, "deletions": 227}, "files": [{"sha": "05c1120f9990ed2342a70038fca91a3d6905fdc7", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 7, "deletions": 227, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/4bbed523208edf9521373498579ad63b22849a69/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbed523208edf9521373498579ad63b22849a69/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=4bbed523208edf9521373498579ad63b22849a69", "patch": "@@ -10,18 +10,10 @@\n //! Atomic types present operations that, when used correctly, synchronize\n //! updates between threads.\n //!\n-//! [`AtomicBool`]: struct.AtomicBool.html\n-//! [`AtomicIsize`]: struct.AtomicIsize.html\n-//! [`AtomicUsize`]: struct.AtomicUsize.html\n-//! [`AtomicI8`]: struct.AtomicI8.html\n-//! [`AtomicU16`]: struct.AtomicU16.html\n-//!\n //! Each method takes an [`Ordering`] which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n //! same as the [C++20 atomic orderings][1]. For more information see the [nomicon][2].\n //!\n-//! [`Ordering`]: enum.Ordering.html\n-//!\n //! [1]: https://en.cppreference.com/w/cpp/atomic/memory_order\n //! [2]: ../../../nomicon/atomics.html\n //!\n@@ -31,15 +23,12 @@\n //! The most common way to share an atomic variable is to put it into an [`Arc`][arc] (an\n //! atomically-reference-counted shared pointer).\n //!\n-//! [`Sync`]: ../../marker/trait.Sync.html\n //! [arc]: ../../../std/sync/struct.Arc.html\n //!\n //! Atomic types may be stored in static variables, initialized using\n //! the constant initializers like [`AtomicBool::new`]. Atomic statics\n //! are often used for lazy global initialization.\n //!\n-//! [`AtomicBool::new`]: struct.AtomicBool.html#method.new\n-//!\n //! # Portability\n //!\n //! All atomic types in this module are guaranteed to be [lock-free] if they're\n@@ -212,8 +201,8 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// Atomic memory orderings\n ///\n /// Memory orderings specify the way atomic operations synchronize memory.\n-/// In its weakest [`Relaxed`][Ordering::Relaxed], only the memory directly touched by the\n-/// operation is synchronized. On the other hand, a store-load pair of [`SeqCst`][Ordering::SeqCst]\n+/// In its weakest [`Ordering::Relaxed`], only the memory directly touched by the\n+/// operation is synchronized. On the other hand, a store-load pair of [`Ordering::SeqCst`]\n /// operations synchronize other memory while additionally preserving a total order of such\n /// operations across all threads.\n ///\n@@ -223,8 +212,6 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// For more information see the [nomicon].\n ///\n /// [nomicon]: ../../../nomicon/atomics.html\n-/// [Ordering::Relaxed]: #variant.Relaxed\n-/// [Ordering::SeqCst]: #variant.SeqCst\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n #[non_exhaustive]\n@@ -248,9 +235,6 @@ pub enum Ordering {\n     ///\n     /// Corresponds to [`memory_order_release`] in C++20.\n     ///\n-    /// [`Release`]: #variant.Release\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Relaxed`]: #variant.Relaxed\n     /// [`memory_order_release`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Release,\n@@ -266,9 +250,6 @@ pub enum Ordering {\n     ///\n     /// Corresponds to [`memory_order_acquire`] in C++20.\n     ///\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Release`]: #variant.Release\n-    /// [`Relaxed`]: #variant.Relaxed\n     /// [`memory_order_acquire`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Acquire,\n@@ -284,9 +265,6 @@ pub enum Ordering {\n     /// Corresponds to [`memory_order_acq_rel`] in C++20.\n     ///\n     /// [`memory_order_acq_rel`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Release`]: #variant.Release\n-    /// [`Relaxed`]: #variant.Relaxed\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     AcqRel,\n     /// Like [`Acquire`]/[`Release`]/[`AcqRel`] (for load, store, and load-with-store\n@@ -296,16 +274,11 @@ pub enum Ordering {\n     /// Corresponds to [`memory_order_seq_cst`] in C++20.\n     ///\n     /// [`memory_order_seq_cst`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Sequentially-consistent_ordering\n-    /// [`Acquire`]: #variant.Acquire\n-    /// [`Release`]: #variant.Release\n-    /// [`AcqRel`]: #variant.AcqRel\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     SeqCst,\n }\n \n /// An [`AtomicBool`] initialized to `false`.\n-///\n-/// [`AtomicBool`]: struct.AtomicBool.html\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(\n@@ -386,13 +359,6 @@ impl AtomicBool {\n     ///\n     /// Panics if `order` is [`Release`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -419,13 +385,6 @@ impl AtomicBool {\n     ///\n     /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -456,11 +415,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -493,13 +447,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`bool`]: ../../../std/primitive.bool.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -540,11 +487,6 @@ impl AtomicBool {\n     /// operations on `u8`.\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -587,7 +529,7 @@ impl AtomicBool {\n \n     /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n-    /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n+    /// Unlike [`AtomicBool::compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n     /// return value is a result indicating whether the new value was written and containing the\n     /// previous value.\n@@ -604,12 +546,6 @@ impl AtomicBool {\n     /// operations on `u8`.\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n-    /// [`compare_exchange`]: #method.compare_exchange\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -658,11 +594,6 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n@@ -706,11 +637,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -763,11 +689,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -808,11 +729,6 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -942,13 +858,6 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// Panics if `order` is [`Release`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -975,13 +884,6 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1013,11 +915,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1052,12 +949,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1096,12 +987,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1143,7 +1028,7 @@ impl<T> AtomicPtr<T> {\n \n     /// Stores a value into the pointer if the current value is the same as the `current` value.\n     ///\n-    /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n+    /// Unlike [`AtomicPtr::compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n     /// return value is a result indicating whether the new value was written and containing the\n     /// previous value.\n@@ -1159,13 +1044,6 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n-    /// [`compare_exchange`]: #method.compare_exchange\n-    /// [`Ordering`]: enum.Ordering.html\n-    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-    /// [`Release`]: enum.Ordering.html#variant.Release\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1271,7 +1149,7 @@ macro_rules! atomic_int {\n         #[doc = $int_ref]\n         /// ).\n         ///\n-        /// [module-level documentation]: index.html\n+        /// [module-level documentation]: crate::sync::atomic\n         #[$stable]\n         #[repr(C, align($align))]\n         pub struct $atomic_type {\n@@ -1389,13 +1267,6 @@ Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n \n Panics if `order` is [`Release`] or [`AcqRel`].\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n # Examples\n \n ```\n@@ -1423,13 +1294,6 @@ assert_eq!(some_var.load(Ordering::Relaxed), 5);\n \n Panics if `order` is [`Acquire`] or [`AcqRel`].\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n # Examples\n \n ```\n@@ -1459,11 +1323,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1498,12 +1357,6 @@ happens, and using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-\n # Examples\n \n ```\n@@ -1553,12 +1406,6 @@ and must be equivalent to or weaker than the success ordering.\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n # Examples\n \n ```\n@@ -1595,7 +1442,7 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n                 concat!(\"Stores a value into the atomic integer if the current value is the same as\n the `current` value.\n \n-Unlike [`compare_exchange`], this function is allowed to spuriously fail even\n+Unlike [`\", stringify!($atomic_type), \"::compare_exchange`], this function is allowed to spuriously fail even\n when the comparison succeeds, which can result in more efficient code on some\n platforms. The return value is a result indicating whether the new value was\n written and containing the previous value.\n@@ -1608,13 +1455,6 @@ of this operation [`Relaxed`], and using [`Release`] makes the successful load\n [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n-[`compare_exchange`]: #method.compare_exchange\n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n@@ -1662,11 +1502,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1698,11 +1533,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1737,11 +1567,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1776,11 +1601,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1816,11 +1636,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1855,11 +1670,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -1890,7 +1700,7 @@ only once to the stored value.\n `fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n The first describes the required ordering for when the operation finally succeeds while the second\n describes the required ordering for loads. These correspond to the success and failure orderings of\n-[`compare_exchange`] respectively.\n+[`\", stringify!($atomic_type), \"::compare_exchange`] respectively.\n \n Using [`Acquire`] as success ordering makes the store part\n of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n@@ -1901,12 +1711,6 @@ and must be equivalent to or weaker than the success ordering.\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n [`bool`]: ../../../std/primitive.bool.html\n-[`compare_exchange`]: #method.compare_exchange\n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n # Examples\n \n@@ -1954,11 +1758,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -2004,11 +1803,6 @@ using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n-[`Ordering`]: enum.Ordering.html\n-[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n-[`Release`]: enum.Ordering.html#variant.Release\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-\n # Examples\n \n ```\n@@ -2660,13 +2454,6 @@ unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n ///     }\n /// }\n /// ```\n-///\n-/// [`Ordering`]: enum.Ordering.html\n-/// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-/// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-/// [`Release`]: enum.Ordering.html#variant.Release\n-/// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-/// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn fence(order: Ordering) {\n@@ -2747,13 +2534,6 @@ pub fn fence(order: Ordering) {\n /// }\n /// ```\n ///\n-/// [`fence`]: fn.fence.html\n-/// [`Ordering`]: enum.Ordering.html\n-/// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-/// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n-/// [`Release`]: enum.Ordering.html#variant.Release\n-/// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n-/// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n /// [memory barriers]: https://www.kernel.org/doc/Documentation/memory-barriers.txt\n #[inline]\n #[stable(feature = \"compiler_fences\", since = \"1.21.0\")]"}]}