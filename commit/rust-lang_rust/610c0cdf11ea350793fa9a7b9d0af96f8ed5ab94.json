{"sha": "610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMGMwY2RmMTFlYTM1MDc5M2ZhOWE3YjlkMGFmOTZmOGVkNWFiOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-16T08:30:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-16T08:30:52Z"}, "message": "auto merge of #9196 : alexcrichton/rust/attempting-9055, r=cmr\n\nBeforehand it was assumed that the standard cdecl abi was used for all extern\r\nfns of extern crates, but this reads the abi of the extern fn type and declares\r\nthe function in the local crate with the appropriate type.\r\n\r\nI was trying to think of how to write a test for this, but I was just drawing up blanks :(. Are there standard functions in libc which are not of the cdecl abi? If so we could try linking to them and make sure that the cal completes successfully.\r\n\r\nOtherwise, I manually verified that the function was declared correctly by looking at the llvm assembly.\r\n\r\ncc #9055 (I'm not sure if this will fix that issue)", "tree": {"sha": "93700681637cc30564f991d31fca07abcd252df8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93700681637cc30564f991d31fca07abcd252df8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94", "html_url": "https://github.com/rust-lang/rust/commit/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05dccacaeb5986897aa132e4fd9c07426106f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05dccacaeb5986897aa132e4fd9c07426106f49", "html_url": "https://github.com/rust-lang/rust/commit/b05dccacaeb5986897aa132e4fd9c07426106f49"}, {"sha": "297ac739d8e7891bfaa4d73f8126371c2c13425f", "url": "https://api.github.com/repos/rust-lang/rust/commits/297ac739d8e7891bfaa4d73f8126371c2c13425f", "html_url": "https://github.com/rust-lang/rust/commit/297ac739d8e7891bfaa4d73f8126371c2c13425f"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "c06fcbea222c145a3bfb9e964e7052beffc8f810", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94", "patch": "@@ -86,7 +86,7 @@ use syntax::parse::token;\n use syntax::parse::token::{special_idents};\n use syntax::print::pprust::stmt_to_str;\n use syntax::{ast, ast_util, codemap, ast_map};\n-use syntax::abi::{X86, X86_64, Arm, Mips};\n+use syntax::abi::{X86, X86_64, Arm, Mips, Rust, RustIntrinsic};\n use syntax::visit;\n use syntax::visit::Visitor;\n \n@@ -813,15 +813,28 @@ pub fn trans_external_path(ccx: &mut CrateContext, did: ast::DefId, t: ty::t)\n     -> ValueRef {\n     let name = csearch::get_symbol(ccx.sess.cstore, did);\n     match ty::get(t).sty {\n-      ty::ty_bare_fn(_) | ty::ty_closure(_) => {\n-        let llty = type_of_fn_from_ty(ccx, t);\n-        return get_extern_fn(&mut ccx.externs, ccx.llmod, name,\n-                             lib::llvm::CCallConv, llty);\n-      }\n-      _ => {\n-        let llty = type_of(ccx, t);\n-        return get_extern_const(&mut ccx.externs, ccx.llmod, name, llty);\n-      }\n+        ty::ty_bare_fn(ref fn_ty) => {\n+            // Currently llvm_calling_convention triggers unimpl/bug on\n+            // Rust/RustIntrinsic, so those two are handled specially here.\n+            let cconv = match fn_ty.abis.for_arch(ccx.sess.targ_cfg.arch) {\n+                Some(Rust) | Some(RustIntrinsic) => lib::llvm::CCallConv,\n+                Some(*) | None => {\n+                    let c = foreign::llvm_calling_convention(ccx, fn_ty.abis);\n+                    c.unwrap_or(lib::llvm::CCallConv)\n+                }\n+            };\n+            let llty = type_of_fn_from_ty(ccx, t);\n+            return get_extern_fn(&mut ccx.externs, ccx.llmod, name, cconv, llty);\n+        }\n+        ty::ty_closure(_) => {\n+            let llty = type_of_fn_from_ty(ccx, t);\n+            return get_extern_fn(&mut ccx.externs, ccx.llmod, name,\n+            lib::llvm::CCallConv, llty);\n+        }\n+        _ => {\n+            let llty = type_of(ccx, t);\n+            return get_extern_const(&mut ccx.externs, ccx.llmod, name, llty);\n+        }\n     };\n }\n "}, {"sha": "1ebe402bbb987838d3c41d9700c1db91680c36dc", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=610c0cdf11ea350793fa9a7b9d0af96f8ed5ab94", "patch": "@@ -74,9 +74,8 @@ struct LlvmSignature {\n ///////////////////////////////////////////////////////////////////////////\n // Calls to external functions\n \n-fn llvm_calling_convention(ccx: @mut CrateContext,\n-                           abis: AbiSet)\n-                           -> Option<CallConv> {\n+pub fn llvm_calling_convention(ccx: &mut CrateContext,\n+                               abis: AbiSet) -> Option<CallConv> {\n     let arch = ccx.sess.targ_cfg.arch;\n     abis.for_arch(arch).map(|abi| {\n         match *abi {"}]}