{"sha": "f3bda74d363a060ade5e5caeb654ba59bfed51a4", "node_id": "C_kwDOAAsO6NoAKGYzYmRhNzRkMzYzYTA2MGFkZTVlNWNhZWI2NTRiYTU5YmZlZDUxYTQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-26T02:39:05Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-26T08:30:35Z"}, "message": "Optimize `Layout::array`.\n\nThe current implementation is much more conservative than it needs to\nbe, because it's dealing with the size and alignment of a given `T`,\nwhich are more restricted than an arbitrary `Layout`.\n\nFor example, imagine a struct with a `u32` and a `u4`. You can safely\ncreate a `Layout { size_: 5, align_: 4 }` by hand, but\n`Layout::new::<T>` will give `Layout { size_: 8, align_: 4}`, where the\nsize already has padding that accounts for the alignment. (And the\nexisting `debug_assert_eq!` in `Layout::array` already demonstrates that\nno additional padding is required.)", "tree": {"sha": "8a4b9f1307eb89a2d34a967447d341b6d28f0211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a4b9f1307eb89a2d34a967447d341b6d28f0211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3bda74d363a060ade5e5caeb654ba59bfed51a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bda74d363a060ade5e5caeb654ba59bfed51a4", "html_url": "https://github.com/rust-lang/rust/commit/f3bda74d363a060ade5e5caeb654ba59bfed51a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3bda74d363a060ade5e5caeb654ba59bfed51a4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026edbb4ef85ef3d38876548a771b7c72c87803f", "url": "https://api.github.com/repos/rust-lang/rust/commits/026edbb4ef85ef3d38876548a771b7c72c87803f", "html_url": "https://github.com/rust-lang/rust/commit/026edbb4ef85ef3d38876548a771b7c72c87803f"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "9df0b5c55191591de62b572cedb21cb866eaf85a", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3bda74d363a060ade5e5caeb654ba59bfed51a4/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bda74d363a060ade5e5caeb654ba59bfed51a4/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=f3bda74d363a060ade5e5caeb654ba59bfed51a4", "patch": "@@ -405,9 +405,17 @@ impl Layout {\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n-        let (layout, offset) = Layout::new::<T>().repeat(n)?;\n-        debug_assert_eq!(offset, mem::size_of::<T>());\n-        Ok(layout.pad_to_align())\n+        let array_size = mem::size_of::<T>().checked_mul(n).ok_or(LayoutError)?;\n+\n+        // SAFETY:\n+        // - Size: `array_size` cannot be too big because `size_of::<T>()` must\n+        //   be a multiple of `align_of::<T>()`. Therefore, `array_size`\n+        //   rounded up to the nearest multiple of `align_of::<T>()` is just\n+        //   `array_size`. And `array_size` cannot be too big because it was\n+        //   just checked by the `checked_mul()`.\n+        // - Alignment: `align_of::<T>()` will always give an acceptable\n+        //   (non-zero, power of two) alignment.\n+        Ok(unsafe { Layout::from_size_align_unchecked(array_size, mem::align_of::<T>()) })\n     }\n }\n "}]}