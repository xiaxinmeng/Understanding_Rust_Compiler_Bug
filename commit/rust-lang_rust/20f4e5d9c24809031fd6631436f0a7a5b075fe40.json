{"sha": "20f4e5d9c24809031fd6631436f0a7a5b075fe40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZjRlNWQ5YzI0ODA5MDMxZmQ2NjMxNDM2ZjBhN2E1YjA3NWZlNDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-23T16:34:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-23T16:35:49Z"}, "message": "Detect turbofish missing surrounding angle brackets", "tree": {"sha": "04ec2b6aa9813e7c3561310ca0e999d8838e6174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ec2b6aa9813e7c3561310ca0e999d8838e6174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f4e5d9c24809031fd6631436f0a7a5b075fe40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f4e5d9c24809031fd6631436f0a7a5b075fe40", "html_url": "https://github.com/rust-lang/rust/commit/20f4e5d9c24809031fd6631436f0a7a5b075fe40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f4e5d9c24809031fd6631436f0a7a5b075fe40/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e92106d457abd14f82adc29e7f2496861e07916", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e92106d457abd14f82adc29e7f2496861e07916", "html_url": "https://github.com/rust-lang/rust/commit/9e92106d457abd14f82adc29e7f2496861e07916"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "f84f54054acdb0d737d17b4c16f4bd4ec6587174", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=20f4e5d9c24809031fd6631436f0a7a5b075fe40", "patch": "@@ -2,7 +2,9 @@ use super::ty::AllowPlus;\n use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType, TokenType};\n \n use rustc_ast::ast::{self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Item, Param};\n-use rustc_ast::ast::{AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n+use rustc_ast::ast::{\n+    AngleBracketedArgs, AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n+};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Lit, LitKind, TokenKind};\n use rustc_ast::util::parser::AssocOp;\n@@ -488,6 +490,44 @@ impl<'a> Parser<'a> {\n         false\n     }\n \n+    /// Check if a method call with an intended turbofish has been written without surrounding\n+    /// angle brackets.\n+    pub(super) fn check_turbofish_missing_angle_brackets(&mut self, segment: &mut PathSegment) {\n+        if token::ModSep == self.token.kind && segment.args.is_none() {\n+            let snapshot = self.clone();\n+            self.bump();\n+            let lo = self.token.span;\n+            match self.parse_angle_args() {\n+                Ok(args) if self.token.kind == token::OpenDelim(token::Paren) => {\n+                    // Recover from bad turbofish: `foo.collect::Vec<_>()`.\n+                    let span = lo.to(self.prev_token.span);\n+                    let args = AngleBracketedArgs { args, span }.into();\n+                    segment.args = args;\n+                    self.struct_span_err(\n+                        span,\n+                        \"generic parameters without surrounding angle brackets\",\n+                    )\n+                    .multipart_suggestion(\n+                        \"surround the type parameters with angle brackets\",\n+                        vec![\n+                            (span.shrink_to_lo(), \"<\".to_string()),\n+                            (span.shrink_to_hi(), \">\".to_string()),\n+                        ],\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                }\n+                Ok(_) => {\n+                    *self = snapshot;\n+                }\n+                Err(mut err) => {\n+                    err.cancel();\n+                    *self = snapshot;\n+                }\n+            }\n+        }\n+    }\n+\n     /// Check to see if a pair of chained operators looks like an attempt at chained comparison,\n     /// e.g. `1 < x <= 3`. If so, suggest either splitting the comparison into two, or\n     /// parenthesising the leftmost comparison."}, {"sha": "d06b172bc148496829d1f0649093a12488a6ac24", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=20f4e5d9c24809031fd6631436f0a7a5b075fe40", "patch": "@@ -909,8 +909,9 @@ impl<'a> Parser<'a> {\n         }\n \n         let fn_span_lo = self.token.span;\n-        let segment = self.parse_path_segment(PathStyle::Expr)?;\n+        let mut segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(token::Paren)]);\n+        self.check_turbofish_missing_angle_brackets(&mut segment);\n \n         if self.check(&token::OpenDelim(token::Paren)) {\n             // Method call `expr.f()`"}, {"sha": "3dcefd362574b420ad082504393edee34b8875f0", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=20f4e5d9c24809031fd6631436f0a7a5b075fe40", "patch": "@@ -387,7 +387,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of generic arguments / associated item constraints,\n     /// possibly including trailing comma.\n-    fn parse_angle_args(&mut self) -> PResult<'a, Vec<AngleBracketedArg>> {\n+    pub(super) fn parse_angle_args(&mut self) -> PResult<'a, Vec<AngleBracketedArg>> {\n         let mut args = Vec::new();\n         while let Some(arg) = self.parse_angle_arg()? {\n             args.push(arg);"}, {"sha": "63fbee9f0f5263ce10bd035dee619457aa6f870b", "filename": "src/test/ui/suggestions/recover-missing-turbofish-surrounding-angle-braket.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs?ref=20f4e5d9c24809031fd6631436f0a7a5b075fe40", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n+}"}, {"sha": "ad48a0c7a5cf7c36378dde39ca362069258e5746", "filename": "src/test/ui/suggestions/recover-missing-turbofish-surrounding-angle-braket.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20f4e5d9c24809031fd6631436f0a7a5b075fe40/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr?ref=20f4e5d9c24809031fd6631436f0a7a5b075fe40", "patch": "@@ -0,0 +1,13 @@\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:2:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: aborting due to previous error\n+"}]}