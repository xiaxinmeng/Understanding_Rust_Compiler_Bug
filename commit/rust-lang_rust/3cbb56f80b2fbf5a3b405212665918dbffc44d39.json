{"sha": "3cbb56f80b2fbf5a3b405212665918dbffc44d39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYmI1NmY4MGIyZmJmNWEzYjQwNTIxMjY2NTkxOGRiZmZjNDRkMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T07:05:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T07:05:49Z"}, "message": "Auto merge of #79455 - CraftSpider:master, r=jyn514\n\nRemove doctree::Macro and distinguish between `macro_rules!` and `pub macro`\n\nThis is a part of #78082, removing doctree::Macro. Uses the changes in #79372\n\nFixes #76761", "tree": {"sha": "f26fd41a0aea2d035120ec2f81dba27f86ae3a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26fd41a0aea2d035120ec2f81dba27f86ae3a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cbb56f80b2fbf5a3b405212665918dbffc44d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cbb56f80b2fbf5a3b405212665918dbffc44d39", "html_url": "https://github.com/rust-lang/rust/commit/3cbb56f80b2fbf5a3b405212665918dbffc44d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cbb56f80b2fbf5a3b405212665918dbffc44d39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6add378d6b77a727697f2920a9cc85a63766297e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6add378d6b77a727697f2920a9cc85a63766297e", "html_url": "https://github.com/rust-lang/rust/commit/6add378d6b77a727697f2920a9cc85a63766297e"}, {"sha": "d23b57c1a8d1002df09c6213bd28884d973e116a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23b57c1a8d1002df09c6213bd28884d973e116a", "html_url": "https://github.com/rust-lang/rust/commit/d23b57c1a8d1002df09c6213bd28884d973e116a"}], "stats": {"total": 140, "additions": 97, "deletions": 43}, "files": [{"sha": "9e8ce45292417d12b8cb46d2ac1de43c21d3a7a2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3cbb56f80b2fbf5a3b405212665918dbffc44d39", "patch": "@@ -2327,22 +2327,49 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Ident>) {\n     }\n }\n \n-impl Clean<Item> for doctree::Macro {\n+impl Clean<Item> for (&hir::MacroDef<'_>, Option<Ident>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        Item::from_def_id_and_parts(\n-            self.def_id,\n-            Some(self.name.clean(cx)),\n-            MacroItem(Macro {\n-                source: format!(\n-                    \"macro_rules! {} {{\\n{}}}\",\n-                    self.name,\n-                    self.matchers\n+        let (item, renamed) = self;\n+        let name = renamed.unwrap_or(item.ident).name;\n+        let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n+        // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n+        let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect::<Vec<_>>();\n+        let source = if item.ast.macro_rules {\n+            format!(\n+                \"macro_rules! {} {{\\n{}}}\",\n+                name,\n+                matchers\n+                    .iter()\n+                    .map(|span| { format!(\"    {} => {{ ... }};\\n\", span.to_src(cx)) })\n+                    .collect::<String>(),\n+            )\n+        } else {\n+            let vis = item.vis.clean(cx);\n+\n+            if matchers.len() <= 1 {\n+                format!(\n+                    \"{}macro {}{} {{\\n    ...\\n}}\",\n+                    vis.print_with_space(),\n+                    name,\n+                    matchers.iter().map(|span| span.to_src(cx)).collect::<String>(),\n+                )\n+            } else {\n+                format!(\n+                    \"{}macro {} {{\\n{}}}\",\n+                    vis.print_with_space(),\n+                    name,\n+                    matchers\n                         .iter()\n-                        .map(|span| { format!(\"    {} => {{ ... }};\\n\", span.to_src(cx)) })\n-                        .collect::<String>()\n-                ),\n-                imported_from: self.imported_from.clean(cx),\n-            }),\n+                        .map(|span| { format!(\"    {} => {{ ... }},\\n\", span.to_src(cx)) })\n+                        .collect::<String>(),\n+                )\n+            }\n+        };\n+\n+        Item::from_hir_id_and_parts(\n+            item.hir_id,\n+            Some(name),\n+            MacroItem(Macro { source, imported_from: None }),\n             cx,\n         )\n     }"}, {"sha": "3961870a1bfadfcff8544bddd92ddb5d17bb0a67", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=3cbb56f80b2fbf5a3b405212665918dbffc44d39", "patch": "@@ -18,7 +18,7 @@ crate struct Module<'hir> {\n     // (item, renamed)\n     crate items: Vec<(&'hir hir::Item<'hir>, Option<Ident>)>,\n     crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Ident>)>,\n-    crate macros: Vec<Macro>,\n+    crate macros: Vec<(&'hir hir::MacroDef<'hir>, Option<Ident>)>,\n     crate is_crate: bool,\n }\n \n@@ -56,15 +56,6 @@ crate struct Variant<'hir> {\n     crate def: &'hir hir::VariantData<'hir>,\n }\n \n-// For Macro we store the DefId instead of the NodeId, since we also create\n-// these imported macro_rules (which only have a DUMMY_NODE_ID).\n-crate struct Macro {\n-    crate name: Symbol,\n-    crate def_id: hir::def_id::DefId,\n-    crate matchers: Vec<Span>,\n-    crate imported_from: Option<Symbol>,\n-}\n-\n #[derive(Debug)]\n crate struct Import<'hir> {\n     crate name: Symbol,"}, {"sha": "4028293076df9328f9dc07b359bcb2f7265aa26c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=3cbb56f80b2fbf5a3b405212665918dbffc44d39", "patch": "@@ -71,9 +71,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             None,\n         );\n         // Attach the crate's exported macros to the top-level module:\n-        module\n-            .macros\n-            .extend(krate.exported_macros.iter().map(|def| self.visit_local_macro(def, None)));\n+        module.macros.extend(krate.exported_macros.iter().map(|def| (def, None)));\n         module.is_crate = true;\n \n         self.cx.renderinfo.get_mut().exact_paths = self.exact_paths;\n@@ -216,7 +214,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 true\n             }\n             Node::MacroDef(def) if !glob => {\n-                om.macros.push(self.visit_local_macro(def, renamed.map(|i| i.name)));\n+                om.macros.push((def, renamed));\n                 true\n             }\n             _ => false,\n@@ -339,19 +337,4 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             om.foreigns.push((item, renamed));\n         }\n     }\n-\n-    // Convert each `exported_macro` into a doc item.\n-    fn visit_local_macro(&self, def: &'tcx hir::MacroDef<'_>, renamed: Option<Symbol>) -> Macro {\n-        debug!(\"visit_local_macro: {}\", def.ident);\n-        let tts = def.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n-        // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n-        let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();\n-\n-        Macro {\n-            def_id: self.cx.tcx.hir().local_def_id(def.hir_id).to_def_id(),\n-            name: renamed.unwrap_or(def.ident.name),\n-            matchers,\n-            imported_from: None,\n-        }\n-    }\n }"}, {"sha": "e48a56f906c955a0afea9c8342043047d44bcb41", "filename": "src/test/rustdoc/decl_macro.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Ftest%2Frustdoc%2Fdecl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro.rs?ref=3cbb56f80b2fbf5a3b405212665918dbffc44d39", "patch": "@@ -0,0 +1,39 @@\n+#![feature(decl_macro)]\n+\n+// @has decl_macro/macro.my_macro.html //pre 'pub macro my_macro() {'\n+// @has - //pre '...'\n+// @has - //pre '}'\n+pub macro my_macro() {\n+\n+}\n+\n+// @has decl_macro/macro.my_macro_2.html //pre 'pub macro my_macro_2($($tok:tt)*) {'\n+// @has - //pre '...'\n+// @has - //pre '}'\n+pub macro my_macro_2($($tok:tt)*) {\n+\n+}\n+\n+// @has decl_macro/macro.my_macro_multi.html //pre 'pub macro my_macro_multi {'\n+// @has - //pre '(_) => { ... },'\n+// @has - //pre '($foo:ident . $bar:expr) => { ... },'\n+// @has - //pre '($($foo:literal),+) => { ... }'\n+// @has - //pre '}'\n+pub macro my_macro_multi {\n+    (_) => {\n+\n+    },\n+    ($foo:ident . $bar:expr) => {\n+\n+    },\n+    ($($foo:literal),+) => {\n+\n+    }\n+}\n+\n+// @has decl_macro/macro.by_example_single.html //pre 'pub macro by_example_single($foo:expr) {'\n+// @has - //pre '...'\n+// @has - //pre '}'\n+pub macro by_example_single {\n+    ($foo:expr) => {}\n+}"}, {"sha": "4e1279e34d93328d9ad2621230ef3151ce9f79f9", "filename": "src/test/rustdoc/decl_macro_priv.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Ftest%2Frustdoc%2Fdecl_macro_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cbb56f80b2fbf5a3b405212665918dbffc44d39/src%2Ftest%2Frustdoc%2Fdecl_macro_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdecl_macro_priv.rs?ref=3cbb56f80b2fbf5a3b405212665918dbffc44d39", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: --document-private-items\n+\n+#![feature(decl_macro)]\n+\n+// @has decl_macro_priv/macro.crate_macro.html //pre 'pub(crate) macro crate_macro() {'\n+// @has - //pre '...'\n+// @has - //pre '}'\n+pub(crate) macro crate_macro() {}\n+\n+// @has decl_macro_priv/macro.priv_macro.html //pre 'macro priv_macro() {'\n+// @!has - //pre 'pub macro priv_macro() {'\n+// @has - //pre '...'\n+// @has - //pre '}'\n+macro priv_macro() {}"}]}