{"sha": "5efcff11a4695fd547bf07f2b003acc20645071f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZmNmZjExYTQ2OTVmZDU0N2JmMDdmMmIwMDNhY2MyMDY0NTA3MWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-12-04T15:03:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T19:44:25Z"}, "message": "generate invalidations from 2-phase-borrow activations", "tree": {"sha": "ecccdf0b43874fc8ae4034853c75985c0fc7782d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecccdf0b43874fc8ae4034853c75985c0fc7782d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5efcff11a4695fd547bf07f2b003acc20645071f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5efcff11a4695fd547bf07f2b003acc20645071f", "html_url": "https://github.com/rust-lang/rust/commit/5efcff11a4695fd547bf07f2b003acc20645071f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5efcff11a4695fd547bf07f2b003acc20645071f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec194646fef1a467073ad74b8b68f6f202cfce97", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec194646fef1a467073ad74b8b68f6f202cfce97", "html_url": "https://github.com/rust-lang/rust/commit/ec194646fef1a467073ad74b8b68f6f202cfce97"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "112b39952559b124770c456be2db7e84d9c1653d", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5efcff11a4695fd547bf07f2b003acc20645071f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efcff11a4695fd547bf07f2b003acc20645071f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=5efcff11a4695fd547bf07f2b003acc20645071f", "patch": "@@ -56,10 +56,14 @@ struct InvalidationGenerator<'cx, 'tcx: 'cx, 'gcx: 'tcx> {\n /// Visits the whole MIR and generates invalidates() facts\n /// Most of the code implementing this was stolen from borrow_check/mod.rs\n impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n-    fn visit_statement(&mut self,\n-                       block: BasicBlock,\n-                       statement: &Statement<'tcx>,\n-                       location: Location) {\n+    fn visit_statement(\n+        &mut self,\n+        block: BasicBlock,\n+        statement: &Statement<'tcx>,\n+        location: Location,\n+    ) {\n+        self.check_activations(location);\n+\n         match statement.kind {\n             StatementKind::Assign(ref lhs, ref rhs) => {\n                 self.consume_rvalue(\n@@ -148,6 +152,8 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n         terminator: &Terminator<'tcx>,\n         location: Location\n     ) {\n+        self.check_activations(location);\n+\n         match terminator.kind {\n             TerminatorKind::SwitchInt {\n                 ref discr,\n@@ -471,5 +477,41 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n         let lidx = self.location_table.start_index(l);\n         self.all_facts.invalidates.push((lidx, b));\n     }\n+\n+    fn check_activations(\n+        &mut self,\n+        location: Location,\n+    ) {\n+        if !self.tcx.two_phase_borrows() {\n+            return;\n+        }\n+\n+        // Two-phase borrow support: For each activation that is newly\n+        // generated at this statement, check if it interferes with\n+        // another borrow.\n+        for &borrow_index in self.borrow_set.activations_at_location(location) {\n+            let borrow = &self.borrow_set[borrow_index];\n+\n+            // only mutable borrows should be 2-phase\n+            assert!(match borrow.kind {\n+                BorrowKind::Shared | BorrowKind::Shallow => false,\n+                BorrowKind::Unique | BorrowKind::Mut { .. } => true,\n+            });\n+\n+            self.access_place(\n+                ContextKind::Activation.new(location),\n+                &borrow.borrowed_place,\n+                (\n+                    Deep,\n+                    Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index),\n+                ),\n+                LocalMutationIsAllowed::No,\n+            );\n+\n+            // We do not need to call `check_if_path_or_subpath_is_moved`\n+            // again, as we already called it when we made the\n+            // initial reservation.\n+        }\n+    }\n }\n "}]}