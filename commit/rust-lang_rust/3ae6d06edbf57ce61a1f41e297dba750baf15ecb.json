{"sha": "3ae6d06edbf57ce61a1f41e297dba750baf15ecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZTZkMDZlZGJmNTdjZTYxYTFmNDFlMjk3ZGJhNzUwYmFmMTVlY2I=", "commit": {"author": {"name": "MagnumOpus21", "email": "sivaauturic@gmail.com", "date": "2018-08-13T00:49:34Z"}, "committer": {"name": "Siva Prasad", "email": "sivauturic@gmail.com", "date": "2018-09-05T12:56:00Z"}, "message": "Refined the example", "tree": {"sha": "bdc77b664a8a7a5ab269007ad738706375b517bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdc77b664a8a7a5ab269007ad738706375b517bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae6d06edbf57ce61a1f41e297dba750baf15ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae6d06edbf57ce61a1f41e297dba750baf15ecb", "html_url": "https://github.com/rust-lang/rust/commit/3ae6d06edbf57ce61a1f41e297dba750baf15ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae6d06edbf57ce61a1f41e297dba750baf15ecb/comments", "author": {"login": "MagnumOpus21", "id": 5468110, "node_id": "MDQ6VXNlcjU0NjgxMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5468110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MagnumOpus21", "html_url": "https://github.com/MagnumOpus21", "followers_url": "https://api.github.com/users/MagnumOpus21/followers", "following_url": "https://api.github.com/users/MagnumOpus21/following{/other_user}", "gists_url": "https://api.github.com/users/MagnumOpus21/gists{/gist_id}", "starred_url": "https://api.github.com/users/MagnumOpus21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MagnumOpus21/subscriptions", "organizations_url": "https://api.github.com/users/MagnumOpus21/orgs", "repos_url": "https://api.github.com/users/MagnumOpus21/repos", "events_url": "https://api.github.com/users/MagnumOpus21/events{/privacy}", "received_events_url": "https://api.github.com/users/MagnumOpus21/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ae2c628eec74b78d691c2df7a1eccbe9cbd0a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae2c628eec74b78d691c2df7a1eccbe9cbd0a72", "html_url": "https://github.com/rust-lang/rust/commit/2ae2c628eec74b78d691c2df7a1eccbe9cbd0a72"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "2929fc9057d69d5287c8bb402c546b68826cf481", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ae6d06edbf57ce61a1f41e297dba750baf15ecb/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae6d06edbf57ce61a1f41e297dba750baf15ecb/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=3ae6d06edbf57ce61a1f41e297dba750baf15ecb", "patch": "@@ -349,34 +349,22 @@ macro_rules! try {\n /// write!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n /// assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n /// ```\n-\n-/// /// Note : This macro can be used in no_std setups as well\n-/// /// In a no_std setup you are responsible for the \n-/// /// implementation details of the components.\n-\n-/// ```rust\n-///  extern crate core;\n+/// Note : This macro can be used in no_std setups as well\n+/// In a no_std setup you are responsible for the \n+/// implementation details of the components.\n+/// ```\n+///  # extern crate core;\n ///  use core::fmt::Write;\n-\n-///  #[derive(Debug)]\n-///  struct Greetings<'a>{\n-///      message : &'a str,\n+///  struct Example{\n ///  }\n-\n-\n-///  impl<'a> Write for Greetings<'a>{\n+///  impl Write for Example{\n ///      fn write_str(&mut self, _s: &str) -> core::fmt::Result {\n ///           unimplemented!();\n ///      }\n ///  }\n-\n-///  fn main(){\n-///      let mut m = Greetings{message: \"\"};\n-///      write!(&mut m, \"Hello World\").expect(\"Not written\");\n-///  }\n+///  let mut m = Example{};\n+///  write!(&mut m, \"Hello World\").expect(\"Not written\");\n /// ```\n-\n-\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! write {\n@@ -746,4 +734,4 @@ mod builtin {\n         ($cond:expr,) => ({ /* compiler built-in */ });\n         ($cond:expr, $($arg:tt)+) => ({ /* compiler built-in */ });\n     }\n-}\n+}\n\\ No newline at end of file"}]}