{"sha": "aabd41cafc1a79f5ad124a31a360ab0442c13efd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYmQ0MWNhZmMxYTc5ZjVhZDEyNGEzMWEzNjBhYjA0NDJjMTNlZmQ=", "commit": {"author": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T04:10:22Z"}, "committer": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T04:10:22Z"}, "message": "clippy::redundant_field_names", "tree": {"sha": "584a7f437204904fcf23b55e201cb27323790b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584a7f437204904fcf23b55e201cb27323790b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aabd41cafc1a79f5ad124a31a360ab0442c13efd", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVt0Hfgx04mDvJfYh6a8CS6Y8cO0FAmDFhTgACgkQ6a8CS6Y8\ncO1g1Q//SGPGUnDkECJwOBg4cgvZIi1+fY4GCNuizOZC+zg6e1naQeV+6cVdqRIX\nWqYSbFRetgte2ZnN317xxKBBawLT+mvC4jj6xtj6Zi/mFNLmWkDSgzL9LAc4ay2v\nXpT0XukvbS0DvC/yiUrh3+89kAaGT8HOqRNDC/77oU6uZ+TYzukNw4eTgnqpjZLt\n98xBounBlMQXGfE6n1lkhhVyJtXOpW0eqRmZUmZK02is5sSzlqwR/w6tkuuBgDij\nyv7uXiHJQMm/vE+12ZEnodFnK60HlL6JwPBN1Kfi6SNP353FW2QAfcRsy1+sydff\nV1F6R71W+52BTrZMBFp6gfWpe3FmKsbmxkvUWa8nxw6dXz8sqFnNBICdLeAvpyFS\nv/m/w5sLGsXWz00VU925lYZsWLoRqP7oo1ZKPKtUZyNl03uY/iTpdSVCxbRXlQ4L\nrZYpMf3CnwWs3zSK66bxpAxHUcNrhQ486rkgVlnu6qIRjGAl6hleCiQuIR9er18b\nx6tfS0mjlmXxNKaBBBt+JH/aBUjJUlQ3JjQTXN+1RXzBq9ltUi7b0vPf16BpPeWG\n9Mkxk2233fe7REuUsyLLTsiQWL0uefcIJOzjYc6v2BA1ghLMg0+NxsU3hdtrphi/\nbxzYd42xppwPSFO5u1pcZc6xupAAS0b2rrMaZp0sQepQwKunkzg=\n=Ex/a\n-----END PGP SIGNATURE-----", "payload": "tree 584a7f437204904fcf23b55e201cb27323790b02\nparent b857a5dcf094728b4beefd652ea31d2828eb0e10\nauthor Maan2003 <manmeetmann2003@gmail.com> 1623557422 +0530\ncommitter Maan2003 <manmeetmann2003@gmail.com> 1623557422 +0530\n\nclippy::redundant_field_names\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aabd41cafc1a79f5ad124a31a360ab0442c13efd", "html_url": "https://github.com/rust-lang/rust/commit/aabd41cafc1a79f5ad124a31a360ab0442c13efd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aabd41cafc1a79f5ad124a31a360ab0442c13efd/comments", "author": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b857a5dcf094728b4beefd652ea31d2828eb0e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/b857a5dcf094728b4beefd652ea31d2828eb0e10", "html_url": "https://github.com/rust-lang/rust/commit/b857a5dcf094728b4beefd652ea31d2828eb0e10"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "035f4ded6b9779cdff8df1cb261cfe4323fa3047", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=aabd41cafc1a79f5ad124a31a360ab0442c13efd", "patch": "@@ -275,7 +275,7 @@ impl<'a> InferenceContext<'a> {\n         if !self.unify(&ty, &expected) {\n             self.result\n                 .type_mismatches\n-                .insert(pat.into(), TypeMismatch { expected: expected, actual: ty.clone() });\n+                .insert(pat.into(), TypeMismatch { expected, actual: ty.clone() });\n         }\n         self.write_pat_ty(pat, ty.clone());\n         ty"}, {"sha": "d207cacb22480bb5152ee44d714efef3f725451b", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=aabd41cafc1a79f5ad124a31a360ab0442c13efd", "patch": "@@ -292,7 +292,7 @@ impl AssistBuilder {\n     }\n     pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n         let file_system_edit =\n-            FileSystemEdit::CreateFile { dst: dst, initial_contents: content.into() };\n+            FileSystemEdit::CreateFile { dst, initial_contents: content.into() };\n         self.source_change.push_file_system_edit(file_system_edit);\n     }\n "}, {"sha": "2dc13c293a60fc86428bbb9d7638e442067fcf60", "filename": "crates/ide_completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=aabd41cafc1a79f5ad124a31a360ab0442c13efd", "patch": "@@ -91,7 +91,7 @@ enum State {\n impl FormatStrParser {\n     pub(crate) fn new(input: String) -> Self {\n         Self {\n-            input: input,\n+            input,\n             output: String::new(),\n             extracted_expressions: Vec::new(),\n             state: State::NotExpr,"}, {"sha": "444c6b0afd0ef2c16106ffda6f8e3eb0baca5308", "filename": "crates/ide_ssr/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ftests.rs?ref=aabd41cafc1a79f5ad124a31a360ab0442c13efd", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn single_file(code: &str) -> (ide_db::RootDatabase, FilePosition, Ve\n     match range_or_offset {\n         RangeOrOffset::Range(range) => {\n             position = FilePosition { file_id, offset: range.start() };\n-            selections = vec![FileRange { file_id, range: range }];\n+            selections = vec![FileRange { file_id, range }];\n         }\n         RangeOrOffset::Offset(offset) => {\n             position = FilePosition { file_id, offset };"}, {"sha": "49a1375778f0ea57c62031f94ea2e9ec05d5c2df", "filename": "crates/mbe/src/expander/transcriber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Ftranscriber.rs?ref=aabd41cafc1a79f5ad124a31a360ab0442c13efd", "patch": "@@ -55,7 +55,7 @@ pub(super) fn transcribe(\n     template: &MetaTemplate,\n     bindings: &Bindings,\n ) -> ExpandResult<tt::Subtree> {\n-    let mut ctx = ExpandCtx { bindings: bindings, nesting: Vec::new() };\n+    let mut ctx = ExpandCtx { bindings, nesting: Vec::new() };\n     let mut arena: Vec<tt::TokenTree> = Vec::new();\n     expand_subtree(&mut ctx, template, None, &mut arena)\n }"}, {"sha": "a30818982d1477533a601e7f5cec8a79cb371001", "filename": "crates/proc_macro_srv/src/proc_macro/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabd41cafc1a79f5ad124a31a360ab0442c13efd/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs?ref=aabd41cafc1a79f5ad124a31a360ab0442c13efd", "patch": "@@ -91,7 +91,7 @@ impl<'a> Iterator for Children<'a> {\n impl Diagnostic {\n     /// Creates a new diagnostic with the given `level` and `message`.\n     pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n-        Diagnostic { level: level, message: message.into(), spans: vec![], children: vec![] }\n+        Diagnostic { level, message: message.into(), spans: vec![], children: vec![] }\n     }\n \n     /// Creates a new diagnostic with the given `level` and `message` pointing to\n@@ -102,7 +102,7 @@ impl Diagnostic {\n         T: Into<String>,\n     {\n         Diagnostic {\n-            level: level,\n+            level,\n             message: message.into(),\n             spans: spans.into_spans(),\n             children: vec![],"}]}