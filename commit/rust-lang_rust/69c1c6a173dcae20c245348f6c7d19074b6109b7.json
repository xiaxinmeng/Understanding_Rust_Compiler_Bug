{"sha": "69c1c6a173dcae20c245348f6c7d19074b6109b7", "node_id": "C_kwDOAAsO6NoAKDY5YzFjNmExNzNkY2FlMjBjMjQ1MzQ4ZjZjN2QxOTA3NGI2MTA5Yjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T07:33:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T07:33:59Z"}, "message": "Auto merge of #89250 - Aaron1011:keep-bound-region-names, r=estebank\n\nDon't anonymize bound region names during typeck\n\nOnce this anonymization has performed, we have no\nway of recovering the original names during NLL\nborrow checking. Keeping the original names allows\nerror messages in full NLL mode to contain the original\nbound region names.\n\nAs a result, the typeck results may contain types that\ndiffer only in the names used for their bound regions. However,\nanonimization of bound regions does not guarantee that\nall distinct types are unqual (e.g. not subtypes of each other).\nFor example, `for<'a> fn(&'a u32, &'a u32)` and\n`for<'b, 'c> fn(&'b u32, &'c u32)` are subtypes of each other,\nas explained here:\n\nhttps://github.com/rust-lang/rust/blob/63cc2bb3d07d6c726dfcdc5f95cbe5ed4760641a/compiler/rustc_infer/src/infer/nll_relate/mod.rs#L682-L690\n\nTherefore, any code handling types with higher-ranked regions already\nneeds to handle the case where two distinct `Ty`s are 'actually'\nequal.", "tree": {"sha": "65a96f64fa157e3f1a4dafaf22d4086e473d816e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a96f64fa157e3f1a4dafaf22d4086e473d816e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69c1c6a173dcae20c245348f6c7d19074b6109b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69c1c6a173dcae20c245348f6c7d19074b6109b7", "html_url": "https://github.com/rust-lang/rust/commit/69c1c6a173dcae20c245348f6c7d19074b6109b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69c1c6a173dcae20c245348f6c7d19074b6109b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9", "html_url": "https://github.com/rust-lang/rust/commit/30acf6def32a340b4bfce6e1e2638f1b05ac2cd9"}, {"sha": "78013f296acd79af84dede7dae1580fd36480c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/78013f296acd79af84dede7dae1580fd36480c7c", "html_url": "https://github.com/rust-lang/rust/commit/78013f296acd79af84dede7dae1580fd36480c7c"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "2c0d926dd015e7e1ad831957488c4de15c08bf60", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -736,14 +736,40 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     }\n }\n \n+struct EraseEarlyRegions<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        if ty.has_type_flags(ty::TypeFlags::HAS_POTENTIAL_FREE_REGIONS) {\n+            ty.super_fold_with(self)\n+        } else {\n+            ty\n+        }\n+    }\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        if let ty::ReLateBound(..) = r { r } else { self.tcx.lifetimes.re_erased }\n+    }\n+}\n+\n impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match self.infcx.fully_resolve(t) {\n-            Ok(t) => self.infcx.tcx.erase_regions(t),\n+            Ok(t) => {\n+                // Do not anonymize late-bound regions\n+                // (e.g. keep `for<'a>` named `for<'a>`).\n+                // This allows NLL to generate error messages that\n+                // refer to the higher-ranked lifetime names written by the user.\n+                EraseEarlyRegions { tcx: self.infcx.tcx }.fold_ty(t)\n+            }\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 self.report_type_error(t);"}, {"sha": "87d826021b703f6a00fcbf208e6d2d549806a56b", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u3\n LL | | for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n    | |_____________________________________________- in this macro invocation\n    |\n-   = note: expected enum `Option<for<'r, 's> fn(&'r u32, &'s u32) -> &'r u32>`\n-              found enum `Option<for<'r> fn(&'r u32, &'r u32) -> &'r u32>`\n+   = note: expected enum `Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n+              found enum `Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "bd97f6f090646399877a4762eb5053ee2b5445a4", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -8,7 +8,7 @@ LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | | fn(&'x u32)) }\n    | |______________- in this macro invocation\n    |\n-   = note: expected enum `Option<for<'r> fn(&'r u32)>`\n+   = note: expected enum `Option<for<'a> fn(&'a u32)>`\n               found enum `Option<fn(&u32)>`\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "874909bf486c8c9c05cee57c934343d9ef48b75f", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________- in this macro invocation\n    |\n-   = note: expected enum `Option<for<'r, 's> fn(Inv<'r>, Inv<'s>)>`\n-              found enum `Option<for<'r> fn(Inv<'r>, Inv<'r>)>`\n+   = note: expected enum `Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n+              found enum `Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n@@ -22,8 +22,8 @@ LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________- in this macro invocation\n    |\n-   = note: expected enum `Option<for<'r, 's> fn(Inv<'r>, Inv<'s>)>`\n-              found enum `Option<for<'r> fn(Inv<'r>, Inv<'r>)>`\n+   = note: expected enum `Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n+              found enum `Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n    = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "5ac392914e57bba9a65ee603c86ee454175daaf5", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nll.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |         _ => y,\n    |              ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r, 's> fn(&'r u8, &'s u8) -> &'r u8`\n-              found fn pointer `for<'r> fn(&'r u8, &'r u8) -> &'r u8`\n+   = note: expected fn pointer `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+              found fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n \n error: aborting due to previous error\n "}, {"sha": "355f0754ab1b8040308489cb31191a84491d7e05", "filename": "src/test/ui/lub-glb/old-lub-glb-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL |         _ => y,\n    |              ^ one type is more general than the other\n    |\n-   = note: expected trait object `dyn for<'r, 's> Foo<&'r u8, &'s u8>`\n-              found trait object `dyn for<'r> Foo<&'r u8, &'r u8>`\n+   = note: expected trait object `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found trait object `dyn for<'a> Foo<&'a u8, &'a u8>`\n \n error[E0308]: mismatched types\n   --> $DIR/old-lub-glb-object.rs:10:14\n    |\n LL |         _ => y,\n    |              ^ one type is more general than the other\n    |\n-   = note: expected trait object `dyn for<'r, 's> Foo<&'r u8, &'s u8>`\n-              found trait object `dyn for<'r> Foo<&'r u8, &'r u8>`\n+   = note: expected trait object `dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found trait object `dyn for<'a> Foo<&'a u8, &'a u8>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6256c4a01d386257c2dc537fef87f9f06a6241d3", "filename": "src/test/ui/nll/relate_tys/fn-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let y: for<'a> fn(&'a ()) = x;\n    |                                 ^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r> fn(&'r ())`\n+   = note: expected fn pointer `for<'a> fn(&'a ())`\n               found fn pointer `fn(&())`\n \n error: aborting due to previous error"}, {"sha": "b839015f97f6140e2734c20fe7332104b6912ae2", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n    |                                                          ^^^^^^^^^ one type is more general than the other\n    |\n-   = note: expected fn pointer `for<'r, 's> fn(&'r u32, &'s u32) -> &'r u32`\n+   = note: expected fn pointer `for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32`\n               found fn pointer `for<'a> fn(&'a u32, &'a u32) -> &'a u32`\n \n error[E0308]: mismatched types\n@@ -14,7 +14,7 @@ LL |     let _: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected fn pointer `for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32`\n-              found fn pointer `for<'r> fn(&'r u32, &'r u32) -> &'r u32`\n+              found fn pointer `for<'a> fn(&'a u32, &'a u32) -> &'a u32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6d144a4be6ed38e9d583efd1ead55311afdd6846", "filename": "src/test/ui/nll/relate_tys/trait-hrtb.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let y: Box<dyn for<'a> Foo<'a>> = x;\n    |                                       ^ one type is more general than the other\n    |\n-   = note: expected trait object `dyn for<'r> Foo<'r>`\n+   = note: expected trait object `dyn for<'a> Foo<'a>`\n               found trait object `dyn Foo<'_>`\n \n error: aborting due to previous error"}, {"sha": "7f15c1c1f57703473063f94fe6dfabd02498192f", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69c1c6a173dcae20c245348f6c7d19074b6109b7/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=69c1c6a173dcae20c245348f6c7d19074b6109b7", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | };\n    | |_^ one type is more general than the other\n    |\n-   = note: expected type `for<'r, 's> Fn<(&'r Foo<'s>,)>`\n+   = note: expected type `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n               found type `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n@@ -46,7 +46,7 @@ LL | |\n LL | | };\n    | |_^ one type is more general than the other\n    |\n-   = note: expected type `for<'r, 's> Fn<(&'r Foo<'s>,)>`\n+   = note: expected type `for<'a, 'b> Fn<(&'a Foo<'b>,)>`\n               found type `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n@@ -61,7 +61,7 @@ LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'_>,)>`, for any lifetime `'1`...\n+   = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'b>,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n@@ -76,7 +76,7 @@ LL | |\n LL | | };\n    | |_^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `fn(&Foo<'2>) -> &Foo<'2> {id::<&Foo<'2>>}` must implement `FnOnce<(&Foo<'1>,)>`, for any lifetime `'1`...\n+   = note: `fn(&Foo<'2>) -> &Foo<'2> {id::<&Foo<'2>>}` must implement `FnOnce<(&'a Foo<'1>,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&Foo<'2>,)>`, for some specific lifetime `'2`\n \n error: aborting due to 5 previous errors"}]}