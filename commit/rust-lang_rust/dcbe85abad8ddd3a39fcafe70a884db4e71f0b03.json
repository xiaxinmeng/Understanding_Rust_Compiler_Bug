{"sha": "dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYmU4NWFiYWQ4ZGRkM2EzOWZjYWZlNzBhODg0ZGI0ZTcxZjBiMDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-01T17:37:52Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-04T17:10:57Z"}, "message": "Explain exhaustive matching on {usize,isize} maximum values", "tree": {"sha": "3a4ea5b4c65c9b08aa9ecfeed37dd7c0ebdf02b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a4ea5b4c65c9b08aa9ecfeed37dd7c0ebdf02b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl8AuCEACgkQsJhshcDi\n2qF1kg//T0+ixj9BJ5sl5y/ykrh8Gpv6nHtcWI5A0LblIqpZXUJjolZ+jV0/L/gE\nsIs2IZJcJjbESm4tYinKIIsx17L2lhc1+KgWRkpV0crGOZ5sp8UWVzHLOy44CR34\n1T298qFBnMk2Cp5uZA8tqUDH1Qp0COEQm+ZXzcpkpIP2MoTOfbqS563Hr5X64z+L\nPtVuQ9i02ZpHQP09/f8sFB/P+NU/7pxBOLtMDeK9eLr/N2FQT756KZ+J78lszfcI\nuO4xTPyahmfxvhDQqPVsjW1X5QdUdZ3wlBTWhNeM9Zatn+v5HT2MHD1NasbGix7G\nCNIwvNsH8XFCmBFJy0u4SqTI18PEAbiulCR6lI5sRwQhhUNWdvU27QR/YbVrbZ2E\nO5cxHUFZAlcDPiEGvIp/o3GbLVzRUJQ0Zg6S+yf11feB6UETjFmDIqxHzVrUWe8u\nG26ay+lTkjZ6mvD4LqywKwGtLbpoPaKZ7T3grcfjx/JfBippZdX6VVOwYp7CfN6f\nb/ulikhGzJ+es1KCDnUdC4LLbwdhZwR/JRR3EucG9OTTa77yyiiAyMMcA6xiim+q\nsYuMM3OMCtCIi+1+hRffL9t7AvHx1N2zz4LMPI2kPdsfWB8JEyIRYpiw0R6Dn0VY\nvijSnPVvo786pSGZBXDV3XzfDm3T25LdLvqmeG5NPsJYAmSmvdU=\n=rCj1\n-----END PGP SIGNATURE-----", "payload": "tree 3a4ea5b4c65c9b08aa9ecfeed37dd7c0ebdf02b3\nparent 0cd7ff7ddfb75a38dca81ad3e76b1e984129e939\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1593625072 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1593882657 +0900\n\nExplain exhaustive matching on {usize,isize} maximum values\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "html_url": "https://github.com/rust-lang/rust/commit/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "6a68c915889445102f5d2b0861f8c4efdba5822b", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "patch": "@@ -468,14 +468,14 @@ fn check_exhaustive<'p, 'tcx>(\n     // In the case of an empty match, replace the '`_` not covered' diagnostic with something more\n     // informative.\n     let mut err;\n+    let joined_patterns = joined_uncovered_patterns(&witnesses);\n     if is_empty_match && !non_empty_enum {\n         err = create_e0004(\n             cx.tcx.sess,\n             sp,\n             format!(\"non-exhaustive patterns: type `{}` is non-empty\", scrut_ty),\n         );\n     } else {\n-        let joined_patterns = joined_uncovered_patterns(&witnesses);\n         err = create_e0004(\n             cx.tcx.sess,\n             sp,\n@@ -490,6 +490,14 @@ fn check_exhaustive<'p, 'tcx>(\n          possibly by adding wildcards or more match arms\",\n     );\n     err.note(&format!(\"the matched value is of type `{}`\", scrut_ty));\n+    if (scrut_ty == cx.tcx.types.usize || scrut_ty == cx.tcx.types.isize)\n+        && joined_patterns == \"`_`\"\n+    {\n+        err.note(\"for `usize` and `isize`, no assumptions about the maximum value are permitted\");\n+        err.note(\n+            \"to exhaustively match on either pointer-size integer type, wildcards must be used\",\n+        );\n+    }\n     err.emit();\n }\n "}, {"sha": "8aa1534b27689c135a6f5cd3c2f5ac7fad97fd93", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "patch": "@@ -6,6 +6,8 @@ LL |     match 0usize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n+   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n+   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n@@ -15,6 +17,8 @@ LL |     match 0isize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n+   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n+   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n \n error: aborting due to 2 previous errors\n "}, {"sha": "aa6a3ffc522ef0f1a5914936907c8dcba0328021", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs?ref=dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "patch": "@@ -0,0 +1,21 @@\n+use std::{usize, isize};\n+\n+fn main() {\n+    match 0usize {\n+        //~^ ERROR non-exhaustive patterns\n+        //~| NOTE pattern `_` not covered\n+        //~| NOTE the matched value is of type `usize`\n+        //~| NOTE for `usize` and `isize`, no assumptions about the maximum value are permitted\n+        //~| NOTE to exhaustively match on either pointer-size integer type, wildcards must be used\n+        0 ..= usize::MAX => {}\n+    }\n+\n+    match 0isize {\n+        //~^ ERROR non-exhaustive patterns\n+        //~| NOTE pattern `_` not covered\n+        //~| NOTE the matched value is of type `isize`\n+        //~| NOTE for `usize` and `isize`, no assumptions about the maximum value are permitted\n+        //~| NOTE to exhaustively match on either pointer-size integer type, wildcards must be used\n+        isize::MIN ..= isize::MAX => {}\n+    }\n+}"}, {"sha": "cd47e74fa46431f2f1afaff222b05f06e3081901", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr?ref=dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "patch": "@@ -0,0 +1,25 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:4:11\n+   |\n+LL |     match 0usize {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n+   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:13:11\n+   |\n+LL |     match 0isize {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n+   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n+   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}]}