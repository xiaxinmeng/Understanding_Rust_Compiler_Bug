{"sha": "2ac21889bcc0634eabd1ff36491042fd0dae003f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzIxODg5YmNjMDYzNGVhYmQxZmYzNjQ5MTA0MmZkMGRhZTAwM2Y=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T10:58:43Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T20:02:59Z"}, "message": "Use diagnostic items for `BinaryHeap`, `BTreeMap`, `BTreeSet`, `HashMap`, `HashSet`, `Borrow`, `Default`", "tree": {"sha": "f37dfec8bae9b197a1aab12313730e38ec1e6d32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f37dfec8bae9b197a1aab12313730e38ec1e6d32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac21889bcc0634eabd1ff36491042fd0dae003f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac21889bcc0634eabd1ff36491042fd0dae003f", "html_url": "https://github.com/rust-lang/rust/commit/2ac21889bcc0634eabd1ff36491042fd0dae003f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac21889bcc0634eabd1ff36491042fd0dae003f/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07feca40c3eed82592b1e4862f9e67f57a880d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07feca40c3eed82592b1e4862f9e67f57a880d1", "html_url": "https://github.com/rust-lang/rust/commit/f07feca40c3eed82592b1e4862f9e67f57a880d1"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "7a5a37e22016918f54d3307bb916ec5c66aadb1b", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -19,10 +19,9 @@ use rustc_typeck::hir_ty_to_ty;\n use if_chain::if_chain;\n \n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n-use clippy_utils::paths;\n+use clippy_utils::differing_macro_contexts;\n use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{differing_macro_contexts, match_def_path};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for public `impl` or `fn` missing generalization\n@@ -339,7 +338,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n                     return;\n                 }\n \n-                if match_def_path(self.cx, ty_did, &paths::HASHMAP) {\n+                if self.cx.tcx.is_diagnostic_item(sym::hashmap_type, ty_did) {\n                     if method.ident.name == sym::new {\n                         self.suggestions\n                             .insert(e.span, \"HashMap::default()\".to_string());\n@@ -352,7 +351,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n                             ),\n                         );\n                     }\n-                } else if match_def_path(self.cx, ty_did, &paths::HASHSET) {\n+                } else if self.cx.tcx.is_diagnostic_item(sym::hashset_type, ty_did) {\n                     if method.ident.name == sym::new {\n                         self.suggestions\n                             .insert(e.span, \"HashSet::default()\".to_string());"}, {"sha": "3ba56a9294f2a8165eaf7e8e882a49bd088c8e75", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -59,9 +59,9 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     is_type_diagnostic_item(cx, ty, sym::hashmap_type) ||\n     is_type_diagnostic_item(cx, ty, sym::hashset_type) ||\n     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n-    match_type(cx, ty, &paths::BINARY_HEAP) ||\n-    match_type(cx, ty, &paths::BTREEMAP) ||\n-    match_type(cx, ty, &paths::BTREESET)\n+    is_type_diagnostic_item(cx, ty, sym::BinaryHeap) ||\n+    is_type_diagnostic_item(cx, ty, sym::BTreeMap) ||\n+    is_type_diagnostic_item(cx, ty, sym::BTreeSet)\n }\n \n fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {"}, {"sha": "82bf49f5b49a46c499158445258d5f1808835464", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -1,9 +1,9 @@\n use super::FOR_KV_MAP;\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::LocalUsedVisitor;\n-use clippy_utils::{paths, sugg};\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n@@ -39,7 +39,7 @@ pub(super) fn check<'tcx>(\n                 _ => arg,\n             };\n \n-            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP) {\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || is_type_diagnostic_item(cx, ty, sym::BTreeMap) {\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,"}, {"sha": "de73af8bf60dd39b18c0d3205dd70b951b1cf60b", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -1793,7 +1793,7 @@ mod redundant_pattern_match {\n             || is_type_diagnostic_item(cx, ty, sym::Rc)\n             || is_type_diagnostic_item(cx, ty, sym::Arc)\n             || is_type_diagnostic_item(cx, ty, sym::cstring_type)\n-            || match_type(cx, ty, &paths::BTREEMAP)\n+            || is_type_diagnostic_item(cx, ty, sym::BTreeMap)\n             || match_type(cx, ty, &paths::LINKED_LIST)\n             || match_type(cx, ty, &paths::WEAK_RC)\n             || match_type(cx, ty, &paths::WEAK_ARC)"}, {"sha": "66fb85deae5e62244f2a3899b76c04aafb4afaa0", "filename": "clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -1,8 +1,8 @@\n use super::utils::derefs_to_slice;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::get_parent_expr;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n-use clippy_utils::{get_parent_expr, paths};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -36,7 +36,7 @@ pub(super) fn check<'tcx>(\n     } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::hashmap_type) {\n         needs_ref = true;\n         \"HashMap\"\n-    } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {\n+    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::BTreeMap) {\n         needs_ref = true;\n         \"BTreeMap\"\n     } else {"}, {"sha": "f8a38e67d00d4e26c6518a0afcfebe6ad9736a28", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -22,13 +22,13 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         \"HashSet\"\n     } else if is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n         \"HashMap\"\n-    } else if match_type(cx, ty, &paths::BTREEMAP) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::BTreeMap) {\n         \"BTreeMap\"\n-    } else if match_type(cx, ty, &paths::BTREESET) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::BTreeSet) {\n         \"BTreeSet\"\n     } else if match_type(cx, ty, &paths::LINKED_LIST) {\n         \"LinkedList\"\n-    } else if match_type(cx, ty, &paths::BINARY_HEAP) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::BinaryHeap) {\n         \"BinaryHeap\"\n     } else {\n         return;"}, {"sha": "ef615b0aa40a8e61995b4e63692ab9fe86d4cc3e", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::is_lazyness_candidate;\n use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type};\n-use clippy_utils::{contains_return, get_trait_def_id, last_path_segment, paths};\n+use clippy_utils::{contains_return, last_path_segment, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -41,7 +41,7 @@ pub(super) fn check<'tcx>(\n             let path = last_path_segment(qpath).ident.name;\n             if matches!(path, kw::Default | sym::new);\n             let arg_ty = cx.typeck_results().expr_ty(arg);\n-            if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n+            if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n             if implements_trait(cx, arg_ty, default_trait_id, &[]);\n \n             then {"}, {"sha": "d86f9b36f90fad9bd1340ff7a4b6df798570f81e", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_def_path, paths, trait_ref_of_method};\n+use clippy_utils::trait_ref_of_method;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::sym;\n use std::iter;\n \n declare_clippy_lint! {\n@@ -99,9 +100,9 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::\n fn check_ty<'tcx>(cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n     let ty = ty.peel_refs();\n     if let Adt(def, substs) = ty.kind() {\n-        if [&paths::HASHMAP, &paths::BTREEMAP, &paths::HASHSET, &paths::BTREESET]\n+        if [sym::hashmap_type, sym::BTreeMap, sym::hashset_type, sym::BTreeMap]\n             .iter()\n-            .any(|path| match_def_path(cx, def.did, &**path))\n+            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did))\n             && is_mutable_type(cx, substs.type_at(0), span)\n         {\n             span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");"}, {"sha": "e03b3d25721b050b25cac110395b17f2b89303a8", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -103,7 +103,6 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         // Allow `Borrow` or functions to be taken by value\n-        let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n         let allowed_traits = [\n             need!(cx.tcx.lang_items().fn_trait()),\n             need!(cx.tcx.lang_items().fn_once_trait()),\n@@ -167,7 +166,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 let preds = preds.iter().filter(|t| t.self_ty() == ty).collect::<Vec<_>>();\n \n                 (\n-                    preds.iter().any(|t| t.def_id() == borrow_trait),\n+                    preds.iter().any(|t| cx.tcx.is_diagnostic_item(sym::Borrow, t.def_id())),\n                     !preds.is_empty() && {\n                         let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_root_empty, ty);\n                         preds.iter().all(|t| {"}, {"sha": "4d9ff7479d6025e6b3f4577e31e875cd66e6171a", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -1,8 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir_and_then;\n-use clippy_utils::paths;\n+use clippy_utils::return_ty;\n use clippy_utils::source::snippet;\n use clippy_utils::sugg::DiagnosticBuilderExt;\n-use clippy_utils::{get_trait_def_id, return_ty};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -104,7 +103,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if TyS::same_type(self_ty, return_ty(cx, id));\n-                            if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n+                            if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {\n                                     let mut impls = HirIdSet::default();"}, {"sha": "1475c90721c982a0dcb3797fb980f4dfa133c7a5", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -1,6 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::paths;\n-use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item, match_type};\n+use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -49,7 +48,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n             if !hir_ty.span.from_expansion();\n             if !in_trait_impl(cx, hir_ty.hir_id);\n             let ty = ty_from_hir_ty(cx, hir_ty);\n-            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP);\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || is_type_diagnostic_item(cx, ty, sym::BTreeMap);\n             if let Adt(_, substs) = ty.kind();\n             let ty = substs.type_at(1);\n             // Do this to prevent `layout_of` crashing, being unable to fully normalize `ty`."}, {"sha": "3acde01b8c96091591163c9af877d0e6906f78e3", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac21889bcc0634eabd1ff36491042fd0dae003f/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=2ac21889bcc0634eabd1ff36491042fd0dae003f", "patch": "@@ -21,21 +21,25 @@ pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n+/// Preferably use the diagnostic item `sym::BinaryHeap` where possible\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n+/// Preferably use the diagnostic item `sym::Borrow` where possible\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n+/// Preferably use the diagnostic item `sym::BTreeMap` where possible\n pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];\n pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n+/// Preferably use the diagnostic item `sym::BTreeSet` where possible\n pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n-pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n+/// Preferably use the diagnostic item `sym::deref_method` where possible\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n pub const DIR_BUILDER: [&str; 3] = [\"std\", \"fs\", \"DirBuilder\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n@@ -55,10 +59,12 @@ pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\"\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n+/// Preferably use the diagnostic item `sym::hashmap_type` where possible\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_CONTAINS_KEY: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"contains_key\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_INSERT: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"insert\"];\n+/// Preferably use the diagnostic item `sym::hashset_type` where possible\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n #[cfg(feature = \"internal-lints\")]\n pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];"}]}