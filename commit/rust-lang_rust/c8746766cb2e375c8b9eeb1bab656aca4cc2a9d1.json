{"sha": "c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "node_id": "C_kwDOAAsO6NoAKGM4NzQ2NzY2Y2IyZTM3NWM4YjllZWIxYmFiNjU2YWNhNGNjMmE5ZDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-17T00:21:40Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:35:11Z"}, "message": "Rework ambiguity errors", "tree": {"sha": "5d445492be1b740eaee20d4dc667cbe8221ba8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d445492be1b740eaee20d4dc667cbe8221ba8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "html_url": "https://github.com/rust-lang/rust/commit/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b29f7c2d6d4b86d5b1492f3aa63969a62b25bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b29f7c2d6d4b86d5b1492f3aa63969a62b25bf", "html_url": "https://github.com/rust-lang/rust/commit/70b29f7c2d6d4b86d5b1492f3aa63969a62b25bf"}], "stats": {"total": 240, "additions": 95, "deletions": 145}, "files": [{"sha": "6e8afd4d539e2b698624efac7d4da34ee4737689", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -122,6 +122,17 @@ pub struct Generics {\n }\n \n impl<'tcx> Generics {\n+    pub fn param_def_id_to_index(&self, tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<u32> {\n+        if let Some(idx) = self.param_def_id_to_index.get(&def_id) {\n+            Some(*idx)\n+        } else if let Some(parent) = self.parent {\n+            let parent = tcx.generics_of(parent);\n+            parent.param_def_id_to_index(tcx, def_id)\n+        } else {\n+            None\n+        }\n+    }\n+\n     #[inline]\n     pub fn count(&self) -> usize {\n         self.parent_count + self.params.len()"}, {"sha": "35a3ae3ebf7cc748c61a75041ec5260021600c0c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -27,13 +27,14 @@ use rustc_infer::infer::InferOk;\n use rustc_infer::infer::TypeTrace;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, DefIdTree, IsSuggestable, Ty};\n+use rustc_middle::ty::{self, DefIdTree, IsSuggestable, Ty, TypeSuperVisitable, TypeVisitor};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n use std::iter;\n+use std::ops::ControlFlow;\n use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -1649,7 +1650,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::PredicateKind::Projection(pred) => pred.projection_ty.substs,\n             _ => ty::List::empty(),\n         };\n-        let param_to_point_at = predicate_substs.types().find_map(|ty| {\n+        let mut param_to_point_at = predicate_substs.types().find_map(|ty| {\n             ty.walk().find_map(|arg| {\n                 if let ty::GenericArgKind::Type(ty) = arg.unpack()\n                     && let ty::Param(param_ty) = ty.kind()\n@@ -1663,7 +1664,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             })\n         });\n-        let fallback_param_to_point_at = predicate_substs.types().find_map(|ty| {\n+        let mut fallback_param_to_point_at = predicate_substs.types().find_map(|ty| {\n             ty.walk().find_map(|arg| {\n                 if let ty::GenericArgKind::Type(ty) = arg.unpack()\n                     && let ty::Param(param_ty) = ty.kind()\n@@ -1676,6 +1677,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             })\n         });\n \n+        // Also skip over ambiguity errors, which have their own machinery\n+        // to print a relevant error.\n+        if let traits::FulfillmentErrorCode::CodeAmbiguity = error.code {\n+            fallback_param_to_point_at = None;\n+            param_to_point_at =\n+                self.find_ambiguous_parameter_in(def_id, error.root_obligation.predicate);\n+        }\n+\n         let hir = self.tcx.hir();\n \n         match hir.get(hir_id) {\n@@ -1737,6 +1746,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn find_ambiguous_parameter_in<T: TypeVisitable<'tcx>>(\n+        &self,\n+        item_def_id: DefId,\n+        t: T,\n+    ) -> Option<ty::GenericArg<'tcx>> {\n+        struct FindAmbiguousParameter<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, DefId);\n+        impl<'tcx> TypeVisitor<'tcx> for FindAmbiguousParameter<'_, 'tcx> {\n+            type BreakTy = ty::GenericArg<'tcx>;\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n+                if let Some(origin) = self.0.type_var_origin(ty)\n+                    && let TypeVariableOriginKind::TypeParameterDefinition(_, Some(def_id))\n+                        = origin.kind\n+                    && let generics = self.0.tcx.generics_of(self.1)\n+                    && let Some(index) = generics.param_def_id_to_index(self.0.tcx, def_id)\n+                    && let Some(subst) = ty::InternalSubsts::identity_for_item(self.0.tcx, self.1).get(index as usize)\n+                {\n+                    ControlFlow::Break(*subst)\n+                } else {\n+                    ty.super_visit_with(self)\n+                }\n+            }\n+        }\n+        t.visit_with(&mut FindAmbiguousParameter(self, item_def_id)).break_value()\n+    }\n+\n     fn point_at_args_if_possible(\n         &self,\n         error: &mut traits::FulfillmentError<'tcx>,"}, {"sha": "90a28874ead8c7a073e535597305186689b0270b", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -12,24 +12,11 @@ help: use a fully-qualified path to a specific available implementation (2 found\n LL |     let cont: u32 = <::Impl as Generator>::create();\n    |                     ++++++++++          +\n \n-error[E0282]: type annotations needed\n-  --> $DIR/E0283.rs:35:24\n-   |\n-LL |     let bar = foo_impl.into() * 1u32;\n-   |                        ^^^^\n-   |\n-help: try using a fully qualified path to specify the expected types\n-   |\n-LL |     let bar = <Impl as Into<T>>::into(foo_impl) * 1u32;\n-   |               ++++++++++++++++++++++++        ~\n-\n error[E0283]: type annotations needed\n   --> $DIR/E0283.rs:35:24\n    |\n LL |     let bar = foo_impl.into() * 1u32;\n-   |               -------- ^^^^\n-   |               |\n-   |               type must be known at this point\n+   |                        ^^^^\n    |\n note: multiple `impl`s satisfying `Impl: Into<_>` found\n   --> $DIR/E0283.rs:17:1\n@@ -44,7 +31,7 @@ help: try using a fully qualified path to specify the expected types\n LL |     let bar = <Impl as Into<T>>::into(foo_impl) * 1u32;\n    |               ++++++++++++++++++++++++        ~\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0282, E0283, E0790.\n-For more information about an error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0283, E0790.\n+For more information about an error, try `rustc --explain E0283`."}, {"sha": "d4eeda07366a8015c2a4c04374f6ee6b4fc32bf7", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -12,9 +12,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:7:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                  --- ^^^^^^\n-   |                  |\n-   |                  type must be known at this point\n+   |                      ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -41,9 +39,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26\n    |\n LL |     |x| String::from(\"x\".as_ref());\n-   |                      --- ^^^^^^\n-   |                      |\n-   |                      type must be known at this point\n+   |                          ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -59,9 +55,7 @@ error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:17:9\n    |\n LL |     let _ = \"x\".as_ref();\n-   |         ^   --- ------ required by a bound introduced by this call\n-   |             |\n-   |             type must be known at this point\n+   |         ^       ------ type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -87,9 +81,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:21:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                  --- ^^^^^^\n-   |                  |\n-   |                  type must be known at this point\n+   |                      ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -115,9 +107,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:28:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                  --- ^^^^^^\n-   |                  |\n-   |                  type must be known at this point\n+   |                      ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -143,9 +133,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:37:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                  --- ^^^^^^\n-   |                  |\n-   |                  type must be known at this point\n+   |                      ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -171,9 +159,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:46:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                  --- ^^^^^^\n-   |                  |\n-   |                  type must be known at this point\n+   |                      ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -199,9 +185,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:53:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                  --- ^^^^^^\n-   |                  |\n-   |                  type must be known at this point\n+   |                      ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -227,9 +211,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:62:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                  --- ^^^^^^\n-   |                  |\n-   |                  type must be known at this point\n+   |                      ^^^^^^\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;"}, {"sha": "9d11cf19ea77c41a2f65c2c1f18e5aea41ed7f66", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -14,10 +14,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-69455.rs:29:41\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n-   |                    ----- ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n-   |                    |     |\n-   |                    |     required by a bound introduced by this call\n-   |                    type must be known at this point\n+   |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                          |\n+   |                          required by a bound introduced by this call\n    |\n note: multiple `impl`s satisfying `u64: Test<_>` found\n   --> $DIR/issue-69455.rs:11:1"}, {"sha": "e0f8a5447b081b884cf4640562efe0cd8ff1a4db", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -13,9 +13,7 @@ error[E0283]: type annotations needed\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:26:7\n    |\n LL |     x.foo();\n-   |     - ^^^\n-   |     |\n-   |     type must be known at this point\n+   |       ^^^\n    |\n note: multiple `impl`s satisfying `Vec<_>: Foo` found\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:9:1"}, {"sha": "57b2587ae5ccd02a4b3dd2b1e3f9859b530890ed", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -13,9 +13,7 @@ error[E0283]: type annotations needed\n   --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n    |\n LL |     thing.method(42);\n-   |     ----- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |           ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing<bool>: Method<_>` found\n   --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:7:1"}, {"sha": "e210f11b3e0c12a49439fc5f7144d2c7453802c4", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -24,9 +24,8 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:8:10\n    |\n LL |     opts.get(opt.as_ref());\n-   |          ^^^ --- ------ required by a bound introduced by this call\n-   |          |   |\n-   |          |   type must be known at this point\n+   |          ^^^     ------ type must be known at this point\n+   |          |\n    |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n    |\n    = note: multiple `impl`s satisfying `String: AsRef<_>` found in the following crates: `alloc`, `std`:\n@@ -39,24 +38,13 @@ help: consider specifying the generic argument\n LL |     opts.get::<Q>(opt.as_ref());\n    |             +++++\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-77982.rs:13:59\n-   |\n-LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n-   |                                                           ^^^^\n-   |\n-help: try using a fully qualified path to specify the expected types\n-   |\n-LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(<u32 as Into<T>>::into(0u32))).collect();\n-   |                                                      +++++++++++++++++++++++    ~\n-\n error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:13:59\n    |\n LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n    |                                            ---------      ^^^^\n    |                                            |\n-   |                                            type must be known at this point\n+   |                                            required by a bound introduced by this call\n    |\n    = note: multiple `impl`s satisfying `u32: From<_>` found in the following crates: `core`, `std`:\n            - impl From<Ipv4Addr> for u32;\n@@ -73,9 +61,7 @@ error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:36:9\n    |\n LL |     let _ = ().foo();\n-   |         ^   -- --- required by a bound introduced by this call\n-   |             |\n-   |             type must be known at this point\n+   |         ^      --- type must be known at this point\n    |\n note: multiple `impl`s satisfying `(): Foo<'_, _>` found\n   --> $DIR/issue-77982.rs:29:1\n@@ -93,9 +79,7 @@ error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:40:9\n    |\n LL |     let _ = (&()).bar();\n-   |         ^   ----- --- required by a bound introduced by this call\n-   |             |\n-   |             type must be known at this point\n+   |         ^         --- type must be known at this point\n    |\n note: multiple `impl`s satisfying `&(): Bar<'_, _>` found\n   --> $DIR/issue-77982.rs:32:1\n@@ -109,7 +93,6 @@ help: consider giving this pattern a type, where the type for type parameter `T`\n LL |     let _: Box<T> = (&()).bar();\n    |          ++++++++\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0282, E0283.\n-For more information about an error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "6e6172eea474660f78edbb631b50bf94ea6b948e", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -13,7 +13,7 @@ error[E0283]: type annotations needed\n   --> $DIR/multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n-   |     ^^^^ -- type must be known at this point\n+   |     ^^^^     -------------------------------- type must be known at this point\n    |     |\n    |     cannot infer type of the type parameter `U` declared on the function `test`\n    |"}, {"sha": "53178328c56af7bbd408bd1864cd4af387d1c846", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -13,9 +13,7 @@ error[E0283]: type annotations needed\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:21:7\n    |\n LL |     a.method();\n-   |     - ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |       ^^^^^^\n    |\n note: multiple `impl`s satisfying `B: I<_>` found\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:5:1"}, {"sha": "68b31a1ca34e30d7bd3a11b8e277b4e4c030a760", "filename": "src/test/ui/traits/suggest-fully-qualified-path-with-adjustment.stderr", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-adjustment.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -13,9 +13,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:45:11\n    |\n LL |     thing.method();\n-   |     ----- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |           ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -34,9 +32,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:48:11\n    |\n LL |     thing.mut_method();\n-   |     ----- ^^^^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |           ^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -55,9 +51,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:49:11\n    |\n LL |     thing.by_self();\n-   |     ----- ^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |           ^^^^^^^\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:22:1\n@@ -76,9 +70,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:52:14\n    |\n LL |     deref_to.method();\n-   |     -------- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |              ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -97,9 +89,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:53:14\n    |\n LL |     deref_to.mut_method();\n-   |     -------- ^^^^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |              ^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -118,9 +108,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:54:14\n    |\n LL |     deref_to.by_self();\n-   |     -------- ^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |              ^^^^^^^\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:22:1\n@@ -139,9 +127,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:57:20\n    |\n LL |     deref_deref_to.method();\n-   |     -------------- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |                    ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -160,9 +146,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:58:20\n    |\n LL |     deref_deref_to.mut_method();\n-   |     -------------- ^^^^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |                    ^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -181,9 +165,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:59:20\n    |\n LL |     deref_deref_to.by_self();\n-   |     -------------- ^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |                    ^^^^^^^\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:22:1"}, {"sha": "27518a54e7507d221137b7edd331221f8dc06ff1", "filename": "src/test/ui/traits/suggest-fully-qualified-path-without-adjustment.stderr", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-without-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-without-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-without-adjustment.stderr?ref=c8746766cb2e375c8b9eeb1bab656aca4cc2a9d1", "patch": "@@ -13,9 +13,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:45:15\n    |\n LL |     ref_thing.method();\n-   |     --------- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |               ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -34,9 +32,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:48:15\n    |\n LL |     ref_thing.by_self();\n-   |     --------- ^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |               ^^^^^^^\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1\n@@ -55,9 +51,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:51:15\n    |\n LL |     mut_thing.method();\n-   |     --------- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |               ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -76,9 +70,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:52:15\n    |\n LL |     mut_thing.mut_method();\n-   |     --------- ^^^^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |               ^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -97,9 +89,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:53:15\n    |\n LL |     mut_thing.by_self();\n-   |     --------- ^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |               ^^^^^^^\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1\n@@ -118,9 +108,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:56:14\n    |\n LL |     deref_to.method();\n-   |     -------- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |              ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -139,9 +127,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:57:14\n    |\n LL |     deref_to.mut_method();\n-   |     -------- ^^^^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |              ^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -160,9 +146,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:58:14\n    |\n LL |     deref_to.by_self();\n-   |     -------- ^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |              ^^^^^^^\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1\n@@ -181,9 +165,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:61:20\n    |\n LL |     deref_deref_to.method();\n-   |     -------------- ^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |                    ^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -202,9 +184,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:62:20\n    |\n LL |     deref_deref_to.mut_method();\n-   |     -------------- ^^^^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |                    ^^^^^^^^^^\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -223,9 +203,7 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:63:20\n    |\n LL |     deref_deref_to.by_self();\n-   |     -------------- ^^^^^^^\n-   |     |\n-   |     type must be known at this point\n+   |                    ^^^^^^^\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1"}]}