{"sha": "f789c40e1db516385c0fef0cd2b986440246ad1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODljNDBlMWRiNTE2Mzg1YzBmZWYwY2QyYjk4NjQ0MDI0NmFkMWE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-15T09:20:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-15T09:20:52Z"}, "message": "Merge pull request #94 from solson/revert-93-always_encode_mir\n\nRevert \"rustup to rustc 1.15.0-dev (ace092f56 2016-12-13)\"", "tree": {"sha": "21c46dfd1b47b50894f53dec1ae189772c270215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c46dfd1b47b50894f53dec1ae189772c270215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f789c40e1db516385c0fef0cd2b986440246ad1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f789c40e1db516385c0fef0cd2b986440246ad1a", "html_url": "https://github.com/rust-lang/rust/commit/f789c40e1db516385c0fef0cd2b986440246ad1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f789c40e1db516385c0fef0cd2b986440246ad1a/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbffb3bd8c6301eb12593c425621c4c1634b1e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbffb3bd8c6301eb12593c425621c4c1634b1e0a", "html_url": "https://github.com/rust-lang/rust/commit/cbffb3bd8c6301eb12593c425621c4c1634b1e0a"}, {"sha": "0deabf9c00edb1943ef1e02ec802b5dc6dfa1c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/0deabf9c00edb1943ef1e02ec802b5dc6dfa1c83", "html_url": "https://github.com/rust-lang/rust/commit/0deabf9c00edb1943ef1e02ec802b5dc6dfa1c83"}], "stats": {"total": 175, "additions": 78, "deletions": 97}, "files": [{"sha": "6c0161ef0754a558597fb3673700b56ce904e5d7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=f789c40e1db516385c0fef0cd2b986440246ad1a", "patch": "@@ -10,7 +10,7 @@ extern crate syntax;\n #[macro_use] extern crate log;\n \n use rustc::session::Session;\n-use rustc_driver::CompilerCalls;\n+use rustc_driver::{CompilerCalls, Compilation};\n use rustc_driver::driver::{CompileState, CompileController};\n use syntax::ast::{MetaItemKind, NestedMetaItemKind};\n \n@@ -21,6 +21,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         let mut control = CompileController::basic();\n         control.after_hir_lowering.callback = Box::new(after_hir_lowering);\n         control.after_analysis.callback = Box::new(after_analysis);\n+        control.after_analysis.stop = Compilation::Stop;\n         control\n     }\n }\n@@ -34,16 +35,14 @@ fn after_analysis(state: &mut CompileState) {\n     state.session.abort_if_errors();\n \n     let tcx = state.tcx.unwrap();\n-    if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n-        let entry_def_id = tcx.map.local_def_id(entry_node_id);\n-        let limits = resource_limits_from_attributes(state);\n-        miri::run_mir_passes(tcx);\n-        miri::eval_main(tcx, entry_def_id, limits);\n-\n-        state.session.abort_if_errors();\n-    } else {\n-        println!(\"no main function found, assuming auxiliary build\");\n-    }\n+    let (entry_node_id, _) = state.session.entry_fn.borrow()\n+        .expect(\"no main or start function found\");\n+    let entry_def_id = tcx.map.local_def_id(entry_node_id);\n+    let limits = resource_limits_from_attributes(state);\n+    miri::run_mir_passes(tcx);\n+    miri::eval_main(tcx, entry_def_id, limits);\n+\n+    state.session.abort_if_errors();\n }\n \n fn resource_limits_from_attributes(state: &CompileState) -> miri::ResourceLimits {\n@@ -135,7 +134,6 @@ fn main() {\n         args.push(sysroot_flag);\n         args.push(find_sysroot());\n     }\n-    args.push(\"-Zalways-encode-mir\".to_owned());\n \n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls, None, None);\n }"}, {"sha": "afc1855e8e75523f59245c47f38cdc2523dd63d5", "filename": "src/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=f789c40e1db516385c0fef0cd2b986440246ad1a", "patch": "@@ -11,7 +11,6 @@ use syntax::codemap::Span;\n pub enum EvalError<'tcx> {\n     FunctionPointerTyMismatch(Abi, &'tcx FnSig<'tcx>, &'tcx BareFnTy<'tcx>),\n     NoMirFor(String),\n-    UnterminatedCString(Pointer),\n     DanglingPointerDeref,\n     InvalidMemoryAccess,\n     InvalidFunctionPointer,\n@@ -120,8 +119,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"tried to deallocate frozen memory\",\n             EvalError::Layout(_) =>\n                 \"rustc layout computation failed\",\n-            EvalError::UnterminatedCString(_) =>\n-                \"attempted to get length of a null terminated string, but no null found before end of allocation\",\n         }\n     }\n "}, {"sha": "671174fd75690bdba6f801c5b583c36017754cde", "filename": "src/memory.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=f789c40e1db516385c0fef0cd2b986440246ad1a", "patch": "@@ -530,22 +530,6 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(())\n     }\n \n-    pub fn read_c_str(&self, ptr: Pointer) -> EvalResult<'tcx, &[u8]> {\n-        let alloc = self.get(ptr.alloc_id)?;\n-        assert_eq!(ptr.offset as usize as u64, ptr.offset);\n-        let offset = ptr.offset as usize;\n-        match alloc.bytes[offset..].iter().position(|&c| c == 0) {\n-            Some(size) => {\n-                if self.relocations(ptr, (size + 1) as u64)?.count() != 0 {\n-                    return Err(EvalError::ReadPointerAsBytes);\n-                }\n-                self.check_defined(ptr, (size + 1) as u64)?;\n-                Ok(&alloc.bytes[offset..offset + size])\n-            },\n-            None => Err(EvalError::UnterminatedCString(ptr)),\n-        }\n-    }\n-\n     pub fn read_bytes(&self, ptr: Pointer, size: u64) -> EvalResult<'tcx, &[u8]> {\n         self.get_bytes(ptr, size, 1)\n     }"}, {"sha": "9be094d9bd97783d1644a732fcac24a857bd5976", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=f789c40e1db516385c0fef0cd2b986440246ad1a", "patch": "@@ -57,7 +57,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"atomic_load\" |\n-            \"atomic_load_relaxed\" |\n             \"atomic_load_acq\" |\n             \"volatile_load\" => {\n                 let ty = substs.type_at(0);"}, {"sha": "fdc7c1db6faa7b5538e2532cdbe7ffcbec3b0c81", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789c40e1db516385c0fef0cd2b986440246ad1a/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=f789c40e1db516385c0fef0cd2b986440246ad1a", "patch": "@@ -90,16 +90,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty::TyFnPtr(bare_fn_ty) => {\n                         let fn_ptr = self.eval_operand_to_primval(func)?.to_ptr();\n                         let (def_id, substs, abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                        let bare_sig = self.tcx.erase_late_bound_regions_and_normalize(&bare_fn_ty.sig);\n-                        let bare_sig = self.tcx.erase_regions(&bare_sig);\n-                        // transmuting function pointers in miri is fine as long as the number of\n-                        // arguments and the abi don't change.\n-                        // FIXME: also check the size of the arguments' type and the return type\n-                        // Didn't get it to work, since that triggers an assertion in rustc which\n-                        // checks whether the type has escaping regions\n-                        if abi != bare_fn_ty.abi ||\n-                           sig.variadic != bare_sig.variadic ||\n-                           sig.inputs().len() != bare_sig.inputs().len() {\n+                        if abi != bare_fn_ty.abi || sig != bare_fn_ty.sig.skip_binder() {\n                             return Err(EvalError::FunctionPointerTyMismatch(abi, sig, bare_fn_ty));\n                         }\n                         self.eval_fn_call(def_id, substs, bare_fn_ty, destination, args,\n@@ -198,15 +189,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use syntax::abi::Abi;\n         match fn_ty.abi {\n             Abi::RustIntrinsic => {\n-                let ty = fn_ty.sig.0.output();\n+                let ty = fn_ty.sig.0.output;\n                 let layout = self.type_layout(ty)?;\n                 let (ret, target) = destination.unwrap();\n                 self.call_intrinsic(def_id, substs, arg_operands, ret, ty, layout, target)?;\n                 Ok(())\n             }\n \n             Abi::C => {\n-                let ty = fn_ty.sig.0.output();\n+                let ty = fn_ty.sig.0.output;\n                 let (ret, target) = destination.unwrap();\n                 self.call_c_abi(def_id, arg_operands, ret, ty)?;\n                 self.goto_block(target);\n@@ -329,6 +320,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             .collect();\n         let args = args_res?;\n \n+        if link_name.starts_with(\"pthread_\") {\n+            warn!(\"ignoring C ABI call: {}\", link_name);\n+            return Ok(());\n+        }\n+\n         let usize = self.tcx.types.usize;\n \n         match &link_name[..] {\n@@ -375,37 +371,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::new(result as u64), dest_ty)?;\n             }\n \n-            \"memchr\" => {\n-                let ptr = args[0].read_ptr(&self.memory)?;\n-                let val = self.value_to_primval(args[1], usize)?.to_u64() as u8;\n-                let num = self.value_to_primval(args[2], usize)?.to_u64();\n-                if let Some(idx) = self.memory.read_bytes(ptr, num)?.iter().position(|&c| c == val) {\n-                    let new_ptr = ptr.offset(idx as u64);\n-                    self.write_value(Value::ByVal(PrimVal::from_ptr(new_ptr)), dest, dest_ty)?;\n-                } else {\n-                    self.write_value(Value::ByVal(PrimVal::new(0)), dest, dest_ty)?;\n-                }\n-            }\n-\n-            \"getenv\" => {\n-                {\n-                    let name_ptr = args[0].read_ptr(&self.memory)?;\n-                    let name = self.memory.read_c_str(name_ptr)?;\n-                    info!(\"ignored env var request for `{:?}`\", ::std::str::from_utf8(name));\n-                }\n-                self.write_value(Value::ByVal(PrimVal::new(0)), dest, dest_ty)?;\n-            }\n-\n-            // unix panic code inside libstd will read the return value of this function\n-            \"pthread_rwlock_rdlock\" => {\n-                self.write_primval(dest, PrimVal::new(0), dest_ty)?;\n-            }\n-\n-            link_name if link_name.starts_with(\"pthread_\") => {\n-                warn!(\"ignoring C ABI call: {}\", link_name);\n-                return Ok(());\n-            },\n-\n             _ => {\n                 return Err(EvalError::Unimplemented(format!(\"can't call C ABI function: {}\", link_name)));\n             }\n@@ -555,7 +520,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let offset = idx * self.memory.pointer_size();\n                     let fn_ptr = self.memory.read_ptr(vtable.offset(offset))?;\n                     let (def_id, substs, _abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                    *first_ty = sig.inputs()[0];\n+                    *first_ty = sig.inputs[0];\n                     Ok((def_id, substs, Vec::new()))\n                 } else {\n                     Err(EvalError::VtableForArgumentlessMethod)\n@@ -699,7 +664,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // some values don't need to call a drop impl, so the value is null\n                 if drop_fn != Pointer::from_int(0) {\n                     let (def_id, substs, _abi, sig) = self.memory.get_fn(drop_fn.alloc_id)?;\n-                    let real_ty = sig.inputs()[0];\n+                    let real_ty = sig.inputs[0];\n                     self.drop(Lvalue::from_ptr(ptr), real_ty, drop)?;\n                     drop.push((def_id, Value::ByVal(PrimVal::from_ptr(ptr)), substs));\n                 } else {"}, {"sha": "1ee86a07b22f58c46ef2ed05338aec5bdf60f542", "filename": "tests/compiletest.rs", "status": "modified", "additions": 58, "deletions": 12, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f789c40e1db516385c0fef0cd2b986440246ad1a/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789c40e1db516385c0fef0cd2b986440246ad1a/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=f789c40e1db516385c0fef0cd2b986440246ad1a", "patch": "@@ -27,15 +27,6 @@ fn run_pass() {\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(path: &str, target: &str) {\n-    let mut config = compiletest::default_config();\n-    config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n-    config.src_base = PathBuf::from(path);\n-    config.target = target.to_owned();\n-    config.rustc_path = PathBuf::from(\"target/debug/miri\");\n-    compiletest::run_tests(&config);\n-}\n-\n fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n     for target in std::fs::read_dir(format!(\"{}/lib/rustlib/\", sysroot)).unwrap() {\n         let target = target.unwrap();\n@@ -66,10 +57,65 @@ fn compile_test() {\n     };\n     run_pass();\n     for_all_targets(&sysroot, |target| {\n-        miri_pass(\"tests/run-pass\", &target);\n-        if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n-            miri_pass(&path, &target);\n+        let files = std::fs::read_dir(\"tests/run-pass\").unwrap();\n+        let files: Box<Iterator<Item=_>> = if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+            Box::new(files.chain(std::fs::read_dir(path).unwrap()))\n+        } else {\n+            Box::new(files)\n+        };\n+        let mut mir_not_found = 0;\n+        let mut crate_not_found = 0;\n+        let mut success = 0;\n+        let mut failed = 0;\n+        for file in files {\n+            let file = file.unwrap();\n+            let path = file.path();\n+\n+            if !file.metadata().unwrap().is_file() || !path.to_str().unwrap().ends_with(\".rs\") {\n+                continue;\n+            }\n+\n+            let stderr = std::io::stderr();\n+            write!(stderr.lock(), \"test [miri-pass] {} ... \", path.display()).unwrap();\n+            let mut cmd = std::process::Command::new(\"target/debug/miri\");\n+            cmd.arg(path);\n+            cmd.arg(format!(\"--target={}\", target));\n+            let libs = Path::new(&sysroot).join(\"lib\");\n+            let sysroot = libs.join(\"rustlib\").join(&target).join(\"lib\");\n+            let paths = std::env::join_paths(&[libs, sysroot]).unwrap();\n+            cmd.env(compiletest::procsrv::dylib_env_var(), paths);\n+\n+            match cmd.output() {\n+                Ok(ref output) if output.status.success() => {\n+                    success += 1;\n+                    writeln!(stderr.lock(), \"ok\").unwrap()\n+                },\n+                Ok(output) => {\n+                    let output_err = std::str::from_utf8(&output.stderr).unwrap();\n+                    if let Some(text) = output_err.splitn(2, \"no mir for `\").nth(1) {\n+                        mir_not_found += 1;\n+                        let end = text.find('`').unwrap();\n+                        writeln!(stderr.lock(), \"NO MIR FOR `{}`\", &text[..end]).unwrap();\n+                    } else if let Some(text) = output_err.splitn(2, \"can't find crate for `\").nth(1) {\n+                        crate_not_found += 1;\n+                        let end = text.find('`').unwrap();\n+                        writeln!(stderr.lock(), \"CAN'T FIND CRATE FOR `{}`\", &text[..end]).unwrap();\n+                    } else {\n+                        failed += 1;\n+                        writeln!(stderr.lock(), \"FAILED with exit code {:?}\", output.status.code()).unwrap();\n+                        writeln!(stderr.lock(), \"stdout: \\n {}\", std::str::from_utf8(&output.stdout).unwrap()).unwrap();\n+                        writeln!(stderr.lock(), \"stderr: \\n {}\", output_err).unwrap();\n+                    }\n+                }\n+                Err(e) => {\n+                    writeln!(stderr.lock(), \"FAILED: {}\", e).unwrap();\n+                    panic!(\"failed to execute miri\");\n+                },\n+            }\n         }\n+        let stderr = std::io::stderr();\n+        writeln!(stderr.lock(), \"{} success, {} mir not found, {} crate not found, {} failed\", success, mir_not_found, crate_not_found, failed).unwrap();\n+        assert_eq!(failed, 0, \"some tests failed\");\n     });\n     compile_fail(&sysroot);\n }"}, {"sha": "aa471f6cf8fdf903f6e7da7bc6aa9413b43cf972", "filename": "tests/run-pass/aux_test.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbffb3bd8c6301eb12593c425621c4c1634b1e0a/tests%2Frun-pass%2Faux_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbffb3bd8c6301eb12593c425621c4c1634b1e0a/tests%2Frun-pass%2Faux_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faux_test.rs?ref=cbffb3bd8c6301eb12593c425621c4c1634b1e0a", "patch": "@@ -1,7 +0,0 @@\n-// aux-build:dep.rs\n-\n-extern crate dep;\n-\n-fn main() {\n-    dep::foo();\n-}"}, {"sha": "b76b4321d62aa8e066b24d213c79ccc8230b8d7b", "filename": "tests/run-pass/auxiliary/dep.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbffb3bd8c6301eb12593c425621c4c1634b1e0a/tests%2Frun-pass%2Fauxiliary%2Fdep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbffb3bd8c6301eb12593c425621c4c1634b1e0a/tests%2Frun-pass%2Fauxiliary%2Fdep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fauxiliary%2Fdep.rs?ref=cbffb3bd8c6301eb12593c425621c4c1634b1e0a", "patch": "@@ -1 +0,0 @@\n-pub fn foo() {}"}]}