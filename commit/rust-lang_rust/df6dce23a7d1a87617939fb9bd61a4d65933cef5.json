{"sha": "df6dce23a7d1a87617939fb9bd61a4d65933cef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNmRjZTIzYTdkMWE4NzYxNzkzOWZiOWJkNjFhNGQ2NTkzM2NlZjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T11:13:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T11:13:58Z"}, "message": "remove ast::*Kind from ra_ide_api", "tree": {"sha": "382f5f5f5d6ba7182164c438ee5c4a1cb700fbb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382f5f5f5d6ba7182164c438ee5c4a1cb700fbb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6dce23a7d1a87617939fb9bd61a4d65933cef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6dce23a7d1a87617939fb9bd61a4d65933cef5", "html_url": "https://github.com/rust-lang/rust/commit/df6dce23a7d1a87617939fb9bd61a4d65933cef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6dce23a7d1a87617939fb9bd61a4d65933cef5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bec812258d4b795c9daf4bda4c16508e927ea53", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bec812258d4b795c9daf4bda4c16508e927ea53", "html_url": "https://github.com/rust-lang/rust/commit/3bec812258d4b795c9daf4bda4c16508e927ea53"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "d5e11652663490ecb686c628edff658fb4582303", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=df6dce23a7d1a87617939fb9bd61a4d65933cef5", "patch": "@@ -91,8 +91,8 @@ impl FnCallNode {\n \n     fn name_ref(&self) -> Option<ast::NameRef> {\n         match self {\n-            FnCallNode::CallExpr(call_expr) => Some(match call_expr.expr()?.kind() {\n-                ast::ExprKind::PathExpr(path_expr) => path_expr.path()?.segment()?.name_ref()?,\n+            FnCallNode::CallExpr(call_expr) => Some(match call_expr.expr()? {\n+                ast::Expr::PathExpr(path_expr) => path_expr.path()?.segment()?.name_ref()?,\n                 _ => return None,\n             }),\n "}, {"sha": "c5620dd522f6578ef17116b9e5d314b2ca76a3ff", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=df6dce23a7d1a87617939fb9bd61a4d65933cef5", "patch": "@@ -33,13 +33,11 @@ fn impls_for_def(\n     node: &ast::NominalDef,\n     module: hir::Module,\n ) -> Option<Vec<NavigationTarget>> {\n-    let ty = match node.kind() {\n-        ast::NominalDefKind::StructDef(def) => {\n+    let ty = match node {\n+        ast::NominalDef::StructDef(def) => {\n             source_binder::struct_from_module(db, module, &def).ty(db)\n         }\n-        ast::NominalDefKind::EnumDef(def) => {\n-            source_binder::enum_from_module(db, module, &def).ty(db)\n-        }\n+        ast::NominalDef::EnumDef(def) => source_binder::enum_from_module(db, module, &def).ty(db),\n     };\n \n     let krate = module.krate(db)?;"}, {"sha": "058cd68e291a3a3e66aa8fe7bd773bdd05353fed", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=df6dce23a7d1a87617939fb9bd61a4d65933cef5", "patch": "@@ -3,7 +3,7 @@ use hir::{HirDisplay, SourceAnalyzer, Ty};\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n     ast::{\n-        AstNode, ForExpr, IfExpr, LambdaExpr, LetStmt, MatchArmList, Pat, PatKind, SourceFile,\n+        self, AstNode, ForExpr, IfExpr, LambdaExpr, LetStmt, MatchArmList, SourceFile,\n         TypeAscriptionOwner, WhileExpr,\n     },\n     SmolStr, SyntaxKind, SyntaxNode, TextRange,\n@@ -88,7 +88,7 @@ fn get_inlay_hints(\n fn get_pat_type_hints(\n     db: &RootDatabase,\n     analyzer: &SourceAnalyzer,\n-    root_pat: Pat,\n+    root_pat: ast::Pat,\n     skip_root_pat_hint: bool,\n ) -> Vec<InlayHint> {\n     let original_pat = &root_pat.clone();\n@@ -108,27 +108,27 @@ fn get_pat_type_hints(\n         .collect()\n }\n \n-fn get_leaf_pats(root_pat: Pat) -> Vec<Pat> {\n-    let mut pats_to_process = std::collections::VecDeque::<Pat>::new();\n+fn get_leaf_pats(root_pat: ast::Pat) -> Vec<ast::Pat> {\n+    let mut pats_to_process = std::collections::VecDeque::<ast::Pat>::new();\n     pats_to_process.push_back(root_pat);\n \n     let mut leaf_pats = Vec::new();\n \n     while let Some(maybe_leaf_pat) = pats_to_process.pop_front() {\n-        match maybe_leaf_pat.kind() {\n-            PatKind::BindPat(bind_pat) => {\n+        match &maybe_leaf_pat {\n+            ast::Pat::BindPat(bind_pat) => {\n                 if let Some(pat) = bind_pat.pat() {\n                     pats_to_process.push_back(pat);\n                 } else {\n                     leaf_pats.push(maybe_leaf_pat);\n                 }\n             }\n-            PatKind::TuplePat(tuple_pat) => {\n+            ast::Pat::TuplePat(tuple_pat) => {\n                 for arg_pat in tuple_pat.args() {\n                     pats_to_process.push_back(arg_pat);\n                 }\n             }\n-            PatKind::StructPat(struct_pat) => {\n+            ast::Pat::StructPat(struct_pat) => {\n                 if let Some(pat_list) = struct_pat.field_pat_list() {\n                     pats_to_process.extend(\n                         pat_list\n@@ -139,12 +139,12 @@ fn get_leaf_pats(root_pat: Pat) -> Vec<Pat> {\n                                     .filter(|pat| pat.syntax().kind() != SyntaxKind::BIND_PAT)\n                             })\n                             .chain(pat_list.bind_pats().map(|bind_pat| {\n-                                bind_pat.pat().unwrap_or_else(|| Pat::from(bind_pat))\n+                                bind_pat.pat().unwrap_or_else(|| ast::Pat::from(bind_pat))\n                             })),\n                     );\n                 }\n             }\n-            PatKind::TupleStructPat(tuple_struct_pat) => {\n+            ast::Pat::TupleStructPat(tuple_struct_pat) => {\n                 for arg_pat in tuple_struct_pat.args() {\n                     pats_to_process.push_back(arg_pat);\n                 }\n@@ -158,7 +158,7 @@ fn get_leaf_pats(root_pat: Pat) -> Vec<Pat> {\n fn get_node_displayable_type(\n     db: &RootDatabase,\n     analyzer: &SourceAnalyzer,\n-    node_pat: &Pat,\n+    node_pat: &ast::Pat,\n ) -> Option<Ty> {\n     analyzer.type_of_pat(db, node_pat).and_then(|resolved_type| {\n         if let Ty::Apply(_) = resolved_type {"}, {"sha": "342e73fd344e55076ad7c7e3abe28af6feb040f4", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=df6dce23a7d1a87617939fb9bd61a4d65933cef5", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn find_all_refs(\n         let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n         let resolved = analyzer.resolve_local_name(&name_ref)?;\n         if let Either::A(ptr) = resolved.ptr() {\n-            if let ast::PatKind::BindPat(binding) = ptr.to_node(source_file.syntax()).kind() {\n+            if let ast::Pat::BindPat(binding) = ptr.to_node(source_file.syntax()) {\n                 return Some((binding, analyzer));\n             }\n         }"}, {"sha": "9ea96909e7355d3dc29d37ff16471b7d4bcbe075", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6dce23a7d1a87617939fb9bd61a4d65933cef5/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=df6dce23a7d1a87617939fb9bd61a4d65933cef5", "patch": "@@ -54,8 +54,8 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Opti\n     let has_test_function = module\n         .item_list()?\n         .items()\n-        .filter_map(|it| match it.kind() {\n-            ast::ModuleItemKind::FnDef(it) => Some(it),\n+        .filter_map(|it| match it {\n+            ast::ModuleItem::FnDef(it) => Some(it),\n             _ => None,\n         })\n         .any(|f| f.has_atom_attr(\"test\"));"}]}