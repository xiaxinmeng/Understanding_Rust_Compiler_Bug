{"sha": "779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OWM2YjZjYjhmNWRiN2Q4NjI3MjM3MDFiMGQ0ZGMwMWM3NzEyYzM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-01-30T23:10:54Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:31:37Z"}, "message": "Add Rvalue::Discriminant to retrieve discriminant", "tree": {"sha": "9b0329e22e1cecfc20d9446ab96e00195aa3127f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b0329e22e1cecfc20d9446ab96e00195aa3127f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "html_url": "https://github.com/rust-lang/rust/commit/779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc524d3d559e7b514edec6e99feb149995db7f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc524d3d559e7b514edec6e99feb149995db7f1d", "html_url": "https://github.com/rust-lang/rust/commit/bc524d3d559e7b514edec6e99feb149995db7f1d"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "a35803522611cb18ac3d41ebafb8474f6c7a7e99", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "patch": "@@ -997,6 +997,12 @@ pub enum Rvalue<'tcx> {\n \n     UnaryOp(UnOp, Operand<'tcx>),\n \n+    /// Read the discriminant of an ADT.\n+    ///\n+    /// Undefined (i.e. no effort is made to make it defined, but there\u2019s no reason why it cannot\n+    /// be defined to return, say, a 0) if ADT is not an enum.\n+    Discriminant(Lvalue<'tcx>),\n+\n     /// Creates an *uninitialized* Box\n     Box(Ty<'tcx>),\n \n@@ -1111,6 +1117,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 write!(fmt, \"Checked{:?}({:?}, {:?})\", op, a, b)\n             }\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n+            Discriminant(ref lval) => write!(fmt, \"discriminant({:?})\", lval),\n             Box(ref t) => write!(fmt, \"Box({:?})\", t),\n             InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs)"}, {"sha": "68fbadd5d6065e5320a5eb2e0cc96d24e591b794", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "patch": "@@ -135,15 +135,15 @@ impl<'tcx> Lvalue<'tcx> {\n impl<'tcx> Rvalue<'tcx> {\n     pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Ty<'tcx>>\n     {\n-        match self {\n-            &Rvalue::Use(ref operand) => Some(operand.ty(mir, tcx)),\n-            &Rvalue::Repeat(ref operand, ref count) => {\n+        match *self {\n+            Rvalue::Use(ref operand) => Some(operand.ty(mir, tcx)),\n+            Rvalue::Repeat(ref operand, ref count) => {\n                 let op_ty = operand.ty(mir, tcx);\n                 let count = count.value.as_u64(tcx.sess.target.uint_type);\n                 assert_eq!(count as usize as u64, count);\n                 Some(tcx.mk_array(op_ty, count as usize))\n             }\n-            &Rvalue::Ref(reg, bk, ref lv) => {\n+            Rvalue::Ref(reg, bk, ref lv) => {\n                 let lv_ty = lv.ty(mir, tcx).to_ty(tcx);\n                 Some(tcx.mk_ref(reg,\n                     ty::TypeAndMut {\n@@ -152,27 +152,35 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                 ))\n             }\n-            &Rvalue::Len(..) => Some(tcx.types.usize),\n-            &Rvalue::Cast(.., ty) => Some(ty),\n-            &Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n+            Rvalue::Len(..) => Some(tcx.types.usize),\n+            Rvalue::Cast(.., ty) => Some(ty),\n+            Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);\n                 Some(op.ty(tcx, lhs_ty, rhs_ty))\n             }\n-            &Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) => {\n+            Rvalue::CheckedBinaryOp(op, ref lhs, ref rhs) => {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n                 let ty = tcx.intern_tup(&[ty, tcx.types.bool], false);\n                 Some(ty)\n             }\n-            &Rvalue::UnaryOp(_, ref operand) => {\n+            Rvalue::UnaryOp(_, ref operand) => {\n                 Some(operand.ty(mir, tcx))\n             }\n-            &Rvalue::Box(t) => {\n+            Rvalue::Discriminant(ref lval) => {\n+                if let ty::TyAdt(_, _) = lval.ty(mir, tcx).to_ty(tcx).sty {\n+                    // TODO\n+                    None\n+                } else {\n+                    None\n+                }\n+            }\n+            Rvalue::Box(t) => {\n                 Some(tcx.mk_box(t))\n             }\n-            &Rvalue::Aggregate(ref ak, ref ops) => {\n+            Rvalue::Aggregate(ref ak, ref ops) => {\n                 match *ak {\n                     AggregateKind::Array => {\n                         if let Some(operand) = ops.get(0) {\n@@ -196,7 +204,7 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                 }\n             }\n-            &Rvalue::InlineAsm { .. } => None\n+            Rvalue::InlineAsm { .. } => None\n         }\n     }\n }"}, {"sha": "921b4e78b32c9affc69dff770cda1fcede5ca720", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "patch": "@@ -506,6 +506,10 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(op, location);\n                     }\n \n+                    Rvalue::Discriminant(ref $($mutability)* lvalue) => {\n+                        self.visit_lvalue(lvalue, LvalueContext::Inspect, location);\n+                    }\n+\n                     Rvalue::Box(ref $($mutability)* ty) => {\n                         self.visit_ty(ty);\n                     }"}, {"sha": "806395c857a888030c00cded8f87a134f1f63de9", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "patch": "@@ -435,6 +435,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                 }\n             }\n             Rvalue::Ref(..) |\n+            Rvalue::Discriminant(..) |\n             Rvalue::Len(..) |\n             Rvalue::InlineAsm { .. } => {}\n             Rvalue::Box(..) => {"}, {"sha": "16371be576b053724ec994ee7ed6f0042b9e625c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "patch": "@@ -739,6 +739,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n             }\n \n+            Rvalue::Discriminant(..) => {\n+                // FIXME discriminant\n+                self.add(Qualif::NOT_CONST);\n+                if self.mode != Mode::Fn {\n+                    bug!(\"implement discriminant const qualify\");\n+                }\n+            }\n+\n             Rvalue::Box(_) => {\n                 self.add(Qualif::NOT_CONST);\n                 if self.mode != Mode::Fn {"}, {"sha": "e29febdb712d38052777f1dccddb2ed32f997397", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "patch": "@@ -186,6 +186,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             Rvalue::BinaryOp(..) => \"Rvalue::BinaryOp\",\n             Rvalue::CheckedBinaryOp(..) => \"Rvalue::CheckedBinaryOp\",\n             Rvalue::UnaryOp(..) => \"Rvalue::UnaryOp\",\n+            Rvalue::Discriminant(..) => \"Rvalue::Discriminant\",\n             Rvalue::Box(..) => \"Rvalue::Box\",\n             Rvalue::Aggregate(ref kind, ref _operands) => {\n                 // AggregateKind is not distinguished by visit API, so"}, {"sha": "fe11e0426dfd3013aed9b0572a616cf0f8d372c0", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779c6b6cb8f5db7d862723701b0d4dc01c7712c3/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=779c6b6cb8f5db7d862723701b0d4dc01c7712c3", "patch": "@@ -433,6 +433,24 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 })\n             }\n \n+            mir::Rvalue::Discriminant(ref lvalue) => {\n+                let discr_lvalue = self.trans_lvalue(&bcx, lvalue);\n+                let enum_ty = discr_lvalue.ty.to_ty(bcx.tcx());\n+                let discr_ty = rvalue.ty(&*self.mir, bcx.tcx()).unwrap();\n+                let discr_type = type_of::immediate_type_of(bcx.ccx, discr_ty);\n+                // FIXME: inline this\n+                let discr = adt::trans_get_discr(&bcx, enum_ty, discr_lvalue.llval, None, true);\n+                let discr = if common::val_ty(discr) == Type::i1(bcx.ccx) {\n+                    bcx.zext(discr, discr_type)\n+                } else {\n+                    bcx.trunc(discr, discr_type)\n+                };\n+                (bcx, OperandRef {\n+                    val: OperandValue::Immediate(discr),\n+                    ty: discr_ty\n+                })\n+            }\n+\n             mir::Rvalue::Box(content_ty) => {\n                 let content_ty: Ty<'tcx> = self.monomorphize(&content_ty);\n                 let llty = type_of::type_of(bcx.ccx, content_ty);\n@@ -661,6 +679,7 @@ pub fn rvalue_creates_operand(rvalue: &mir::Rvalue) -> bool {\n         mir::Rvalue::BinaryOp(..) |\n         mir::Rvalue::CheckedBinaryOp(..) |\n         mir::Rvalue::UnaryOp(..) |\n+        mir::Rvalue::Discriminant(..) |\n         mir::Rvalue::Box(..) |\n         mir::Rvalue::Use(..) =>\n             true,"}]}