{"sha": "4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMGRjN2IwNmM3MmQ0YjFmNWNhZjJjNDBjOGY3NDA3Y2RiOWM1YWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T17:05:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T21:10:16Z"}, "message": "misc cleanup in match MIR building", "tree": {"sha": "f5740d8b296f489b9855ddd524ac0e1c1c2861b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5740d8b296f489b9855ddd524ac0e1c1c2861b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab", "html_url": "https://github.com/rust-lang/rust/commit/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc5deca2143a448d10a1241a777275e59448c94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5deca2143a448d10a1241a777275e59448c94d", "html_url": "https://github.com/rust-lang/rust/commit/fc5deca2143a448d10a1241a777275e59448c94d"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "c0a7439b5ce57eb0b6fb8180b5fc1c876c36b15f", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab", "patch": "@@ -26,6 +26,7 @@ mod simplify;\n mod test;\n mod util;\n \n+use itertools::Itertools;\n use std::convert::TryFrom;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -822,27 +823,25 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         );\n         let (matched_candidates, unmatched_candidates) = candidates.split_at_mut(fully_matched);\n \n-        let block: BasicBlock;\n-\n-        if !matched_candidates.is_empty() {\n+        let block: BasicBlock = if !matched_candidates.is_empty() {\n             let otherwise_block = self.select_matched_candidates(\n                 matched_candidates,\n                 start_block,\n                 fake_borrows,\n             );\n \n             if let Some(last_otherwise_block) = otherwise_block {\n-                block = last_otherwise_block\n+                last_otherwise_block\n             } else {\n                 // Any remaining candidates are unreachable.\n                 if unmatched_candidates.is_empty() {\n                     return;\n                 }\n-                block = self.cfg.start_new_block();\n-            };\n+                self.cfg.start_new_block()\n+            }\n         } else {\n-            block = *start_block.get_or_insert_with(|| self.cfg.start_new_block());\n-        }\n+            *start_block.get_or_insert_with(|| self.cfg.start_new_block())\n+        };\n \n         // If there are no candidates that still need testing, we're\n         // done. Since all matches are exhaustive, execution should\n@@ -885,7 +884,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// ...\n     ///\n     /// We generate real edges from:\n-    /// * `block` to the prebinding_block of the first pattern,\n+    /// * `start_block` to the `prebinding_block` of the first pattern,\n     /// * the otherwise block of the first pattern to the second pattern,\n     /// * the otherwise block of the third pattern to the a block with an\n     ///   Unreachable terminator.\n@@ -948,6 +947,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let first_candidate = &reachable_candidates[0];\n         let first_prebinding_block = first_candidate.pre_binding_block;\n \n+        // `goto -> first_prebinding_block` from the `start_block` if there is one.\n         if let Some(start_block) = *start_block {\n             let source_info = self.source_info(first_candidate.span);\n             self.cfg.terminate(\n@@ -959,21 +959,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             *start_block = Some(first_prebinding_block);\n         }\n \n-        for window in reachable_candidates.windows(2) {\n-            if let [first_candidate, second_candidate] = window {\n-                let source_info = self.source_info(first_candidate.span);\n-                if let Some(otherwise_block) = first_candidate.otherwise_block {\n-                    self.false_edges(\n-                        otherwise_block,\n-                        second_candidate.pre_binding_block,\n-                        first_candidate.next_candidate_pre_binding_block,\n-                        source_info,\n-                    );\n-                } else {\n-                    bug!(\"candidate other than the last has no guard\");\n-                }\n+        for (first_candidate, second_candidate) in reachable_candidates.iter().tuple_windows() {\n+            let source_info = self.source_info(first_candidate.span);\n+            if let Some(otherwise_block) = first_candidate.otherwise_block {\n+                self.false_edges(\n+                    otherwise_block,\n+                    second_candidate.pre_binding_block,\n+                    first_candidate.next_candidate_pre_binding_block,\n+                    source_info,\n+                );\n             } else {\n-                bug!(\"<[_]>::windows returned incorrectly sized window\");\n+                bug!(\"candidate other than the last has no guard\");\n             }\n         }\n "}, {"sha": "bdc1bdd5b98552a71ba1fd74db1b766ee7ec79c6", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=4f0dc7b06c72d4b1f5caf2c40c8f7407cdb9c5ab", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Test {\n                     span: match_pair.pattern.span,\n                     kind: TestKind::Switch {\n-                        adt_def: adt_def.clone(),\n+                        adt_def,\n                         variants: BitSet::new_empty(adt_def.variants.len()),\n                     },\n                 }"}]}