{"sha": "08823c82627540d42de055112eaf8745c694ff47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ODIzYzgyNjI3NTQwZDQyZGUwNTUxMTJlYWY4NzQ1YzY5NGZmNDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-20T19:43:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-20T19:43:44Z"}, "message": "Merge #6109\n\n6109: add completions for clippy lint in attributes r=bnjjj a=bnjjj\n\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "c78e34fbda9795c0671c71661a6c63faaf596a3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c78e34fbda9795c0671c71661a6c63faaf596a3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08823c82627540d42de055112eaf8745c694ff47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjz3wCRBK7hj4Ov3rIwAAdHIIAJouyUKjyfWgBPwW+gUoFvVo\nOhMcT4i3BpZ0/3+W32jGZseAlUj+m06K7/i1ZgmPOjFGMwGkgW10JsqcXLGSN6Pb\nRbUH2Z6Lcqc6WvNCAx52OVzt4W24hzQrtjuuPjQ+aR12MBz9AwoImJkHqIzs657h\nQMJjiCg9YyMdfW6Gi2ZKDcpbiC4R5CKtKQxOTo1tzcEVNuyuNYm/0ujXpBieykbD\naZTKj8Ox442aL3flD3L8gyPMdy/QHx07b9sQ3itneK4RT2H+SVbMF6urVvWAwrzx\nUeIf+EF8aFZYrJ326GqxqssHhnYws2EthGDfBQx7FxSqHK8gKKI+QHiANywbrLY=\n=vO6v\n-----END PGP SIGNATURE-----\n", "payload": "tree c78e34fbda9795c0671c71661a6c63faaf596a3b\nparent c00339509d27061f77dac5eef33335095afea8ec\nparent aa031e91f4f809933eb967edda256ebf6b8bf4ea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603223024 +0000\ncommitter GitHub <noreply@github.com> 1603223024 +0000\n\nMerge #6109\n\n6109: add completions for clippy lint in attributes r=bnjjj a=bnjjj\n\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08823c82627540d42de055112eaf8745c694ff47", "html_url": "https://github.com/rust-lang/rust/commit/08823c82627540d42de055112eaf8745c694ff47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08823c82627540d42de055112eaf8745c694ff47/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00339509d27061f77dac5eef33335095afea8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00339509d27061f77dac5eef33335095afea8ec", "html_url": "https://github.com/rust-lang/rust/commit/c00339509d27061f77dac5eef33335095afea8ec"}, {"sha": "aa031e91f4f809933eb967edda256ebf6b8bf4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa031e91f4f809933eb967edda256ebf6b8bf4ea", "html_url": "https://github.com/rust-lang/rust/commit/aa031e91f4f809933eb967edda256ebf6b8bf4ea"}], "stats": {"total": 376, "additions": 240, "deletions": 136}, "files": [{"sha": "f97ab7dd0a10250d75e3343705e3907b7e266c24", "filename": "crates/completion/src/complete_attribute.rs", "status": "modified", "additions": 4, "deletions": 127, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/08823c82627540d42de055112eaf8745c694ff47/crates%2Fcompletion%2Fsrc%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08823c82627540d42de055112eaf8745c694ff47/crates%2Fcompletion%2Fsrc%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_attribute.rs?ref=08823c82627540d42de055112eaf8745c694ff47", "patch": "@@ -9,7 +9,7 @@ use syntax::{ast, AstNode, SyntaxKind};\n use crate::{\n     completion_context::CompletionContext,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n-    generated_features::FEATURES,\n+    generated_lint_completions::{CLIPPY_LINTS, FEATURES},\n };\n \n pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -23,14 +23,15 @@ pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             complete_derive(acc, ctx, token_tree)\n         }\n         (Some(path), Some(token_tree)) if path.to_string() == \"feature\" => {\n-            complete_lint(acc, ctx, token_tree, FEATURES)\n+            complete_lint(acc, ctx, token_tree, FEATURES);\n         }\n         (Some(path), Some(token_tree))\n             if [\"allow\", \"warn\", \"deny\", \"forbid\"]\n                 .iter()\n                 .any(|lint_level| lint_level == &path.to_string()) =>\n         {\n-            complete_lint(acc, ctx, token_tree, DEFAULT_LINT_COMPLETIONS)\n+            complete_lint(acc, ctx, token_tree.clone(), DEFAULT_LINT_COMPLETIONS);\n+            complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n         }\n         (_, Some(_token_tree)) => {}\n         _ => complete_attribute_start(acc, ctx, attribute),\n@@ -417,130 +418,6 @@ struct Test {}\n         );\n     }\n \n-    #[test]\n-    fn empty_lint_completion() {\n-        check(\n-            r#\"#[allow(<|>)]\"#,\n-            expect![[r#\"\n-                at absolute_paths_not_starting_with_crate fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\n-                at ambiguous_associated_items ambiguous associated items\n-                at anonymous_parameters detects anonymous parameters\n-                at arithmetic_overflow arithmetic operation overflows\n-                at array_into_iter  detects calling `into_iter` on arrays\n-                at asm_sub_register using only a subset of a register for inline asm inputs\n-                at bare_trait_objects suggest using `dyn Trait` for trait objects\n-                at bindings_with_variant_name detects pattern bindings with the same name as one of the matched variants\n-                at box_pointers     use of owned (Box type) heap memory\n-                at cenum_impl_drop_cast a C-like enum implementing Drop is cast\n-                at clashing_extern_declarations detects when an extern fn has been declared with the same name but different types\n-                at coherence_leak_check distinct impls distinguished only by the leak-check code\n-                at conflicting_repr_hints conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\n-                at confusable_idents detects visually confusable pairs between identifiers\n-                at const_err        constant evaluation detected erroneous expression\n-                at dead_code        detect unused, unexported items\n-                at deprecated       detects use of deprecated items\n-                at deprecated_in_future detects use of items that will be deprecated in a future version\n-                at elided_lifetimes_in_paths hidden lifetime parameters in types are deprecated\n-                at ellipsis_inclusive_range_patterns `...` range patterns are deprecated\n-                at explicit_outlives_requirements outlives requirements can be inferred\n-                at exported_private_dependencies public interface leaks type from a private dependency\n-                at ill_formed_attribute_input ill-formed attribute inputs that were previously accepted and used in practice\n-                at illegal_floating_point_literal_pattern floating-point literals cannot be used in patterns\n-                at improper_ctypes  proper use of libc types in foreign modules\n-                at improper_ctypes_definitions proper use of libc types in foreign item definitions\n-                at incomplete_features incomplete features that may function improperly in some or all cases\n-                at incomplete_include trailing content in included file\n-                at indirect_structural_match pattern with const indirectly referencing non-structural-match type\n-                at inline_no_sanitize detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\n-                at intra_doc_link_resolution_failure failures in resolving intra-doc link targets\n-                at invalid_codeblock_attributes codeblock attribute looks a lot like a known one\n-                at invalid_type_param_default type parameter default erroneously allowed in invalid location\n-                at invalid_value    an invalid value is being created (such as a NULL reference)\n-                at irrefutable_let_patterns detects irrefutable patterns in if-let and while-let statements\n-                at keyword_idents   detects edition keywords being used as an identifier\n-                at late_bound_lifetime_arguments detects generic lifetime arguments in path segments with late bound lifetime parameters\n-                at macro_expanded_macro_exports_accessed_by_absolute_paths macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n-                at macro_use_extern_crate the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\n-                at meta_variable_misuse possible meta-variable misuse at macro definition\n-                at missing_copy_implementations detects potentially-forgotten implementations of `Copy`\n-                at missing_crate_level_docs detects crates with no crate-level documentation\n-                at missing_debug_implementations detects missing implementations of Debug\n-                at missing_doc_code_examples detects publicly-exported items without code samples in their documentation\n-                at missing_docs     detects missing documentation for public members\n-                at missing_fragment_specifier detects missing fragment specifiers in unused `macro_rules!` patterns\n-                at mixed_script_confusables detects Unicode scripts whose mixed script confusables codepoints are solely used\n-                at mutable_borrow_reservation_conflict reservation of a two-phased borrow conflicts with other shared borrows\n-                at mutable_transmutes mutating transmuted &mut T from &T may cause undefined behavior\n-                at no_mangle_const_items const items will not have their symbols exported\n-                at no_mangle_generic_items generic items must be mangled\n-                at non_ascii_idents detects non-ASCII identifiers\n-                at non_camel_case_types types, variants, traits and type parameters should have camel case names\n-                at non_shorthand_field_patterns using `Struct { x: x }` instead of `Struct { x }` in a pattern\n-                at non_snake_case   variables, methods, functions, lifetime parameters and modules should have snake case names\n-                at non_upper_case_globals static constants should have uppercase identifiers\n-                at order_dependent_trait_objects trait-object types were treated as different depending on marker-trait order\n-                at overflowing_literals literal out of range for its type\n-                at overlapping_patterns detects overlapping patterns\n-                at path_statements  path statements with no effect\n-                at patterns_in_fns_without_body patterns in functions without body were erroneously allowed\n-                at private_doc_tests detects code samples in docs of private items not documented by rustdoc\n-                at private_in_public detect private items in public interfaces not caught by the old implementation\n-                at proc_macro_derive_resolution_fallback detects proc macro derives using inaccessible names from parent modules\n-                at pub_use_of_private_extern_crate detect public re-exports of private extern crates\n-                at redundant_semicolons detects unnecessary trailing semicolons\n-                at renamed_and_removed_lints lints that have been renamed or removed\n-                at safe_packed_borrows safe borrows of fields of packed structs were erroneously allowed\n-                at single_use_lifetimes detects lifetime parameters that are only used once\n-                at soft_unstable    a feature gate that doesn't break dependent crates\n-                at stable_features  stable features found in `#[feature]` directive\n-                at trivial_bounds   these bounds don't depend on an type parameters\n-                at trivial_casts    detects trivial casts which could be removed\n-                at trivial_numeric_casts detects trivial casts of numeric types which could be removed\n-                at type_alias_bounds bounds in type aliases are not enforced\n-                at tyvar_behind_raw_pointer raw pointer to an inference variable\n-                at unaligned_references detects unaligned references to fields of packed structs\n-                at uncommon_codepoints detects uncommon Unicode codepoints in identifiers\n-                at unconditional_panic operation will cause a panic at runtime\n-                at unconditional_recursion functions that cannot return without calling themselves\n-                at unknown_crate_types unknown crate type found in `#[crate_type]` directive\n-                at unknown_lints    unrecognized lint attribute\n-                at unnameable_test_items detects an item that cannot be named being marked as `#[test_case]`\n-                at unreachable_code detects unreachable code paths\n-                at unreachable_patterns detects unreachable patterns\n-                at unreachable_pub  `pub` items not reachable from crate root\n-                at unsafe_code      usage of `unsafe` code\n-                at unsafe_op_in_unsafe_fn unsafe operations in unsafe functions without an explicit unsafe block are deprecated\n-                at unstable_features enabling unstable features (deprecated. do not use)\n-                at unstable_name_collisions detects name collision with an existing but unstable method\n-                at unused_allocation detects unnecessary allocations that can be eliminated\n-                at unused_assignments detect assignments that will never be read\n-                at unused_attributes detects attributes that were not used by the compiler\n-                at unused_braces    unnecessary braces around an expression\n-                at unused_comparisons comparisons made useless by limits of the types involved\n-                at unused_crate_dependencies crate dependencies that are never used\n-                at unused_doc_comments detects doc comments that aren't used by rustdoc\n-                at unused_extern_crates extern crates that are never used\n-                at unused_features  unused features found in crate-level `#[feature]` directives\n-                at unused_import_braces unnecessary braces around an imported item\n-                at unused_imports   imports that are never used\n-                at unused_labels    detects labels that are never used\n-                at unused_lifetimes detects lifetime parameters that are never used\n-                at unused_macros    detects macros that were not used\n-                at unused_must_use  unused result of a type flagged as `#[must_use]`\n-                at unused_mut       detect mut variables which don't need to be mutable\n-                at unused_parens    `if`, `match`, `while` and `return` do not need parentheses\n-                at unused_qualifications detects unnecessarily qualified names\n-                at unused_results   unused result of an expression in a statement\n-                at unused_unsafe    unnecessary use of an `unsafe` block\n-                at unused_variables detect variables which are not used in any way\n-                at variant_size_differences detects enums with widely varying variant sizes\n-                at warnings         mass-change the level for lints which produce warnings\n-                at where_clauses_object_safety checks the object safety of where clauses\n-                at while_true       suggest using `loop { }` instead of `while true { }`\n-        \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn no_completion_for_incorrect_derive() {\n         check("}, {"sha": "090cad2db3837efe90bb85cc7c15152cf947c7ec", "filename": "crates/completion/src/generated_features.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fcompletion%2Fsrc%2Fgenerated_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00339509d27061f77dac5eef33335095afea8ec/crates%2Fcompletion%2Fsrc%2Fgenerated_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fgenerated_features.rs?ref=c00339509d27061f77dac5eef33335095afea8ec"}, {"sha": "5a7dba1f5279834ff58b093502f6740e163d122c", "filename": "crates/completion/src/generated_lint_completions.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08823c82627540d42de055112eaf8745c694ff47/crates%2Fcompletion%2Fsrc%2Fgenerated_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08823c82627540d42de055112eaf8745c694ff47/crates%2Fcompletion%2Fsrc%2Fgenerated_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fgenerated_lint_completions.rs?ref=08823c82627540d42de055112eaf8745c694ff47"}, {"sha": "0a60ea7f2809192904c05a1803d6372bb70175ea", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08823c82627540d42de055112eaf8745c694ff47/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08823c82627540d42de055112eaf8745c694ff47/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=08823c82627540d42de055112eaf8745c694ff47", "patch": "@@ -5,7 +5,7 @@ mod completion_item;\n mod completion_context;\n mod presentation;\n mod patterns;\n-mod generated_features;\n+mod generated_lint_completions;\n #[cfg(test)]\n mod test_utils;\n "}, {"sha": "ec45d0c2b8fb861d8af5667e888c2591815525e8", "filename": "docs/user/generated_diagnostic.adoc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/08823c82627540d42de055112eaf8745c694ff47/docs%2Fuser%2Fgenerated_diagnostic.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/08823c82627540d42de055112eaf8745c694ff47/docs%2Fuser%2Fgenerated_diagnostic.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_diagnostic.adoc?ref=08823c82627540d42de055112eaf8745c694ff47", "patch": "@@ -0,0 +1,105 @@\n+//Generated file, do not edit by hand, see `xtask/src/codegen`\n+=== break-outside-of-loop\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L219[diagnostics.rs]\n+\n+This diagnostic is triggered if `break` keyword is used outside of a loop.\n+\n+\n+=== incorrect-ident-case\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L319[diagnostics.rs]\n+\n+This diagnostic is triggered if item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n+\n+\n+=== mismatched-arg-count\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L267[diagnostics.rs]\n+\n+This diagnostic is triggered if function is invoked with an incorrect amount of arguments.\n+\n+\n+=== missing-match-arm\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L162[diagnostics.rs]\n+\n+This diagnostic is triggered if `match` block is missing one or more match arms.\n+\n+\n+=== missing-ok-in-tail-expr\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L187[diagnostics.rs]\n+\n+This diagnostic is triggered if block that should return `Result` returns a value not wrapped in `Ok`.\n+\n+Example:\n+\n+```rust\n+fn foo() -> Result<u8, ()> {\n+    10\n+}\n+```\n+\n+\n+=== missing-pat-fields\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L113[diagnostics.rs]\n+\n+This diagnostic is triggered if pattern lacks some fields that exist in the corresponding structure.\n+\n+Example:\n+\n+```rust\n+struct A { a: u8, b: u8 }\n+\n+let a = A { a: 10, b: 20 };\n+\n+if let A { a } = a {\n+    // ...\n+}\n+```\n+\n+\n+=== missing-structure-fields\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L66[diagnostics.rs]\n+\n+This diagnostic is triggered if record lacks some fields that exist in the corresponding structure.\n+\n+Example:\n+\n+```rust\n+struct A { a: u8, b: u8 }\n+\n+let a = A { a: 10 };\n+```\n+\n+\n+=== missing-unsafe\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L243[diagnostics.rs]\n+\n+This diagnostic is triggered if operation marked as `unsafe` is used outside of `unsafe` function or block.\n+\n+\n+=== no-such-field\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_ty/src/diagnostics.rs#L39[diagnostics.rs]\n+\n+This diagnostic is triggered if created structure does not have field provided in record.\n+\n+\n+=== unconfigured-code\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L90[diagnostics.rs]\n+\n+This diagnostic is shown for code with inactive `#[cfg]` attributes.\n+\n+\n+=== unresolved-extern-crate\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L35[diagnostics.rs]\n+\n+This diagnostic is triggered if rust-analyzer is unable to discover referred extern crate.\n+\n+\n+=== unresolved-import\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L59[diagnostics.rs]\n+\n+This diagnostic is triggered if rust-analyzer is unable to discover imported module.\n+\n+\n+=== unresolved-module\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/hir_def/src/diagnostics.rs#L10[diagnostics.rs]\n+\n+This diagnostic is triggered if rust-analyzer is unable to discover referred module."}, {"sha": "adea053b6bdf3c3f53f724e0c12619e0afaf441b", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/08823c82627540d42de055112eaf8745c694ff47/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08823c82627540d42de055112eaf8745c694ff47/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=08823c82627540d42de055112eaf8745c694ff47", "patch": "@@ -9,7 +9,7 @@ mod gen_syntax;\n mod gen_parser_tests;\n mod gen_assists_docs;\n mod gen_feature_docs;\n-mod gen_features;\n+mod gen_lint_completions;\n mod gen_diagnostic_docs;\n \n use std::{\n@@ -24,7 +24,7 @@ pub use self::{\n     gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n     gen_diagnostic_docs::generate_diagnostic_docs,\n     gen_feature_docs::generate_feature_docs,\n-    gen_features::generate_features,\n+    gen_lint_completions::generate_lint_completions,\n     gen_parser_tests::generate_parser_tests,\n     gen_syntax::generate_syntax,\n };\n@@ -42,7 +42,7 @@ pub struct CodegenCmd {\n impl CodegenCmd {\n     pub fn run(self) -> Result<()> {\n         if self.features {\n-            generate_features(Mode::Overwrite)?;\n+            generate_lint_completions(Mode::Overwrite)?;\n         }\n         generate_syntax(Mode::Overwrite)?;\n         generate_parser_tests(Mode::Overwrite)?;"}, {"sha": "cffe954f812c0c7dba9f29cc01663897a702d208", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/08823c82627540d42de055112eaf8745c694ff47/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08823c82627540d42de055112eaf8745c694ff47/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=08823c82627540d42de055112eaf8745c694ff47", "patch": "@@ -0,0 +1,113 @@\n+//! Generates descriptors structure for unstable feature from Unstable Book\n+use std::path::{Path, PathBuf};\n+\n+use quote::quote;\n+use walkdir::WalkDir;\n+use xshell::{cmd, read_file};\n+\n+use crate::{\n+    codegen::{project_root, reformat, update, Mode, Result},\n+    run_rustfmt,\n+};\n+\n+pub fn generate_lint_completions(mode: Mode) -> Result<()> {\n+    if !Path::new(\"./target/rust\").exists() {\n+        cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust ./target/rust\").run()?;\n+    }\n+\n+    let ts_features = generate_descriptor(\"./target/rust/src/doc/unstable-book/src\".into())?;\n+    cmd!(\"curl http://rust-lang.github.io/rust-clippy/master/lints.json --output ./target/clippy_lints.json\").run()?;\n+\n+    let ts_clippy = generate_descriptor_clippy(&Path::new(\"./target/clippy_lints.json\"))?;\n+    let ts = quote! {\n+        use crate::complete_attribute::LintCompletion;\n+        #ts_features\n+        #ts_clippy\n+    };\n+    let contents = reformat(ts.to_string().as_str())?;\n+\n+    let destination = project_root().join(\"crates/completion/src/generated_lint_completions.rs\");\n+    update(destination.as_path(), &contents, mode)?;\n+    run_rustfmt(mode)?;\n+\n+    Ok(())\n+}\n+\n+fn generate_descriptor(src_dir: PathBuf) -> Result<proc_macro2::TokenStream> {\n+    let definitions = [\"language-features\", \"library-features\"]\n+        .iter()\n+        .flat_map(|it| WalkDir::new(src_dir.join(it)))\n+        .filter_map(|e| e.ok())\n+        .filter(|entry| {\n+            // Get all `.md ` files\n+            entry.file_type().is_file() && entry.path().extension().unwrap_or_default() == \"md\"\n+        })\n+        .map(|entry| {\n+            let path = entry.path();\n+            let feature_ident = path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+            let doc = read_file(path).unwrap();\n+\n+            quote! { LintCompletion { label: #feature_ident, description: #doc } }\n+        });\n+\n+    let ts = quote! {\n+        pub(super) const FEATURES:  &[LintCompletion] = &[\n+            #(#definitions),*\n+        ];\n+    };\n+\n+    Ok(ts)\n+}\n+\n+#[derive(Default)]\n+struct ClippyLint {\n+    help: String,\n+    id: String,\n+}\n+\n+fn generate_descriptor_clippy(path: &Path) -> Result<proc_macro2::TokenStream> {\n+    let file_content = read_file(path)?;\n+    let mut clippy_lints: Vec<ClippyLint> = vec![];\n+\n+    for line in file_content.lines().map(|line| line.trim()) {\n+        if line.starts_with(r#\"\"id\":\"#) {\n+            let clippy_lint = ClippyLint {\n+                id: line\n+                    .strip_prefix(r#\"\"id\": \"\"#)\n+                    .expect(\"should be prefixed by id\")\n+                    .strip_suffix(r#\"\",\"#)\n+                    .expect(\"should be suffixed by comma\")\n+                    .into(),\n+                help: String::new(),\n+            };\n+            clippy_lints.push(clippy_lint)\n+        } else if line.starts_with(r#\"\"What it does\":\"#) {\n+            // Typical line to strip: \"What is doest\": \"Here is my useful content\",\n+            let prefix_to_strip = r#\"\"What it does\": \"\"#;\n+            let suffix_to_strip = r#\"\",\"#;\n+\n+            let clippy_lint = clippy_lints.last_mut().expect(\"clippy lint must already exist\");\n+            clippy_lint.help = line\n+                .strip_prefix(prefix_to_strip)\n+                .expect(\"should be prefixed by what it does\")\n+                .strip_suffix(suffix_to_strip)\n+                .expect(\"should be suffixed by comma\")\n+                .into();\n+        }\n+    }\n+\n+    let definitions = clippy_lints.into_iter().map(|clippy_lint| {\n+        let lint_ident = format!(\"clippy::{}\", clippy_lint.id);\n+        let doc = clippy_lint.help;\n+\n+        quote! { LintCompletion { label: #lint_ident, description: #doc } }\n+    });\n+\n+    let ts = quote! {\n+        pub(super) const CLIPPY_LINTS:  &[LintCompletion] = &[\n+            #(#definitions),*\n+        ];\n+    };\n+\n+    Ok(ts)\n+}"}, {"sha": "9de60c76c9c7aa76e1e0c5034ed47191d5fb2bad", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/08823c82627540d42de055112eaf8745c694ff47/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08823c82627540d42de055112eaf8745c694ff47/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=08823c82627540d42de055112eaf8745c694ff47", "patch": "@@ -131,6 +131,14 @@ https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/#redo-after-\n }\n \n fn deny_clippy(path: &PathBuf, text: &String) {\n+    let ignore = &[\n+        // The documentation in string literals may contain anything for its own purposes\n+        \"completion/src/generated_lint_completions.rs\",\n+    ];\n+    if ignore.iter().any(|p| path.ends_with(p)) {\n+        return;\n+    }\n+\n     if text.contains(\"[\\u{61}llow(clippy\") {\n         panic!(\n             \"\\n\\nallowing lints is forbidden: {}.\n@@ -214,7 +222,7 @@ fn check_todo(path: &Path, text: &str) {\n         // `ast::make`.\n         \"ast/make.rs\",\n         // The documentation in string literals may contain anything for its own purposes\n-        \"completion/src/generated_features.rs\",\n+        \"completion/src/generated_lint_completions.rs\",\n     ];\n     if need_todo.iter().any(|p| path.ends_with(p)) {\n         return;"}]}