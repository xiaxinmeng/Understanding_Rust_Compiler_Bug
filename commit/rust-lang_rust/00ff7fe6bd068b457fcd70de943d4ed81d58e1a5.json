{"sha": "00ff7fe6bd068b457fcd70de943d4ed81d58e1a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZmY3ZmU2YmQwNjhiNDU3ZmNkNzBkZTk0M2Q0ZWQ4MWQ1OGUxYTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-12-21T18:59:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-12-21T19:35:47Z"}, "message": "rustc_span: Provide a reserved identifier check for a specific edition\n\nEdition evaluation is kept lazy because it may be expensive.", "tree": {"sha": "b5516136ad15dd67df7f9a1979c0bfd76a8367b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5516136ad15dd67df7f9a1979c0bfd76a8367b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5", "html_url": "https://github.com/rust-lang/rust/commit/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c94a197726b6a981828cb1837d7c3eed1b841d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c94a197726b6a981828cb1837d7c3eed1b841d", "html_url": "https://github.com/rust-lang/rust/commit/11c94a197726b6a981828cb1837d7c3eed1b841d"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "46b08174f7406d407d71f719a0f6ce847acdc2f9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ff7fe6bd068b457fcd70de943d4ed81d58e1a5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=00ff7fe6bd068b457fcd70de943d4ed81d58e1a5", "patch": "@@ -13,7 +13,7 @@ use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n \n-use crate::{Span, DUMMY_SP, SESSION_GLOBALS};\n+use crate::{Edition, Span, DUMMY_SP, SESSION_GLOBALS};\n \n #[cfg(test)]\n mod tests;\n@@ -1609,12 +1609,32 @@ pub mod sym {\n }\n \n impl Symbol {\n-    fn is_used_keyword_2018(self) -> bool {\n-        self >= kw::Async && self <= kw::Dyn\n+    fn is_special(self) -> bool {\n+        self <= kw::Underscore\n     }\n \n-    fn is_unused_keyword_2018(self) -> bool {\n-        self == kw::Try\n+    fn is_used_keyword_always(self) -> bool {\n+        self >= kw::As && self <= kw::While\n+    }\n+\n+    fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {\n+        (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018\n+    }\n+\n+    fn is_unused_keyword_always(self) -> bool {\n+        self >= kw::Abstract && self <= kw::Yield\n+    }\n+\n+    fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {\n+        self == kw::Try && edition() >= Edition::Edition2018\n+    }\n+\n+    pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {\n+        self.is_special()\n+            || self.is_used_keyword_always()\n+            || self.is_unused_keyword_always()\n+            || self.is_used_keyword_conditional(edition)\n+            || self.is_unused_keyword_conditional(edition)\n     }\n \n     /// A keyword or reserved identifier that can be used as a path segment.\n@@ -1642,26 +1662,27 @@ impl Ident {\n     // Returns `true` for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special(self) -> bool {\n-        self.name <= kw::Underscore\n+        self.name.is_special()\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(self) -> bool {\n         // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n-        self.name >= kw::As && self.name <= kw::While\n-            || self.name.is_used_keyword_2018() && self.span.rust_2018()\n+        self.name.is_used_keyword_always()\n+            || self.name.is_used_keyword_conditional(|| self.span.edition())\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     pub fn is_unused_keyword(self) -> bool {\n         // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n-        self.name >= kw::Abstract && self.name <= kw::Yield\n-            || self.name.is_unused_keyword_2018() && self.span.rust_2018()\n+        self.name.is_unused_keyword_always()\n+            || self.name.is_unused_keyword_conditional(|| self.span.edition())\n     }\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved(self) -> bool {\n-        self.is_special() || self.is_used_keyword() || self.is_unused_keyword()\n+        // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n+        self.name.is_reserved(|| self.span.edition())\n     }\n \n     /// A keyword or reserved identifier that can be used as a path segment."}]}