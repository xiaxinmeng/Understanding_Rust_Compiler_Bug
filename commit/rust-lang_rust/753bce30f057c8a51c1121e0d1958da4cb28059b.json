{"sha": "753bce30f057c8a51c1121e0d1958da4cb28059b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1M2JjZTMwZjA1N2M4YTUxYzExMjFlMGQxOTU4ZGE0Y2IyODA1OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T15:02:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T15:02:21Z"}, "message": "Auto merge of #7407 - m-ou-se:doc-hidden-variants, r=flip1995\n\nDon't suggest doc(hidden) or unstable variants in wildcard lint\n\nClippy's wildcard lint would suggest doc(hidden) and unstable variants for non_exhaustive enums, even though those aren't part of the public interface (yet) and should only be matched on using a `_`, just like potential future additions to the enum. There was already some logic to exclude a *single* doc(hidden) variant. This extends that to all hidden variants, and also hides `#[unstable]` variants.\n\nSee https://github.com/rust-lang/rust/pull/85746#issuecomment-868886893\n\nThis PR includes https://github.com/rust-lang/rust-clippy/pull/7406 as the first commit.\n\nHere's the diff that this PR adds on top of that PR: https://github.com/m-ou-se/rust-clippy/compare/std-errorkind...m-ou-se:doc-hidden-variants\n\n---\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: No longer suggest unstable and doc(hidden) variants in wildcard lint. wildcard_enum_match_arm, match_wildcard_for_single_variants", "tree": {"sha": "1497b30a1547cfe2f69e6569d9edc26085617efc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1497b30a1547cfe2f69e6569d9edc26085617efc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753bce30f057c8a51c1121e0d1958da4cb28059b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753bce30f057c8a51c1121e0d1958da4cb28059b", "html_url": "https://github.com/rust-lang/rust/commit/753bce30f057c8a51c1121e0d1958da4cb28059b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753bce30f057c8a51c1121e0d1958da4cb28059b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8", "html_url": "https://github.com/rust-lang/rust/commit/cadb93b6de1b5ba5aca53c5c4c7987f3c09962a8"}, {"sha": "fae7a09eea5644567ff7239abc3970d1e9a2d159", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae7a09eea5644567ff7239abc3970d1e9a2d159", "html_url": "https://github.com/rust-lang/rust/commit/fae7a09eea5644567ff7239abc3970d1e9a2d159"}], "stats": {"total": 136, "additions": 84, "deletions": 52}, "files": [{"sha": "f1e3492c4ecc5fdc3f698545376b9a3cb912fdfb", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -992,9 +992,9 @@ impl CommonPrefixSearcher<'a> {\n     }\n }\n \n-fn is_doc_hidden(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n+fn is_hidden(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n     let attrs = cx.tcx.get_attrs(variant_def.def_id);\n-    clippy_utils::attrs::is_doc_hidden(attrs)\n+    clippy_utils::attrs::is_doc_hidden(attrs) || clippy_utils::attrs::is_unstable(attrs)\n }\n \n #[allow(clippy::too_many_lines)]\n@@ -1033,7 +1033,8 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n \n     // Accumulate the variants which should be put in place of the wildcard because they're not\n     // already covered.\n-    let mut missing_variants: Vec<_> = adt_def.variants.iter().collect();\n+    let has_hidden = adt_def.variants.iter().any(|x| is_hidden(cx, x));\n+    let mut missing_variants: Vec<_> = adt_def.variants.iter().filter(|x| !is_hidden(cx, x)).collect();\n \n     let mut path_prefix = CommonPrefixSearcher::None;\n     for arm in arms {\n@@ -1118,7 +1119,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n \n     match missing_variants.as_slice() {\n         [] => (),\n-        [x] if !adt_def.is_variant_list_non_exhaustive() && !is_doc_hidden(cx, x) => span_lint_and_sugg(\n+        [x] if !adt_def.is_variant_list_non_exhaustive() && !has_hidden => span_lint_and_sugg(\n             cx,\n             MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n             wildcard_span,\n@@ -1129,7 +1130,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n         ),\n         variants => {\n             let mut suggestions: Vec<_> = variants.iter().copied().map(format_suggestion).collect();\n-            let message = if adt_def.is_variant_list_non_exhaustive() {\n+            let message = if adt_def.is_variant_list_non_exhaustive() || has_hidden {\n                 suggestions.push(\"_\".into());\n                 \"wildcard matches known variants and will also match future added variants\"\n             } else {"}, {"sha": "c19b558cd8c6e044902c2713e8f169fd2113920d", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -157,3 +157,8 @@ pub fn is_doc_hidden(attrs: &[ast::Attribute]) -> bool {\n         .filter_map(ast::Attribute::meta_item_list)\n         .any(|l| attr::list_contains_name(&l, sym::hidden))\n }\n+\n+/// Return true if the attributes contain `#[unstable]`\n+pub fn is_unstable(attrs: &[ast::Attribute]) -> bool {\n+    attrs.iter().any(|attr| attr.has_name(sym::unstable))\n+}"}, {"sha": "420232f9f8d89706353f530900e223ed53a7187b", "filename": "tests/ui/auxiliary/non-exhaustive-enum.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fauxiliary%2Fnon-exhaustive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fauxiliary%2Fnon-exhaustive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fnon-exhaustive-enum.rs?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -0,0 +1,8 @@\n+// Stripped down version of the ErrorKind enum of std\n+#[non_exhaustive]\n+pub enum ErrorKind {\n+    NotFound,\n+    PermissionDenied,\n+    #[doc(hidden)]\n+    Uncategorized,\n+}"}, {"sha": "e675c183ea7117c646b99e04438c524f07fec3dc", "filename": "tests/ui/match_wildcard_for_single_variants.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -115,9 +115,16 @@ fn main() {\n         pub enum Enum {\n             A,\n             B,\n+            C,\n             #[doc(hidden)]\n             __Private,\n         }\n+        match Enum::A {\n+            Enum::A => (),\n+            Enum::B => (),\n+            Enum::C => (),\n+            _ => (),\n+        }\n         match Enum::A {\n             Enum::A => (),\n             Enum::B => (),"}, {"sha": "38c3ffc00c71b4bc8cad9251ad1aa4b674899203", "filename": "tests/ui/match_wildcard_for_single_variants.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -115,9 +115,16 @@ fn main() {\n         pub enum Enum {\n             A,\n             B,\n+            C,\n             #[doc(hidden)]\n             __Private,\n         }\n+        match Enum::A {\n+            Enum::A => (),\n+            Enum::B => (),\n+            Enum::C => (),\n+            _ => (),\n+        }\n         match Enum::A {\n             Enum::A => (),\n             Enum::B => (),"}, {"sha": "3ee4ab48ac84b215c6a21d34e4be0e85f74fa414", "filename": "tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build:non-exhaustive-enum.rs\n \n #![deny(clippy::wildcard_enum_match_arm)]\n #![allow(\n@@ -11,7 +12,9 @@\n     clippy::diverging_sub_expression\n )]\n \n-use std::io::ErrorKind;\n+extern crate non_exhaustive_enum;\n+\n+use non_exhaustive_enum::ErrorKind;\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum Color {\n@@ -77,29 +80,25 @@ fn main() {\n     let error_kind = ErrorKind::NotFound;\n     match error_kind {\n         ErrorKind::NotFound => {},\n-        ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | ErrorKind::OutOfMemory | _ => {},\n+        ErrorKind::PermissionDenied | _ => {},\n     }\n     match error_kind {\n         ErrorKind::NotFound => {},\n         ErrorKind::PermissionDenied => {},\n-        ErrorKind::ConnectionRefused => {},\n-        ErrorKind::ConnectionReset => {},\n-        ErrorKind::ConnectionAborted => {},\n-        ErrorKind::NotConnected => {},\n-        ErrorKind::AddrInUse => {},\n-        ErrorKind::AddrNotAvailable => {},\n-        ErrorKind::BrokenPipe => {},\n-        ErrorKind::AlreadyExists => {},\n-        ErrorKind::WouldBlock => {},\n-        ErrorKind::InvalidInput => {},\n-        ErrorKind::InvalidData => {},\n-        ErrorKind::TimedOut => {},\n-        ErrorKind::WriteZero => {},\n-        ErrorKind::Interrupted => {},\n-        ErrorKind::Other => {},\n-        ErrorKind::UnexpectedEof => {},\n-        ErrorKind::Unsupported => {},\n-        ErrorKind::OutOfMemory => {},\n         _ => {},\n     }\n+\n+    {\n+        #![allow(clippy::manual_non_exhaustive)]\n+        pub enum Enum {\n+            A,\n+            B,\n+            #[doc(hidden)]\n+            __Private,\n+        }\n+        match Enum::A {\n+            Enum::A => (),\n+            Enum::B | _ => (),\n+        }\n+    }\n }"}, {"sha": "46886550453308a340353c5a8c9c8b143a0877a9", "filename": "tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.rs?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build:non-exhaustive-enum.rs\n \n #![deny(clippy::wildcard_enum_match_arm)]\n #![allow(\n@@ -11,7 +12,9 @@\n     clippy::diverging_sub_expression\n )]\n \n-use std::io::ErrorKind;\n+extern crate non_exhaustive_enum;\n+\n+use non_exhaustive_enum::ErrorKind;\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum Color {\n@@ -82,24 +85,20 @@ fn main() {\n     match error_kind {\n         ErrorKind::NotFound => {},\n         ErrorKind::PermissionDenied => {},\n-        ErrorKind::ConnectionRefused => {},\n-        ErrorKind::ConnectionReset => {},\n-        ErrorKind::ConnectionAborted => {},\n-        ErrorKind::NotConnected => {},\n-        ErrorKind::AddrInUse => {},\n-        ErrorKind::AddrNotAvailable => {},\n-        ErrorKind::BrokenPipe => {},\n-        ErrorKind::AlreadyExists => {},\n-        ErrorKind::WouldBlock => {},\n-        ErrorKind::InvalidInput => {},\n-        ErrorKind::InvalidData => {},\n-        ErrorKind::TimedOut => {},\n-        ErrorKind::WriteZero => {},\n-        ErrorKind::Interrupted => {},\n-        ErrorKind::Other => {},\n-        ErrorKind::UnexpectedEof => {},\n-        ErrorKind::Unsupported => {},\n-        ErrorKind::OutOfMemory => {},\n         _ => {},\n     }\n+\n+    {\n+        #![allow(clippy::manual_non_exhaustive)]\n+        pub enum Enum {\n+            A,\n+            B,\n+            #[doc(hidden)]\n+            __Private,\n+        }\n+        match Enum::A {\n+            Enum::A => (),\n+            _ => (),\n+        }\n+    }\n }"}, {"sha": "d63f2090353151a55ec431d50b814d8e2c6c7bc2", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/753bce30f057c8a51c1121e0d1958da4cb28059b/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=753bce30f057c8a51c1121e0d1958da4cb28059b", "patch": "@@ -1,38 +1,44 @@\n error: wildcard match will also match any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:39:9\n+  --> $DIR/wildcard_enum_match_arm.rs:42:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n    |         ^ help: try this: `Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n    |\n note: the lint level is defined here\n-  --> $DIR/wildcard_enum_match_arm.rs:3:9\n+  --> $DIR/wildcard_enum_match_arm.rs:4:9\n    |\n LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wildcard match will also match any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:43:9\n+  --> $DIR/wildcard_enum_match_arm.rs:46:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n error: wildcard match will also match any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:47:9\n+  --> $DIR/wildcard_enum_match_arm.rs:50:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n error: wildcard match will also match any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:63:9\n+  --> $DIR/wildcard_enum_match_arm.rs:66:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n error: wildcard matches known variants and will also match future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:80:9\n+  --> $DIR/wildcard_enum_match_arm.rs:83:9\n    |\n LL |         _ => {},\n-   |         ^ help: try this: `ErrorKind::PermissionDenied | ErrorKind::ConnectionRefused | ErrorKind::ConnectionReset | ErrorKind::ConnectionAborted | ErrorKind::NotConnected | ErrorKind::AddrInUse | ErrorKind::AddrNotAvailable | ErrorKind::BrokenPipe | ErrorKind::AlreadyExists | ErrorKind::WouldBlock | ErrorKind::InvalidInput | ErrorKind::InvalidData | ErrorKind::TimedOut | ErrorKind::WriteZero | ErrorKind::Interrupted | ErrorKind::Other | ErrorKind::UnexpectedEof | ErrorKind::Unsupported | ErrorKind::OutOfMemory | _`\n+   |         ^ help: try this: `ErrorKind::PermissionDenied | _`\n \n-error: aborting due to 5 previous errors\n+error: wildcard matches known variants and will also match future added variants\n+  --> $DIR/wildcard_enum_match_arm.rs:101:13\n+   |\n+LL |             _ => (),\n+   |             ^ help: try this: `Enum::B | _`\n+\n+error: aborting due to 6 previous errors\n "}]}