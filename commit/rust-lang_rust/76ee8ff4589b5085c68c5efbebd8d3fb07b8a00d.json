{"sha": "76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZWU4ZmY0NTg5YjUwODVjNjhjNWVmYmViZDhkM2ZiMDdiOGEwMGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-11T19:21:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-11T19:39:18Z"}, "message": "use ctfe_backtracte variable for backtrace control", "tree": {"sha": "5a580fc2d825f88233dbd815f9ace73d873ecdae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a580fc2d825f88233dbd815f9ace73d873ecdae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d", "html_url": "https://github.com/rust-lang/rust/commit/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d5a37787accac8bd4276ea47872a561069109c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d5a37787accac8bd4276ea47872a561069109c", "html_url": "https://github.com/rust-lang/rust/commit/45d5a37787accac8bd4276ea47872a561069109c"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "e40bfcf6276adcde031c8f485522277d25a90efd", "filename": "src/bin/miri.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=76ee8ff4589b5085c68c5efbebd8d3fb07b8a00d", "patch": "@@ -7,23 +7,22 @@ extern crate log;\n extern crate log_settings;\n extern crate miri;\n extern crate rustc;\n-extern crate rustc_codegen_utils;\n extern crate rustc_driver;\n-extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_interface;\n-extern crate rustc_metadata;\n-extern crate rustc_span;\n+extern crate rustc_session;\n \n use std::convert::TryFrom;\n use std::env;\n use std::str::FromStr;\n \n use hex::FromHexError;\n \n+use rustc_session::CtfeBacktrace;\n use rustc_driver::Compilation;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::{interface, Queries};\n+use rustc::ty::TyCtxt;\n \n struct MiriCompilerCalls {\n     miri_config: miri::MiriConfig,\n@@ -35,10 +34,10 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n         compiler: &interface::Compiler,\n         queries: &'tcx Queries<'tcx>,\n     ) -> Compilation {\n-        init_late_loggers();\n         compiler.session().abort_if_errors();\n \n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n+            init_late_loggers(tcx);\n             let (entry_def_id, _) = tcx.entry_fn(LOCAL_CRATE).expect(\"no main function found!\");\n             let mut config = self.miri_config.clone();\n \n@@ -72,7 +71,7 @@ fn init_early_loggers() {\n     }\n }\n \n-fn init_late_loggers() {\n+fn init_late_loggers(tcx: TyCtxt<'_>) {\n     // We initialize loggers right before we start evaluation. We overwrite the `RUSTC_LOG`\n     // env var if it is not set, control it based on `MIRI_LOG`.\n     if let Ok(var) = env::var(\"MIRI_LOG\") {\n@@ -96,10 +95,13 @@ fn init_late_loggers() {\n \n     // If `MIRI_BACKTRACE` is set and `RUSTC_CTFE_BACKTRACE` is not, set `RUSTC_CTFE_BACKTRACE`.\n     // Do this late, so we ideally only apply this to Miri's errors.\n-    if let Ok(var) = env::var(\"MIRI_BACKTRACE\") {\n-        if env::var(\"RUSTC_CTFE_BACKTRACE\") == Err(env::VarError::NotPresent) {\n-            env::set_var(\"RUSTC_CTFE_BACKTRACE\", &var);\n-        }\n+    if let Ok(val) = env::var(\"MIRI_BACKTRACE\") {\n+        let ctfe_backtrace = match &*val {\n+            \"immediate\" => CtfeBacktrace::Immediate,\n+            \"0\" => CtfeBacktrace::Disabled,\n+            _ => CtfeBacktrace::Capture,\n+        };\n+        *tcx.sess.ctfe_backtrace.borrow_mut() = ctfe_backtrace;\n     }\n }\n "}]}