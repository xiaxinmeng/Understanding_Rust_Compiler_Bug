{"sha": "a39875b4dd90be99d870b9b341a516c313076313", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTg3NWI0ZGQ5MGJlOTlkODcwYjliMzQxYTUxNmMzMTMwNzYzMTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-19T08:07:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-19T08:07:43Z"}, "message": "do not 'return' in 'throw_' macros", "tree": {"sha": "57f4913add2e0a4b7d2289ee1ca8a3387b95f115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57f4913add2e0a4b7d2289ee1ca8a3387b95f115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a39875b4dd90be99d870b9b341a516c313076313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a39875b4dd90be99d870b9b341a516c313076313", "html_url": "https://github.com/rust-lang/rust/commit/a39875b4dd90be99d870b9b341a516c313076313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a39875b4dd90be99d870b9b341a516c313076313/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e1da59cd0761330b4ea8d47b16340a78eeafa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e1da59cd0761330b4ea8d47b16340a78eeafa9", "html_url": "https://github.com/rust-lang/rust/commit/57e1da59cd0761330b4ea8d47b16340a78eeafa9"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "c5182228e9d1cf04592deeb6b6ffc388d5455f4b", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a39875b4dd90be99d870b9b341a516c313076313/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39875b4dd90be99d870b9b341a516c313076313/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=a39875b4dd90be99d870b9b341a516c313076313", "patch": "@@ -46,9 +46,10 @@ macro_rules! err_exhaust {\n     };\n }\n \n+// In the `throw_*` macros, avoid `return` to make them work with `try {}`.\n #[macro_export]\n macro_rules! throw_unsup {\n-    ($($tt:tt)*) => { return Err(err_unsup!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err(err_unsup!($($tt)*))? };\n }\n \n #[macro_export]\n@@ -58,12 +59,12 @@ macro_rules! throw_unsup_format {\n \n #[macro_export]\n macro_rules! throw_inval {\n-    ($($tt:tt)*) => { return Err(err_inval!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err(err_inval!($($tt)*))? };\n }\n \n #[macro_export]\n macro_rules! throw_ub {\n-    ($($tt:tt)*) => { return Err(err_ub!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err(err_ub!($($tt)*))? };\n }\n \n #[macro_export]\n@@ -73,13 +74,13 @@ macro_rules! throw_ub_format {\n \n #[macro_export]\n macro_rules! throw_exhaust {\n-    ($($tt:tt)*) => { return Err(err_exhaust!($($tt)*).into()) };\n+    ($($tt:tt)*) => { Err(err_exhaust!($($tt)*))? };\n }\n \n #[macro_export]\n macro_rules! throw_machine_stop {\n     ($($tt:tt)*) => {\n-        return Err($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)).into())\n+        Err($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)))?\n     };\n }\n "}, {"sha": "88cb74ebf8c98bca2b1874dd578d8bd0ca7000d3", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a39875b4dd90be99d870b9b341a516c313076313/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39875b4dd90be99d870b9b341a516c313076313/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=a39875b4dd90be99d870b9b341a516c313076313", "patch": "@@ -171,7 +171,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Called to evaluate `Abort` MIR terminator.\n     fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, !> {\n-        throw_unsup_format!(\"aborting execution is not supported\");\n+        throw_unsup_format!(\"aborting execution is not supported\")\n     }\n \n     /// Called for all binary operations where the LHS has pointer type."}, {"sha": "0bc0e379c28aa02be620d4e7f011bea3b3bd413f", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a39875b4dd90be99d870b9b341a516c313076313/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a39875b4dd90be99d870b9b341a516c313076313/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a39875b4dd90be99d870b9b341a516c313076313", "patch": "@@ -192,19 +192,19 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ret: Option<(PlaceTy<'tcx>, BasicBlock)>,\n         _unwind: Option<BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"));\n+        throw_unsup!(ConstPropUnsupported(\"calling intrinsics isn't supported in ConstProp\"))\n     }\n \n     fn assert_panic(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _msg: &rustc::mir::AssertMessage<'tcx>,\n         _unwind: Option<rustc::mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        bug!(\"panics terminators are not evaluated in ConstProp\");\n+        bug!(\"panics terminators are not evaluated in ConstProp\")\n     }\n \n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {\n-        throw_unsup!(ConstPropUnsupported(\"ptr-to-int casts aren't supported in ConstProp\"));\n+        throw_unsup!(ConstPropUnsupported(\"ptr-to-int casts aren't supported in ConstProp\"))\n     }\n \n     fn binary_ptr_op(\n@@ -217,7 +217,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         throw_unsup!(ConstPropUnsupported(\n             \"pointer arithmetic or comparisons aren't supported \\\n             in ConstProp\"\n-        ));\n+        ))\n     }\n \n     #[inline(always)]\n@@ -240,7 +240,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup!(ConstPropUnsupported(\"can't const prop `box` keyword\"));\n+        throw_unsup!(ConstPropUnsupported(\"can't const prop `box` keyword\"))\n     }\n \n     fn access_local("}]}