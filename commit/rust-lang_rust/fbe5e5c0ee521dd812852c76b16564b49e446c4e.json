{"sha": "fbe5e5c0ee521dd812852c76b16564b49e446c4e", "node_id": "C_kwDOAAsO6NoAKGZiZTVlNWMwZWU1MjFkZDgxMjg1MmM3NmIxNjU2NGI0OWU0NDZjNGU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-21T22:59:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-22T00:11:29Z"}, "message": "rustc_index: Add some map-like APIs to `IndexVec`", "tree": {"sha": "9fbeaa2993f2b622f1337ab92fdda88f69a95e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fbeaa2993f2b622f1337ab92fdda88f69a95e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe5e5c0ee521dd812852c76b16564b49e446c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe5e5c0ee521dd812852c76b16564b49e446c4e", "html_url": "https://github.com/rust-lang/rust/commit/fbe5e5c0ee521dd812852c76b16564b49e446c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe5e5c0ee521dd812852c76b16564b49e446c4e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2d9fc509e36d1b32513744adf58c34bcc4f43c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2d9fc509e36d1b32513744adf58c34bcc4f43c", "html_url": "https://github.com/rust-lang/rust/commit/ac2d9fc509e36d1b32513744adf58c34bcc4f43c"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "9f879494d7374ff574afb02f34f18597744cb89b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=fbe5e5c0ee521dd812852c76b16564b49e446c4e", "patch": "@@ -474,9 +474,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         res\n                     } else {\n                         // Associate an HirId to both ids even if there is no resolution.\n-                        self.node_id_to_hir_id.ensure_contains_elem(new_node_id, || None);\n-                        debug_assert!(self.node_id_to_hir_id[new_node_id].is_none());\n-                        self.node_id_to_hir_id[new_node_id] = Some(hir::HirId::make_owner(new_id));\n+                        let _old = self\n+                            .node_id_to_hir_id\n+                            .insert(new_node_id, hir::HirId::make_owner(new_id));\n+                        debug_assert!(_old.is_none());\n                         continue;\n                     };\n                     let ident = *ident;"}, {"sha": "3c75089a760f32fb9cc74c78391d8b32cc7fabac", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fbe5e5c0ee521dd812852c76b16564b49e446c4e", "patch": "@@ -469,11 +469,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let def_id = self.resolver.local_def_id(owner);\n \n         // Always allocate the first `HirId` for the owner itself.\n-        self.node_id_to_hir_id.ensure_contains_elem(owner, || None);\n-        if let Some(_lowered) = self.node_id_to_hir_id[owner] {\n-            panic!(\"with_hir_id_owner must not be called multiple times on owner {:?}\", def_id);\n-        }\n-        self.node_id_to_hir_id[owner] = Some(hir::HirId::make_owner(def_id));\n+        let _old = self.node_id_to_hir_id.insert(owner, hir::HirId::make_owner(def_id));\n+        debug_assert_eq!(_old, None);\n \n         let current_owner = std::mem::replace(&mut self.current_hir_id_owner, def_id);\n         let current_local_counter =\n@@ -484,8 +481,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.current_hir_id_owner = current_owner;\n         self.item_local_id_counter = current_local_counter;\n \n-        self.owners.ensure_contains_elem(def_id, || None);\n-        self.owners[def_id] = Some(item);\n+        let _old = self.owners.insert(def_id, item);\n+        debug_assert!(_old.is_none());\n \n         def_id\n     }\n@@ -499,18 +496,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         assert_ne!(ast_node_id, DUMMY_NODE_ID);\n \n-        self.node_id_to_hir_id.ensure_contains_elem(ast_node_id, || None);\n-        if let Some(existing_hir_id) = self.node_id_to_hir_id[ast_node_id] {\n-            existing_hir_id\n-        } else {\n+        *self.node_id_to_hir_id.get_or_insert_with(ast_node_id, || {\n             // Generate a new `HirId`.\n             let owner = self.current_hir_id_owner;\n             let local_id = self.item_local_id_counter;\n             self.item_local_id_counter.increment_by(1);\n-            let hir_id = hir::HirId { owner, local_id };\n-            self.node_id_to_hir_id[ast_node_id] = Some(hir_id);\n-            hir_id\n-        }\n+            hir::HirId { owner, local_id }\n+        })\n     }\n \n     fn next_id(&mut self) -> hir::HirId {"}, {"sha": "5b1add4cfc6117c65baf25e3da754f4699c237a8", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=fbe5e5c0ee521dd812852c76b16564b49e446c4e", "patch": "@@ -1072,13 +1072,9 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n     }\n \n     fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {\n-        // Instantiate any missing rows up to and including row `row` with an\n-        // empty HybridBitSet.\n-        self.rows.ensure_contains_elem(row, || None);\n-\n+        // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.\n         // Then replace row `row` with a full HybridBitSet if necessary.\n-        let num_columns = self.num_columns;\n-        self.rows[row].get_or_insert_with(|| HybridBitSet::new_empty(num_columns))\n+        self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))\n     }\n \n     /// Sets the cell at `(row, column)` to true. Put another way, insert"}, {"sha": "8535a7c866d96bb255a9565cf4195b1c46161778", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe5e5c0ee521dd812852c76b16564b49e446c4e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=fbe5e5c0ee521dd812852c76b16564b49e446c4e", "patch": "@@ -720,6 +720,21 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n }\n \n+/// `IndexVec` is often used as a map, so it provides some map-like APIs.\n+impl<I: Idx, T> IndexVec<I, Option<T>> {\n+    #[inline]\n+    pub fn insert(&mut self, index: I, value: T) -> Option<T> {\n+        self.ensure_contains_elem(index, || None);\n+        self[index].replace(value)\n+    }\n+\n+    #[inline]\n+    pub fn get_or_insert_with(&mut self, index: I, value: impl FnOnce() -> T) -> &mut T {\n+        self.ensure_contains_elem(index, || None);\n+        self[index].get_or_insert_with(value)\n+    }\n+}\n+\n impl<I: Idx, T: Clone> IndexVec<I, T> {\n     #[inline]\n     pub fn resize(&mut self, new_len: usize, value: T) {"}]}