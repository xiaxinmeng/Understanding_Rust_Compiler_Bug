{"sha": "949010d23e9f7037a8e6f323588873b3d2438fb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OTAxMGQyM2U5ZjcwMzdhOGU2ZjMyMzU4ODg3M2IzZDI0MzhmYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T16:00:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T16:00:48Z"}, "message": "Auto merge of #50228 - irinagpopa:backstory-v2, r=nikomatsakis\n\nRename rustc_back to rustc_target and move ABI code to it.\n\nFixes #45226.", "tree": {"sha": "5fc47e5862bd70b8728e6eb204c815f007c8dcad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc47e5862bd70b8728e6eb204c815f007c8dcad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/949010d23e9f7037a8e6f323588873b3d2438fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/949010d23e9f7037a8e6f323588873b3d2438fb1", "html_url": "https://github.com/rust-lang/rust/commit/949010d23e9f7037a8e6f323588873b3d2438fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/949010d23e9f7037a8e6f323588873b3d2438fb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "html_url": "https://github.com/rust-lang/rust/commit/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d"}, {"sha": "a131c518ad640ccd12711ccd63d8b98cafa55ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a131c518ad640ccd12711ccd63d8b98cafa55ee9", "html_url": "https://github.com/rust-lang/rust/commit/a131c518ad640ccd12711ccd63d8b98cafa55ee9"}], "stats": {"total": 4353, "additions": 2267, "deletions": 2086}, "files": [{"sha": "e14b9da971301eca0970d7349056e20971321228", "filename": "src/Cargo.lock", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -1728,10 +1728,10 @@ dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -1818,8 +1818,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"rustc-main\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustc_back 0.0.0\",\n  \"rustc_driver 0.0.0\",\n+ \"rustc_target 0.0.0\",\n ]\n \n [[package]]\n@@ -1833,6 +1833,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -1857,16 +1858,6 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_back\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serialize 0.0.0\",\n- \"syntax 0.0.0\",\n-]\n-\n [[package]]\n name = \"rustc_borrowck\"\n version = \"0.0.0\"\n@@ -1895,6 +1886,7 @@ name = \"rustc_cratesio_shim\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1906,6 +1898,7 @@ dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_cratesio_shim 0.0.0\",\n  \"serialize 0.0.0\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1921,7 +1914,6 @@ dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_allocator 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_borrowck 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -1934,6 +1926,7 @@ dependencies = [\n  \"rustc_privacy 0.0.0\",\n  \"rustc_resolve 0.0.0\",\n  \"rustc_save_analysis 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"rustc_traits 0.0.0\",\n  \"rustc_trans_utils 0.0.0\",\n  \"rustc_typeck 0.0.0\",\n@@ -1976,6 +1969,7 @@ dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_mir 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2011,9 +2005,9 @@ dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n@@ -2032,10 +2026,10 @@ dependencies = [\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -2116,11 +2110,22 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"rustc_typeck 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_target\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_cratesio_shim 0.0.0\",\n+ \"serialize 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_traits\"\n version = \"0.0.0\"\n@@ -2138,7 +2143,6 @@ dependencies = [\n name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n- \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2150,14 +2154,14 @@ dependencies = [\n  \"rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_allocator 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"rustc_trans_utils 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -2173,10 +2177,10 @@ dependencies = [\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n  \"rustc_mir 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2205,6 +2209,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2543,9 +2548,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc_cratesio_shim 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -2559,6 +2564,7 @@ dependencies = [\n  \"proc_macro 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "357ebb89fb65242bfdd31cb96e95a4be1be9bdc2", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -18,7 +18,7 @@ lazy_static = \"1.0.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n proc_macro = { path = \"../libproc_macro\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n-rustc_back = { path = \"../librustc_back\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "62f3f9f4486adde80e575350cfb8027c3950f8bd", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -41,7 +41,7 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast::{NodeId, CRATE_NODE_ID, Name, Attribute};\n use syntax_pos::Span;\n use hir::*;"}, {"sha": "362c0bf07f73bcb3c7ac54b060d036e58a59d6ec", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -25,7 +25,7 @@ use hir as ast;\n use hir::map::{self, Node};\n use hir::{Expr, FnDecl};\n use hir::intravisit::FnKind;\n-use syntax::abi;\n+use rustc_target::spec::abi;\n use syntax::ast::{Attribute, Name, NodeId};\n use syntax_pos::Span;\n "}, {"sha": "a9613a60a57c089f9ec87127bcc94d1076199b96", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -21,7 +21,7 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n \n use middle::cstore::CrateStore;\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n use syntax::ext::base::MacroKind;"}, {"sha": "0dc89d64bd50116b02d71039e34e6e32c05eb4d3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -34,7 +34,7 @@ use mir::mono::Linkage;\n \n use syntax_pos::{Span, DUMMY_SP};\n use syntax::codemap::{self, Spanned};\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};\n use syntax::attr::InlineAttr;"}, {"sha": "3943c30127d6f73f9c1800fa2cd4dc63c5ebdda9", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,7 +10,7 @@\n \n pub use self::AnnNode::*;\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::codemap::{CodeMap, Spanned};\n use syntax::parse::{token, ParseSess};"}, {"sha": "db40417917547aa10249a7b0444c81e4dfea6c22", "filename": "src/librustc/ich/impls_misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_misc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -20,7 +20,7 @@ impl_stable_hash_for!(enum ::session::search_paths::PathKind {\n     All\n });\n \n-impl_stable_hash_for!(enum ::rustc_back::PanicStrategy {\n+impl_stable_hash_for!(enum ::rustc_target::spec::PanicStrategy {\n     Abort,\n     Unwind\n });"}, {"sha": "d7e16ab36205ecd6a58bcceac7c93ef0d0fc6f3f", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -82,7 +82,7 @@ impl_stable_hash_for!(enum ::syntax::ext::base::MacroKind {\n });\n \n \n-impl_stable_hash_for!(enum ::syntax::abi::Abi {\n+impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     Cdecl,\n     Stdcall,\n     Fastcall,"}, {"sha": "f85d0a9bf0c2eccfb68b45993c4a3fe539ce29b5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -81,7 +81,7 @@ extern crate graphviz;\n #[macro_use] extern crate lazy_static;\n #[cfg(windows)]\n extern crate libc;\n-extern crate rustc_back;\n+extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n extern crate serialize;\n extern crate rustc_const_math;"}, {"sha": "f90baa2ccd95d02766a0d7ffba31ee954aa22649", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -657,7 +657,8 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for &'a LateContext<'a, 'tcx> {\n+impl<'a, 'tcx> LayoutOf for &'a LateContext<'a, 'tcx> {\n+    type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {"}, {"sha": "4400ebc294fd89f4afd114926bb98e17198c6dbf", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -37,7 +37,7 @@ use syntax::ast;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use rustc_back::target::Target;\n+use rustc_target::spec::Target;\n use rustc_data_structures::sync::{MetadataRef, Lrc};\n \n pub use self::NativeLibraryKind::*;"}, {"sha": "4996a6acff85c574b3d3c6949cf5fae07f6fd24b", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -69,7 +69,7 @@ use ty::TyCtxt;\n use middle::cstore::{self, DepKind};\n use middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n use util::nodemap::FxHashMap;\n-use rustc_back::PanicStrategy;\n+use rustc_target::spec::PanicStrategy;\n \n /// A list of dependencies for a certain crate type.\n ///"}, {"sha": "27f7dbf508db029a8d4f89496ac5fef59a39df4d", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@ use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use ty::layout::{LayoutError, Pointer, SizeSkeleton};\n \n-use syntax::abi::Abi::RustIntrinsic;\n+use rustc_target::spec::abi::Abi::RustIntrinsic;\n use syntax_pos::Span;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use hir;"}, {"sha": "0aeb15b49fbbd0177a2053a4ebd83d728cc2eaee", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -26,7 +26,7 @@ use middle::privacy;\n use session::config;\n use util::nodemap::{NodeSet, FxHashSet};\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use hir;"}, {"sha": "42e4d3861bae37d9380da54781f6ca60de40fafb", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@\n use session::config;\n use middle::lang_items;\n \n-use rustc_back::PanicStrategy;\n+use rustc_target::spec::PanicStrategy;\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;"}, {"sha": "ab703d423c61d27be59a5538721b0dda944b7c90", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -22,8 +22,8 @@ use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPaths;\n \n use ich::StableHashingContext;\n-use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n-use rustc_back::target::{Target, TargetTriple};\n+use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{Target, TargetTriple};\n use rustc_data_structures::stable_hasher::ToStableHashKey;\n use lint;\n use middle::cstore;\n@@ -770,7 +770,7 @@ macro_rules! options {\n         pub const parse_sanitizer: Option<&'static str> =\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n         pub const parse_linker_flavor: Option<&'static str> =\n-            Some(::rustc_back::LinkerFlavor::one_of());\n+            Some(::rustc_target::spec::LinkerFlavor::one_of());\n         pub const parse_optimization_fuel: Option<&'static str> =\n             Some(\"crate=integer\");\n         pub const parse_unpretty: Option<&'static str> =\n@@ -782,7 +782,7 @@ macro_rules! options {\n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n-        use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n+        use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n         $(\n@@ -2323,8 +2323,7 @@ mod dep_tracking {\n     use super::{CrateType, DebugInfoLevel, ErrorOutputType, Lto, OptLevel, OutputTypes,\n                 Passes, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n-    use rustc_back::{PanicStrategy, RelroLevel};\n-    use rustc_back::target::TargetTriple;\n+    use rustc_target::spec::{PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n \n     pub trait DepTrackingHash {\n@@ -2456,7 +2455,7 @@ mod tests {\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n     use super::{Externs, OutputType, OutputTypes};\n-    use rustc_back::{PanicStrategy, RelroLevel};\n+    use rustc_target::spec::{PanicStrategy, RelroLevel};\n     use syntax::symbol::Symbol;\n     use syntax::edition::{Edition, DEFAULT_EDITION};\n     use syntax;"}, {"sha": "a0f11443425322ab4e50bd26d84ac659b45e3e36", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -41,8 +41,8 @@ use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n use syntax_pos::{MultiSpan, Span};\n \n-use rustc_back::{LinkerFlavor, PanicStrategy};\n-use rustc_back::target::{Target, TargetTriple};\n+use rustc_target::spec::{LinkerFlavor, PanicStrategy};\n+use rustc_target::spec::{Target, TargetTriple};\n use rustc_data_structures::flock;\n use jobserver::Client;\n "}, {"sha": "33abc0c7e15aa4a58dfb2afc75e18306055fcd60", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -1091,15 +1091,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n-                    ::syntax::abi::Abi::Rust\n+                    ::rustc_target::spec::abi::Abi::Rust\n                 )\n             } else {\n                 tcx.mk_fn_sig(\n                     ::std::iter::once(inputs),\n                     tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n-                    ::syntax::abi::Abi::Rust\n+                    ::rustc_target::spec::abi::Abi::Rust\n                 )\n             };\n             format!(\"{}\", ty::Binder::bind(sig))"}, {"sha": "f43f5cf3e3ff4db9d9dafba222858e0042e6dbf2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -51,7 +51,7 @@ use std::cmp;\n use std::fmt;\n use std::mem;\n use std::rc::Rc;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use hir;\n use util::nodemap::{FxHashMap, FxHashSet};\n "}, {"sha": "4f49b159ad387dcb4ce983cfb5caf44d3dab03f4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -70,7 +70,7 @@ use std::ops::Deref;\n use std::iter;\n use std::sync::mpsc;\n use std::sync::Arc;\n-use syntax::abi;\n+use rustc_target::spec::abi;\n use syntax::ast::{self, NodeId};\n use syntax::attr;\n use syntax::codemap::MultiSpan;\n@@ -1204,7 +1204,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   f: F) -> R\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'tcx>) -> R\n     {\n-        let data_layout = TargetDataLayout::parse(s);\n+        let data_layout = TargetDataLayout::parse(&s.target.target).unwrap_or_else(|err| {\n+            s.fatal(&err);\n+        });\n         let interners = CtxtInterners::new(&arenas.interner);\n         let common_types = CommonTypes::new(&interners);\n         let dep_graph = hir.dep_graph.clone();"}, {"sha": "cf2004a681e6238c85c57f811d1e2ce778bf92ac", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,7 +11,7 @@\n use hir::def_id::DefId;\n use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n use std::fmt;\n-use syntax::abi;\n+use rustc_target::spec::abi;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n use syntax_pos::Span;"}, {"sha": "ecd415c4bc42082ff801944f75aeaecbc919b619", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -12,7 +12,7 @@ use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n use ty::subst::Kind;\n use traits;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use util::ppaux;\n \n use std::fmt;"}, {"sha": "942cfdb36b8da9bb09f95739baedf4db0b1a7692", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 76, "deletions": 837, "changes": 913, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,10 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::Integer::*;\n-pub use self::Primitive::*;\n-\n-use session::{self, DataTypeKind, Session};\n+use session::{self, DataTypeKind};\n use ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n \n use syntax::ast::{self, FloatTy, IntTy, UintTy};\n@@ -21,432 +18,28 @@ use syntax_pos::DUMMY_SP;\n use std::cmp;\n use std::fmt;\n use std::i128;\n-use std::iter;\n use std::mem;\n-use std::ops::{Add, Sub, Mul, AddAssign, Deref, RangeInclusive};\n+use std::ops::RangeInclusive;\n \n use ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n \n-/// Parsed [Data layout](http://llvm.org/docs/LangRef.html#data-layout)\n-/// for a target, which contains everything needed to compute layouts.\n-pub struct TargetDataLayout {\n-    pub endian: Endian,\n-    pub i1_align: Align,\n-    pub i8_align: Align,\n-    pub i16_align: Align,\n-    pub i32_align: Align,\n-    pub i64_align: Align,\n-    pub i128_align: Align,\n-    pub f32_align: Align,\n-    pub f64_align: Align,\n-    pub pointer_size: Size,\n-    pub pointer_align: Align,\n-    pub aggregate_align: Align,\n-\n-    /// Alignments for vector types.\n-    pub vector_align: Vec<(Size, Align)>\n-}\n-\n-impl Default for TargetDataLayout {\n-    /// Creates an instance of `TargetDataLayout`.\n-    fn default() -> TargetDataLayout {\n-        TargetDataLayout {\n-            endian: Endian::Big,\n-            i1_align: Align::from_bits(8, 8).unwrap(),\n-            i8_align: Align::from_bits(8, 8).unwrap(),\n-            i16_align: Align::from_bits(16, 16).unwrap(),\n-            i32_align: Align::from_bits(32, 32).unwrap(),\n-            i64_align: Align::from_bits(32, 64).unwrap(),\n-            i128_align: Align::from_bits(32, 64).unwrap(),\n-            f32_align: Align::from_bits(32, 32).unwrap(),\n-            f64_align: Align::from_bits(64, 64).unwrap(),\n-            pointer_size: Size::from_bits(64),\n-            pointer_align: Align::from_bits(64, 64).unwrap(),\n-            aggregate_align: Align::from_bits(0, 64).unwrap(),\n-            vector_align: vec![\n-                (Size::from_bits(64), Align::from_bits(64, 64).unwrap()),\n-                (Size::from_bits(128), Align::from_bits(128, 128).unwrap())\n-            ]\n-        }\n-    }\n-}\n-\n-impl TargetDataLayout {\n-    pub fn parse(sess: &Session) -> TargetDataLayout {\n-        // Parse a bit count from a string.\n-        let parse_bits = |s: &str, kind: &str, cause: &str| {\n-            s.parse::<u64>().unwrap_or_else(|err| {\n-                sess.err(&format!(\"invalid {} `{}` for `{}` in \\\"data-layout\\\": {}\",\n-                                  kind, s, cause, err));\n-                0\n-            })\n-        };\n-\n-        // Parse a size string.\n-        let size = |s: &str, cause: &str| {\n-            Size::from_bits(parse_bits(s, \"size\", cause))\n-        };\n-\n-        // Parse an alignment string.\n-        let align = |s: &[&str], cause: &str| {\n-            if s.is_empty() {\n-                sess.err(&format!(\"missing alignment for `{}` in \\\"data-layout\\\"\", cause));\n-            }\n-            let abi = parse_bits(s[0], \"alignment\", cause);\n-            let pref = s.get(1).map_or(abi, |pref| parse_bits(pref, \"alignment\", cause));\n-            Align::from_bits(abi, pref).unwrap_or_else(|err| {\n-                sess.err(&format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\",\n-                                  cause, err));\n-                Align::from_bits(8, 8).unwrap()\n-            })\n-        };\n-\n-        let mut dl = TargetDataLayout::default();\n-        let mut i128_align_src = 64;\n-        for spec in sess.target.target.data_layout.split(\"-\") {\n-            match &spec.split(\":\").collect::<Vec<_>>()[..] {\n-                &[\"e\"] => dl.endian = Endian::Little,\n-                &[\"E\"] => dl.endian = Endian::Big,\n-                &[\"a\", ref a..] => dl.aggregate_align = align(a, \"a\"),\n-                &[\"f32\", ref a..] => dl.f32_align = align(a, \"f32\"),\n-                &[\"f64\", ref a..] => dl.f64_align = align(a, \"f64\"),\n-                &[p @ \"p\", s, ref a..] | &[p @ \"p0\", s, ref a..] => {\n-                    dl.pointer_size = size(s, p);\n-                    dl.pointer_align = align(a, p);\n-                }\n-                &[s, ref a..] if s.starts_with(\"i\") => {\n-                    let bits = match s[1..].parse::<u64>() {\n-                        Ok(bits) => bits,\n-                        Err(_) => {\n-                            size(&s[1..], \"i\"); // For the user error.\n-                            continue;\n-                        }\n-                    };\n-                    let a = align(a, s);\n-                    match bits {\n-                        1 => dl.i1_align = a,\n-                        8 => dl.i8_align = a,\n-                        16 => dl.i16_align = a,\n-                        32 => dl.i32_align = a,\n-                        64 => dl.i64_align = a,\n-                        _ => {}\n-                    }\n-                    if bits >= i128_align_src && bits <= 128 {\n-                        // Default alignment for i128 is decided by taking the alignment of\n-                        // largest-sized i{64...128}.\n-                        i128_align_src = bits;\n-                        dl.i128_align = a;\n-                    }\n-                }\n-                &[s, ref a..] if s.starts_with(\"v\") => {\n-                    let v_size = size(&s[1..], \"v\");\n-                    let a = align(a, s);\n-                    if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {\n-                        v.1 = a;\n-                        continue;\n-                    }\n-                    // No existing entry, add a new one.\n-                    dl.vector_align.push((v_size, a));\n-                }\n-                _ => {} // Ignore everything else.\n-            }\n-        }\n-\n-        // Perform consistency checks against the Target information.\n-        let endian_str = match dl.endian {\n-            Endian::Little => \"little\",\n-            Endian::Big => \"big\"\n-        };\n-        if endian_str != sess.target.target.target_endian {\n-            sess.err(&format!(\"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                               architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n-                              endian_str, sess.target.target.target_endian));\n-        }\n-\n-        if dl.pointer_size.bits().to_string() != sess.target.target.target_pointer_width {\n-            sess.err(&format!(\"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                               pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n-                              dl.pointer_size.bits(), sess.target.target.target_pointer_width));\n-        }\n-\n-        dl\n-    }\n-\n-    /// Return exclusive upper bound on object size.\n-    ///\n-    /// The theoretical maximum object size is defined as the maximum positive `isize` value.\n-    /// This ensures that the `offset` semantics remain well-defined by allowing it to correctly\n-    /// index every address within an object along with one byte past the end, along with allowing\n-    /// `isize` to store the difference between any two pointers into an object.\n-    ///\n-    /// The upper bound on 64-bit currently needs to be lower because LLVM uses a 64-bit integer\n-    /// to represent object size in bits. It would need to be 1 << 61 to account for this, but is\n-    /// currently conservatively bounded to 1 << 47 as that is enough to cover the current usable\n-    /// address space on 64-bit ARMv8 and x86_64.\n-    pub fn obj_size_bound(&self) -> u64 {\n-        match self.pointer_size.bits() {\n-            16 => 1 << 15,\n-            32 => 1 << 31,\n-            64 => 1 << 47,\n-            bits => bug!(\"obj_size_bound: unknown pointer bit size {}\", bits)\n-        }\n-    }\n-\n-    pub fn ptr_sized_integer(&self) -> Integer {\n-        match self.pointer_size.bits() {\n-            16 => I16,\n-            32 => I32,\n-            64 => I64,\n-            bits => bug!(\"ptr_sized_integer: unknown pointer bit size {}\", bits)\n-        }\n-    }\n-\n-    pub fn vector_align(&self, vec_size: Size) -> Align {\n-        for &(size, align) in &self.vector_align {\n-            if size == vec_size {\n-                return align;\n-            }\n-        }\n-        // Default to natural alignment, which is what LLVM does.\n-        // That is, use the size, rounded up to a power of 2.\n-        let align = vec_size.bytes().next_power_of_two();\n-        Align::from_bytes(align, align).unwrap()\n-    }\n-}\n-\n-pub trait HasDataLayout: Copy {\n-    fn data_layout(&self) -> &TargetDataLayout;\n-}\n-\n-impl<'a> HasDataLayout for &'a TargetDataLayout {\n-    fn data_layout(&self) -> &TargetDataLayout {\n-        self\n-    }\n-}\n-\n-/// Endianness of the target, which must match cfg(target-endian).\n-#[derive(Copy, Clone)]\n-pub enum Endian {\n-    Little,\n-    Big\n-}\n-\n-/// Size of a type in bytes.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-pub struct Size {\n-    raw: u64\n-}\n-\n-impl Size {\n-    pub fn from_bits(bits: u64) -> Size {\n-        // Avoid potential overflow from `bits + 7`.\n-        Size::from_bytes(bits / 8 + ((bits % 8) + 7) / 8)\n-    }\n-\n-    pub fn from_bytes(bytes: u64) -> Size {\n-        if bytes >= (1 << 61) {\n-            bug!(\"Size::from_bytes: {} bytes in bits doesn't fit in u64\", bytes)\n-        }\n-        Size {\n-            raw: bytes\n-        }\n-    }\n-\n-    pub fn bytes(self) -> u64 {\n-        self.raw\n-    }\n-\n-    pub fn bits(self) -> u64 {\n-        self.bytes() * 8\n-    }\n-\n-    pub fn abi_align(self, align: Align) -> Size {\n-        let mask = align.abi() - 1;\n-        Size::from_bytes((self.bytes() + mask) & !mask)\n-    }\n-\n-    pub fn is_abi_aligned(self, align: Align) -> bool {\n-        let mask = align.abi() - 1;\n-        self.bytes() & mask == 0\n-    }\n-\n-    pub fn checked_add<C: HasDataLayout>(self, offset: Size, cx: C) -> Option<Size> {\n-        let dl = cx.data_layout();\n-\n-        // Each Size is less than dl.obj_size_bound(), so the sum is\n-        // also less than 1 << 62 (and therefore can't overflow).\n-        let bytes = self.bytes() + offset.bytes();\n-\n-        if bytes < dl.obj_size_bound() {\n-            Some(Size::from_bytes(bytes))\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn checked_mul<C: HasDataLayout>(self, count: u64, cx: C) -> Option<Size> {\n-        let dl = cx.data_layout();\n-\n-        match self.bytes().checked_mul(count) {\n-            Some(bytes) if bytes < dl.obj_size_bound() => {\n-                Some(Size::from_bytes(bytes))\n-            }\n-            _ => None\n-        }\n-    }\n-}\n-\n-// Panicking addition, subtraction and multiplication for convenience.\n-// Avoid during layout computation, return `LayoutError` instead.\n-\n-impl Add for Size {\n-    type Output = Size;\n-    fn add(self, other: Size) -> Size {\n-        // Each Size is less than 1 << 61, so the sum is\n-        // less than 1 << 62 (and therefore can't overflow).\n-        Size::from_bytes(self.bytes() + other.bytes())\n-    }\n-}\n-\n-impl Sub for Size {\n-    type Output = Size;\n-    fn sub(self, other: Size) -> Size {\n-        // Each Size is less than 1 << 61, so an underflow\n-        // would result in a value larger than 1 << 61,\n-        // which Size::from_bytes will catch for us.\n-        Size::from_bytes(self.bytes() - other.bytes())\n-    }\n-}\n-\n-impl Mul<u64> for Size {\n-    type Output = Size;\n-    fn mul(self, count: u64) -> Size {\n-        match self.bytes().checked_mul(count) {\n-            Some(bytes) => Size::from_bytes(bytes),\n-            None => {\n-                bug!(\"Size::mul: {} * {} doesn't fit in u64\", self.bytes(), count)\n-            }\n-        }\n-    }\n-}\n-\n-impl AddAssign for Size {\n-    fn add_assign(&mut self, other: Size) {\n-        *self = *self + other;\n-    }\n-}\n-\n-/// Alignment of a type in bytes, both ABI-mandated and preferred.\n-/// Each field is a power of two, giving the alignment a maximum\n-/// value of 2<sup>(2<sup>8</sup> - 1)</sup>, which is limited by LLVM to a i32, with\n-/// a maximum capacity of 2<sup>31</sup> - 1 or 2147483647.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct Align {\n-    abi_pow2: u8,\n-    pref_pow2: u8,\n-}\n+pub use rustc_target::abi::*;\n \n-impl Align {\n-    pub fn from_bits(abi: u64, pref: u64) -> Result<Align, String> {\n-        Align::from_bytes(Size::from_bits(abi).bytes(),\n-                          Size::from_bits(pref).bytes())\n-    }\n-\n-    pub fn from_bytes(abi: u64, pref: u64) -> Result<Align, String> {\n-        let log2 = |align: u64| {\n-            // Treat an alignment of 0 bytes like 1-byte alignment.\n-            if align == 0 {\n-                return Ok(0);\n-            }\n-\n-            let mut bytes = align;\n-            let mut pow: u8 = 0;\n-            while (bytes & 1) == 0 {\n-                pow += 1;\n-                bytes >>= 1;\n-            }\n-            if bytes != 1 {\n-                Err(format!(\"`{}` is not a power of 2\", align))\n-            } else if pow > 30 {\n-                Err(format!(\"`{}` is too large\", align))\n-            } else {\n-                Ok(pow)\n-            }\n-        };\n-\n-        Ok(Align {\n-            abi_pow2: log2(abi)?,\n-            pref_pow2: log2(pref)?,\n-        })\n-    }\n-\n-    pub fn abi(self) -> u64 {\n-        1 << self.abi_pow2\n-    }\n-\n-    pub fn pref(self) -> u64 {\n-        1 << self.pref_pow2\n-    }\n-\n-    pub fn abi_bits(self) -> u64 {\n-        self.abi() * 8\n-    }\n-\n-    pub fn pref_bits(self) -> u64 {\n-        self.pref() * 8\n-    }\n-\n-    pub fn min(self, other: Align) -> Align {\n-        Align {\n-            abi_pow2: cmp::min(self.abi_pow2, other.abi_pow2),\n-            pref_pow2: cmp::min(self.pref_pow2, other.pref_pow2),\n-        }\n-    }\n-\n-    pub fn max(self, other: Align) -> Align {\n-        Align {\n-            abi_pow2: cmp::max(self.abi_pow2, other.abi_pow2),\n-            pref_pow2: cmp::max(self.pref_pow2, other.pref_pow2),\n-        }\n-    }\n-}\n-\n-/// Integers, also used for enum discriminants.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-pub enum Integer {\n-    I8,\n-    I16,\n-    I32,\n-    I64,\n-    I128,\n+pub trait IntegerExt {\n+    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx>;\n+    fn from_attr<C: HasDataLayout>(cx: C, ity: attr::IntType) -> Integer;\n+    fn repr_discr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                  ty: Ty<'tcx>,\n+                  repr: &ReprOptions,\n+                  min: i128,\n+                  max: i128)\n+                  -> (Integer, bool);\n }\n \n-impl<'a, 'tcx> Integer {\n-    pub fn size(&self) -> Size {\n-        match *self {\n-            I8 => Size::from_bytes(1),\n-            I16 => Size::from_bytes(2),\n-            I32 => Size::from_bytes(4),\n-            I64  => Size::from_bytes(8),\n-            I128  => Size::from_bytes(16),\n-        }\n-    }\n-\n-    pub fn align<C: HasDataLayout>(&self, cx: C) -> Align {\n-        let dl = cx.data_layout();\n-\n-        match *self {\n-            I8 => dl.i8_align,\n-            I16 => dl.i16_align,\n-            I32 => dl.i32_align,\n-            I64 => dl.i64_align,\n-            I128 => dl.i128_align,\n-        }\n-    }\n-\n-    pub fn to_ty(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx> {\n+impl IntegerExt for Integer {\n+    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n             (I8, false) => tcx.types.u8,\n             (I16, false) => tcx.types.u16,\n@@ -461,57 +54,8 @@ impl<'a, 'tcx> Integer {\n         }\n     }\n \n-    /// Find the smallest Integer type which can represent the signed value.\n-    pub fn fit_signed(x: i128) -> Integer {\n-        match x {\n-            -0x0000_0000_0000_0080...0x0000_0000_0000_007f => I8,\n-            -0x0000_0000_0000_8000...0x0000_0000_0000_7fff => I16,\n-            -0x0000_0000_8000_0000...0x0000_0000_7fff_ffff => I32,\n-            -0x8000_0000_0000_0000...0x7fff_ffff_ffff_ffff => I64,\n-            _ => I128\n-        }\n-    }\n-\n-    /// Find the smallest Integer type which can represent the unsigned value.\n-    pub fn fit_unsigned(x: u128) -> Integer {\n-        match x {\n-            0...0x0000_0000_0000_00ff => I8,\n-            0...0x0000_0000_0000_ffff => I16,\n-            0...0x0000_0000_ffff_ffff => I32,\n-            0...0xffff_ffff_ffff_ffff => I64,\n-            _ => I128,\n-        }\n-    }\n-\n-    /// Find the smallest integer with the given alignment.\n-    pub fn for_abi_align<C: HasDataLayout>(cx: C, align: Align) -> Option<Integer> {\n-        let dl = cx.data_layout();\n-\n-        let wanted = align.abi();\n-        for &candidate in &[I8, I16, I32, I64, I128] {\n-            if wanted == candidate.align(dl).abi() && wanted == candidate.size().bytes() {\n-                return Some(candidate);\n-            }\n-        }\n-        None\n-    }\n-\n-    /// Find the largest integer with the given alignment or less.\n-    pub fn approximate_abi_align<C: HasDataLayout>(cx: C, align: Align) -> Integer {\n-        let dl = cx.data_layout();\n-\n-        let wanted = align.abi();\n-        // FIXME(eddyb) maybe include I128 in the future, when it works everywhere.\n-        for &candidate in &[I64, I32, I16] {\n-            if wanted >= candidate.align(dl).abi() && wanted >= candidate.size().bytes() {\n-                return candidate;\n-            }\n-        }\n-        I8\n-    }\n-\n     /// Get the Integer type from an attr::IntType.\n-    pub fn from_attr<C: HasDataLayout>(cx: C, ity: attr::IntType) -> Integer {\n+    fn from_attr<C: HasDataLayout>(cx: C, ity: attr::IntType) -> Integer {\n         let dl = cx.data_layout();\n \n         match ity {\n@@ -530,7 +74,7 @@ impl<'a, 'tcx> Integer {\n     /// signed discriminant range and #[repr] attribute.\n     /// N.B.: u128 values above i128::MAX will be treated as signed, but\n     /// that shouldn't affect anything, other than maybe debuginfo.\n-    fn repr_discr(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn repr_discr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   ty: Ty<'tcx>,\n                   repr: &ReprOptions,\n                   min: i128,\n@@ -578,46 +122,12 @@ impl<'a, 'tcx> Integer {\n     }\n }\n \n-/// Fundamental unit of memory access and layout.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum Primitive {\n-    /// The `bool` is the signedness of the `Integer` type.\n-    ///\n-    /// One would think we would not care about such details this low down,\n-    /// but some ABIs are described in terms of C types and ISAs where the\n-    /// integer arithmetic is done on {sign,zero}-extended registers, e.g.\n-    /// a negative integer passed by zero-extension will appear positive in\n-    /// the callee, and most operations on it will produce the wrong values.\n-    Int(Integer, bool),\n-    F32,\n-    F64,\n-    Pointer\n+pub trait PrimitiveExt {\n+    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx>;\n }\n \n-impl<'a, 'tcx> Primitive {\n-    pub fn size<C: HasDataLayout>(self, cx: C) -> Size {\n-        let dl = cx.data_layout();\n-\n-        match self {\n-            Int(i, _) => i.size(),\n-            F32 => Size::from_bits(32),\n-            F64 => Size::from_bits(64),\n-            Pointer => dl.pointer_size\n-        }\n-    }\n-\n-    pub fn align<C: HasDataLayout>(self, cx: C) -> Align {\n-        let dl = cx.data_layout();\n-\n-        match self {\n-            Int(i, _) => i.align(dl),\n-            F32 => dl.f32_align,\n-            F64 => dl.f64_align,\n-            Pointer => dl.pointer_align\n-        }\n-    }\n-\n-    pub fn to_ty(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n+impl PrimitiveExt for Primitive {\n+    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             F32 => tcx.types.f32,\n@@ -627,29 +137,6 @@ impl<'a, 'tcx> Primitive {\n     }\n }\n \n-/// Information about one scalar component of a Rust type.\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub struct Scalar {\n-    pub value: Primitive,\n-\n-    /// Inclusive wrap-around range of valid values, that is, if\n-    /// min > max, it represents min..=u128::MAX followed by 0..=max.\n-    // FIXME(eddyb) always use the shortest range, e.g. by finding\n-    // the largest space between two consecutive valid values and\n-    // taking everything else as the (shortest) valid range.\n-    pub valid_range: RangeInclusive<u128>,\n-}\n-\n-impl Scalar {\n-    pub fn is_bool(&self) -> bool {\n-        if let Int(I8, _) = self.value {\n-            self.valid_range == (0..=1)\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n /// The first half of a fat pointer.\n ///\n /// - For a trait object, this is the address of the box.\n@@ -662,183 +149,6 @@ pub const FAT_PTR_ADDR: usize = 0;\n /// - For a slice, this is the length.\n pub const FAT_PTR_EXTRA: usize = 1;\n \n-/// Describes how the fields of a type are located in memory.\n-#[derive(PartialEq, Eq, Hash, Debug)]\n-pub enum FieldPlacement {\n-    /// All fields start at no offset. The `usize` is the field count.\n-    Union(usize),\n-\n-    /// Array/vector-like placement, with all fields of identical types.\n-    Array {\n-        stride: Size,\n-        count: u64\n-    },\n-\n-    /// Struct-like placement, with precomputed offsets.\n-    ///\n-    /// Fields are guaranteed to not overlap, but note that gaps\n-    /// before, between and after all the fields are NOT always\n-    /// padding, and as such their contents may not be discarded.\n-    /// For example, enum variants leave a gap at the start,\n-    /// where the discriminant field in the enum layout goes.\n-    Arbitrary {\n-        /// Offsets for the first byte of each field,\n-        /// ordered to match the source definition order.\n-        /// This vector does not go in increasing order.\n-        // FIXME(eddyb) use small vector optimization for the common case.\n-        offsets: Vec<Size>,\n-\n-        /// Maps source order field indices to memory order indices,\n-        /// depending how fields were permuted.\n-        // FIXME(camlorn) also consider small vector  optimization here.\n-        memory_index: Vec<u32>\n-    }\n-}\n-\n-impl FieldPlacement {\n-    pub fn count(&self) -> usize {\n-        match *self {\n-            FieldPlacement::Union(count) => count,\n-            FieldPlacement::Array { count, .. } => {\n-                let usize_count = count as usize;\n-                assert_eq!(usize_count as u64, count);\n-                usize_count\n-            }\n-            FieldPlacement::Arbitrary { ref offsets, .. } => offsets.len()\n-        }\n-    }\n-\n-    pub fn offset(&self, i: usize) -> Size {\n-        match *self {\n-            FieldPlacement::Union(_) => Size::from_bytes(0),\n-            FieldPlacement::Array { stride, count } => {\n-                let i = i as u64;\n-                assert!(i < count);\n-                stride * i\n-            }\n-            FieldPlacement::Arbitrary { ref offsets, .. } => offsets[i]\n-        }\n-    }\n-\n-    pub fn memory_index(&self, i: usize) -> usize {\n-        match *self {\n-            FieldPlacement::Union(_) |\n-            FieldPlacement::Array { .. } => i,\n-            FieldPlacement::Arbitrary { ref memory_index, .. } => {\n-                let r = memory_index[i];\n-                assert_eq!(r as usize as u32, r);\n-                r as usize\n-            }\n-        }\n-    }\n-\n-    /// Get source indices of the fields by increasing offsets.\n-    #[inline]\n-    pub fn index_by_increasing_offset<'a>(&'a self) -> impl iter::Iterator<Item=usize>+'a {\n-        let mut inverse_small = [0u8; 64];\n-        let mut inverse_big = vec![];\n-        let use_small = self.count() <= inverse_small.len();\n-\n-        // We have to write this logic twice in order to keep the array small.\n-        if let FieldPlacement::Arbitrary { ref memory_index, .. } = *self {\n-            if use_small {\n-                for i in 0..self.count() {\n-                    inverse_small[memory_index[i] as usize] = i as u8;\n-                }\n-            } else {\n-                inverse_big = vec![0; self.count()];\n-                for i in 0..self.count() {\n-                    inverse_big[memory_index[i] as usize] = i as u32;\n-                }\n-            }\n-        }\n-\n-        (0..self.count()).map(move |i| {\n-            match *self {\n-                FieldPlacement::Union(_) |\n-                FieldPlacement::Array { .. } => i,\n-                FieldPlacement::Arbitrary { .. } => {\n-                    if use_small { inverse_small[i] as usize }\n-                    else { inverse_big[i] as usize }\n-                }\n-            }\n-        })\n-    }\n-}\n-\n-/// Describes how values of the type are passed by target ABIs,\n-/// in terms of categories of C types there are ABI rules for.\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n-pub enum Abi {\n-    Uninhabited,\n-    Scalar(Scalar),\n-    ScalarPair(Scalar, Scalar),\n-    Vector {\n-        element: Scalar,\n-        count: u64\n-    },\n-    Aggregate {\n-        /// If true, the size is exact, otherwise it's only a lower bound.\n-        sized: bool,\n-    }\n-}\n-\n-impl Abi {\n-    /// Returns true if the layout corresponds to an unsized type.\n-    pub fn is_unsized(&self) -> bool {\n-        match *self {\n-            Abi::Uninhabited |\n-            Abi::Scalar(_) |\n-            Abi::ScalarPair(..) |\n-            Abi::Vector { .. } => false,\n-            Abi::Aggregate { sized } => !sized\n-        }\n-    }\n-\n-    /// Returns true if this is a single signed integer scalar\n-    pub fn is_signed(&self) -> bool {\n-        match *self {\n-            Abi::Scalar(ref scal) => match scal.value {\n-                Primitive::Int(_, signed) => signed,\n-                _ => false,\n-            },\n-            _ => false,\n-        }\n-    }\n-}\n-\n-#[derive(PartialEq, Eq, Hash, Debug)]\n-pub enum Variants {\n-    /// Single enum variants, structs/tuples, unions, and all non-ADTs.\n-    Single {\n-        index: usize\n-    },\n-\n-    /// General-case enums: for each case there is a struct, and they all have\n-    /// all space reserved for the discriminant, and their first field starts\n-    /// at a non-0 offset, after where the discriminant would go.\n-    Tagged {\n-        discr: Scalar,\n-        variants: Vec<LayoutDetails>,\n-    },\n-\n-    /// Multiple cases distinguished by a niche (values invalid for a type):\n-    /// the variant `dataful_variant` contains a niche at an arbitrary\n-    /// offset (field 0 of the enum), which for a variant with discriminant\n-    /// `d` is set to `(d - niche_variants.start).wrapping_add(niche_start)`.\n-    ///\n-    /// For example, `Option<(usize, &T)>`  is represented such that\n-    /// `None` has a null pointer for the second tuple field, and\n-    /// `Some` is the identity function (with a non-null reference).\n-    NicheFilling {\n-        dataful_variant: usize,\n-        niche_variants: RangeInclusive<usize>,\n-        niche: Scalar,\n-        niche_start: u128,\n-        variants: Vec<LayoutDetails>,\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n@@ -858,40 +168,6 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     }\n }\n \n-#[derive(PartialEq, Eq, Hash, Debug)]\n-pub struct LayoutDetails {\n-    pub variants: Variants,\n-    pub fields: FieldPlacement,\n-    pub abi: Abi,\n-    pub align: Align,\n-    pub size: Size\n-}\n-\n-impl LayoutDetails {\n-    fn scalar<C: HasDataLayout>(cx: C, scalar: Scalar) -> Self {\n-        let size = scalar.value.size(cx);\n-        let align = scalar.value.align(cx);\n-        LayoutDetails {\n-            variants: Variants::Single { index: 0 },\n-            fields: FieldPlacement::Union(0),\n-            abi: Abi::Scalar(scalar),\n-            size,\n-            align,\n-        }\n-    }\n-\n-    fn uninhabited(field_count: usize) -> Self {\n-        let align = Align::from_bytes(1, 1).unwrap();\n-        LayoutDetails {\n-            variants: Variants::Single { index: 0 },\n-            fields: FieldPlacement::Union(field_count),\n-            abi: Abi::Uninhabited,\n-            align,\n-            size: Size::from_bytes(0)\n-        }\n-    }\n-}\n-\n fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n                         -> Result<&'tcx LayoutDetails, LayoutError<'tcx>>\n@@ -1525,9 +801,9 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n                     if let Some(i) = dataful_variant {\n                         let count = (niche_variants.end - niche_variants.start + 1) as u128;\n-                        for (field_index, field) in variants[i].iter().enumerate() {\n+                        for (field_index, &field) in variants[i].iter().enumerate() {\n                             let (offset, niche, niche_start) =\n-                                match field.find_niche(self, count)? {\n+                                match self.find_niche(field, count)? {\n                                     Some(niche) => niche,\n                                     None => continue\n                                 };\n@@ -2024,26 +1300,6 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n     }\n }\n \n-/// The details of the layout of a type, alongside the type itself.\n-/// Provides various type traversal APIs (e.g. recursing into fields).\n-///\n-/// Note that the details are NOT guaranteed to always be identical\n-/// to those obtained from `layout_of(ty)`, as we need to produce\n-/// layouts for which Rust types do not exist, such as enum variants\n-/// or synthetic fields of enums (i.e. discriminants) and fat pointers.\n-#[derive(Copy, Clone, Debug)]\n-pub struct TyLayout<'tcx> {\n-    pub ty: Ty<'tcx>,\n-    details: &'tcx LayoutDetails\n-}\n-\n-impl<'tcx> Deref for TyLayout<'tcx> {\n-    type Target = &'tcx LayoutDetails;\n-    fn deref(&self) -> &&'tcx LayoutDetails {\n-        &self.details\n-    }\n-}\n-\n pub trait HasTyCtxt<'tcx>: HasDataLayout {\n     fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx>;\n }\n@@ -2095,13 +1351,10 @@ impl<T, E> MaybeResult<T> for Result<T, E> {\n     }\n }\n \n-pub trait LayoutOf<T> {\n-    type TyLayout;\n+pub type TyLayout<'tcx> = ::rustc_target::abi::TyLayout<'tcx, Ty<'tcx>>;\n \n-    fn layout_of(self, ty: T) -> Self::TyLayout;\n-}\n-\n-impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n+impl<'a, 'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n+    type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n     /// Computes the layout of a type. Note that this implicitly\n@@ -2127,7 +1380,8 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n     }\n }\n \n-impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, ty::maps::TyCtxtAt<'a, 'tcx, 'tcx>> {\n+impl<'a, 'tcx> LayoutOf for LayoutCx<'tcx, ty::maps::TyCtxtAt<'a, 'tcx, 'tcx>> {\n+    type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n     /// Computes the layout of a type. Note that this implicitly\n@@ -2186,22 +1440,22 @@ impl<'a, 'tcx> ty::maps::TyCtxtAt<'a, 'tcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TyLayout<'tcx> {\n-    pub fn for_variant<C>(&self, cx: C, variant_index: usize) -> Self\n-        where C: LayoutOf<Ty<'tcx>> + HasTyCtxt<'tcx>,\n-              C::TyLayout: MaybeResult<TyLayout<'tcx>>\n-    {\n-        let details = match self.variants {\n-            Variants::Single { index } if index == variant_index => self.details,\n+impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n+    where C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n+          C::TyLayout: MaybeResult<TyLayout<'tcx>>\n+{\n+    fn for_variant(this: TyLayout<'tcx>, cx: C, variant_index: usize) -> TyLayout<'tcx> {\n+        let details = match this.variants {\n+            Variants::Single { index } if index == variant_index => this.details,\n \n             Variants::Single { index } => {\n                 // Deny calling for_variant more than once for non-Single enums.\n-                cx.layout_of(self.ty).map_same(|layout| {\n+                cx.layout_of(this.ty).map_same(|layout| {\n                     assert_eq!(layout.variants, Variants::Single { index });\n                     layout\n                 });\n \n-                let fields = match self.ty.sty {\n+                let fields = match this.ty.sty {\n                     ty::TyAdt(def, _) => def.variants[variant_index].fields.len(),\n                     _ => bug!()\n                 };\n@@ -2219,17 +1473,14 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n         assert_eq!(details.variants, Variants::Single { index: variant_index });\n \n         TyLayout {\n-            ty: self.ty,\n+            ty: this.ty,\n             details\n         }\n     }\n \n-    pub fn field<C>(&self, cx: C, i: usize) -> C::TyLayout\n-        where C: LayoutOf<Ty<'tcx>> + HasTyCtxt<'tcx>,\n-              C::TyLayout: MaybeResult<TyLayout<'tcx>>\n-    {\n+    fn field(this: TyLayout<'tcx>, cx: C, i: usize) -> C::TyLayout {\n         let tcx = cx.tcx();\n-        cx.layout_of(match self.ty.sty {\n+        cx.layout_of(match this.ty.sty {\n             ty::TyBool |\n             ty::TyChar |\n             ty::TyInt(_) |\n@@ -2241,7 +1492,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n             ty::TyGeneratorWitness(..) |\n             ty::TyForeign(..) |\n             ty::TyDynamic(..) => {\n-                bug!(\"TyLayout::field_type({:?}): not applicable\", self)\n+                bug!(\"TyLayout::field_type({:?}): not applicable\", this)\n             }\n \n             // Potentially-fat pointers.\n@@ -2255,13 +1506,13 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n                 // as the `Abi` or `FieldPlacement` is checked by users.\n                 if i == 0 {\n                     let nil = tcx.mk_nil();\n-                    let ptr_ty = if self.ty.is_unsafe_ptr() {\n+                    let ptr_ty = if this.ty.is_unsafe_ptr() {\n                         tcx.mk_mut_ptr(nil)\n                     } else {\n                         tcx.mk_mut_ref(tcx.types.re_static, nil)\n                     };\n                     return cx.layout_of(ptr_ty).map_same(|mut ptr_layout| {\n-                        ptr_layout.ty = self.ty;\n+                        ptr_layout.ty = this.ty;\n                         ptr_layout\n                     });\n                 }\n@@ -2274,7 +1525,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n                         // the correct number of vtables slots.\n                         tcx.mk_imm_ref(tcx.types.re_static, tcx.mk_nil())\n                     }\n-                    _ => bug!(\"TyLayout::field_type({:?}): not applicable\", self)\n+                    _ => bug!(\"TyLayout::field_type({:?}): not applicable\", this)\n                 }\n             }\n \n@@ -2296,12 +1547,12 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n \n             // SIMD vector types.\n             ty::TyAdt(def, ..) if def.repr.simd() => {\n-                self.ty.simd_type(tcx)\n+                this.ty.simd_type(tcx)\n             }\n \n             // ADTs.\n             ty::TyAdt(def, substs) => {\n-                match self.variants {\n+                match this.variants {\n                     Variants::Single { index } => {\n                         def.variants[index].fields[i].ty(tcx, substs)\n                     }\n@@ -2321,45 +1572,25 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n \n             ty::TyProjection(_) | ty::TyAnon(..) | ty::TyParam(_) |\n             ty::TyInfer(_) | ty::TyError => {\n-                bug!(\"TyLayout::field_type: unexpected type `{}`\", self.ty)\n+                bug!(\"TyLayout::field_type: unexpected type `{}`\", this.ty)\n             }\n         })\n     }\n+}\n \n-    /// Returns true if the layout corresponds to an unsized type.\n-    pub fn is_unsized(&self) -> bool {\n-        self.abi.is_unsized()\n-    }\n-\n-    /// Returns true if the type is a ZST and not unsized.\n-    pub fn is_zst(&self) -> bool {\n-        match self.abi {\n-            Abi::Uninhabited => true,\n-            Abi::Scalar(_) |\n-            Abi::ScalarPair(..) |\n-            Abi::Vector { .. } => false,\n-            Abi::Aggregate { sized } => sized && self.size.bytes() == 0\n-        }\n-    }\n-\n-    pub fn size_and_align(&self) -> (Size, Align) {\n-        (self.size, self.align)\n-    }\n-\n+impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n     /// Find the offset of a niche leaf field, starting from\n     /// the given type and recursing through aggregates, which\n     /// has at least `count` consecutive invalid values.\n     /// The tuple is `(offset, scalar, niche_value)`.\n     // FIXME(eddyb) traverse already optimized enums.\n-    fn find_niche<C>(&self, cx: C, count: u128)\n+    fn find_niche(self, layout: TyLayout<'tcx>, count: u128)\n         -> Result<Option<(Size, Scalar, u128)>, LayoutError<'tcx>>\n-        where C: LayoutOf<Ty<'tcx>, TyLayout = Result<Self, LayoutError<'tcx>>> +\n-                 HasTyCtxt<'tcx>\n     {\n         let scalar_component = |scalar: &Scalar, offset| {\n             let Scalar { value, valid_range: ref v } = *scalar;\n \n-            let bits = value.size(cx).bits();\n+            let bits = value.size(self).bits();\n             assert!(bits <= 128);\n             let max_value = !0u128 >> (128 - bits);\n \n@@ -2386,17 +1617,17 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n         // Locals variables which live across yields are stored\n         // in the generator type as fields. These may be uninitialized\n         // so we don't look for niches there.\n-        if let ty::TyGenerator(..) = self.ty.sty {\n+        if let ty::TyGenerator(..) = layout.ty.sty {\n             return Ok(None);\n         }\n \n-        match self.abi {\n+        match layout.abi {\n             Abi::Scalar(ref scalar) => {\n                 return Ok(scalar_component(scalar, Size::from_bytes(0)));\n             }\n             Abi::ScalarPair(ref a, ref b) => {\n                 return Ok(scalar_component(a, Size::from_bytes(0)).or_else(|| {\n-                    scalar_component(b, a.value.size(cx).abi_align(b.value.align(cx)))\n+                    scalar_component(b, a.value.size(self).abi_align(b.value.align(self)))\n                 }));\n             }\n             Abi::Vector { ref element, .. } => {\n@@ -2406,22 +1637,22 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n         }\n \n         // Perhaps one of the fields is non-zero, let's recurse and find out.\n-        if let FieldPlacement::Union(_) = self.fields {\n+        if let FieldPlacement::Union(_) = layout.fields {\n             // Only Rust enums have safe-to-inspect fields\n             // (a discriminant), other unions are unsafe.\n-            if let Variants::Single { .. } = self.variants {\n+            if let Variants::Single { .. } = layout.variants {\n                 return Ok(None);\n             }\n         }\n-        if let FieldPlacement::Array { .. } = self.fields {\n-            if self.fields.count() > 0 {\n-                return self.field(cx, 0)?.find_niche(cx, count);\n+        if let FieldPlacement::Array { .. } = layout.fields {\n+            if layout.fields.count() > 0 {\n+                return self.find_niche(layout.field(self, 0)?, count);\n             }\n         }\n-        for i in 0..self.fields.count() {\n-            let r = self.field(cx, i)?.find_niche(cx, count)?;\n+        for i in 0..layout.fields.count() {\n+            let r = self.find_niche(layout.field(self, i)?, count)?;\n             if let Some((offset, scalar, niche_value)) = r {\n-                let offset = self.fields.offset(i) + offset;\n+                let offset = layout.fields.offset(i) + offset;\n                 return Ok(Some((offset, scalar, niche_value)));\n             }\n         }\n@@ -2549,14 +1780,22 @@ impl_stable_hash_for!(enum ::ty::layout::Primitive {\n     Pointer\n });\n \n-impl_stable_hash_for!(struct ::ty::layout::Align {\n-    abi_pow2,\n-    pref_pow2\n-});\n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for Align {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.abi().hash_stable(hcx, hasher);\n+        self.pref().hash_stable(hcx, hasher);\n+    }\n+}\n \n-impl_stable_hash_for!(struct ::ty::layout::Size {\n-    raw\n-});\n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for Size {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.bytes().hash_stable(hcx, hasher);\n+    }\n+}\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for LayoutError<'gcx>\n {"}, {"sha": "f5cb3643de8323a801a4b688f96beea75d532dc5", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -45,7 +45,7 @@ use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n use util::common::{profq_msg, ErrorReported, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_set::IdxSetBuf;\n-use rustc_back::PanicStrategy;\n+use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::StableVec;"}, {"sha": "03ed6e7ac90d1dd778cfed126d898a19318acc6a", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -22,7 +22,7 @@ use mir::interpret::{GlobalId, Value, PrimVal};\n use util::common::ErrorReported;\n use std::rc::Rc;\n use std::iter;\n-use syntax::abi;\n+use rustc_target::spec::abi;\n use hir as ast;\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n "}, {"sha": "9b20fce667318ea1fbd3a8d0062c9f0868321c67", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -44,7 +44,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::hir::MatchSource,\n     ::hir::Mutability,\n     ::hir::Unsafety,\n-    ::syntax::abi::Abi,\n+    ::rustc_target::spec::abi::Abi,\n     ::mir::Local,\n     ::mir::Promoted,\n     ::traits::Reveal,"}, {"sha": "0dfae13cc753af8619bb9f1b3ea6e3741afd1825", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -22,7 +22,7 @@ use util::captures::Captures;\n \n use std::iter;\n use std::cmp::Ordering;\n-use syntax::abi;\n+use rustc_target::spec::abi;\n use syntax::ast::{self, Name};\n use syntax::symbol::{keywords, InternedString};\n "}, {"sha": "a10ca13247216a76fa2600ce1b74f136432f5f3c", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -22,7 +22,7 @@ use ty::fold::TypeVisitor;\n use ty::subst::UnpackedKind;\n use ty::maps::TyCtxtAt;\n use ty::TypeVariants::*;\n-use ty::layout::Integer;\n+use ty::layout::{Integer, IntegerExt};\n use util::common::ErrorReported;\n use middle::lang_items;\n use mir::interpret::{Value, PrimVal};"}, {"sha": "905776373bd37707f7066a458df7f5dc063dabd2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -28,7 +28,7 @@ use std::fmt;\n use std::usize;\n \n use rustc_data_structures::indexed_vec::Idx;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};\n use hir;"}, {"sha": "765cb80f35710b30e742711ff434cdca4c9c1de4", "filename": "src/librustc_allocator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_allocator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_allocator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,5 +11,6 @@ test = false\n [dependencies]\n rustc = { path = \"../librustc\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "de8814d3d6a73244721a3f50eb2db355f603b28f", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::middle::allocator::AllocatorKind;\n use rustc_errors;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast::{Attribute, Crate, LitKind, StrStyle};\n use syntax::ast::{Arg, Constness, Generics, Mac, Mutability, Ty, Unsafety};\n use syntax::ast::{self, Expr, Ident, Item, ItemKind, TyKind, VisibilityKind};"}, {"sha": "6595564fb30b5ccc0f1ab750ce258bb631721452", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -12,6 +12,7 @@\n \n extern crate rustc;\n extern crate rustc_errors;\n+extern crate rustc_target;\n extern crate syntax;\n extern crate syntax_pos;\n "}, {"sha": "3c01692c12b3c846957c15f44d2746158808e1f8", "filename": "src/librustc_back/README.md", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustc_back%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustc_back%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2FREADME.md?ref=88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "patch": "@@ -1,6 +0,0 @@\n-`librustc_back` contains some very low-level details that are\n-specific to different LLVM targets and so forth.\n-\n-For more information about how trans works, see the [rustc guide].\n-\n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trans.html"}, {"sha": "027a9c455553051b7944494b7d8bbeab2868c4f8", "filename": "src/librustc_back/lib.rs", "status": "removed", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88cd36714c6d62393f18d8efa2ea2724e1ec4a9d/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=88cd36714c6d62393f18d8efa2ea2724e1ec4a9d", "patch": "@@ -1,170 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Some stuff used by rustc that doesn't have many dependencies\n-//!\n-//! Originally extracted from rustc::back, which was nominally the\n-//! compiler 'backend', though LLVM is rustc's backend, so rustc_back\n-//! is really just odds-and-ends relating to code gen and linking.\n-//! This crate mostly exists to make rustc smaller, so we might put\n-//! more 'stuff' here in the future.  It does not have a dependency on\n-//! rustc_llvm.\n-//!\n-//! FIXME: Split this into two crates: one that has deps on syntax, and\n-//! one that doesn't; the one that doesn't might get decent parallel\n-//! build speedups.\n-\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-\n-#![feature(box_syntax)]\n-#![feature(const_fn)]\n-#![feature(fs_read_write)]\n-\n-extern crate syntax;\n-extern crate rand;\n-extern crate serialize;\n-#[macro_use] extern crate log;\n-\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n-pub mod target;\n-\n-use std::str::FromStr;\n-\n-use serialize::json::{Json, ToJson};\n-\n-#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n-         RustcEncodable, RustcDecodable)]\n-pub enum LinkerFlavor {\n-    Em,\n-    Gcc,\n-    Ld,\n-    Msvc,\n-    Lld(LldFlavor),\n-}\n-\n-#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n-         RustcEncodable, RustcDecodable)]\n-pub enum LldFlavor {\n-    Wasm,\n-    Ld64,\n-    Ld,\n-    Link,\n-}\n-\n-impl ToJson for LinkerFlavor {\n-    fn to_json(&self) -> Json {\n-        self.desc().to_json()\n-    }\n-}\n-macro_rules! flavor_mappings {\n-    ($((($($flavor:tt)*), $string:expr),)*) => (\n-        impl LinkerFlavor {\n-            pub const fn one_of() -> &'static str {\n-                concat!(\"one of: \", $($string, \" \",)+)\n-            }\n-\n-            pub fn from_str(s: &str) -> Option<Self> {\n-                Some(match s {\n-                    $($string => $($flavor)*,)+\n-                    _ => return None,\n-                })\n-            }\n-\n-            pub fn desc(&self) -> &str {\n-                match *self {\n-                    $($($flavor)* => $string,)+\n-                }\n-            }\n-        }\n-    )\n-}\n-\n-\n-flavor_mappings! {\n-    ((LinkerFlavor::Em), \"em\"),\n-    ((LinkerFlavor::Gcc), \"gcc\"),\n-    ((LinkerFlavor::Ld), \"ld\"),\n-    ((LinkerFlavor::Msvc), \"msvc\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum PanicStrategy {\n-    Unwind,\n-    Abort,\n-}\n-\n-impl PanicStrategy {\n-    pub fn desc(&self) -> &str {\n-        match *self {\n-            PanicStrategy::Unwind => \"unwind\",\n-            PanicStrategy::Abort => \"abort\",\n-        }\n-    }\n-}\n-\n-impl ToJson for PanicStrategy {\n-    fn to_json(&self) -> Json {\n-        match *self {\n-            PanicStrategy::Abort => \"abort\".to_json(),\n-            PanicStrategy::Unwind => \"unwind\".to_json(),\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum RelroLevel {\n-    Full,\n-    Partial,\n-    Off,\n-    None,\n-}\n-\n-impl RelroLevel {\n-    pub fn desc(&self) -> &str {\n-        match *self {\n-            RelroLevel::Full => \"full\",\n-            RelroLevel::Partial => \"partial\",\n-            RelroLevel::Off => \"off\",\n-            RelroLevel::None => \"none\",\n-        }\n-    }\n-}\n-\n-impl FromStr for RelroLevel {\n-    type Err = ();\n-\n-    fn from_str(s: &str) -> Result<RelroLevel, ()> {\n-        match s {\n-            \"full\" => Ok(RelroLevel::Full),\n-            \"partial\" => Ok(RelroLevel::Partial),\n-            \"off\" => Ok(RelroLevel::Off),\n-            \"none\" => Ok(RelroLevel::None),\n-            _ => Err(()),\n-        }\n-    }\n-}\n-\n-impl ToJson for RelroLevel {\n-    fn to_json(&self) -> Json {\n-        match *self {\n-            RelroLevel::Full => \"full\".to_json(),\n-            RelroLevel::Partial => \"partial\".to_json(),\n-            RelroLevel::Off => \"off\".to_json(),\n-            RelroLevel::None => \"None\".to_json(),\n-        }\n-    }\n-}"}, {"sha": "342c7d1b67866b73573050a2bda970a2cb6b216b", "filename": "src/librustc_cratesio_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_cratesio_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_cratesio_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -21,3 +21,4 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n bitflags = \"1.0\"\n+log = \"0.4\""}, {"sha": "85a5b331d8c452794bdbbd94b0527cee6502f291", "filename": "src/librustc_cratesio_shim/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -12,3 +12,4 @@\n #![allow(unused_extern_crates)]\n \n extern crate bitflags;\n+extern crate log;"}, {"sha": "9178d0d00faa49ae0c34f68e9d2a214b32ae047c", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n ena = \"0.9.1\"\n log = \"0.4\"\n+rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n serialize = { path = \"../libserialize\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\""}, {"sha": "1320fe75bc526c1b81ba8929f082d77ead16500c", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -45,6 +45,10 @@ extern crate parking_lot;\n extern crate cfg_if;\n extern crate stable_deref_trait;\n \n+// See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_cratesio_shim;\n+\n pub use rustc_serialize::hex::ToHex;\n \n pub mod array_vec;"}, {"sha": "5aae1bcad896f18fdee8a2d9ac60f8e7d27ab865", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -15,7 +15,7 @@ log = \"0.4\"\n env_logger = { version = \"0.5\", default-features = false }\n rustc = { path = \"../librustc\" }\n rustc_allocator = { path = \"../librustc_allocator\" }\n-rustc_back = { path = \"../librustc_back\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_borrowck = { path = \"../librustc_borrowck\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "b203f387e4662d2f3c5f94664d672c2948875b65", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -35,7 +35,7 @@ extern crate env_logger;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_allocator;\n-extern crate rustc_back;\n+extern crate rustc_target;\n extern crate rustc_borrowck;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n@@ -1021,7 +1021,7 @@ impl RustcDefaultCalls {\n         for req in &sess.opts.prints {\n             match *req {\n                 TargetList => {\n-                    let mut targets = rustc_back::target::get_targets().collect::<Vec<String>>();\n+                    let mut targets = rustc_target::spec::get_targets().collect::<Vec<String>>();\n                     targets.sort();\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 },"}, {"sha": "47c49fbe9ef475633d041fbcfbcc8ce983dec3ac", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -31,7 +31,7 @@ use rustc::session::config::{OutputFilenames, OutputTypes};\n use rustc_data_structures::sync::{self, Lrc};\n use syntax;\n use syntax::ast;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::codemap::{CodeMap, FilePathMapping, FileName};\n use errors;\n use errors::emitter::Emitter;"}, {"sha": "f097095abe4e923431dd128cdcabfff373e4e5f3", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,5 +13,6 @@ test = false\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_mir = { path = \"../librustc_mir\"}\n+rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "651a2e187f6b40d1f3967f19fc354da269cb1a02", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@ use rustc::ty;\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass};\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;"}, {"sha": "91ce6f3854a501cb17f5ba01842975cf1bc67cec", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -1169,7 +1169,7 @@ impl LintPass for MutableTransmutes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n-        use syntax::abi::Abi::RustIntrinsic;\n+        use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n         let msg = \"mutating transmuted &mut T from &T may cause undefined behavior, \\\n                    consider instead using an UnsafeCell\";"}, {"sha": "65b340d65686d13c7e2730ebcc28e711962adf7c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -37,6 +37,7 @@ extern crate rustc;\n #[macro_use]\n extern crate log;\n extern crate rustc_mir;\n+extern crate rustc_target;\n extern crate syntax_pos;\n \n use rustc::lint;"}, {"sha": "904a3e4c4274f47d55edc0ecaf11824e6165d517", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@\n use rustc::hir::map as hir_map;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n-use rustc::ty::layout::{self, LayoutOf};\n+use rustc::ty::layout::{self, IntegerExt, LayoutOf};\n use util::nodemap::FxHashSet;\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass};\n@@ -22,7 +22,7 @@ use std::cmp;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n \n use syntax::{ast, attr};\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax_pos::Span;\n use syntax::codemap;\n "}, {"sha": "338824d5efe4caa862256121941b11a7e38bdbce", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@ flate2 = \"1.0\"\n log = \"0.4\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "d0237071a6058d14cb3731e12771bd4c9b93b294", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -21,8 +21,7 @@ use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::DepKind;\n use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n-use rustc_back::PanicStrategy;\n-use rustc_back::target::TargetTriple;\n+use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n use rustc::middle::cstore::{validate_crate_name, ExternCrate, ExternCrateSource};"}, {"sha": "64bbcf436cb9ea46113f97a8302668d458cad767", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -18,7 +18,7 @@ use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n use rustc::session::{Session, CrateDisambiguator};\n-use rustc_back::PanicStrategy;\n+use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, NodeMap};\n "}, {"sha": "a99e0a32e6645bbf017f404815efcc21c36e619c", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -38,7 +38,7 @@ extern crate proc_macro;\n \n #[macro_use]\n extern crate rustc;\n-extern crate rustc_back;\n+extern crate rustc_target;\n #[macro_use]\n extern crate rustc_data_structures;\n "}, {"sha": "b699885b0eb9243e9cf6634e126cd1c2a0524d82", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,7 +11,7 @@\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n use rustc::ty::TyCtxt;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n \n pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Vec<String> {\n     let mut collector = Collector {"}, {"sha": "9b1b48efca58562d5388f74a3008ffe09c226b2e", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -236,7 +236,7 @@ use rustc::util::nodemap::FxHashMap;\n use errors::DiagnosticBuilder;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use rustc_back::target::{Target, TargetTriple};\n+use rustc_target::spec::{Target, TargetTriple};\n \n use std::cmp;\n use std::collections::HashSet;"}, {"sha": "70b8c7b11fdb2be0f88aef8b6008dd4b9305b23b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -14,7 +14,7 @@ use rustc::middle::cstore::{self, NativeLibrary};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::util::nodemap::FxHashSet;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::feature_gate::{self, GateIssue};"}, {"sha": "c9949389aceea5d3910d9bc0f5ab96f717f89dc3", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -19,8 +19,7 @@ use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, Ty, ReprOptions};\n-use rustc_back::PanicStrategy;\n-use rustc_back::target::TargetTriple;\n+use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use rustc_serialize as serialize;\n use syntax::{ast, attr};"}, {"sha": "a1b348774b163bb8f750d3a0ac79d20305ea4ed0", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -15,7 +15,7 @@ graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n log_settings = \"0.1.1\"\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "c130b4f550fd429aab70cf451224f7d800859d8d", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -16,7 +16,7 @@ use hair::*;\n use rustc::ty;\n use rustc::mir::*;\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which"}, {"sha": "0d836f5cb9737f72963d40a6421ffb3f19371000", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -20,12 +20,12 @@ use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n-use rustc_back::PanicStrategy;\n+use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use shim;\n use std::mem;\n use std::u32;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr::{self, UnwindAttr};\n use syntax::symbol::keywords;"}, {"sha": "e6aa2d3abb7e025de7d3f76b01a8a3ef6f1e563c", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -22,6 +22,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::middle::region;\n use rustc::infer::InferCtxt;\n+use rustc::ty::layout::IntegerExt;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt, layout};\n use rustc::ty::subst::Substs;"}, {"sha": "42f0e38af1f770895125b9203196dd3b4c0b0a22", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::def::Def;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::middle::const_val::{ConstVal, ErrKind};\n use rustc::mir;\n-use rustc::ty::layout::{self, Size, Align, HasDataLayout, LayoutOf, TyLayout};\n+use rustc::ty::layout::{self, Size, Align, HasDataLayout, IntegerExt, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::TyCtxtAt;\n@@ -162,7 +162,8 @@ impl<'c, 'b, 'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> layout::HasTyCtxt<'tcx>\n     }\n }\n \n-impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf<Ty<'tcx>> for &'a EvalContext<'a, 'mir, 'tcx, M> {\n+impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for &'a EvalContext<'a, 'mir, 'tcx, M> {\n+    type Ty = Ty<'tcx>;\n     type TyLayout = EvalResult<'tcx, TyLayout<'tcx>>;\n \n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n@@ -171,8 +172,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf<Ty<'tcx>> for &'a EvalCont\n     }\n }\n \n-impl<'c, 'b, 'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf<Ty<'tcx>>\n+impl<'c, 'b, 'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf\n     for &'c &'b mut EvalContext<'a, 'mir, 'tcx, M> {\n+    type Ty = Ty<'tcx>;\n     type TyLayout = EvalResult<'tcx, TyLayout<'tcx>>;\n \n     #[inline]"}, {"sha": "aa80ee7af18fc306129d0df96b0f170b0c9547b4", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -2,7 +2,7 @@ use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::LayoutOf;\n use syntax::codemap::Span;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n \n use rustc::mir::interpret::{EvalResult, PrimVal, Value};\n use super::{EvalContext, Place, Machine, ValTy};"}, {"sha": "399892522a3531ebe9c61ce9bce31eeb937e3692", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -49,7 +49,7 @@ extern crate rustc_errors;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n-extern crate rustc_back;\n+extern crate rustc_target;\n extern crate rustc_const_math;\n extern crate core; // for NonZero\n extern crate log_settings;"}, {"sha": "9e0c977a3f0627d0b55a1bb22194492c3c27403b", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -339,7 +339,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 }\n \n                 let abi = sig.abi();\n-                if abi != ::syntax::abi::Abi::Rust {\n+                if abi != ::rustc_target::spec::abi::Abi::Rust {\n                     output.push_str(\"extern \\\"\");\n                     output.push_str(abi.name());\n                     output.push_str(\"\\\" \");"}, {"sha": "af60a83a4a2e9269c487f5b5be8cee4cfb93ff62", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::interpret::{Value, PrimVal};\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax_pos::Span;\n "}, {"sha": "47b2f430bc70e2b3c35c44ef75dacaa95d62ec7c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -72,7 +72,8 @@ struct ConstPropagator<'b, 'a, 'tcx:'a+'b> {\n     param_env: ParamEnv<'tcx>,\n }\n \n-impl<'a, 'b, 'tcx> LayoutOf<ty::Ty<'tcx>> for &'a ConstPropagator<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx> LayoutOf for &'a ConstPropagator<'a, 'b, 'tcx> {\n+    type Ty = ty::Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n     fn layout_of(self, ty: ty::Ty<'tcx>) -> Self::TyLayout {"}, {"sha": "2b491385d661d98b6c7f7b2710e522e4028ca068", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -28,7 +28,7 @@ use transform::{MirPass, MirSource};\n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n use syntax::{attr};\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n \n const DEFAULT_THRESHOLD: usize = 50;\n const HINT_THRESHOLD: usize = 100;"}, {"sha": "ff7551ed6f4f8d242f138bc423d6ddeac3b5e236", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -29,7 +29,7 @@ use rustc::mir::*;\n use rustc::mir::traversal::ReversePostorder;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::middle::lang_items;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::ast::LitKind;\n use syntax::feature_gate::UnstableFeatures;"}, {"sha": "8f67b9e7c3d9d406abee9929566035716b7c6f20", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::abi::{Abi};\n+use rustc_target::spec::abi::{Abi};\n use syntax::ast;\n use syntax_pos::Span;\n "}, {"sha": "976614c9542a8255e3f99a21635024074348dad1", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -12,6 +12,7 @@ crate-type = [\"dylib\"]\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "401a280412a114eb448d13d95d2231e6ce15b2d4", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -22,6 +22,7 @@ extern crate rustc;\n extern crate log;\n extern crate rustc_data_structures;\n extern crate rustc_serialize;\n+extern crate rustc_target;\n extern crate rustc_typeck;\n #[macro_use]\n extern crate syntax;"}, {"sha": "829ed320d753bfd18ed1c39dcf0a0c7a22c2cf11", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -237,7 +237,7 @@ impl Sig for ast::Ty {\n                 if f.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if f.abi != ::syntax::abi::Abi::Rust {\n+                if f.abi != ::rustc_target::spec::abi::Abi::Rust {\n                     text.push_str(\"extern\");\n                     text.push_str(&f.abi.to_string());\n                     text.push(' ');\n@@ -388,7 +388,7 @@ impl Sig for ast::Item {\n                 if unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if abi != ::syntax::abi::Abi::Rust {\n+                if abi != ::rustc_target::spec::abi::Abi::Rust {\n                     text.push_str(\"extern\");\n                     text.push_str(&abi.to_string());\n                     text.push(' ');\n@@ -931,7 +931,7 @@ fn make_method_signature(\n     if m.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    if m.abi != ::syntax::abi::Abi::Rust {\n+    if m.abi != ::rustc_target::spec::abi::Abi::Rust {\n         text.push_str(\"extern\");\n         text.push_str(&m.abi.to_string());\n         text.push(' ');"}, {"sha": "bb686e914a0486c098e6fea02d4541ecb6c24717", "filename": "src/librustc_target/Cargo.toml", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -1,18 +1,18 @@\n [package]\n authors = [\"The Rust Project Developers\"]\n-name = \"rustc_back\"\n+name = \"rustc_target\"\n version = \"0.0.0\"\n \n [lib]\n-name = \"rustc_back\"\n+name = \"rustc_target\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-syntax = { path = \"../libsyntax\" }\n-serialize = { path = \"../libserialize\" }\n+bitflags = \"1.0\"\n log = \"0.4\"\n-rand = \"0.4\"\n+rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n+serialize = { path = \"../libserialize\" }\n \n [features]\n jemalloc = []", "previous_filename": "src/librustc_back/Cargo.toml"}, {"sha": "f5b1acb192133cbda62e9fdebfa2bf793e7a6103", "filename": "src/librustc_target/README.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FREADME.md?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -0,0 +1,6 @@\n+`librustc_target` contains some very low-level details that are\n+specific to different compilation targets and so forth.\n+\n+For more information about how rustc works, see the [rustc guide].\n+\n+[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/"}, {"sha": "90b5b97b51ee2da68a4008a725433df62c82f266", "filename": "src/librustc_target/abi/call/aarch64.rs", "status": "renamed", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,11 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n-use context::CodegenCx;\n+use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n+use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n-fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n-                                     -> Option<Uniform> {\n+fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n+                                     -> Option<Uniform>\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     arg.layout.homogeneous_aggregate(cx).and_then(|unit| {\n         let size = arg.layout.size;\n \n@@ -38,7 +41,10 @@ fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgTyp\n     })\n }\n \n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n         return;\n@@ -69,7 +75,10 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n     ret.make_indirect();\n }\n \n-fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(32);\n         return;\n@@ -100,7 +109,10 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n     arg.make_indirect();\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_aarch64.rs"}, {"sha": "249aad2d937ea27606587ad9ea58311c6c70cae7", "filename": "src/librustc_target/abi/call/arm.rs", "status": "renamed", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n-use context::CodegenCx;\n-use llvm::CallConv;\n+use abi::call::{Conv, FnType, ArgType, Reg, RegKind, Uniform};\n+use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use spec::HasTargetSpec;\n \n-fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n-                                     -> Option<Uniform> {\n+fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n+                                     -> Option<Uniform>\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     arg.layout.homogeneous_aggregate(cx).and_then(|unit| {\n         let size = arg.layout.size;\n \n@@ -39,7 +42,10 @@ fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgTyp\n     })\n }\n \n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>, vfp: bool) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>, vfp: bool)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n         return;\n@@ -71,7 +77,10 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>,\n     ret.make_indirect();\n }\n \n-fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>, vfp: bool) {\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, vfp: bool)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(32);\n         return;\n@@ -92,11 +101,14 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>,\n     });\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout + HasTargetSpec\n+{\n     // If this is a target with a hard-float ABI, and the function is not explicitly\n     // `extern \"aapcs\"`, then we must use the VFP registers for homogeneous aggregates.\n-    let vfp = cx.sess().target.target.llvm_target.ends_with(\"hf\")\n-        && fty.cconv != CallConv::ArmAapcsCallConv\n+    let vfp = cx.target_spec().llvm_target.ends_with(\"hf\")\n+        && fty.conv != Conv::ArmAapcs\n         && !fty.variadic;\n \n     if !fty.ret.is_ignore() {", "previous_filename": "src/librustc_trans/cabi_arm.rs"}, {"sha": "81d6f7b134b3e126bb8d86116ccf8b8de532a0c6", "filename": "src/librustc_target/abi/call/asmjs.rs", "status": "renamed", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,15 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{FnType, ArgType, LayoutExt, Uniform};\n-use context::CodegenCx;\n+use abi::call::{FnType, ArgType, Uniform};\n+use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n // Data layout: e-p:32:32-i64:64-v128:32:128-n32-S128\n \n // See the https://github.com/kripken/emscripten-fastcomp-clang repository.\n // The class `EmscriptenABIInfo` in `/lib/CodeGen/TargetInfo.cpp` contains the ABI definitions.\n \n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if ret.layout.is_aggregate() {\n         if let Some(unit) = ret.layout.homogeneous_aggregate(cx) {\n             let size = ret.layout.size;\n@@ -33,13 +36,16 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n     }\n }\n \n-fn classify_arg_ty(arg: &mut ArgType) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n     if arg.layout.is_aggregate() {\n         arg.make_indirect_byval();\n     }\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_asmjs.rs"}, {"sha": "d37d5584591c4f6dcc0d991f9ee84c69e536852d", "filename": "src/librustc_target/abi/call/hexagon.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fhexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fhexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fhexagon.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,25 +10,25 @@\n \n #![allow(non_upper_case_globals)]\n \n-use abi::{FnType, ArgType, LayoutExt};\n+use abi::call::{FnType, ArgType};\n \n-fn classify_ret_ty(ret: &mut ArgType) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 64 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(32);\n     }\n }\n \n-fn classify_arg_ty(arg: &mut ArgType) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 64 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n }\n \n-pub fn compute_abi_info(fty: &mut FnType) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_hexagon.rs"}, {"sha": "5001499ea5d3b04134e5cb603c86edece4148f96", "filename": "src/librustc_target/abi/call/mips.rs", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{ArgType, FnType, LayoutExt, Reg, Uniform};\n-use context::CodegenCx;\n+use abi::call::{ArgType, FnType, Reg, Uniform};\n+use abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n \n-use rustc::ty::layout::Size;\n-\n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                             ret: &mut ArgType<'tcx>,\n-                             offset: &mut Size) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<Ty>, offset: &mut Size)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n     } else {\n         ret.make_indirect();\n-        *offset += cx.tcx.data_layout.pointer_size;\n+        *offset += cx.data_layout().pointer_size;\n     }\n }\n \n-fn classify_arg_ty(cx: &CodegenCx, arg: &mut ArgType, offset: &mut Size) {\n-    let dl = &cx.tcx.data_layout;\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<Ty>, offset: &mut Size)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n+    let dl = cx.data_layout();\n     let size = arg.layout.size;\n     let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align);\n \n@@ -44,7 +44,9 @@ fn classify_arg_ty(cx: &CodegenCx, arg: &mut ArgType, offset: &mut Size) {\n     *offset = offset.abi_align(align) + size.abi_align(align);\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<Ty>)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n     let mut offset = Size::from_bytes(0);\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret, &mut offset);", "previous_filename": "src/librustc_trans/cabi_mips.rs"}, {"sha": "e5cbc6424a450ae3af6098a3d7bdf8bf64aa7c19", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "renamed", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{ArgAttribute, ArgType, CastTarget, FnType, LayoutExt, PassMode, Reg, RegKind, Uniform};\n-use context::CodegenCx;\n-use rustc::ty::layout::{self, Size};\n+use abi::call::{ArgAttribute, ArgType, CastTarget, FnType, PassMode, Reg, RegKind, Uniform};\n+use abi::{self, HasDataLayout, LayoutOf, Size, TyLayout, TyLayoutMethods};\n \n-fn extend_integer_width_mips(arg: &mut ArgType, bits: u64) {\n+fn extend_integer_width_mips<Ty>(arg: &mut ArgType<Ty>, bits: u64) {\n     // Always sign extend u32 values on 64-bit mips\n-    if let layout::Abi::Scalar(ref scalar) = arg.layout.abi {\n-        if let layout::Int(i, signed) = scalar.value {\n+    if let abi::Abi::Scalar(ref scalar) = arg.layout.abi {\n+        if let abi::Int(i, signed) = scalar.value {\n             if !signed && i.size().bits() == 32 {\n                 if let PassMode::Direct(ref mut attrs) = arg.mode {\n                     attrs.set(ArgAttribute::SExt);\n@@ -28,18 +27,24 @@ fn extend_integer_width_mips(arg: &mut ArgType, bits: u64) {\n     arg.extend_integer_width_to(bits);\n }\n \n-fn float_reg<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &ArgType<'tcx>, i: usize) -> Option<Reg> {\n+fn float_reg<'a, Ty, C>(cx: C, ret: &ArgType<'a, Ty>, i: usize) -> Option<Reg>\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     match ret.layout.field(cx, i).abi {\n-        layout::Abi::Scalar(ref scalar) => match scalar.value {\n-            layout::F32 => Some(Reg::f32()),\n-            layout::F64 => Some(Reg::f64()),\n+        abi::Abi::Scalar(ref scalar) => match scalar.value {\n+            abi::F32 => Some(Reg::f32()),\n+            abi::F64 => Some(Reg::f64()),\n             _ => None\n         },\n         _ => None\n     }\n }\n \n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         extend_integer_width_mips(ret, 64);\n         return;\n@@ -52,7 +57,7 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n         // use of float registers to structures (not unions) containing exactly one or two\n         // float fields.\n \n-        if let layout::FieldPlacement::Arbitrary { .. } = ret.layout.fields {\n+        if let abi::FieldPlacement::Arbitrary { .. } = ret.layout.fields {\n             if ret.layout.fields.count() == 1 {\n                 if let Some(reg) = float_reg(cx, ret, 0) {\n                     ret.cast_to(reg);\n@@ -78,27 +83,30 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n     }\n }\n \n-fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !arg.layout.is_aggregate() {\n         extend_integer_width_mips(arg, 64);\n         return;\n     }\n \n-    let dl = &cx.tcx.data_layout;\n+    let dl = cx.data_layout();\n     let size = arg.layout.size;\n     let mut prefix = [None; 8];\n     let mut prefix_index = 0;\n \n     match arg.layout.fields {\n-        layout::FieldPlacement::Array { .. } => {\n+        abi::FieldPlacement::Array { .. } => {\n             // Arrays are passed indirectly\n             arg.make_indirect();\n             return;\n         }\n-        layout::FieldPlacement::Union(_) => {\n+        abi::FieldPlacement::Union(_) => {\n             // Unions and are always treated as a series of 64-bit integer chunks\n         },\n-        layout::FieldPlacement::Arbitrary { .. } => {\n+        abi::FieldPlacement::Arbitrary { .. } => {\n             // Structures are split up into a series of 64-bit integer chunks, but any aligned\n             // doubles not part of another aggregate are passed as floats.\n             let mut last_offset = Size::from_bytes(0);\n@@ -108,8 +116,8 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n                 let offset = arg.layout.fields.offset(i);\n \n                 // We only care about aligned doubles\n-                if let layout::Abi::Scalar(ref scalar) = field.abi {\n-                    if let layout::F64 = scalar.value {\n+                if let abi::Abi::Scalar(ref scalar) = field.abi {\n+                    if let abi::F64 = scalar.value {\n                         if offset.is_abi_aligned(dl.f64_align) {\n                             // Insert enough integers to cover [last_offset, offset)\n                             assert!(last_offset.is_abi_aligned(dl.f64_align));\n@@ -143,7 +151,10 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n     });\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_mips64.rs"}, {"sha": "2d8996bb5ae27108416d4dd04b6438967abaa4e4", "filename": "src/librustc_target/abi/call/mod.rs", "status": "added", "additions": 511, "deletions": 0, "changes": 511, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -0,0 +1,511 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use abi::{self, Abi, Align, FieldPlacement, Size};\n+use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use spec::HasTargetSpec;\n+\n+mod aarch64;\n+mod arm;\n+mod asmjs;\n+mod hexagon;\n+mod mips;\n+mod mips64;\n+mod msp430;\n+mod nvptx;\n+mod nvptx64;\n+mod powerpc;\n+mod powerpc64;\n+mod s390x;\n+mod sparc;\n+mod sparc64;\n+mod x86;\n+mod x86_64;\n+mod x86_win64;\n+mod wasm32;\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub enum PassMode {\n+    /// Ignore the argument (useful for empty struct).\n+    Ignore,\n+    /// Pass the argument directly.\n+    Direct(ArgAttributes),\n+    /// Pass a pair's elements directly in two arguments.\n+    Pair(ArgAttributes, ArgAttributes),\n+    /// Pass the argument after casting it, to either\n+    /// a single uniform or a pair of registers.\n+    Cast(CastTarget),\n+    /// Pass the argument indirectly via a hidden pointer.\n+    Indirect(ArgAttributes),\n+}\n+\n+// Hack to disable non_upper_case_globals only for the bitflags! and not for the rest\n+// of this module\n+pub use self::attr_impl::ArgAttribute;\n+\n+#[allow(non_upper_case_globals)]\n+#[allow(unused)]\n+mod attr_impl {\n+    // The subset of llvm::Attribute needed for arguments, packed into a bitfield.\n+    bitflags! {\n+        #[derive(Default)]\n+        pub struct ArgAttribute: u16 {\n+            const ByVal     = 1 << 0;\n+            const NoAlias   = 1 << 1;\n+            const NoCapture = 1 << 2;\n+            const NonNull   = 1 << 3;\n+            const ReadOnly  = 1 << 4;\n+            const SExt      = 1 << 5;\n+            const StructRet = 1 << 6;\n+            const ZExt      = 1 << 7;\n+            const InReg     = 1 << 8;\n+        }\n+    }\n+}\n+\n+/// A compact representation of LLVM attributes (at least those relevant for this module)\n+/// that can be manipulated without interacting with LLVM's Attribute machinery.\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub struct ArgAttributes {\n+    pub regular: ArgAttribute,\n+    pub pointee_size: Size,\n+    pub pointee_align: Option<Align>\n+}\n+\n+impl ArgAttributes {\n+    pub fn new() -> Self {\n+        ArgAttributes {\n+            regular: ArgAttribute::default(),\n+            pointee_size: Size::from_bytes(0),\n+            pointee_align: None,\n+        }\n+    }\n+\n+    pub fn set(&mut self, attr: ArgAttribute) -> &mut Self {\n+        self.regular = self.regular | attr;\n+        self\n+    }\n+\n+    pub fn contains(&self, attr: ArgAttribute) -> bool {\n+        self.regular.contains(attr)\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum RegKind {\n+    Integer,\n+    Float,\n+    Vector\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub struct Reg {\n+    pub kind: RegKind,\n+    pub size: Size,\n+}\n+\n+macro_rules! reg_ctor {\n+    ($name:ident, $kind:ident, $bits:expr) => {\n+        pub fn $name() -> Reg {\n+            Reg {\n+                kind: RegKind::$kind,\n+                size: Size::from_bits($bits)\n+            }\n+        }\n+    }\n+}\n+\n+impl Reg {\n+    reg_ctor!(i8, Integer, 8);\n+    reg_ctor!(i16, Integer, 16);\n+    reg_ctor!(i32, Integer, 32);\n+    reg_ctor!(i64, Integer, 64);\n+\n+    reg_ctor!(f32, Float, 32);\n+    reg_ctor!(f64, Float, 64);\n+}\n+\n+impl Reg {\n+    pub fn align<C: HasDataLayout>(&self, cx: C) -> Align {\n+        let dl = cx.data_layout();\n+        match self.kind {\n+            RegKind::Integer => {\n+                match self.size.bits() {\n+                    1 => dl.i1_align,\n+                    2...8 => dl.i8_align,\n+                    9...16 => dl.i16_align,\n+                    17...32 => dl.i32_align,\n+                    33...64 => dl.i64_align,\n+                    65...128 => dl.i128_align,\n+                    _ => panic!(\"unsupported integer: {:?}\", self)\n+                }\n+            }\n+            RegKind::Float => {\n+                match self.size.bits() {\n+                    32 => dl.f32_align,\n+                    64 => dl.f64_align,\n+                    _ => panic!(\"unsupported float: {:?}\", self)\n+                }\n+            }\n+            RegKind::Vector => dl.vector_align(self.size)\n+        }\n+    }\n+}\n+\n+/// An argument passed entirely registers with the\n+/// same kind (e.g. HFA / HVA on PPC64 and AArch64).\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub struct Uniform {\n+    pub unit: Reg,\n+\n+    /// The total size of the argument, which can be:\n+    /// * equal to `unit.size` (one scalar/vector)\n+    /// * a multiple of `unit.size` (an array of scalar/vectors)\n+    /// * if `unit.kind` is `Integer`, the last element\n+    ///   can be shorter, i.e. `{ i64, i64, i32 }` for\n+    ///   64-bit integers with a total size of 20 bytes\n+    pub total: Size,\n+}\n+\n+impl From<Reg> for Uniform {\n+    fn from(unit: Reg) -> Uniform {\n+        Uniform {\n+            unit,\n+            total: unit.size\n+        }\n+    }\n+}\n+\n+impl Uniform {\n+    pub fn align<C: HasDataLayout>(&self, cx: C) -> Align {\n+        self.unit.align(cx)\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub struct CastTarget {\n+    pub prefix: [Option<RegKind>; 8],\n+    pub prefix_chunk: Size,\n+    pub rest: Uniform,\n+}\n+\n+impl From<Reg> for CastTarget {\n+    fn from(unit: Reg) -> CastTarget {\n+        CastTarget::from(Uniform::from(unit))\n+    }\n+}\n+\n+impl From<Uniform> for CastTarget {\n+    fn from(uniform: Uniform) -> CastTarget {\n+        CastTarget {\n+            prefix: [None; 8],\n+            prefix_chunk: Size::from_bytes(0),\n+            rest: uniform\n+        }\n+    }\n+}\n+\n+impl CastTarget {\n+    pub fn pair(a: Reg, b: Reg) -> CastTarget {\n+        CastTarget {\n+            prefix: [Some(a.kind), None, None, None, None, None, None, None],\n+            prefix_chunk: a.size,\n+            rest: Uniform::from(b)\n+        }\n+    }\n+\n+    pub fn size<C: HasDataLayout>(&self, cx: C) -> Size {\n+        (self.prefix_chunk * self.prefix.iter().filter(|x| x.is_some()).count() as u64)\n+             .abi_align(self.rest.align(cx)) + self.rest.total\n+    }\n+\n+    pub fn align<C: HasDataLayout>(&self, cx: C) -> Align {\n+        self.prefix.iter()\n+            .filter_map(|x| x.map(|kind| Reg { kind: kind, size: self.prefix_chunk }.align(cx)))\n+            .fold(cx.data_layout().aggregate_align.max(self.rest.align(cx)),\n+                |acc, align| acc.max(align))\n+    }\n+}\n+\n+impl<'a, Ty> TyLayout<'a, Ty> {\n+    fn is_aggregate(&self) -> bool {\n+        match self.abi {\n+            Abi::Uninhabited |\n+            Abi::Scalar(_) |\n+            Abi::Vector { .. } => false,\n+            Abi::ScalarPair(..) |\n+            Abi::Aggregate { .. } => true\n+        }\n+    }\n+\n+    fn homogeneous_aggregate<C>(&self, cx: C) -> Option<Reg>\n+        where Ty: TyLayoutMethods<'a, C> + Copy, C: LayoutOf<Ty = Ty, TyLayout = Self> + Copy\n+    {\n+        match self.abi {\n+            Abi::Uninhabited => None,\n+\n+            // The primitive for this algorithm.\n+            Abi::Scalar(ref scalar) => {\n+                let kind = match scalar.value {\n+                    abi::Int(..) |\n+                    abi::Pointer => RegKind::Integer,\n+                    abi::F32 |\n+                    abi::F64 => RegKind::Float\n+                };\n+                Some(Reg {\n+                    kind,\n+                    size: self.size\n+                })\n+            }\n+\n+            Abi::Vector { .. } => {\n+                Some(Reg {\n+                    kind: RegKind::Vector,\n+                    size: self.size\n+                })\n+            }\n+\n+            Abi::ScalarPair(..) |\n+            Abi::Aggregate { .. } => {\n+                let mut total = Size::from_bytes(0);\n+                let mut result = None;\n+\n+                let is_union = match self.fields {\n+                    FieldPlacement::Array { count, .. } => {\n+                        if count > 0 {\n+                            return self.field(cx, 0).homogeneous_aggregate(cx);\n+                        } else {\n+                            return None;\n+                        }\n+                    }\n+                    FieldPlacement::Union(_) => true,\n+                    FieldPlacement::Arbitrary { .. } => false\n+                };\n+\n+                for i in 0..self.fields.count() {\n+                    if !is_union && total != self.fields.offset(i) {\n+                        return None;\n+                    }\n+\n+                    let field = self.field(cx, i);\n+                    match (result, field.homogeneous_aggregate(cx)) {\n+                        // The field itself must be a homogeneous aggregate.\n+                        (_, None) => return None,\n+                        // If this is the first field, record the unit.\n+                        (None, Some(unit)) => {\n+                            result = Some(unit);\n+                        }\n+                        // For all following fields, the unit must be the same.\n+                        (Some(prev_unit), Some(unit)) => {\n+                            if prev_unit != unit {\n+                                return None;\n+                            }\n+                        }\n+                    }\n+\n+                    // Keep track of the offset (without padding).\n+                    let size = field.size;\n+                    if is_union {\n+                        total = total.max(size);\n+                    } else {\n+                        total += size;\n+                    }\n+                }\n+\n+                // There needs to be no padding.\n+                if total != self.size {\n+                    None\n+                } else {\n+                    result\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Information about how to pass an argument to,\n+/// or return a value from, a function, under some ABI.\n+#[derive(Debug)]\n+pub struct ArgType<'a, Ty> {\n+    pub layout: TyLayout<'a, Ty>,\n+\n+    /// Dummy argument, which is emitted before the real argument.\n+    pub pad: Option<Reg>,\n+\n+    pub mode: PassMode,\n+}\n+\n+impl<'a, Ty> ArgType<'a, Ty> {\n+    pub fn new(layout: TyLayout<'a, Ty>) -> Self {\n+        ArgType {\n+            layout,\n+            pad: None,\n+            mode: PassMode::Direct(ArgAttributes::new()),\n+        }\n+    }\n+\n+    pub fn make_indirect(&mut self) {\n+        assert_eq!(self.mode, PassMode::Direct(ArgAttributes::new()));\n+\n+        // Start with fresh attributes for the pointer.\n+        let mut attrs = ArgAttributes::new();\n+\n+        // For non-immediate arguments the callee gets its own copy of\n+        // the value on the stack, so there are no aliases. It's also\n+        // program-invisible so can't possibly capture\n+        attrs.set(ArgAttribute::NoAlias)\n+             .set(ArgAttribute::NoCapture)\n+             .set(ArgAttribute::NonNull);\n+        attrs.pointee_size = self.layout.size;\n+        // FIXME(eddyb) We should be doing this, but at least on\n+        // i686-pc-windows-msvc, it results in wrong stack offsets.\n+        // attrs.pointee_align = Some(self.layout.align);\n+\n+        self.mode = PassMode::Indirect(attrs);\n+    }\n+\n+    pub fn make_indirect_byval(&mut self) {\n+        self.make_indirect();\n+        match self.mode {\n+            PassMode::Indirect(ref mut attrs) => {\n+                attrs.set(ArgAttribute::ByVal);\n+            }\n+            _ => unreachable!()\n+        }\n+    }\n+\n+    pub fn extend_integer_width_to(&mut self, bits: u64) {\n+        // Only integers have signedness\n+        if let Abi::Scalar(ref scalar) = self.layout.abi {\n+            if let abi::Int(i, signed) = scalar.value {\n+                if i.size().bits() < bits {\n+                    if let PassMode::Direct(ref mut attrs) = self.mode {\n+                        attrs.set(if signed {\n+                            ArgAttribute::SExt\n+                        } else {\n+                            ArgAttribute::ZExt\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn cast_to<T: Into<CastTarget>>(&mut self, target: T) {\n+        assert_eq!(self.mode, PassMode::Direct(ArgAttributes::new()));\n+        self.mode = PassMode::Cast(target.into());\n+    }\n+\n+    pub fn pad_with(&mut self, reg: Reg) {\n+        self.pad = Some(reg);\n+    }\n+\n+    pub fn is_indirect(&self) -> bool {\n+        match self.mode {\n+            PassMode::Indirect(_) => true,\n+            _ => false\n+        }\n+    }\n+\n+    pub fn is_ignore(&self) -> bool {\n+        self.mode == PassMode::Ignore\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum Conv {\n+    C,\n+\n+    ArmAapcs,\n+\n+    Msp430Intr,\n+\n+    PtxKernel,\n+\n+    X86Fastcall,\n+    X86Intr,\n+    X86Stdcall,\n+    X86ThisCall,\n+    X86VectorCall,\n+\n+    X86_64SysV,\n+    X86_64Win64,\n+}\n+\n+/// Metadata describing how the arguments to a native function\n+/// should be passed in order to respect the native ABI.\n+///\n+/// I will do my best to describe this structure, but these\n+/// comments are reverse-engineered and may be inaccurate. -NDM\n+#[derive(Debug)]\n+pub struct FnType<'a, Ty> {\n+    /// The LLVM types of each argument.\n+    pub args: Vec<ArgType<'a, Ty>>,\n+\n+    /// LLVM return type.\n+    pub ret: ArgType<'a, Ty>,\n+\n+    pub variadic: bool,\n+\n+    pub conv: Conv,\n+}\n+\n+impl<'a, Ty> FnType<'a, Ty> {\n+    pub fn adjust_for_cabi<C>(&mut self, cx: C, abi: ::spec::abi::Abi) -> Result<(), String>\n+        where Ty: TyLayoutMethods<'a, C> + Copy,\n+              C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout + HasTargetSpec\n+    {\n+        match &cx.target_spec().arch[..] {\n+            \"x86\" => {\n+                let flavor = if abi == ::spec::abi::Abi::Fastcall {\n+                    x86::Flavor::Fastcall\n+                } else {\n+                    x86::Flavor::General\n+                };\n+                x86::compute_abi_info(cx, self, flavor);\n+            },\n+            \"x86_64\" => if abi == ::spec::abi::Abi::SysV64 {\n+                x86_64::compute_abi_info(cx, self);\n+            } else if abi == ::spec::abi::Abi::Win64 || cx.target_spec().options.is_like_windows {\n+                x86_win64::compute_abi_info(self);\n+            } else {\n+                x86_64::compute_abi_info(cx, self);\n+            },\n+            \"aarch64\" => aarch64::compute_abi_info(cx, self),\n+            \"arm\" => arm::compute_abi_info(cx, self),\n+            \"mips\" => mips::compute_abi_info(cx, self),\n+            \"mips64\" => mips64::compute_abi_info(cx, self),\n+            \"powerpc\" => powerpc::compute_abi_info(cx, self),\n+            \"powerpc64\" => powerpc64::compute_abi_info(cx, self),\n+            \"s390x\" => s390x::compute_abi_info(cx, self),\n+            \"asmjs\" => asmjs::compute_abi_info(cx, self),\n+            \"wasm32\" => {\n+                if cx.target_spec().llvm_target.contains(\"emscripten\") {\n+                    asmjs::compute_abi_info(cx, self)\n+                } else {\n+                    wasm32::compute_abi_info(self)\n+                }\n+            }\n+            \"msp430\" => msp430::compute_abi_info(self),\n+            \"sparc\" => sparc::compute_abi_info(cx, self),\n+            \"sparc64\" => sparc64::compute_abi_info(cx, self),\n+            \"nvptx\" => nvptx::compute_abi_info(self),\n+            \"nvptx64\" => nvptx64::compute_abi_info(self),\n+            \"hexagon\" => hexagon::compute_abi_info(self),\n+            a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n+        }\n+\n+        if let PassMode::Indirect(ref mut attrs) = self.ret.mode {\n+            attrs.set(ArgAttribute::StructRet);\n+        }\n+\n+        Ok(())\n+    }\n+}"}, {"sha": "e57ca03da600753f2f424a3019093ce1b5c14e1d", "filename": "src/librustc_target/abi/call/msp430.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmsp430.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fmsp430.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmsp430.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,31 +11,31 @@\n // Reference: MSP430 Embedded Application Binary Interface\n // http://www.ti.com/lit/an/slaa534/slaa534.pdf\n \n-use abi::{ArgType, FnType, LayoutExt};\n+use abi::call::{ArgType, FnType};\n \n // 3.5 Structures or Unions Passed and Returned by Reference\n //\n // \"Structures (including classes) and unions larger than 32 bits are passed and\n // returned by reference. To pass a structure or union by reference, the caller\n // places its address in the appropriate location: either in a register or on\n // the stack, according to its position in the argument list. (..)\"\n-fn classify_ret_ty(ret: &mut ArgType) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 32 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(16);\n     }\n }\n \n-fn classify_arg_ty(arg: &mut ArgType) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 32 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(16);\n     }\n }\n \n-pub fn compute_abi_info(fty: &mut FnType) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_msp430.rs"}, {"sha": "f23f7ddf2abcc82b0f682162a425dbfeff9b02ed", "filename": "src/librustc_target/abi/call/nvptx.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,25 +11,25 @@\n // Reference: PTX Writer's Guide to Interoperability\n // http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n \n-use abi::{ArgType, FnType, LayoutExt};\n+use abi::call::{ArgType, FnType};\n \n-fn classify_ret_ty(ret: &mut ArgType) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 32 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(32);\n     }\n }\n \n-fn classify_arg_ty(arg: &mut ArgType) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 32 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n }\n \n-pub fn compute_abi_info(fty: &mut FnType) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_nvptx.rs"}, {"sha": "4399a2fec6caf190b89feab251bce919cf5e5097", "filename": "src/librustc_target/abi/call/nvptx64.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fnvptx64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,25 +11,25 @@\n // Reference: PTX Writer's Guide to Interoperability\n // http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n \n-use abi::{ArgType, FnType, LayoutExt};\n+use abi::call::{ArgType, FnType};\n \n-fn classify_ret_ty(ret: &mut ArgType) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 64 {\n         ret.make_indirect();\n     } else {\n         ret.extend_integer_width_to(64);\n     }\n }\n \n-fn classify_arg_ty(arg: &mut ArgType) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 64 {\n         arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(64);\n     }\n }\n \n-pub fn compute_abi_info(fty: &mut FnType) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_nvptx64.rs"}, {"sha": "8c3c2422d7f41de321e4eb3a240eab877f001744", "filename": "src/librustc_target/abi/call/powerpc.rs", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{ArgType, FnType, LayoutExt, Reg, Uniform};\n-use context::CodegenCx;\n+use abi::call::{ArgType, FnType, Reg, Uniform};\n+use abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n \n-use rustc::ty::layout::Size;\n-\n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                             ret: &mut ArgType<'tcx>,\n-                             offset: &mut Size) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<Ty>, offset: &mut Size)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n     } else {\n         ret.make_indirect();\n-        *offset += cx.tcx.data_layout.pointer_size;\n+        *offset += cx.data_layout().pointer_size;\n     }\n }\n \n-fn classify_arg_ty(cx: &CodegenCx, arg: &mut ArgType, offset: &mut Size) {\n-    let dl = &cx.tcx.data_layout;\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<Ty>, offset: &mut Size)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n+    let dl = cx.data_layout();\n     let size = arg.layout.size;\n     let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align);\n \n@@ -44,7 +44,9 @@ fn classify_arg_ty(cx: &CodegenCx, arg: &mut ArgType, offset: &mut Size) {\n     *offset = offset.abi_align(align) + size.abi_align(align);\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<Ty>)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n     let mut offset = Size::from_bytes(0);\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret, &mut offset);", "previous_filename": "src/librustc_trans/cabi_powerpc.rs"}, {"sha": "0c5ec77a3982d418045ca79dca502c1b892020f3", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "renamed", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -12,9 +12,8 @@\n // Alignment of 128 bit types is not currently handled, this will\n // need to be fixed when PowerPC vector support is added.\n \n-use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n-use context::CodegenCx;\n-use rustc::ty::layout;\n+use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n+use abi::{Align, Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n #[derive(Debug, Clone, Copy, PartialEq)]\n enum ABI {\n@@ -23,10 +22,11 @@ enum ABI {\n }\n use self::ABI::*;\n \n-fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                                      arg: &mut ArgType<'tcx>,\n-                                      abi: ABI)\n-                                     -> Option<Uniform> {\n+fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n+                                       -> Option<Uniform>\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     arg.layout.homogeneous_aggregate(cx).and_then(|unit| {\n         // ELFv1 only passes one-member aggregates transparently.\n         // ELFv2 passes up to eight uniquely addressable members.\n@@ -52,7 +52,10 @@ fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     })\n }\n \n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>, abi: ABI) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>, abi: ABI)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(64);\n         return;\n@@ -92,7 +95,10 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>,\n     ret.make_indirect();\n }\n \n-fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>, abi: ABI) {\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(64);\n         return;\n@@ -112,7 +118,7 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>,\n             if size.bits() <= 64 {\n                 (Reg { kind: RegKind::Integer, size }, size)\n             } else {\n-                let align = layout::Align::from_bits(64, 64).unwrap();\n+                let align = Align::from_bits(64, 64).unwrap();\n                 (Reg::i64(), size.abi_align(align))\n             }\n         },\n@@ -128,11 +134,13 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>,\n     });\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n-    let abi = match cx.sess().target.target.target_endian.as_str() {\n-        \"big\" => ELFv1,\n-        \"little\" => ELFv2,\n-        _ => unimplemented!(),\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    let abi = match cx.data_layout().endian {\n+        Endian::Big => ELFv1,\n+        Endian::Little => ELFv2,\n     };\n \n     if !fty.ret.is_ignore() {", "previous_filename": "src/librustc_trans/cabi_powerpc64.rs"}, {"sha": "3002a3c46c8a84cfd80ca00db10f53b1679865ad", "filename": "src/librustc_target/abi/call/s390x.rs", "status": "renamed", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fs390x.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,29 +11,31 @@\n // FIXME: The assumes we're using the non-vector ABI, i.e. compiling\n // for a pre-z13 machine or using -mno-vx.\n \n-use abi::{FnType, ArgType, LayoutExt, Reg};\n-use context::CodegenCx;\n+use abi::call::{FnType, ArgType, Reg};\n+use abi::{self, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n-use rustc::ty::layout::{self, TyLayout};\n-\n-fn classify_ret_ty(ret: &mut ArgType) {\n+fn classify_ret_ty<'a, Ty, C>(ret: &mut ArgType<Ty>)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() && ret.layout.size.bits() <= 64 {\n         ret.extend_integer_width_to(64);\n     } else {\n         ret.make_indirect();\n     }\n }\n \n-fn is_single_fp_element<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                                  layout: TyLayout<'tcx>) -> bool {\n+fn is_single_fp_element<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>) -> bool\n+    where Ty: TyLayoutMethods<'a, C>,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     match layout.abi {\n-        layout::Abi::Scalar(ref scalar) => {\n+        abi::Abi::Scalar(ref scalar) => {\n             match scalar.value {\n-                layout::F32 | layout::F64 => true,\n+                abi::F32 | abi::F64 => true,\n                 _ => false\n             }\n         }\n-        layout::Abi::Aggregate { .. } => {\n+        abi::Abi::Aggregate { .. } => {\n             if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n                 is_single_fp_element(cx, layout.field(cx, 0))\n             } else {\n@@ -44,7 +46,10 @@ fn is_single_fp_element<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     }\n }\n \n-fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !arg.layout.is_aggregate() && arg.layout.size.bits() <= 64 {\n         arg.extend_integer_width_to(64);\n         return;\n@@ -67,7 +72,10 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n     }\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(&mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_s390x.rs"}, {"sha": "5001499ea5d3b04134e5cb603c86edece4148f96", "filename": "src/librustc_target/abi/call/sparc.rs", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,24 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{ArgType, FnType, LayoutExt, Reg, Uniform};\n-use context::CodegenCx;\n+use abi::call::{ArgType, FnType, Reg, Uniform};\n+use abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n \n-use rustc::ty::layout::Size;\n-\n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                             ret: &mut ArgType<'tcx>,\n-                             offset: &mut Size) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<Ty>, offset: &mut Size)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(32);\n     } else {\n         ret.make_indirect();\n-        *offset += cx.tcx.data_layout.pointer_size;\n+        *offset += cx.data_layout().pointer_size;\n     }\n }\n \n-fn classify_arg_ty(cx: &CodegenCx, arg: &mut ArgType, offset: &mut Size) {\n-    let dl = &cx.tcx.data_layout;\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<Ty>, offset: &mut Size)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n+    let dl = cx.data_layout();\n     let size = arg.layout.size;\n     let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align);\n \n@@ -44,7 +44,9 @@ fn classify_arg_ty(cx: &CodegenCx, arg: &mut ArgType, offset: &mut Size) {\n     *offset = offset.abi_align(align) + size.abi_align(align);\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<Ty>)\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n+{\n     let mut offset = Size::from_bytes(0);\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret, &mut offset);", "previous_filename": "src/librustc_trans/cabi_sparc.rs"}, {"sha": "987f56e6f98511ed822ebc1cbe37bc8726f0f97a", "filename": "src/librustc_target/abi/call/sparc64.rs", "status": "renamed", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,11 +10,14 @@\n \n // FIXME: This needs an audit for correctness and completeness.\n \n-use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n-use context::CodegenCx;\n+use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n+use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n-fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n-                                     -> Option<Uniform> {\n+fn is_homogeneous_aggregate<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n+                                     -> Option<Uniform>\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     arg.layout.homogeneous_aggregate(cx).and_then(|unit| {\n         // Ensure we have at most eight uniquely addressable members.\n         if arg.layout.size > unit.size.checked_mul(8, cx).unwrap() {\n@@ -38,7 +41,10 @@ fn is_homogeneous_aggregate<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgTyp\n     })\n }\n \n-fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+fn classify_ret_ty<'a, Ty, C>(cx: C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !ret.layout.is_aggregate() {\n         ret.extend_integer_width_to(64);\n         return;\n@@ -72,7 +78,10 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n     ret.make_indirect();\n }\n \n-fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>) {\n+fn classify_arg_ty<'a, Ty, C>(cx: C, arg: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !arg.layout.is_aggregate() {\n         arg.extend_integer_width_to(64);\n         return;\n@@ -95,7 +104,10 @@ fn classify_arg_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n     });\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !fty.ret.is_ignore() {\n         classify_ret_ty(cx, &mut fty.ret);\n     }", "previous_filename": "src/librustc_trans/cabi_sparc64.rs"}, {"sha": "7109eea535d4a35c968b1b8f92667b8e9b4e7c2a", "filename": "src/librustc_target/abi/call/wasm32.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,20 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{FnType, ArgType};\n-use context::CodegenCx;\n+use abi::call::{FnType, ArgType};\n \n-fn classify_ret_ty<'a, 'tcx>(_cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<Ty>) {\n     ret.extend_integer_width_to(32);\n }\n \n-fn classify_arg_ty(arg: &mut ArgType) {\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<Ty>) {\n     arg.extend_integer_width_to(32);\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n     if !fty.ret.is_ignore() {\n-        classify_ret_ty(cx, &mut fty.ret);\n+        classify_ret_ty(&mut fty.ret);\n     }\n \n     for arg in &mut fty.args {", "previous_filename": "src/librustc_trans/cabi_wasm32.rs"}, {"sha": "e803b96b21cfa63ef9001d8f03fd5b5cb8f9465e", "filename": "src/librustc_target/abi/call/x86.rs", "status": "renamed", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,27 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{ArgAttribute, FnType, LayoutExt, PassMode, Reg, RegKind};\n-use common::CodegenCx;\n-\n-use rustc::ty::layout::{self, TyLayout};\n+use abi::call::{ArgAttribute, FnType, PassMode, Reg, RegKind};\n+use abi::{self, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use spec::HasTargetSpec;\n \n #[derive(PartialEq)]\n pub enum Flavor {\n     General,\n     Fastcall\n }\n \n-fn is_single_fp_element<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                                  layout: TyLayout<'tcx>) -> bool {\n+fn is_single_fp_element<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>) -> bool\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     match layout.abi {\n-        layout::Abi::Scalar(ref scalar) => {\n+        abi::Abi::Scalar(ref scalar) => {\n             match scalar.value {\n-                layout::F32 | layout::F64 => true,\n+                abi::F32 | abi::F64 => true,\n                 _ => false\n             }\n         }\n-        layout::Abi::Aggregate { .. } => {\n+        abi::Abi::Aggregate { .. } => {\n             if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n                 is_single_fp_element(cx, layout.field(cx, 0))\n             } else {\n@@ -39,9 +40,10 @@ fn is_single_fp_element<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     }\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                                  fty: &mut FnType<'tcx>,\n-                                  flavor: Flavor) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>, flavor: Flavor)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout + HasTargetSpec\n+{\n     if !fty.ret.is_ignore() {\n         if fty.ret.layout.is_aggregate() {\n             // Returning a structure. Most often, this will use\n@@ -51,7 +53,7 @@ pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             // Some links:\n             // http://www.angelcode.com/dev/callconv/callconv.html\n             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n-            let t = &cx.sess().target.target;\n+            let t = cx.target_spec();\n             if t.options.abi_return_struct_as_int {\n                 // According to Clang, everyone but MSVC returns single-element\n                 // float aggregates directly in a floating-point register.\n@@ -106,7 +108,7 @@ pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 PassMode::Direct(ref mut attrs) => attrs,\n                 PassMode::Pair(..) |\n                 PassMode::Cast(_) => {\n-                    bug!(\"x86 shouldn't be passing arguments by {:?}\", arg.mode)\n+                    unreachable!(\"x86 shouldn't be passing arguments by {:?}\", arg.mode)\n                 }\n             };\n ", "previous_filename": "src/librustc_trans/cabi_x86.rs"}, {"sha": "0ba1ee736e769f85b2a1a196525daa6523046631", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "renamed", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -11,10 +11,8 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-use abi::{ArgType, CastTarget, FnType, LayoutExt, Reg, RegKind};\n-use context::CodegenCx;\n-\n-use rustc::ty::layout::{self, TyLayout, Size};\n+use abi::call::{ArgType, CastTarget, FnType, Reg, RegKind};\n+use abi::{self, Abi, HasDataLayout, LayoutOf, Size, TyLayout, TyLayoutMethods};\n \n /// Classification of \"eightbyte\" components.\n // NB: the order of the variants is from general to specific,\n@@ -33,13 +31,16 @@ struct Memory;\n const LARGEST_VECTOR_SIZE: usize = 512;\n const MAX_EIGHTBYTES: usize = LARGEST_VECTOR_SIZE / 64;\n \n-fn classify_arg<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &ArgType<'tcx>)\n-                          -> Result<[Option<Class>; MAX_EIGHTBYTES], Memory> {\n-    fn classify<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                          layout: TyLayout<'tcx>,\n-                          cls: &mut [Option<Class>],\n-                          off: Size)\n-                          -> Result<(), Memory> {\n+fn classify_arg<'a, Ty, C>(cx: C, arg: &ArgType<'a, Ty>)\n+                          -> Result<[Option<Class>; MAX_EIGHTBYTES], Memory>\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    fn classify<'a, Ty, C>(cx: C, layout: TyLayout<'a, Ty>,\n+                          cls: &mut [Option<Class>], off: Size) -> Result<(), Memory>\n+        where Ty: TyLayoutMethods<'a, C> + Copy,\n+            C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+    {\n         if !off.is_abi_aligned(layout.align) {\n             if !layout.is_zst() {\n                 return Err(Memory);\n@@ -48,31 +49,31 @@ fn classify_arg<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, arg: &ArgType<'tcx>)\n         }\n \n         let mut c = match layout.abi {\n-            layout::Abi::Uninhabited => return Ok(()),\n+            Abi::Uninhabited => return Ok(()),\n \n-            layout::Abi::Scalar(ref scalar) => {\n+            Abi::Scalar(ref scalar) => {\n                 match scalar.value {\n-                    layout::Int(..) |\n-                    layout::Pointer => Class::Int,\n-                    layout::F32 |\n-                    layout::F64 => Class::Sse\n+                    abi::Int(..) |\n+                    abi::Pointer => Class::Int,\n+                    abi::F32 |\n+                    abi::F64 => Class::Sse\n                 }\n             }\n \n-            layout::Abi::Vector { .. } => Class::Sse,\n+            Abi::Vector { .. } => Class::Sse,\n \n-            layout::Abi::ScalarPair(..) |\n-            layout::Abi::Aggregate { .. } => {\n+            Abi::ScalarPair(..) |\n+            Abi::Aggregate { .. } => {\n                 match layout.variants {\n-                    layout::Variants::Single { .. } => {\n+                    abi::Variants::Single { .. } => {\n                         for i in 0..layout.fields.count() {\n                             let field_off = off + layout.fields.offset(i);\n                             classify(cx, layout.field(cx, i), cls, field_off)?;\n                         }\n                         return Ok(());\n                     }\n-                    layout::Variants::Tagged { .. } |\n-                    layout::Variants::NicheFilling { .. } => return Err(Memory),\n+                    abi::Variants::Tagged { .. } |\n+                    abi::Variants::NicheFilling { .. } => return Err(Memory),\n                 }\n             }\n \n@@ -160,7 +161,7 @@ fn reg_component(cls: &[Option<Class>], i: &mut usize, size: Size) -> Option<Reg\n                 }\n             })\n         }\n-        Some(c) => bug!(\"reg_component: unhandled class {:?}\", c)\n+        Some(c) => unreachable!(\"reg_component: unhandled class {:?}\", c)\n     }\n }\n \n@@ -178,11 +179,14 @@ fn cast_target(cls: &[Option<Class>], size: Size) -> CastTarget {\n     target\n }\n \n-pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     let mut int_regs = 6; // RDI, RSI, RDX, RCX, R8, R9\n     let mut sse_regs = 8; // XMM0-7\n \n-    let mut x86_64_ty = |arg: &mut ArgType<'tcx>, is_arg: bool| {\n+    let mut x86_64_ty = |arg: &mut ArgType<'a, Ty>, is_arg: bool| {\n         let mut cls_or_mem = classify_arg(cx, arg);\n \n         let mut needed_int = 0;", "previous_filename": "src/librustc_trans/cabi_x86_64.rs"}, {"sha": "1ee069e2bbbbf1f1a01618108c2a8b96ab2c1843", "filename": "src/librustc_target/abi/call/x86_win64.rs", "status": "renamed", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_win64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{ArgType, FnType, Reg};\n-\n-use rustc::ty::layout;\n+use abi::call::{ArgType, FnType, Reg};\n+use abi::Abi;\n \n // Win64 ABI: http://msdn.microsoft.com/en-us/library/zthk2dkh.aspx\n \n-pub fn compute_abi_info(fty: &mut FnType) {\n-    let fixup = |a: &mut ArgType| {\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<Ty>) {\n+    let fixup = |a: &mut ArgType<Ty>| {\n         match a.layout.abi {\n-            layout::Abi::Uninhabited => {}\n-            layout::Abi::ScalarPair(..) |\n-            layout::Abi::Aggregate { .. } => {\n+            Abi::Uninhabited => {}\n+            Abi::ScalarPair(..) |\n+            Abi::Aggregate { .. } => {\n                 match a.layout.size.bits() {\n                     8 => a.cast_to(Reg::i8()),\n                     16 => a.cast_to(Reg::i16()),\n@@ -28,11 +27,11 @@ pub fn compute_abi_info(fty: &mut FnType) {\n                     _ => a.make_indirect()\n                 }\n             }\n-            layout::Abi::Vector { .. } => {\n+            Abi::Vector { .. } => {\n                 // FIXME(eddyb) there should be a size cap here\n                 // (probably what clang calls \"illegal vectors\").\n             }\n-            layout::Abi::Scalar(_) => {\n+            Abi::Scalar(_) => {\n                 if a.layout.size.bytes() > 8 {\n                     a.make_indirect();\n                 } else {", "previous_filename": "src/librustc_trans/cabi_x86_win64.rs"}, {"sha": "18dd04c0ee86774384c9a80fe5d0165848f7773e", "filename": "src/librustc_target/abi/mod.rs", "status": "added", "additions": 823, "deletions": 0, "changes": 823, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -0,0 +1,823 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use self::Integer::*;\n+pub use self::Primitive::*;\n+\n+use spec::Target;\n+\n+use std::cmp;\n+use std::ops::{Add, Deref, Sub, Mul, AddAssign, RangeInclusive};\n+\n+pub mod call;\n+\n+/// Parsed [Data layout](http://llvm.org/docs/LangRef.html#data-layout)\n+/// for a target, which contains everything needed to compute layouts.\n+pub struct TargetDataLayout {\n+    pub endian: Endian,\n+    pub i1_align: Align,\n+    pub i8_align: Align,\n+    pub i16_align: Align,\n+    pub i32_align: Align,\n+    pub i64_align: Align,\n+    pub i128_align: Align,\n+    pub f32_align: Align,\n+    pub f64_align: Align,\n+    pub pointer_size: Size,\n+    pub pointer_align: Align,\n+    pub aggregate_align: Align,\n+\n+    /// Alignments for vector types.\n+    pub vector_align: Vec<(Size, Align)>\n+}\n+\n+impl Default for TargetDataLayout {\n+    /// Creates an instance of `TargetDataLayout`.\n+    fn default() -> TargetDataLayout {\n+        TargetDataLayout {\n+            endian: Endian::Big,\n+            i1_align: Align::from_bits(8, 8).unwrap(),\n+            i8_align: Align::from_bits(8, 8).unwrap(),\n+            i16_align: Align::from_bits(16, 16).unwrap(),\n+            i32_align: Align::from_bits(32, 32).unwrap(),\n+            i64_align: Align::from_bits(32, 64).unwrap(),\n+            i128_align: Align::from_bits(32, 64).unwrap(),\n+            f32_align: Align::from_bits(32, 32).unwrap(),\n+            f64_align: Align::from_bits(64, 64).unwrap(),\n+            pointer_size: Size::from_bits(64),\n+            pointer_align: Align::from_bits(64, 64).unwrap(),\n+            aggregate_align: Align::from_bits(0, 64).unwrap(),\n+            vector_align: vec![\n+                (Size::from_bits(64), Align::from_bits(64, 64).unwrap()),\n+                (Size::from_bits(128), Align::from_bits(128, 128).unwrap())\n+            ]\n+        }\n+    }\n+}\n+\n+impl TargetDataLayout {\n+    pub fn parse(target: &Target) -> Result<TargetDataLayout, String> {\n+        // Parse a bit count from a string.\n+        let parse_bits = |s: &str, kind: &str, cause: &str| {\n+            s.parse::<u64>().map_err(|err| {\n+                format!(\"invalid {} `{}` for `{}` in \\\"data-layout\\\": {}\",\n+                        kind, s, cause, err)\n+            })\n+        };\n+\n+        // Parse a size string.\n+        let size = |s: &str, cause: &str| {\n+            parse_bits(s, \"size\", cause).map(Size::from_bits)\n+        };\n+\n+        // Parse an alignment string.\n+        let align = |s: &[&str], cause: &str| {\n+            if s.is_empty() {\n+                return Err(format!(\"missing alignment for `{}` in \\\"data-layout\\\"\", cause));\n+            }\n+            let abi = parse_bits(s[0], \"alignment\", cause)?;\n+            let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, \"alignment\", cause))?;\n+            Align::from_bits(abi, pref).map_err(|err| {\n+                format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\",\n+                        cause, err)\n+            })\n+        };\n+\n+        let mut dl = TargetDataLayout::default();\n+        let mut i128_align_src = 64;\n+        for spec in target.data_layout.split(\"-\") {\n+            match &spec.split(\":\").collect::<Vec<_>>()[..] {\n+                &[\"e\"] => dl.endian = Endian::Little,\n+                &[\"E\"] => dl.endian = Endian::Big,\n+                &[\"a\", ref a..] => dl.aggregate_align = align(a, \"a\")?,\n+                &[\"f32\", ref a..] => dl.f32_align = align(a, \"f32\")?,\n+                &[\"f64\", ref a..] => dl.f64_align = align(a, \"f64\")?,\n+                &[p @ \"p\", s, ref a..] | &[p @ \"p0\", s, ref a..] => {\n+                    dl.pointer_size = size(s, p)?;\n+                    dl.pointer_align = align(a, p)?;\n+                }\n+                &[s, ref a..] if s.starts_with(\"i\") => {\n+                    let bits = match s[1..].parse::<u64>() {\n+                        Ok(bits) => bits,\n+                        Err(_) => {\n+                            size(&s[1..], \"i\")?; // For the user error.\n+                            continue;\n+                        }\n+                    };\n+                    let a = align(a, s)?;\n+                    match bits {\n+                        1 => dl.i1_align = a,\n+                        8 => dl.i8_align = a,\n+                        16 => dl.i16_align = a,\n+                        32 => dl.i32_align = a,\n+                        64 => dl.i64_align = a,\n+                        _ => {}\n+                    }\n+                    if bits >= i128_align_src && bits <= 128 {\n+                        // Default alignment for i128 is decided by taking the alignment of\n+                        // largest-sized i{64...128}.\n+                        i128_align_src = bits;\n+                        dl.i128_align = a;\n+                    }\n+                }\n+                &[s, ref a..] if s.starts_with(\"v\") => {\n+                    let v_size = size(&s[1..], \"v\")?;\n+                    let a = align(a, s)?;\n+                    if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {\n+                        v.1 = a;\n+                        continue;\n+                    }\n+                    // No existing entry, add a new one.\n+                    dl.vector_align.push((v_size, a));\n+                }\n+                _ => {} // Ignore everything else.\n+            }\n+        }\n+\n+        // Perform consistency checks against the Target information.\n+        let endian_str = match dl.endian {\n+            Endian::Little => \"little\",\n+            Endian::Big => \"big\"\n+        };\n+        if endian_str != target.target_endian {\n+            return Err(format!(\"inconsistent target specification: \\\"data-layout\\\" claims \\\n+                                architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n+                               endian_str, target.target_endian));\n+        }\n+\n+        if dl.pointer_size.bits().to_string() != target.target_pointer_width {\n+            return Err(format!(\"inconsistent target specification: \\\"data-layout\\\" claims \\\n+                                pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n+                               dl.pointer_size.bits(), target.target_pointer_width));\n+        }\n+\n+        Ok(dl)\n+    }\n+\n+    /// Return exclusive upper bound on object size.\n+    ///\n+    /// The theoretical maximum object size is defined as the maximum positive `isize` value.\n+    /// This ensures that the `offset` semantics remain well-defined by allowing it to correctly\n+    /// index every address within an object along with one byte past the end, along with allowing\n+    /// `isize` to store the difference between any two pointers into an object.\n+    ///\n+    /// The upper bound on 64-bit currently needs to be lower because LLVM uses a 64-bit integer\n+    /// to represent object size in bits. It would need to be 1 << 61 to account for this, but is\n+    /// currently conservatively bounded to 1 << 47 as that is enough to cover the current usable\n+    /// address space on 64-bit ARMv8 and x86_64.\n+    pub fn obj_size_bound(&self) -> u64 {\n+        match self.pointer_size.bits() {\n+            16 => 1 << 15,\n+            32 => 1 << 31,\n+            64 => 1 << 47,\n+            bits => panic!(\"obj_size_bound: unknown pointer bit size {}\", bits)\n+        }\n+    }\n+\n+    pub fn ptr_sized_integer(&self) -> Integer {\n+        match self.pointer_size.bits() {\n+            16 => I16,\n+            32 => I32,\n+            64 => I64,\n+            bits => panic!(\"ptr_sized_integer: unknown pointer bit size {}\", bits)\n+        }\n+    }\n+\n+    pub fn vector_align(&self, vec_size: Size) -> Align {\n+        for &(size, align) in &self.vector_align {\n+            if size == vec_size {\n+                return align;\n+            }\n+        }\n+        // Default to natural alignment, which is what LLVM does.\n+        // That is, use the size, rounded up to a power of 2.\n+        let align = vec_size.bytes().next_power_of_two();\n+        Align::from_bytes(align, align).unwrap()\n+    }\n+}\n+\n+pub trait HasDataLayout: Copy {\n+    fn data_layout(&self) -> &TargetDataLayout;\n+}\n+\n+impl<'a> HasDataLayout for &'a TargetDataLayout {\n+    fn data_layout(&self) -> &TargetDataLayout {\n+        self\n+    }\n+}\n+\n+/// Endianness of the target, which must match cfg(target-endian).\n+#[derive(Copy, Clone)]\n+pub enum Endian {\n+    Little,\n+    Big\n+}\n+\n+/// Size of a type in bytes.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+pub struct Size {\n+    raw: u64\n+}\n+\n+impl Size {\n+    pub fn from_bits(bits: u64) -> Size {\n+        // Avoid potential overflow from `bits + 7`.\n+        Size::from_bytes(bits / 8 + ((bits % 8) + 7) / 8)\n+    }\n+\n+    pub fn from_bytes(bytes: u64) -> Size {\n+        if bytes >= (1 << 61) {\n+            panic!(\"Size::from_bytes: {} bytes in bits doesn't fit in u64\", bytes)\n+        }\n+        Size {\n+            raw: bytes\n+        }\n+    }\n+\n+    pub fn bytes(self) -> u64 {\n+        self.raw\n+    }\n+\n+    pub fn bits(self) -> u64 {\n+        self.bytes() * 8\n+    }\n+\n+    pub fn abi_align(self, align: Align) -> Size {\n+        let mask = align.abi() - 1;\n+        Size::from_bytes((self.bytes() + mask) & !mask)\n+    }\n+\n+    pub fn is_abi_aligned(self, align: Align) -> bool {\n+        let mask = align.abi() - 1;\n+        self.bytes() & mask == 0\n+    }\n+\n+    pub fn checked_add<C: HasDataLayout>(self, offset: Size, cx: C) -> Option<Size> {\n+        let dl = cx.data_layout();\n+\n+        // Each Size is less than dl.obj_size_bound(), so the sum is\n+        // also less than 1 << 62 (and therefore can't overflow).\n+        let bytes = self.bytes() + offset.bytes();\n+\n+        if bytes < dl.obj_size_bound() {\n+            Some(Size::from_bytes(bytes))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub fn checked_mul<C: HasDataLayout>(self, count: u64, cx: C) -> Option<Size> {\n+        let dl = cx.data_layout();\n+\n+        match self.bytes().checked_mul(count) {\n+            Some(bytes) if bytes < dl.obj_size_bound() => {\n+                Some(Size::from_bytes(bytes))\n+            }\n+            _ => None\n+        }\n+    }\n+}\n+\n+// Panicking addition, subtraction and multiplication for convenience.\n+// Avoid during layout computation, return `LayoutError` instead.\n+\n+impl Add for Size {\n+    type Output = Size;\n+    fn add(self, other: Size) -> Size {\n+        // Each Size is less than 1 << 61, so the sum is\n+        // less than 1 << 62 (and therefore can't overflow).\n+        Size::from_bytes(self.bytes() + other.bytes())\n+    }\n+}\n+\n+impl Sub for Size {\n+    type Output = Size;\n+    fn sub(self, other: Size) -> Size {\n+        // Each Size is less than 1 << 61, so an underflow\n+        // would result in a value larger than 1 << 61,\n+        // which Size::from_bytes will catch for us.\n+        Size::from_bytes(self.bytes() - other.bytes())\n+    }\n+}\n+\n+impl Mul<u64> for Size {\n+    type Output = Size;\n+    fn mul(self, count: u64) -> Size {\n+        match self.bytes().checked_mul(count) {\n+            Some(bytes) => Size::from_bytes(bytes),\n+            None => {\n+                panic!(\"Size::mul: {} * {} doesn't fit in u64\", self.bytes(), count)\n+            }\n+        }\n+    }\n+}\n+\n+impl AddAssign for Size {\n+    fn add_assign(&mut self, other: Size) {\n+        *self = *self + other;\n+    }\n+}\n+\n+/// Alignment of a type in bytes, both ABI-mandated and preferred.\n+/// Each field is a power of two, giving the alignment a maximum value of\n+/// 2<sup>(2<sup>8</sup> - 1)</sup>, which is limited by LLVM to a i32,\n+/// with a maximum capacity of 2<sup>31</sup> - 1 or 2147483647.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub struct Align {\n+    abi_pow2: u8,\n+    pref_pow2: u8,\n+}\n+\n+impl Align {\n+    pub fn from_bits(abi: u64, pref: u64) -> Result<Align, String> {\n+        Align::from_bytes(Size::from_bits(abi).bytes(),\n+                          Size::from_bits(pref).bytes())\n+    }\n+\n+    pub fn from_bytes(abi: u64, pref: u64) -> Result<Align, String> {\n+        let log2 = |align: u64| {\n+            // Treat an alignment of 0 bytes like 1-byte alignment.\n+            if align == 0 {\n+                return Ok(0);\n+            }\n+\n+            let mut bytes = align;\n+            let mut pow: u8 = 0;\n+            while (bytes & 1) == 0 {\n+                pow += 1;\n+                bytes >>= 1;\n+            }\n+            if bytes != 1 {\n+                Err(format!(\"`{}` is not a power of 2\", align))\n+            } else if pow > 30 {\n+                Err(format!(\"`{}` is too large\", align))\n+            } else {\n+                Ok(pow)\n+            }\n+        };\n+\n+        Ok(Align {\n+            abi_pow2: log2(abi)?,\n+            pref_pow2: log2(pref)?,\n+        })\n+    }\n+\n+    pub fn abi(self) -> u64 {\n+        1 << self.abi_pow2\n+    }\n+\n+    pub fn pref(self) -> u64 {\n+        1 << self.pref_pow2\n+    }\n+\n+    pub fn abi_bits(self) -> u64 {\n+        self.abi() * 8\n+    }\n+\n+    pub fn pref_bits(self) -> u64 {\n+        self.pref() * 8\n+    }\n+\n+    pub fn min(self, other: Align) -> Align {\n+        Align {\n+            abi_pow2: cmp::min(self.abi_pow2, other.abi_pow2),\n+            pref_pow2: cmp::min(self.pref_pow2, other.pref_pow2),\n+        }\n+    }\n+\n+    pub fn max(self, other: Align) -> Align {\n+        Align {\n+            abi_pow2: cmp::max(self.abi_pow2, other.abi_pow2),\n+            pref_pow2: cmp::max(self.pref_pow2, other.pref_pow2),\n+        }\n+    }\n+}\n+\n+/// Integers, also used for enum discriminants.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+pub enum Integer {\n+    I8,\n+    I16,\n+    I32,\n+    I64,\n+    I128,\n+}\n+\n+impl Integer {\n+    pub fn size(&self) -> Size {\n+        match *self {\n+            I8 => Size::from_bytes(1),\n+            I16 => Size::from_bytes(2),\n+            I32 => Size::from_bytes(4),\n+            I64  => Size::from_bytes(8),\n+            I128  => Size::from_bytes(16),\n+        }\n+    }\n+\n+    pub fn align<C: HasDataLayout>(&self, cx: C) -> Align {\n+        let dl = cx.data_layout();\n+\n+        match *self {\n+            I8 => dl.i8_align,\n+            I16 => dl.i16_align,\n+            I32 => dl.i32_align,\n+            I64 => dl.i64_align,\n+            I128 => dl.i128_align,\n+        }\n+    }\n+\n+    /// Find the smallest Integer type which can represent the signed value.\n+    pub fn fit_signed(x: i128) -> Integer {\n+        match x {\n+            -0x0000_0000_0000_0080...0x0000_0000_0000_007f => I8,\n+            -0x0000_0000_0000_8000...0x0000_0000_0000_7fff => I16,\n+            -0x0000_0000_8000_0000...0x0000_0000_7fff_ffff => I32,\n+            -0x8000_0000_0000_0000...0x7fff_ffff_ffff_ffff => I64,\n+            _ => I128\n+        }\n+    }\n+\n+    /// Find the smallest Integer type which can represent the unsigned value.\n+    pub fn fit_unsigned(x: u128) -> Integer {\n+        match x {\n+            0...0x0000_0000_0000_00ff => I8,\n+            0...0x0000_0000_0000_ffff => I16,\n+            0...0x0000_0000_ffff_ffff => I32,\n+            0...0xffff_ffff_ffff_ffff => I64,\n+            _ => I128,\n+        }\n+    }\n+\n+    /// Find the smallest integer with the given alignment.\n+    pub fn for_abi_align<C: HasDataLayout>(cx: C, align: Align) -> Option<Integer> {\n+        let dl = cx.data_layout();\n+\n+        let wanted = align.abi();\n+        for &candidate in &[I8, I16, I32, I64, I128] {\n+            if wanted == candidate.align(dl).abi() && wanted == candidate.size().bytes() {\n+                return Some(candidate);\n+            }\n+        }\n+        None\n+    }\n+\n+    /// Find the largest integer with the given alignment or less.\n+    pub fn approximate_abi_align<C: HasDataLayout>(cx: C, align: Align) -> Integer {\n+        let dl = cx.data_layout();\n+\n+        let wanted = align.abi();\n+        // FIXME(eddyb) maybe include I128 in the future, when it works everywhere.\n+        for &candidate in &[I64, I32, I16] {\n+            if wanted >= candidate.align(dl).abi() && wanted >= candidate.size().bytes() {\n+                return candidate;\n+            }\n+        }\n+        I8\n+    }\n+}\n+\n+/// Fundamental unit of memory access and layout.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum Primitive {\n+    /// The `bool` is the signedness of the `Integer` type.\n+    ///\n+    /// One would think we would not care about such details this low down,\n+    /// but some ABIs are described in terms of C types and ISAs where the\n+    /// integer arithmetic is done on {sign,zero}-extended registers, e.g.\n+    /// a negative integer passed by zero-extension will appear positive in\n+    /// the callee, and most operations on it will produce the wrong values.\n+    Int(Integer, bool),\n+    F32,\n+    F64,\n+    Pointer\n+}\n+\n+impl<'a, 'tcx> Primitive {\n+    pub fn size<C: HasDataLayout>(self, cx: C) -> Size {\n+        let dl = cx.data_layout();\n+\n+        match self {\n+            Int(i, _) => i.size(),\n+            F32 => Size::from_bits(32),\n+            F64 => Size::from_bits(64),\n+            Pointer => dl.pointer_size\n+        }\n+    }\n+\n+    pub fn align<C: HasDataLayout>(self, cx: C) -> Align {\n+        let dl = cx.data_layout();\n+\n+        match self {\n+            Int(i, _) => i.align(dl),\n+            F32 => dl.f32_align,\n+            F64 => dl.f64_align,\n+            Pointer => dl.pointer_align\n+        }\n+    }\n+}\n+\n+/// Information about one scalar component of a Rust type.\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+pub struct Scalar {\n+    pub value: Primitive,\n+\n+    /// Inclusive wrap-around range of valid values, that is, if\n+    /// min > max, it represents min..=u128::MAX followed by 0..=max.\n+    // FIXME(eddyb) always use the shortest range, e.g. by finding\n+    // the largest space between two consecutive valid values and\n+    // taking everything else as the (shortest) valid range.\n+    pub valid_range: RangeInclusive<u128>,\n+}\n+\n+impl Scalar {\n+    pub fn is_bool(&self) -> bool {\n+        if let Int(I8, _) = self.value {\n+            self.valid_range == (0..=1)\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+/// Describes how the fields of a type are located in memory.\n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub enum FieldPlacement {\n+    /// All fields start at no offset. The `usize` is the field count.\n+    Union(usize),\n+\n+    /// Array/vector-like placement, with all fields of identical types.\n+    Array {\n+        stride: Size,\n+        count: u64\n+    },\n+\n+    /// Struct-like placement, with precomputed offsets.\n+    ///\n+    /// Fields are guaranteed to not overlap, but note that gaps\n+    /// before, between and after all the fields are NOT always\n+    /// padding, and as such their contents may not be discarded.\n+    /// For example, enum variants leave a gap at the start,\n+    /// where the discriminant field in the enum layout goes.\n+    Arbitrary {\n+        /// Offsets for the first byte of each field,\n+        /// ordered to match the source definition order.\n+        /// This vector does not go in increasing order.\n+        // FIXME(eddyb) use small vector optimization for the common case.\n+        offsets: Vec<Size>,\n+\n+        /// Maps source order field indices to memory order indices,\n+        /// depending how fields were permuted.\n+        // FIXME(camlorn) also consider small vector  optimization here.\n+        memory_index: Vec<u32>\n+    }\n+}\n+\n+impl FieldPlacement {\n+    pub fn count(&self) -> usize {\n+        match *self {\n+            FieldPlacement::Union(count) => count,\n+            FieldPlacement::Array { count, .. } => {\n+                let usize_count = count as usize;\n+                assert_eq!(usize_count as u64, count);\n+                usize_count\n+            }\n+            FieldPlacement::Arbitrary { ref offsets, .. } => offsets.len()\n+        }\n+    }\n+\n+    pub fn offset(&self, i: usize) -> Size {\n+        match *self {\n+            FieldPlacement::Union(_) => Size::from_bytes(0),\n+            FieldPlacement::Array { stride, count } => {\n+                let i = i as u64;\n+                assert!(i < count);\n+                stride * i\n+            }\n+            FieldPlacement::Arbitrary { ref offsets, .. } => offsets[i]\n+        }\n+    }\n+\n+    pub fn memory_index(&self, i: usize) -> usize {\n+        match *self {\n+            FieldPlacement::Union(_) |\n+            FieldPlacement::Array { .. } => i,\n+            FieldPlacement::Arbitrary { ref memory_index, .. } => {\n+                let r = memory_index[i];\n+                assert_eq!(r as usize as u32, r);\n+                r as usize\n+            }\n+        }\n+    }\n+\n+    /// Get source indices of the fields by increasing offsets.\n+    #[inline]\n+    pub fn index_by_increasing_offset<'a>(&'a self) -> impl Iterator<Item=usize>+'a {\n+        let mut inverse_small = [0u8; 64];\n+        let mut inverse_big = vec![];\n+        let use_small = self.count() <= inverse_small.len();\n+\n+        // We have to write this logic twice in order to keep the array small.\n+        if let FieldPlacement::Arbitrary { ref memory_index, .. } = *self {\n+            if use_small {\n+                for i in 0..self.count() {\n+                    inverse_small[memory_index[i] as usize] = i as u8;\n+                }\n+            } else {\n+                inverse_big = vec![0; self.count()];\n+                for i in 0..self.count() {\n+                    inverse_big[memory_index[i] as usize] = i as u32;\n+                }\n+            }\n+        }\n+\n+        (0..self.count()).map(move |i| {\n+            match *self {\n+                FieldPlacement::Union(_) |\n+                FieldPlacement::Array { .. } => i,\n+                FieldPlacement::Arbitrary { .. } => {\n+                    if use_small { inverse_small[i] as usize }\n+                    else { inverse_big[i] as usize }\n+                }\n+            }\n+        })\n+    }\n+}\n+\n+/// Describes how values of the type are passed by target ABIs,\n+/// in terms of categories of C types there are ABI rules for.\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum Abi {\n+    Uninhabited,\n+    Scalar(Scalar),\n+    ScalarPair(Scalar, Scalar),\n+    Vector {\n+        element: Scalar,\n+        count: u64\n+    },\n+    Aggregate {\n+        /// If true, the size is exact, otherwise it's only a lower bound.\n+        sized: bool,\n+    }\n+}\n+\n+impl Abi {\n+    /// Returns true if the layout corresponds to an unsized type.\n+    pub fn is_unsized(&self) -> bool {\n+        match *self {\n+            Abi::Uninhabited |\n+            Abi::Scalar(_) |\n+            Abi::ScalarPair(..) |\n+            Abi::Vector { .. } => false,\n+            Abi::Aggregate { sized } => !sized\n+        }\n+    }\n+\n+    /// Returns true if this is a single signed integer scalar\n+    pub fn is_signed(&self) -> bool {\n+        match *self {\n+            Abi::Scalar(ref scal) => match scal.value {\n+                Primitive::Int(_, signed) => signed,\n+                _ => false,\n+            },\n+            _ => false,\n+        }\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub enum Variants {\n+    /// Single enum variants, structs/tuples, unions, and all non-ADTs.\n+    Single {\n+        index: usize\n+    },\n+\n+    /// General-case enums: for each case there is a struct, and they all have\n+    /// all space reserved for the discriminant, and their first field starts\n+    /// at a non-0 offset, after where the discriminant would go.\n+    Tagged {\n+        discr: Scalar,\n+        variants: Vec<LayoutDetails>,\n+    },\n+\n+    /// Multiple cases distinguished by a niche (values invalid for a type):\n+    /// the variant `dataful_variant` contains a niche at an arbitrary\n+    /// offset (field 0 of the enum), which for a variant with discriminant\n+    /// `d` is set to `(d - niche_variants.start).wrapping_add(niche_start)`.\n+    ///\n+    /// For example, `Option<(usize, &T)>`  is represented such that\n+    /// `None` has a null pointer for the second tuple field, and\n+    /// `Some` is the identity function (with a non-null reference).\n+    NicheFilling {\n+        dataful_variant: usize,\n+        niche_variants: RangeInclusive<usize>,\n+        niche: Scalar,\n+        niche_start: u128,\n+        variants: Vec<LayoutDetails>,\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub struct LayoutDetails {\n+    pub variants: Variants,\n+    pub fields: FieldPlacement,\n+    pub abi: Abi,\n+    pub align: Align,\n+    pub size: Size\n+}\n+\n+impl LayoutDetails {\n+    pub fn scalar<C: HasDataLayout>(cx: C, scalar: Scalar) -> Self {\n+        let size = scalar.value.size(cx);\n+        let align = scalar.value.align(cx);\n+        LayoutDetails {\n+            variants: Variants::Single { index: 0 },\n+            fields: FieldPlacement::Union(0),\n+            abi: Abi::Scalar(scalar),\n+            size,\n+            align,\n+        }\n+    }\n+\n+    pub fn uninhabited(field_count: usize) -> Self {\n+        let align = Align::from_bytes(1, 1).unwrap();\n+        LayoutDetails {\n+            variants: Variants::Single { index: 0 },\n+            fields: FieldPlacement::Union(field_count),\n+            abi: Abi::Uninhabited,\n+            align,\n+            size: Size::from_bytes(0)\n+        }\n+    }\n+}\n+\n+/// The details of the layout of a type, alongside the type itself.\n+/// Provides various type traversal APIs (e.g. recursing into fields).\n+///\n+/// Note that the details are NOT guaranteed to always be identical\n+/// to those obtained from `layout_of(ty)`, as we need to produce\n+/// layouts for which Rust types do not exist, such as enum variants\n+/// or synthetic fields of enums (i.e. discriminants) and fat pointers.\n+#[derive(Copy, Clone, Debug)]\n+pub struct TyLayout<'a, Ty> {\n+    pub ty: Ty,\n+    pub details: &'a LayoutDetails\n+}\n+\n+impl<'a, Ty> Deref for TyLayout<'a, Ty> {\n+    type Target = &'a LayoutDetails;\n+    fn deref(&self) -> &&'a LayoutDetails {\n+        &self.details\n+    }\n+}\n+\n+pub trait LayoutOf {\n+    type Ty;\n+    type TyLayout;\n+\n+    fn layout_of(self, ty: Self::Ty) -> Self::TyLayout;\n+}\n+\n+pub trait TyLayoutMethods<'a, C: LayoutOf<Ty = Self>>: Sized {\n+    fn for_variant(this: TyLayout<'a, Self>, cx: C, variant_index: usize) -> TyLayout<'a, Self>;\n+    fn field(this: TyLayout<'a, Self>, cx: C, i: usize) -> C::TyLayout;\n+}\n+\n+impl<'a, Ty> TyLayout<'a, Ty> {\n+    pub fn for_variant<C>(self, cx: C, variant_index: usize) -> Self\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> {\n+        Ty::for_variant(self, cx, variant_index)\n+    }\n+    pub fn field<C>(self, cx: C, i: usize) -> C::TyLayout\n+    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> {\n+        Ty::field(self, cx, i)\n+    }\n+}\n+\n+impl<'a, Ty> TyLayout<'a, Ty> {\n+    /// Returns true if the layout corresponds to an unsized type.\n+    pub fn is_unsized(&self) -> bool {\n+        self.abi.is_unsized()\n+    }\n+\n+    /// Returns true if the type is a ZST and not unsized.\n+    pub fn is_zst(&self) -> bool {\n+        match self.abi {\n+            Abi::Uninhabited => true,\n+            Abi::Scalar(_) |\n+            Abi::ScalarPair(..) |\n+            Abi::Vector { .. } => false,\n+            Abi::Aggregate { sized } => sized && self.size.bytes() == 0\n+        }\n+    }\n+\n+    pub fn size_and_align(&self) -> (Size, Align) {\n+        (self.size, self.align)\n+    }\n+}"}, {"sha": "6f6fde1e9e7786155aad5f994a3b14b220f4b469", "filename": "src/librustc_target/build.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fbuild.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "previous_filename": "src/librustc_back/build.rs"}, {"sha": "8f4911574398ba84d2f6874f334e371d8e93666f", "filename": "src/librustc_target/lib.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Some stuff used by rustc that doesn't have many dependencies\n+//!\n+//! Originally extracted from rustc::back, which was nominally the\n+//! compiler 'backend', though LLVM is rustc's backend, so rustc_target\n+//! is really just odds-and-ends relating to code gen and linking.\n+//! This crate mostly exists to make rustc smaller, so we might put\n+//! more 'stuff' here in the future.  It does not have a dependency on\n+//! rustc_llvm.\n+//!\n+//! FIXME: Split this into two crates: one that has deps on syntax, and\n+//! one that doesn't; the one that doesn't might get decent parallel\n+//! build speedups.\n+\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+\n+#![feature(box_syntax)]\n+#![feature(const_fn)]\n+#![feature(fs_read_write)]\n+#![feature(inclusive_range)]\n+#![feature(slice_patterns)]\n+\n+#[macro_use]\n+extern crate bitflags;\n+extern crate serialize;\n+#[macro_use] extern crate log;\n+\n+extern crate serialize as rustc_serialize; // used by deriving\n+\n+// See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_cratesio_shim;\n+\n+pub mod abi;\n+pub mod spec;"}, {"sha": "90f8cd90c66ec576ead4159b2899c0e3984d5bc0", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {", "previous_filename": "src/librustc_back/target/aarch64_apple_ios.rs"}, {"sha": "afd67112f0d6acbf39eacd285bc255cbf12ad395", "filename": "src/librustc_target/spec/aarch64_linux_android.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_linux_android.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#arm64-v8a\n // for target ABI requirements.", "previous_filename": "src/librustc_back/target/aarch64_linux_android.rs"}, {"sha": "ffdb7decd0b472f787ffa6f7b462959da6617448", "filename": "src/librustc_target/spec/aarch64_unknown_cloudabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();", "previous_filename": "src/librustc_back/target/aarch64_unknown_cloudabi.rs"}, {"sha": "48177b8c79aedbfaf14f271d5729f5cdc6c33edf", "filename": "src/librustc_target/spec/aarch64_unknown_freebsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();", "previous_filename": "src/librustc_back/target/aarch64_unknown_freebsd.rs"}, {"sha": "4da6724ef628698a9a1103190cecf9b3c1f79bfe", "filename": "src/librustc_target/spec/aarch64_unknown_fuchsia.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_fuchsia.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::fuchsia_base::opts();", "previous_filename": "src/librustc_back/target/aarch64_unknown_fuchsia.rs"}, {"sha": "2351d01469215499afd996d4ecfdd1ea9cd536b0", "filename": "src/librustc_target/spec/aarch64_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs"}, {"sha": "5ab55a076f45b255f0009ab8412032744b2b54cf", "filename": "src/librustc_target/spec/aarch64_unknown_linux_musl.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/aarch64_unknown_linux_musl.rs"}, {"sha": "ed2eb209906958a079fef8d48f6b85965a8f7a32", "filename": "src/librustc_target/spec/abi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "previous_filename": "src/libsyntax/abi.rs"}, {"sha": "7e27e8aa9a76b8bceda337f7dd9c4b4f5b7ee92e", "filename": "src/librustc_target/spec/android_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fandroid_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::TargetOptions;\n+use spec::{LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/android_base.rs"}, {"sha": "4b66891e36f8c9975c11d406fe0f0fbd9b1dfb13", "filename": "src/librustc_target/spec/apple_base.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,7 +10,7 @@\n \n use std::env;\n \n-use target::{LinkArgs, TargetOptions};\n+use spec::{LinkArgs, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6", "previous_filename": "src/librustc_back/target/apple_base.rs"}, {"sha": "acbbab313fe593da6b77d0b164ad07cad2944348", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n use std::io;\n use std::process::Command;\n-use target::{LinkArgs, TargetOptions};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions};\n \n use self::Arch::*;\n ", "previous_filename": "src/librustc_back/target/apple_ios_base.rs"}, {"sha": "635b8ae7388fee5c990c8d8a7abc7df36da549a1", "filename": "src/librustc_target/spec/arm_base.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::abi::Abi;\n+use spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n pub fn abi_blacklist() -> Vec<Abi> {", "previous_filename": "src/librustc_back/target/arm_base.rs"}, {"sha": "ffd242b2bc20ea99055bdbf705bd2f6b8e3b0b3d", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();", "previous_filename": "src/librustc_back/target/arm_linux_androideabi.rs"}, {"sha": "c67a25e8bc27540c190f10bb7993891c312fd640", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs"}, {"sha": "ed0049a932e92ddfccac21f8170e8f9c94af5731", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabihf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs"}, {"sha": "c34093fbab91266526e1eb2b48fcc1bd5fdb222b", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/arm_unknown_linux_musleabi.rs"}, {"sha": "967873b3201b509518bf1c896d8933ea81f4c107", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabihf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/arm_unknown_linux_musleabihf.rs"}, {"sha": "fb99dffeddd691a9ba24cffa9a8c8150684e8cfc", "filename": "src/librustc_target/spec/armv4t_unknown_linux_gnueabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/armv4t_unknown_linux_gnueabi.rs"}, {"sha": "810f091247224acc0ddb9c166cb9b989c0ab866a", "filename": "src/librustc_target/spec/armv5te_unknown_linux_gnueabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/armv5te_unknown_linux_gnueabi.rs"}, {"sha": "da7cbb918bd717a6535accfd53381ac62591cafc", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {", "previous_filename": "src/librustc_back/target/armv7_apple_ios.rs"}, {"sha": "cfdc5cddcfb308361f4c1bf50d77b7a95cbf7ad9", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#v7a\n // for target ABI requirements.", "previous_filename": "src/librustc_back/target/armv7_linux_androideabi.rs"}, {"sha": "393c45e434e616f44d7c1bb9558f54a975d94aaf", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();", "previous_filename": "src/librustc_back/target/armv7_unknown_cloudabi_eabihf.rs"}, {"sha": "14e8fa9dc02a475c410310ffde80d9963e96261e", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/armv7_unknown_linux_gnueabihf.rs"}, {"sha": "6e71cb307b99743b69945f413a759da37f2c5012", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs"}, {"sha": "c0c577c3b8c6c1a204b768045bb2b7be1055957e", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {", "previous_filename": "src/librustc_back/target/armv7s_apple_ios.rs"}, {"sha": "e2cf714f0ead307175ee91bdee7762c53c119b64", "filename": "src/librustc_target/spec/asmjs_unknown_emscripten.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use super::{LinkArgs, Target, TargetOptions};\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let mut args = LinkArgs::new();", "previous_filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs"}, {"sha": "e0cbfcdcef07c8b86c6f5598f099d80f3a60f60a", "filename": "src/librustc_target/spec/bitrig_base.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fbitrig_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{TargetOptions, RelroLevel};\n+use spec::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/bitrig_base.rs"}, {"sha": "2ffa74e737fd5244e664dfa9c3b98b2bce67c511", "filename": "src/librustc_target/spec/cloudabi_base.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions, RelroLevel};\n-use std::default::Default;\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();", "previous_filename": "src/librustc_back/target/cloudabi_base.rs"}, {"sha": "32eac8663afac78f84b975b55884a3705368cfca", "filename": "src/librustc_target/spec/dragonfly_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fdragonfly_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions, RelroLevel};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/dragonfly_base.rs"}, {"sha": "04b8a6e706064f1a570364528e076e686a74dc46", "filename": "src/librustc_target/spec/freebsd_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffreebsd_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions, RelroLevel};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/freebsd_base.rs"}, {"sha": "19a66b693f25614101e128818d5be07524a2869d", "filename": "src/librustc_target/spec/fuchsia_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/fuchsia_base.rs"}, {"sha": "bf62b49f9141bd0cd068546347d7a94e0cca6426", "filename": "src/librustc_target/spec/haiku_base.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhaiku_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{TargetOptions, RelroLevel};\n+use spec::{TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/haiku_base.rs"}, {"sha": "9eb0327f625ccde7aa9b955d12426244113a6938", "filename": "src/librustc_target/spec/i386_apple_ios.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {", "previous_filename": "src/librustc_back/target/i386_apple_ios.rs"}, {"sha": "9a20b854e0f41c099c813968d7267b121d2894bb", "filename": "src/librustc_target/spec/i586_pc_windows_msvc.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_pc_windows_msvc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetResult;\n+use spec::TargetResult;\n \n pub fn target() -> TargetResult {\n     let mut base = super::i686_pc_windows_msvc::target()?;", "previous_filename": "src/librustc_back/target/i586_pc_windows_msvc.rs"}, {"sha": "35bca76af47df8506b880a79d47b82e35c0f728d", "filename": "src/librustc_target/spec/i586_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetResult;\n+use spec::TargetResult;\n \n pub fn target() -> TargetResult {\n     let mut base = super::i686_unknown_linux_gnu::target()?;", "previous_filename": "src/librustc_back/target/i586_unknown_linux_gnu.rs"}, {"sha": "ba23e1d6860bd01a108e5e2c3cf52a400e53e3eb", "filename": "src/librustc_target/spec/i586_unknown_linux_musl.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi586_unknown_linux_musl.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetResult;\n+use spec::TargetResult;\n \n pub fn target() -> TargetResult {\n     let mut base = super::i686_unknown_linux_musl::target()?;", "previous_filename": "src/librustc_back/target/i586_unknown_linux_musl.rs"}, {"sha": "06ea1e4649b4240a5f7ff02cad19c9ac7075a170", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();", "previous_filename": "src/librustc_back/target/i686_apple_darwin.rs"}, {"sha": "171e08995954535c9a80286f469c03f20c21f845", "filename": "src/librustc_target/spec/i686_linux_android.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_linux_android.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n // See https://developer.android.com/ndk/guides/abis.html#x86\n // for target ABI requirements.", "previous_filename": "src/librustc_back/target/i686_linux_android.rs"}, {"sha": "867d04ec3f28bf4f9cc0993c7aada571add3796f", "filename": "src/librustc_target/spec/i686_pc_windows_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();", "previous_filename": "src/librustc_back/target/i686_pc_windows_gnu.rs"}, {"sha": "3570f379c3087541ef896f13a98d97d82dc99168", "filename": "src/librustc_target/spec/i686_pc_windows_msvc.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_pc_windows_msvc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();", "previous_filename": "src/librustc_back/target/i686_pc_windows_msvc.rs"}, {"sha": "335105bb1a869519f9aac1da780bc39a4a91858e", "filename": "src/librustc_target/spec/i686_unknown_cloudabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_cloudabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_cloudabi.rs"}, {"sha": "cb0c471353b307be6cadde616c2ffa243851a97c", "filename": "src/librustc_target/spec/i686_unknown_dragonfly.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_dragonfly.rs"}, {"sha": "3838a157d10b5f0bb6b7e5a74982e9bd38d1923d", "filename": "src/librustc_target/spec/i686_unknown_freebsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_freebsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_freebsd.rs"}, {"sha": "98f0787bebaf8e8a04358d8d3c373d811efa7260", "filename": "src/librustc_target/spec/i686_unknown_haiku.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_haiku.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::haiku_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_haiku.rs"}, {"sha": "c3ff347882da1a691c8bec7707ca56b8ceeb0c36", "filename": "src/librustc_target/spec/i686_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs"}, {"sha": "c02076c071a1d73ebbe9ed2f366afbe1402ee159", "filename": "src/librustc_target/spec/i686_unknown_linux_musl.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_linux_musl.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_linux_musl.rs"}, {"sha": "d60ed9885991d7f9dfaa663bc2fa2b3c2dbcf8cb", "filename": "src/librustc_target/spec/i686_unknown_netbsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_netbsd.rs"}, {"sha": "79c059c8f952d7884767a7c6eceaf8af396ac52c", "filename": "src/librustc_target/spec/i686_unknown_openbsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_openbsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();", "previous_filename": "src/librustc_back/target/i686_unknown_openbsd.rs"}, {"sha": "4ebc930d48b6fa2178ddb6e6c1ca22cc061fcb8c", "filename": "src/librustc_target/spec/l4re_base.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use PanicStrategy;\n-use target::{LinkArgs, TargetOptions};\n+use spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n use std::default::Default;\n //use std::process::Command;\n ", "previous_filename": "src/librustc_back/target/l4re_base.rs"}, {"sha": "4a9cd9e2f3233614e91537026f261ec275234c93", "filename": "src/librustc_target/spec/linux_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions, RelroLevel};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/linux_base.rs"}, {"sha": "293f23eab388317c4b5a5d0bdbd8f50ca3d2426a", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::TargetOptions;\n+use spec::{LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/linux_musl_base.rs"}, {"sha": "1f60d918908d019a63de628d96dbfaa59a569a47", "filename": "src/librustc_target/spec/mips64_unknown_linux_gnuabi64.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/mips64_unknown_linux_gnuabi64.rs"}, {"sha": "e42fde8d403fbcd4e37a8e0d8f1e91a92accbc63", "filename": "src/librustc_target/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/mips64el_unknown_linux_gnuabi64.rs"}, {"sha": "59e15137cf40d9e932bca7d3053b7d3b2eed5cd2", "filename": "src/librustc_target/spec/mips_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs"}, {"sha": "8ee399ba56c329534235c6968f7ce0a0826f29a7", "filename": "src/librustc_target/spec/mips_unknown_linux_musl.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/mips_unknown_linux_musl.rs"}, {"sha": "384ab1e413123cf164a6730f7252095f314e0847", "filename": "src/librustc_target/spec/mips_unknown_linux_uclibc.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/mips_unknown_linux_uclibc.rs"}, {"sha": "edd29164caca897677971d06f4ec8ecb9c4c3c8b", "filename": "src/librustc_target/spec/mipsel_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs"}, {"sha": "1d9378ca1b81407baf89bcb4694469a1f5b800c4", "filename": "src/librustc_target/spec/mipsel_unknown_linux_musl.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/mipsel_unknown_linux_musl.rs"}, {"sha": "a1db1791bb7ce6027f35f6bdf59e4b9cd63de7f7", "filename": "src/librustc_target/spec/mipsel_unknown_linux_uclibc.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/mipsel_unknown_linux_uclibc.rs"}, {"sha": "1e94f03788586c2fbeac7c3abd4a07f7e53adfa0", "filename": "src/librustc_target/spec/mod.rs", "status": "renamed", "additions": 140, "deletions": 3, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -49,10 +49,10 @@ use std::collections::BTreeMap;\n use std::default::Default;\n use std::{fmt, io};\n use std::path::{Path, PathBuf};\n-use syntax::abi::{Abi, lookup as lookup_abi};\n-\n-use {LinkerFlavor, PanicStrategy, RelroLevel};\n+use std::str::FromStr;\n+use spec::abi::{Abi, lookup as lookup_abi};\n \n+pub mod abi;\n mod android_base;\n mod apple_base;\n mod apple_ios_base;\n@@ -74,6 +74,133 @@ mod l4re_base;\n mod fuchsia_base;\n mod redox_base;\n \n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n+         RustcEncodable, RustcDecodable)]\n+pub enum LinkerFlavor {\n+    Em,\n+    Gcc,\n+    Ld,\n+    Msvc,\n+    Lld(LldFlavor),\n+}\n+\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n+         RustcEncodable, RustcDecodable)]\n+pub enum LldFlavor {\n+    Wasm,\n+    Ld64,\n+    Ld,\n+    Link,\n+}\n+\n+impl ToJson for LinkerFlavor {\n+    fn to_json(&self) -> Json {\n+        self.desc().to_json()\n+    }\n+}\n+macro_rules! flavor_mappings {\n+    ($((($($flavor:tt)*), $string:expr),)*) => (\n+        impl LinkerFlavor {\n+            pub const fn one_of() -> &'static str {\n+                concat!(\"one of: \", $($string, \" \",)+)\n+            }\n+\n+            pub fn from_str(s: &str) -> Option<Self> {\n+                Some(match s {\n+                    $($string => $($flavor)*,)+\n+                    _ => return None,\n+                })\n+            }\n+\n+            pub fn desc(&self) -> &str {\n+                match *self {\n+                    $($($flavor)* => $string,)+\n+                }\n+            }\n+        }\n+    )\n+}\n+\n+\n+flavor_mappings! {\n+    ((LinkerFlavor::Em), \"em\"),\n+    ((LinkerFlavor::Gcc), \"gcc\"),\n+    ((LinkerFlavor::Ld), \"ld\"),\n+    ((LinkerFlavor::Msvc), \"msvc\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum PanicStrategy {\n+    Unwind,\n+    Abort,\n+}\n+\n+impl PanicStrategy {\n+    pub fn desc(&self) -> &str {\n+        match *self {\n+            PanicStrategy::Unwind => \"unwind\",\n+            PanicStrategy::Abort => \"abort\",\n+        }\n+    }\n+}\n+\n+impl ToJson for PanicStrategy {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            PanicStrategy::Abort => \"abort\".to_json(),\n+            PanicStrategy::Unwind => \"unwind\".to_json(),\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum RelroLevel {\n+    Full,\n+    Partial,\n+    Off,\n+    None,\n+}\n+\n+impl RelroLevel {\n+    pub fn desc(&self) -> &str {\n+        match *self {\n+            RelroLevel::Full => \"full\",\n+            RelroLevel::Partial => \"partial\",\n+            RelroLevel::Off => \"off\",\n+            RelroLevel::None => \"none\",\n+        }\n+    }\n+}\n+\n+impl FromStr for RelroLevel {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<RelroLevel, ()> {\n+        match s {\n+            \"full\" => Ok(RelroLevel::Full),\n+            \"partial\" => Ok(RelroLevel::Partial),\n+            \"off\" => Ok(RelroLevel::Off),\n+            \"none\" => Ok(RelroLevel::None),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl ToJson for RelroLevel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            RelroLevel::Full => \"full\".to_json(),\n+            RelroLevel::Partial => \"partial\".to_json(),\n+            RelroLevel::Off => \"off\".to_json(),\n+            RelroLevel::None => \"None\".to_json(),\n+        }\n+    }\n+}\n+\n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n pub type TargetResult = Result<Target, String>;\n \n@@ -271,6 +398,16 @@ pub struct Target {\n     pub options: TargetOptions,\n }\n \n+pub trait HasTargetSpec: Copy {\n+    fn target_spec(&self) -> &Target;\n+}\n+\n+impl<'a> HasTargetSpec for &'a Target {\n+    fn target_spec(&self) -> &Target {\n+        self\n+    }\n+}\n+\n /// Optional aspects of a target specification.\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,", "previous_filename": "src/librustc_back/target/mod.rs"}, {"sha": "ce42a908b0e431525d91e199722f06dc1d4c353c", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use {LinkerFlavor, PanicStrategy};\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/msp430_none_elf.rs"}, {"sha": "8b6bb5dec9138f9fe469c157f2b6bf5697dd2d7e", "filename": "src/librustc_target/spec/netbsd_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnetbsd_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions, RelroLevel};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/netbsd_base.rs"}, {"sha": "90ab1135c54b0e57801208176461a968efa56949", "filename": "src/librustc_target/spec/openbsd_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fopenbsd_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions, RelroLevel};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions, RelroLevel};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/openbsd_base.rs"}, {"sha": "1959871161343aa656d32cfdd816f357f6ff619b", "filename": "src/librustc_target/spec/powerpc64_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult, RelroLevel};\n+use spec::{LinkerFlavor, Target, TargetResult, RelroLevel};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs"}, {"sha": "39840692dff188efd4e951f1681d87d1d989d7b6", "filename": "src/librustc_target/spec/powerpc64le_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs"}, {"sha": "c05b110a75d391e888c465d9d9ce74ec2709ab07", "filename": "src/librustc_target/spec/powerpc_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs"}, {"sha": "c76c3119c87c5deab3f7b39477472c102df01f0b", "filename": "src/librustc_target/spec/powerpc_unknown_linux_gnuspe.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/powerpc_unknown_linux_gnuspe.rs"}, {"sha": "c05e40b9c25d7253ad12b545a1c3912dccffd551", "filename": "src/librustc_target/spec/powerpc_unknown_netbsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();", "previous_filename": "src/librustc_back/target/powerpc_unknown_netbsd.rs"}, {"sha": "c28746a9363594e45e4891a3fe1a35a3c5884057", "filename": "src/librustc_target/spec/redox_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fredox_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/redox_base.rs"}, {"sha": "c9a9625ebab95b59d85e99ca711589f525dc9f17", "filename": "src/librustc_target/spec/s390x_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/s390x_unknown_linux_gnu.rs"}, {"sha": "c14cc3f5bc3befd3420d50edcf9d531807271e97", "filename": "src/librustc_target/spec/solaris_base.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsolaris_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::TargetOptions;\n+use spec::TargetOptions;\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/solaris_base.rs"}, {"sha": "f68b5fd24bf755dd128cc1ce49b374600e97525c", "filename": "src/librustc_target/spec/sparc64_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/sparc64_unknown_linux_gnu.rs"}, {"sha": "1c1bca9b2b87923baa2297e25f97cf11dcbfc472", "filename": "src/librustc_target/spec/sparc64_unknown_netbsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();", "previous_filename": "src/librustc_back/target/sparc64_unknown_netbsd.rs"}, {"sha": "4e352374f90b064a9132f1b1036f16084d2a29ec", "filename": "src/librustc_target/spec/sparc_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/sparc_unknown_linux_gnu.rs"}, {"sha": "7dea1b75a3c582848684c8afeca09f715cba49b0", "filename": "src/librustc_target/spec/sparcv9_sun_solaris.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::solaris_base::opts();", "previous_filename": "src/librustc_back/target/sparcv9_sun_solaris.rs"}, {"sha": "fdaf1dc6110b5b539741ceeb3641c9174f3d4d44", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -35,9 +35,8 @@\n // differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n // build scripts / gcc flags.\n \n-use PanicStrategy;\n use std::default::Default;\n-use target::TargetOptions;\n+use spec::{PanicStrategy, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults", "previous_filename": "src/librustc_back/target/thumb_base.rs"}, {"sha": "9fea07c36f4ef7be17075a65e03d8a267e405b06", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,8 +10,7 @@\n \n // Targets the Cortex-M0, Cortex-M0+ and Cortex-M1 processors (ARMv6-M architecture)\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/thumbv6m_none_eabi.rs"}, {"sha": "ab85c97b1b5ba07bae4fb84d6fe4b7e29e168dac", "filename": "src/librustc_target/spec/thumbv7em_none_eabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -19,8 +19,7 @@\n // To opt-in to hardware accelerated floating point operations, you can use, for example,\n // `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/thumbv7em_none_eabi.rs"}, {"sha": "4e62f29134edf7e721f1ce546f3dec4e77c51af2", "filename": "src/librustc_target/spec/thumbv7em_none_eabihf.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -18,8 +18,7 @@\n //\n // To opt into double precision hardware support, use the `-C target-feature=-fp-only-sp` flag.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/thumbv7em_none_eabihf.rs"}, {"sha": "10dc503388afe610bd3c77e9a12b5d8f2926dcfd", "filename": "src/librustc_target/spec/thumbv7m_none_eabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,8 +10,7 @@\n \n // Targets the Cortex-M3 processor (ARMv7-M)\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {", "previous_filename": "src/librustc_back/target/thumbv7m_none_eabi.rs"}, {"sha": "164df20f84f344841f8e54a8ef58d645bdf625b7", "filename": "src/librustc_target/spec/wasm32_experimental_emscripten.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use super::{LinkArgs, Target, TargetOptions};\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let mut post_link_args = LinkArgs::new();", "previous_filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs"}, {"sha": "5077abf1e0eb37b3bb95b2308f21cca0b3d5d53c", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use super::{LinkArgs, Target, TargetOptions};\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let mut post_link_args = LinkArgs::new();", "previous_filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs"}, {"sha": "56170bbb869f31e8d3cec75b7e072ae8976fde6d", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -17,8 +17,7 @@\n // (aka panic=abort by default), but otherwise this is in general a relatively\n // standard target.\n \n-use {LinkerFlavor, LldFlavor};\n-use super::{Target, TargetOptions, PanicStrategy};\n+use super::{LldFlavor, LinkerFlavor, Target, TargetOptions, PanicStrategy};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {", "previous_filename": "src/librustc_back/target/wasm32_unknown_unknown.rs"}, {"sha": "176df9f13253d4a59c0cda4d6d0ac6830848a0b6", "filename": "src/librustc_target/spec/windows_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/windows_base.rs"}, {"sha": "1f00e690cd3520f71c7feaed28cd5e685ba20a24", "filename": "src/librustc_target/spec/windows_msvc_base.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_msvc_base.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{LinkArgs, TargetOptions};\n+use spec::{LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {", "previous_filename": "src/librustc_back/target/windows_msvc_base.rs"}, {"sha": "a4efd7e0066ff6de14fdc80615ccd97b18277280", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_apple_darwin.rs"}, {"sha": "eeb53d72fe8a3f78b6f8eb086595ba35404d1c73", "filename": "src/librustc_target/spec/x86_64_apple_ios.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetOptions, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> TargetResult {", "previous_filename": "src/librustc_back/target/x86_64_apple_ios.rs"}, {"sha": "06abe916784dc5625bea03d6d891b37b9e2905f4", "filename": "src/librustc_target/spec/x86_64_linux_android.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_android.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_linux_android.rs"}, {"sha": "8d2f702bc4a0f7c9fc6a3c046de9147e0d35ce29", "filename": "src/librustc_target/spec/x86_64_pc_windows_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs"}, {"sha": "ab610ea94ae897ca769e1e770befb37292aa89d4", "filename": "src/librustc_target/spec/x86_64_pc_windows_msvc.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_pc_windows_msvc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs"}, {"sha": "ed15cfd9036f5c7b9362c4f4d77b7fa3bb519cc6", "filename": "src/librustc_target/spec/x86_64_rumprun_netbsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs"}, {"sha": "e84f21c500664da2b9b1d661f2211733152b703e", "filename": "src/librustc_target/spec/x86_64_sun_solaris.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_sun_solaris.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::solaris_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_sun_solaris.rs"}, {"sha": "21ec6dffcbbce6248d767b3202743b78b57ca154", "filename": "src/librustc_target/spec/x86_64_unknown_bitrig.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_bitrig.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::bitrig_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs"}, {"sha": "8dc8bd7a7fad914dbe1949eabc66222ca1325486", "filename": "src/librustc_target/spec/x86_64_unknown_cloudabi.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_cloudabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_cloudabi.rs"}, {"sha": "50b2871c2ee9c986f383d391fd5404fc8379b206", "filename": "src/librustc_target/spec/x86_64_unknown_dragonfly.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs"}, {"sha": "f0aa81ed4598b2b8acd6ac4281e821bf41773326", "filename": "src/librustc_target/spec/x86_64_unknown_freebsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs"}, {"sha": "a510ec8eb34264842a0796b83c8caf66985067db", "filename": "src/librustc_target/spec/x86_64_unknown_fuchsia.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_fuchsia.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::fuchsia_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_fuchsia.rs"}, {"sha": "1e78461861a95f3d6bf4514d1fb19c03ba064b22", "filename": "src/librustc_target/spec/x86_64_unknown_haiku.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_haiku.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::haiku_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_haiku.rs"}, {"sha": "f1179c18294d3449cd4ee2db7d0cb2bcd3ef6bfe", "filename": "src/librustc_target/spec/x86_64_unknown_l4re_uclibc.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::l4re_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_l4re_uclibc.rs"}, {"sha": "56559661b03cbddfcdd5517290198b74b4fb61e9", "filename": "src/librustc_target/spec/x86_64_unknown_linux_gnu.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs"}, {"sha": "72b5bd27c7dfe3b35f1069e0fdb87362bd87eb3f", "filename": "src/librustc_target/spec/x86_64_unknown_linux_gnux32.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_linux_gnux32.rs"}, {"sha": "f1924efcf98b56e104cf764f7f74ac48b11d6b10", "filename": "src/librustc_target/spec/x86_64_unknown_linux_musl.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs"}, {"sha": "6e8ca6b9e19914be97a9f27341a9198f83adf8e8", "filename": "src/librustc_target/spec/x86_64_unknown_netbsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs"}, {"sha": "c60b7c86680f810987cbb1ff2e2f0ff62bfa51ee", "filename": "src/librustc_target/spec/x86_64_unknown_openbsd.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs"}, {"sha": "548dfb06109ff41bee2432799fe9ccd9e4225aa7", "filename": "src/librustc_target/spec/x86_64_unknown_redox.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_redox.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use LinkerFlavor;\n-use target::{Target, TargetResult};\n+use spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::redox_base::opts();", "previous_filename": "src/librustc_back/target/x86_64_unknown_redox.rs"}, {"sha": "32432d6cc835de89d17b6441fa935e3ac9795df2", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,7 +10,6 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-bitflags = \"1.0\"\n cc = \"1.0.1\"\n flate2 = \"1.0\"\n jobserver = \"0.1.5\"\n@@ -21,7 +20,7 @@ rustc = { path = \"../librustc\" }\n rustc-demangle = \"0.1.4\"\n rustc_allocator = { path = \"../librustc_allocator\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n-rustc_back = { path = \"../librustc_back\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n@@ -40,9 +39,9 @@ tempdir = \"0.3\"\n env_logger = { version = \"0.5\", default-features = false }\n \n [features]\n-# Used to communicate the feature to `rustc_back` in the same manner that the\n+# Used to communicate the feature to `rustc_target` in the same manner that the\n # `rustc` driver script communicate this.\n-jemalloc = [\"rustc_back/jemalloc\"]\n+jemalloc = [\"rustc_target/jemalloc\"]\n \n # This is used to convince Cargo to separately cache builds of `rustc_trans`\n # when this option is enabled or not. That way we can build two, cache two"}, {"sha": "483f36afe27d66e1f0b761166fda0edae03d68f6", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 98, "deletions": 499, "changes": 597, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,119 +13,45 @@ use base;\n use builder::Builder;\n use common::{ty_fn_sig, C_usize};\n use context::CodegenCx;\n-use cabi_x86;\n-use cabi_x86_64;\n-use cabi_x86_win64;\n-use cabi_arm;\n-use cabi_aarch64;\n-use cabi_powerpc;\n-use cabi_powerpc64;\n-use cabi_s390x;\n-use cabi_mips;\n-use cabi_mips64;\n-use cabi_asmjs;\n-use cabi_msp430;\n-use cabi_sparc;\n-use cabi_sparc64;\n-use cabi_nvptx;\n-use cabi_nvptx64;\n-use cabi_hexagon;\n-use cabi_wasm32;\n use mir::place::PlaceRef;\n use mir::operand::OperandValue;\n use type_::Type;\n use type_of::{LayoutLlvmExt, PointerKind};\n \n+use rustc_target::abi::{LayoutOf, Size, TyLayout};\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, Align, Size, TyLayout};\n-use rustc::ty::layout::{HasDataLayout, LayoutOf};\n+use rustc::ty::layout;\n \n use libc::c_uint;\n-use std::cmp;\n \n-pub use syntax::abi::Abi;\n+pub use rustc_target::spec::abi::Abi;\n pub use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n-\n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n-pub enum PassMode {\n-    /// Ignore the argument (useful for empty struct).\n-    Ignore,\n-    /// Pass the argument directly.\n-    Direct(ArgAttributes),\n-    /// Pass a pair's elements directly in two arguments.\n-    Pair(ArgAttributes, ArgAttributes),\n-    /// Pass the argument after casting it, to either\n-    /// a single uniform or a pair of registers.\n-    Cast(CastTarget),\n-    /// Pass the argument indirectly via a hidden pointer.\n-    Indirect(ArgAttributes),\n-}\n-\n-// Hack to disable non_upper_case_globals only for the bitflags! and not for the rest\n-// of this module\n-pub use self::attr_impl::ArgAttribute;\n-\n-#[allow(non_upper_case_globals)]\n-#[allow(unused)]\n-mod attr_impl {\n-    // The subset of llvm::Attribute needed for arguments, packed into a bitfield.\n-    bitflags! {\n-        #[derive(Default)]\n-        pub struct ArgAttribute: u16 {\n-            const ByVal     = 1 << 0;\n-            const NoAlias   = 1 << 1;\n-            const NoCapture = 1 << 2;\n-            const NonNull   = 1 << 3;\n-            const ReadOnly  = 1 << 4;\n-            const SExt      = 1 << 5;\n-            const StructRet = 1 << 6;\n-            const ZExt      = 1 << 7;\n-            const InReg     = 1 << 8;\n-        }\n-    }\n-}\n+pub use rustc_target::abi::call::*;\n \n macro_rules! for_each_kind {\n     ($flags: ident, $f: ident, $($kind: ident),+) => ({\n         $(if $flags.contains(ArgAttribute::$kind) { $f(llvm::Attribute::$kind) })+\n     })\n }\n \n-impl ArgAttribute {\n+trait ArgAttributeExt {\n+    fn for_each_kind<F>(&self, f: F) where F: FnMut(llvm::Attribute);\n+}\n+\n+impl ArgAttributeExt for ArgAttribute {\n     fn for_each_kind<F>(&self, mut f: F) where F: FnMut(llvm::Attribute) {\n         for_each_kind!(self, f,\n                        ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n     }\n }\n \n-/// A compact representation of LLVM attributes (at least those relevant for this module)\n-/// that can be manipulated without interacting with LLVM's Attribute machinery.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub struct ArgAttributes {\n-    regular: ArgAttribute,\n-    pointee_size: Size,\n-    pointee_align: Option<Align>\n+pub trait ArgAttributesExt {\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef);\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: ValueRef);\n }\n \n-impl ArgAttributes {\n-    fn new() -> Self {\n-        ArgAttributes {\n-            regular: ArgAttribute::default(),\n-            pointee_size: Size::from_bytes(0),\n-            pointee_align: None,\n-        }\n-    }\n-\n-    pub fn set(&mut self, attr: ArgAttribute) -> &mut Self {\n-        self.regular = self.regular | attr;\n-        self\n-    }\n-\n-    pub fn contains(&self, attr: ArgAttribute) -> bool {\n-        self.regular.contains(attr)\n-    }\n-\n-    pub fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {\n+impl ArgAttributesExt for ArgAttributes {\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -150,7 +76,7 @@ impl ArgAttributes {\n         }\n     }\n \n-    pub fn apply_callsite(&self, idx: AttributePlace, callsite: ValueRef) {\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: ValueRef) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -175,67 +101,13 @@ impl ArgAttributes {\n         }\n     }\n }\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub enum RegKind {\n-    Integer,\n-    Float,\n-    Vector\n-}\n-\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub struct Reg {\n-    pub kind: RegKind,\n-    pub size: Size,\n-}\n-\n-macro_rules! reg_ctor {\n-    ($name:ident, $kind:ident, $bits:expr) => {\n-        pub fn $name() -> Reg {\n-            Reg {\n-                kind: RegKind::$kind,\n-                size: Size::from_bits($bits)\n-            }\n-        }\n-    }\n-}\n-\n-impl Reg {\n-    reg_ctor!(i8, Integer, 8);\n-    reg_ctor!(i16, Integer, 16);\n-    reg_ctor!(i32, Integer, 32);\n-    reg_ctor!(i64, Integer, 64);\n \n-    reg_ctor!(f32, Float, 32);\n-    reg_ctor!(f64, Float, 64);\n+pub trait LlvmType {\n+    fn llvm_type(&self, cx: &CodegenCx) -> Type;\n }\n \n-impl Reg {\n-    pub fn align(&self, cx: &CodegenCx) -> Align {\n-        let dl = cx.data_layout();\n-        match self.kind {\n-            RegKind::Integer => {\n-                match self.size.bits() {\n-                    1 => dl.i1_align,\n-                    2...8 => dl.i8_align,\n-                    9...16 => dl.i16_align,\n-                    17...32 => dl.i32_align,\n-                    33...64 => dl.i64_align,\n-                    65...128 => dl.i128_align,\n-                    _ => bug!(\"unsupported integer: {:?}\", self)\n-                }\n-            }\n-            RegKind::Float => {\n-                match self.size.bits() {\n-                    32 => dl.f32_align,\n-                    64 => dl.f64_align,\n-                    _ => bug!(\"unsupported float: {:?}\", self)\n-                }\n-            }\n-            RegKind::Vector => dl.vector_align(self.size)\n-        }\n-    }\n-\n-    pub fn llvm_type(&self, cx: &CodegenCx) -> Type {\n+impl LlvmType for Reg {\n+    fn llvm_type(&self, cx: &CodegenCx) -> Type {\n         match self.kind {\n             RegKind::Integer => Type::ix(cx, self.size.bits()),\n             RegKind::Float => {\n@@ -252,180 +124,8 @@ impl Reg {\n     }\n }\n \n-/// An argument passed entirely registers with the\n-/// same kind (e.g. HFA / HVA on PPC64 and AArch64).\n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n-pub struct Uniform {\n-    pub unit: Reg,\n-\n-    /// The total size of the argument, which can be:\n-    /// * equal to `unit.size` (one scalar/vector)\n-    /// * a multiple of `unit.size` (an array of scalar/vectors)\n-    /// * if `unit.kind` is `Integer`, the last element\n-    ///   can be shorter, i.e. `{ i64, i64, i32 }` for\n-    ///   64-bit integers with a total size of 20 bytes\n-    pub total: Size,\n-}\n-\n-impl From<Reg> for Uniform {\n-    fn from(unit: Reg) -> Uniform {\n-        Uniform {\n-            unit,\n-            total: unit.size\n-        }\n-    }\n-}\n-\n-impl Uniform {\n-    pub fn align(&self, cx: &CodegenCx) -> Align {\n-        self.unit.align(cx)\n-    }\n-}\n-\n-pub trait LayoutExt<'tcx> {\n-    fn is_aggregate(&self) -> bool;\n-    fn homogeneous_aggregate<'a>(&self, cx: &CodegenCx<'a, 'tcx>) -> Option<Reg>;\n-}\n-\n-impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n-    fn is_aggregate(&self) -> bool {\n-        match self.abi {\n-            layout::Abi::Uninhabited |\n-            layout::Abi::Scalar(_) |\n-            layout::Abi::Vector { .. } => false,\n-            layout::Abi::ScalarPair(..) |\n-            layout::Abi::Aggregate { .. } => true\n-        }\n-    }\n-\n-    fn homogeneous_aggregate<'a>(&self, cx: &CodegenCx<'a, 'tcx>) -> Option<Reg> {\n-        match self.abi {\n-            layout::Abi::Uninhabited => None,\n-\n-            // The primitive for this algorithm.\n-            layout::Abi::Scalar(ref scalar) => {\n-                let kind = match scalar.value {\n-                    layout::Int(..) |\n-                    layout::Pointer => RegKind::Integer,\n-                    layout::F32 |\n-                    layout::F64 => RegKind::Float\n-                };\n-                Some(Reg {\n-                    kind,\n-                    size: self.size\n-                })\n-            }\n-\n-            layout::Abi::Vector { .. } => {\n-                Some(Reg {\n-                    kind: RegKind::Vector,\n-                    size: self.size\n-                })\n-            }\n-\n-            layout::Abi::ScalarPair(..) |\n-            layout::Abi::Aggregate { .. } => {\n-                let mut total = Size::from_bytes(0);\n-                let mut result = None;\n-\n-                let is_union = match self.fields {\n-                    layout::FieldPlacement::Array { count, .. } => {\n-                        if count > 0 {\n-                            return self.field(cx, 0).homogeneous_aggregate(cx);\n-                        } else {\n-                            return None;\n-                        }\n-                    }\n-                    layout::FieldPlacement::Union(_) => true,\n-                    layout::FieldPlacement::Arbitrary { .. } => false\n-                };\n-\n-                for i in 0..self.fields.count() {\n-                    if !is_union && total != self.fields.offset(i) {\n-                        return None;\n-                    }\n-\n-                    let field = self.field(cx, i);\n-                    match (result, field.homogeneous_aggregate(cx)) {\n-                        // The field itself must be a homogeneous aggregate.\n-                        (_, None) => return None,\n-                        // If this is the first field, record the unit.\n-                        (None, Some(unit)) => {\n-                            result = Some(unit);\n-                        }\n-                        // For all following fields, the unit must be the same.\n-                        (Some(prev_unit), Some(unit)) => {\n-                            if prev_unit != unit {\n-                                return None;\n-                            }\n-                        }\n-                    }\n-\n-                    // Keep track of the offset (without padding).\n-                    let size = field.size;\n-                    if is_union {\n-                        total = cmp::max(total, size);\n-                    } else {\n-                        total += size;\n-                    }\n-                }\n-\n-                // There needs to be no padding.\n-                if total != self.size {\n-                    None\n-                } else {\n-                    result\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n-pub struct CastTarget {\n-    pub prefix: [Option<RegKind>; 8],\n-    pub prefix_chunk: Size,\n-    pub rest: Uniform,\n-}\n-\n-impl From<Reg> for CastTarget {\n-    fn from(unit: Reg) -> CastTarget {\n-        CastTarget::from(Uniform::from(unit))\n-    }\n-}\n-\n-impl From<Uniform> for CastTarget {\n-    fn from(uniform: Uniform) -> CastTarget {\n-        CastTarget {\n-            prefix: [None; 8],\n-            prefix_chunk: Size::from_bytes(0),\n-            rest: uniform\n-        }\n-    }\n-}\n-\n-impl CastTarget {\n-    pub fn pair(a: Reg, b: Reg) -> CastTarget {\n-        CastTarget {\n-            prefix: [Some(a.kind), None, None, None, None, None, None, None],\n-            prefix_chunk: a.size,\n-            rest: Uniform::from(b)\n-        }\n-    }\n-\n-    pub fn size(&self, cx: &CodegenCx) -> Size {\n-        (self.prefix_chunk * self.prefix.iter().filter(|x| x.is_some()).count() as u64)\n-            .abi_align(self.rest.align(cx)) + self.rest.total\n-    }\n-\n-    pub fn align(&self, cx: &CodegenCx) -> Align {\n-        self.prefix.iter()\n-            .filter_map(|x| x.map(|kind| Reg { kind: kind, size: self.prefix_chunk }.align(cx)))\n-            .fold(cx.data_layout().aggregate_align.max(self.rest.align(cx)),\n-                |acc, align| acc.max(align))\n-    }\n-\n-    pub fn llvm_type(&self, cx: &CodegenCx) -> Type {\n+impl LlvmType for CastTarget {\n+    fn llvm_type(&self, cx: &CodegenCx) -> Type {\n         let rest_ll_unit = self.rest.unit.llvm_type(cx);\n         let rest_count = self.rest.total.bytes() / self.rest.unit.size.bytes();\n         let rem_bytes = self.rest.total.bytes() % self.rest.unit.size.bytes();\n@@ -460,105 +160,24 @@ impl CastTarget {\n     }\n }\n \n-/// Information about how to pass an argument to,\n-/// or return a value from, a function, under some ABI.\n-#[derive(Debug)]\n-pub struct ArgType<'tcx> {\n-    pub layout: TyLayout<'tcx>,\n-\n-    /// Dummy argument, which is emitted before the real argument.\n-    pub pad: Option<Reg>,\n-\n-    pub mode: PassMode,\n+pub trait ArgTypeExt<'a, 'tcx> {\n+    fn memory_ty(&self, cx: &CodegenCx<'a, 'tcx>) -> Type;\n+    fn store(&self, bx: &Builder<'a, 'tcx>, val: ValueRef, dst: PlaceRef<'tcx>);\n+    fn store_fn_arg(&self, bx: &Builder<'a, 'tcx>, idx: &mut usize, dst: PlaceRef<'tcx>);\n }\n \n-impl<'a, 'tcx> ArgType<'tcx> {\n-    fn new(layout: TyLayout<'tcx>) -> ArgType<'tcx> {\n-        ArgType {\n-            layout,\n-            pad: None,\n-            mode: PassMode::Direct(ArgAttributes::new()),\n-        }\n-    }\n-\n-    pub fn make_indirect(&mut self) {\n-        assert_eq!(self.mode, PassMode::Direct(ArgAttributes::new()));\n-\n-        // Start with fresh attributes for the pointer.\n-        let mut attrs = ArgAttributes::new();\n-\n-        // For non-immediate arguments the callee gets its own copy of\n-        // the value on the stack, so there are no aliases. It's also\n-        // program-invisible so can't possibly capture\n-        attrs.set(ArgAttribute::NoAlias)\n-             .set(ArgAttribute::NoCapture)\n-             .set(ArgAttribute::NonNull);\n-        attrs.pointee_size = self.layout.size;\n-        // FIXME(eddyb) We should be doing this, but at least on\n-        // i686-pc-windows-msvc, it results in wrong stack offsets.\n-        // attrs.pointee_align = Some(self.layout.align);\n-\n-        self.mode = PassMode::Indirect(attrs);\n-    }\n-\n-    pub fn make_indirect_byval(&mut self) {\n-        self.make_indirect();\n-        match self.mode {\n-            PassMode::Indirect(ref mut attrs) => {\n-                attrs.set(ArgAttribute::ByVal);\n-            }\n-            _ => bug!()\n-        }\n-    }\n-\n-    pub fn extend_integer_width_to(&mut self, bits: u64) {\n-        // Only integers have signedness\n-        if let layout::Abi::Scalar(ref scalar) = self.layout.abi {\n-            if let layout::Int(i, signed) = scalar.value {\n-                if i.size().bits() < bits {\n-                    if let PassMode::Direct(ref mut attrs) = self.mode {\n-                        attrs.set(if signed {\n-                            ArgAttribute::SExt\n-                        } else {\n-                            ArgAttribute::ZExt\n-                        });\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    pub fn cast_to<T: Into<CastTarget>>(&mut self, target: T) {\n-        assert_eq!(self.mode, PassMode::Direct(ArgAttributes::new()));\n-        self.mode = PassMode::Cast(target.into());\n-    }\n-\n-    pub fn pad_with(&mut self, reg: Reg) {\n-        self.pad = Some(reg);\n-    }\n-\n-    pub fn is_indirect(&self) -> bool {\n-        match self.mode {\n-            PassMode::Indirect(_) => true,\n-            _ => false\n-        }\n-    }\n-\n-    pub fn is_ignore(&self) -> bool {\n-        self.mode == PassMode::Ignore\n-    }\n-\n+impl<'a, 'tcx> ArgTypeExt<'a, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n     /// Get the LLVM type for a place of the original Rust type of\n     /// this argument/return, i.e. the result of `type_of::type_of`.\n-    pub fn memory_ty(&self, cx: &CodegenCx<'a, 'tcx>) -> Type {\n+    fn memory_ty(&self, cx: &CodegenCx<'a, 'tcx>) -> Type {\n         self.layout.llvm_type(cx)\n     }\n \n     /// Store a direct/indirect value described by this ArgType into a\n     /// place for the original Rust type of this argument/return.\n     /// Can be used for both storing formal arguments into Rust variables\n     /// or results of call/invoke instructions into their destinations.\n-    pub fn store(&self, bx: &Builder<'a, 'tcx>, val: ValueRef, dst: PlaceRef<'tcx>) {\n+    fn store(&self, bx: &Builder<'a, 'tcx>, val: ValueRef, dst: PlaceRef<'tcx>) {\n         if self.is_ignore() {\n             return;\n         }\n@@ -610,7 +229,7 @@ impl<'a, 'tcx> ArgType<'tcx> {\n         }\n     }\n \n-    pub fn store_fn_arg(&self, bx: &Builder<'a, 'tcx>, idx: &mut usize, dst: PlaceRef<'tcx>) {\n+    fn store_fn_arg(&self, bx: &Builder<'a, 'tcx>, idx: &mut usize, dst: PlaceRef<'tcx>) {\n         let mut next = || {\n             let val = llvm::get_param(bx.llfn(), *idx as c_uint);\n             *idx += 1;\n@@ -628,44 +247,47 @@ impl<'a, 'tcx> ArgType<'tcx> {\n     }\n }\n \n-/// Metadata describing how the arguments to a native function\n-/// should be passed in order to respect the native ABI.\n-///\n-/// I will do my best to describe this structure, but these\n-/// comments are reverse-engineered and may be inaccurate. -NDM\n-#[derive(Debug)]\n-pub struct FnType<'tcx> {\n-    /// The LLVM types of each argument.\n-    pub args: Vec<ArgType<'tcx>>,\n-\n-    /// LLVM return type.\n-    pub ret: ArgType<'tcx>,\n-\n-    pub variadic: bool,\n-\n-    pub cconv: llvm::CallConv\n+pub trait FnTypeExt<'a, 'tcx> {\n+    fn of_instance(cx: &CodegenCx<'a, 'tcx>, instance: &ty::Instance<'tcx>)\n+                   -> Self;\n+    fn new(cx: &CodegenCx<'a, 'tcx>,\n+           sig: ty::FnSig<'tcx>,\n+           extra_args: &[Ty<'tcx>]) -> Self;\n+    fn new_vtable(cx: &CodegenCx<'a, 'tcx>,\n+                  sig: ty::FnSig<'tcx>,\n+                  extra_args: &[Ty<'tcx>]) -> Self;\n+    fn unadjusted(cx: &CodegenCx<'a, 'tcx>,\n+                  sig: ty::FnSig<'tcx>,\n+                  extra_args: &[Ty<'tcx>]) -> Self;\n+    fn adjust_for_abi(&mut self,\n+                      cx: &CodegenCx<'a, 'tcx>,\n+                      abi: Abi);\n+    fn llvm_type(&self, cx: &CodegenCx<'a, 'tcx>) -> Type;\n+    fn llvm_cconv(&self) -> llvm::CallConv;\n+    fn apply_attrs_llfn(&self, llfn: ValueRef);\n+    fn apply_attrs_callsite(&self, callsite: ValueRef);\n }\n \n-impl<'a, 'tcx> FnType<'tcx> {\n-    pub fn of_instance(cx: &CodegenCx<'a, 'tcx>, instance: &ty::Instance<'tcx>)\n+impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n+    fn of_instance(cx: &CodegenCx<'a, 'tcx>, instance: &ty::Instance<'tcx>)\n                        -> Self {\n         let fn_ty = instance.ty(cx.tcx);\n         let sig = ty_fn_sig(cx, fn_ty);\n         let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         FnType::new(cx, sig, &[])\n     }\n \n-    pub fn new(cx: &CodegenCx<'a, 'tcx>,\n+    fn new(cx: &CodegenCx<'a, 'tcx>,\n                sig: ty::FnSig<'tcx>,\n-               extra_args: &[Ty<'tcx>]) -> FnType<'tcx> {\n+               extra_args: &[Ty<'tcx>]) -> Self {\n         let mut fn_ty = FnType::unadjusted(cx, sig, extra_args);\n         fn_ty.adjust_for_abi(cx, sig.abi);\n         fn_ty\n     }\n \n-    pub fn new_vtable(cx: &CodegenCx<'a, 'tcx>,\n+    fn new_vtable(cx: &CodegenCx<'a, 'tcx>,\n                       sig: ty::FnSig<'tcx>,\n-                      extra_args: &[Ty<'tcx>]) -> FnType<'tcx> {\n+                      extra_args: &[Ty<'tcx>]) -> Self {\n         let mut fn_ty = FnType::unadjusted(cx, sig, extra_args);\n         // Don't pass the vtable, it's not an argument of the virtual fn.\n         {\n@@ -688,34 +310,34 @@ impl<'a, 'tcx> FnType<'tcx> {\n         fn_ty\n     }\n \n-    pub fn unadjusted(cx: &CodegenCx<'a, 'tcx>,\n+    fn unadjusted(cx: &CodegenCx<'a, 'tcx>,\n                       sig: ty::FnSig<'tcx>,\n-                      extra_args: &[Ty<'tcx>]) -> FnType<'tcx> {\n+                      extra_args: &[Ty<'tcx>]) -> Self {\n         debug!(\"FnType::unadjusted({:?}, {:?})\", sig, extra_args);\n \n         use self::Abi::*;\n-        let cconv = match cx.sess().target.target.adjust_abi(sig.abi) {\n+        let conv = match cx.sess().target.target.adjust_abi(sig.abi) {\n             RustIntrinsic | PlatformIntrinsic |\n-            Rust | RustCall => llvm::CCallConv,\n+            Rust | RustCall => Conv::C,\n \n             // It's the ABI's job to select this, not us.\n             System => bug!(\"system abi should be selected elsewhere\"),\n \n-            Stdcall => llvm::X86StdcallCallConv,\n-            Fastcall => llvm::X86FastcallCallConv,\n-            Vectorcall => llvm::X86_VectorCall,\n-            Thiscall => llvm::X86_ThisCall,\n-            C => llvm::CCallConv,\n-            Unadjusted => llvm::CCallConv,\n-            Win64 => llvm::X86_64_Win64,\n-            SysV64 => llvm::X86_64_SysV,\n-            Aapcs => llvm::ArmAapcsCallConv,\n-            PtxKernel => llvm::PtxKernel,\n-            Msp430Interrupt => llvm::Msp430Intr,\n-            X86Interrupt => llvm::X86_Intr,\n+            Stdcall => Conv::X86Stdcall,\n+            Fastcall => Conv::X86Fastcall,\n+            Vectorcall => Conv::X86VectorCall,\n+            Thiscall => Conv::X86ThisCall,\n+            C => Conv::C,\n+            Unadjusted => Conv::C,\n+            Win64 => Conv::X86_64Win64,\n+            SysV64 => Conv::X86_64SysV,\n+            Aapcs => Conv::ArmAapcs,\n+            PtxKernel => Conv::PtxKernel,\n+            Msp430Interrupt => Conv::Msp430Intr,\n+            X86Interrupt => Conv::X86Intr,\n \n             // These API constants ought to be more specific...\n-            Cdecl => llvm::CCallConv,\n+            Cdecl => Conv::C,\n         };\n \n         let mut inputs = sig.inputs();\n@@ -752,7 +374,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n         // Handle safe Rust thin and fat pointers.\n         let adjust_for_rust_scalar = |attrs: &mut ArgAttributes,\n                                       scalar: &layout::Scalar,\n-                                      layout: TyLayout<'tcx>,\n+                                      layout: TyLayout<'tcx, Ty<'tcx>>,\n                                       offset: Size,\n                                       is_return: bool| {\n             // Booleans are always an i1 that needs to be zero-extended.\n@@ -858,7 +480,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n                 arg_of(ty, false)\n             }).collect(),\n             variadic: sig.variadic,\n-            cconv,\n+            conv,\n         }\n     }\n \n@@ -869,7 +491,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n \n         if abi == Abi::Rust || abi == Abi::RustCall ||\n            abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n-            let fixup = |arg: &mut ArgType<'tcx>| {\n+            let fixup = |arg: &mut ArgType<'tcx, Ty<'tcx>>| {\n                 if arg.is_ignore() { return; }\n \n                 match arg.layout.abi {\n@@ -925,52 +547,12 @@ impl<'a, 'tcx> FnType<'tcx> {\n             return;\n         }\n \n-        match &cx.sess().target.target.arch[..] {\n-            \"x86\" => {\n-                let flavor = if abi == Abi::Fastcall {\n-                    cabi_x86::Flavor::Fastcall\n-                } else {\n-                    cabi_x86::Flavor::General\n-                };\n-                cabi_x86::compute_abi_info(cx, self, flavor);\n-            },\n-            \"x86_64\" => if abi == Abi::SysV64 {\n-                cabi_x86_64::compute_abi_info(cx, self);\n-            } else if abi == Abi::Win64 || cx.sess().target.target.options.is_like_windows {\n-                cabi_x86_win64::compute_abi_info(self);\n-            } else {\n-                cabi_x86_64::compute_abi_info(cx, self);\n-            },\n-            \"aarch64\" => cabi_aarch64::compute_abi_info(cx, self),\n-            \"arm\" => cabi_arm::compute_abi_info(cx, self),\n-            \"mips\" => cabi_mips::compute_abi_info(cx, self),\n-            \"mips64\" => cabi_mips64::compute_abi_info(cx, self),\n-            \"powerpc\" => cabi_powerpc::compute_abi_info(cx, self),\n-            \"powerpc64\" => cabi_powerpc64::compute_abi_info(cx, self),\n-            \"s390x\" => cabi_s390x::compute_abi_info(cx, self),\n-            \"asmjs\" => cabi_asmjs::compute_abi_info(cx, self),\n-            \"wasm32\" => {\n-                if cx.sess().opts.target_triple.triple().contains(\"emscripten\") {\n-                    cabi_asmjs::compute_abi_info(cx, self)\n-                } else {\n-                    cabi_wasm32::compute_abi_info(cx, self)\n-                }\n-            }\n-            \"msp430\" => cabi_msp430::compute_abi_info(self),\n-            \"sparc\" => cabi_sparc::compute_abi_info(cx, self),\n-            \"sparc64\" => cabi_sparc64::compute_abi_info(cx, self),\n-            \"nvptx\" => cabi_nvptx::compute_abi_info(self),\n-            \"nvptx64\" => cabi_nvptx64::compute_abi_info(self),\n-            \"hexagon\" => cabi_hexagon::compute_abi_info(self),\n-            a => cx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n-        }\n-\n-        if let PassMode::Indirect(ref mut attrs) = self.ret.mode {\n-            attrs.set(ArgAttribute::StructRet);\n+        if let Err(msg) = self.adjust_for_cabi(cx, abi) {\n+            cx.sess().fatal(&msg);\n         }\n     }\n \n-    pub fn llvm_type(&self, cx: &CodegenCx<'a, 'tcx>) -> Type {\n+    fn llvm_type(&self, cx: &CodegenCx<'a, 'tcx>) -> Type {\n         let mut llargument_tys = Vec::new();\n \n         let llreturn_ty = match self.ret.mode {\n@@ -1012,7 +594,23 @@ impl<'a, 'tcx> FnType<'tcx> {\n         }\n     }\n \n-    pub fn apply_attrs_llfn(&self, llfn: ValueRef) {\n+    fn llvm_cconv(&self) -> llvm::CallConv {\n+        match self.conv {\n+            Conv::C => llvm::CCallConv,\n+            Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n+            Conv::Msp430Intr => llvm::Msp430Intr,\n+            Conv::PtxKernel => llvm::PtxKernel,\n+            Conv::X86Fastcall => llvm::X86FastcallCallConv,\n+            Conv::X86Intr => llvm::X86_Intr,\n+            Conv::X86Stdcall => llvm::X86StdcallCallConv,\n+            Conv::X86ThisCall => llvm::X86_ThisCall,\n+            Conv::X86VectorCall => llvm::X86_VectorCall,\n+            Conv::X86_64SysV => llvm::X86_64_SysV,\n+            Conv::X86_64Win64 => llvm::X86_64_Win64,\n+        }\n+    }\n+\n+    fn apply_attrs_llfn(&self, llfn: ValueRef) {\n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes| {\n             attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn);\n@@ -1042,7 +640,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n         }\n     }\n \n-    pub fn apply_attrs_callsite(&self, callsite: ValueRef) {\n+    fn apply_attrs_callsite(&self, callsite: ValueRef) {\n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes| {\n             attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite);\n@@ -1071,8 +669,9 @@ impl<'a, 'tcx> FnType<'tcx> {\n             }\n         }\n \n-        if self.cconv != llvm::CCallConv {\n-            llvm::SetInstructionCallConv(callsite, self.cconv);\n+        let cconv = self.llvm_cconv();\n+        if cconv != llvm::CCallConv {\n+            llvm::SetInstructionCallConv(callsite, cconv);\n         }\n     }\n }"}, {"sha": "9ebbdd7c3c936eefdde8466292c4cb34f5337458", "filename": "src/librustc_trans/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fcommand.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -17,7 +17,7 @@ use std::io;\n use std::mem;\n use std::process::{self, Output};\n \n-use rustc_back::LldFlavor;\n+use rustc_target::spec::LldFlavor;\n \n #[derive(Clone)]\n pub struct Command {"}, {"sha": "92f9a9e8ba97464d0a0ef800268bec7fd8ed17f4", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -17,7 +17,6 @@ use super::command::Command;\n use super::rpath::RPathConfig;\n use super::rpath;\n use metadata::METADATA_FILENAME;\n-use rustc_back::LinkerFlavor;\n use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType, PrintRequest};\n use rustc::session::config::{RUST_CGU_EXT, Lto};\n use rustc::session::filesearch;\n@@ -30,8 +29,7 @@ use rustc::util::common::time;\n use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n use tempdir::TempDir;\n-use rustc_back::{PanicStrategy, RelroLevel};\n-use rustc_back::target::TargetTriple;\n+use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor, TargetTriple};\n use rustc_data_structures::fx::FxHashSet;\n use context::get_reloc_model;\n use llvm;"}, {"sha": "f9a8473464db7f6f3269bc05ef77fc2d234efd03", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -23,7 +23,7 @@ use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n use rustc::session::config::{self, CrateType, OptLevel, DebugInfoLevel};\n use rustc::ty::TyCtxt;\n-use rustc_back::{LinkerFlavor, LldFlavor};\n+use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use serialize::{json, Encoder};\n \n /// For all the linkers we support, and information they might"}, {"sha": "2323ec3ef11085d2a81cb7ff71fbad9ece8247d8", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -74,7 +74,7 @@ use type_of::LayoutLlvmExt;\n use rustc::util::nodemap::{FxHashMap, FxHashSet, DefIdSet};\n use CrateInfo;\n use rustc_data_structures::sync::Lrc;\n-use rustc_back::target::TargetTriple;\n+use rustc_target::spec::TargetTriple;\n \n use std::any::Any;\n use std::collections::BTreeMap;"}, {"sha": "5849437758af6268a8a2eaf01b8a1e56393df2e9", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -26,7 +26,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TypeFoldable};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::subst::Substs;\n-use rustc_back::PanicStrategy;\n+use rustc_target::spec::PanicStrategy;\n \n /// Translates a reference to a fn/method item, monomorphizing and\n /// inlining as it goes."}, {"sha": "25ca2152b2768ea849fcc869adb686284aca8043", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -32,7 +32,7 @@ use rustc::hir;\n use libc::{c_uint, c_char};\n use std::iter;\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n "}, {"sha": "76f8be9ee98a6c4ea72551e237e8c546d27daa96", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -31,6 +31,7 @@ use rustc::session::Session;\n use rustc::ty::layout::{LayoutError, LayoutOf, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n+use rustc_target::spec::{HasTargetSpec, Target};\n \n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n@@ -453,13 +454,20 @@ impl<'a, 'tcx> ty::layout::HasDataLayout for &'a CodegenCx<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> HasTargetSpec for &'a CodegenCx<'a, 'tcx> {\n+    fn target_spec(&self) -> &Target {\n+        &self.tcx.sess.target.target\n+    }\n+}\n+\n impl<'a, 'tcx> ty::layout::HasTyCtxt<'tcx> for &'a CodegenCx<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.tcx\n     }\n }\n \n-impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for &'a CodegenCx<'a, 'tcx> {\n+impl<'a, 'tcx> LayoutOf for &'a CodegenCx<'a, 'tcx> {\n+    type Ty = Ty<'tcx>;\n     type TyLayout = TyLayout<'tcx>;\n \n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {"}, {"sha": "5359e0e0405a1d5af2ef41fe2259f6ab402251e2", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -32,7 +32,7 @@ use rustc::ich::Fingerprint;\n use rustc::ty::Instance;\n use common::CodegenCx;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n-use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n+use rustc::ty::layout::{self, Align, LayoutOf, PrimitiveExt, Size, TyLayout};\n use rustc::session::config;\n use rustc::util::nodemap::FxHashMap;\n use rustc::util::common::path2cstr;"}, {"sha": "bbe4e18b18cb1fd9ab3d175ad838341d36107df4", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -24,8 +24,8 @@ use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n use rustc::ty::{self, Ty};\n use rustc::session::config::Sanitizer;\n-use rustc_back::PanicStrategy;\n-use abi::{Abi, FnType};\n+use rustc_target::spec::PanicStrategy;\n+use abi::{Abi, FnType, FnTypeExt};\n use attributes;\n use context::CodegenCx;\n use common;\n@@ -131,7 +131,7 @@ pub fn declare_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, name: &str,\n     debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n     let fty = FnType::new(cx, sig, &[]);\n-    let llfn = declare_raw_fn(cx, name, fty.cconv, fty.llvm_type(cx));\n+    let llfn = declare_raw_fn(cx, name, fty.llvm_cconv(), fty.llvm_type(cx));\n \n     // FIXME(canndrew): This is_never should really be an is_uninhabited\n     if sig.output().is_never() {"}, {"sha": "103b04e6f135b58b1ec79b8bbf770a8338aaa6a7", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@\n use intrinsics::{self, Intrinsic};\n use llvm;\n use llvm::{ValueRef};\n-use abi::{Abi, FnType, PassMode};\n+use abi::{Abi, FnType, LlvmType, PassMode};\n use mir::place::PlaceRef;\n use mir::operand::{OperandRef, OperandValue};\n use base::*;\n@@ -87,7 +87,7 @@ fn get_simple_intrinsic(cx: &CodegenCx, name: &str) -> Option<ValueRef> {\n /// add them to librustc_trans/trans/context.rs\n pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                                       callee_ty: Ty<'tcx>,\n-                                      fn_ty: &FnType<'tcx>,\n+                                      fn_ty: &FnType<'tcx, Ty<'tcx>>,\n                                       args: &[OperandRef<'tcx>],\n                                       llresult: ValueRef,\n                                       span: Span) {"}, {"sha": "dab01abd3353a48ce7ac350a8d39661cf7990a2e", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -33,8 +33,6 @@\n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;\n \n-#[macro_use]\n-extern crate bitflags;\n extern crate flate2;\n extern crate libc;\n #[macro_use] extern crate rustc;\n@@ -43,7 +41,7 @@ extern crate num_cpus;\n extern crate rustc_mir;\n extern crate rustc_allocator;\n extern crate rustc_apfloat;\n-extern crate rustc_back;\n+extern crate rustc_target;\n extern crate rustc_const_math;\n #[macro_use] extern crate rustc_data_structures;\n extern crate rustc_demangle;\n@@ -104,24 +102,6 @@ mod asm;\n mod attributes;\n mod base;\n mod builder;\n-mod cabi_aarch64;\n-mod cabi_arm;\n-mod cabi_asmjs;\n-mod cabi_hexagon;\n-mod cabi_mips;\n-mod cabi_mips64;\n-mod cabi_msp430;\n-mod cabi_nvptx;\n-mod cabi_nvptx64;\n-mod cabi_powerpc;\n-mod cabi_powerpc64;\n-mod cabi_s390x;\n-mod cabi_sparc;\n-mod cabi_sparc64;\n-mod cabi_x86;\n-mod cabi_x86_64;\n-mod cabi_x86_win64;\n-mod cabi_wasm32;\n mod callee;\n mod common;\n mod consts;"}, {"sha": "144baa65c1bfa32a6b19b29391799d5811de5f5d", "filename": "src/librustc_trans/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmetadata.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::util::common;\n use rustc::middle::cstore::MetadataLoader;\n-use rustc_back::target::Target;\n+use rustc_target::spec::Target;\n use llvm;\n use llvm::{False, ObjectFile, mk_section_iter};\n use llvm::archive_ro::ArchiveRO;"}, {"sha": "21bbdf31dcb5200d8fa04068ad3e94fa83fec9f1", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use abi::FnType;\n+use abi::{FnType, FnTypeExt};\n use callee;\n use common::*;\n use builder::Builder;\n@@ -35,7 +35,7 @@ impl<'a, 'tcx> VirtualIndex {\n \n     pub fn get_fn(self, bx: &Builder<'a, 'tcx>,\n                   llvtable: ValueRef,\n-                  fn_ty: &FnType<'tcx>) -> ValueRef {\n+                  fn_ty: &FnType<'tcx, Ty<'tcx>>) -> ValueRef {\n         // Load the data pointer from the object.\n         debug!(\"get_fn({:?}, {:?})\", Value(llvtable), self);\n "}, {"sha": "36f03605feabd56fb0991426e635b2ee418d4e48", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,10 +10,10 @@\n \n use llvm::{self, ValueRef, BasicBlockRef};\n use rustc::middle::lang_items;\n-use rustc::ty::{self, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutOf};\n use rustc::mir;\n-use abi::{Abi, FnType, ArgType, PassMode};\n+use abi::{Abi, ArgType, ArgTypeExt, FnType, FnTypeExt, LlvmType, PassMode};\n use base;\n use callee;\n use builder::Builder;\n@@ -110,7 +110,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n         let do_call = |\n             this: &mut Self,\n             bx: Builder<'a, 'tcx>,\n-            fn_ty: FnType<'tcx>,\n+            fn_ty: FnType<'tcx, Ty<'tcx>>,\n             fn_ptr: ValueRef,\n             llargs: &[ValueRef],\n             destination: Option<(ReturnDest<'tcx>, mir::BasicBlock)>,\n@@ -604,7 +604,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                       bx: &Builder<'a, 'tcx>,\n                       op: OperandRef<'tcx>,\n                       llargs: &mut Vec<ValueRef>,\n-                      arg: &ArgType<'tcx>) {\n+                      arg: &ArgType<'tcx, Ty<'tcx>>) {\n         // Fill padding with undef value, where applicable.\n         if let Some(ty) = arg.pad {\n             llargs.push(C_undef(ty.llvm_type(bx.cx)));\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                                 bx: &Builder<'a, 'tcx>,\n                                 operand: &mir::Operand<'tcx>,\n                                 llargs: &mut Vec<ValueRef>,\n-                                args: &[ArgType<'tcx>]) {\n+                                args: &[ArgType<'tcx, Ty<'tcx>>]) {\n         let tuple = self.trans_operand(bx, operand);\n \n         // Handle both by-ref and immediate tuples.\n@@ -776,7 +776,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n     }\n \n     fn make_return_dest(&mut self, bx: &Builder<'a, 'tcx>,\n-                        dest: &mir::Place<'tcx>, fn_ret: &ArgType<'tcx>,\n+                        dest: &mir::Place<'tcx>, fn_ret: &ArgType<'tcx, Ty<'tcx>>,\n                         llargs: &mut Vec<ValueRef>, is_intrinsic: bool)\n                         -> ReturnDest<'tcx> {\n         // If the return is ignored, we can just return a do-nothing ReturnDest\n@@ -873,7 +873,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n     fn store_return(&mut self,\n                     bx: &Builder<'a, 'tcx>,\n                     dest: ReturnDest<'tcx>,\n-                    ret_ty: &ArgType<'tcx>,\n+                    ret_ty: &ArgType<'tcx, Ty<'tcx>>,\n                     llval: ValueRef) {\n         use self::ReturnDest::*;\n "}, {"sha": "a074f25dfc9bae18cbab0917629ffda556b52085", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -12,7 +12,7 @@ use common::{C_i32, C_null};\n use libc::c_uint;\n use llvm::{self, ValueRef, BasicBlockRef};\n use llvm::debuginfo::DIScope;\n-use rustc::ty::{self, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::mir::{self, Mir};\n use rustc::ty::subst::Substs;\n@@ -22,7 +22,7 @@ use builder::Builder;\n use common::{CodegenCx, Funclet};\n use debuginfo::{self, declare_local, VariableAccess, VariableKind, FunctionDebugContext};\n use monomorphize::Instance;\n-use abi::{ArgAttribute, FnType, PassMode};\n+use abi::{ArgAttribute, ArgTypeExt, FnType, FnTypeExt, PassMode};\n use type_::Type;\n \n use syntax_pos::{DUMMY_SP, NO_EXPANSION, BytePos, Span};\n@@ -53,7 +53,7 @@ pub struct FunctionCx<'a, 'tcx:'a> {\n \n     cx: &'a CodegenCx<'a, 'tcx>,\n \n-    fn_ty: FnType<'tcx>,\n+    fn_ty: FnType<'tcx, Ty<'tcx>>,\n \n     /// When unwinding is initiated, we have to store this personality\n     /// value somewhere so that we can load it and re-use it in the"}, {"sha": "5e6b276495764078c308925028e569f56b52fdaf", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::FnType;\n+use abi::{FnType, FnTypeExt};\n use common::*;\n use rustc::hir;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n-use rustc_back::PanicStrategy;\n+use rustc_target::spec::PanicStrategy;\n use trans_item::DefPathBasedNames;\n use type_::Type;\n "}, {"sha": "323d9d1cedae06d648d9830bfc5c514e705d379e", "filename": "src/librustc_trans_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -17,7 +17,7 @@ log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_incremental = { path = \"../librustc_incremental\" }"}, {"sha": "b91f4e4dffb07b197840c943761fb6532c41bdee", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -30,7 +30,7 @@ extern crate log;\n \n #[macro_use]\n extern crate rustc;\n-extern crate rustc_back;\n+extern crate rustc_target;\n extern crate rustc_mir;\n extern crate rustc_incremental;\n extern crate syntax;"}, {"sha": "7b585d1060fc205e953e1cb2e3d1fa03e0d19895", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -43,7 +43,7 @@ use rustc::ty::maps::Providers;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n-use rustc_back::target::Target;\n+use rustc_target::spec::Target;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::monomorphize::collector;\n use link::{build_link_meta, out_filename};"}, {"sha": "70c13e9b7d637a6599e613a0e84c246954d40018", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -18,5 +18,6 @@ rustc = { path = \"../librustc\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n+rustc_target = { path = \"../librustc_target\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "6cdce127308f6583fd3e0c8120802b5f9c3f3473", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -23,14 +23,15 @@ use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, RegionKind, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::wf::object_region_bounds;\n+use rustc_target::spec::abi;\n use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n use errors::FatalError;\n \n use std::iter;\n-use syntax::{abi, ast};\n+use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax_pos::Span;\n "}, {"sha": "4df496763e40a9807d833dc00fe7069b7c70698c", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -17,7 +17,7 @@ use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::{infer, traits};\n use rustc::ty::{self, TyCtxt, TypeFoldable, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n-use syntax::abi;\n+use rustc_target::spec::abi;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n "}, {"sha": "3b9d561ffc5a5f86f883e9aeef8b676a88d52b69", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -23,7 +23,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::TypeFoldable;\n use std::cmp;\n use std::iter;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::codemap::Span;\n use rustc::hir;\n "}, {"sha": "283fbf8fecc4264ef9c5434432eb2e4baf342092", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -17,7 +17,7 @@ use rustc::ty::{self, TyCtxt, Ty};\n use rustc::util::nodemap::FxHashMap;\n use require_same_types;\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;"}, {"sha": "787df7c647969d354f42916eaede63704a096477", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -118,7 +118,7 @@ use std::fmt::Display;\n use std::mem::replace;\n use std::iter;\n use std::ops::{self, Deref};\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::{original_sp, Spanned};"}, {"sha": "2ebbd64cab90e027c7cf04263b8479b6ad002cf0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -38,8 +38,9 @@ use rustc::ty::util::IntTypeExt;\n use rustc::ty::util::Discr;\n use rustc::util::captures::Captures;\n use rustc::util::nodemap::FxHashMap;\n+use rustc_target::spec::abi;\n \n-use syntax::{abi, ast};\n+use syntax::ast;\n use syntax::ast::MetaItemKind;\n use syntax::attr::{InlineAttr, list_contains_name, mark_used};\n use syntax::codemap::Spanned;"}, {"sha": "23fe91ffdebb641984993f3b49e7adb431397fe5", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -94,6 +94,7 @@ extern crate rustc_platform_intrinsics as intrinsics;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n+extern crate rustc_target;\n \n use rustc::hir;\n use rustc::lint;\n@@ -111,7 +112,7 @@ use session::{CompileIncomplete, config};\n use util::common::time;\n \n use syntax::ast;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax_pos::Span;\n \n use std::iter;"}, {"sha": "26fba71c8128533810315b0d962f7d0e98a05848", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -23,7 +23,8 @@ use rustc::ty::{self, AdtKind, CratePredicatesMap, Region, RegionKind, ReprOptio\n                 ToPolyTraitRef, ToPredicate, Ty, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use syntax::{abi, ast};\n+use rustc_target::spec::abi;\n+use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n \n /// Infer predicates for the items in the crate."}, {"sha": "fb05cbfe32c70a8514d671d91733afff4a9cada7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -20,7 +20,7 @@ pub use self::FunctionRetTy::*;\n pub use self::Visibility::*;\n \n use syntax;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n use syntax::codemap::{dummy_spanned, Spanned};"}, {"sha": "d423203b99645800b802e7940d3c60ca9fb1e14c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -23,7 +23,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_resolve as resolve;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n-use rustc_back::target::TargetTriple;\n+use rustc_target::spec::TargetTriple;\n \n use syntax::ast::NodeId;\n use syntax::codemap;"}, {"sha": "f85a70a6d401f24c5bcb09f4923426df1b74b1cd", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@\n pub use self::StructType::*;\n pub use self::TypeBound::*;\n \n-use syntax::abi;\n+use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::ast::{Name, NodeId};\n use syntax::attr;"}, {"sha": "a9a4c5113747ec685f80ce7c6f74ef4097a3a669", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -19,7 +19,7 @@ use std::fmt;\n use std::iter::repeat;\n \n use rustc::hir::def_id::DefId;\n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use rustc::hir;\n \n use clean::{self, PrimitiveType};"}, {"sha": "82449e9b5f90a68220d7fc1b657b7f7c510d113b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -54,14 +54,15 @@ use std::sync::Arc;\n use externalfiles::ExternalHtml;\n \n use serialize::json::{ToJson, Json, as_json};\n-use syntax::{abi, ast};\n+use syntax::ast;\n use syntax::codemap::FileName;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n use rustc::hir;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n+use rustc_target::spec::abi;\n \n use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n use doctree;"}, {"sha": "614386a583a7772ae76c30af1779791da9e70439", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -35,8 +35,8 @@ extern crate rustc_trans_utils;\n extern crate rustc_driver;\n extern crate rustc_resolve;\n extern crate rustc_lint;\n-extern crate rustc_back;\n extern crate rustc_metadata;\n+extern crate rustc_target;\n extern crate rustc_typeck;\n extern crate serialize;\n #[macro_use] extern crate syntax;\n@@ -66,7 +66,7 @@ use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{ErrorOutputType, RustcOptGroup, Externs, CodegenOptions};\n use rustc::session::config::{nightly_options, build_codegen_options};\n-use rustc_back::target::TargetTriple;\n+use rustc_target::spec::TargetTriple;\n \n #[macro_use]\n pub mod externalfiles;"}, {"sha": "967c50e62db5dde41a6ad138fba57742a2362b6e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -13,7 +13,7 @@\n \n use std::mem;\n \n-use syntax::abi;\n+use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;"}, {"sha": "d1a5ab0211b3b08f57c02c3a5e686e838fd011db", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -14,6 +14,6 @@ serialize = { path = \"../libserialize\" }\n log = \"0.4\"\n scoped-tls = \"0.1\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_target = { path = \"../librustc_target\" }"}, {"sha": "cbfcad12f1e52f772ff5dccac6b0e74ba2243f7a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -19,7 +19,7 @@ pub use util::parser::ExprPrecedence;\n \n use syntax_pos::{Span, DUMMY_SP};\n use codemap::{respan, Spanned};\n-use abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use ext::hygiene::{Mark, SyntaxContext};\n use print::pprust;\n use ptr::P;"}, {"sha": "0b64189b2bc2b55aac5d395b816889c34d3df96e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp, PatKind};\n use attr;\n use syntax_pos::{Pos, Span, DUMMY_SP};"}, {"sha": "0331e90164f0c763e41acde31537f49de1985db1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -25,7 +25,7 @@\n use self::AttributeType::*;\n use self::AttributeGate::*;\n \n-use abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n use edition::{ALL_EDITIONS, Edition};"}, {"sha": "870ce1926ade43995c4da7a627b03c43f799a58d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -28,17 +28,14 @@\n \n #![recursion_limit=\"256\"]\n \n-// See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n-#[allow(unused_extern_crates)]\n-extern crate rustc_cratesio_shim;\n-\n #[macro_use] extern crate bitflags;\n extern crate core;\n extern crate serialize;\n #[macro_use] extern crate log;\n pub extern crate rustc_errors as errors;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n+extern crate rustc_target;\n #[macro_use] extern crate scoped_tls;\n \n extern crate serialize as rustc_serialize; // used by deriving\n@@ -138,7 +135,6 @@ pub mod syntax {\n     pub use ast;\n }\n \n-pub mod abi;\n pub mod ast;\n pub mod attr;\n pub mod codemap;"}, {"sha": "ff09c6aa2f006c9f7f23eb197ddd012e65927c72", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -678,7 +678,7 @@ mod tests {\n     use syntax_pos::{self, Span, BytePos, Pos, NO_EXPANSION};\n     use codemap::{respan, Spanned};\n     use ast::{self, Ident, PatKind};\n-    use abi::Abi;\n+    use rustc_target::spec::abi::Abi;\n     use attr::first_attr_value_str_by_name;\n     use parse;\n     use parse::parser::Parser;"}, {"sha": "324cadc84e862722281a3a07950a19206f7eb410", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use abi::{self, Abi};\n+use rustc_target::spec::abi::{self, Abi};\n use ast::{AngleBracketedParameterData, ParenthesizedParameterData, AttrStyle, BareFnTy};\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Unsafety;"}, {"sha": "88860df10e2c3766fb60755d96fff84838671154", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -10,7 +10,7 @@\n \n pub use self::AnnNode::*;\n \n-use abi::{self, Abi};\n+use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Attribute;"}, {"sha": "1734692f9e7589639024e77643f4278b40e70b97", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -563,7 +563,9 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n                            ast::Unsafety::Normal,\n                            dummy_spanned(ast::Constness::NotConst),\n-                           ::abi::Abi::Rust, ast::Generics::default(), main_body);\n+                           ::rustc_target::spec::abi::Abi::Rust,\n+                           ast::Generics::default(),\n+                           main_body);\n     P(ast::Item {\n         ident: Ident::from_str(\"main\"),\n         attrs: vec![main_attr],"}, {"sha": "40d59d3ff8b8d0c7c980b467dbd66b57e6bca1a6", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -23,7 +23,7 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n-use abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use ast::*;\n use syntax_pos::Span;\n use codemap::Spanned;"}, {"sha": "1676757d9b89da186cae413333749efe3a85f9fa", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -14,4 +14,5 @@ proc_macro = { path = \"../libproc_macro\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_target = { path = \"../librustc_target\" }\n\\ No newline at end of file"}, {"sha": "becd70149fd1e96b3964623b459c3b8fb3f96264", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -191,7 +191,7 @@ use std::cell::RefCell;\n use std::collections::HashSet;\n use std::vec;\n \n-use syntax::abi::Abi;\n+use rustc_target::spec::abi::Abi;\n use syntax::ast::{\n     self, BinOpKind, EnumDef, Expr, GenericParam, Generics, Ident, PatKind, VariantData\n };"}, {"sha": "b6721dd28f3674d008f709112a76222aab38c07e", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -27,6 +27,7 @@ extern crate syntax_pos;\n extern crate proc_macro;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;\n+extern crate rustc_target;\n \n #[cfg(not(stage0))]\n mod diagnostics;"}, {"sha": "9986e0b512a347583c00c783ce090bb3b417a2b0", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/949010d23e9f7037a8e6f323588873b3d2438fb1/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=949010d23e9f7037a8e6f323588873b3d2438fb1", "patch": "@@ -8,8 +8,8 @@ name = \"rustc\"\n path = \"rustc.rs\"\n \n [dependencies]\n-rustc_back = { path = \"../librustc_back\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_driver = { path = \"../librustc_driver\" }\n \n [features]\n-jemalloc = [\"rustc_back/jemalloc\"]\n+jemalloc = [\"rustc_target/jemalloc\"]"}]}