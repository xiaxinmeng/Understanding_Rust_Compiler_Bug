{"sha": "3fa2b565378d292e49f17b20cb31b9bbd108b38b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYTJiNTY1Mzc4ZDI5MmU0OWYxN2IyMGNiMzFiOWJiZDEwOGIzOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-28T17:47:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-28T17:47:01Z"}, "message": "auto merge of #17851 : brson/rust/rustup, r=alexcrichton\n\nJust to have it somewhere to point to. Updating it will not\r\nautomatically update the one on static.rust-lang.org.", "tree": {"sha": "f95532e07802edf2b5456cc80ef98ead8cd86001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95532e07802edf2b5456cc80ef98ead8cd86001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fa2b565378d292e49f17b20cb31b9bbd108b38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa2b565378d292e49f17b20cb31b9bbd108b38b", "html_url": "https://github.com/rust-lang/rust/commit/3fa2b565378d292e49f17b20cb31b9bbd108b38b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fa2b565378d292e49f17b20cb31b9bbd108b38b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1bfd6515c3793b7fc70a21d014ce691ac616992", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1bfd6515c3793b7fc70a21d014ce691ac616992", "html_url": "https://github.com/rust-lang/rust/commit/d1bfd6515c3793b7fc70a21d014ce691ac616992"}, {"sha": "9106546aa7d56dcaf650d9bc03fe5b5c3cf3460d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9106546aa7d56dcaf650d9bc03fe5b5c3cf3460d", "html_url": "https://github.com/rust-lang/rust/commit/9106546aa7d56dcaf650d9bc03fe5b5c3cf3460d"}], "stats": {"total": 476, "additions": 476, "deletions": 0}, "files": [{"sha": "4829e15fb0ffa73fd870172f780b896ea6ea6b5e", "filename": "src/etc/rustup.sh", "status": "added", "additions": 476, "deletions": 0, "changes": 476, "blob_url": "https://github.com/rust-lang/rust/blob/3fa2b565378d292e49f17b20cb31b9bbd108b38b/src%2Fetc%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3fa2b565378d292e49f17b20cb31b9bbd108b38b/src%2Fetc%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frustup.sh?ref=3fa2b565378d292e49f17b20cb31b9bbd108b38b", "patch": "@@ -0,0 +1,476 @@\n+#!/bin/sh\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+\n+msg() {\n+    echo \"rustup: $1\"\n+}\n+\n+step_msg() {\n+    msg\n+    msg \"$1\"\n+    msg\n+}\n+\n+warn() {\n+    echo \"rustup: WARNING: $1\"\n+}\n+\n+err() {\n+    echo \"rustup: error: $1\"\n+    exit 1\n+}\n+\n+need_ok() {\n+    if [ $? -ne 0 ]\n+    then\n+        err \"$1\"\n+    fi\n+}\n+\n+\n+putvar() {\n+    local T\n+    eval T=\\$$1\n+    eval TLEN=\\${#$1}\n+    if [ $TLEN -gt 35 ]\n+    then\n+        printf \"rustup: %-20s := %.35s ...\\n\" $1 \"$T\"\n+    else\n+        printf \"rustup: %-20s := %s %s\\n\" $1 \"$T\" \"$2\"\n+    fi\n+}\n+\n+probe() {\n+    local V=$1\n+    shift\n+    local P\n+    local T\n+    for P\n+    do\n+        T=$(which $P 2>&1)\n+        if [ $? -eq 0 ]\n+        then\n+            VER0=$($P --version 2>/dev/null | head -1 \\\n+                |  sed -e 's/[^0-9]*\\([vV]\\?[0-9.]\\+[^ ]*\\).*/\\1/' )\n+            if [ $? -eq 0 -a \"x${VER0}\" != \"x\" ]\n+            then\n+              VER=\"($VER0)\"\n+            else\n+              VER=\"\"\n+            fi\n+            break\n+        else\n+            VER=\"\"\n+            T=\"\"\n+        fi\n+    done\n+    eval $V=\\$T\n+    putvar $V \"$VER\"\n+}\n+\n+probe_need() {\n+    local V=$1\n+    probe $*\n+    eval VV=\\$$V\n+    if [ -z \"$VV\" ]\n+    then\n+        err \"needed, but unable to find any of: $*\"\n+    fi\n+}\n+\n+\n+valopt() {\n+    VAL_OPTIONS=\"$VAL_OPTIONS $1\"\n+\n+    local OP=$1\n+    local DEFAULT=$2\n+    shift\n+    shift\n+    local DOC=\"$*\"\n+    if [ $HELP -eq 0 ]\n+    then\n+        local UOP=$(echo $OP | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n+        local V=\"CFG_${UOP}\"\n+        eval $V=\"$DEFAULT\"\n+        for arg in $CFG_ARGS\n+        do\n+            if echo \"$arg\" | grep -q -- \"--$OP=\"\n+            then\n+                val=$(echo \"$arg\" | cut -f2 -d=)\n+                eval $V=$val\n+            fi\n+        done\n+        putvar $V\n+    else\n+        if [ -z \"$DEFAULT\" ]\n+        then\n+            DEFAULT=\"<none>\"\n+        fi\n+        OP=\"${OP}=[${DEFAULT}]\"\n+        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n+    fi\n+}\n+\n+opt() {\n+    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n+\n+    local OP=$1\n+    local DEFAULT=$2\n+    shift\n+    shift\n+    local DOC=\"$*\"\n+    local FLAG=\"\"\n+\n+    if [ $DEFAULT -eq 0 ]\n+    then\n+        FLAG=\"enable\"\n+    else\n+        FLAG=\"disable\"\n+        DOC=\"don't $DOC\"\n+    fi\n+\n+    if [ $HELP -eq 0 ]\n+    then\n+        for arg in $CFG_ARGS\n+        do\n+            if [ \"$arg\" = \"--${FLAG}-${OP}\" ]\n+            then\n+                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n+                FLAG=$(echo $FLAG | tr 'a-z' 'A-Z')\n+                local V=\"CFG_${FLAG}_${OP}\"\n+                eval $V=1\n+                putvar $V\n+            fi\n+        done\n+    else\n+        if [ ! -z \"$META\" ]\n+        then\n+            OP=\"$OP=<$META>\"\n+        fi\n+        printf \"    --%-30s %s\\n\" \"$FLAG-$OP\" \"$DOC\"\n+     fi\n+}\n+\n+flag() {\n+    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n+\n+    local OP=$1\n+    shift\n+    local DOC=\"$*\"\n+\n+    if [ $HELP -eq 0 ]\n+    then\n+        for arg in $CFG_ARGS\n+        do\n+            if [ \"$arg\" = \"--${OP}\" ]\n+            then\n+                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n+                local V=\"CFG_${OP}\"\n+                eval $V=1\n+                putvar $V\n+            fi\n+        done\n+    else\n+        if [ ! -z \"$META\" ]\n+        then\n+            OP=\"$OP=<$META>\"\n+        fi\n+        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n+     fi\n+}\n+\n+validate_opt () {\n+    for arg in $CFG_ARGS\n+    do\n+        isArgValid=0\n+        for option in $BOOL_OPTIONS\n+        do\n+            if test --disable-$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+            if test --enable-$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+            if test --$option = $arg\n+            then\n+                isArgValid=1\n+            fi\n+        done\n+        for option in $VAL_OPTIONS\n+        do\n+            if echo \"$arg\" | grep -q -- \"--$option=\"\n+            then\n+                isArgValid=1\n+            fi\n+        done\n+        if [ \"$arg\" = \"--help\" ]\n+        then\n+            echo\n+            echo \"No more help available for Configure options,\"\n+            echo \"check the Wiki or join our IRC channel\"\n+            break\n+        else\n+            if test $isArgValid -eq 0\n+            then\n+                err \"Option '$arg' is not recognized\"\n+            fi\n+        fi\n+    done\n+}\n+\n+probe_need CFG_CURL  curl\n+\n+CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n+CFG_SELF=\"$0\"\n+CFG_ARGS=\"$@\"\n+\n+HELP=0\n+if [ \"$1\" = \"--help\" ]\n+then\n+    HELP=1\n+    shift\n+    echo\n+    echo \"Usage: $CFG_SELF [options]\"\n+    echo\n+    echo \"Options:\"\n+    echo\n+else\n+    step_msg \"processing $CFG_SELF args\"\n+fi\n+\n+OPTIONS=\"\"\n+BOOL_OPTIONS=\"\"\n+VAL_OPTIONS=\"\"\n+\n+flag uninstall \"only uninstall from the installation prefix\"\n+valopt prefix \"\" \"set installation prefix\"\n+opt cargo 1 \"install cargo with rust\"\n+\n+if [ $HELP -eq 1 ]\n+then\n+    echo\n+    exit 0\n+fi\n+\n+step_msg \"validating $CFG_SELF args\"\n+validate_opt\n+\n+\n+# Platform detection copied from `configure`\n+\n+CFG_OSTYPE=$(uname -s)\n+CFG_CPUTYPE=$(uname -m)\n+\n+if [ $CFG_OSTYPE = Darwin -a $CFG_CPUTYPE = i386 ]\n+then\n+    # Darwin's `uname -s` lies and always returns i386. We have to use sysctl\n+    # instead.\n+    if sysctl hw.optional.x86_64 | grep -q ': 1'\n+    then\n+        CFG_CPUTYPE=x86_64\n+    fi\n+fi\n+\n+# The goal here is to come up with the same triple as LLVM would,\n+# at least for the subset of platforms we're willing to target.\n+\n+case $CFG_OSTYPE in\n+\n+    Linux)\n+        CFG_OSTYPE=unknown-linux-gnu\n+        ;;\n+\n+    FreeBSD)\n+        CFG_OSTYPE=unknown-freebsd\n+        ;;\n+\n+    Darwin)\n+        CFG_OSTYPE=apple-darwin\n+        ;;\n+\n+    MINGW32*)\n+        CFG_OSTYPE=pc-mingw32\n+        ;;\n+# Thad's Cygwin identifers below\n+\n+#   Vista 32 bit\n+    CYGWIN_NT-6.0)\n+        CFG_OSTYPE=pc-mingw32\n+        CFG_CPUTYPE=i686\n+        ;;\n+\n+#   Vista 64 bit\n+    CYGWIN_NT-6.0-WOW64)\n+        CFG_OSTYPE=w64-mingw32\n+        CFG_CPUTYPE=x86_64\n+        ;;\n+\n+#   Win 7 32 bit\n+    CYGWIN_NT-6.1)\n+        CFG_OSTYPE=pc-mingw32\n+        CFG_CPUTYPE=i686\n+        ;;\n+\n+#   Win 7 64 bit\n+    CYGWIN_NT-6.1-WOW64)\n+        CFG_OSTYPE=w64-mingw32\n+        CFG_CPUTYPE=x86_64\n+        ;;\n+\n+# We do not detect other OS such as XP/2003 using 64 bit using uname.\n+# If we want to in the future, we will need to use Cygwin\n+# Chuck's csih helper in /usr/lib/csih/winProductName.exe or alternative.\n+    *)\n+        err \"unknown OS type: $CFG_OSTYPE\"\n+        ;;\n+esac\n+\n+\n+case $CFG_CPUTYPE in\n+\n+    i386 | i486 | i686 | i786 | x86)\n+        CFG_CPUTYPE=i686\n+        ;;\n+\n+    xscale | arm)\n+        CFG_CPUTYPE=arm\n+        ;;\n+\n+    x86_64 | x86-64 | x64 | amd64)\n+        CFG_CPUTYPE=x86_64\n+        ;;\n+\n+    *)\n+        err \"unknown CPU type: $CFG_CPUTYPE\"\n+esac\n+\n+# Detect 64 bit linux systems with 32 bit userland and force 32 bit compilation\n+if [ $CFG_OSTYPE = unknown-linux-gnu -a $CFG_CPUTYPE = x86_64 ]\n+then\n+    file -L \"$SHELL\" | grep -q \"x86[_-]64\"\n+    if [ $? != 0 ]; then\n+        CFG_CPUTYPE=i686\n+    fi\n+fi\n+\n+HOST_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n+\n+# Is this a triple we have nightlies for?\n+case $HOST_TRIPLE in\n+\n+        x86_64-unknown-linux-gnu)\n+                ;;\n+\n+        i686-unknown-linux-gnu)\n+                ;;\n+\n+        x86_64-apple-darwin)\n+                ;;\n+\n+        i686-apple-darwin)\n+                ;;\n+\n+        *)\n+                err \"rustup.sh doesn't work for host $HOST_TRIPLE\"\n+\n+esac\n+\n+msg \"host triple: ${HOST_TRIPLE}\"\n+\n+PACKAGE_NAME=rust-nightly\n+PACKAGE_NAME_AND_TRIPLE=\"${PACKAGE_NAME}-${HOST_TRIPLE}\"\n+TARBALL_NAME=\"${PACKAGE_NAME_AND_TRIPLE}.tar.gz\"\n+REMOTE_TARBALL=\"https://static.rust-lang.org/dist/${TARBALL_NAME}\"\n+TMP_DIR=\"./rustup-tmp-install\"\n+LOCAL_TARBALL=\"${TMP_DIR}/${TARBALL_NAME}\"\n+LOCAL_INSTALL_DIR=\"${TMP_DIR}/${PACKAGE_NAME_AND_TRIPLE}\"\n+LOCAL_INSTALL_SCRIPT=\"${LOCAL_INSTALL_DIR}/install.sh\"\n+\n+CARGO_PACKAGE_NAME=cargo-nightly\n+CARGO_PACKAGE_NAME_AND_TRIPLE=\"${CARGO_PACKAGE_NAME}-${HOST_TRIPLE}\"\n+CARGO_TARBALL_NAME=\"${CARGO_PACKAGE_NAME_AND_TRIPLE}.tar.gz\"\n+CARGO_REMOTE_TARBALL=\"https://static.rust-lang.org/cargo-dist/${CARGO_TARBALL_NAME}\"\n+CARGO_LOCAL_TARBALL=\"${TMP_DIR}/${CARGO_TARBALL_NAME}\"\n+CARGO_LOCAL_INSTALL_DIR=\"${TMP_DIR}/${CARGO_PACKAGE_NAME_AND_TRIPLE}\"\n+CARGO_LOCAL_INSTALL_SCRIPT=\"${CARGO_LOCAL_INSTALL_DIR}/install.sh\"\n+\n+rm -Rf \"${TMP_DIR}\"\n+need_ok \"failed to remove temporary installation directory\"\n+\n+mkdir -p \"${TMP_DIR}\"\n+need_ok \"failed to create create temporary installation directory\"\n+\n+msg \"downloading rust installer\"\n+\"${CFG_CURL}\" \"${REMOTE_TARBALL}\" > \"${LOCAL_TARBALL}\"\n+if [ $? -ne 0 ]\n+then\n+        rm -Rf \"${TMP_DIR}\"\n+        err \"failed to download installer\"\n+fi\n+\n+if [ -z \"${CFG_DISABLE_CARGO}\" ]; then\n+    msg \"downloading cargo installer\"\n+    \"${CFG_CURL}\" \"${CARGO_REMOTE_TARBALL}\" > \"${CARGO_LOCAL_TARBALL}\"\n+    if [ $? -ne 0 ]\n+    then\n+            rm -Rf \"${TMP_DIR}\"\n+            err \"failed to download cargo installer\"\n+    fi\n+fi\n+\n+\n+(cd \"${TMP_DIR}\" && tar xzf \"${TARBALL_NAME}\")\n+if [ $? -ne 0 ]\n+then\n+        rm -Rf \"${TMP_DIR}\"\n+        err \"failed to unpack installer\"\n+fi\n+\n+MAYBE_UNINSTALL=\n+if [ -n \"${CFG_UNINSTALL}\" ]\n+then\n+        MAYBE_UNINSTALL=\"--uninstall\"\n+fi\n+\n+MAYBE_PREFIX=\n+if [ -n \"${CFG_PREFIX}\" ]\n+then\n+        MAYBE_PREFIX=\"--prefix=${CFG_PREFIX}\"\n+fi\n+\n+sh \"${LOCAL_INSTALL_SCRIPT}\" \"${MAYBE_UNINSTALL}\" \"${MAYBE_PREFIX}\"\n+if [ $? -ne 0 ]\n+then\n+        rm -Rf \"${TMP_DIR}\"\n+        err \"failed to install Rust\"\n+fi\n+\n+if [ -z \"${CFG_DISABLE_CARGO}\" ]; then\n+    (cd \"${TMP_DIR}\" && tar xzf \"${CARGO_TARBALL_NAME}\")\n+    if [ $? -ne 0 ]\n+    then\n+            rm -Rf \"${TMP_DIR}\"\n+            err \"failed to unpack cargo installer\"\n+    fi\n+\n+    sh \"${CARGO_LOCAL_INSTALL_SCRIPT}\" \"${MAYBE_UNINSTALL}\" \"${MAYBE_PREFIX}\"\n+    if [ $? -ne 0 ]\n+    then\n+            rm -Rf \"${TMP_DIR}\"\n+            err \"failed to install Cargo\"\n+    fi\n+fi\n+\n+rm -Rf \"${TMP_DIR}\"\n+need_ok \"couldn't rm temporary installation directory\""}]}