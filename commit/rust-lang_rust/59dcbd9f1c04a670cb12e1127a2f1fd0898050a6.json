{"sha": "59dcbd9f1c04a670cb12e1127a2f1fd0898050a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZGNiZDlmMWMwNGE2NzBjYjEyZTExMjdhMmYxZmQwODk4MDUwYTY=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-13T08:21:52Z"}, "committer": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-03-16T01:55:44Z"}, "message": "Initial support for output operands in asm.", "tree": {"sha": "a43acd4f85e6fb6abfdfb12c357bb8e5f0c10c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43acd4f85e6fb6abfdfb12c357bb8e5f0c10c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6", "html_url": "https://github.com/rust-lang/rust/commit/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd", "html_url": "https://github.com/rust-lang/rust/commit/d8ab47e7f9ed4c30c9ff3d4e2351b19992a380dd"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "3eab94b8bc4230af511d100bbdb1e45f9b595dd2", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=59dcbd9f1c04a670cb12e1127a2f1fd0898050a6", "patch": "@@ -873,7 +873,7 @@ pub fn add_comment(bcx: block, text: &str) {\n }\n \n pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n-                     inputs: &[ValueRef],\n+                     inputs: &[ValueRef], output: ValueRef,\n                      volatile: bool, alignstack: bool,\n                      dia: AsmDialect) -> ValueRef {\n     unsafe {\n@@ -885,10 +885,12 @@ pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char,\n                          else          { lib::llvm::False };\n \n         let argtys = do inputs.map |v| {\n-            io::println(fmt!(\"ARG TYPE: %?\", val_str(cx.ccx().tn, *v)));\n+            io::println(fmt!(\"INPUT TYPE: %?\", val_str(cx.ccx().tn, *v)));\n             val_ty(*v)\n         };\n-        let llfty = T_fn(argtys, T_void());\n+\n+        io::println(fmt!(\"OUTPUT TYPE: %?\", val_str(cx.ccx().tn, output)));\n+        let llfty = T_fn(argtys, val_ty(output));\n         let v = llvm::LLVMInlineAsm(llfty, asm, cons, volatile,\n                                     alignstack, dia as c_uint);\n "}, {"sha": "10462a65d06d10d1cac9df9dce04338524f46227", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dcbd9f1c04a670cb12e1127a2f1fd0898050a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=59dcbd9f1c04a670cb12e1127a2f1fd0898050a6", "patch": "@@ -562,17 +562,33 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n             let mut constraints = ~[];\n             let mut cleanups = ~[];\n \n-            // TODO: Handle outputs\n+            let outputs = do outs.map |&(c, out)| {\n+                constraints.push(copy *c);\n \n-            let inputs = do ins.map |&(c, in)| {\n+                let outty = ty::arg {\n+                    mode: ast::expl(ast::by_val),\n+                    ty: expr_ty(bcx, out)\n+                };\n \n+                unpack_result!(bcx, {\n+                    callee::trans_arg_expr(bcx, outty, out, &mut cleanups,\n+                                           None, callee::DontAutorefArg)\n+                })\n+\n+            };\n+\n+            for cleanups.each |c| {\n+                revoke_clean(bcx, *c);\n+            }\n+            cleanups = ~[];\n+\n+            let inputs = do ins.map |&(c, in)| {\n                 constraints.push(copy *c);\n \n                 let inty = ty::arg {\n                     mode: ast::expl(ast::by_val),\n                     ty: expr_ty(bcx, in)\n                 };\n-\n                 \n                 unpack_result!(bcx, {\n                     callee::trans_arg_expr(bcx, inty, in, &mut cleanups,\n@@ -598,14 +614,22 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n                 constraints += *clobs;\n             }\n \n-            io::println(fmt!(\"Inputs: %?\\nConstraints: %?\\n\", ins, constraints));\n+            io::println(fmt!(\"Constraints: %?\\n\", constraints));\n \n-            do str::as_c_str(*asm) |a| {\n+            // TODO: Handle >1 outputs\n+            let output = outputs[0];\n+\n+            let r = do str::as_c_str(*asm) |a| {\n                 do str::as_c_str(constraints) |c| {\n-                    InlineAsmCall(bcx, a, c, inputs, volatile, alignstack,\n-                                  lib::llvm::AD_ATT);\n+                    InlineAsmCall(bcx, a, c, inputs, output, volatile,\n+                                  alignstack, lib::llvm::AD_ATT)\n                 }\n-            }\n+            };\n+\n+            // TODO: Handle >1 outputs\n+            let op = PointerCast(bcx, output, T_ptr(val_ty(output)));\n+            Store(bcx, r, op);\n+\n             return bcx;\n         }\n         _ => {"}]}