{"sha": "242fa3c15b43fca473528c93714beb30ef6e1331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MmZhM2MxNWI0M2ZjYTQ3MzUyOGM5MzcxNGJlYjMwZWY2ZTEzMzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-03T13:37:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-03T13:37:12Z"}, "message": "Merge #8427\n\n8427: Move CI to rust-cache Action r=matklad a=Swatinem\n\nThis is humbling. I actually took inspiration from RAs pre-cache xtask when developing my action ;-)\r\n\r\nCloses #7731\n\nCo-authored-by: Arpad Borsos <swatinem@swatinem.de>", "tree": {"sha": "4eba887b31b469c838d95fbff60ae3433cc188bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eba887b31b469c838d95fbff60ae3433cc188bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/242fa3c15b43fca473528c93714beb30ef6e1331", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgj/yICRBK7hj4Ov3rIwAArRwIAEdT2efVOan2slctEaYTLdXa\nCysd+t4ntO0Ol0x5tkWVH40ClDfWrifm44ZeeqqM26WyI2Hzhd4P8ccShTPgsQ5L\nOERzMR7GlIPx41CgPibPAA04oYCJAiwfRdqSoOUbFZDiuGdmcXtHrID2YiqLLIKb\n7HHHPNg3lMYLGWpxDZOBFs6d1gbYUphaMlVU85j7YNv5nv7qYC19NsYgYTFncMkD\nzgNfPhVp+qs0/aUGSZJrYuwzc7QLI/9PBsPzr7DPUNOJ6Q714Ts0eFbaeMe85mDC\nJypBZV3aXfxwmSXmKv64MgoU2M2C2IaGqhJ+i9g2VX1olZBT6K0b28srYl+Owkw=\n=CAh/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4eba887b31b469c838d95fbff60ae3433cc188bb\nparent eb741e895f1a73420a401f2495c711afe37d9d19\nparent 3ce59b93e63d61daca92152cf3b842b628676426\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620049032 +0000\ncommitter GitHub <noreply@github.com> 1620049032 +0000\n\nMerge #8427\n\n8427: Move CI to rust-cache Action r=matklad a=Swatinem\n\nThis is humbling. I actually took inspiration from RAs pre-cache xtask when developing my action ;-)\r\n\r\nCloses #7731\n\nCo-authored-by: Arpad Borsos <swatinem@swatinem.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/242fa3c15b43fca473528c93714beb30ef6e1331", "html_url": "https://github.com/rust-lang/rust/commit/242fa3c15b43fca473528c93714beb30ef6e1331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/242fa3c15b43fca473528c93714beb30ef6e1331/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb741e895f1a73420a401f2495c711afe37d9d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb741e895f1a73420a401f2495c711afe37d9d19", "html_url": "https://github.com/rust-lang/rust/commit/eb741e895f1a73420a401f2495c711afe37d9d19"}, {"sha": "3ce59b93e63d61daca92152cf3b842b628676426", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce59b93e63d61daca92152cf3b842b628676426", "html_url": "https://github.com/rust-lang/rust/commit/3ce59b93e63d61daca92152cf3b842b628676426"}], "stats": {"total": 121, "additions": 4, "deletions": 117}, "files": [{"sha": "63518e67ff4ca716ccffca9e5717e4d97614b178", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/242fa3c15b43fca473528c93714beb30ef6e1331/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/242fa3c15b43fca473528c93714beb30ef6e1331/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=242fa3c15b43fca473528c93714beb30ef6e1331", "patch": "@@ -42,14 +42,6 @@ jobs:\n       if: matrix.os == 'windows-latest'\n       run: Rename-Item C:\\Users\\runneradmin\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc C:\\Users\\runneradmin\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc.old\n \n-    # Work around https://github.com/actions/cache/issues/403 by using GNU tar\n-    # instead of BSD tar.\n-    - name: Install GNU tar\n-      if: matrix.os == 'macos-latest'\n-      run: |\n-        brew install gnu-tar\n-        echo PATH=\"/usr/local/opt/gnu-tar/libexec/gnubin:$PATH\" >> $GITHUB_ENV\n-\n     - name: Install Rust toolchain\n       uses: actions-rs/toolchain@v1\n       with:\n@@ -58,29 +50,15 @@ jobs:\n         override: true\n         components: rustfmt, rust-src\n \n-    - name: Cache cargo directories\n-      uses: actions/cache@v2\n-      with:\n-        path: |\n-          ~/.cargo/registry\n-          ~/.cargo/git\n-        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n-\n-    - name: Cache cargo target dir\n-      uses: actions/cache@v2\n-      with:\n-        path: target\n-        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}\n+    - name: Cache Dependencies\n+      uses: Swatinem/rust-cache@ce325b60658c1b38465c06cc965b79baf32c1e72\n \n     - name: Compile\n       run: cargo test --no-run --locked\n \n     - name: Test\n       run: cargo test -- --nocapture\n \n-    - name: Prepare cache\n-      run: cargo xtask pre-cache\n-\n   # Weird targets to catch non-portable code\n   rust-cross:\n     name: Rust Cross\n@@ -103,13 +81,8 @@ jobs:\n     - name: Install Rust targets\n       run: rustup target add ${{ env.targets }}\n \n-    - name: Cache cargo directories\n-      uses: actions/cache@v2\n-      with:\n-        path: |\n-          ~/.cargo/registry\n-          ~/.cargo/git\n-        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n+    - name: Cache Dependencies\n+      uses: Swatinem/rust-cache@ce325b60658c1b38465c06cc965b79baf32c1e72\n \n     - name: Check\n       run: |"}, {"sha": "69b3cb9c17515415e37d02c6a1c87f40e35ad685", "filename": "xtask/src/flags.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/242fa3c15b43fca473528c93714beb30ef6e1331/xtask%2Fsrc%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242fa3c15b43fca473528c93714beb30ef6e1331/xtask%2Fsrc%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fflags.rs?ref=242fa3c15b43fca473528c93714beb30ef6e1331", "patch": "@@ -28,7 +28,6 @@ xflags::xflags! {\n         }\n \n         cmd fuzz-tests {}\n-        cmd pre-cache {}\n \n         cmd release {\n             optional --dry-run\n@@ -62,7 +61,6 @@ pub enum XtaskCmd {\n     Help(Help),\n     Install(Install),\n     FuzzTests(FuzzTests),\n-    PreCache(PreCache),\n     Release(Release),\n     Promote(Promote),\n     Dist(Dist),\n@@ -87,9 +85,6 @@ pub struct Install {\n #[derive(Debug)]\n pub struct FuzzTests;\n \n-#[derive(Debug)]\n-pub struct PreCache;\n-\n #[derive(Debug)]\n pub struct Release {\n     pub dry_run: bool,"}, {"sha": "d0bef7b7ae3b2e6bbd999e9125c50baddf957031", "filename": "xtask/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/242fa3c15b43fca473528c93714beb30ef6e1331/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242fa3c15b43fca473528c93714beb30ef6e1331/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=242fa3c15b43fca473528c93714beb30ef6e1331", "patch": "@@ -18,7 +18,6 @@ mod install;\n mod release;\n mod dist;\n mod metrics;\n-mod pre_cache;\n \n use anyhow::{bail, Result};\n use std::{\n@@ -39,7 +38,6 @@ fn main() -> Result<()> {\n         }\n         flags::XtaskCmd::Install(cmd) => cmd.run(),\n         flags::XtaskCmd::FuzzTests(_) => run_fuzzer(),\n-        flags::XtaskCmd::PreCache(cmd) => cmd.run(),\n         flags::XtaskCmd::Release(cmd) => cmd.run(),\n         flags::XtaskCmd::Promote(cmd) => cmd.run(),\n         flags::XtaskCmd::Dist(cmd) => cmd.run(),"}, {"sha": "b456224fd692c4a5d9791b7236b1d6a055c59f56", "filename": "xtask/src/pre_cache.rs", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/eb741e895f1a73420a401f2495c711afe37d9d19/xtask%2Fsrc%2Fpre_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb741e895f1a73420a401f2495c711afe37d9d19/xtask%2Fsrc%2Fpre_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpre_cache.rs?ref=eb741e895f1a73420a401f2495c711afe37d9d19", "patch": "@@ -1,79 +0,0 @@\n-use std::{\n-    fs::FileType,\n-    path::{Path, PathBuf},\n-};\n-\n-use anyhow::Result;\n-use xshell::rm_rf;\n-\n-use crate::flags;\n-\n-impl flags::PreCache {\n-    /// Cleans the `./target` dir after the build such that only\n-    /// dependencies are cached on CI.\n-    pub(crate) fn run(self) -> Result<()> {\n-        let slow_tests_cookie = Path::new(\"./target/.slow_tests_cookie\");\n-        if !slow_tests_cookie.exists() {\n-            panic!(\"slow tests were skipped on CI!\")\n-        }\n-        rm_rf(slow_tests_cookie)?;\n-\n-        for path in read_dir(\"./target/debug\", FileType::is_file)? {\n-            // Can't delete yourself on windows :-(\n-            if !path.ends_with(\"xtask.exe\") {\n-                rm_rf(&path)?\n-            }\n-        }\n-\n-        rm_rf(\"./target/.rustc_info.json\")?;\n-\n-        let to_delete = read_dir(\"./crates\", FileType::is_dir)?\n-            .into_iter()\n-            .map(|path| path.file_name().unwrap().to_string_lossy().replace('-', \"_\"))\n-            .collect::<Vec<_>>();\n-\n-        for &dir in [\"./target/debug/deps\", \"target/debug/.fingerprint\"].iter() {\n-            for path in read_dir(dir, |_file_type| true)? {\n-                if path.ends_with(\"xtask.exe\") {\n-                    continue;\n-                }\n-                let file_name = path.file_name().unwrap().to_string_lossy();\n-                let (stem, _) = match rsplit_once(&file_name, '-') {\n-                    Some(it) => it,\n-                    None => {\n-                        rm_rf(path)?;\n-                        continue;\n-                    }\n-                };\n-                let stem = stem.replace('-', \"_\");\n-                if to_delete.contains(&stem) {\n-                    rm_rf(path)?;\n-                }\n-            }\n-        }\n-\n-        Ok(())\n-    }\n-}\n-fn read_dir(path: impl AsRef<Path>, cond: impl Fn(&FileType) -> bool) -> Result<Vec<PathBuf>> {\n-    read_dir_impl(path.as_ref(), &cond)\n-}\n-\n-fn read_dir_impl(path: &Path, cond: &dyn Fn(&FileType) -> bool) -> Result<Vec<PathBuf>> {\n-    let mut res = Vec::new();\n-    for entry in path.read_dir()? {\n-        let entry = entry?;\n-        let file_type = entry.file_type()?;\n-        if cond(&file_type) {\n-            res.push(entry.path())\n-        }\n-    }\n-    Ok(res)\n-}\n-\n-fn rsplit_once(haystack: &str, delim: char) -> Option<(&str, &str)> {\n-    let mut split = haystack.rsplitn(2, delim);\n-    let suffix = split.next()?;\n-    let prefix = split.next()?;\n-    Some((prefix, suffix))\n-}"}]}