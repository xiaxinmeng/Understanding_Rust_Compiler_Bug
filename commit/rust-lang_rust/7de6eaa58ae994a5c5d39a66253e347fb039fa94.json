{"sha": "7de6eaa58ae994a5c5d39a66253e347fb039fa94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTZlYWE1OGFlOTk0YTVjNWQzOWE2NjI1M2UzNDdmYjAzOWZhOTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T13:01:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T13:01:14Z"}, "message": "remove not that useful indirection", "tree": {"sha": "20b346ced3beb9572574d2e7590b0ce26ead2461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b346ced3beb9572574d2e7590b0ce26ead2461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de6eaa58ae994a5c5d39a66253e347fb039fa94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de6eaa58ae994a5c5d39a66253e347fb039fa94", "html_url": "https://github.com/rust-lang/rust/commit/7de6eaa58ae994a5c5d39a66253e347fb039fa94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de6eaa58ae994a5c5d39a66253e347fb039fa94/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b7969bfb261fa86b4c38024f873444145fe7a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b7969bfb261fa86b4c38024f873444145fe7a2", "html_url": "https://github.com/rust-lang/rust/commit/b8b7969bfb261fa86b4c38024f873444145fe7a2"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "b3a9a2e6b9a6c5e10837b125b2b65ed376e7f4d1", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=7de6eaa58ae994a5c5d39a66253e347fb039fa94", "patch": "@@ -465,7 +465,7 @@ where\n \n                 if let Some(path) = e.path().and_then(|path| self.parse_path(path)) {\n                     if let Some(def) = self.resolver.resolve_path_as_macro(self.db, &path) {\n-                        let call_id = MacroCallLoc { def: def.id, ast_id }.id(self.db);\n+                        let call_id = self.db.intern_macro(MacroCallLoc { def: def.id, ast_id });\n                         let file_id = call_id.as_file(MacroFileKind::Expr);\n                         if let Some(node) = self.db.parse_or_expand(file_id) {\n                             if let Some(expr) = ast::Expr::cast(node) {"}, {"sha": "1a52236806d666042cfced0a3ca9f2146c724ecc", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=7de6eaa58ae994a5c5d39a66253e347fb039fa94", "patch": "@@ -263,7 +263,7 @@ impl ModuleImplBlocks {\n                     {\n                         if let Some(def) = self.module.resolver(db).resolve_path_as_macro(db, &path)\n                         {\n-                            let call_id = MacroCallLoc { def: def.id, ast_id }.id(db);\n+                            let call_id = db.intern_macro(MacroCallLoc { def: def.id, ast_id });\n                             let file_id = call_id.as_file(MacroFileKind::Items);\n                             if let Some(item_list) =\n                                 db.parse_or_expand(file_id).and_then(ast::MacroItems::cast)"}, {"sha": "dc591e8d349a9edf157c05f99cb86cd6bb6c836b", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=7de6eaa58ae994a5c5d39a66253e347fb039fa94", "patch": "@@ -448,7 +448,7 @@ where\n             );\n \n             if let Some(def) = resolved_res.resolved_def.get_macros() {\n-                let call_id = MacroCallLoc { def: def.id, ast_id: *ast_id }.id(self.db);\n+                let call_id = self.db.intern_macro(MacroCallLoc { def: def.id, ast_id: *ast_id });\n                 resolved.push((*module_id, call_id, def.id));\n                 res = ReachedFixedPoint::No;\n                 return false;\n@@ -690,7 +690,7 @@ where\n             self.def_collector.def_map[self.module_id].scope.get_legacy_macro(&name)\n         }) {\n             let def = macro_def.id;\n-            let macro_call_id = MacroCallLoc { def, ast_id }.id(self.def_collector.db);\n+            let macro_call_id = self.def_collector.db.intern_macro(MacroCallLoc { def, ast_id });\n \n             self.def_collector.collect_macro_expansion(self.module_id, macro_call_id, def);\n             return;"}, {"sha": "9100bd15cc7348f7ec1f30833beb54c3742cc663", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de6eaa58ae994a5c5d39a66253e347fb039fa94/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=7de6eaa58ae994a5c5d39a66253e347fb039fa94", "patch": "@@ -1,8 +1,8 @@\n-//! `ra_hir_def` contains initial \"phases\" of the compiler. Roughly, everything\n-//! before types.\n+//! `ra_hir_expand` deals with macro expansion.\n //!\n-//! Note that we are in the process of moving parts of `ra_hir` into\n-//! `ra_hir_def`, so this crates doesn't contain a lot at the moment.\n+//! Specifically, it implements a concept of `MacroFile` -- a file whose syntax\n+//! tree originates not from the text of some `FileId`, but from some macro\n+//! expansion.\n \n pub mod db;\n pub mod ast_id_map;\n@@ -116,22 +116,12 @@ pub struct MacroCallLoc {\n }\n \n impl MacroCallId {\n-    pub fn loc(self, db: &impl AstDatabase) -> MacroCallLoc {\n-        db.lookup_intern_macro(self)\n-    }\n-\n     pub fn as_file(self, kind: MacroFileKind) -> HirFileId {\n         let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n         macro_file.into()\n     }\n }\n \n-impl MacroCallLoc {\n-    pub fn id(self, db: &impl AstDatabase) -> MacroCallId {\n-        db.intern_macro(self)\n-    }\n-}\n-\n /// `AstId` points to an AST node in any file.\n ///\n /// It is stable across reparses, and can be used as salsa key/value."}]}