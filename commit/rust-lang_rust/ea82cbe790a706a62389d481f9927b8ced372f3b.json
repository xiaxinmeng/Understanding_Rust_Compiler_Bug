{"sha": "ea82cbe790a706a62389d481f9927b8ced372f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhODJjYmU3OTBhNzA2YTYyMzg5ZDQ4MWY5OTI3YjhjZWQzNzJmM2I=", "commit": {"author": {"name": "Brad Sherman", "email": "bsherman1096@gmail.com", "date": "2020-01-01T01:07:39Z"}, "committer": {"name": "Brad Sherman", "email": "bsherman1096@gmail.com", "date": "2020-01-16T03:20:50Z"}, "message": "Generate new lints easily\n\n- Add option in clippy_dev to automatically generate boilerplate\n  code for adding new lints", "tree": {"sha": "1e97baaaebcb0d59faea574bb28deb1a131fbe48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e97baaaebcb0d59faea574bb28deb1a131fbe48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea82cbe790a706a62389d481f9927b8ced372f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea82cbe790a706a62389d481f9927b8ced372f3b", "html_url": "https://github.com/rust-lang/rust/commit/ea82cbe790a706a62389d481f9927b8ced372f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea82cbe790a706a62389d481f9927b8ced372f3b/comments", "author": {"login": "bradsherman", "id": 15267511, "node_id": "MDQ6VXNlcjE1MjY3NTEx", "avatar_url": "https://avatars.githubusercontent.com/u/15267511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradsherman", "html_url": "https://github.com/bradsherman", "followers_url": "https://api.github.com/users/bradsherman/followers", "following_url": "https://api.github.com/users/bradsherman/following{/other_user}", "gists_url": "https://api.github.com/users/bradsherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradsherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradsherman/subscriptions", "organizations_url": "https://api.github.com/users/bradsherman/orgs", "repos_url": "https://api.github.com/users/bradsherman/repos", "events_url": "https://api.github.com/users/bradsherman/events{/privacy}", "received_events_url": "https://api.github.com/users/bradsherman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bradsherman", "id": 15267511, "node_id": "MDQ6VXNlcjE1MjY3NTEx", "avatar_url": "https://avatars.githubusercontent.com/u/15267511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bradsherman", "html_url": "https://github.com/bradsherman", "followers_url": "https://api.github.com/users/bradsherman/followers", "following_url": "https://api.github.com/users/bradsherman/following{/other_user}", "gists_url": "https://api.github.com/users/bradsherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/bradsherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bradsherman/subscriptions", "organizations_url": "https://api.github.com/users/bradsherman/orgs", "repos_url": "https://api.github.com/users/bradsherman/repos", "events_url": "https://api.github.com/users/bradsherman/events{/privacy}", "received_events_url": "https://api.github.com/users/bradsherman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be09bb47db3b1f1f5a9587f07169515164a6303f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be09bb47db3b1f1f5a9587f07169515164a6303f", "html_url": "https://github.com/rust-lang/rust/commit/be09bb47db3b1f1f5a9587f07169515164a6303f"}], "stats": {"total": 234, "additions": 234, "deletions": 0}, "files": [{"sha": "58b4f87e87275564cf39643ac46b36081192e210", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ea82cbe790a706a62389d481f9927b8ced372f3b/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea82cbe790a706a62389d481f9927b8ced372f3b/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=ea82cbe790a706a62389d481f9927b8ced372f3b", "patch": "@@ -4,6 +4,7 @@ use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n \n mod fmt;\n+mod new_lint;\n mod stderr_length_check;\n \n #[derive(PartialEq)]\n@@ -51,6 +52,47 @@ fn main() {\n                         .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n                 ),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"new_lint\")\n+                .about(\"Create new lint and run util/dev update_lints\")\n+                .arg(\n+                    Arg::with_name(\"pass\")\n+                        .short(\"p\")\n+                        .long(\"pass\")\n+                        .help(\"Specify whether the lint runs during the early or late pass\")\n+                        .takes_value(true)\n+                        .possible_values(&[\"early\", \"late\"])\n+                        .required(true),\n+                )\n+                .arg(\n+                    Arg::with_name(\"name\")\n+                        .short(\"n\")\n+                        .long(\"name\")\n+                        .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n+                        .takes_value(true)\n+                        .required(true),\n+                )\n+                .arg(\n+                    Arg::with_name(\"category\")\n+                        .short(\"c\")\n+                        .long(\"category\")\n+                        .help(\"What category the lint belongs to\")\n+                        .default_value(\"nursery\")\n+                        .possible_values(&[\n+                            \"style\",\n+                            \"correctness\",\n+                            \"complexity\",\n+                            \"perf\",\n+                            \"pedantic\",\n+                            \"restriction\",\n+                            \"cargo\",\n+                            \"nursery\",\n+                            \"internal\",\n+                            \"internal_warn\",\n+                        ])\n+                        .takes_value(true),\n+                ),\n+        )\n         .arg(\n             Arg::with_name(\"limit-stderr-length\")\n                 .long(\"limit-stderr-length\")\n@@ -75,6 +117,16 @@ fn main() {\n                 update_lints(&UpdateMode::Change);\n             }\n         },\n+        (\"new_lint\", Some(matches)) => {\n+            match new_lint::create(\n+                matches.value_of(\"pass\"),\n+                matches.value_of(\"name\"),\n+                matches.value_of(\"category\"),\n+            ) {\n+                Ok(_) => update_lints(&UpdateMode::Change),\n+                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n+            }\n+        },\n         _ => {},\n     }\n }"}, {"sha": "c5733be45ebab757f65aa05e4c972fce5ebfea00", "filename": "clippy_dev/src/new_lint.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/ea82cbe790a706a62389d481f9927b8ced372f3b/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea82cbe790a706a62389d481f9927b8ced372f3b/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=ea82cbe790a706a62389d481f9927b8ced372f3b", "patch": "@@ -0,0 +1,182 @@\n+use std::fs::{File, OpenOptions};\n+use std::io;\n+use std::io::prelude::*;\n+use std::io::ErrorKind;\n+use std::path::{Path, PathBuf};\n+\n+pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> Result<(), io::Error> {\n+    let pass = pass.expect(\"`pass` argument is validated by clap\");\n+    let lint_name = lint_name.expect(\"`name` argument is validated by clap\");\n+    let category = category.expect(\"`category` argument is validated by clap\");\n+\n+    match open_files(lint_name) {\n+        Ok((mut test_file, mut lint_file)) => {\n+            let (pass_type, pass_import, context_import) = match pass {\n+                \"early\" => (\"EarlyLintPass\", \"use syntax::ast::*;\", \"EarlyContext\"),\n+                \"late\" => (\"LateLintPass\", \"use rustc_hir::*;\", \"LateContext\"),\n+                _ => {\n+                    unreachable!(\"`pass_type` should only ever be `early` or `late`!\");\n+                },\n+            };\n+\n+            let camel_case_name = to_camel_case(lint_name);\n+\n+            if let Err(e) = test_file.write_all(get_test_file_contents(lint_name).as_bytes()) {\n+                return Err(io::Error::new(\n+                    ErrorKind::Other,\n+                    format!(\"Could not write to test file: {}\", e),\n+                ));\n+            };\n+\n+            if let Err(e) = lint_file.write_all(\n+                get_lint_file_contents(\n+                    pass_type,\n+                    lint_name,\n+                    &camel_case_name,\n+                    category,\n+                    pass_import,\n+                    context_import,\n+                )\n+                .as_bytes(),\n+            ) {\n+                return Err(io::Error::new(\n+                    ErrorKind::Other,\n+                    format!(\"Could not write to lint file: {}\", e),\n+                ));\n+            }\n+            Ok(())\n+        },\n+        Err(e) => Err(io::Error::new(\n+            ErrorKind::Other,\n+            format!(\"Unable to create lint: {}\", e),\n+        )),\n+    }\n+}\n+\n+fn open_files(lint_name: &str) -> Result<(File, File), io::Error> {\n+    let project_root = project_root()?;\n+\n+    let test_file_path = project_root.join(\"tests\").join(\"ui\").join(format!(\"{}.rs\", lint_name));\n+    let lint_file_path = project_root\n+        .join(\"clippy_lints\")\n+        .join(\"src\")\n+        .join(format!(\"{}.rs\", lint_name));\n+\n+    if Path::new(&test_file_path).exists() {\n+        return Err(io::Error::new(\n+            ErrorKind::AlreadyExists,\n+            format!(\"test file {:?} already exists\", test_file_path),\n+        ));\n+    }\n+    if Path::new(&lint_file_path).exists() {\n+        return Err(io::Error::new(\n+            ErrorKind::AlreadyExists,\n+            format!(\"lint file {:?} already exists\", lint_file_path),\n+        ));\n+    }\n+\n+    let test_file = OpenOptions::new().write(true).create_new(true).open(test_file_path)?;\n+    let lint_file = OpenOptions::new().write(true).create_new(true).open(lint_file_path)?;\n+\n+    Ok((test_file, lint_file))\n+}\n+\n+fn project_root() -> Result<PathBuf, io::Error> {\n+    let current_dir = std::env::current_dir()?;\n+    for path in current_dir.ancestors() {\n+        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n+        if let Err(err) = &result {\n+            if err.kind() == io::ErrorKind::NotFound {\n+                continue;\n+            }\n+        }\n+\n+        let content = result?;\n+        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n+            return Ok(path.to_path_buf());\n+        }\n+    }\n+    Err(io::Error::new(ErrorKind::Other, \"Unable to find project root\"))\n+}\n+\n+fn to_camel_case(name: &str) -> String {\n+    name.split('_')\n+        .map(|s| {\n+            if s.is_empty() {\n+                String::from(\"\")\n+            } else {\n+                [&s[0..1].to_uppercase(), &s[1..]].concat()\n+            }\n+        })\n+        .collect()\n+}\n+\n+fn get_test_file_contents(lint_name: &str) -> String {\n+    format!(\n+        \"#![warn(clippy::{})]\n+\n+fn main() {{\n+    // test code goes here\n+}}\n+\",\n+        lint_name\n+    )\n+}\n+\n+fn get_lint_file_contents(\n+    pass_type: &str,\n+    lint_name: &str,\n+    camel_case_name: &str,\n+    category: &str,\n+    pass_import: &str,\n+    context_import: &str,\n+) -> String {\n+    format!(\n+        \"use rustc::lint::{{LintArray, LintPass, {type}, {context_import}}};\n+use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+{pass_import}\n+\n+declare_clippy_lint! {{\n+    /// **What it does:**\n+    ///\n+    /// **Why is this bad?**\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code\n+    /// ```\n+    pub {name_upper},\n+    {category},\n+    \\\"default lint description\\\"\n+}}\n+\n+declare_lint_pass!({name_camel} => [{name_upper}]);\n+\n+impl {type} for {name_camel} {{}}\n+\",\n+        type=pass_type,\n+        name_upper=lint_name.to_uppercase(),\n+        name_camel=camel_case_name,\n+        category=category,\n+        pass_import=pass_import,\n+        context_import=context_import\n+    )\n+}\n+\n+#[test]\n+fn test_camel_case() {\n+    let s = \"a_lint\";\n+    let s2 = to_camel_case(s);\n+    assert_eq!(s2, \"ALint\");\n+\n+    let name = \"a_really_long_new_lint\";\n+    let name2 = to_camel_case(name);\n+    assert_eq!(name2, \"AReallyLongNewLint\");\n+\n+    let name3 = \"lint__name\";\n+    let name4 = to_camel_case(name3);\n+    assert_eq!(name4, \"LintName\");\n+}"}]}