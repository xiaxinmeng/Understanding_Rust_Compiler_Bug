{"sha": "21b246587c2687935bd6004ffa5dcc4f4dd6600d", "node_id": "C_kwDOAAsO6NoAKDIxYjI0NjU4N2MyNjg3OTM1YmQ2MDA0ZmZhNWRjYzRmNGRkNjYwMGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-18T10:54:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-18T10:54:53Z"}, "message": "Auto merge of #103075 - SUPERCILEX:miri-metadata, r=thomcc\n\nSupport DirEntry metadata calls in miri\n\nThis should work as it uses lstat64 which is supported here: ~https://github.com/rust-lang/miri/blob/d9ad25ee4bbd9364c498959cdc82b5fa6c41e63c/src/shims/unix/macos/foreign_items.rs#L42~ just noticed that's macos, linux would be using statx: https://github.com/rust-lang/miri/blob/86f0e63b21721fe2c14608644f467b9cb21945eb/src/shims/unix/linux/foreign_items.rs#L112\n\nThe failing syscall is `dirfd`, so maybe that should actually be added to the shims?", "tree": {"sha": "0b7347a252d987b16b179fa2e494361642e68583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b7347a252d987b16b179fa2e494361642e68583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b246587c2687935bd6004ffa5dcc4f4dd6600d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b246587c2687935bd6004ffa5dcc4f4dd6600d", "html_url": "https://github.com/rust-lang/rust/commit/21b246587c2687935bd6004ffa5dcc4f4dd6600d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b246587c2687935bd6004ffa5dcc4f4dd6600d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f8e60dddfecfc9093ee9d9f42557d8260c0355", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f8e60dddfecfc9093ee9d9f42557d8260c0355", "html_url": "https://github.com/rust-lang/rust/commit/e0f8e60dddfecfc9093ee9d9f42557d8260c0355"}, {"sha": "727335878d316f6301780d182ea14ec4fb32531d", "url": "https://api.github.com/repos/rust-lang/rust/commits/727335878d316f6301780d182ea14ec4fb32531d", "html_url": "https://github.com/rust-lang/rust/commit/727335878d316f6301780d182ea14ec4fb32531d"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "780f46f8c11eb379e6791e5ffd6e709aef7d9d9c", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21b246587c2687935bd6004ffa5dcc4f4dd6600d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b246587c2687935bd6004ffa5dcc4f4dd6600d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=21b246587c2687935bd6004ffa5dcc4f4dd6600d", "patch": "@@ -674,7 +674,10 @@ impl DirEntry {\n         self.file_name_os_str().to_os_string()\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n+    #[cfg(all(\n+        any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"),\n+        not(miri)\n+    ))]\n     pub fn metadata(&self) -> io::Result<FileAttr> {\n         let fd = cvt(unsafe { dirfd(self.dir.dirp.0) })?;\n         let name = self.name_cstr().as_ptr();\n@@ -695,7 +698,10 @@ impl DirEntry {\n         Ok(FileAttr::from_stat64(stat))\n     }\n \n-    #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\")))]\n+    #[cfg(any(\n+        not(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\")),\n+        miri\n+    ))]\n     pub fn metadata(&self) -> io::Result<FileAttr> {\n         lstat(&self.path())\n     }"}, {"sha": "e2a1d14f7404f31c038e6c96847ef5919ed66db5", "filename": "src/tools/miri/tests/pass-dep/shims/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs?ref=21b246587c2687935bd6004ffa5dcc4f4dd6600d", "patch": "@@ -404,6 +404,14 @@ fn test_directory() {\n     let mut file_names = dir_iter.map(|e| e.unwrap().file_name()).collect::<Vec<_>>();\n     file_names.sort_unstable();\n     assert_eq!(file_names, vec![\"test_file_1\", \"test_file_2\"]);\n+    // Test that read_dir metadata calls succeed\n+    assert_eq!(\n+        &[true, true],\n+        &*read_dir(&dir_path)\n+            .unwrap()\n+            .map(|e| e.unwrap().metadata().unwrap().is_file())\n+            .collect::<Vec<_>>()\n+    );\n     // Deleting the directory should fail, since it is not empty.\n     assert_eq!(ErrorKind::DirectoryNotEmpty, remove_dir(&dir_path).unwrap_err().kind());\n     // Clean up the files in the directory"}]}